
TimeCompareUnit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ddd4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040ddd4  0040ddd4  0001ddd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a10  20400000  0040dddc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00003fd4  20400a10  0040e7f0  00020a10  2**3
                  ALLOC
  4 .stack        00000404  204049e4  004127c4  00020a10  2**0
                  ALLOC
  5 .heap         00000200  20404de8  00412bc8  00020a10  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020a10  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a3e  2**0
                  CONTENTS, READONLY
  8 .debug_info   0003cbaa  00000000  00000000  00020a97  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000075d5  00000000  00000000  0005d641  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00011802  00000000  00000000  00064c16  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001280  00000000  00000000  00076418  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001758  00000000  00000000  00077698  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002cdb6  00000000  00000000  00078df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001ec53  00000000  00000000  000a5ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009dceb  00000000  00000000  000c47f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004274  00000000  00000000  001624e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e8 4d 40 20 e5 0e 40 00 e3 0e 40 00 e3 0e 40 00     .M@ ..@...@...@.
  400010:	e3 0e 40 00 e3 0e 40 00 e3 0e 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	e3 0e 40 00 e3 0e 40 00 00 00 00 00 e3 0e 40 00     ..@...@.......@.
  40003c:	99 6c 40 00 e3 0e 40 00 e3 0e 40 00 e3 0e 40 00     .l@...@...@...@.
  40004c:	e3 0e 40 00 e3 0e 40 00 e3 0e 40 00 e3 0e 40 00     ..@...@...@...@.
  40005c:	e3 0e 40 00 e3 0e 40 00 00 00 00 00 e1 0a 40 00     ..@...@.......@.
  40006c:	f5 0a 40 00 09 0b 40 00 e3 0e 40 00 e3 0e 40 00     ..@...@...@...@.
  40007c:	e3 0e 40 00 1d 0b 40 00 31 0b 40 00 e3 0e 40 00     ..@...@.1.@...@.
  40008c:	e3 0e 40 00 e3 0e 40 00 e3 0e 40 00 e3 0e 40 00     ..@...@...@...@.
  40009c:	09 67 40 00 e3 0e 40 00 e3 0e 40 00 e3 0e 40 00     .g@...@...@...@.
  4000ac:	e3 0e 40 00 e3 0e 40 00 e3 0e 40 00 e3 0e 40 00     ..@...@...@...@.
  4000bc:	e3 0e 40 00 e3 0e 40 00 e3 0e 40 00 e3 0e 40 00     ..@...@...@...@.
  4000cc:	e3 0e 40 00 e3 0e 40 00 e3 0e 40 00 e3 0e 40 00     ..@...@...@...@.
  4000dc:	ad 5f 40 00 e3 0e 40 00 e3 0e 40 00 e3 0e 40 00     ._@...@...@...@.
  4000ec:	e3 0e 40 00 e3 0e 40 00 e3 0e 40 00 e3 0e 40 00     ..@...@...@...@.
  4000fc:	e3 0e 40 00 e3 0e 40 00 e3 0e 40 00 e3 0e 40 00     ..@...@...@...@.
  40010c:	e3 0e 40 00 e3 0e 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 e3 0e 40 00 e3 0e 40 00 e3 0e 40 00     ......@...@...@.
  40012c:	e3 0e 40 00 e3 0e 40 00 e3 0e 40 00 e3 0e 40 00     ..@...@...@...@.
  40013c:	e3 0e 40 00 e3 0e 40 00 e3 0e 40 00 e3 0e 40 00     ..@...@...@...@.
  40014c:	e3 0e 40 00 e3 0e 40 00 e3 0e 40 00 e3 0e 40 00     ..@...@...@...@.
  40015c:	e3 0e 40 00 e3 0e 40 00 e3 0e 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400a10 	.word	0x20400a10
  400184:	00000000 	.word	0x00000000
  400188:	0040dddc 	.word	0x0040dddc

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	0040dddc 	.word	0x0040dddc
  4001c8:	20400a14 	.word	0x20400a14
  4001cc:	0040dddc 	.word	0x0040dddc
  4001d0:	00000000 	.word	0x00000000

004001d4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001d4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001d6:	4810      	ldr	r0, [pc, #64]	; (400218 <sysclk_init+0x44>)
  4001d8:	4b10      	ldr	r3, [pc, #64]	; (40021c <sysclk_init+0x48>)
  4001da:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001dc:	213e      	movs	r1, #62	; 0x3e
  4001de:	2000      	movs	r0, #0
  4001e0:	4b0f      	ldr	r3, [pc, #60]	; (400220 <sysclk_init+0x4c>)
  4001e2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001e4:	4c0f      	ldr	r4, [pc, #60]	; (400224 <sysclk_init+0x50>)
  4001e6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001e8:	2800      	cmp	r0, #0
  4001ea:	d0fc      	beq.n	4001e6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001ec:	4b0e      	ldr	r3, [pc, #56]	; (400228 <sysclk_init+0x54>)
  4001ee:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001f0:	4a0e      	ldr	r2, [pc, #56]	; (40022c <sysclk_init+0x58>)
  4001f2:	4b0f      	ldr	r3, [pc, #60]	; (400230 <sysclk_init+0x5c>)
  4001f4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001f6:	4c0f      	ldr	r4, [pc, #60]	; (400234 <sysclk_init+0x60>)
  4001f8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001fa:	2800      	cmp	r0, #0
  4001fc:	d0fc      	beq.n	4001f8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001fe:	2002      	movs	r0, #2
  400200:	4b0d      	ldr	r3, [pc, #52]	; (400238 <sysclk_init+0x64>)
  400202:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400204:	2010      	movs	r0, #16
  400206:	4b0d      	ldr	r3, [pc, #52]	; (40023c <sysclk_init+0x68>)
  400208:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40020a:	4b0d      	ldr	r3, [pc, #52]	; (400240 <sysclk_init+0x6c>)
  40020c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40020e:	480d      	ldr	r0, [pc, #52]	; (400244 <sysclk_init+0x70>)
  400210:	4b02      	ldr	r3, [pc, #8]	; (40021c <sysclk_init+0x48>)
  400212:	4798      	blx	r3
  400214:	bd10      	pop	{r4, pc}
  400216:	bf00      	nop
  400218:	07270e00 	.word	0x07270e00
  40021c:	004010b9 	.word	0x004010b9
  400220:	00400c65 	.word	0x00400c65
  400224:	00400cb9 	.word	0x00400cb9
  400228:	00400cc9 	.word	0x00400cc9
  40022c:	20183f01 	.word	0x20183f01
  400230:	400e0600 	.word	0x400e0600
  400234:	00400cd9 	.word	0x00400cd9
  400238:	00400bc9 	.word	0x00400bc9
  40023c:	00400c01 	.word	0x00400c01
  400240:	00400fad 	.word	0x00400fad
  400244:	08f0d180 	.word	0x08f0d180

00400248 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  40024c:	b980      	cbnz	r0, 400270 <_read+0x28>
  40024e:	460c      	mov	r4, r1
  400250:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400252:	2a00      	cmp	r2, #0
  400254:	dd0f      	ble.n	400276 <_read+0x2e>
  400256:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400258:	4e08      	ldr	r6, [pc, #32]	; (40027c <_read+0x34>)
  40025a:	4d09      	ldr	r5, [pc, #36]	; (400280 <_read+0x38>)
  40025c:	6830      	ldr	r0, [r6, #0]
  40025e:	4621      	mov	r1, r4
  400260:	682b      	ldr	r3, [r5, #0]
  400262:	4798      	blx	r3
		ptr++;
  400264:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400266:	42bc      	cmp	r4, r7
  400268:	d1f8      	bne.n	40025c <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40026a:	4640      	mov	r0, r8
  40026c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400270:	f04f 38ff 	mov.w	r8, #4294967295
  400274:	e7f9      	b.n	40026a <_read+0x22>
	for (; len > 0; --len) {
  400276:	4680      	mov	r8, r0
  400278:	e7f7      	b.n	40026a <_read+0x22>
  40027a:	bf00      	nop
  40027c:	2040392c 	.word	0x2040392c
  400280:	20403924 	.word	0x20403924

00400284 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400284:	3801      	subs	r0, #1
  400286:	2802      	cmp	r0, #2
  400288:	d815      	bhi.n	4002b6 <_write+0x32>
{
  40028a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40028e:	460e      	mov	r6, r1
  400290:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400292:	b19a      	cbz	r2, 4002bc <_write+0x38>
  400294:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400296:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4002d0 <_write+0x4c>
  40029a:	4f0c      	ldr	r7, [pc, #48]	; (4002cc <_write+0x48>)
  40029c:	f8d8 0000 	ldr.w	r0, [r8]
  4002a0:	f815 1b01 	ldrb.w	r1, [r5], #1
  4002a4:	683b      	ldr	r3, [r7, #0]
  4002a6:	4798      	blx	r3
  4002a8:	2800      	cmp	r0, #0
  4002aa:	db0a      	blt.n	4002c2 <_write+0x3e>
  4002ac:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4002ae:	3c01      	subs	r4, #1
  4002b0:	d1f4      	bne.n	40029c <_write+0x18>
  4002b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4002b6:	f04f 30ff 	mov.w	r0, #4294967295
  4002ba:	4770      	bx	lr
	for (; len != 0; --len) {
  4002bc:	4610      	mov	r0, r2
  4002be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4002c2:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4002c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002ca:	bf00      	nop
  4002cc:	20403928 	.word	0x20403928
  4002d0:	2040392c 	.word	0x2040392c

004002d4 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4002d4:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002da:	4b3b      	ldr	r3, [pc, #236]	; (4003c8 <board_init+0xf4>)
  4002dc:	605a      	str	r2, [r3, #4]
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4002de:	f5a3 6345 	sub.w	r3, r3, #3152	; 0xc50
  4002e2:	4a3a      	ldr	r2, [pc, #232]	; (4003cc <board_init+0xf8>)
  4002e4:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4002e6:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
  4002ea:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4002ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002f0:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4002f4:	4b36      	ldr	r3, [pc, #216]	; (4003d0 <board_init+0xfc>)
  4002f6:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  4002fa:	f022 0201 	bic.w	r2, r2, #1
  4002fe:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400302:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400306:	f022 0201 	bic.w	r2, r2, #1
  40030a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  40030e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400312:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400316:	200a      	movs	r0, #10
  400318:	4c2e      	ldr	r4, [pc, #184]	; (4003d4 <board_init+0x100>)
  40031a:	47a0      	blx	r4
  40031c:	200b      	movs	r0, #11
  40031e:	47a0      	blx	r4
  400320:	200c      	movs	r0, #12
  400322:	47a0      	blx	r4
  400324:	2010      	movs	r0, #16
  400326:	47a0      	blx	r4
  400328:	2011      	movs	r0, #17
  40032a:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40032c:	4b2a      	ldr	r3, [pc, #168]	; (4003d8 <board_init+0x104>)
  40032e:	f44f 7280 	mov.w	r2, #256	; 0x100
  400332:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400334:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400338:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40033a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  40033e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400342:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400344:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400348:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40034a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40034e:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400350:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400352:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400356:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400358:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40035c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40035e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400360:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400364:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400366:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40036a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  40036e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400372:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400376:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400378:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40037c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40037e:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400380:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400384:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400386:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  40038a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40038c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40038e:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400392:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400394:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400396:	4a11      	ldr	r2, [pc, #68]	; (4003dc <board_init+0x108>)
  400398:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  40039c:	f043 0310 	orr.w	r3, r3, #16
  4003a0:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  4003a4:	4b0e      	ldr	r3, [pc, #56]	; (4003e0 <board_init+0x10c>)
  4003a6:	2210      	movs	r2, #16
  4003a8:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003ae:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003b0:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4003b6:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003b8:	4311      	orrs	r1, r2
  4003ba:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4003bc:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003be:	4311      	orrs	r1, r2
  4003c0:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003c2:	605a      	str	r2, [r3, #4]
  4003c4:	bd10      	pop	{r4, pc}
  4003c6:	bf00      	nop
  4003c8:	400e1850 	.word	0x400e1850
  4003cc:	5a00080c 	.word	0x5a00080c
  4003d0:	e000ed00 	.word	0xe000ed00
  4003d4:	00400ce9 	.word	0x00400ce9
  4003d8:	400e1200 	.word	0x400e1200
  4003dc:	40088000 	.word	0x40088000
  4003e0:	400e1000 	.word	0x400e1000

004003e4 <ethernet_phy_set_link>:
 *
 * Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_set_link(Gmac *p_gmac, uint8_t uc_phy_addr,
		uint8_t uc_apply_setting_flag)
{
  4003e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4003e6:	b083      	sub	sp, #12
  4003e8:	4604      	mov	r4, r0
  4003ea:	460f      	mov	r7, r1
  4003ec:	4616      	mov	r6, r2
 * \param uc_enable   0 to disable GMAC management, else to enable it.
 */
static inline void gmac_enable_management(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  4003ee:	6803      	ldr	r3, [r0, #0]
  4003f0:	f043 0310 	orr.w	r3, r3, #16
  4003f4:	6003      	str	r3, [r0, #0]

	gmac_enable_management(p_gmac, true);

	uc_phy_address = uc_phy_addr;

	uc_rc = gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_stat1);
  4003f6:	ab01      	add	r3, sp, #4
  4003f8:	2201      	movs	r2, #1
  4003fa:	4d36      	ldr	r5, [pc, #216]	; (4004d4 <ethernet_phy_set_link+0xf0>)
  4003fc:	47a8      	blx	r5
	if (uc_rc != GMAC_OK) {
  4003fe:	b958      	cbnz	r0, 400418 <ethernet_phy_set_link+0x34>
		gmac_enable_management(p_gmac, false);

		return uc_rc;
	}

	if ((ul_stat1 & GMII_LINK_STATUS) == 0) {
  400400:	9b01      	ldr	r3, [sp, #4]
  400402:	f013 0f04 	tst.w	r3, #4
  400406:	d10d      	bne.n	400424 <ethernet_phy_set_link+0x40>
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  400408:	6823      	ldr	r3, [r4, #0]
  40040a:	f023 0310 	bic.w	r3, r3, #16
  40040e:	6023      	str	r3, [r4, #0]
		/* Disable PHY management and start the GMAC transfer */
		gmac_enable_management(p_gmac, false);

		return GMAC_INVALID;
  400410:	23ff      	movs	r3, #255	; 0xff
	gmac_enable_full_duplex(p_gmac, uc_fd);

	/* Start the GMAC transfers */
	gmac_enable_management(p_gmac, false);
	return uc_rc;
}
  400412:	4618      	mov	r0, r3
  400414:	b003      	add	sp, #12
  400416:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400418:	4603      	mov	r3, r0
  40041a:	6822      	ldr	r2, [r4, #0]
  40041c:	f022 0210 	bic.w	r2, r2, #16
  400420:	6022      	str	r2, [r4, #0]
		return uc_rc;
  400422:	e7f6      	b.n	400412 <ethernet_phy_set_link+0x2e>
	if (uc_apply_setting_flag == 0) {
  400424:	b92e      	cbnz	r6, 400432 <ethernet_phy_set_link+0x4e>
  400426:	6823      	ldr	r3, [r4, #0]
  400428:	f023 0310 	bic.w	r3, r3, #16
  40042c:	6023      	str	r3, [r4, #0]
		return uc_rc;
  40042e:	4633      	mov	r3, r6
  400430:	e7ef      	b.n	400412 <ethernet_phy_set_link+0x2e>
	uc_rc = gmac_phy_read(p_gmac, uc_phy_address, GMII_PCR1, &ul_stat2);
  400432:	466b      	mov	r3, sp
  400434:	221e      	movs	r2, #30
  400436:	4639      	mov	r1, r7
  400438:	4620      	mov	r0, r4
  40043a:	4d26      	ldr	r5, [pc, #152]	; (4004d4 <ethernet_phy_set_link+0xf0>)
  40043c:	47a8      	blx	r5
	if (uc_rc != GMAC_OK) {
  40043e:	4603      	mov	r3, r0
  400440:	b950      	cbnz	r0, 400458 <ethernet_phy_set_link+0x74>
	if ((ul_stat1 & GMII_100BASE_TX_FD) && (ul_stat2 & GMII_OMI_100BASE_TX_FD)) {
  400442:	9a01      	ldr	r2, [sp, #4]
	if ((ul_stat1 & GMII_10BASE_T_FD) && (ul_stat2 & GMII_OMI_10BASE_T_FD)) {
  400444:	f412 5f80 	tst.w	r2, #4096	; 0x1000
  400448:	d00b      	beq.n	400462 <ethernet_phy_set_link+0x7e>
  40044a:	9900      	ldr	r1, [sp, #0]
  40044c:	f011 0f05 	tst.w	r1, #5
  400450:	bf0c      	ite	eq
  400452:	2101      	moveq	r1, #1
  400454:	2100      	movne	r1, #0
  400456:	e005      	b.n	400464 <ethernet_phy_set_link+0x80>
  400458:	6822      	ldr	r2, [r4, #0]
  40045a:	f022 0210 	bic.w	r2, r2, #16
  40045e:	6022      	str	r2, [r4, #0]
		return uc_rc;
  400460:	e7d7      	b.n	400412 <ethernet_phy_set_link+0x2e>
  400462:	2101      	movs	r1, #1
	if ((ul_stat1 & GMII_100BASE_TX_HD) && (ul_stat2 & GMII_OMI_100BASE_TX_HD)) {
  400464:	f412 5f00 	tst.w	r2, #8192	; 0x2000
  400468:	d003      	beq.n	400472 <ethernet_phy_set_link+0x8e>
  40046a:	9800      	ldr	r0, [sp, #0]
  40046c:	f010 0f02 	tst.w	r0, #2
  400470:	d127      	bne.n	4004c2 <ethernet_phy_set_link+0xde>
	if ((ul_stat1 & GMII_10BASE_T_HD) && (ul_stat2 & GMII_OMI_10BASE_T_HD)) {
  400472:	f412 6f00 	tst.w	r2, #2048	; 0x800
  400476:	d003      	beq.n	400480 <ethernet_phy_set_link+0x9c>
  400478:	9a00      	ldr	r2, [sp, #0]
  40047a:	f012 0f01 	tst.w	r2, #1
  40047e:	d111      	bne.n	4004a4 <ethernet_phy_set_link+0xc0>
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_speed 1 to indicate 100Mbps, 0 to 10Mbps.
 */
static inline void gmac_set_speed(Gmac* p_gmac, uint8_t uc_speed)
{
	if (uc_speed) {
  400480:	b191      	cbz	r1, 4004a8 <ethernet_phy_set_link+0xc4>
  400482:	2201      	movs	r2, #1
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_SPD;
  400484:	6861      	ldr	r1, [r4, #4]
  400486:	f041 0101 	orr.w	r1, r1, #1
  40048a:	6061      	str	r1, [r4, #4]
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_enable   0 to disable the Full-Duplex mode, else to enable it.
 */
static inline void gmac_enable_full_duplex(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
  40048c:	b1a2      	cbz	r2, 4004b8 <ethernet_phy_set_link+0xd4>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_FD;
  40048e:	6862      	ldr	r2, [r4, #4]
  400490:	f042 0202 	orr.w	r2, r2, #2
  400494:	6062      	str	r2, [r4, #4]
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  400496:	6822      	ldr	r2, [r4, #0]
  400498:	f022 0210 	bic.w	r2, r2, #16
  40049c:	6022      	str	r2, [r4, #0]
	return uc_rc;
  40049e:	e7b8      	b.n	400412 <ethernet_phy_set_link+0x2e>
		uc_fd = false;
  4004a0:	461a      	mov	r2, r3
  4004a2:	e7ef      	b.n	400484 <ethernet_phy_set_link+0xa0>
		uc_fd = false;
  4004a4:	461a      	mov	r2, r3
  4004a6:	e000      	b.n	4004aa <ethernet_phy_set_link+0xc6>
	if (uc_speed) {
  4004a8:	2201      	movs	r2, #1
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_SPD;
  4004aa:	6861      	ldr	r1, [r4, #4]
  4004ac:	f021 0101 	bic.w	r1, r1, #1
  4004b0:	6061      	str	r1, [r4, #4]
  4004b2:	e7eb      	b.n	40048c <ethernet_phy_set_link+0xa8>
  4004b4:	461a      	mov	r2, r3
  4004b6:	e7f8      	b.n	4004aa <ethernet_phy_set_link+0xc6>
	} else {
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_FD;
  4004b8:	6862      	ldr	r2, [r4, #4]
  4004ba:	f022 0202 	bic.w	r2, r2, #2
  4004be:	6062      	str	r2, [r4, #4]
  4004c0:	e7e9      	b.n	400496 <ethernet_phy_set_link+0xb2>
	if ((ul_stat1 & GMII_10BASE_T_HD) && (ul_stat2 & GMII_OMI_10BASE_T_HD)) {
  4004c2:	f412 6f00 	tst.w	r2, #2048	; 0x800
  4004c6:	d0eb      	beq.n	4004a0 <ethernet_phy_set_link+0xbc>
  4004c8:	9a00      	ldr	r2, [sp, #0]
  4004ca:	f012 0f01 	tst.w	r2, #1
  4004ce:	d1f1      	bne.n	4004b4 <ethernet_phy_set_link+0xd0>
		uc_fd = false;
  4004d0:	461a      	mov	r2, r3
  4004d2:	e7d7      	b.n	400484 <ethernet_phy_set_link+0xa0>
  4004d4:	00400839 	.word	0x00400839

004004d8 <ethernet_phy_auto_negotiate>:
 * \param uc_phy_addr PHY address.
 *
 * Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_auto_negotiate(Gmac *p_gmac, uint8_t uc_phy_addr)
{
  4004d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4004dc:	b082      	sub	sp, #8
  4004de:	4604      	mov	r4, r0
  4004e0:	460d      	mov	r5, r1
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  4004e2:	6803      	ldr	r3, [r0, #0]
  4004e4:	f043 0310 	orr.w	r3, r3, #16
  4004e8:	6003      	str	r3, [r0, #0]
	uint8_t uc_rc;

	gmac_enable_management(p_gmac, true);

	/* Set up control register */
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMCR, &ul_value);
  4004ea:	ab01      	add	r3, sp, #4
  4004ec:	2200      	movs	r2, #0
  4004ee:	4e5d      	ldr	r6, [pc, #372]	; (400664 <ethernet_phy_auto_negotiate+0x18c>)
  4004f0:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  4004f2:	b140      	cbz	r0, 400506 <ethernet_phy_auto_negotiate+0x2e>
  4004f4:	4603      	mov	r3, r0
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  4004f6:	6822      	ldr	r2, [r4, #0]
  4004f8:	f022 0210 	bic.w	r2, r2, #16
  4004fc:	6022      	str	r2, [r4, #0]
	gmac_enable_transmit(GMAC, true);
	gmac_enable_receive(GMAC, true);

	gmac_enable_management(p_gmac, false);
	return uc_rc;
}
  4004fe:	4618      	mov	r0, r3
  400500:	b002      	add	sp, #8
  400502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ul_value &= ~(uint32_t)(GMII_LOOPBACK | GMII_POWER_DOWN);
  400506:	9b01      	ldr	r3, [sp, #4]
  400508:	f423 43b0 	bic.w	r3, r3, #22528	; 0x5800
	ul_value |= (uint32_t)GMII_ISOLATE; /* Electrically isolate PHY */
  40050c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  400510:	9301      	str	r3, [sp, #4]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  400512:	2200      	movs	r2, #0
  400514:	4629      	mov	r1, r5
  400516:	4620      	mov	r0, r4
  400518:	4e53      	ldr	r6, [pc, #332]	; (400668 <ethernet_phy_auto_negotiate+0x190>)
  40051a:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  40051c:	4603      	mov	r3, r0
  40051e:	b120      	cbz	r0, 40052a <ethernet_phy_auto_negotiate+0x52>
  400520:	6822      	ldr	r2, [r4, #0]
  400522:	f022 0210 	bic.w	r2, r2, #16
  400526:	6022      	str	r2, [r4, #0]
		return uc_rc;
  400528:	e7e9      	b.n	4004fe <ethernet_phy_auto_negotiate+0x26>
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_ANAR, ul_phy_anar);
  40052a:	f240 13e1 	movw	r3, #481	; 0x1e1
  40052e:	2204      	movs	r2, #4
  400530:	4629      	mov	r1, r5
  400532:	4620      	mov	r0, r4
  400534:	4e4c      	ldr	r6, [pc, #304]	; (400668 <ethernet_phy_auto_negotiate+0x190>)
  400536:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  400538:	4603      	mov	r3, r0
  40053a:	b120      	cbz	r0, 400546 <ethernet_phy_auto_negotiate+0x6e>
  40053c:	6822      	ldr	r2, [r4, #0]
  40053e:	f022 0210 	bic.w	r2, r2, #16
  400542:	6022      	str	r2, [r4, #0]
		return uc_rc;
  400544:	e7db      	b.n	4004fe <ethernet_phy_auto_negotiate+0x26>
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMCR, &ul_value);
  400546:	ab01      	add	r3, sp, #4
  400548:	2200      	movs	r2, #0
  40054a:	4629      	mov	r1, r5
  40054c:	4620      	mov	r0, r4
  40054e:	4e45      	ldr	r6, [pc, #276]	; (400664 <ethernet_phy_auto_negotiate+0x18c>)
  400550:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  400552:	4603      	mov	r3, r0
  400554:	b120      	cbz	r0, 400560 <ethernet_phy_auto_negotiate+0x88>
  400556:	6822      	ldr	r2, [r4, #0]
  400558:	f022 0210 	bic.w	r2, r2, #16
  40055c:	6022      	str	r2, [r4, #0]
		return uc_rc;
  40055e:	e7ce      	b.n	4004fe <ethernet_phy_auto_negotiate+0x26>
	ul_value |= GMII_SPEED_SELECT | GMII_AUTONEG | GMII_DUPLEX_MODE;
  400560:	9b01      	ldr	r3, [sp, #4]
  400562:	f443 5344 	orr.w	r3, r3, #12544	; 0x3100
  400566:	9301      	str	r3, [sp, #4]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  400568:	2200      	movs	r2, #0
  40056a:	4629      	mov	r1, r5
  40056c:	4620      	mov	r0, r4
  40056e:	4e3e      	ldr	r6, [pc, #248]	; (400668 <ethernet_phy_auto_negotiate+0x190>)
  400570:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  400572:	4603      	mov	r3, r0
  400574:	b120      	cbz	r0, 400580 <ethernet_phy_auto_negotiate+0xa8>
  400576:	6822      	ldr	r2, [r4, #0]
  400578:	f022 0210 	bic.w	r2, r2, #16
  40057c:	6022      	str	r2, [r4, #0]
		return uc_rc;
  40057e:	e7be      	b.n	4004fe <ethernet_phy_auto_negotiate+0x26>
	ul_value &= ~(uint32_t)GMII_ISOLATE;
  400580:	9b01      	ldr	r3, [sp, #4]
  400582:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  400586:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  40058a:	9301      	str	r3, [sp, #4]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  40058c:	2200      	movs	r2, #0
  40058e:	4629      	mov	r1, r5
  400590:	4620      	mov	r0, r4
  400592:	4e35      	ldr	r6, [pc, #212]	; (400668 <ethernet_phy_auto_negotiate+0x190>)
  400594:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  400596:	4603      	mov	r3, r0
  400598:	b9b0      	cbnz	r0, 4005c8 <ethernet_phy_auto_negotiate+0xf0>
  40059a:	4e34      	ldr	r6, [pc, #208]	; (40066c <ethernet_phy_auto_negotiate+0x194>)
		uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMSR, &ul_value);
  40059c:	f04f 0801 	mov.w	r8, #1
  4005a0:	4f30      	ldr	r7, [pc, #192]	; (400664 <ethernet_phy_auto_negotiate+0x18c>)
  4005a2:	ab01      	add	r3, sp, #4
  4005a4:	4642      	mov	r2, r8
  4005a6:	4629      	mov	r1, r5
  4005a8:	4620      	mov	r0, r4
  4005aa:	47b8      	blx	r7
		if (uc_rc != GMAC_OK) {
  4005ac:	4603      	mov	r3, r0
  4005ae:	b980      	cbnz	r0, 4005d2 <ethernet_phy_auto_negotiate+0xfa>
		if (ul_value & GMII_AUTONEG_COMP) {
  4005b0:	9b01      	ldr	r3, [sp, #4]
  4005b2:	f013 0f20 	tst.w	r3, #32
  4005b6:	d111      	bne.n	4005dc <ethernet_phy_auto_negotiate+0x104>
			if (++ul_retry_count >= ul_retry_max) {
  4005b8:	3e01      	subs	r6, #1
  4005ba:	d1f2      	bne.n	4005a2 <ethernet_phy_auto_negotiate+0xca>
  4005bc:	6823      	ldr	r3, [r4, #0]
  4005be:	f023 0310 	bic.w	r3, r3, #16
  4005c2:	6023      	str	r3, [r4, #0]
				return GMAC_TIMEOUT;
  4005c4:	2301      	movs	r3, #1
  4005c6:	e79a      	b.n	4004fe <ethernet_phy_auto_negotiate+0x26>
  4005c8:	6822      	ldr	r2, [r4, #0]
  4005ca:	f022 0210 	bic.w	r2, r2, #16
  4005ce:	6022      	str	r2, [r4, #0]
		return uc_rc;
  4005d0:	e795      	b.n	4004fe <ethernet_phy_auto_negotiate+0x26>
  4005d2:	6822      	ldr	r2, [r4, #0]
  4005d4:	f022 0210 	bic.w	r2, r2, #16
  4005d8:	6022      	str	r2, [r4, #0]
			return uc_rc;
  4005da:	e790      	b.n	4004fe <ethernet_phy_auto_negotiate+0x26>
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_ANLPAR, &ul_phy_analpar);
  4005dc:	466b      	mov	r3, sp
  4005de:	2205      	movs	r2, #5
  4005e0:	4629      	mov	r1, r5
  4005e2:	4620      	mov	r0, r4
  4005e4:	4d1f      	ldr	r5, [pc, #124]	; (400664 <ethernet_phy_auto_negotiate+0x18c>)
  4005e6:	47a8      	blx	r5
	if (uc_rc != GMAC_OK) {
  4005e8:	4603      	mov	r3, r0
  4005ea:	b980      	cbnz	r0, 40060e <ethernet_phy_auto_negotiate+0x136>
	if ((ul_phy_anar & ul_phy_analpar) & GMII_100TX_FDX) {
  4005ec:	9a00      	ldr	r2, [sp, #0]
  4005ee:	f412 7f80 	tst.w	r2, #256	; 0x100
  4005f2:	d113      	bne.n	40061c <ethernet_phy_auto_negotiate+0x144>
	} else if ((ul_phy_anar & ul_phy_analpar) & GMII_10_FDX) {
  4005f4:	f012 0f40 	tst.w	r2, #64	; 0x40
  4005f8:	d12c      	bne.n	400654 <ethernet_phy_auto_negotiate+0x17c>
	if (uc_speed) {
  4005fa:	f012 0f80 	tst.w	r2, #128	; 0x80
		uc_fd = false;
  4005fe:	bf08      	it	eq
  400600:	4602      	moveq	r2, r0
  400602:	d109      	bne.n	400618 <ethernet_phy_auto_negotiate+0x140>
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_SPD;
  400604:	6861      	ldr	r1, [r4, #4]
  400606:	f021 0101 	bic.w	r1, r1, #1
  40060a:	6061      	str	r1, [r4, #4]
  40060c:	e00b      	b.n	400626 <ethernet_phy_auto_negotiate+0x14e>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  40060e:	6822      	ldr	r2, [r4, #0]
  400610:	f022 0210 	bic.w	r2, r2, #16
  400614:	6022      	str	r2, [r4, #0]
		return uc_rc;
  400616:	e772      	b.n	4004fe <ethernet_phy_auto_negotiate+0x26>
		uc_fd = false;
  400618:	4602      	mov	r2, r0
  40061a:	e000      	b.n	40061e <ethernet_phy_auto_negotiate+0x146>
		uc_fd = true;
  40061c:	2201      	movs	r2, #1
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_SPD;
  40061e:	6861      	ldr	r1, [r4, #4]
  400620:	f041 0101 	orr.w	r1, r1, #1
  400624:	6061      	str	r1, [r4, #4]
	if (uc_enable) {
  400626:	b1ba      	cbz	r2, 400658 <ethernet_phy_auto_negotiate+0x180>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_FD;
  400628:	6862      	ldr	r2, [r4, #4]
  40062a:	f042 0202 	orr.w	r2, r2, #2
  40062e:	6062      	str	r2, [r4, #4]
			p_gmac->GMAC_UR |= GMAC_UR_RMII;
			break;

		case GMAC_PHY_RMII:
		default:
			p_gmac->GMAC_UR &= ~GMAC_UR_RMII;
  400630:	68e2      	ldr	r2, [r4, #12]
  400632:	f022 0201 	bic.w	r2, r2, #1
  400636:	60e2      	str	r2, [r4, #12]
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
  400638:	4a0d      	ldr	r2, [pc, #52]	; (400670 <ethernet_phy_auto_negotiate+0x198>)
  40063a:	6811      	ldr	r1, [r2, #0]
  40063c:	f041 0108 	orr.w	r1, r1, #8
  400640:	6011      	str	r1, [r2, #0]
		p_gmac->GMAC_NCR |= GMAC_NCR_RXEN;
  400642:	6811      	ldr	r1, [r2, #0]
  400644:	f041 0104 	orr.w	r1, r1, #4
  400648:	6011      	str	r1, [r2, #0]
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  40064a:	6822      	ldr	r2, [r4, #0]
  40064c:	f022 0210 	bic.w	r2, r2, #16
  400650:	6022      	str	r2, [r4, #0]
	return uc_rc;
  400652:	e754      	b.n	4004fe <ethernet_phy_auto_negotiate+0x26>
		uc_fd = true;
  400654:	2201      	movs	r2, #1
  400656:	e7d5      	b.n	400604 <ethernet_phy_auto_negotiate+0x12c>
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_FD;
  400658:	6862      	ldr	r2, [r4, #4]
  40065a:	f022 0202 	bic.w	r2, r2, #2
  40065e:	6062      	str	r2, [r4, #4]
  400660:	e7e6      	b.n	400630 <ethernet_phy_auto_negotiate+0x158>
  400662:	bf00      	nop
  400664:	00400839 	.word	0x00400839
  400668:	00400899 	.word	0x00400899
  40066c:	000f4240 	.word	0x000f4240
  400670:	40050000 	.word	0x40050000

00400674 <ethernet_phy_reset>:
 * \param uc_phy_addr PHY address.
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_reset(Gmac *p_gmac, uint8_t uc_phy_addr)
{
  400674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400678:	b083      	sub	sp, #12
  40067a:	4605      	mov	r5, r0
  40067c:	4689      	mov	r9, r1
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  40067e:	6803      	ldr	r3, [r0, #0]
  400680:	f043 0310 	orr.w	r3, r3, #16
  400684:	6003      	str	r3, [r0, #0]
	uint32_t ul_timeout = ETH_PHY_TIMEOUT;
	uint8_t uc_rc = GMAC_TIMEOUT;

	gmac_enable_management(p_gmac, true);

	ul_bmcr = GMII_RESET;
  400686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40068a:	ae02      	add	r6, sp, #8
  40068c:	f846 3d04 	str.w	r3, [r6, #-4]!
	gmac_phy_write(p_gmac, uc_phy_address, GMII_BMCR, ul_bmcr);
  400690:	2200      	movs	r2, #0
  400692:	4c0e      	ldr	r4, [pc, #56]	; (4006cc <ethernet_phy_reset+0x58>)
  400694:	47a0      	blx	r4
	uint32_t ul_timeout = ETH_PHY_TIMEOUT;
  400696:	240a      	movs	r4, #10

	do {
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMCR, &ul_bmcr);
  400698:	f04f 0800 	mov.w	r8, #0
  40069c:	4f0c      	ldr	r7, [pc, #48]	; (4006d0 <ethernet_phy_reset+0x5c>)
  40069e:	4633      	mov	r3, r6
  4006a0:	4642      	mov	r2, r8
  4006a2:	4649      	mov	r1, r9
  4006a4:	4628      	mov	r0, r5
  4006a6:	47b8      	blx	r7
		ul_timeout--;
  4006a8:	3c01      	subs	r4, #1
	} while ((ul_bmcr & GMII_RESET) && ul_timeout);
  4006aa:	9b01      	ldr	r3, [sp, #4]
  4006ac:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  4006b0:	d001      	beq.n	4006b6 <ethernet_phy_reset+0x42>
  4006b2:	2c00      	cmp	r4, #0
  4006b4:	d1f3      	bne.n	40069e <ethernet_phy_reset+0x2a>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  4006b6:	682b      	ldr	r3, [r5, #0]
  4006b8:	f023 0310 	bic.w	r3, r3, #16
  4006bc:	602b      	str	r3, [r5, #0]
	if (ul_timeout) {
		uc_rc = GMAC_OK;
	}

	return (uc_rc);
}
  4006be:	fab4 f084 	clz	r0, r4
  4006c2:	0940      	lsrs	r0, r0, #5
  4006c4:	b003      	add	sp, #12
  4006c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4006ca:	bf00      	nop
  4006cc:	00400899 	.word	0x00400899
  4006d0:	00400839 	.word	0x00400839

004006d4 <ethernet_phy_init>:
{
  4006d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4006d8:	b085      	sub	sp, #20
  4006da:	4606      	mov	r6, r0
  4006dc:	4688      	mov	r8, r1
  4006de:	4615      	mov	r5, r2
	pio_set_output(PIN_GMAC_RESET_PIO, PIN_GMAC_RESET_MASK, 1,  false, true);
  4006e0:	2401      	movs	r4, #1
  4006e2:	9400      	str	r4, [sp, #0]
  4006e4:	2300      	movs	r3, #0
  4006e6:	4622      	mov	r2, r4
  4006e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4006ec:	4843      	ldr	r0, [pc, #268]	; (4007fc <ethernet_phy_init+0x128>)
  4006ee:	4f44      	ldr	r7, [pc, #272]	; (400800 <ethernet_phy_init+0x12c>)
  4006f0:	47b8      	blx	r7
	pio_set_input(PIN_GMAC_INT_PIO, PIN_GMAC_INT_MASK, PIO_PULLUP);
  4006f2:	4622      	mov	r2, r4
  4006f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  4006f8:	4842      	ldr	r0, [pc, #264]	; (400804 <ethernet_phy_init+0x130>)
  4006fa:	4b43      	ldr	r3, [pc, #268]	; (400808 <ethernet_phy_init+0x134>)
  4006fc:	4798      	blx	r3
	pio_set_peripheral(PIN_GMAC_PIO, PIN_GMAC_PERIPH, PIN_GMAC_MASK);
  4006fe:	f240 32ff 	movw	r2, #1023	; 0x3ff
  400702:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400706:	4841      	ldr	r0, [pc, #260]	; (40080c <ethernet_phy_init+0x138>)
  400708:	4b41      	ldr	r3, [pc, #260]	; (400810 <ethernet_phy_init+0x13c>)
  40070a:	4798      	blx	r3
	ethernet_phy_reset(GMAC,uc_phy_addr);
  40070c:	4641      	mov	r1, r8
  40070e:	4841      	ldr	r0, [pc, #260]	; (400814 <ethernet_phy_init+0x140>)
  400710:	4b41      	ldr	r3, [pc, #260]	; (400818 <ethernet_phy_init+0x144>)
  400712:	4798      	blx	r3
	if (ul_mck > GMAC_MCK_SPEED_240MHZ) {
  400714:	4b41      	ldr	r3, [pc, #260]	; (40081c <ethernet_phy_init+0x148>)
  400716:	429d      	cmp	r5, r3
  400718:	d85d      	bhi.n	4007d6 <ethernet_phy_init+0x102>
	} else if (ul_mck > GMAC_MCK_SPEED_160MHZ) {
  40071a:	4b41      	ldr	r3, [pc, #260]	; (400820 <ethernet_phy_init+0x14c>)
  40071c:	429d      	cmp	r5, r3
  40071e:	d80f      	bhi.n	400740 <ethernet_phy_init+0x6c>
	} else if (ul_mck > GMAC_MCK_SPEED_120MHZ) {
  400720:	4b40      	ldr	r3, [pc, #256]	; (400824 <ethernet_phy_init+0x150>)
  400722:	429d      	cmp	r5, r3
  400724:	d83e      	bhi.n	4007a4 <ethernet_phy_init+0xd0>
	} else if (ul_mck > GMAC_MCK_SPEED_80MHZ) {
  400726:	4b40      	ldr	r3, [pc, #256]	; (400828 <ethernet_phy_init+0x154>)
  400728:	429d      	cmp	r5, r3
  40072a:	d83e      	bhi.n	4007aa <ethernet_phy_init+0xd6>
	} else if (ul_mck > GMAC_MCK_SPEED_40MHZ) {
  40072c:	4b3f      	ldr	r3, [pc, #252]	; (40082c <ethernet_phy_init+0x158>)
  40072e:	429d      	cmp	r5, r3
  400730:	d83e      	bhi.n	4007b0 <ethernet_phy_init+0xdc>
		ul_clk = GMAC_NCFGR_CLK_MCK_8;
  400732:	4b3f      	ldr	r3, [pc, #252]	; (400830 <ethernet_phy_init+0x15c>)
  400734:	429d      	cmp	r5, r3
  400736:	bf8c      	ite	hi
  400738:	f44f 2380 	movhi.w	r3, #262144	; 0x40000
  40073c:	2300      	movls	r3, #0
  40073e:	e001      	b.n	400744 <ethernet_phy_init+0x70>
		ul_clk = GMAC_NCFGR_CLK_MCK_96;
  400740:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
	p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_CLK_Msk;
  400744:	6872      	ldr	r2, [r6, #4]
  400746:	f422 12e0 	bic.w	r2, r2, #1835008	; 0x1c0000
  40074a:	6072      	str	r2, [r6, #4]
	p_gmac->GMAC_NCFGR |= ul_clk;
  40074c:	6875      	ldr	r5, [r6, #4]
  40074e:	431d      	orrs	r5, r3
  400750:	6075      	str	r5, [r6, #4]
	uint32_t ul_value = 0;
  400752:	ab04      	add	r3, sp, #16
  400754:	2200      	movs	r2, #0
  400756:	f843 2d04 	str.w	r2, [r3, #-4]!
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  40075a:	6832      	ldr	r2, [r6, #0]
  40075c:	f042 0210 	orr.w	r2, r2, #16
  400760:	6032      	str	r2, [r6, #0]
	gmac_phy_read(p_gmac, uc_phy_addr, GMII_PHYID1, &ul_value);
  400762:	2202      	movs	r2, #2
  400764:	4641      	mov	r1, r8
  400766:	4630      	mov	r0, r6
  400768:	4c32      	ldr	r4, [pc, #200]	; (400834 <ethernet_phy_init+0x160>)
  40076a:	47a0      	blx	r4
	if (ul_value != GMII_OUI_MSB) {
  40076c:	9b03      	ldr	r3, [sp, #12]
  40076e:	2b22      	cmp	r3, #34	; 0x22
  400770:	d035      	beq.n	4007de <ethernet_phy_init+0x10a>
  400772:	4644      	mov	r4, r8
  400774:	2520      	movs	r5, #32
			gmac_phy_read(p_gmac, uc_phy_address, GMII_PHYID1, &ul_value);
  400776:	f04f 0902 	mov.w	r9, #2
  40077a:	4f2e      	ldr	r7, [pc, #184]	; (400834 <ethernet_phy_init+0x160>)
			uc_phy_address = (uc_phy_address + 1) & 0x1F;
  40077c:	3401      	adds	r4, #1
  40077e:	f004 041f 	and.w	r4, r4, #31
			gmac_phy_read(p_gmac, uc_phy_address, GMII_PHYID1, &ul_value);
  400782:	ab03      	add	r3, sp, #12
  400784:	464a      	mov	r2, r9
  400786:	4621      	mov	r1, r4
  400788:	4630      	mov	r0, r6
  40078a:	47b8      	blx	r7
			if (ul_value == GMII_OUI_MSB) {
  40078c:	9b03      	ldr	r3, [sp, #12]
  40078e:	2b22      	cmp	r3, #34	; 0x22
  400790:	d011      	beq.n	4007b6 <ethernet_phy_init+0xe2>
  400792:	1e6b      	subs	r3, r5, #1
		for (uc_cnt = uc_start_addr; uc_cnt <= ETH_PHY_MAX_ADDR; uc_cnt++) {
  400794:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
  400798:	d1f0      	bne.n	40077c <ethernet_phy_init+0xa8>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  40079a:	6833      	ldr	r3, [r6, #0]
  40079c:	f023 0310 	bic.w	r3, r3, #16
  4007a0:	6033      	str	r3, [r6, #0]
  4007a2:	e018      	b.n	4007d6 <ethernet_phy_init+0x102>
		ul_clk = GMAC_NCFGR_CLK_MCK_64;
  4007a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  4007a8:	e7cc      	b.n	400744 <ethernet_phy_init+0x70>
		ul_clk = GMAC_NCFGR_CLK_MCK_48;
  4007aa:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
  4007ae:	e7c9      	b.n	400744 <ethernet_phy_init+0x70>
		ul_clk = GMAC_NCFGR_CLK_MCK_32;
  4007b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4007b4:	e7c6      	b.n	400744 <ethernet_phy_init+0x70>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  4007b6:	6833      	ldr	r3, [r6, #0]
  4007b8:	f023 0310 	bic.w	r3, r3, #16
  4007bc:	6033      	str	r3, [r6, #0]
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_value);
  4007be:	ab03      	add	r3, sp, #12
  4007c0:	2201      	movs	r2, #1
  4007c2:	4621      	mov	r1, r4
  4007c4:	4630      	mov	r0, r6
  4007c6:	4d1b      	ldr	r5, [pc, #108]	; (400834 <ethernet_phy_init+0x160>)
  4007c8:	47a8      	blx	r5
	if (uc_phy != uc_phy_addr) {
  4007ca:	45a0      	cmp	r8, r4
  4007cc:	d003      	beq.n	4007d6 <ethernet_phy_init+0x102>
		ethernet_phy_reset(p_gmac, uc_phy_addr);
  4007ce:	4641      	mov	r1, r8
  4007d0:	4630      	mov	r0, r6
  4007d2:	4b11      	ldr	r3, [pc, #68]	; (400818 <ethernet_phy_init+0x144>)
  4007d4:	4798      	blx	r3
}
  4007d6:	2000      	movs	r0, #0
  4007d8:	b005      	add	sp, #20
  4007da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4007de:	6833      	ldr	r3, [r6, #0]
  4007e0:	f023 0310 	bic.w	r3, r3, #16
  4007e4:	6033      	str	r3, [r6, #0]
	if (uc_rc != 0xFF) {
  4007e6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  4007ea:	d0f4      	beq.n	4007d6 <ethernet_phy_init+0x102>
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_value);
  4007ec:	ab03      	add	r3, sp, #12
  4007ee:	2201      	movs	r2, #1
  4007f0:	4641      	mov	r1, r8
  4007f2:	4630      	mov	r0, r6
  4007f4:	4c0f      	ldr	r4, [pc, #60]	; (400834 <ethernet_phy_init+0x160>)
  4007f6:	47a0      	blx	r4
  4007f8:	e7ed      	b.n	4007d6 <ethernet_phy_init+0x102>
  4007fa:	bf00      	nop
  4007fc:	400e1200 	.word	0x400e1200
  400800:	004009b5 	.word	0x004009b5
  400804:	400e0e00 	.word	0x400e0e00
  400808:	0040097f 	.word	0x0040097f
  40080c:	400e1400 	.word	0x400e1400
  400810:	004008ed 	.word	0x004008ed
  400814:	40050000 	.word	0x40050000
  400818:	00400675 	.word	0x00400675
  40081c:	0e4e1c00 	.word	0x0e4e1c00
  400820:	09896800 	.word	0x09896800
  400824:	07270e00 	.word	0x07270e00
  400828:	04c4b400 	.word	0x04c4b400
  40082c:	02625a00 	.word	0x02625a00
  400830:	01312d00 	.word	0x01312d00
  400834:	00400839 	.word	0x00400839

00400838 <gmac_phy_read>:
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t gmac_phy_read(Gmac* p_gmac, uint8_t uc_phy_address, uint8_t uc_address,
		uint32_t* p_value)
{
  400838:	b410      	push	{r4}
  40083a:	b083      	sub	sp, #12
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  40083c:	6884      	ldr	r4, [r0, #8]
  40083e:	f014 0f04 	tst.w	r4, #4
  400842:	d0fb      	beq.n	40083c <gmac_phy_read+0x4>
			| GMAC_MAN_REGA(uc_reg_addr)
  400844:	0492      	lsls	r2, r2, #18
  400846:	f402 04f8 	and.w	r4, r2, #8126464	; 0x7c0000
			| GMAC_MAN_DATA(us_data);
  40084a:	4a11      	ldr	r2, [pc, #68]	; (400890 <gmac_phy_read+0x58>)
  40084c:	4322      	orrs	r2, r4
			| GMAC_MAN_PHYA(uc_phy_addr)
  40084e:	05c9      	lsls	r1, r1, #23
  400850:	f001 6178 	and.w	r1, r1, #260046848	; 0xf800000
			| GMAC_MAN_DATA(us_data);
  400854:	430a      	orrs	r2, r1
	p_gmac->GMAC_MAN = GMAC_MAN_WTN(GMAC_MAN_CODE_VALUE)
  400856:	6342      	str	r2, [r0, #52]	; 0x34
	volatile uint32_t ul_retry_count = 0;
  400858:	2200      	movs	r2, #0
  40085a:	9201      	str	r2, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  40085c:	490d      	ldr	r1, [pc, #52]	; (400894 <gmac_phy_read+0x5c>)
	return ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) > 0);
  40085e:	6882      	ldr	r2, [r0, #8]
	while (!gmac_is_phy_idle(p_gmac)) {
  400860:	f012 0f04 	tst.w	r2, #4
  400864:	d107      	bne.n	400876 <gmac_phy_read+0x3e>
		ul_retry_count++;
  400866:	9a01      	ldr	r2, [sp, #4]
  400868:	3201      	adds	r2, #1
  40086a:	9201      	str	r2, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  40086c:	9a01      	ldr	r2, [sp, #4]
  40086e:	428a      	cmp	r2, r1
  400870:	d9f5      	bls.n	40085e <gmac_phy_read+0x26>
	gmac_maintain_phy(p_gmac, uc_phy_address, uc_address, 1, 0);

	if (gmac_phy_wait(p_gmac, MAC_PHY_RETRY_MAX) == GMAC_TIMEOUT) {
		return GMAC_TIMEOUT;
  400872:	2001      	movs	r0, #1
  400874:	e007      	b.n	400886 <gmac_phy_read+0x4e>
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  400876:	6882      	ldr	r2, [r0, #8]
  400878:	f012 0f04 	tst.w	r2, #4
  40087c:	d0fb      	beq.n	400876 <gmac_phy_read+0x3e>
	return (uint16_t) (p_gmac->GMAC_MAN & GMAC_MAN_DATA_Msk);
  40087e:	6b42      	ldr	r2, [r0, #52]	; 0x34
	}
	*p_value = gmac_get_phy_data(p_gmac);
  400880:	b292      	uxth	r2, r2
  400882:	601a      	str	r2, [r3, #0]
	return GMAC_OK;
  400884:	2000      	movs	r0, #0
}
  400886:	b003      	add	sp, #12
  400888:	f85d 4b04 	ldr.w	r4, [sp], #4
  40088c:	4770      	bx	lr
  40088e:	bf00      	nop
  400890:	60020000 	.word	0x60020000
  400894:	000f423f 	.word	0x000f423f

00400898 <gmac_phy_write>:
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t gmac_phy_write(Gmac* p_gmac, uint8_t uc_phy_address,
		uint8_t uc_address, uint32_t ul_value)
{
  400898:	b410      	push	{r4}
  40089a:	b083      	sub	sp, #12
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  40089c:	6884      	ldr	r4, [r0, #8]
  40089e:	f014 0f04 	tst.w	r4, #4
  4008a2:	d0fb      	beq.n	40089c <gmac_phy_write+0x4>
			| GMAC_MAN_REGA(uc_reg_addr)
  4008a4:	0492      	lsls	r2, r2, #18
  4008a6:	f402 04f8 	and.w	r4, r2, #8126464	; 0x7c0000
			| GMAC_MAN_DATA(us_data);
  4008aa:	4a0e      	ldr	r2, [pc, #56]	; (4008e4 <gmac_phy_write+0x4c>)
  4008ac:	4322      	orrs	r2, r4
			| GMAC_MAN_PHYA(uc_phy_addr)
  4008ae:	05c9      	lsls	r1, r1, #23
  4008b0:	f001 6178 	and.w	r1, r1, #260046848	; 0xf800000
			| GMAC_MAN_DATA(us_data);
  4008b4:	430a      	orrs	r2, r1
  4008b6:	b29b      	uxth	r3, r3
  4008b8:	431a      	orrs	r2, r3
	p_gmac->GMAC_MAN = GMAC_MAN_WTN(GMAC_MAN_CODE_VALUE)
  4008ba:	6342      	str	r2, [r0, #52]	; 0x34
	volatile uint32_t ul_retry_count = 0;
  4008bc:	2300      	movs	r3, #0
  4008be:	9301      	str	r3, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  4008c0:	4a09      	ldr	r2, [pc, #36]	; (4008e8 <gmac_phy_write+0x50>)
	return ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) > 0);
  4008c2:	6883      	ldr	r3, [r0, #8]
	while (!gmac_is_phy_idle(p_gmac)) {
  4008c4:	f013 0f04 	tst.w	r3, #4
  4008c8:	d107      	bne.n	4008da <gmac_phy_write+0x42>
		ul_retry_count++;
  4008ca:	9b01      	ldr	r3, [sp, #4]
  4008cc:	3301      	adds	r3, #1
  4008ce:	9301      	str	r3, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  4008d0:	9b01      	ldr	r3, [sp, #4]
  4008d2:	4293      	cmp	r3, r2
  4008d4:	d9f5      	bls.n	4008c2 <gmac_phy_write+0x2a>
			return GMAC_TIMEOUT;
  4008d6:	2001      	movs	r0, #1
  4008d8:	e000      	b.n	4008dc <gmac_phy_write+0x44>
	return GMAC_OK;
  4008da:	2000      	movs	r0, #0

	if (gmac_phy_wait(p_gmac, MAC_PHY_RETRY_MAX) == GMAC_TIMEOUT) {
		return GMAC_TIMEOUT;
	}
	return GMAC_OK;
}
  4008dc:	b003      	add	sp, #12
  4008de:	f85d 4b04 	ldr.w	r4, [sp], #4
  4008e2:	4770      	bx	lr
  4008e4:	50020000 	.word	0x50020000
  4008e8:	000f423f 	.word	0x000f423f

004008ec <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4008ec:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4008ee:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4008f2:	d03a      	beq.n	40096a <pio_set_peripheral+0x7e>
  4008f4:	d813      	bhi.n	40091e <pio_set_peripheral+0x32>
  4008f6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4008fa:	d025      	beq.n	400948 <pio_set_peripheral+0x5c>
  4008fc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400900:	d10a      	bne.n	400918 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400902:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400904:	4313      	orrs	r3, r2
  400906:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400908:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40090a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40090c:	400b      	ands	r3, r1
  40090e:	ea23 0302 	bic.w	r3, r3, r2
  400912:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400914:	6042      	str	r2, [r0, #4]
  400916:	4770      	bx	lr
	switch (ul_type) {
  400918:	2900      	cmp	r1, #0
  40091a:	d1fb      	bne.n	400914 <pio_set_peripheral+0x28>
  40091c:	4770      	bx	lr
  40091e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400922:	d021      	beq.n	400968 <pio_set_peripheral+0x7c>
  400924:	d809      	bhi.n	40093a <pio_set_peripheral+0x4e>
  400926:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40092a:	d1f3      	bne.n	400914 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  40092c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40092e:	4313      	orrs	r3, r2
  400930:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400932:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400934:	4313      	orrs	r3, r2
  400936:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400938:	e7ec      	b.n	400914 <pio_set_peripheral+0x28>
	switch (ul_type) {
  40093a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40093e:	d013      	beq.n	400968 <pio_set_peripheral+0x7c>
  400940:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400944:	d010      	beq.n	400968 <pio_set_peripheral+0x7c>
  400946:	e7e5      	b.n	400914 <pio_set_peripheral+0x28>
{
  400948:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  40094a:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40094c:	6f04      	ldr	r4, [r0, #112]	; 0x70
  40094e:	43d3      	mvns	r3, r2
  400950:	4021      	ands	r1, r4
  400952:	461c      	mov	r4, r3
  400954:	4019      	ands	r1, r3
  400956:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400958:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40095a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40095c:	400b      	ands	r3, r1
  40095e:	4023      	ands	r3, r4
  400960:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400962:	6042      	str	r2, [r0, #4]
}
  400964:	f85d 4b04 	ldr.w	r4, [sp], #4
  400968:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  40096a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40096c:	6f01      	ldr	r1, [r0, #112]	; 0x70
  40096e:	400b      	ands	r3, r1
  400970:	ea23 0302 	bic.w	r3, r3, r2
  400974:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400976:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400978:	4313      	orrs	r3, r2
  40097a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40097c:	e7ca      	b.n	400914 <pio_set_peripheral+0x28>

0040097e <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40097e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400980:	f012 0f01 	tst.w	r2, #1
  400984:	d10d      	bne.n	4009a2 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400986:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400988:	f012 0f0a 	tst.w	r2, #10
  40098c:	d00b      	beq.n	4009a6 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  40098e:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400990:	f012 0f02 	tst.w	r2, #2
  400994:	d109      	bne.n	4009aa <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400996:	f012 0f08 	tst.w	r2, #8
  40099a:	d008      	beq.n	4009ae <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  40099c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  4009a0:	e005      	b.n	4009ae <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  4009a2:	6641      	str	r1, [r0, #100]	; 0x64
  4009a4:	e7f0      	b.n	400988 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  4009a6:	6241      	str	r1, [r0, #36]	; 0x24
  4009a8:	e7f2      	b.n	400990 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  4009aa:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  4009ae:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4009b0:	6001      	str	r1, [r0, #0]
  4009b2:	4770      	bx	lr

004009b4 <pio_set_output>:
{
  4009b4:	b410      	push	{r4}
  4009b6:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4009b8:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4009ba:	b94c      	cbnz	r4, 4009d0 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  4009bc:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4009be:	b14b      	cbz	r3, 4009d4 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  4009c0:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4009c2:	b94a      	cbnz	r2, 4009d8 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  4009c4:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4009c6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4009c8:	6001      	str	r1, [r0, #0]
}
  4009ca:	f85d 4b04 	ldr.w	r4, [sp], #4
  4009ce:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4009d0:	6641      	str	r1, [r0, #100]	; 0x64
  4009d2:	e7f4      	b.n	4009be <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  4009d4:	6541      	str	r1, [r0, #84]	; 0x54
  4009d6:	e7f4      	b.n	4009c2 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  4009d8:	6301      	str	r1, [r0, #48]	; 0x30
  4009da:	e7f4      	b.n	4009c6 <pio_set_output+0x12>

004009dc <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  4009dc:	f012 0f10 	tst.w	r2, #16
  4009e0:	d012      	beq.n	400a08 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  4009e2:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4009e6:	f012 0f20 	tst.w	r2, #32
  4009ea:	d007      	beq.n	4009fc <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  4009ec:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  4009f0:	f012 0f40 	tst.w	r2, #64	; 0x40
  4009f4:	d005      	beq.n	400a02 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  4009f6:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  4009fa:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  4009fc:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  400a00:	e7f6      	b.n	4009f0 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  400a02:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  400a06:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  400a08:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400a0c:	4770      	bx	lr

00400a0e <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  400a0e:	6401      	str	r1, [r0, #64]	; 0x40
  400a10:	4770      	bx	lr

00400a12 <pio_disable_interrupt>:
	p_pio->PIO_IDR = ul_mask;
  400a12:	6441      	str	r1, [r0, #68]	; 0x44
  400a14:	4770      	bx	lr

00400a16 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400a16:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400a18:	4770      	bx	lr

00400a1a <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400a1a:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400a1c:	4770      	bx	lr
	...

00400a20 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400a24:	4604      	mov	r4, r0
  400a26:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400a28:	4b0e      	ldr	r3, [pc, #56]	; (400a64 <pio_handler_process+0x44>)
  400a2a:	4798      	blx	r3
  400a2c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400a2e:	4620      	mov	r0, r4
  400a30:	4b0d      	ldr	r3, [pc, #52]	; (400a68 <pio_handler_process+0x48>)
  400a32:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400a34:	4005      	ands	r5, r0
  400a36:	d013      	beq.n	400a60 <pio_handler_process+0x40>
  400a38:	4c0c      	ldr	r4, [pc, #48]	; (400a6c <pio_handler_process+0x4c>)
  400a3a:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400a3e:	e003      	b.n	400a48 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400a40:	42b4      	cmp	r4, r6
  400a42:	d00d      	beq.n	400a60 <pio_handler_process+0x40>
  400a44:	3410      	adds	r4, #16
		while (status != 0) {
  400a46:	b15d      	cbz	r5, 400a60 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400a48:	6820      	ldr	r0, [r4, #0]
  400a4a:	4540      	cmp	r0, r8
  400a4c:	d1f8      	bne.n	400a40 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400a4e:	6861      	ldr	r1, [r4, #4]
  400a50:	4229      	tst	r1, r5
  400a52:	d0f5      	beq.n	400a40 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400a54:	68e3      	ldr	r3, [r4, #12]
  400a56:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400a58:	6863      	ldr	r3, [r4, #4]
  400a5a:	ea25 0503 	bic.w	r5, r5, r3
  400a5e:	e7ef      	b.n	400a40 <pio_handler_process+0x20>
  400a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400a64:	00400a17 	.word	0x00400a17
  400a68:	00400a1b 	.word	0x00400a1b
  400a6c:	20400a2c 	.word	0x20400a2c

00400a70 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400a72:	4c18      	ldr	r4, [pc, #96]	; (400ad4 <pio_handler_set+0x64>)
  400a74:	6826      	ldr	r6, [r4, #0]
  400a76:	2e06      	cmp	r6, #6
  400a78:	d82a      	bhi.n	400ad0 <pio_handler_set+0x60>
  400a7a:	f04f 0c00 	mov.w	ip, #0
  400a7e:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400a80:	4f15      	ldr	r7, [pc, #84]	; (400ad8 <pio_handler_set+0x68>)
  400a82:	e004      	b.n	400a8e <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400a84:	3401      	adds	r4, #1
  400a86:	b2e4      	uxtb	r4, r4
  400a88:	46a4      	mov	ip, r4
  400a8a:	42a6      	cmp	r6, r4
  400a8c:	d309      	bcc.n	400aa2 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  400a8e:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400a90:	0125      	lsls	r5, r4, #4
  400a92:	597d      	ldr	r5, [r7, r5]
  400a94:	428d      	cmp	r5, r1
  400a96:	d1f5      	bne.n	400a84 <pio_handler_set+0x14>
  400a98:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  400a9c:	686d      	ldr	r5, [r5, #4]
  400a9e:	4295      	cmp	r5, r2
  400aa0:	d1f0      	bne.n	400a84 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400aa2:	4d0d      	ldr	r5, [pc, #52]	; (400ad8 <pio_handler_set+0x68>)
  400aa4:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  400aa8:	eb05 040e 	add.w	r4, r5, lr
  400aac:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  400ab0:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  400ab2:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  400ab4:	9906      	ldr	r1, [sp, #24]
  400ab6:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  400ab8:	3601      	adds	r6, #1
  400aba:	4566      	cmp	r6, ip
  400abc:	d005      	beq.n	400aca <pio_handler_set+0x5a>
  400abe:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400ac0:	461a      	mov	r2, r3
  400ac2:	4b06      	ldr	r3, [pc, #24]	; (400adc <pio_handler_set+0x6c>)
  400ac4:	4798      	blx	r3

	return 0;
  400ac6:	2000      	movs	r0, #0
  400ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  400aca:	4902      	ldr	r1, [pc, #8]	; (400ad4 <pio_handler_set+0x64>)
  400acc:	600e      	str	r6, [r1, #0]
  400ace:	e7f6      	b.n	400abe <pio_handler_set+0x4e>
		return 1;
  400ad0:	2001      	movs	r0, #1
}
  400ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ad4:	20400a9c 	.word	0x20400a9c
  400ad8:	20400a2c 	.word	0x20400a2c
  400adc:	004009dd 	.word	0x004009dd

00400ae0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400ae0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400ae2:	210a      	movs	r1, #10
  400ae4:	4801      	ldr	r0, [pc, #4]	; (400aec <PIOA_Handler+0xc>)
  400ae6:	4b02      	ldr	r3, [pc, #8]	; (400af0 <PIOA_Handler+0x10>)
  400ae8:	4798      	blx	r3
  400aea:	bd08      	pop	{r3, pc}
  400aec:	400e0e00 	.word	0x400e0e00
  400af0:	00400a21 	.word	0x00400a21

00400af4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400af4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400af6:	210b      	movs	r1, #11
  400af8:	4801      	ldr	r0, [pc, #4]	; (400b00 <PIOB_Handler+0xc>)
  400afa:	4b02      	ldr	r3, [pc, #8]	; (400b04 <PIOB_Handler+0x10>)
  400afc:	4798      	blx	r3
  400afe:	bd08      	pop	{r3, pc}
  400b00:	400e1000 	.word	0x400e1000
  400b04:	00400a21 	.word	0x00400a21

00400b08 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400b08:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400b0a:	210c      	movs	r1, #12
  400b0c:	4801      	ldr	r0, [pc, #4]	; (400b14 <PIOC_Handler+0xc>)
  400b0e:	4b02      	ldr	r3, [pc, #8]	; (400b18 <PIOC_Handler+0x10>)
  400b10:	4798      	blx	r3
  400b12:	bd08      	pop	{r3, pc}
  400b14:	400e1200 	.word	0x400e1200
  400b18:	00400a21 	.word	0x00400a21

00400b1c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400b1c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400b1e:	2110      	movs	r1, #16
  400b20:	4801      	ldr	r0, [pc, #4]	; (400b28 <PIOD_Handler+0xc>)
  400b22:	4b02      	ldr	r3, [pc, #8]	; (400b2c <PIOD_Handler+0x10>)
  400b24:	4798      	blx	r3
  400b26:	bd08      	pop	{r3, pc}
  400b28:	400e1400 	.word	0x400e1400
  400b2c:	00400a21 	.word	0x00400a21

00400b30 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400b30:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400b32:	2111      	movs	r1, #17
  400b34:	4801      	ldr	r0, [pc, #4]	; (400b3c <PIOE_Handler+0xc>)
  400b36:	4b02      	ldr	r3, [pc, #8]	; (400b40 <PIOE_Handler+0x10>)
  400b38:	4798      	blx	r3
  400b3a:	bd08      	pop	{r3, pc}
  400b3c:	400e1600 	.word	0x400e1600
  400b40:	00400a21 	.word	0x00400a21

00400b44 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  400b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400b46:	4606      	mov	r6, r0
  400b48:	460d      	mov	r5, r1
  400b4a:	4614      	mov	r4, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  400b4c:	4b17      	ldr	r3, [pc, #92]	; (400bac <pio_handler_set_priority+0x68>)
  400b4e:	4798      	blx	r3
  400b50:	4607      	mov	r7, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  400b52:	f04f 31ff 	mov.w	r1, #4294967295
  400b56:	4630      	mov	r0, r6
  400b58:	4b15      	ldr	r3, [pc, #84]	; (400bb0 <pio_handler_set_priority+0x6c>)
  400b5a:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  400b5c:	4630      	mov	r0, r6
  400b5e:	4b15      	ldr	r3, [pc, #84]	; (400bb4 <pio_handler_set_priority+0x70>)
  400b60:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  400b62:	fa5f fe85 	uxtb.w	lr, r5
  400b66:	f00e 031f 	and.w	r3, lr, #31
  400b6a:	2201      	movs	r2, #1
  400b6c:	fa02 f303 	lsl.w	r3, r2, r3
  400b70:	0968      	lsrs	r0, r5, #5
  400b72:	4911      	ldr	r1, [pc, #68]	; (400bb8 <pio_handler_set_priority+0x74>)
  400b74:	eb01 0280 	add.w	r2, r1, r0, lsl #2
  400b78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400b7c:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  400b80:	2d00      	cmp	r5, #0
  400b82:	db0a      	blt.n	400b9a <pio_handler_set_priority+0x56>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400b84:	0164      	lsls	r4, r4, #5
  400b86:	b2e4      	uxtb	r4, r4
  400b88:	4a0c      	ldr	r2, [pc, #48]	; (400bbc <pio_handler_set_priority+0x78>)
  400b8a:	5554      	strb	r4, [r2, r5]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400b8c:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  400b90:	4639      	mov	r1, r7
  400b92:	4630      	mov	r0, r6
  400b94:	4b0a      	ldr	r3, [pc, #40]	; (400bc0 <pio_handler_set_priority+0x7c>)
  400b96:	4798      	blx	r3
  400b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400b9a:	f00e 0e0f 	and.w	lr, lr, #15
  400b9e:	0164      	lsls	r4, r4, #5
  400ba0:	b2e4      	uxtb	r4, r4
  400ba2:	4a08      	ldr	r2, [pc, #32]	; (400bc4 <pio_handler_set_priority+0x80>)
  400ba4:	f802 400e 	strb.w	r4, [r2, lr]
  400ba8:	e7f0      	b.n	400b8c <pio_handler_set_priority+0x48>
  400baa:	bf00      	nop
  400bac:	00400a1b 	.word	0x00400a1b
  400bb0:	00400a13 	.word	0x00400a13
  400bb4:	00400a17 	.word	0x00400a17
  400bb8:	e000e100 	.word	0xe000e100
  400bbc:	e000e400 	.word	0xe000e400
  400bc0:	00400a0f 	.word	0x00400a0f
  400bc4:	e000ed14 	.word	0xe000ed14

00400bc8 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400bc8:	2803      	cmp	r0, #3
  400bca:	d011      	beq.n	400bf0 <pmc_mck_set_division+0x28>
  400bcc:	2804      	cmp	r0, #4
  400bce:	d012      	beq.n	400bf6 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400bd0:	2802      	cmp	r0, #2
  400bd2:	bf0c      	ite	eq
  400bd4:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400bd8:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400bda:	4a08      	ldr	r2, [pc, #32]	; (400bfc <pmc_mck_set_division+0x34>)
  400bdc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400be2:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400be4:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400be6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400be8:	f013 0f08 	tst.w	r3, #8
  400bec:	d0fb      	beq.n	400be6 <pmc_mck_set_division+0x1e>
}
  400bee:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400bf0:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400bf4:	e7f1      	b.n	400bda <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400bf6:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400bfa:	e7ee      	b.n	400bda <pmc_mck_set_division+0x12>
  400bfc:	400e0600 	.word	0x400e0600

00400c00 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400c00:	4a17      	ldr	r2, [pc, #92]	; (400c60 <pmc_switch_mck_to_pllack+0x60>)
  400c02:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400c08:	4318      	orrs	r0, r3
  400c0a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400c0c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400c0e:	f013 0f08 	tst.w	r3, #8
  400c12:	d10a      	bne.n	400c2a <pmc_switch_mck_to_pllack+0x2a>
  400c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400c18:	4911      	ldr	r1, [pc, #68]	; (400c60 <pmc_switch_mck_to_pllack+0x60>)
  400c1a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400c1c:	f012 0f08 	tst.w	r2, #8
  400c20:	d103      	bne.n	400c2a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400c22:	3b01      	subs	r3, #1
  400c24:	d1f9      	bne.n	400c1a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400c26:	2001      	movs	r0, #1
  400c28:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400c2a:	4a0d      	ldr	r2, [pc, #52]	; (400c60 <pmc_switch_mck_to_pllack+0x60>)
  400c2c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400c2e:	f023 0303 	bic.w	r3, r3, #3
  400c32:	f043 0302 	orr.w	r3, r3, #2
  400c36:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400c38:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400c3a:	f013 0f08 	tst.w	r3, #8
  400c3e:	d10a      	bne.n	400c56 <pmc_switch_mck_to_pllack+0x56>
  400c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400c44:	4906      	ldr	r1, [pc, #24]	; (400c60 <pmc_switch_mck_to_pllack+0x60>)
  400c46:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400c48:	f012 0f08 	tst.w	r2, #8
  400c4c:	d105      	bne.n	400c5a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400c4e:	3b01      	subs	r3, #1
  400c50:	d1f9      	bne.n	400c46 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400c52:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400c54:	4770      	bx	lr
	return 0;
  400c56:	2000      	movs	r0, #0
  400c58:	4770      	bx	lr
  400c5a:	2000      	movs	r0, #0
  400c5c:	4770      	bx	lr
  400c5e:	bf00      	nop
  400c60:	400e0600 	.word	0x400e0600

00400c64 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400c64:	b9a0      	cbnz	r0, 400c90 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400c66:	480e      	ldr	r0, [pc, #56]	; (400ca0 <pmc_switch_mainck_to_xtal+0x3c>)
  400c68:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400c6a:	0209      	lsls	r1, r1, #8
  400c6c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400c6e:	4a0d      	ldr	r2, [pc, #52]	; (400ca4 <pmc_switch_mainck_to_xtal+0x40>)
  400c70:	401a      	ands	r2, r3
  400c72:	4b0d      	ldr	r3, [pc, #52]	; (400ca8 <pmc_switch_mainck_to_xtal+0x44>)
  400c74:	4313      	orrs	r3, r2
  400c76:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400c78:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400c7a:	4602      	mov	r2, r0
  400c7c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400c7e:	f013 0f01 	tst.w	r3, #1
  400c82:	d0fb      	beq.n	400c7c <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400c84:	4a06      	ldr	r2, [pc, #24]	; (400ca0 <pmc_switch_mainck_to_xtal+0x3c>)
  400c86:	6a11      	ldr	r1, [r2, #32]
  400c88:	4b08      	ldr	r3, [pc, #32]	; (400cac <pmc_switch_mainck_to_xtal+0x48>)
  400c8a:	430b      	orrs	r3, r1
  400c8c:	6213      	str	r3, [r2, #32]
  400c8e:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400c90:	4903      	ldr	r1, [pc, #12]	; (400ca0 <pmc_switch_mainck_to_xtal+0x3c>)
  400c92:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400c94:	4a06      	ldr	r2, [pc, #24]	; (400cb0 <pmc_switch_mainck_to_xtal+0x4c>)
  400c96:	401a      	ands	r2, r3
  400c98:	4b06      	ldr	r3, [pc, #24]	; (400cb4 <pmc_switch_mainck_to_xtal+0x50>)
  400c9a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400c9c:	620b      	str	r3, [r1, #32]
  400c9e:	4770      	bx	lr
  400ca0:	400e0600 	.word	0x400e0600
  400ca4:	ffc8fffc 	.word	0xffc8fffc
  400ca8:	00370001 	.word	0x00370001
  400cac:	01370000 	.word	0x01370000
  400cb0:	fec8fffc 	.word	0xfec8fffc
  400cb4:	01370002 	.word	0x01370002

00400cb8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400cb8:	4b02      	ldr	r3, [pc, #8]	; (400cc4 <pmc_osc_is_ready_mainck+0xc>)
  400cba:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400cbc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400cc0:	4770      	bx	lr
  400cc2:	bf00      	nop
  400cc4:	400e0600 	.word	0x400e0600

00400cc8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400cc8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400ccc:	4b01      	ldr	r3, [pc, #4]	; (400cd4 <pmc_disable_pllack+0xc>)
  400cce:	629a      	str	r2, [r3, #40]	; 0x28
  400cd0:	4770      	bx	lr
  400cd2:	bf00      	nop
  400cd4:	400e0600 	.word	0x400e0600

00400cd8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400cd8:	4b02      	ldr	r3, [pc, #8]	; (400ce4 <pmc_is_locked_pllack+0xc>)
  400cda:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400cdc:	f000 0002 	and.w	r0, r0, #2
  400ce0:	4770      	bx	lr
  400ce2:	bf00      	nop
  400ce4:	400e0600 	.word	0x400e0600

00400ce8 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  400ce8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400cec:	4b05      	ldr	r3, [pc, #20]	; (400d04 <pmc_enable_periph_clk+0x1c>)
  400cee:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  400cf2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400cf6:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  400cfa:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400cfe:	2000      	movs	r0, #0
  400d00:	4770      	bx	lr
  400d02:	bf00      	nop
  400d04:	400e0600 	.word	0x400e0600

00400d08 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400d08:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400d0a:	0189      	lsls	r1, r1, #6
  400d0c:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400d0e:	2402      	movs	r4, #2
  400d10:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400d12:	f04f 31ff 	mov.w	r1, #4294967295
  400d16:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400d18:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400d1a:	605a      	str	r2, [r3, #4]
}
  400d1c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400d20:	4770      	bx	lr

00400d22 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400d22:	0189      	lsls	r1, r1, #6
  400d24:	2305      	movs	r3, #5
  400d26:	5043      	str	r3, [r0, r1]
  400d28:	4770      	bx	lr

00400d2a <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400d2a:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400d2e:	61ca      	str	r2, [r1, #28]
  400d30:	4770      	bx	lr

00400d32 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400d32:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400d36:	624a      	str	r2, [r1, #36]	; 0x24
  400d38:	4770      	bx	lr

00400d3a <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400d3a:	b4f0      	push	{r4, r5, r6, r7}
  400d3c:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400d3e:	2402      	movs	r4, #2
  400d40:	9401      	str	r4, [sp, #4]
  400d42:	2408      	movs	r4, #8
  400d44:	9402      	str	r4, [sp, #8]
  400d46:	2420      	movs	r4, #32
  400d48:	9403      	str	r4, [sp, #12]
  400d4a:	2480      	movs	r4, #128	; 0x80
  400d4c:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400d4e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400d50:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400d52:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400d54:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400d58:	d814      	bhi.n	400d84 <tc_find_mck_divisor+0x4a>
  400d5a:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400d5c:	42a0      	cmp	r0, r4
  400d5e:	d217      	bcs.n	400d90 <tc_find_mck_divisor+0x56>
  400d60:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400d62:	af01      	add	r7, sp, #4
  400d64:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  400d68:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400d6c:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400d6e:	4284      	cmp	r4, r0
  400d70:	d30a      	bcc.n	400d88 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400d72:	4286      	cmp	r6, r0
  400d74:	d90d      	bls.n	400d92 <tc_find_mck_divisor+0x58>
			ul_index++) {
  400d76:	3501      	adds	r5, #1
	for (ul_index = 0;
  400d78:	2d05      	cmp	r5, #5
  400d7a:	d1f3      	bne.n	400d64 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400d7c:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400d7e:	b006      	add	sp, #24
  400d80:	bcf0      	pop	{r4, r5, r6, r7}
  400d82:	4770      	bx	lr
			return 0;
  400d84:	2000      	movs	r0, #0
  400d86:	e7fa      	b.n	400d7e <tc_find_mck_divisor+0x44>
  400d88:	2000      	movs	r0, #0
  400d8a:	e7f8      	b.n	400d7e <tc_find_mck_divisor+0x44>
	return 1;
  400d8c:	2001      	movs	r0, #1
  400d8e:	e7f6      	b.n	400d7e <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  400d90:	2500      	movs	r5, #0
	if (p_uldiv) {
  400d92:	b12a      	cbz	r2, 400da0 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  400d94:	a906      	add	r1, sp, #24
  400d96:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400d9a:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400d9e:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  400da0:	2b00      	cmp	r3, #0
  400da2:	d0f3      	beq.n	400d8c <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  400da4:	601d      	str	r5, [r3, #0]
	return 1;
  400da6:	2001      	movs	r0, #1
  400da8:	e7e9      	b.n	400d7e <tc_find_mck_divisor+0x44>

00400daa <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400daa:	6943      	ldr	r3, [r0, #20]
  400dac:	f013 0f02 	tst.w	r3, #2
  400db0:	d002      	beq.n	400db8 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400db2:	61c1      	str	r1, [r0, #28]
	return 0;
  400db4:	2000      	movs	r0, #0
  400db6:	4770      	bx	lr
		return 1;
  400db8:	2001      	movs	r0, #1
}
  400dba:	4770      	bx	lr

00400dbc <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400dbc:	6943      	ldr	r3, [r0, #20]
  400dbe:	f013 0f01 	tst.w	r3, #1
  400dc2:	d003      	beq.n	400dcc <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400dc4:	6983      	ldr	r3, [r0, #24]
  400dc6:	700b      	strb	r3, [r1, #0]
	return 0;
  400dc8:	2000      	movs	r0, #0
  400dca:	4770      	bx	lr
		return 1;
  400dcc:	2001      	movs	r0, #1
}
  400dce:	4770      	bx	lr

00400dd0 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400dd0:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400dd2:	010b      	lsls	r3, r1, #4
  400dd4:	4293      	cmp	r3, r2
  400dd6:	d914      	bls.n	400e02 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400dd8:	00c9      	lsls	r1, r1, #3
  400dda:	084b      	lsrs	r3, r1, #1
  400ddc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400de0:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400de4:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400de6:	1e5c      	subs	r4, r3, #1
  400de8:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400dec:	428c      	cmp	r4, r1
  400dee:	d901      	bls.n	400df4 <usart_set_async_baudrate+0x24>
		return 1;
  400df0:	2001      	movs	r0, #1
  400df2:	e017      	b.n	400e24 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400df4:	6841      	ldr	r1, [r0, #4]
  400df6:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400dfa:	6041      	str	r1, [r0, #4]
  400dfc:	e00c      	b.n	400e18 <usart_set_async_baudrate+0x48>
		return 1;
  400dfe:	2001      	movs	r0, #1
  400e00:	e010      	b.n	400e24 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400e02:	0859      	lsrs	r1, r3, #1
  400e04:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400e08:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400e0c:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400e0e:	1e5c      	subs	r4, r3, #1
  400e10:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400e14:	428c      	cmp	r4, r1
  400e16:	d8f2      	bhi.n	400dfe <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400e18:	0412      	lsls	r2, r2, #16
  400e1a:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400e1e:	431a      	orrs	r2, r3
  400e20:	6202      	str	r2, [r0, #32]

	return 0;
  400e22:	2000      	movs	r0, #0
}
  400e24:	f85d 4b04 	ldr.w	r4, [sp], #4
  400e28:	4770      	bx	lr
	...

00400e2c <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400e2c:	4b08      	ldr	r3, [pc, #32]	; (400e50 <usart_reset+0x24>)
  400e2e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400e32:	2300      	movs	r3, #0
  400e34:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400e36:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400e38:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400e3a:	2388      	movs	r3, #136	; 0x88
  400e3c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400e3e:	2324      	movs	r3, #36	; 0x24
  400e40:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400e42:	f44f 7380 	mov.w	r3, #256	; 0x100
  400e46:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400e48:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400e4c:	6003      	str	r3, [r0, #0]
  400e4e:	4770      	bx	lr
  400e50:	55534100 	.word	0x55534100

00400e54 <usart_init_rs232>:
{
  400e54:	b570      	push	{r4, r5, r6, lr}
  400e56:	4605      	mov	r5, r0
  400e58:	460c      	mov	r4, r1
  400e5a:	4616      	mov	r6, r2
	usart_reset(p_usart);
  400e5c:	4b0f      	ldr	r3, [pc, #60]	; (400e9c <usart_init_rs232+0x48>)
  400e5e:	4798      	blx	r3
	ul_reg_val = 0;
  400e60:	2200      	movs	r2, #0
  400e62:	4b0f      	ldr	r3, [pc, #60]	; (400ea0 <usart_init_rs232+0x4c>)
  400e64:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400e66:	b1a4      	cbz	r4, 400e92 <usart_init_rs232+0x3e>
  400e68:	4632      	mov	r2, r6
  400e6a:	6821      	ldr	r1, [r4, #0]
  400e6c:	4628      	mov	r0, r5
  400e6e:	4b0d      	ldr	r3, [pc, #52]	; (400ea4 <usart_init_rs232+0x50>)
  400e70:	4798      	blx	r3
  400e72:	4602      	mov	r2, r0
  400e74:	b978      	cbnz	r0, 400e96 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400e76:	6863      	ldr	r3, [r4, #4]
  400e78:	68a1      	ldr	r1, [r4, #8]
  400e7a:	430b      	orrs	r3, r1
  400e7c:	6921      	ldr	r1, [r4, #16]
  400e7e:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400e80:	68e1      	ldr	r1, [r4, #12]
  400e82:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400e84:	4906      	ldr	r1, [pc, #24]	; (400ea0 <usart_init_rs232+0x4c>)
  400e86:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400e88:	6869      	ldr	r1, [r5, #4]
  400e8a:	430b      	orrs	r3, r1
  400e8c:	606b      	str	r3, [r5, #4]
}
  400e8e:	4610      	mov	r0, r2
  400e90:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400e92:	2201      	movs	r2, #1
  400e94:	e7fb      	b.n	400e8e <usart_init_rs232+0x3a>
  400e96:	2201      	movs	r2, #1
  400e98:	e7f9      	b.n	400e8e <usart_init_rs232+0x3a>
  400e9a:	bf00      	nop
  400e9c:	00400e2d 	.word	0x00400e2d
  400ea0:	20400aa0 	.word	0x20400aa0
  400ea4:	00400dd1 	.word	0x00400dd1

00400ea8 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400ea8:	2340      	movs	r3, #64	; 0x40
  400eaa:	6003      	str	r3, [r0, #0]
  400eac:	4770      	bx	lr

00400eae <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400eae:	2310      	movs	r3, #16
  400eb0:	6003      	str	r3, [r0, #0]
  400eb2:	4770      	bx	lr

00400eb4 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400eb4:	6943      	ldr	r3, [r0, #20]
  400eb6:	f013 0f02 	tst.w	r3, #2
  400eba:	d004      	beq.n	400ec6 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400ebc:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400ec0:	61c1      	str	r1, [r0, #28]
	return 0;
  400ec2:	2000      	movs	r0, #0
  400ec4:	4770      	bx	lr
		return 1;
  400ec6:	2001      	movs	r0, #1
}
  400ec8:	4770      	bx	lr

00400eca <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400eca:	6943      	ldr	r3, [r0, #20]
  400ecc:	f013 0f01 	tst.w	r3, #1
  400ed0:	d005      	beq.n	400ede <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400ed2:	6983      	ldr	r3, [r0, #24]
  400ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400ed8:	600b      	str	r3, [r1, #0]
	return 0;
  400eda:	2000      	movs	r0, #0
  400edc:	4770      	bx	lr
		return 1;
  400ede:	2001      	movs	r0, #1
}
  400ee0:	4770      	bx	lr

00400ee2 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400ee2:	e7fe      	b.n	400ee2 <Dummy_Handler>

00400ee4 <Reset_Handler>:
{
  400ee4:	b500      	push	{lr}
  400ee6:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400ee8:	4b25      	ldr	r3, [pc, #148]	; (400f80 <Reset_Handler+0x9c>)
  400eea:	4a26      	ldr	r2, [pc, #152]	; (400f84 <Reset_Handler+0xa0>)
  400eec:	429a      	cmp	r2, r3
  400eee:	d010      	beq.n	400f12 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400ef0:	4b25      	ldr	r3, [pc, #148]	; (400f88 <Reset_Handler+0xa4>)
  400ef2:	4a23      	ldr	r2, [pc, #140]	; (400f80 <Reset_Handler+0x9c>)
  400ef4:	429a      	cmp	r2, r3
  400ef6:	d20c      	bcs.n	400f12 <Reset_Handler+0x2e>
  400ef8:	3b01      	subs	r3, #1
  400efa:	1a9b      	subs	r3, r3, r2
  400efc:	f023 0303 	bic.w	r3, r3, #3
  400f00:	3304      	adds	r3, #4
  400f02:	4413      	add	r3, r2
  400f04:	491f      	ldr	r1, [pc, #124]	; (400f84 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400f06:	f851 0b04 	ldr.w	r0, [r1], #4
  400f0a:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400f0e:	429a      	cmp	r2, r3
  400f10:	d1f9      	bne.n	400f06 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400f12:	4b1e      	ldr	r3, [pc, #120]	; (400f8c <Reset_Handler+0xa8>)
  400f14:	4a1e      	ldr	r2, [pc, #120]	; (400f90 <Reset_Handler+0xac>)
  400f16:	429a      	cmp	r2, r3
  400f18:	d20a      	bcs.n	400f30 <Reset_Handler+0x4c>
  400f1a:	3b01      	subs	r3, #1
  400f1c:	1a9b      	subs	r3, r3, r2
  400f1e:	f023 0303 	bic.w	r3, r3, #3
  400f22:	3304      	adds	r3, #4
  400f24:	4413      	add	r3, r2
                *pDest++ = 0;
  400f26:	2100      	movs	r1, #0
  400f28:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400f2c:	4293      	cmp	r3, r2
  400f2e:	d1fb      	bne.n	400f28 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400f30:	4a18      	ldr	r2, [pc, #96]	; (400f94 <Reset_Handler+0xb0>)
  400f32:	4b19      	ldr	r3, [pc, #100]	; (400f98 <Reset_Handler+0xb4>)
  400f34:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400f38:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400f3a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400f3e:	fab3 f383 	clz	r3, r3
  400f42:	095b      	lsrs	r3, r3, #5
  400f44:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400f46:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400f48:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400f4c:	2200      	movs	r2, #0
  400f4e:	4b13      	ldr	r3, [pc, #76]	; (400f9c <Reset_Handler+0xb8>)
  400f50:	701a      	strb	r2, [r3, #0]
	return flags;
  400f52:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400f54:	4a12      	ldr	r2, [pc, #72]	; (400fa0 <Reset_Handler+0xbc>)
  400f56:	6813      	ldr	r3, [r2, #0]
  400f58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400f5c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  400f5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400f62:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400f66:	b129      	cbz	r1, 400f74 <Reset_Handler+0x90>
		cpu_irq_enable();
  400f68:	2201      	movs	r2, #1
  400f6a:	4b0c      	ldr	r3, [pc, #48]	; (400f9c <Reset_Handler+0xb8>)
  400f6c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  400f6e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400f72:	b662      	cpsie	i
        __libc_init_array();
  400f74:	4b0b      	ldr	r3, [pc, #44]	; (400fa4 <Reset_Handler+0xc0>)
  400f76:	4798      	blx	r3
        main();
  400f78:	4b0b      	ldr	r3, [pc, #44]	; (400fa8 <Reset_Handler+0xc4>)
  400f7a:	4798      	blx	r3
  400f7c:	e7fe      	b.n	400f7c <Reset_Handler+0x98>
  400f7e:	bf00      	nop
  400f80:	20400000 	.word	0x20400000
  400f84:	0040dddc 	.word	0x0040dddc
  400f88:	20400a10 	.word	0x20400a10
  400f8c:	204049e4 	.word	0x204049e4
  400f90:	20400a10 	.word	0x20400a10
  400f94:	e000ed00 	.word	0xe000ed00
  400f98:	00400000 	.word	0x00400000
  400f9c:	20400000 	.word	0x20400000
  400fa0:	e000ed88 	.word	0xe000ed88
  400fa4:	004071bd 	.word	0x004071bd
  400fa8:	00406ca9 	.word	0x00406ca9

00400fac <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400fac:	4b3b      	ldr	r3, [pc, #236]	; (40109c <SystemCoreClockUpdate+0xf0>)
  400fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400fb0:	f003 0303 	and.w	r3, r3, #3
  400fb4:	2b01      	cmp	r3, #1
  400fb6:	d01d      	beq.n	400ff4 <SystemCoreClockUpdate+0x48>
  400fb8:	b183      	cbz	r3, 400fdc <SystemCoreClockUpdate+0x30>
  400fba:	2b02      	cmp	r3, #2
  400fbc:	d036      	beq.n	40102c <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400fbe:	4b37      	ldr	r3, [pc, #220]	; (40109c <SystemCoreClockUpdate+0xf0>)
  400fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400fc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400fc6:	2b70      	cmp	r3, #112	; 0x70
  400fc8:	d05f      	beq.n	40108a <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400fca:	4b34      	ldr	r3, [pc, #208]	; (40109c <SystemCoreClockUpdate+0xf0>)
  400fcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400fce:	4934      	ldr	r1, [pc, #208]	; (4010a0 <SystemCoreClockUpdate+0xf4>)
  400fd0:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400fd4:	680b      	ldr	r3, [r1, #0]
  400fd6:	40d3      	lsrs	r3, r2
  400fd8:	600b      	str	r3, [r1, #0]
  400fda:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400fdc:	4b31      	ldr	r3, [pc, #196]	; (4010a4 <SystemCoreClockUpdate+0xf8>)
  400fde:	695b      	ldr	r3, [r3, #20]
  400fe0:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400fe4:	bf14      	ite	ne
  400fe6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400fea:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400fee:	4b2c      	ldr	r3, [pc, #176]	; (4010a0 <SystemCoreClockUpdate+0xf4>)
  400ff0:	601a      	str	r2, [r3, #0]
  400ff2:	e7e4      	b.n	400fbe <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400ff4:	4b29      	ldr	r3, [pc, #164]	; (40109c <SystemCoreClockUpdate+0xf0>)
  400ff6:	6a1b      	ldr	r3, [r3, #32]
  400ff8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400ffc:	d003      	beq.n	401006 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400ffe:	4a2a      	ldr	r2, [pc, #168]	; (4010a8 <SystemCoreClockUpdate+0xfc>)
  401000:	4b27      	ldr	r3, [pc, #156]	; (4010a0 <SystemCoreClockUpdate+0xf4>)
  401002:	601a      	str	r2, [r3, #0]
  401004:	e7db      	b.n	400fbe <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401006:	4a29      	ldr	r2, [pc, #164]	; (4010ac <SystemCoreClockUpdate+0x100>)
  401008:	4b25      	ldr	r3, [pc, #148]	; (4010a0 <SystemCoreClockUpdate+0xf4>)
  40100a:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40100c:	4b23      	ldr	r3, [pc, #140]	; (40109c <SystemCoreClockUpdate+0xf0>)
  40100e:	6a1b      	ldr	r3, [r3, #32]
  401010:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401014:	2b10      	cmp	r3, #16
  401016:	d005      	beq.n	401024 <SystemCoreClockUpdate+0x78>
  401018:	2b20      	cmp	r3, #32
  40101a:	d1d0      	bne.n	400fbe <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  40101c:	4a22      	ldr	r2, [pc, #136]	; (4010a8 <SystemCoreClockUpdate+0xfc>)
  40101e:	4b20      	ldr	r3, [pc, #128]	; (4010a0 <SystemCoreClockUpdate+0xf4>)
  401020:	601a      	str	r2, [r3, #0]
          break;
  401022:	e7cc      	b.n	400fbe <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401024:	4a22      	ldr	r2, [pc, #136]	; (4010b0 <SystemCoreClockUpdate+0x104>)
  401026:	4b1e      	ldr	r3, [pc, #120]	; (4010a0 <SystemCoreClockUpdate+0xf4>)
  401028:	601a      	str	r2, [r3, #0]
          break;
  40102a:	e7c8      	b.n	400fbe <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40102c:	4b1b      	ldr	r3, [pc, #108]	; (40109c <SystemCoreClockUpdate+0xf0>)
  40102e:	6a1b      	ldr	r3, [r3, #32]
  401030:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401034:	d016      	beq.n	401064 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401036:	4a1c      	ldr	r2, [pc, #112]	; (4010a8 <SystemCoreClockUpdate+0xfc>)
  401038:	4b19      	ldr	r3, [pc, #100]	; (4010a0 <SystemCoreClockUpdate+0xf4>)
  40103a:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  40103c:	4b17      	ldr	r3, [pc, #92]	; (40109c <SystemCoreClockUpdate+0xf0>)
  40103e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401040:	f003 0303 	and.w	r3, r3, #3
  401044:	2b02      	cmp	r3, #2
  401046:	d1ba      	bne.n	400fbe <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401048:	4a14      	ldr	r2, [pc, #80]	; (40109c <SystemCoreClockUpdate+0xf0>)
  40104a:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40104c:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40104e:	4814      	ldr	r0, [pc, #80]	; (4010a0 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401050:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401054:	6803      	ldr	r3, [r0, #0]
  401056:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40105a:	b2d2      	uxtb	r2, r2
  40105c:	fbb3 f3f2 	udiv	r3, r3, r2
  401060:	6003      	str	r3, [r0, #0]
  401062:	e7ac      	b.n	400fbe <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401064:	4a11      	ldr	r2, [pc, #68]	; (4010ac <SystemCoreClockUpdate+0x100>)
  401066:	4b0e      	ldr	r3, [pc, #56]	; (4010a0 <SystemCoreClockUpdate+0xf4>)
  401068:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40106a:	4b0c      	ldr	r3, [pc, #48]	; (40109c <SystemCoreClockUpdate+0xf0>)
  40106c:	6a1b      	ldr	r3, [r3, #32]
  40106e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401072:	2b10      	cmp	r3, #16
  401074:	d005      	beq.n	401082 <SystemCoreClockUpdate+0xd6>
  401076:	2b20      	cmp	r3, #32
  401078:	d1e0      	bne.n	40103c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40107a:	4a0b      	ldr	r2, [pc, #44]	; (4010a8 <SystemCoreClockUpdate+0xfc>)
  40107c:	4b08      	ldr	r3, [pc, #32]	; (4010a0 <SystemCoreClockUpdate+0xf4>)
  40107e:	601a      	str	r2, [r3, #0]
          break;
  401080:	e7dc      	b.n	40103c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401082:	4a0b      	ldr	r2, [pc, #44]	; (4010b0 <SystemCoreClockUpdate+0x104>)
  401084:	4b06      	ldr	r3, [pc, #24]	; (4010a0 <SystemCoreClockUpdate+0xf4>)
  401086:	601a      	str	r2, [r3, #0]
          break;
  401088:	e7d8      	b.n	40103c <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40108a:	4a05      	ldr	r2, [pc, #20]	; (4010a0 <SystemCoreClockUpdate+0xf4>)
  40108c:	6813      	ldr	r3, [r2, #0]
  40108e:	4909      	ldr	r1, [pc, #36]	; (4010b4 <SystemCoreClockUpdate+0x108>)
  401090:	fba1 1303 	umull	r1, r3, r1, r3
  401094:	085b      	lsrs	r3, r3, #1
  401096:	6013      	str	r3, [r2, #0]
  401098:	4770      	bx	lr
  40109a:	bf00      	nop
  40109c:	400e0600 	.word	0x400e0600
  4010a0:	20400004 	.word	0x20400004
  4010a4:	400e1810 	.word	0x400e1810
  4010a8:	00b71b00 	.word	0x00b71b00
  4010ac:	003d0900 	.word	0x003d0900
  4010b0:	007a1200 	.word	0x007a1200
  4010b4:	aaaaaaab 	.word	0xaaaaaaab

004010b8 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4010b8:	4b16      	ldr	r3, [pc, #88]	; (401114 <system_init_flash+0x5c>)
  4010ba:	4298      	cmp	r0, r3
  4010bc:	d913      	bls.n	4010e6 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4010be:	4b16      	ldr	r3, [pc, #88]	; (401118 <system_init_flash+0x60>)
  4010c0:	4298      	cmp	r0, r3
  4010c2:	d915      	bls.n	4010f0 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4010c4:	4b15      	ldr	r3, [pc, #84]	; (40111c <system_init_flash+0x64>)
  4010c6:	4298      	cmp	r0, r3
  4010c8:	d916      	bls.n	4010f8 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4010ca:	4b15      	ldr	r3, [pc, #84]	; (401120 <system_init_flash+0x68>)
  4010cc:	4298      	cmp	r0, r3
  4010ce:	d917      	bls.n	401100 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4010d0:	4b14      	ldr	r3, [pc, #80]	; (401124 <system_init_flash+0x6c>)
  4010d2:	4298      	cmp	r0, r3
  4010d4:	d918      	bls.n	401108 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4010d6:	4b14      	ldr	r3, [pc, #80]	; (401128 <system_init_flash+0x70>)
  4010d8:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4010da:	bf94      	ite	ls
  4010dc:	4a13      	ldrls	r2, [pc, #76]	; (40112c <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4010de:	4a14      	ldrhi	r2, [pc, #80]	; (401130 <system_init_flash+0x78>)
  4010e0:	4b14      	ldr	r3, [pc, #80]	; (401134 <system_init_flash+0x7c>)
  4010e2:	601a      	str	r2, [r3, #0]
  4010e4:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4010e6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4010ea:	4b12      	ldr	r3, [pc, #72]	; (401134 <system_init_flash+0x7c>)
  4010ec:	601a      	str	r2, [r3, #0]
  4010ee:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4010f0:	4a11      	ldr	r2, [pc, #68]	; (401138 <system_init_flash+0x80>)
  4010f2:	4b10      	ldr	r3, [pc, #64]	; (401134 <system_init_flash+0x7c>)
  4010f4:	601a      	str	r2, [r3, #0]
  4010f6:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4010f8:	4a10      	ldr	r2, [pc, #64]	; (40113c <system_init_flash+0x84>)
  4010fa:	4b0e      	ldr	r3, [pc, #56]	; (401134 <system_init_flash+0x7c>)
  4010fc:	601a      	str	r2, [r3, #0]
  4010fe:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401100:	4a0f      	ldr	r2, [pc, #60]	; (401140 <system_init_flash+0x88>)
  401102:	4b0c      	ldr	r3, [pc, #48]	; (401134 <system_init_flash+0x7c>)
  401104:	601a      	str	r2, [r3, #0]
  401106:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401108:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40110c:	4b09      	ldr	r3, [pc, #36]	; (401134 <system_init_flash+0x7c>)
  40110e:	601a      	str	r2, [r3, #0]
  401110:	4770      	bx	lr
  401112:	bf00      	nop
  401114:	015ef3bf 	.word	0x015ef3bf
  401118:	02bde77f 	.word	0x02bde77f
  40111c:	041cdb3f 	.word	0x041cdb3f
  401120:	057bceff 	.word	0x057bceff
  401124:	06dac2bf 	.word	0x06dac2bf
  401128:	0839b67f 	.word	0x0839b67f
  40112c:	04000500 	.word	0x04000500
  401130:	04000600 	.word	0x04000600
  401134:	400e0c00 	.word	0x400e0c00
  401138:	04000100 	.word	0x04000100
  40113c:	04000200 	.word	0x04000200
  401140:	04000300 	.word	0x04000300

00401144 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401144:	4b0a      	ldr	r3, [pc, #40]	; (401170 <_sbrk+0x2c>)
  401146:	681b      	ldr	r3, [r3, #0]
  401148:	b153      	cbz	r3, 401160 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40114a:	4b09      	ldr	r3, [pc, #36]	; (401170 <_sbrk+0x2c>)
  40114c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40114e:	181a      	adds	r2, r3, r0
  401150:	4908      	ldr	r1, [pc, #32]	; (401174 <_sbrk+0x30>)
  401152:	4291      	cmp	r1, r2
  401154:	db08      	blt.n	401168 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401156:	4610      	mov	r0, r2
  401158:	4a05      	ldr	r2, [pc, #20]	; (401170 <_sbrk+0x2c>)
  40115a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  40115c:	4618      	mov	r0, r3
  40115e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401160:	4a05      	ldr	r2, [pc, #20]	; (401178 <_sbrk+0x34>)
  401162:	4b03      	ldr	r3, [pc, #12]	; (401170 <_sbrk+0x2c>)
  401164:	601a      	str	r2, [r3, #0]
  401166:	e7f0      	b.n	40114a <_sbrk+0x6>
		return (caddr_t) -1;	
  401168:	f04f 30ff 	mov.w	r0, #4294967295
}
  40116c:	4770      	bx	lr
  40116e:	bf00      	nop
  401170:	20400aa4 	.word	0x20400aa4
  401174:	2045fffc 	.word	0x2045fffc
  401178:	20404fe8 	.word	0x20404fe8

0040117c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  40117c:	f04f 30ff 	mov.w	r0, #4294967295
  401180:	4770      	bx	lr

00401182 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401182:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401186:	604b      	str	r3, [r1, #4]

	return 0;
}
  401188:	2000      	movs	r0, #0
  40118a:	4770      	bx	lr

0040118c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  40118c:	2001      	movs	r0, #1
  40118e:	4770      	bx	lr

00401190 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401190:	2000      	movs	r0, #0
  401192:	4770      	bx	lr

00401194 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return ((n & 0xff) << 8) | ((n & 0xff00) >> 8);
  401194:	0a03      	lsrs	r3, r0, #8
  401196:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
  40119a:	b280      	uxth	r0, r0
  40119c:	4770      	bx	lr

0040119e <lwip_ntohs>:
  return ((n & 0xff) << 8) | ((n & 0xff00) >> 8);
  40119e:	0a03      	lsrs	r3, r0, #8
  4011a0:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 */
u16_t
lwip_ntohs(u16_t n)
{
  return lwip_htons(n);
}
  4011a4:	b280      	uxth	r0, r0
  4011a6:	4770      	bx	lr

004011a8 <lwip_htonl>:
lwip_htonl(u32_t n)
{
  return ((n & 0xff) << 24) |
    ((n & 0xff00) << 8) |
    ((n & 0xff0000UL) >> 8) |
    ((n & 0xff000000UL) >> 24);
  4011a8:	0e03      	lsrs	r3, r0, #24
    ((n & 0xff0000UL) >> 8) |
  4011aa:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
    ((n & 0xff00) << 8) |
  4011ae:	0202      	lsls	r2, r0, #8
  4011b0:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    ((n & 0xff0000UL) >> 8) |
  4011b4:	4313      	orrs	r3, r2
  4011b6:	0a00      	lsrs	r0, r0, #8
  4011b8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
}
  4011bc:	4318      	orrs	r0, r3
  4011be:	4770      	bx	lr

004011c0 <lwip_ntohl>:
 * @param n u32_t in network byte order
 * @return n in host byte order
 */
u32_t
lwip_ntohl(u32_t n)
{
  4011c0:	b508      	push	{r3, lr}
  return lwip_htonl(n);
  4011c2:	4b01      	ldr	r3, [pc, #4]	; (4011c8 <lwip_ntohl+0x8>)
  4011c4:	4798      	blx	r3
}
  4011c6:	bd08      	pop	{r3, pc}
  4011c8:	004011a9 	.word	0x004011a9

004011cc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
  4011cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4011d0:	b085      	sub	sp, #20
  4011d2:	4680      	mov	r8, r0
  4011d4:	4689      	mov	r9, r1
  4011d6:	4615      	mov	r5, r2
  /* we can use the echo header here */
  struct icmp_echo_hdr *icmphdr;
  ip_addr_t iphdr_src;

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
  4011d8:	2200      	movs	r2, #0
  4011da:	2124      	movs	r1, #36	; 0x24
  4011dc:	2001      	movs	r0, #1
  4011de:	4b22      	ldr	r3, [pc, #136]	; (401268 <icmp_send_response+0x9c>)
  4011e0:	4798      	blx	r3
                 PBUF_RAM);
  if (q == NULL) {
  4011e2:	2800      	cmp	r0, #0
  4011e4:	d03d      	beq.n	401262 <icmp_send_response+0x96>
  4011e6:	4606      	mov	r6, r0
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
  4011e8:	f8d8 7004 	ldr.w	r7, [r8, #4]
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->src));
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->dest));
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  4011ec:	6844      	ldr	r4, [r0, #4]
  icmphdr->type = type;
  4011ee:	f884 9000 	strb.w	r9, [r4]
  icmphdr->code = code;
  4011f2:	7065      	strb	r5, [r4, #1]
  icmphdr->id = 0;
  4011f4:	2500      	movs	r5, #0
  4011f6:	7125      	strb	r5, [r4, #4]
  4011f8:	7165      	strb	r5, [r4, #5]
  icmphdr->seqno = 0;
  4011fa:	71a5      	strb	r5, [r4, #6]
  4011fc:	71e5      	strb	r5, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
  4011fe:	f8d0 c004 	ldr.w	ip, [r0, #4]
  401202:	f8d8 3004 	ldr.w	r3, [r8, #4]
  401206:	f8d3 e000 	ldr.w	lr, [r3]
  40120a:	6858      	ldr	r0, [r3, #4]
  40120c:	6899      	ldr	r1, [r3, #8]
  40120e:	f8d3 800c 	ldr.w	r8, [r3, #12]
  401212:	f8cc e008 	str.w	lr, [ip, #8]
  401216:	f8cc 000c 	str.w	r0, [ip, #12]
  40121a:	f8cc 1010 	str.w	r1, [ip, #16]
  40121e:	f8cc 8014 	str.w	r8, [ip, #20]
  401222:	f8d3 e010 	ldr.w	lr, [r3, #16]
  401226:	6958      	ldr	r0, [r3, #20]
  401228:	6999      	ldr	r1, [r3, #24]
  40122a:	f8cc e018 	str.w	lr, [ip, #24]
  40122e:	f8cc 001c 	str.w	r0, [ip, #28]
  401232:	f8cc 1020 	str.w	r1, [ip, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  /* calculate checksum */
  icmphdr->chksum = 0;
  401236:	70a5      	strb	r5, [r4, #2]
  401238:	70e5      	strb	r5, [r4, #3]
  icmphdr->chksum = inet_chksum(icmphdr, q->len);
  40123a:	8971      	ldrh	r1, [r6, #10]
  40123c:	4620      	mov	r0, r4
  40123e:	4b0b      	ldr	r3, [pc, #44]	; (40126c <icmp_send_response+0xa0>)
  401240:	4798      	blx	r3
  401242:	8060      	strh	r0, [r4, #2]
  ICMP_STATS_INC(icmp.xmit);
  /* increase number of messages attempted to send */
  snmp_inc_icmpoutmsgs();
  /* increase number of destination unreachable messages attempted to send */
  snmp_inc_icmpouttimeexcds();
  ip_addr_copy(iphdr_src, iphdr->src);
  401244:	68fb      	ldr	r3, [r7, #12]
  401246:	aa04      	add	r2, sp, #16
  401248:	f842 3d04 	str.w	r3, [r2, #-4]!
  ip_output(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP);
  40124c:	2301      	movs	r3, #1
  40124e:	9301      	str	r3, [sp, #4]
  401250:	9500      	str	r5, [sp, #0]
  401252:	23ff      	movs	r3, #255	; 0xff
  401254:	4629      	mov	r1, r5
  401256:	4630      	mov	r0, r6
  401258:	4c05      	ldr	r4, [pc, #20]	; (401270 <icmp_send_response+0xa4>)
  40125a:	47a0      	blx	r4
  pbuf_free(q);
  40125c:	4630      	mov	r0, r6
  40125e:	4b05      	ldr	r3, [pc, #20]	; (401274 <icmp_send_response+0xa8>)
  401260:	4798      	blx	r3
}
  401262:	b005      	add	sp, #20
  401264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401268:	00402685 	.word	0x00402685
  40126c:	00401505 	.word	0x00401505
  401270:	00401865 	.word	0x00401865
  401274:	0040262d 	.word	0x0040262d

00401278 <icmp_input>:
{
  401278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40127c:	b085      	sub	sp, #20
  40127e:	4606      	mov	r6, r0
  401280:	4688      	mov	r8, r1
  iphdr = (struct ip_hdr *)p->payload;
  401282:	6847      	ldr	r7, [r0, #4]
  hlen = IPH_HL(iphdr) * 4;
  401284:	783c      	ldrb	r4, [r7, #0]
  401286:	f004 040f 	and.w	r4, r4, #15
  40128a:	00a4      	lsls	r4, r4, #2
  if (pbuf_header(p, -hlen) || (p->tot_len < sizeof(u16_t)*2)) {
  40128c:	4265      	negs	r5, r4
  40128e:	b22d      	sxth	r5, r5
  401290:	4629      	mov	r1, r5
  401292:	4b45      	ldr	r3, [pc, #276]	; (4013a8 <icmp_input+0x130>)
  401294:	4798      	blx	r3
  401296:	b9a0      	cbnz	r0, 4012c2 <icmp_input+0x4a>
  401298:	8933      	ldrh	r3, [r6, #8]
  40129a:	2b03      	cmp	r3, #3
  40129c:	d911      	bls.n	4012c2 <icmp_input+0x4a>
  type = *((u8_t *)p->payload);
  40129e:	6873      	ldr	r3, [r6, #4]
  switch (type) {
  4012a0:	781b      	ldrb	r3, [r3, #0]
  4012a2:	2b08      	cmp	r3, #8
  4012a4:	d16f      	bne.n	401386 <icmp_input+0x10e>
      if (ip_addr_ismulticast(&current_iphdr_dest)) {
  4012a6:	4b41      	ldr	r3, [pc, #260]	; (4013ac <icmp_input+0x134>)
  4012a8:	6818      	ldr	r0, [r3, #0]
  4012aa:	f000 09f0 	and.w	r9, r0, #240	; 0xf0
      if (ip_addr_isbroadcast(&current_iphdr_dest, inp)) {
  4012ae:	4641      	mov	r1, r8
  4012b0:	4b3f      	ldr	r3, [pc, #252]	; (4013b0 <icmp_input+0x138>)
  4012b2:	4798      	blx	r3
  4012b4:	b958      	cbnz	r0, 4012ce <icmp_input+0x56>
      if (!accepted) {
  4012b6:	f1b9 0fe0 	cmp.w	r9, #224	; 0xe0
  4012ba:	d008      	beq.n	4012ce <icmp_input+0x56>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
  4012bc:	8933      	ldrh	r3, [r6, #8]
  4012be:	2b07      	cmp	r3, #7
  4012c0:	d809      	bhi.n	4012d6 <icmp_input+0x5e>
  pbuf_free(p);
  4012c2:	4630      	mov	r0, r6
  4012c4:	4b3b      	ldr	r3, [pc, #236]	; (4013b4 <icmp_input+0x13c>)
  4012c6:	4798      	blx	r3
}
  4012c8:	b005      	add	sp, #20
  4012ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        pbuf_free(p);
  4012ce:	4630      	mov	r0, r6
  4012d0:	4b38      	ldr	r3, [pc, #224]	; (4013b4 <icmp_input+0x13c>)
  4012d2:	4798      	blx	r3
        return;
  4012d4:	e7f8      	b.n	4012c8 <icmp_input+0x50>
    if (inet_chksum_pbuf(p) != 0) {
  4012d6:	4630      	mov	r0, r6
  4012d8:	4b37      	ldr	r3, [pc, #220]	; (4013b8 <icmp_input+0x140>)
  4012da:	4798      	blx	r3
  4012dc:	b970      	cbnz	r0, 4012fc <icmp_input+0x84>
  hlen = IPH_HL(iphdr) * 4;
  4012de:	b224      	sxth	r4, r4
    if (pbuf_header(p, (PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
  4012e0:	2122      	movs	r1, #34	; 0x22
  4012e2:	4630      	mov	r0, r6
  4012e4:	4b30      	ldr	r3, [pc, #192]	; (4013a8 <icmp_input+0x130>)
  4012e6:	4798      	blx	r3
  4012e8:	b330      	cbz	r0, 401338 <icmp_input+0xc0>
      if (pbuf_header(p, hlen)) {
  4012ea:	4621      	mov	r1, r4
  4012ec:	4630      	mov	r0, r6
  4012ee:	4b2e      	ldr	r3, [pc, #184]	; (4013a8 <icmp_input+0x130>)
  4012f0:	4798      	blx	r3
  4012f2:	b138      	cbz	r0, 401304 <icmp_input+0x8c>
  pbuf_free(p);
  4012f4:	4630      	mov	r0, r6
  4012f6:	4b2f      	ldr	r3, [pc, #188]	; (4013b4 <icmp_input+0x13c>)
  4012f8:	4798      	blx	r3
  return;
  4012fa:	e7e5      	b.n	4012c8 <icmp_input+0x50>
      pbuf_free(p);
  4012fc:	4630      	mov	r0, r6
  4012fe:	4b2d      	ldr	r3, [pc, #180]	; (4013b4 <icmp_input+0x13c>)
  401300:	4798      	blx	r3
      return;
  401302:	e7e1      	b.n	4012c8 <icmp_input+0x50>
      r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
  401304:	2200      	movs	r2, #0
  401306:	8931      	ldrh	r1, [r6, #8]
  401308:	2002      	movs	r0, #2
  40130a:	4b2c      	ldr	r3, [pc, #176]	; (4013bc <icmp_input+0x144>)
  40130c:	4798      	blx	r3
      if (r == NULL) {
  40130e:	4681      	mov	r9, r0
  401310:	2800      	cmp	r0, #0
  401312:	d0ef      	beq.n	4012f4 <icmp_input+0x7c>
      if (pbuf_copy(r, p) != ERR_OK) {
  401314:	4631      	mov	r1, r6
  401316:	4b2a      	ldr	r3, [pc, #168]	; (4013c0 <icmp_input+0x148>)
  401318:	4798      	blx	r3
  40131a:	2800      	cmp	r0, #0
  40131c:	d1ea      	bne.n	4012f4 <icmp_input+0x7c>
      iphdr = (struct ip_hdr *)r->payload;
  40131e:	f8d9 7004 	ldr.w	r7, [r9, #4]
      if (pbuf_header(r, -hlen)) {
  401322:	4629      	mov	r1, r5
  401324:	4648      	mov	r0, r9
  401326:	4b20      	ldr	r3, [pc, #128]	; (4013a8 <icmp_input+0x130>)
  401328:	4798      	blx	r3
  40132a:	2800      	cmp	r0, #0
  40132c:	d1e2      	bne.n	4012f4 <icmp_input+0x7c>
      pbuf_free(p);
  40132e:	4630      	mov	r0, r6
  401330:	4b20      	ldr	r3, [pc, #128]	; (4013b4 <icmp_input+0x13c>)
  401332:	4798      	blx	r3
      p = r;
  401334:	464e      	mov	r6, r9
  401336:	e006      	b.n	401346 <icmp_input+0xce>
      if (pbuf_header(p, -(s16_t)(PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
  401338:	f06f 0121 	mvn.w	r1, #33	; 0x21
  40133c:	4630      	mov	r0, r6
  40133e:	4b1a      	ldr	r3, [pc, #104]	; (4013a8 <icmp_input+0x130>)
  401340:	4798      	blx	r3
  401342:	2800      	cmp	r0, #0
  401344:	d1d6      	bne.n	4012f4 <icmp_input+0x7c>
    iecho = (struct icmp_echo_hdr *)p->payload;
  401346:	6872      	ldr	r2, [r6, #4]
    ip_addr_copy(iphdr->src, *ip_current_dest_addr());
  401348:	4b18      	ldr	r3, [pc, #96]	; (4013ac <icmp_input+0x134>)
  40134a:	681b      	ldr	r3, [r3, #0]
  40134c:	60fb      	str	r3, [r7, #12]
    ip_addr_copy(iphdr->dest, *ip_current_src_addr());
  40134e:	4b1d      	ldr	r3, [pc, #116]	; (4013c4 <icmp_input+0x14c>)
  401350:	681b      	ldr	r3, [r3, #0]
  401352:	613b      	str	r3, [r7, #16]
    ICMPH_TYPE_SET(iecho, ICMP_ER);
  401354:	2300      	movs	r3, #0
  401356:	7013      	strb	r3, [r2, #0]
    if (iecho->chksum >= PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
  401358:	8853      	ldrh	r3, [r2, #2]
  40135a:	f64f 71f6 	movw	r1, #65526	; 0xfff6
  40135e:	428b      	cmp	r3, r1
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
  401360:	bf8c      	ite	hi
  401362:	3309      	addhi	r3, #9
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
  401364:	3308      	addls	r3, #8
  401366:	8053      	strh	r3, [r2, #2]
    IPH_TTL_SET(iphdr, ICMP_TTL);
  401368:	23ff      	movs	r3, #255	; 0xff
  40136a:	723b      	strb	r3, [r7, #8]
    IPH_CHKSUM_SET(iphdr, 0);
  40136c:	2300      	movs	r3, #0
  40136e:	72bb      	strb	r3, [r7, #10]
  401370:	72fb      	strb	r3, [r7, #11]
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
  401372:	2114      	movs	r1, #20
  401374:	4638      	mov	r0, r7
  401376:	4b14      	ldr	r3, [pc, #80]	; (4013c8 <icmp_input+0x150>)
  401378:	4798      	blx	r3
  40137a:	8178      	strh	r0, [r7, #10]
    if(pbuf_header(p, hlen)) {
  40137c:	4621      	mov	r1, r4
  40137e:	4630      	mov	r0, r6
  401380:	4b09      	ldr	r3, [pc, #36]	; (4013a8 <icmp_input+0x130>)
  401382:	4798      	blx	r3
  401384:	b118      	cbz	r0, 40138e <icmp_input+0x116>
  pbuf_free(p);
  401386:	4630      	mov	r0, r6
  401388:	4b0a      	ldr	r3, [pc, #40]	; (4013b4 <icmp_input+0x13c>)
  40138a:	4798      	blx	r3
  return;
  40138c:	e79c      	b.n	4012c8 <icmp_input+0x50>
      ret = ip_output_if(p, ip_current_dest_addr(), IP_HDRINCL,
  40138e:	f8cd 8008 	str.w	r8, [sp, #8]
  401392:	2301      	movs	r3, #1
  401394:	9301      	str	r3, [sp, #4]
  401396:	2200      	movs	r2, #0
  401398:	9200      	str	r2, [sp, #0]
  40139a:	23ff      	movs	r3, #255	; 0xff
  40139c:	4903      	ldr	r1, [pc, #12]	; (4013ac <icmp_input+0x134>)
  40139e:	4630      	mov	r0, r6
  4013a0:	4c0a      	ldr	r4, [pc, #40]	; (4013cc <icmp_input+0x154>)
  4013a2:	47a0      	blx	r4
  4013a4:	e7ef      	b.n	401386 <icmp_input+0x10e>
  4013a6:	bf00      	nop
  4013a8:	004025bf 	.word	0x004025bf
  4013ac:	20403938 	.word	0x20403938
  4013b0:	004018a5 	.word	0x004018a5
  4013b4:	0040262d 	.word	0x0040262d
  4013b8:	00401515 	.word	0x00401515
  4013bc:	00402685 	.word	0x00402685
  4013c0:	00402899 	.word	0x00402899
  4013c4:	20403930 	.word	0x20403930
  4013c8:	00401505 	.word	0x00401505
  4013cc:	00401769 	.word	0x00401769

004013d0 <icmp_dest_unreach>:
{
  4013d0:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_DUR, t);
  4013d2:	460a      	mov	r2, r1
  4013d4:	2103      	movs	r1, #3
  4013d6:	4b01      	ldr	r3, [pc, #4]	; (4013dc <icmp_dest_unreach+0xc>)
  4013d8:	4798      	blx	r3
  4013da:	bd08      	pop	{r3, pc}
  4013dc:	004011cd 	.word	0x004011cd

004013e0 <icmp_time_exceeded>:
{
  4013e0:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_TE, t);
  4013e2:	460a      	mov	r2, r1
  4013e4:	210b      	movs	r1, #11
  4013e6:	4b01      	ldr	r3, [pc, #4]	; (4013ec <icmp_time_exceeded+0xc>)
  4013e8:	4798      	blx	r3
  4013ea:	bd08      	pop	{r3, pc}
  4013ec:	004011cd 	.word	0x004011cd

004013f0 <lwip_standard_chksum>:
 * @return host order (!) lwip checksum (non-inverted Internet sum) 
 */

static u16_t
lwip_standard_chksum(void *dataptr, int len)
{
  4013f0:	b470      	push	{r4, r5, r6}
  4013f2:	b083      	sub	sp, #12
  u8_t *pb = (u8_t *)dataptr;
  u16_t *ps, t = 0;
  4013f4:	2300      	movs	r3, #0
  4013f6:	f8ad 3006 	strh.w	r3, [sp, #6]
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
  4013fa:	f010 0601 	ands.w	r6, r0, #1
  4013fe:	d030      	beq.n	401462 <lwip_standard_chksum+0x72>
  401400:	4299      	cmp	r1, r3
  401402:	dd2e      	ble.n	401462 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[1] = *pb++;
  401404:	1c45      	adds	r5, r0, #1
  401406:	7803      	ldrb	r3, [r0, #0]
  401408:	f88d 3007 	strb.w	r3, [sp, #7]
    len--;
  40140c:	3901      	subs	r1, #1
  }

  /* Add the bulk of the data */
  ps = (u16_t *)(void *)pb;
  while (len > 1) {
  40140e:	2901      	cmp	r1, #1
  401410:	dd29      	ble.n	401466 <lwip_standard_chksum+0x76>
  401412:	4628      	mov	r0, r5
  401414:	460b      	mov	r3, r1
  401416:	2200      	movs	r2, #0
    sum += *ps++;
  401418:	f830 4b02 	ldrh.w	r4, [r0], #2
  40141c:	4422      	add	r2, r4
    len -= 2;
  40141e:	3b02      	subs	r3, #2
  while (len > 1) {
  401420:	2b01      	cmp	r3, #1
  401422:	dcf9      	bgt.n	401418 <lwip_standard_chksum+0x28>
  401424:	3902      	subs	r1, #2
  401426:	f021 0301 	bic.w	r3, r1, #1
  40142a:	3302      	adds	r3, #2
  40142c:	441d      	add	r5, r3
  40142e:	f001 0101 	and.w	r1, r1, #1
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
  401432:	2900      	cmp	r1, #0
  401434:	dd02      	ble.n	40143c <lwip_standard_chksum+0x4c>
    ((u8_t *)&t)[0] = *(u8_t *)ps;
  401436:	782b      	ldrb	r3, [r5, #0]
  401438:	f88d 3006 	strb.w	r3, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
  40143c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  401440:	4402      	add	r2, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  sum = FOLD_U32T(sum);
  401442:	b290      	uxth	r0, r2
  401444:	eb00 4212 	add.w	r2, r0, r2, lsr #16
  sum = FOLD_U32T(sum);
  401448:	b290      	uxth	r0, r2
  40144a:	eb00 4012 	add.w	r0, r0, r2, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
  40144e:	b126      	cbz	r6, 40145a <lwip_standard_chksum+0x6a>
    sum = SWAP_BYTES_IN_WORD(sum);
  401450:	0203      	lsls	r3, r0, #8
  401452:	b29b      	uxth	r3, r3
  401454:	f3c0 2007 	ubfx	r0, r0, #8, #8
  401458:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
  40145a:	b280      	uxth	r0, r0
  40145c:	b003      	add	sp, #12
  40145e:	bc70      	pop	{r4, r5, r6}
  401460:	4770      	bx	lr
  u8_t *pb = (u8_t *)dataptr;
  401462:	4605      	mov	r5, r0
  401464:	e7d3      	b.n	40140e <lwip_standard_chksum+0x1e>
  u32_t sum = 0;
  401466:	2200      	movs	r2, #0
  401468:	e7e3      	b.n	401432 <lwip_standard_chksum+0x42>
	...

0040146c <inet_chksum_pseudo>:
 */
u16_t
inet_chksum_pseudo(struct pbuf *p,
       ip_addr_t *src, ip_addr_t *dest,
       u8_t proto, u16_t proto_len)
{
  40146c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401470:	468a      	mov	sl, r1
  401472:	4691      	mov	r9, r2
  401474:	4698      	mov	r8, r3
  u8_t swapped;

  acc = 0;
  swapped = 0;
  /* iterate through all pbuf in chain */
  for(q = p; q != NULL; q = q->next) {
  401476:	2800      	cmp	r0, #0
  401478:	d03e      	beq.n	4014f8 <inet_chksum_pseudo+0x8c>
  40147a:	4605      	mov	r5, r0
  40147c:	2600      	movs	r6, #0
  40147e:	4634      	mov	r4, r6
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
  401480:	4f1e      	ldr	r7, [pc, #120]	; (4014fc <inet_chksum_pseudo+0x90>)
  401482:	e001      	b.n	401488 <inet_chksum_pseudo+0x1c>
  for(q = p; q != NULL; q = q->next) {
  401484:	682d      	ldr	r5, [r5, #0]
  401486:	b19d      	cbz	r5, 4014b0 <inet_chksum_pseudo+0x44>
    acc += LWIP_CHKSUM(q->payload, q->len);
  401488:	8969      	ldrh	r1, [r5, #10]
  40148a:	6868      	ldr	r0, [r5, #4]
  40148c:	47b8      	blx	r7
  40148e:	4404      	add	r4, r0
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
  401490:	b2a0      	uxth	r0, r4
  401492:	eb00 4414 	add.w	r4, r0, r4, lsr #16
    if (q->len % 2 != 0) {
  401496:	896b      	ldrh	r3, [r5, #10]
  401498:	f013 0f01 	tst.w	r3, #1
  40149c:	d0f2      	beq.n	401484 <inet_chksum_pseudo+0x18>
      swapped = 1 - swapped;
  40149e:	f1c6 0601 	rsb	r6, r6, #1
  4014a2:	b2f6      	uxtb	r6, r6
      acc = SWAP_BYTES_IN_WORD(acc);
  4014a4:	0223      	lsls	r3, r4, #8
  4014a6:	b29b      	uxth	r3, r3
  4014a8:	f3c4 2407 	ubfx	r4, r4, #8, #8
  4014ac:	431c      	orrs	r4, r3
  4014ae:	e7e9      	b.n	401484 <inet_chksum_pseudo+0x18>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
  4014b0:	b126      	cbz	r6, 4014bc <inet_chksum_pseudo+0x50>
    acc = SWAP_BYTES_IN_WORD(acc);
  4014b2:	0223      	lsls	r3, r4, #8
  4014b4:	b29b      	uxth	r3, r3
  4014b6:	f3c4 2407 	ubfx	r4, r4, #8, #8
  4014ba:	431c      	orrs	r4, r3
  }
  addr = ip4_addr_get_u32(src);
  4014bc:	f8da 2000 	ldr.w	r2, [sl]
  acc += (addr & 0xffffUL);
  acc += ((addr >> 16) & 0xffffUL);
  addr = ip4_addr_get_u32(dest);
  4014c0:	f8d9 3000 	ldr.w	r3, [r9]
  acc += (addr & 0xffffUL);
  acc += ((addr >> 16) & 0xffffUL);
  4014c4:	0c18      	lsrs	r0, r3, #16
  4014c6:	fa10 f083 	uxtah	r0, r0, r3
  4014ca:	fa10 f082 	uxtah	r0, r0, r2
  4014ce:	eb00 4012 	add.w	r0, r0, r2, lsr #16
  4014d2:	4404      	add	r4, r0
  acc += (u32_t)htons((u16_t)proto);
  4014d4:	4640      	mov	r0, r8
  4014d6:	4d0a      	ldr	r5, [pc, #40]	; (401500 <inet_chksum_pseudo+0x94>)
  4014d8:	47a8      	blx	r5
  4014da:	4404      	add	r4, r0
  acc += (u32_t)htons(proto_len);
  4014dc:	f8bd 0020 	ldrh.w	r0, [sp, #32]
  4014e0:	47a8      	blx	r5
  4014e2:	4420      	add	r0, r4

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  acc = FOLD_U32T(acc);
  4014e4:	b284      	uxth	r4, r0
  4014e6:	eb04 4410 	add.w	r4, r4, r0, lsr #16
  acc = FOLD_U32T(acc);
  4014ea:	b2a0      	uxth	r0, r4
  4014ec:	eb00 4014 	add.w	r0, r0, r4, lsr #16
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
  4014f0:	43c0      	mvns	r0, r0
}
  4014f2:	b280      	uxth	r0, r0
  4014f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  acc = 0;
  4014f8:	2400      	movs	r4, #0
  4014fa:	e7df      	b.n	4014bc <inet_chksum_pseudo+0x50>
  4014fc:	004013f1 	.word	0x004013f1
  401500:	00401195 	.word	0x00401195

00401504 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(void *dataptr, u16_t len)
{
  401504:	b508      	push	{r3, lr}
  return ~LWIP_CHKSUM(dataptr, len);
  401506:	4b02      	ldr	r3, [pc, #8]	; (401510 <inet_chksum+0xc>)
  401508:	4798      	blx	r3
  40150a:	43c0      	mvns	r0, r0
}
  40150c:	b280      	uxth	r0, r0
  40150e:	bd08      	pop	{r3, pc}
  401510:	004013f1 	.word	0x004013f1

00401514 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
  401514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
  for(q = p; q != NULL; q = q->next) {
  401516:	b318      	cbz	r0, 401560 <inet_chksum_pbuf+0x4c>
  401518:	4605      	mov	r5, r0
  40151a:	2600      	movs	r6, #0
  40151c:	4634      	mov	r4, r6
    acc += LWIP_CHKSUM(q->payload, q->len);
  40151e:	4f11      	ldr	r7, [pc, #68]	; (401564 <inet_chksum_pbuf+0x50>)
  401520:	e001      	b.n	401526 <inet_chksum_pbuf+0x12>
  for(q = p; q != NULL; q = q->next) {
  401522:	682d      	ldr	r5, [r5, #0]
  401524:	b19d      	cbz	r5, 40154e <inet_chksum_pbuf+0x3a>
    acc += LWIP_CHKSUM(q->payload, q->len);
  401526:	8969      	ldrh	r1, [r5, #10]
  401528:	6868      	ldr	r0, [r5, #4]
  40152a:	47b8      	blx	r7
  40152c:	4420      	add	r0, r4
    acc = FOLD_U32T(acc);
  40152e:	b284      	uxth	r4, r0
  401530:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    if (q->len % 2 != 0) {
  401534:	896b      	ldrh	r3, [r5, #10]
  401536:	f013 0f01 	tst.w	r3, #1
  40153a:	d0f2      	beq.n	401522 <inet_chksum_pbuf+0xe>
      swapped = 1 - swapped;
  40153c:	f1c6 0601 	rsb	r6, r6, #1
  401540:	b2f6      	uxtb	r6, r6
      acc = SWAP_BYTES_IN_WORD(acc);
  401542:	0223      	lsls	r3, r4, #8
  401544:	b29b      	uxth	r3, r3
  401546:	f3c4 2407 	ubfx	r4, r4, #8, #8
  40154a:	431c      	orrs	r4, r3
  40154c:	e7e9      	b.n	401522 <inet_chksum_pbuf+0xe>
    }
  }

  if (swapped) {
  40154e:	b126      	cbz	r6, 40155a <inet_chksum_pbuf+0x46>
    acc = SWAP_BYTES_IN_WORD(acc);
  401550:	0223      	lsls	r3, r4, #8
  401552:	b29b      	uxth	r3, r3
  401554:	f3c4 2407 	ubfx	r4, r4, #8, #8
  401558:	431c      	orrs	r4, r3
  }
  return (u16_t)~(acc & 0xffffUL);
  40155a:	43e0      	mvns	r0, r4
}
  40155c:	b280      	uxth	r0, r0
  40155e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  acc = 0;
  401560:	2400      	movs	r4, #0
  401562:	e7fa      	b.n	40155a <inet_chksum_pbuf+0x46>
  401564:	004013f1 	.word	0x004013f1

00401568 <ip_route>:
    return netif;
  }
#endif

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  401568:	4b0e      	ldr	r3, [pc, #56]	; (4015a4 <ip_route+0x3c>)
  40156a:	681b      	ldr	r3, [r3, #0]
  40156c:	b973      	cbnz	r3, 40158c <ip_route+0x24>
        /* return netif on which to forward IP packet */
        return netif;
      }
    }
  }
  if ((netif_default == NULL) || (!netif_is_up(netif_default))) {
  40156e:	4b0e      	ldr	r3, [pc, #56]	; (4015a8 <ip_route+0x40>)
  401570:	681b      	ldr	r3, [r3, #0]
  401572:	b133      	cbz	r3, 401582 <ip_route+0x1a>
  401574:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
  401578:	f002 0201 	and.w	r2, r2, #1
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    snmp_inc_ipoutnoroutes();
    return NULL;
  40157c:	2a00      	cmp	r2, #0
  40157e:	bf08      	it	eq
  401580:	2300      	moveq	r3, #0
  }
  /* no matching netif found, use default netif */
  return netif_default;
}
  401582:	4618      	mov	r0, r3
  401584:	4770      	bx	lr
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  401586:	681b      	ldr	r3, [r3, #0]
  401588:	2b00      	cmp	r3, #0
  40158a:	d0f0      	beq.n	40156e <ip_route+0x6>
    if (netif_is_up(netif)) {
  40158c:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
  401590:	f012 0f01 	tst.w	r2, #1
  401594:	d0f7      	beq.n	401586 <ip_route+0x1e>
      if (ip_addr_netcmp(dest, &(netif->ip_addr), &(netif->netmask))) {
  401596:	6802      	ldr	r2, [r0, #0]
  401598:	6859      	ldr	r1, [r3, #4]
  40159a:	404a      	eors	r2, r1
  40159c:	6899      	ldr	r1, [r3, #8]
  40159e:	420a      	tst	r2, r1
  4015a0:	d1f1      	bne.n	401586 <ip_route+0x1e>
  4015a2:	e7ee      	b.n	401582 <ip_route+0x1a>
  4015a4:	20404954 	.word	0x20404954
  4015a8:	20404958 	.word	0x20404958

004015ac <ip_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip_input(struct pbuf *p, struct netif *inp)
{
  4015ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4015b0:	4605      	mov	r5, r0

  IP_STATS_INC(ip.recv);
  snmp_inc_ipinreceives();

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
  4015b2:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (IPH_V(iphdr) != 4) {
  4015b6:	f898 3000 	ldrb.w	r3, [r8]
  4015ba:	091a      	lsrs	r2, r3, #4
  4015bc:	2a04      	cmp	r2, #4
  4015be:	d004      	beq.n	4015ca <ip_input+0x1e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", IPH_V(iphdr)));
    ip_debug_print(p);
    pbuf_free(p);
  4015c0:	4b5a      	ldr	r3, [pc, #360]	; (40172c <ip_input+0x180>)
  4015c2:	4798      	blx	r3
  current_header = NULL;
  ip_addr_set_any(&current_iphdr_src);
  ip_addr_set_any(&current_iphdr_dest);

  return ERR_OK;
}
  4015c4:	2000      	movs	r0, #0
  4015c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4015ca:	460f      	mov	r7, r1
  iphdr_hlen = IPH_HL(iphdr);
  4015cc:	f003 030f 	and.w	r3, r3, #15
  iphdr_hlen *= 4;
  4015d0:	009c      	lsls	r4, r3, #2
  iphdr_len = ntohs(IPH_LEN(iphdr));
  4015d2:	f8b8 0002 	ldrh.w	r0, [r8, #2]
  4015d6:	4b56      	ldr	r3, [pc, #344]	; (401730 <ip_input+0x184>)
  4015d8:	4798      	blx	r3
  4015da:	4606      	mov	r6, r0
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
  4015dc:	896b      	ldrh	r3, [r5, #10]
  4015de:	42a3      	cmp	r3, r4
  4015e0:	d302      	bcc.n	4015e8 <ip_input+0x3c>
  4015e2:	892b      	ldrh	r3, [r5, #8]
  4015e4:	4283      	cmp	r3, r0
  4015e6:	d203      	bcs.n	4015f0 <ip_input+0x44>
    pbuf_free(p);
  4015e8:	4628      	mov	r0, r5
  4015ea:	4b50      	ldr	r3, [pc, #320]	; (40172c <ip_input+0x180>)
  4015ec:	4798      	blx	r3
    return ERR_OK;
  4015ee:	e7e9      	b.n	4015c4 <ip_input+0x18>
  if (inet_chksum(iphdr, iphdr_hlen) != 0) {
  4015f0:	4621      	mov	r1, r4
  4015f2:	4640      	mov	r0, r8
  4015f4:	4b4f      	ldr	r3, [pc, #316]	; (401734 <ip_input+0x188>)
  4015f6:	4798      	blx	r3
  4015f8:	b9a0      	cbnz	r0, 401624 <ip_input+0x78>
  pbuf_realloc(p, iphdr_len);
  4015fa:	4631      	mov	r1, r6
  4015fc:	4628      	mov	r0, r5
  4015fe:	4b4e      	ldr	r3, [pc, #312]	; (401738 <ip_input+0x18c>)
  401600:	4798      	blx	r3
  ip_addr_copy(current_iphdr_dest, iphdr->dest);
  401602:	f8d8 2010 	ldr.w	r2, [r8, #16]
  401606:	4b4d      	ldr	r3, [pc, #308]	; (40173c <ip_input+0x190>)
  401608:	601a      	str	r2, [r3, #0]
  ip_addr_copy(current_iphdr_src, iphdr->src);
  40160a:	f8d8 200c 	ldr.w	r2, [r8, #12]
  40160e:	4b4c      	ldr	r3, [pc, #304]	; (401740 <ip_input+0x194>)
  401610:	601a      	str	r2, [r3, #0]
    netif = inp;
  401612:	463c      	mov	r4, r7
    int first = 1;
  401614:	2601      	movs	r6, #1
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
  401616:	f8df a124 	ldr.w	sl, [pc, #292]	; 40173c <ip_input+0x190>
            ip_addr_isbroadcast(&current_iphdr_dest, netif)) {
  40161a:	f8df b128 	ldr.w	fp, [pc, #296]	; 401744 <ip_input+0x198>
        netif = netif_list;
  40161e:	f8df 9144 	ldr.w	r9, [pc, #324]	; 401764 <ip_input+0x1b8>
  401622:	e00c      	b.n	40163e <ip_input+0x92>
    pbuf_free(p);
  401624:	4628      	mov	r0, r5
  401626:	4b41      	ldr	r3, [pc, #260]	; (40172c <ip_input+0x180>)
  401628:	4798      	blx	r3
    return ERR_OK;
  40162a:	e7cb      	b.n	4015c4 <ip_input+0x18>
      if (first) {
  40162c:	2e00      	cmp	r6, #0
  40162e:	d050      	beq.n	4016d2 <ip_input+0x126>
        netif = netif_list;
  401630:	f8d9 4000 	ldr.w	r4, [r9]
      if (netif == inp) {
  401634:	42bc      	cmp	r4, r7
        netif = netif->next;
  401636:	bf08      	it	eq
  401638:	6824      	ldreq	r4, [r4, #0]
  40163a:	2600      	movs	r6, #0
    } while(netif != NULL);
  40163c:	b194      	cbz	r4, 401664 <ip_input+0xb8>
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
  40163e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
  401642:	f013 0f01 	tst.w	r3, #1
  401646:	d0f1      	beq.n	40162c <ip_input+0x80>
  401648:	f114 0f04 	cmn.w	r4, #4
  40164c:	d0ee      	beq.n	40162c <ip_input+0x80>
  40164e:	6863      	ldr	r3, [r4, #4]
  401650:	2b00      	cmp	r3, #0
  401652:	d0eb      	beq.n	40162c <ip_input+0x80>
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
  401654:	f8da 0000 	ldr.w	r0, [sl]
  401658:	4283      	cmp	r3, r0
  40165a:	d003      	beq.n	401664 <ip_input+0xb8>
            ip_addr_isbroadcast(&current_iphdr_dest, netif)) {
  40165c:	4621      	mov	r1, r4
  40165e:	47d8      	blx	fp
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
  401660:	2800      	cmp	r0, #0
  401662:	d0e3      	beq.n	40162c <ip_input+0x80>
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
  401664:	4639      	mov	r1, r7
  401666:	4b36      	ldr	r3, [pc, #216]	; (401740 <ip_input+0x194>)
  401668:	6818      	ldr	r0, [r3, #0]
  40166a:	4b36      	ldr	r3, [pc, #216]	; (401744 <ip_input+0x198>)
  40166c:	4798      	blx	r3
  40166e:	2800      	cmp	r0, #0
  401670:	d131      	bne.n	4016d6 <ip_input+0x12a>
         (ip_addr_ismulticast(&current_iphdr_src))) {
  401672:	4b33      	ldr	r3, [pc, #204]	; (401740 <ip_input+0x194>)
  401674:	681b      	ldr	r3, [r3, #0]
  401676:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
  40167a:	2be0      	cmp	r3, #224	; 0xe0
  40167c:	d02b      	beq.n	4016d6 <ip_input+0x12a>
  if (netif == NULL) {
  40167e:	b374      	cbz	r4, 4016de <ip_input+0x132>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
  401680:	f8b8 3006 	ldrh.w	r3, [r8, #6]
  401684:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  401688:	b29b      	uxth	r3, r3
  40168a:	bb63      	cbnz	r3, 4016e6 <ip_input+0x13a>
  current_netif = inp;
  40168c:	4b2e      	ldr	r3, [pc, #184]	; (401748 <ip_input+0x19c>)
  40168e:	601f      	str	r7, [r3, #0]
  current_header = iphdr;
  401690:	4b2e      	ldr	r3, [pc, #184]	; (40174c <ip_input+0x1a0>)
  401692:	f8c3 8000 	str.w	r8, [r3]
    switch (IPH_PROTO(iphdr)) {
  401696:	f898 3009 	ldrb.w	r3, [r8, #9]
  40169a:	2b06      	cmp	r3, #6
  40169c:	d03b      	beq.n	401716 <ip_input+0x16a>
  40169e:	2b11      	cmp	r3, #17
  4016a0:	d02b      	beq.n	4016fa <ip_input+0x14e>
  4016a2:	2b01      	cmp	r3, #1
  4016a4:	d03c      	beq.n	401720 <ip_input+0x174>
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
  4016a6:	4639      	mov	r1, r7
  4016a8:	4b24      	ldr	r3, [pc, #144]	; (40173c <ip_input+0x190>)
  4016aa:	6818      	ldr	r0, [r3, #0]
  4016ac:	4b25      	ldr	r3, [pc, #148]	; (401744 <ip_input+0x198>)
  4016ae:	4798      	blx	r3
  4016b0:	b958      	cbnz	r0, 4016ca <ip_input+0x11e>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
  4016b2:	4b22      	ldr	r3, [pc, #136]	; (40173c <ip_input+0x190>)
  4016b4:	681b      	ldr	r3, [r3, #0]
  4016b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
  4016ba:	2be0      	cmp	r3, #224	; 0xe0
  4016bc:	d005      	beq.n	4016ca <ip_input+0x11e>
        p->payload = iphdr;
  4016be:	f8c5 8004 	str.w	r8, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
  4016c2:	2102      	movs	r1, #2
  4016c4:	4628      	mov	r0, r5
  4016c6:	4b22      	ldr	r3, [pc, #136]	; (401750 <ip_input+0x1a4>)
  4016c8:	4798      	blx	r3
      pbuf_free(p);
  4016ca:	4628      	mov	r0, r5
  4016cc:	4b17      	ldr	r3, [pc, #92]	; (40172c <ip_input+0x180>)
  4016ce:	4798      	blx	r3
  4016d0:	e017      	b.n	401702 <ip_input+0x156>
        netif = netif->next;
  4016d2:	6824      	ldr	r4, [r4, #0]
  4016d4:	e7ae      	b.n	401634 <ip_input+0x88>
      pbuf_free(p);
  4016d6:	4628      	mov	r0, r5
  4016d8:	4b14      	ldr	r3, [pc, #80]	; (40172c <ip_input+0x180>)
  4016da:	4798      	blx	r3
      return ERR_OK;
  4016dc:	e772      	b.n	4015c4 <ip_input+0x18>
    pbuf_free(p);
  4016de:	4628      	mov	r0, r5
  4016e0:	4b12      	ldr	r3, [pc, #72]	; (40172c <ip_input+0x180>)
  4016e2:	4798      	blx	r3
    return ERR_OK;
  4016e4:	e76e      	b.n	4015c4 <ip_input+0x18>
    p = ip_reass(p);
  4016e6:	4628      	mov	r0, r5
  4016e8:	4b1a      	ldr	r3, [pc, #104]	; (401754 <ip_input+0x1a8>)
  4016ea:	4798      	blx	r3
    if (p == NULL) {
  4016ec:	4605      	mov	r5, r0
  4016ee:	2800      	cmp	r0, #0
  4016f0:	f43f af68 	beq.w	4015c4 <ip_input+0x18>
    iphdr = (struct ip_hdr *)p->payload;
  4016f4:	f8d0 8004 	ldr.w	r8, [r0, #4]
  4016f8:	e7c8      	b.n	40168c <ip_input+0xe0>
      udp_input(p, inp);
  4016fa:	4639      	mov	r1, r7
  4016fc:	4628      	mov	r0, r5
  4016fe:	4b16      	ldr	r3, [pc, #88]	; (401758 <ip_input+0x1ac>)
  401700:	4798      	blx	r3
  current_netif = NULL;
  401702:	2300      	movs	r3, #0
  401704:	4a10      	ldr	r2, [pc, #64]	; (401748 <ip_input+0x19c>)
  401706:	6013      	str	r3, [r2, #0]
  current_header = NULL;
  401708:	4a10      	ldr	r2, [pc, #64]	; (40174c <ip_input+0x1a0>)
  40170a:	6013      	str	r3, [r2, #0]
  ip_addr_set_any(&current_iphdr_src);
  40170c:	4a0c      	ldr	r2, [pc, #48]	; (401740 <ip_input+0x194>)
  40170e:	6013      	str	r3, [r2, #0]
  ip_addr_set_any(&current_iphdr_dest);
  401710:	4a0a      	ldr	r2, [pc, #40]	; (40173c <ip_input+0x190>)
  401712:	6013      	str	r3, [r2, #0]
  return ERR_OK;
  401714:	e756      	b.n	4015c4 <ip_input+0x18>
      tcp_input(p, inp);
  401716:	4639      	mov	r1, r7
  401718:	4628      	mov	r0, r5
  40171a:	4b10      	ldr	r3, [pc, #64]	; (40175c <ip_input+0x1b0>)
  40171c:	4798      	blx	r3
      break;
  40171e:	e7f0      	b.n	401702 <ip_input+0x156>
      icmp_input(p, inp);
  401720:	4639      	mov	r1, r7
  401722:	4628      	mov	r0, r5
  401724:	4b0e      	ldr	r3, [pc, #56]	; (401760 <ip_input+0x1b4>)
  401726:	4798      	blx	r3
      break;
  401728:	e7eb      	b.n	401702 <ip_input+0x156>
  40172a:	bf00      	nop
  40172c:	0040262d 	.word	0x0040262d
  401730:	0040119f 	.word	0x0040119f
  401734:	00401505 	.word	0x00401505
  401738:	004027cd 	.word	0x004027cd
  40173c:	20403938 	.word	0x20403938
  401740:	20403930 	.word	0x20403930
  401744:	004018a5 	.word	0x004018a5
  401748:	20403934 	.word	0x20403934
  40174c:	2040393c 	.word	0x2040393c
  401750:	004013d1 	.word	0x004013d1
  401754:	00401b15 	.word	0x00401b15
  401758:	004055d1 	.word	0x004055d1
  40175c:	00404041 	.word	0x00404041
  401760:	00401279 	.word	0x00401279
  401764:	20404954 	.word	0x20404954

00401768 <ip_output_if>:
 */
err_t
ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
  401768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40176c:	b087      	sub	sp, #28
  40176e:	4605      	mov	r5, r0
  401770:	9102      	str	r1, [sp, #8]
  401772:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
  401776:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
  40177a:	9e12      	ldr	r6, [sp, #72]	; 0x48
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  snmp_inc_ipoutrequests();

  /* Should the IP header be generated or is it already included in p? */
  if (dest != IP_HDRINCL) {
  40177c:	9201      	str	r2, [sp, #4]
  40177e:	2a00      	cmp	r2, #0
  401780:	d057      	beq.n	401832 <ip_output_if+0xca>
  401782:	469a      	mov	sl, r3
  401784:	4617      	mov	r7, r2
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
  401786:	2114      	movs	r1, #20
  401788:	4b32      	ldr	r3, [pc, #200]	; (401854 <ip_output_if+0xec>)
  40178a:	4798      	blx	r3
  40178c:	2800      	cmp	r0, #0
  40178e:	d15d      	bne.n	40184c <ip_output_if+0xe4>
      IP_STATS_INC(ip.err);
      snmp_inc_ipoutdiscards();
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
  401790:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
  401792:	f884 a008 	strb.w	sl, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
  401796:	f884 b009 	strb.w	fp, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(proto, ttl);
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip_addr_copy(iphdr->dest, *dest);
  40179a:	683b      	ldr	r3, [r7, #0]
  40179c:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
  40179e:	b29a      	uxth	r2, r3
  4017a0:	9203      	str	r2, [sp, #12]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
  4017a2:	ea4f 4913 	mov.w	r9, r3, lsr #16
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
  4017a6:	2345      	movs	r3, #69	; 0x45
  4017a8:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
  4017aa:	f884 8001 	strb.w	r8, [r4, #1]
    chk_sum += LWIP_MAKE_U16(proto, ttl);
  4017ae:	ea4a 2a0b 	orr.w	sl, sl, fp, lsl #8
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
  4017b2:	ea4f 2808 	mov.w	r8, r8, lsl #8
  4017b6:	ea48 0803 	orr.w	r8, r8, r3
  4017ba:	eb0a 0b08 	add.w	fp, sl, r8
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, htons(p->tot_len));
  4017be:	8928      	ldrh	r0, [r5, #8]
  4017c0:	4f25      	ldr	r7, [pc, #148]	; (401858 <ip_output_if+0xf0>)
  4017c2:	47b8      	blx	r7
  4017c4:	4682      	mov	sl, r0
  4017c6:	8060      	strh	r0, [r4, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
  4017c8:	2300      	movs	r3, #0
  4017ca:	71a3      	strb	r3, [r4, #6]
  4017cc:	71e3      	strb	r3, [r4, #7]
    IPH_ID_SET(iphdr, htons(ip_id));
  4017ce:	f8df 8090 	ldr.w	r8, [pc, #144]	; 401860 <ip_output_if+0xf8>
  4017d2:	f8b8 0000 	ldrh.w	r0, [r8]
  4017d6:	47b8      	blx	r7
  4017d8:	80a0      	strh	r0, [r4, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
  4017da:	f8b8 3000 	ldrh.w	r3, [r8]
  4017de:	3301      	adds	r3, #1
  4017e0:	f8a8 3000 	strh.w	r3, [r8]

    if (ip_addr_isany(src)) {
  4017e4:	9b02      	ldr	r3, [sp, #8]
  4017e6:	b10b      	cbz	r3, 4017ec <ip_output_if+0x84>
  4017e8:	681b      	ldr	r3, [r3, #0]
  4017ea:	bb03      	cbnz	r3, 40182e <ip_output_if+0xc6>
      ip_addr_copy(iphdr->src, netif->ip_addr);
  4017ec:	6873      	ldr	r3, [r6, #4]
  4017ee:	60e3      	str	r3, [r4, #12]
      /* src cannot be NULL here */
      ip_addr_copy(iphdr->src, *src);
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
  4017f0:	68e2      	ldr	r2, [r4, #12]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
  4017f2:	fa1b f382 	uxtah	r3, fp, r2
  4017f6:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  4017fa:	9a03      	ldr	r2, [sp, #12]
  4017fc:	4413      	add	r3, r2
  4017fe:	444b      	add	r3, r9
  401800:	449a      	add	sl, r3
  401802:	4450      	add	r0, sl
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
  401804:	fa1f fa80 	uxth.w	sl, r0
  401808:	eb0a 4010 	add.w	r0, sl, r0, lsr #16
    chk_sum = (chk_sum >> 16) + chk_sum;
  40180c:	eb00 4010 	add.w	r0, r0, r0, lsr #16
    chk_sum = ~chk_sum;
    iphdr->_chksum = chk_sum; /* network order */
  401810:	43c0      	mvns	r0, r0
  401812:	8160      	strh	r0, [r4, #10]
  }
#endif /* LWIP_IGMP */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
  401814:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
  401816:	b113      	cbz	r3, 40181e <ip_output_if+0xb6>
  401818:	892a      	ldrh	r2, [r5, #8]
  40181a:	429a      	cmp	r2, r3
  40181c:	d810      	bhi.n	401840 <ip_output_if+0xd8>
    return ip_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));
  return netif->output(netif, p, dest);
  40181e:	6973      	ldr	r3, [r6, #20]
  401820:	9a01      	ldr	r2, [sp, #4]
  401822:	4629      	mov	r1, r5
  401824:	4630      	mov	r0, r6
  401826:	4798      	blx	r3
}
  401828:	b007      	add	sp, #28
  40182a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ip_addr_copy(iphdr->src, *src);
  40182e:	60e3      	str	r3, [r4, #12]
  401830:	e7de      	b.n	4017f0 <ip_output_if+0x88>
    ip_addr_copy(dest_addr, iphdr->dest);
  401832:	6843      	ldr	r3, [r0, #4]
  401834:	691b      	ldr	r3, [r3, #16]
  401836:	aa06      	add	r2, sp, #24
  401838:	f842 3d04 	str.w	r3, [r2, #-4]!
  40183c:	9201      	str	r2, [sp, #4]
  40183e:	e7e9      	b.n	401814 <ip_output_if+0xac>
    return ip_frag(p, netif, dest);
  401840:	9a01      	ldr	r2, [sp, #4]
  401842:	4631      	mov	r1, r6
  401844:	4628      	mov	r0, r5
  401846:	4b05      	ldr	r3, [pc, #20]	; (40185c <ip_output_if+0xf4>)
  401848:	4798      	blx	r3
  40184a:	e7ed      	b.n	401828 <ip_output_if+0xc0>
      return ERR_BUF;
  40184c:	f06f 0001 	mvn.w	r0, #1
  401850:	e7ea      	b.n	401828 <ip_output_if+0xc0>
  401852:	bf00      	nop
  401854:	004025bf 	.word	0x004025bf
  401858:	00401195 	.word	0x00401195
  40185c:	00401e79 	.word	0x00401e79
  401860:	20400aa8 	.word	0x20400aa8

00401864 <ip_output>:
 *         see ip_output_if() for more return values
 */
err_t
ip_output(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
  401864:	b5f0      	push	{r4, r5, r6, r7, lr}
  401866:	b085      	sub	sp, #20
  401868:	4605      	mov	r5, r0
  40186a:	460e      	mov	r6, r1
  40186c:	4614      	mov	r4, r2
  40186e:	461f      	mov	r7, r3

  /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
     gets altered as the packet is passed down the stack */
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  if ((netif = ip_route(dest)) == NULL) {
  401870:	4610      	mov	r0, r2
  401872:	4b0a      	ldr	r3, [pc, #40]	; (40189c <ip_output+0x38>)
  401874:	4798      	blx	r3
  401876:	b170      	cbz	r0, 401896 <ip_output+0x32>
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    return ERR_RTE;
  }

  return ip_output_if(p, src, dest, ttl, tos, proto, netif);
  401878:	9002      	str	r0, [sp, #8]
  40187a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
  40187e:	9301      	str	r3, [sp, #4]
  401880:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
  401884:	9300      	str	r3, [sp, #0]
  401886:	463b      	mov	r3, r7
  401888:	4622      	mov	r2, r4
  40188a:	4631      	mov	r1, r6
  40188c:	4628      	mov	r0, r5
  40188e:	4c04      	ldr	r4, [pc, #16]	; (4018a0 <ip_output+0x3c>)
  401890:	47a0      	blx	r4
}
  401892:	b005      	add	sp, #20
  401894:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_RTE;
  401896:	f06f 0003 	mvn.w	r0, #3
  40189a:	e7fa      	b.n	401892 <ip_output+0x2e>
  40189c:	00401569 	.word	0x00401569
  4018a0:	00401769 	.word	0x00401769

004018a4 <ip4_addr_isbroadcast>:
{
  ip_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
  4018a4:	1e43      	subs	r3, r0, #1
  4018a6:	f113 0f03 	cmn.w	r3, #3
  4018aa:	d812      	bhi.n	4018d2 <ip4_addr_isbroadcast+0x2e>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
  4018ac:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
  4018b0:	f013 0f02 	tst.w	r3, #2
  4018b4:	d00f      	beq.n	4018d6 <ip4_addr_isbroadcast+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
  4018b6:	684b      	ldr	r3, [r1, #4]
  4018b8:	4298      	cmp	r0, r3
  4018ba:	d00e      	beq.n	4018da <ip4_addr_isbroadcast+0x36>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
  4018bc:	688a      	ldr	r2, [r1, #8]
  4018be:	4043      	eors	r3, r0
  4018c0:	4213      	tst	r3, r2
  4018c2:	d10c      	bne.n	4018de <ip4_addr_isbroadcast+0x3a>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
  4018c4:	43d2      	mvns	r2, r2
  4018c6:	ea32 0300 	bics.w	r3, r2, r0
    return 1;
  4018ca:	bf0c      	ite	eq
  4018cc:	2001      	moveq	r0, #1
  4018ce:	2000      	movne	r0, #0
  4018d0:	4770      	bx	lr
  4018d2:	2001      	movs	r0, #1
  4018d4:	4770      	bx	lr
    return 0;
  4018d6:	2000      	movs	r0, #0
  4018d8:	4770      	bx	lr
    return 0;
  4018da:	2000      	movs	r0, #0
  4018dc:	4770      	bx	lr
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
  4018de:	2000      	movs	r0, #0
  }
}
  4018e0:	4770      	bx	lr
	...

004018e4 <ipaddr_ntoa_r>:
 * @param buflen length of buf
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *ipaddr_ntoa_r(const ip_addr_t *addr, char *buf, int buflen)
{
  4018e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4018e8:	b085      	sub	sp, #20
  4018ea:	9101      	str	r1, [sp, #4]
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;

  s_addr = ip4_addr_get_u32(addr);
  4018ec:	6803      	ldr	r3, [r0, #0]
  4018ee:	f10d 0c10 	add.w	ip, sp, #16
  4018f2:	f84c 3d04 	str.w	r3, [ip, #-4]!

  rp = buf;
  4018f6:	460c      	mov	r4, r1
  int len = 0;
  4018f8:	f04f 0800 	mov.w	r8, #0
  4018fc:	46c1      	mov	r9, r8
  ap = (u8_t *)&s_addr;
  for(n = 0; n < 4; n++) {
    i = 0;
    do {
      rem = *ap % (u8_t)10;
  4018fe:	4f27      	ldr	r7, [pc, #156]	; (40199c <ipaddr_ntoa_r+0xb8>)
  401900:	f102 0e01 	add.w	lr, r2, #1
      *rp++ = inv[i];
    }
    if (len++ >= buflen) {
      return NULL;
    }
    *rp++ = '.';
  401904:	f04f 0b2e 	mov.w	fp, #46	; 0x2e
  401908:	4666      	mov	r6, ip
  40190a:	f89c 3000 	ldrb.w	r3, [ip]
  int len = 0;
  40190e:	4648      	mov	r0, r9
  401910:	469a      	mov	sl, r3
  401912:	e000      	b.n	401916 <ipaddr_ntoa_r+0x32>
      inv[i++] = '0' + rem;
  401914:	4628      	mov	r0, r5
      rem = *ap % (u8_t)10;
  401916:	fba7 310a 	umull	r3, r1, r7, sl
  40191a:	08c9      	lsrs	r1, r1, #3
  40191c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  401920:	ebaa 0343 	sub.w	r3, sl, r3, lsl #1
      inv[i++] = '0' + rem;
  401924:	1c45      	adds	r5, r0, #1
  401926:	b2ed      	uxtb	r5, r5
  401928:	3330      	adds	r3, #48	; 0x30
  40192a:	f10d 0a10 	add.w	sl, sp, #16
  40192e:	4482      	add	sl, r0
  401930:	f80a 3c08 	strb.w	r3, [sl, #-8]
    } while(*ap);
  401934:	f001 0aff 	and.w	sl, r1, #255	; 0xff
  401938:	2900      	cmp	r1, #0
  40193a:	d1eb      	bne.n	401914 <ipaddr_ntoa_r+0x30>
  40193c:	f886 9000 	strb.w	r9, [r6]
  401940:	f10c 0c01 	add.w	ip, ip, #1
    while(i--) {
  401944:	b1ad      	cbz	r5, 401972 <ipaddr_ntoa_r+0x8e>
      if (len++ >= buflen) {
  401946:	f108 0101 	add.w	r1, r8, #1
  40194a:	4542      	cmp	r2, r8
  40194c:	dd21      	ble.n	401992 <ipaddr_ntoa_r+0xae>
  40194e:	ab02      	add	r3, sp, #8
  401950:	181d      	adds	r5, r3, r0
  401952:	1e63      	subs	r3, r4, #1
  401954:	4420      	add	r0, r4
  401956:	1c9e      	adds	r6, r3, #2
      *rp++ = inv[i];
  401958:	f815 4901 	ldrb.w	r4, [r5], #-1
  40195c:	f803 4f01 	strb.w	r4, [r3, #1]!
    while(i--) {
  401960:	4298      	cmp	r0, r3
  401962:	d008      	beq.n	401976 <ipaddr_ntoa_r+0x92>
      if (len++ >= buflen) {
  401964:	3101      	adds	r1, #1
  401966:	4571      	cmp	r1, lr
  401968:	d1f5      	bne.n	401956 <ipaddr_ntoa_r+0x72>
        return NULL;
  40196a:	2000      	movs	r0, #0
    ap++;
  }
  *--rp = 0;
  return buf;
}
  40196c:	b005      	add	sp, #20
  40196e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while(i--) {
  401972:	4641      	mov	r1, r8
  401974:	4626      	mov	r6, r4
    if (len++ >= buflen) {
  401976:	f101 0801 	add.w	r8, r1, #1
  40197a:	428a      	cmp	r2, r1
  40197c:	dd0b      	ble.n	401996 <ipaddr_ntoa_r+0xb2>
    *rp++ = '.';
  40197e:	1c74      	adds	r4, r6, #1
  401980:	f886 b000 	strb.w	fp, [r6]
  for(n = 0; n < 4; n++) {
  401984:	ab04      	add	r3, sp, #16
  401986:	459c      	cmp	ip, r3
  401988:	d1be      	bne.n	401908 <ipaddr_ntoa_r+0x24>
  *--rp = 0;
  40198a:	2300      	movs	r3, #0
  40198c:	7033      	strb	r3, [r6, #0]
  return buf;
  40198e:	9801      	ldr	r0, [sp, #4]
  401990:	e7ec      	b.n	40196c <ipaddr_ntoa_r+0x88>
        return NULL;
  401992:	2000      	movs	r0, #0
  401994:	e7ea      	b.n	40196c <ipaddr_ntoa_r+0x88>
      return NULL;
  401996:	2000      	movs	r0, #0
  401998:	e7e8      	b.n	40196c <ipaddr_ntoa_r+0x88>
  40199a:	bf00      	nop
  40199c:	cccccccd 	.word	0xcccccccd

004019a0 <ipaddr_ntoa>:
{
  4019a0:	b508      	push	{r3, lr}
  return ipaddr_ntoa_r(addr, str, 16);
  4019a2:	2210      	movs	r2, #16
  4019a4:	4901      	ldr	r1, [pc, #4]	; (4019ac <ipaddr_ntoa+0xc>)
  4019a6:	4b02      	ldr	r3, [pc, #8]	; (4019b0 <ipaddr_ntoa+0x10>)
  4019a8:	4798      	blx	r3
}
  4019aa:	bd08      	pop	{r3, pc}
  4019ac:	20400aac 	.word	0x20400aac
  4019b0:	004018e5 	.word	0x004018e5

004019b4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  4019b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4019b8:	4681      	mov	r9, r0
  4019ba:	468a      	mov	sl, r1
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
  }

  snmp_inc_ipreasmfails();
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
  4019bc:	6845      	ldr	r5, [r0, #4]
  4019be:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
  4019c0:	889a      	ldrh	r2, [r3, #4]
  4019c2:	b322      	cbz	r2, 401a0e <ip_reass_free_complete_datagram+0x5a>
  u16_t pbufs_freed = 0;
  4019c4:	2400      	movs	r4, #0
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released 
     separately as they have not yet been chained */
  p = ipr->p;
  4019c6:	f8d9 6004 	ldr.w	r6, [r9, #4]
  while (p != NULL) {
  4019ca:	b16e      	cbz	r6, 4019e8 <ip_reass_free_complete_datagram+0x34>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
    pcur = p;
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
    clen = pbuf_clen(pcur);
  4019cc:	f8df 8094 	ldr.w	r8, [pc, #148]	; 401a64 <ip_reass_free_complete_datagram+0xb0>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
    pbuf_free(pcur);
  4019d0:	4f1f      	ldr	r7, [pc, #124]	; (401a50 <ip_reass_free_complete_datagram+0x9c>)
    iprh = (struct ip_reass_helper *)p->payload;
  4019d2:	6873      	ldr	r3, [r6, #4]
    p = iprh->next_pbuf;
  4019d4:	681d      	ldr	r5, [r3, #0]
    clen = pbuf_clen(pcur);
  4019d6:	4630      	mov	r0, r6
  4019d8:	47c0      	blx	r8
    pbufs_freed += clen;
  4019da:	4404      	add	r4, r0
  4019dc:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
  4019de:	4630      	mov	r0, r6
  4019e0:	47b8      	blx	r7
    p = iprh->next_pbuf;
  4019e2:	462e      	mov	r6, r5
  while (p != NULL) {
  4019e4:	2d00      	cmp	r5, #0
  4019e6:	d1f4      	bne.n	4019d2 <ip_reass_free_complete_datagram+0x1e>
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
  4019e8:	4b1a      	ldr	r3, [pc, #104]	; (401a54 <ip_reass_free_complete_datagram+0xa0>)
  4019ea:	681b      	ldr	r3, [r3, #0]
  4019ec:	4599      	cmp	r9, r3
  4019ee:	d029      	beq.n	401a44 <ip_reass_free_complete_datagram+0x90>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  4019f0:	f8d9 3000 	ldr.w	r3, [r9]
  4019f4:	f8ca 3000 	str.w	r3, [sl]
  }

  /* now we can free the ip_reass struct */
  memp_free(MEMP_REASSDATA, ipr);
  4019f8:	4649      	mov	r1, r9
  4019fa:	2004      	movs	r0, #4
  4019fc:	4b16      	ldr	r3, [pc, #88]	; (401a58 <ip_reass_free_complete_datagram+0xa4>)
  4019fe:	4798      	blx	r3
  ip_reass_pbufcount -= pbufs_freed;
  401a00:	4a16      	ldr	r2, [pc, #88]	; (401a5c <ip_reass_free_complete_datagram+0xa8>)
  401a02:	8813      	ldrh	r3, [r2, #0]
  401a04:	1b1b      	subs	r3, r3, r4
  401a06:	8013      	strh	r3, [r2, #0]
}
  401a08:	4620      	mov	r0, r4
  401a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ipr->p = iprh->next_pbuf;
  401a0e:	681b      	ldr	r3, [r3, #0]
  401a10:	6043      	str	r3, [r0, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
  401a12:	686a      	ldr	r2, [r5, #4]
  401a14:	4603      	mov	r3, r0
  401a16:	f853 1f08 	ldr.w	r1, [r3, #8]!
  401a1a:	685e      	ldr	r6, [r3, #4]
  401a1c:	689c      	ldr	r4, [r3, #8]
  401a1e:	68d8      	ldr	r0, [r3, #12]
  401a20:	6011      	str	r1, [r2, #0]
  401a22:	6056      	str	r6, [r2, #4]
  401a24:	6094      	str	r4, [r2, #8]
  401a26:	60d0      	str	r0, [r2, #12]
  401a28:	6919      	ldr	r1, [r3, #16]
  401a2a:	6111      	str	r1, [r2, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
  401a2c:	2101      	movs	r1, #1
  401a2e:	4628      	mov	r0, r5
  401a30:	4b0b      	ldr	r3, [pc, #44]	; (401a60 <ip_reass_free_complete_datagram+0xac>)
  401a32:	4798      	blx	r3
    clen = pbuf_clen(p);
  401a34:	4628      	mov	r0, r5
  401a36:	4b0b      	ldr	r3, [pc, #44]	; (401a64 <ip_reass_free_complete_datagram+0xb0>)
  401a38:	4798      	blx	r3
    pbufs_freed += clen;
  401a3a:	b284      	uxth	r4, r0
    pbuf_free(p);
  401a3c:	4628      	mov	r0, r5
  401a3e:	4b04      	ldr	r3, [pc, #16]	; (401a50 <ip_reass_free_complete_datagram+0x9c>)
  401a40:	4798      	blx	r3
  401a42:	e7c0      	b.n	4019c6 <ip_reass_free_complete_datagram+0x12>
    reassdatagrams = ipr->next;
  401a44:	f8d9 2000 	ldr.w	r2, [r9]
  401a48:	4b02      	ldr	r3, [pc, #8]	; (401a54 <ip_reass_free_complete_datagram+0xa0>)
  401a4a:	601a      	str	r2, [r3, #0]
  401a4c:	e7d4      	b.n	4019f8 <ip_reass_free_complete_datagram+0x44>
  401a4e:	bf00      	nop
  401a50:	0040262d 	.word	0x0040262d
  401a54:	20400ac0 	.word	0x20400ac0
  401a58:	00402475 	.word	0x00402475
  401a5c:	20400abc 	.word	0x20400abc
  401a60:	004013e1 	.word	0x004013e1
  401a64:	0040282d 	.word	0x0040282d

00401a68 <ip_reass_remove_oldest_datagram>:
{
  401a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401a6c:	4605      	mov	r5, r0
  401a6e:	4688      	mov	r8, r1
  int pbufs_freed = 0, pbufs_freed_current;
  401a70:	2600      	movs	r6, #0
    r = reassdatagrams;
  401a72:	4f19      	ldr	r7, [pc, #100]	; (401ad8 <ip_reass_remove_oldest_datagram+0x70>)
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, prev);
  401a74:	f8df 9064 	ldr.w	r9, [pc, #100]	; 401adc <ip_reass_remove_oldest_datagram+0x74>
  401a78:	e022      	b.n	401ac0 <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
  401a7a:	3401      	adds	r4, #1
        if (oldest == NULL) {
  401a7c:	b1b8      	cbz	r0, 401aae <ip_reass_remove_oldest_datagram+0x46>
        } else if (r->timer <= oldest->timer) {
  401a7e:	f893 c01f 	ldrb.w	ip, [r3, #31]
  401a82:	7fc2      	ldrb	r2, [r0, #31]
  401a84:	4594      	cmp	ip, r2
  401a86:	bf98      	it	ls
  401a88:	4618      	movls	r0, r3
      if (r->next != NULL) {
  401a8a:	681a      	ldr	r2, [r3, #0]
  401a8c:	b18a      	cbz	r2, 401ab2 <ip_reass_remove_oldest_datagram+0x4a>
  401a8e:	4619      	mov	r1, r3
  401a90:	4613      	mov	r3, r2
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
  401a92:	695a      	ldr	r2, [r3, #20]
  401a94:	4572      	cmp	r2, lr
  401a96:	d1f0      	bne.n	401a7a <ip_reass_remove_oldest_datagram+0x12>
  401a98:	f8d5 c010 	ldr.w	ip, [r5, #16]
  401a9c:	699a      	ldr	r2, [r3, #24]
  401a9e:	4562      	cmp	r2, ip
  401aa0:	d1eb      	bne.n	401a7a <ip_reass_remove_oldest_datagram+0x12>
  401aa2:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
  401aa6:	88aa      	ldrh	r2, [r5, #4]
  401aa8:	4594      	cmp	ip, r2
  401aaa:	d1e6      	bne.n	401a7a <ip_reass_remove_oldest_datagram+0x12>
  401aac:	e7ed      	b.n	401a8a <ip_reass_remove_oldest_datagram+0x22>
  401aae:	4618      	mov	r0, r3
  401ab0:	e7eb      	b.n	401a8a <ip_reass_remove_oldest_datagram+0x22>
    if (oldest != NULL) {
  401ab2:	b108      	cbz	r0, 401ab8 <ip_reass_remove_oldest_datagram+0x50>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, prev);
  401ab4:	47c8      	blx	r9
      pbufs_freed += pbufs_freed_current;
  401ab6:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
  401ab8:	4546      	cmp	r6, r8
  401aba:	da09      	bge.n	401ad0 <ip_reass_remove_oldest_datagram+0x68>
  401abc:	2c01      	cmp	r4, #1
  401abe:	dd07      	ble.n	401ad0 <ip_reass_remove_oldest_datagram+0x68>
    r = reassdatagrams;
  401ac0:	683b      	ldr	r3, [r7, #0]
    while (r != NULL) {
  401ac2:	b12b      	cbz	r3, 401ad0 <ip_reass_remove_oldest_datagram+0x68>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
  401ac4:	f8d5 e00c 	ldr.w	lr, [r5, #12]
  401ac8:	2400      	movs	r4, #0
  401aca:	4621      	mov	r1, r4
  401acc:	4620      	mov	r0, r4
  401ace:	e7e0      	b.n	401a92 <ip_reass_remove_oldest_datagram+0x2a>
}
  401ad0:	4630      	mov	r0, r6
  401ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401ad6:	bf00      	nop
  401ad8:	20400ac0 	.word	0x20400ac0
  401adc:	004019b5 	.word	0x004019b5

00401ae0 <ip_reass_tmr>:
  r = reassdatagrams;
  401ae0:	4b0a      	ldr	r3, [pc, #40]	; (401b0c <ip_reass_tmr+0x2c>)
  401ae2:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
  401ae4:	b188      	cbz	r0, 401b0a <ip_reass_tmr+0x2a>
{
  401ae6:	b570      	push	{r4, r5, r6, lr}
  while (r != NULL) {
  401ae8:	2400      	movs	r4, #0
      ip_reass_free_complete_datagram(tmp, prev);
  401aea:	4e09      	ldr	r6, [pc, #36]	; (401b10 <ip_reass_tmr+0x30>)
  401aec:	e004      	b.n	401af8 <ip_reass_tmr+0x18>
      r = r->next;
  401aee:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
  401af0:	4621      	mov	r1, r4
  401af2:	47b0      	blx	r6
      r = r->next;
  401af4:	4628      	mov	r0, r5
  while (r != NULL) {
  401af6:	b138      	cbz	r0, 401b08 <ip_reass_tmr+0x28>
    if (r->timer > 0) {
  401af8:	7fc3      	ldrb	r3, [r0, #31]
  401afa:	2b00      	cmp	r3, #0
  401afc:	d0f7      	beq.n	401aee <ip_reass_tmr+0xe>
      r->timer--;
  401afe:	3b01      	subs	r3, #1
  401b00:	77c3      	strb	r3, [r0, #31]
  401b02:	4604      	mov	r4, r0
      r = r->next;
  401b04:	6800      	ldr	r0, [r0, #0]
  401b06:	e7f6      	b.n	401af6 <ip_reass_tmr+0x16>
  401b08:	bd70      	pop	{r4, r5, r6, pc}
  401b0a:	4770      	bx	lr
  401b0c:	20400ac0 	.word	0x20400ac0
  401b10:	004019b5 	.word	0x004019b5

00401b14 <ip_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip_reass(struct pbuf *p)
{
  401b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b18:	b083      	sub	sp, #12
  401b1a:	4607      	mov	r7, r0
  struct ip_reassdata *ipr_prev = NULL;

  IPFRAG_STATS_INC(ip_frag.recv);
  snmp_inc_ipreasmreqds();

  fraghdr = (struct ip_hdr*)p->payload;
  401b1c:	6846      	ldr	r6, [r0, #4]

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
  401b1e:	7833      	ldrb	r3, [r6, #0]
  401b20:	f003 030f 	and.w	r3, r3, #15
  401b24:	2b05      	cmp	r3, #5
  401b26:	d122      	bne.n	401b6e <ip_reass+0x5a>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  401b28:	88f0      	ldrh	r0, [r6, #6]
  401b2a:	4ca0      	ldr	r4, [pc, #640]	; (401dac <ip_reass+0x298>)
  401b2c:	47a0      	blx	r4
  401b2e:	4683      	mov	fp, r0
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  401b30:	8870      	ldrh	r0, [r6, #2]
  401b32:	47a0      	blx	r4
  401b34:	9001      	str	r0, [sp, #4]
  401b36:	f896 a000 	ldrb.w	sl, [r6]

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
  401b3a:	4638      	mov	r0, r7
  401b3c:	4b9c      	ldr	r3, [pc, #624]	; (401db0 <ip_reass+0x29c>)
  401b3e:	4798      	blx	r3
  401b40:	4680      	mov	r8, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
  401b42:	4b9c      	ldr	r3, [pc, #624]	; (401db4 <ip_reass+0x2a0>)
  401b44:	881b      	ldrh	r3, [r3, #0]
  401b46:	4403      	add	r3, r0
  401b48:	2b0a      	cmp	r3, #10
  401b4a:	dc06      	bgt.n	401b5a <ip_reass+0x46>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  401b4c:	4b9a      	ldr	r3, [pc, #616]	; (401db8 <ip_reass+0x2a4>)
  401b4e:	681c      	ldr	r4, [r3, #0]
  401b50:	2c00      	cmp	r4, #0
  401b52:	d079      	beq.n	401c48 <ip_reass+0x134>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
  401b54:	68f2      	ldr	r2, [r6, #12]
  401b56:	2500      	movs	r5, #0
  401b58:	e014      	b.n	401b84 <ip_reass+0x70>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  401b5a:	4601      	mov	r1, r0
  401b5c:	4630      	mov	r0, r6
  401b5e:	4b97      	ldr	r3, [pc, #604]	; (401dbc <ip_reass+0x2a8>)
  401b60:	4798      	blx	r3
  401b62:	b120      	cbz	r0, 401b6e <ip_reass+0x5a>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
  401b64:	4b93      	ldr	r3, [pc, #588]	; (401db4 <ip_reass+0x2a0>)
  401b66:	881b      	ldrh	r3, [r3, #0]
  401b68:	4443      	add	r3, r8
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  401b6a:	2b0a      	cmp	r3, #10
  401b6c:	ddee      	ble.n	401b4c <ip_reass+0x38>
  return NULL;

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
  401b6e:	4638      	mov	r0, r7
  401b70:	4b93      	ldr	r3, [pc, #588]	; (401dc0 <ip_reass+0x2ac>)
  401b72:	4798      	blx	r3
  return NULL;
  401b74:	f04f 0800 	mov.w	r8, #0
  401b78:	e101      	b.n	401d7e <ip_reass+0x26a>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  401b7a:	6823      	ldr	r3, [r4, #0]
  401b7c:	4625      	mov	r5, r4
  401b7e:	2b00      	cmp	r3, #0
  401b80:	d062      	beq.n	401c48 <ip_reass+0x134>
  401b82:	461c      	mov	r4, r3
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
  401b84:	6963      	ldr	r3, [r4, #20]
  401b86:	4293      	cmp	r3, r2
  401b88:	d1f7      	bne.n	401b7a <ip_reass+0x66>
  401b8a:	6933      	ldr	r3, [r6, #16]
  401b8c:	69a1      	ldr	r1, [r4, #24]
  401b8e:	4299      	cmp	r1, r3
  401b90:	d1f3      	bne.n	401b7a <ip_reass+0x66>
  401b92:	89a1      	ldrh	r1, [r4, #12]
  401b94:	88b3      	ldrh	r3, [r6, #4]
  401b96:	4299      	cmp	r1, r3
  401b98:	d1ef      	bne.n	401b7a <ip_reass+0x66>
  if (ipr == NULL) {
  401b9a:	2c00      	cmp	r4, #0
  401b9c:	d053      	beq.n	401c46 <ip_reass+0x132>
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
  401b9e:	88f0      	ldrh	r0, [r6, #6]
  401ba0:	4b82      	ldr	r3, [pc, #520]	; (401dac <ip_reass+0x298>)
  401ba2:	4798      	blx	r3
  401ba4:	f3c0 000c 	ubfx	r0, r0, #0, #13
  401ba8:	2800      	cmp	r0, #0
  401baa:	f000 8084 	beq.w	401cb6 <ip_reass+0x1a2>
  ip_reass_pbufcount += clen;
  401bae:	4b81      	ldr	r3, [pc, #516]	; (401db4 <ip_reass+0x2a0>)
  401bb0:	881a      	ldrh	r2, [r3, #0]
  401bb2:	4490      	add	r8, r2
  401bb4:	f8a3 8000 	strh.w	r8, [r3]
  if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
  401bb8:	88f3      	ldrh	r3, [r6, #6]
  401bba:	f013 0f20 	tst.w	r3, #32
  401bbe:	d10c      	bne.n	401bda <ip_reass+0xc6>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
  401bc0:	7fa3      	ldrb	r3, [r4, #30]
  401bc2:	f043 0301 	orr.w	r3, r3, #1
  401bc6:	77a3      	strb	r3, [r4, #30]
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  401bc8:	f00a 0a0f 	and.w	sl, sl, #15
  401bcc:	9b01      	ldr	r3, [sp, #4]
  401bce:	eba3 098a 	sub.w	r9, r3, sl, lsl #2
    ipr->datagram_len = offset + len;
  401bd2:	eb09 0bcb 	add.w	fp, r9, fp, lsl #3
  401bd6:	f8a4 b01c 	strh.w	fp, [r4, #28]
  fraghdr = (struct ip_hdr*)new_p->payload; 
  401bda:	687e      	ldr	r6, [r7, #4]
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  401bdc:	8870      	ldrh	r0, [r6, #2]
  401bde:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 401dac <ip_reass+0x298>
  401be2:	47c8      	blx	r9
  401be4:	f896 8000 	ldrb.w	r8, [r6]
  401be8:	f008 080f 	and.w	r8, r8, #15
  401bec:	eba0 0888 	sub.w	r8, r0, r8, lsl #2
  401bf0:	fa1f f888 	uxth.w	r8, r8
  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  401bf4:	88f0      	ldrh	r0, [r6, #6]
  401bf6:	47c8      	blx	r9
  401bf8:	f3c0 000c 	ubfx	r0, r0, #0, #13
  401bfc:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
  401bfe:	f8d7 c004 	ldr.w	ip, [r7, #4]
  iprh->next_pbuf = NULL;
  401c02:	2300      	movs	r3, #0
  401c04:	f88c 3000 	strb.w	r3, [ip]
  401c08:	f88c 3001 	strb.w	r3, [ip, #1]
  401c0c:	f88c 3002 	strb.w	r3, [ip, #2]
  401c10:	f88c 3003 	strb.w	r3, [ip, #3]
  iprh->start = offset;
  401c14:	f8ac 0004 	strh.w	r0, [ip, #4]
  iprh->end = offset + len;
  401c18:	4480      	add	r8, r0
  401c1a:	fa1f f888 	uxth.w	r8, r8
  401c1e:	f8ac 8006 	strh.w	r8, [ip, #6]
  for (q = ipr->p; q != NULL;) {
  401c22:	6862      	ldr	r2, [r4, #4]
  401c24:	2a00      	cmp	r2, #0
  401c26:	f000 809a 	beq.w	401d5e <ip_reass+0x24a>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
  401c2a:	6853      	ldr	r3, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
  401c2c:	8899      	ldrh	r1, [r3, #4]
  401c2e:	4288      	cmp	r0, r1
  401c30:	f0c0 80ad 	bcc.w	401d8e <ip_reass+0x27a>
    } else if(iprh->start == iprh_tmp->start) {
  401c34:	f000 8097 	beq.w	401d66 <ip_reass+0x252>
    } else if(iprh->start < iprh_tmp->end) {
  401c38:	88da      	ldrh	r2, [r3, #6]
  401c3a:	4282      	cmp	r2, r0
  401c3c:	f200 8093 	bhi.w	401d66 <ip_reass+0x252>
  401c40:	f04f 0e01 	mov.w	lr, #1
  401c44:	e078      	b.n	401d38 <ip_reass+0x224>
  401c46:	462c      	mov	r4, r5
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  401c48:	2004      	movs	r0, #4
  401c4a:	4b5e      	ldr	r3, [pc, #376]	; (401dc4 <ip_reass+0x2b0>)
  401c4c:	4798      	blx	r3
  if (ipr == NULL) {
  401c4e:	4681      	mov	r9, r0
  401c50:	b318      	cbz	r0, 401c9a <ip_reass+0x186>
  memset(ipr, 0, sizeof(struct ip_reassdata));
  401c52:	2220      	movs	r2, #32
  401c54:	2100      	movs	r1, #0
  401c56:	4648      	mov	r0, r9
  401c58:	4b5b      	ldr	r3, [pc, #364]	; (401dc8 <ip_reass+0x2b4>)
  401c5a:	4798      	blx	r3
  ipr->timer = IP_REASS_MAXAGE;
  401c5c:	2303      	movs	r3, #3
  401c5e:	f889 301f 	strb.w	r3, [r9, #31]
  ipr->next = reassdatagrams;
  401c62:	4b55      	ldr	r3, [pc, #340]	; (401db8 <ip_reass+0x2a4>)
  401c64:	681a      	ldr	r2, [r3, #0]
  401c66:	f8c9 2000 	str.w	r2, [r9]
  reassdatagrams = ipr;
  401c6a:	f8c3 9000 	str.w	r9, [r3]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
  401c6e:	6832      	ldr	r2, [r6, #0]
  401c70:	6875      	ldr	r5, [r6, #4]
  401c72:	68b0      	ldr	r0, [r6, #8]
  401c74:	68f1      	ldr	r1, [r6, #12]
  401c76:	f8c9 2008 	str.w	r2, [r9, #8]
  401c7a:	f8c9 500c 	str.w	r5, [r9, #12]
  401c7e:	f8c9 0010 	str.w	r0, [r9, #16]
  401c82:	f8c9 1014 	str.w	r1, [r9, #20]
  401c86:	6932      	ldr	r2, [r6, #16]
  401c88:	f8c9 2018 	str.w	r2, [r9, #24]
    if(ipr == NULL) {
  401c8c:	f1b9 0f00 	cmp.w	r9, #0
  401c90:	f43f af6d 	beq.w	401b6e <ip_reass+0x5a>
  401c94:	4625      	mov	r5, r4
  return ipr;
  401c96:	464c      	mov	r4, r9
  401c98:	e789      	b.n	401bae <ip_reass+0x9a>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
  401c9a:	4641      	mov	r1, r8
  401c9c:	4630      	mov	r0, r6
  401c9e:	4b47      	ldr	r3, [pc, #284]	; (401dbc <ip_reass+0x2a8>)
  401ca0:	4798      	blx	r3
  401ca2:	4580      	cmp	r8, r0
  401ca4:	f73f af63 	bgt.w	401b6e <ip_reass+0x5a>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  401ca8:	2004      	movs	r0, #4
  401caa:	4b46      	ldr	r3, [pc, #280]	; (401dc4 <ip_reass+0x2b0>)
  401cac:	4798      	blx	r3
    if (ipr == NULL)
  401cae:	4681      	mov	r9, r0
  401cb0:	2800      	cmp	r0, #0
  401cb2:	d1ce      	bne.n	401c52 <ip_reass+0x13e>
  401cb4:	e75b      	b.n	401b6e <ip_reass+0x5a>
      ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
  401cb6:	89e0      	ldrh	r0, [r4, #14]
  401cb8:	4b3c      	ldr	r3, [pc, #240]	; (401dac <ip_reass+0x298>)
  401cba:	4798      	blx	r3
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
  401cbc:	f3c0 000c 	ubfx	r0, r0, #0, #13
  401cc0:	2800      	cmp	r0, #0
  401cc2:	f43f af74 	beq.w	401bae <ip_reass+0x9a>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
  401cc6:	6832      	ldr	r2, [r6, #0]
  401cc8:	f8d6 e004 	ldr.w	lr, [r6, #4]
  401ccc:	68b0      	ldr	r0, [r6, #8]
  401cce:	68f1      	ldr	r1, [r6, #12]
  401cd0:	60a2      	str	r2, [r4, #8]
  401cd2:	f8c4 e00c 	str.w	lr, [r4, #12]
  401cd6:	6120      	str	r0, [r4, #16]
  401cd8:	6161      	str	r1, [r4, #20]
  401cda:	6932      	ldr	r2, [r6, #16]
  401cdc:	61a2      	str	r2, [r4, #24]
  401cde:	e766      	b.n	401bae <ip_reass+0x9a>
      iprh->next_pbuf = q;
  401ce0:	f8cc 6000 	str.w	r6, [ip]
      if (iprh_prev != NULL) {
  401ce4:	2b00      	cmp	r3, #0
  401ce6:	d056      	beq.n	401d96 <ip_reass+0x282>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
  401ce8:	88d9      	ldrh	r1, [r3, #6]
  401cea:	4281      	cmp	r1, r0
  401cec:	d83b      	bhi.n	401d66 <ip_reass+0x252>
  401cee:	8892      	ldrh	r2, [r2, #4]
  401cf0:	4542      	cmp	r2, r8
  401cf2:	d338      	bcc.n	401d66 <ip_reass+0x252>
        iprh_prev->next_pbuf = new_p;
  401cf4:	601f      	str	r7, [r3, #0]
  if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
  401cf6:	7fa3      	ldrb	r3, [r4, #30]
  401cf8:	f013 0f01 	tst.w	r3, #1
  401cfc:	d03d      	beq.n	401d7a <ip_reass+0x266>
    if (valid) {
  401cfe:	f1be 0f00 	cmp.w	lr, #0
  401d02:	d03a      	beq.n	401d7a <ip_reass+0x266>
      if (((struct ip_reass_helper*)ipr->p->payload)->start != 0) {
  401d04:	6860      	ldr	r0, [r4, #4]
  401d06:	6843      	ldr	r3, [r0, #4]
  401d08:	889b      	ldrh	r3, [r3, #4]
  401d0a:	2b00      	cmp	r3, #0
  401d0c:	d135      	bne.n	401d7a <ip_reass+0x266>
        q = iprh->next_pbuf;
  401d0e:	f8dc 3000 	ldr.w	r3, [ip]
        while (q != NULL) {
  401d12:	2b00      	cmp	r3, #0
  401d14:	d05a      	beq.n	401dcc <ip_reass+0x2b8>
          iprh = (struct ip_reass_helper*)q->payload;
  401d16:	685b      	ldr	r3, [r3, #4]
          if (iprh_prev->end != iprh->start) {
  401d18:	8899      	ldrh	r1, [r3, #4]
  401d1a:	f8bc 2006 	ldrh.w	r2, [ip, #6]
  401d1e:	4291      	cmp	r1, r2
  401d20:	d12b      	bne.n	401d7a <ip_reass+0x266>
          q = iprh->next_pbuf;
  401d22:	681a      	ldr	r2, [r3, #0]
        while (q != NULL) {
  401d24:	2a00      	cmp	r2, #0
  401d26:	d051      	beq.n	401dcc <ip_reass+0x2b8>
          iprh = (struct ip_reass_helper*)q->payload;
  401d28:	6852      	ldr	r2, [r2, #4]
          if (iprh_prev->end != iprh->start) {
  401d2a:	88d9      	ldrh	r1, [r3, #6]
  401d2c:	8893      	ldrh	r3, [r2, #4]
  401d2e:	4299      	cmp	r1, r3
  401d30:	d123      	bne.n	401d7a <ip_reass+0x266>
          iprh = (struct ip_reass_helper*)q->payload;
  401d32:	4613      	mov	r3, r2
  401d34:	e7f5      	b.n	401d22 <ip_reass+0x20e>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
  401d36:	4613      	mov	r3, r2
    q = iprh_tmp->next_pbuf;
  401d38:	681e      	ldr	r6, [r3, #0]
  for (q = ipr->p; q != NULL;) {
  401d3a:	b376      	cbz	r6, 401d9a <ip_reass+0x286>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
  401d3c:	6872      	ldr	r2, [r6, #4]
    if (iprh->start < iprh_tmp->start) {
  401d3e:	8891      	ldrh	r1, [r2, #4]
  401d40:	4288      	cmp	r0, r1
  401d42:	d3cd      	bcc.n	401ce0 <ip_reass+0x1cc>
    } else if(iprh->start == iprh_tmp->start) {
  401d44:	4288      	cmp	r0, r1
  401d46:	d00e      	beq.n	401d66 <ip_reass+0x252>
    } else if(iprh->start < iprh_tmp->end) {
  401d48:	88d6      	ldrh	r6, [r2, #6]
  401d4a:	4286      	cmp	r6, r0
  401d4c:	d80b      	bhi.n	401d66 <ip_reass+0x252>
      if (iprh_prev != NULL) {
  401d4e:	2b00      	cmp	r3, #0
  401d50:	d0f1      	beq.n	401d36 <ip_reass+0x222>
        if (iprh_prev->end != iprh_tmp->start) {
  401d52:	88db      	ldrh	r3, [r3, #6]
          valid = 0;
  401d54:	428b      	cmp	r3, r1
  401d56:	bf18      	it	ne
  401d58:	f04f 0e00 	movne.w	lr, #0
  401d5c:	e7eb      	b.n	401d36 <ip_reass+0x222>
  int valid = 1;
  401d5e:	f04f 0e01 	mov.w	lr, #1
      ipr->p = new_p;
  401d62:	6067      	str	r7, [r4, #4]
  401d64:	e7c7      	b.n	401cf6 <ip_reass+0x1e2>
  ip_reass_pbufcount -= pbuf_clen(new_p);
  401d66:	4638      	mov	r0, r7
  401d68:	4b11      	ldr	r3, [pc, #68]	; (401db0 <ip_reass+0x29c>)
  401d6a:	4798      	blx	r3
  401d6c:	4a11      	ldr	r2, [pc, #68]	; (401db4 <ip_reass+0x2a0>)
  401d6e:	8813      	ldrh	r3, [r2, #0]
  401d70:	1a18      	subs	r0, r3, r0
  401d72:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
  401d74:	4638      	mov	r0, r7
  401d76:	4b12      	ldr	r3, [pc, #72]	; (401dc0 <ip_reass+0x2ac>)
  401d78:	4798      	blx	r3
  return NULL;
  401d7a:	f04f 0800 	mov.w	r8, #0
}
  401d7e:	4640      	mov	r0, r8
  401d80:	b003      	add	sp, #12
  401d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    reassdatagrams = ipr->next;
  401d86:	6822      	ldr	r2, [r4, #0]
  401d88:	4b0b      	ldr	r3, [pc, #44]	; (401db8 <ip_reass+0x2a4>)
  401d8a:	601a      	str	r2, [r3, #0]
  401d8c:	e058      	b.n	401e40 <ip_reass+0x32c>
      iprh->next_pbuf = q;
  401d8e:	f8cc 2000 	str.w	r2, [ip]
  int valid = 1;
  401d92:	f04f 0e01 	mov.w	lr, #1
        ipr->p = new_p;
  401d96:	6067      	str	r7, [r4, #4]
  401d98:	e7ad      	b.n	401cf6 <ip_reass+0x1e2>
    if (iprh_prev != NULL) {
  401d9a:	2b00      	cmp	r3, #0
  401d9c:	d0e1      	beq.n	401d62 <ip_reass+0x24e>
      iprh_prev->next_pbuf = new_p;
  401d9e:	601f      	str	r7, [r3, #0]
      if (iprh_prev->end != iprh->start) {
  401da0:	88da      	ldrh	r2, [r3, #6]
  401da2:	f8bc 3004 	ldrh.w	r3, [ip, #4]
  401da6:	429a      	cmp	r2, r3
  401da8:	d1e7      	bne.n	401d7a <ip_reass+0x266>
  401daa:	e7a4      	b.n	401cf6 <ip_reass+0x1e2>
  401dac:	0040119f 	.word	0x0040119f
  401db0:	0040282d 	.word	0x0040282d
  401db4:	20400abc 	.word	0x20400abc
  401db8:	20400ac0 	.word	0x20400ac0
  401dbc:	00401a69 	.word	0x00401a69
  401dc0:	0040262d 	.word	0x0040262d
  401dc4:	00402455 	.word	0x00402455
  401dc8:	004073c9 	.word	0x004073c9
    ipr->datagram_len += IP_HLEN;
  401dcc:	8ba3      	ldrh	r3, [r4, #28]
  401dce:	3314      	adds	r3, #20
  401dd0:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
  401dd2:	6847      	ldr	r7, [r0, #4]
  401dd4:	683e      	ldr	r6, [r7, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
  401dd6:	4623      	mov	r3, r4
  401dd8:	f853 2f08 	ldr.w	r2, [r3, #8]!
  401ddc:	f8d3 e004 	ldr.w	lr, [r3, #4]
  401de0:	6898      	ldr	r0, [r3, #8]
  401de2:	68d9      	ldr	r1, [r3, #12]
  401de4:	603a      	str	r2, [r7, #0]
  401de6:	f8c7 e004 	str.w	lr, [r7, #4]
  401dea:	60b8      	str	r0, [r7, #8]
  401dec:	60f9      	str	r1, [r7, #12]
  401dee:	691a      	ldr	r2, [r3, #16]
  401df0:	613a      	str	r2, [r7, #16]
    IPH_LEN_SET(fraghdr, htons(ipr->datagram_len));
  401df2:	8ba0      	ldrh	r0, [r4, #28]
  401df4:	4b18      	ldr	r3, [pc, #96]	; (401e58 <ip_reass+0x344>)
  401df6:	4798      	blx	r3
  401df8:	8078      	strh	r0, [r7, #2]
    IPH_OFFSET_SET(fraghdr, 0);
  401dfa:	2300      	movs	r3, #0
  401dfc:	71bb      	strb	r3, [r7, #6]
  401dfe:	71fb      	strb	r3, [r7, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
  401e00:	72bb      	strb	r3, [r7, #10]
  401e02:	72fb      	strb	r3, [r7, #11]
    IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
  401e04:	2114      	movs	r1, #20
  401e06:	4638      	mov	r0, r7
  401e08:	4b14      	ldr	r3, [pc, #80]	; (401e5c <ip_reass+0x348>)
  401e0a:	4798      	blx	r3
  401e0c:	8178      	strh	r0, [r7, #10]
    p = ipr->p;
  401e0e:	f8d4 8004 	ldr.w	r8, [r4, #4]
    while(r != NULL) {
  401e12:	b17e      	cbz	r6, 401e34 <ip_reass+0x320>
      pbuf_header(r, -IP_HLEN);
  401e14:	f06f 0b13 	mvn.w	fp, #19
  401e18:	f8df a054 	ldr.w	sl, [pc, #84]	; 401e70 <ip_reass+0x35c>
      pbuf_cat(p, r);
  401e1c:	f8df 9054 	ldr.w	r9, [pc, #84]	; 401e74 <ip_reass+0x360>
      iprh = (struct ip_reass_helper*)r->payload;
  401e20:	6877      	ldr	r7, [r6, #4]
      pbuf_header(r, -IP_HLEN);
  401e22:	4659      	mov	r1, fp
  401e24:	4630      	mov	r0, r6
  401e26:	47d0      	blx	sl
      pbuf_cat(p, r);
  401e28:	4631      	mov	r1, r6
  401e2a:	4640      	mov	r0, r8
  401e2c:	47c8      	blx	r9
      r = iprh->next_pbuf;
  401e2e:	683e      	ldr	r6, [r7, #0]
    while(r != NULL) {
  401e30:	2e00      	cmp	r6, #0
  401e32:	d1f5      	bne.n	401e20 <ip_reass+0x30c>
  if (reassdatagrams == ipr) {
  401e34:	4b0a      	ldr	r3, [pc, #40]	; (401e60 <ip_reass+0x34c>)
  401e36:	681b      	ldr	r3, [r3, #0]
  401e38:	429c      	cmp	r4, r3
  401e3a:	d0a4      	beq.n	401d86 <ip_reass+0x272>
    prev->next = ipr->next;
  401e3c:	6823      	ldr	r3, [r4, #0]
  401e3e:	602b      	str	r3, [r5, #0]
  memp_free(MEMP_REASSDATA, ipr);
  401e40:	4621      	mov	r1, r4
  401e42:	2004      	movs	r0, #4
  401e44:	4b07      	ldr	r3, [pc, #28]	; (401e64 <ip_reass+0x350>)
  401e46:	4798      	blx	r3
    ip_reass_pbufcount -= pbuf_clen(p);
  401e48:	4640      	mov	r0, r8
  401e4a:	4b07      	ldr	r3, [pc, #28]	; (401e68 <ip_reass+0x354>)
  401e4c:	4798      	blx	r3
  401e4e:	4a07      	ldr	r2, [pc, #28]	; (401e6c <ip_reass+0x358>)
  401e50:	8813      	ldrh	r3, [r2, #0]
  401e52:	1a18      	subs	r0, r3, r0
  401e54:	8010      	strh	r0, [r2, #0]
    return p;
  401e56:	e792      	b.n	401d7e <ip_reass+0x26a>
  401e58:	00401195 	.word	0x00401195
  401e5c:	00401505 	.word	0x00401505
  401e60:	20400ac0 	.word	0x20400ac0
  401e64:	00402475 	.word	0x00402475
  401e68:	0040282d 	.word	0x0040282d
  401e6c:	20400abc 	.word	0x20400abc
  401e70:	004025bf 	.word	0x004025bf
  401e74:	0040284d 	.word	0x0040284d

00401e78 <ip_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t 
ip_frag(struct pbuf *p, struct netif *netif, ip_addr_t *dest)
{
  401e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401e7c:	b089      	sub	sp, #36	; 0x24
  401e7e:	4604      	mov	r4, r0
  401e80:	9003      	str	r0, [sp, #12]
  401e82:	9105      	str	r1, [sp, #20]
  401e84:	9206      	str	r2, [sp, #24]
  struct ip_hdr *original_iphdr;
#endif
  struct ip_hdr *iphdr;
  u16_t nfb;
  u16_t left, cop;
  u16_t mtu = netif->mtu;
  401e86:	8c8e      	ldrh	r6, [r1, #36]	; 0x24

  /* Copy the IP header in it */
  iphdr = (struct ip_hdr *)rambuf->payload;
  SMEMCPY(iphdr, p->payload, IP_HLEN);
#else /* IP_FRAG_USES_STATIC_BUF */
  original_iphdr = (struct ip_hdr *)p->payload;
  401e88:	f8d0 a004 	ldr.w	sl, [r0, #4]
  iphdr = original_iphdr;
#endif /* IP_FRAG_USES_STATIC_BUF */

  /* Save original offset */
  tmp = ntohs(IPH_OFFSET(iphdr));
  401e8c:	f8ba 0006 	ldrh.w	r0, [sl, #6]
  401e90:	4b3f      	ldr	r3, [pc, #252]	; (401f90 <ip_frag+0x118>)
  401e92:	4798      	blx	r3
  ofo = tmp & IP_OFFMASK;
  401e94:	f3c0 0b0c 	ubfx	fp, r0, #0, #13
  omf = tmp & IP_MF;
  401e98:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
  401e9c:	9302      	str	r3, [sp, #8]

  left = p->tot_len - IP_HLEN;
  401e9e:	8925      	ldrh	r5, [r4, #8]
  401ea0:	3d14      	subs	r5, #20
  401ea2:	b2ad      	uxth	r5, r5

  nfb = (mtu - IP_HLEN) / 8;
  401ea4:	f1a6 0314 	sub.w	r3, r6, #20
  401ea8:	9301      	str	r3, [sp, #4]
  401eaa:	2b00      	cmp	r3, #0
  401eac:	bfb8      	it	lt
  401eae:	3307      	addlt	r3, #7
  401eb0:	f3c3 03cf 	ubfx	r3, r3, #3, #16
  401eb4:	9304      	str	r3, [sp, #16]

  while (left) {
  401eb6:	2d00      	cmp	r5, #0
  401eb8:	d063      	beq.n	401f82 <ip_frag+0x10a>
    if (!last) {
      tmp = tmp | IP_MF;
    }

    /* Fill this fragment */
    cop = last ? left : nfb * 8;
  401eba:	00db      	lsls	r3, r3, #3
  401ebc:	b29b      	uxth	r3, r3
  401ebe:	9307      	str	r3, [sp, #28]
  401ec0:	f04f 0914 	mov.w	r9, #20
  401ec4:	e049      	b.n	401f5a <ip_frag+0xe2>
  401ec6:	462c      	mov	r4, r5

#if IP_FRAG_USES_STATIC_BUF
    poff += pbuf_copy_partial(p, (u8_t*)iphdr + IP_HLEN, cop, poff);
#else /* IP_FRAG_USES_STATIC_BUF */
#if LWIP_NETIF_TX_SINGLE_PBUF
    rambuf = pbuf_alloc(PBUF_IP, cop, PBUF_RAM);
  401ec8:	2200      	movs	r2, #0
  401eca:	4621      	mov	r1, r4
  401ecc:	2001      	movs	r0, #1
  401ece:	4b31      	ldr	r3, [pc, #196]	; (401f94 <ip_frag+0x11c>)
  401ed0:	4798      	blx	r3
    if (rambuf == NULL) {
  401ed2:	4606      	mov	r6, r0
  401ed4:	2800      	cmp	r0, #0
  401ed6:	d056      	beq.n	401f86 <ip_frag+0x10e>
      return ERR_MEM;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
      (rambuf->len == rambuf->tot_len) && (rambuf->next == NULL));
    poff += pbuf_copy_partial(p, rambuf->payload, cop, poff);
  401ed8:	464b      	mov	r3, r9
  401eda:	4622      	mov	r2, r4
  401edc:	6841      	ldr	r1, [r0, #4]
  401ede:	9803      	ldr	r0, [sp, #12]
  401ee0:	4f2d      	ldr	r7, [pc, #180]	; (401f98 <ip_frag+0x120>)
  401ee2:	47b8      	blx	r7
  401ee4:	4481      	add	r9, r0
  401ee6:	fa1f f989 	uxth.w	r9, r9
    /* make room for the IP header */
    if(pbuf_header(rambuf, IP_HLEN)) {
  401eea:	2114      	movs	r1, #20
  401eec:	4630      	mov	r0, r6
  401eee:	4b2b      	ldr	r3, [pc, #172]	; (401f9c <ip_frag+0x124>)
  401ef0:	4798      	blx	r3
  401ef2:	2800      	cmp	r0, #0
  401ef4:	d13d      	bne.n	401f72 <ip_frag+0xfa>
      pbuf_free(rambuf);
      return ERR_MEM;
    }
    /* fill in the IP header */
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
  401ef6:	6873      	ldr	r3, [r6, #4]
  401ef8:	f8da 2000 	ldr.w	r2, [sl]
  401efc:	f8da 7004 	ldr.w	r7, [sl, #4]
  401f00:	f8da 0008 	ldr.w	r0, [sl, #8]
  401f04:	f8da 100c 	ldr.w	r1, [sl, #12]
  401f08:	601a      	str	r2, [r3, #0]
  401f0a:	605f      	str	r7, [r3, #4]
  401f0c:	6098      	str	r0, [r3, #8]
  401f0e:	60d9      	str	r1, [r3, #12]
  401f10:	f8da 2010 	ldr.w	r2, [sl, #16]
  401f14:	611a      	str	r2, [r3, #16]
    iphdr = rambuf->payload;
  401f16:	6877      	ldr	r7, [r6, #4]
    poff = newpbuflen;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
#endif /* IP_FRAG_USES_STATIC_BUF */

    /* Correct header */
    IPH_OFFSET_SET(iphdr, htons(tmp));
  401f18:	4640      	mov	r0, r8
  401f1a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 401fa8 <ip_frag+0x130>
  401f1e:	47c0      	blx	r8
  401f20:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, htons(cop + IP_HLEN));
  401f22:	f104 0014 	add.w	r0, r4, #20
  401f26:	b280      	uxth	r0, r0
  401f28:	47c0      	blx	r8
  401f2a:	8078      	strh	r0, [r7, #2]
    IPH_CHKSUM_SET(iphdr, 0);
  401f2c:	2300      	movs	r3, #0
  401f2e:	72bb      	strb	r3, [r7, #10]
  401f30:	72fb      	strb	r3, [r7, #11]
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
  401f32:	2114      	movs	r1, #20
  401f34:	4638      	mov	r0, r7
  401f36:	4b1a      	ldr	r3, [pc, #104]	; (401fa0 <ip_frag+0x128>)
  401f38:	4798      	blx	r3
  401f3a:	8178      	strh	r0, [r7, #10]
    }
#else /* IP_FRAG_USES_STATIC_BUF */
    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
  401f3c:	9805      	ldr	r0, [sp, #20]
  401f3e:	6943      	ldr	r3, [r0, #20]
  401f40:	9a06      	ldr	r2, [sp, #24]
  401f42:	4631      	mov	r1, r6
  401f44:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */
    
    pbuf_free(rambuf);
  401f46:	4630      	mov	r0, r6
  401f48:	4b16      	ldr	r3, [pc, #88]	; (401fa4 <ip_frag+0x12c>)
  401f4a:	4798      	blx	r3
#endif /* IP_FRAG_USES_STATIC_BUF */
    left -= cop;
  401f4c:	1b2d      	subs	r5, r5, r4
  401f4e:	b2ad      	uxth	r5, r5
    ofo += nfb;
  401f50:	9b04      	ldr	r3, [sp, #16]
  401f52:	449b      	add	fp, r3
  401f54:	fa1f fb8b 	uxth.w	fp, fp
  while (left) {
  401f58:	b18d      	cbz	r5, 401f7e <ip_frag+0x106>
    tmp = omf | (IP_OFFMASK & (ofo));
  401f5a:	f3cb 080c 	ubfx	r8, fp, #0, #13
  401f5e:	9b02      	ldr	r3, [sp, #8]
  401f60:	ea43 0808 	orr.w	r8, r3, r8
    if (!last) {
  401f64:	9b01      	ldr	r3, [sp, #4]
  401f66:	42ab      	cmp	r3, r5
  401f68:	daad      	bge.n	401ec6 <ip_frag+0x4e>
      tmp = tmp | IP_MF;
  401f6a:	f448 5800 	orr.w	r8, r8, #8192	; 0x2000
    cop = last ? left : nfb * 8;
  401f6e:	9c07      	ldr	r4, [sp, #28]
  401f70:	e7aa      	b.n	401ec8 <ip_frag+0x50>
      pbuf_free(rambuf);
  401f72:	4630      	mov	r0, r6
  401f74:	4b0b      	ldr	r3, [pc, #44]	; (401fa4 <ip_frag+0x12c>)
  401f76:	4798      	blx	r3
      return ERR_MEM;
  401f78:	f04f 30ff 	mov.w	r0, #4294967295
  401f7c:	e005      	b.n	401f8a <ip_frag+0x112>
  }
#if IP_FRAG_USES_STATIC_BUF
  pbuf_free(rambuf);
#endif /* IP_FRAG_USES_STATIC_BUF */
  snmp_inc_ipfragoks();
  return ERR_OK;
  401f7e:	2000      	movs	r0, #0
  401f80:	e003      	b.n	401f8a <ip_frag+0x112>
  401f82:	2000      	movs	r0, #0
  401f84:	e001      	b.n	401f8a <ip_frag+0x112>
      return ERR_MEM;
  401f86:	f04f 30ff 	mov.w	r0, #4294967295
}
  401f8a:	b009      	add	sp, #36	; 0x24
  401f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401f90:	0040119f 	.word	0x0040119f
  401f94:	00402685 	.word	0x00402685
  401f98:	00402949 	.word	0x00402949
  401f9c:	004025bf 	.word	0x004025bf
  401fa0:	00401505 	.word	0x00401505
  401fa4:	0040262d 	.word	0x0040262d
  401fa8:	00401195 	.word	0x00401195

00401fac <lwip_init>:
/**
 * Perform Sanity check of user-configurable values, and initialize all modules.
 */
void
lwip_init(void)
{
  401fac:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
  401fae:	4b06      	ldr	r3, [pc, #24]	; (401fc8 <lwip_init+0x1c>)
  401fb0:	4798      	blx	r3
  memp_init();
  401fb2:	4b06      	ldr	r3, [pc, #24]	; (401fcc <lwip_init+0x20>)
  401fb4:	4798      	blx	r3
  pbuf_init();
  netif_init();
  401fb6:	4b06      	ldr	r3, [pc, #24]	; (401fd0 <lwip_init+0x24>)
  401fb8:	4798      	blx	r3
#endif /* LWIP_ARP */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
  401fba:	4b06      	ldr	r3, [pc, #24]	; (401fd4 <lwip_init+0x28>)
  401fbc:	4798      	blx	r3
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
  401fbe:	4b06      	ldr	r3, [pc, #24]	; (401fd8 <lwip_init+0x2c>)
  401fc0:	4798      	blx	r3
#if LWIP_DNS
  dns_init();
#endif /* LWIP_DNS */

#if LWIP_TIMERS
  sys_timeouts_init();
  401fc2:	4b06      	ldr	r3, [pc, #24]	; (401fdc <lwip_init+0x30>)
  401fc4:	4798      	blx	r3
  401fc6:	bd08      	pop	{r3, pc}
  401fc8:	00402159 	.word	0x00402159
  401fcc:	004023dd 	.word	0x004023dd
  401fd0:	0040248d 	.word	0x0040248d
  401fd4:	004055cd 	.word	0x004055cd
  401fd8:	00402a19 	.word	0x00402a19
  401fdc:	004020e1 	.word	0x004020e1

00401fe0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
  401fe0:	b570      	push	{r4, r5, r6, lr}
  401fe2:	4604      	mov	r4, r0
  401fe4:	460e      	mov	r6, r1
  401fe6:	4615      	mov	r5, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
  401fe8:	2005      	movs	r0, #5
  401fea:	4b1b      	ldr	r3, [pc, #108]	; (402058 <sys_timeout+0x78>)
  401fec:	4798      	blx	r3
  if (timeout == NULL) {
  401fee:	2800      	cmp	r0, #0
  401ff0:	d030      	beq.n	402054 <sys_timeout+0x74>
  401ff2:	4601      	mov	r1, r0
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }
  timeout->next = NULL;
  401ff4:	2300      	movs	r3, #0
  401ff6:	6003      	str	r3, [r0, #0]
  timeout->h = handler;
  401ff8:	6086      	str	r6, [r0, #8]
  timeout->arg = arg;
  401ffa:	60c5      	str	r5, [r0, #12]
  timeout->time = msecs;
  401ffc:	6044      	str	r4, [r0, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
  401ffe:	4b17      	ldr	r3, [pc, #92]	; (40205c <sys_timeout+0x7c>)
  402000:	681d      	ldr	r5, [r3, #0]
  402002:	b1a5      	cbz	r5, 40202e <sys_timeout+0x4e>
    next_timeout = timeout;
    return;
  }

  if (next_timeout->time > msecs) {
  402004:	6868      	ldr	r0, [r5, #4]
  402006:	4284      	cmp	r4, r0
  402008:	d313      	bcc.n	402032 <sys_timeout+0x52>
    next_timeout->time -= msecs;
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for(t = next_timeout; t != NULL; t = t->next) {
      timeout->time -= t->time;
  40200a:	1a20      	subs	r0, r4, r0
  40200c:	6048      	str	r0, [r1, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
  40200e:	682a      	ldr	r2, [r5, #0]
  402010:	b1f2      	cbz	r2, 402050 <sys_timeout+0x70>
  402012:	6853      	ldr	r3, [r2, #4]
  402014:	4298      	cmp	r0, r3
  402016:	d312      	bcc.n	40203e <sys_timeout+0x5e>
      timeout->time -= t->time;
  402018:	6848      	ldr	r0, [r1, #4]
  40201a:	6853      	ldr	r3, [r2, #4]
  40201c:	1ac0      	subs	r0, r0, r3
  40201e:	6048      	str	r0, [r1, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
  402020:	6813      	ldr	r3, [r2, #0]
  402022:	b18b      	cbz	r3, 402048 <sys_timeout+0x68>
  402024:	685c      	ldr	r4, [r3, #4]
  402026:	42a0      	cmp	r0, r4
  402028:	d30b      	bcc.n	402042 <sys_timeout+0x62>
  40202a:	461a      	mov	r2, r3
  40202c:	e7f4      	b.n	402018 <sys_timeout+0x38>
    next_timeout = timeout;
  40202e:	6018      	str	r0, [r3, #0]
    return;
  402030:	bd70      	pop	{r4, r5, r6, pc}
    next_timeout->time -= msecs;
  402032:	1b00      	subs	r0, r0, r4
  402034:	6068      	str	r0, [r5, #4]
    timeout->next = next_timeout;
  402036:	600d      	str	r5, [r1, #0]
    next_timeout = timeout;
  402038:	4b08      	ldr	r3, [pc, #32]	; (40205c <sys_timeout+0x7c>)
  40203a:	6019      	str	r1, [r3, #0]
  40203c:	bd70      	pop	{r4, r5, r6, pc}
      if (t->next == NULL || t->next->time > timeout->time) {
  40203e:	4613      	mov	r3, r2
  402040:	462a      	mov	r2, r5
        if (t->next != NULL) {
          t->next->time -= timeout->time;
  402042:	685c      	ldr	r4, [r3, #4]
  402044:	1a20      	subs	r0, r4, r0
  402046:	6058      	str	r0, [r3, #4]
        }
        timeout->next = t->next;
  402048:	6813      	ldr	r3, [r2, #0]
  40204a:	600b      	str	r3, [r1, #0]
        t->next = timeout;
  40204c:	6011      	str	r1, [r2, #0]
        break;
  40204e:	bd70      	pop	{r4, r5, r6, pc}
      if (t->next == NULL || t->next->time > timeout->time) {
  402050:	462a      	mov	r2, r5
  402052:	e7f9      	b.n	402048 <sys_timeout+0x68>
  402054:	bd70      	pop	{r4, r5, r6, pc}
  402056:	bf00      	nop
  402058:	00402455 	.word	0x00402455
  40205c:	20400ac4 	.word	0x20400ac4

00402060 <tcp_timer_needed>:
{
  402060:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
  402062:	4b0a      	ldr	r3, [pc, #40]	; (40208c <tcp_timer_needed+0x2c>)
  402064:	681b      	ldr	r3, [r3, #0]
  402066:	b953      	cbnz	r3, 40207e <tcp_timer_needed+0x1e>
  402068:	4b09      	ldr	r3, [pc, #36]	; (402090 <tcp_timer_needed+0x30>)
  40206a:	681b      	ldr	r3, [r3, #0]
  40206c:	b143      	cbz	r3, 402080 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
  40206e:	2201      	movs	r2, #1
  402070:	4b06      	ldr	r3, [pc, #24]	; (40208c <tcp_timer_needed+0x2c>)
  402072:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  402074:	2200      	movs	r2, #0
  402076:	4907      	ldr	r1, [pc, #28]	; (402094 <tcp_timer_needed+0x34>)
  402078:	20fa      	movs	r0, #250	; 0xfa
  40207a:	4b07      	ldr	r3, [pc, #28]	; (402098 <tcp_timer_needed+0x38>)
  40207c:	4798      	blx	r3
  40207e:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
  402080:	4b06      	ldr	r3, [pc, #24]	; (40209c <tcp_timer_needed+0x3c>)
  402082:	681b      	ldr	r3, [r3, #0]
  402084:	2b00      	cmp	r3, #0
  402086:	d1f2      	bne.n	40206e <tcp_timer_needed+0xe>
  402088:	e7f9      	b.n	40207e <tcp_timer_needed+0x1e>
  40208a:	bf00      	nop
  40208c:	20400ac8 	.word	0x20400ac8
  402090:	20404964 	.word	0x20404964
  402094:	004020a1 	.word	0x004020a1
  402098:	00401fe1 	.word	0x00401fe1
  40209c:	20404978 	.word	0x20404978

004020a0 <tcpip_tcp_timer>:
{
  4020a0:	b508      	push	{r3, lr}
  tcp_tmr();
  4020a2:	4b09      	ldr	r3, [pc, #36]	; (4020c8 <tcpip_tcp_timer+0x28>)
  4020a4:	4798      	blx	r3
  if (tcp_active_pcbs || tcp_tw_pcbs) {
  4020a6:	4b09      	ldr	r3, [pc, #36]	; (4020cc <tcpip_tcp_timer+0x2c>)
  4020a8:	681b      	ldr	r3, [r3, #0]
  4020aa:	b12b      	cbz	r3, 4020b8 <tcpip_tcp_timer+0x18>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  4020ac:	2200      	movs	r2, #0
  4020ae:	4908      	ldr	r1, [pc, #32]	; (4020d0 <tcpip_tcp_timer+0x30>)
  4020b0:	20fa      	movs	r0, #250	; 0xfa
  4020b2:	4b08      	ldr	r3, [pc, #32]	; (4020d4 <tcpip_tcp_timer+0x34>)
  4020b4:	4798      	blx	r3
  4020b6:	bd08      	pop	{r3, pc}
  if (tcp_active_pcbs || tcp_tw_pcbs) {
  4020b8:	4b07      	ldr	r3, [pc, #28]	; (4020d8 <tcpip_tcp_timer+0x38>)
  4020ba:	681b      	ldr	r3, [r3, #0]
  4020bc:	2b00      	cmp	r3, #0
  4020be:	d1f5      	bne.n	4020ac <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
  4020c0:	2200      	movs	r2, #0
  4020c2:	4b06      	ldr	r3, [pc, #24]	; (4020dc <tcpip_tcp_timer+0x3c>)
  4020c4:	601a      	str	r2, [r3, #0]
  4020c6:	bd08      	pop	{r3, pc}
  4020c8:	004033ad 	.word	0x004033ad
  4020cc:	20404964 	.word	0x20404964
  4020d0:	004020a1 	.word	0x004020a1
  4020d4:	00401fe1 	.word	0x00401fe1
  4020d8:	20404978 	.word	0x20404978
  4020dc:	20400ac8 	.word	0x20400ac8

004020e0 <sys_timeouts_init>:
{
  4020e0:	b510      	push	{r4, lr}
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
  4020e2:	2200      	movs	r2, #0
  4020e4:	4907      	ldr	r1, [pc, #28]	; (402104 <sys_timeouts_init+0x24>)
  4020e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  4020ea:	4c07      	ldr	r4, [pc, #28]	; (402108 <sys_timeouts_init+0x28>)
  4020ec:	47a0      	blx	r4
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
  4020ee:	2200      	movs	r2, #0
  4020f0:	4906      	ldr	r1, [pc, #24]	; (40210c <sys_timeouts_init+0x2c>)
  4020f2:	f241 3088 	movw	r0, #5000	; 0x1388
  4020f6:	47a0      	blx	r4
  timeouts_last_time = sys_now();
  4020f8:	4b05      	ldr	r3, [pc, #20]	; (402110 <sys_timeouts_init+0x30>)
  4020fa:	4798      	blx	r3
  4020fc:	4b05      	ldr	r3, [pc, #20]	; (402114 <sys_timeouts_init+0x34>)
  4020fe:	6018      	str	r0, [r3, #0]
  402100:	bd10      	pop	{r4, pc}
  402102:	bf00      	nop
  402104:	00402139 	.word	0x00402139
  402108:	00401fe1 	.word	0x00401fe1
  40210c:	00402119 	.word	0x00402119
  402110:	004067c5 	.word	0x004067c5
  402114:	20400acc 	.word	0x20400acc

00402118 <arp_timer>:
{
  402118:	b508      	push	{r3, lr}
  etharp_tmr();
  40211a:	4b04      	ldr	r3, [pc, #16]	; (40212c <arp_timer+0x14>)
  40211c:	4798      	blx	r3
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
  40211e:	2200      	movs	r2, #0
  402120:	4903      	ldr	r1, [pc, #12]	; (402130 <arp_timer+0x18>)
  402122:	f241 3088 	movw	r0, #5000	; 0x1388
  402126:	4b03      	ldr	r3, [pc, #12]	; (402134 <arp_timer+0x1c>)
  402128:	4798      	blx	r3
  40212a:	bd08      	pop	{r3, pc}
  40212c:	004058d5 	.word	0x004058d5
  402130:	00402119 	.word	0x00402119
  402134:	00401fe1 	.word	0x00401fe1

00402138 <ip_reass_timer>:
{
  402138:	b508      	push	{r3, lr}
  ip_reass_tmr();
  40213a:	4b04      	ldr	r3, [pc, #16]	; (40214c <ip_reass_timer+0x14>)
  40213c:	4798      	blx	r3
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
  40213e:	2200      	movs	r2, #0
  402140:	4903      	ldr	r1, [pc, #12]	; (402150 <ip_reass_timer+0x18>)
  402142:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  402146:	4b03      	ldr	r3, [pc, #12]	; (402154 <ip_reass_timer+0x1c>)
  402148:	4798      	blx	r3
  40214a:	bd08      	pop	{r3, pc}
  40214c:	00401ae1 	.word	0x00401ae1
  402150:	00402139 	.word	0x00402139
  402154:	00401fe1 	.word	0x00401fe1

00402158 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
  402158:	4b0a      	ldr	r3, [pc, #40]	; (402184 <mem_init+0x2c>)
  40215a:	f023 0303 	bic.w	r3, r3, #3
  40215e:	4a0a      	ldr	r2, [pc, #40]	; (402188 <mem_init+0x30>)
  402160:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  402162:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402166:	8019      	strh	r1, [r3, #0]
  mem->prev = 0;
  402168:	2200      	movs	r2, #0
  40216a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
  40216c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
  40216e:	185a      	adds	r2, r3, r1
  402170:	4806      	ldr	r0, [pc, #24]	; (40218c <mem_init+0x34>)
  402172:	6002      	str	r2, [r0, #0]
  ram_end->used = 1;
  402174:	2001      	movs	r0, #1
  402176:	7110      	strb	r0, [r2, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
  402178:	8011      	strh	r1, [r2, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
  40217a:	8051      	strh	r1, [r2, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
  40217c:	4a04      	ldr	r2, [pc, #16]	; (402190 <mem_init+0x38>)
  40217e:	6013      	str	r3, [r2, #0]
  402180:	4770      	bx	lr
  402182:	bf00      	nop
  402184:	20403943 	.word	0x20403943
  402188:	20400ad4 	.word	0x20400ad4
  40218c:	20400ad8 	.word	0x20400ad8
  402190:	20400ad0 	.word	0x20400ad0

00402194 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
  402194:	2800      	cmp	r0, #0
  402196:	d03b      	beq.n	402210 <mem_free+0x7c>
  402198:	4603      	mov	r3, r0
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
  40219a:	4a21      	ldr	r2, [pc, #132]	; (402220 <mem_free+0x8c>)
  40219c:	6812      	ldr	r2, [r2, #0]
  40219e:	4290      	cmp	r0, r2
  4021a0:	d336      	bcc.n	402210 <mem_free+0x7c>
  4021a2:	4920      	ldr	r1, [pc, #128]	; (402224 <mem_free+0x90>)
  4021a4:	6808      	ldr	r0, [r1, #0]
  4021a6:	4283      	cmp	r3, r0
  4021a8:	d232      	bcs.n	402210 <mem_free+0x7c>
{
  4021aa:	b470      	push	{r4, r5, r6}
    return;
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  4021ac:	f1a3 0108 	sub.w	r1, r3, #8
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
  /* ... and is now unused. */
  mem->used = 0;
  4021b0:	2400      	movs	r4, #0
  4021b2:	f803 4c04 	strb.w	r4, [r3, #-4]

  if (mem < lfree) {
  4021b6:	4c1c      	ldr	r4, [pc, #112]	; (402228 <mem_free+0x94>)
  4021b8:	6824      	ldr	r4, [r4, #0]
  4021ba:	42a1      	cmp	r1, r4
  4021bc:	d201      	bcs.n	4021c2 <mem_free+0x2e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
  4021be:	4c1a      	ldr	r4, [pc, #104]	; (402228 <mem_free+0x94>)
  4021c0:	6021      	str	r1, [r4, #0]
  nmem = (struct mem *)(void *)&ram[mem->next];
  4021c2:	f833 5c08 	ldrh.w	r5, [r3, #-8]
  4021c6:	1954      	adds	r4, r2, r5
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
  4021c8:	42a1      	cmp	r1, r4
  4021ca:	d00e      	beq.n	4021ea <mem_free+0x56>
  4021cc:	7926      	ldrb	r6, [r4, #4]
  4021ce:	b966      	cbnz	r6, 4021ea <mem_free+0x56>
  4021d0:	42a0      	cmp	r0, r4
  4021d2:	d00a      	beq.n	4021ea <mem_free+0x56>
    if (lfree == nmem) {
  4021d4:	4814      	ldr	r0, [pc, #80]	; (402228 <mem_free+0x94>)
  4021d6:	6800      	ldr	r0, [r0, #0]
  4021d8:	4284      	cmp	r4, r0
  4021da:	d01a      	beq.n	402212 <mem_free+0x7e>
    mem->next = nmem->next;
  4021dc:	5b50      	ldrh	r0, [r2, r5]
  4021de:	f823 0c08 	strh.w	r0, [r3, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
  4021e2:	5b50      	ldrh	r0, [r2, r5]
  4021e4:	4410      	add	r0, r2
  4021e6:	1a8c      	subs	r4, r1, r2
  4021e8:	8044      	strh	r4, [r0, #2]
  pmem = (struct mem *)(void *)&ram[mem->prev];
  4021ea:	f833 0c06 	ldrh.w	r0, [r3, #-6]
  4021ee:	1814      	adds	r4, r2, r0
  if (pmem != mem && pmem->used == 0) {
  4021f0:	42a1      	cmp	r1, r4
  4021f2:	d00c      	beq.n	40220e <mem_free+0x7a>
  4021f4:	7925      	ldrb	r5, [r4, #4]
  4021f6:	b955      	cbnz	r5, 40220e <mem_free+0x7a>
    if (lfree == mem) {
  4021f8:	4d0b      	ldr	r5, [pc, #44]	; (402228 <mem_free+0x94>)
  4021fa:	682d      	ldr	r5, [r5, #0]
  4021fc:	42a9      	cmp	r1, r5
  4021fe:	d00b      	beq.n	402218 <mem_free+0x84>
    pmem->next = mem->next;
  402200:	f833 1c08 	ldrh.w	r1, [r3, #-8]
  402204:	5211      	strh	r1, [r2, r0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
  402206:	f833 3c08 	ldrh.w	r3, [r3, #-8]
  40220a:	441a      	add	r2, r3
  40220c:	8050      	strh	r0, [r2, #2]
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
  40220e:	bc70      	pop	{r4, r5, r6}
  402210:	4770      	bx	lr
      lfree = mem;
  402212:	4805      	ldr	r0, [pc, #20]	; (402228 <mem_free+0x94>)
  402214:	6001      	str	r1, [r0, #0]
  402216:	e7e1      	b.n	4021dc <mem_free+0x48>
      lfree = pmem;
  402218:	4903      	ldr	r1, [pc, #12]	; (402228 <mem_free+0x94>)
  40221a:	600c      	str	r4, [r1, #0]
  40221c:	e7f0      	b.n	402200 <mem_free+0x6c>
  40221e:	bf00      	nop
  402220:	20400ad4 	.word	0x20400ad4
  402224:	20400ad8 	.word	0x20400ad8
  402228:	20400ad0 	.word	0x20400ad0

0040222c <mem_trim>:
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
  40222c:	3103      	adds	r1, #3
  40222e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  402232:	400b      	ands	r3, r1
  402234:	2b0c      	cmp	r3, #12
  402236:	bf38      	it	cc
  402238:	230c      	movcc	r3, #12
  if(newsize < MIN_SIZE_ALIGNED) {
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
  40223a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  40223e:	d852      	bhi.n	4022e6 <mem_trim+0xba>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
  402240:	4a2b      	ldr	r2, [pc, #172]	; (4022f0 <mem_trim+0xc4>)
  402242:	6812      	ldr	r2, [r2, #0]
  402244:	4282      	cmp	r2, r0
  402246:	d82b      	bhi.n	4022a0 <mem_trim+0x74>
  402248:	492a      	ldr	r1, [pc, #168]	; (4022f4 <mem_trim+0xc8>)
  40224a:	6809      	ldr	r1, [r1, #0]
  40224c:	4288      	cmp	r0, r1
  40224e:	d227      	bcs.n	4022a0 <mem_trim+0x74>
{
  402250:	b4f0      	push	{r4, r5, r6, r7}
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  402252:	f1a0 0408 	sub.w	r4, r0, #8
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
  402256:	1aa4      	subs	r4, r4, r2
  402258:	b2a4      	uxth	r4, r4

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
  40225a:	f830 5c08 	ldrh.w	r5, [r0, #-8]
  40225e:	f1a5 0108 	sub.w	r1, r5, #8
  402262:	1b09      	subs	r1, r1, r4
  402264:	b289      	uxth	r1, r1
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
  if (newsize > size) {
  402266:	4299      	cmp	r1, r3
  402268:	d33f      	bcc.n	4022ea <mem_trim+0xbe>
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
  40226a:	d018      	beq.n	40229e <mem_trim+0x72>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
  40226c:	1956      	adds	r6, r2, r5
  if(mem2->used == 0) {
  40226e:	7937      	ldrb	r7, [r6, #4]
  402270:	b9df      	cbnz	r7, 4022aa <mem_trim+0x7e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
  402272:	5b55      	ldrh	r5, [r2, r5]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
  402274:	f104 0108 	add.w	r1, r4, #8
  402278:	440b      	add	r3, r1
  40227a:	b29b      	uxth	r3, r3
    if (lfree == mem2) {
  40227c:	491e      	ldr	r1, [pc, #120]	; (4022f8 <mem_trim+0xcc>)
  40227e:	6809      	ldr	r1, [r1, #0]
  402280:	428e      	cmp	r6, r1
  402282:	d00e      	beq.n	4022a2 <mem_trim+0x76>
      lfree = (struct mem *)(void *)&ram[ptr2];
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
  402284:	18d1      	adds	r1, r2, r3
    mem2->used = 0;
  402286:	2600      	movs	r6, #0
  402288:	710e      	strb	r6, [r1, #4]
    /* restore the next pointer */
    mem2->next = next;
  40228a:	52d5      	strh	r5, [r2, r3]
    /* link it back to mem */
    mem2->prev = ptr;
  40228c:	804c      	strh	r4, [r1, #2]
    /* link mem to it */
    mem->next = ptr2;
  40228e:	f820 3c08 	strh.w	r3, [r0, #-8]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
  402292:	5ad1      	ldrh	r1, [r2, r3]
  402294:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
  402298:	d001      	beq.n	40229e <mem_trim+0x72>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
  40229a:	440a      	add	r2, r1
  40229c:	8053      	strh	r3, [r2, #2]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
  40229e:	bcf0      	pop	{r4, r5, r6, r7}
  4022a0:	4770      	bx	lr
      lfree = (struct mem *)(void *)&ram[ptr2];
  4022a2:	18d1      	adds	r1, r2, r3
  4022a4:	4e14      	ldr	r6, [pc, #80]	; (4022f8 <mem_trim+0xcc>)
  4022a6:	6031      	str	r1, [r6, #0]
  4022a8:	e7ec      	b.n	402284 <mem_trim+0x58>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
  4022aa:	f103 0514 	add.w	r5, r3, #20
  4022ae:	428d      	cmp	r5, r1
  4022b0:	d8f5      	bhi.n	40229e <mem_trim+0x72>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
  4022b2:	f104 0108 	add.w	r1, r4, #8
  4022b6:	440b      	add	r3, r1
  4022b8:	b29b      	uxth	r3, r3
    mem2 = (struct mem *)(void *)&ram[ptr2];
  4022ba:	18d1      	adds	r1, r2, r3
    if (mem2 < lfree) {
  4022bc:	4d0e      	ldr	r5, [pc, #56]	; (4022f8 <mem_trim+0xcc>)
  4022be:	682d      	ldr	r5, [r5, #0]
  4022c0:	42a9      	cmp	r1, r5
  4022c2:	d201      	bcs.n	4022c8 <mem_trim+0x9c>
      lfree = mem2;
  4022c4:	4d0c      	ldr	r5, [pc, #48]	; (4022f8 <mem_trim+0xcc>)
  4022c6:	6029      	str	r1, [r5, #0]
    mem2->used = 0;
  4022c8:	2500      	movs	r5, #0
  4022ca:	710d      	strb	r5, [r1, #4]
    mem2->next = mem->next;
  4022cc:	f830 5c08 	ldrh.w	r5, [r0, #-8]
  4022d0:	52d5      	strh	r5, [r2, r3]
    mem2->prev = ptr;
  4022d2:	804c      	strh	r4, [r1, #2]
    mem->next = ptr2;
  4022d4:	f820 3c08 	strh.w	r3, [r0, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
  4022d8:	5ad1      	ldrh	r1, [r2, r3]
  4022da:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
  4022de:	d0de      	beq.n	40229e <mem_trim+0x72>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
  4022e0:	440a      	add	r2, r1
  4022e2:	8053      	strh	r3, [r2, #2]
  4022e4:	e7db      	b.n	40229e <mem_trim+0x72>
    return NULL;
  4022e6:	2000      	movs	r0, #0
  4022e8:	4770      	bx	lr
    return NULL;
  4022ea:	2000      	movs	r0, #0
  4022ec:	e7d7      	b.n	40229e <mem_trim+0x72>
  4022ee:	bf00      	nop
  4022f0:	20400ad4 	.word	0x20400ad4
  4022f4:	20400ad8 	.word	0x20400ad8
  4022f8:	20400ad0 	.word	0x20400ad0

004022fc <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
  4022fc:	2800      	cmp	r0, #0
  4022fe:	d061      	beq.n	4023c4 <mem_malloc+0xc8>
{
  402300:	b5f0      	push	{r4, r5, r6, r7, lr}
  402302:	4603      	mov	r3, r0
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
  402304:	3303      	adds	r3, #3
  402306:	f64f 74fc 	movw	r4, #65532	; 0xfffc
  40230a:	401c      	ands	r4, r3
  40230c:	2c0c      	cmp	r4, #12
  40230e:	bf38      	it	cc
  402310:	240c      	movcc	r4, #12
  if(size < MIN_SIZE_ALIGNED) {
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
  402312:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  402316:	d857      	bhi.n	4023c8 <mem_malloc+0xcc>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
  402318:	4b2d      	ldr	r3, [pc, #180]	; (4023d0 <mem_malloc+0xd4>)
  40231a:	681f      	ldr	r7, [r3, #0]
  40231c:	4b2d      	ldr	r3, [pc, #180]	; (4023d4 <mem_malloc+0xd8>)
  40231e:	6819      	ldr	r1, [r3, #0]
  402320:	1a7b      	subs	r3, r7, r1
  402322:	b29b      	uxth	r3, r3
  402324:	f5c4 5580 	rsb	r5, r4, #4096	; 0x1000
  402328:	42ab      	cmp	r3, r5
  40232a:	da4f      	bge.n	4023cc <mem_malloc+0xd0>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
  40232c:	f06f 0c07 	mvn.w	ip, #7
  402330:	46a6      	mov	lr, r4
  402332:	e00e      	b.n	402352 <mem_malloc+0x56>
           * take care of this).
           * -> near fit or excact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
  402334:	2301      	movs	r3, #1
  402336:	7103      	strb	r3, [r0, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
  402338:	4b25      	ldr	r3, [pc, #148]	; (4023d0 <mem_malloc+0xd4>)
  40233a:	681b      	ldr	r3, [r3, #0]
  40233c:	4298      	cmp	r0, r3
  40233e:	d02f      	beq.n	4023a0 <mem_malloc+0xa4>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
  402340:	3008      	adds	r0, #8
  402342:	bdf0      	pop	{r4, r5, r6, r7, pc}
      mem = (struct mem *)(void *)&ram[ptr];
  402344:	4603      	mov	r3, r0
  402346:	e038      	b.n	4023ba <mem_malloc+0xbe>
  402348:	4603      	mov	r3, r0
  40234a:	e036      	b.n	4023ba <mem_malloc+0xbe>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
  40234c:	8803      	ldrh	r3, [r0, #0]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
  40234e:	42ab      	cmp	r3, r5
  402350:	da36      	bge.n	4023c0 <mem_malloc+0xc4>
      mem = (struct mem *)(void *)&ram[ptr];
  402352:	18c8      	adds	r0, r1, r3
      if ((!mem->used) &&
  402354:	7902      	ldrb	r2, [r0, #4]
  402356:	2a00      	cmp	r2, #0
  402358:	d1f8      	bne.n	40234c <mem_malloc+0x50>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
  40235a:	ebac 0203 	sub.w	r2, ip, r3
  40235e:	5ace      	ldrh	r6, [r1, r3]
  402360:	4432      	add	r2, r6
  402362:	4676      	mov	r6, lr
      if ((!mem->used) &&
  402364:	42a2      	cmp	r2, r4
  402366:	d3f1      	bcc.n	40234c <mem_malloc+0x50>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
  402368:	3614      	adds	r6, #20
  40236a:	42b2      	cmp	r2, r6
  40236c:	d3e2      	bcc.n	402334 <mem_malloc+0x38>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
  40236e:	f104 0208 	add.w	r2, r4, #8
  402372:	441a      	add	r2, r3
  402374:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
  402376:	188c      	adds	r4, r1, r2
          mem2->used = 0;
  402378:	2500      	movs	r5, #0
  40237a:	7125      	strb	r5, [r4, #4]
          mem2->next = mem->next;
  40237c:	8805      	ldrh	r5, [r0, #0]
  40237e:	528d      	strh	r5, [r1, r2]
          mem2->prev = ptr;
  402380:	8063      	strh	r3, [r4, #2]
          mem->next = ptr2;
  402382:	8002      	strh	r2, [r0, #0]
          mem->used = 1;
  402384:	2301      	movs	r3, #1
  402386:	7103      	strb	r3, [r0, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
  402388:	5a8b      	ldrh	r3, [r1, r2]
  40238a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  40238e:	d0d3      	beq.n	402338 <mem_malloc+0x3c>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
  402390:	4419      	add	r1, r3
  402392:	804a      	strh	r2, [r1, #2]
        if (mem == lfree) {
  402394:	4287      	cmp	r7, r0
  402396:	d1d3      	bne.n	402340 <mem_malloc+0x44>
          while (cur->used && cur != ram_end) {
  402398:	7903      	ldrb	r3, [r0, #4]
  40239a:	2b00      	cmp	r3, #0
  40239c:	d0d2      	beq.n	402344 <mem_malloc+0x48>
        if (mem == lfree) {
  40239e:	4603      	mov	r3, r0
          while (cur->used && cur != ram_end) {
  4023a0:	4a0d      	ldr	r2, [pc, #52]	; (4023d8 <mem_malloc+0xdc>)
  4023a2:	6811      	ldr	r1, [r2, #0]
  4023a4:	4288      	cmp	r0, r1
  4023a6:	d0cf      	beq.n	402348 <mem_malloc+0x4c>
            cur = (struct mem *)(void *)&ram[cur->next];
  4023a8:	4a0a      	ldr	r2, [pc, #40]	; (4023d4 <mem_malloc+0xd8>)
  4023aa:	6814      	ldr	r4, [r2, #0]
  4023ac:	881b      	ldrh	r3, [r3, #0]
  4023ae:	4423      	add	r3, r4
          while (cur->used && cur != ram_end) {
  4023b0:	791a      	ldrb	r2, [r3, #4]
  4023b2:	b112      	cbz	r2, 4023ba <mem_malloc+0xbe>
  4023b4:	428b      	cmp	r3, r1
  4023b6:	d1f9      	bne.n	4023ac <mem_malloc+0xb0>
            cur = (struct mem *)(void *)&ram[cur->next];
  4023b8:	460b      	mov	r3, r1
          lfree = cur;
  4023ba:	4a05      	ldr	r2, [pc, #20]	; (4023d0 <mem_malloc+0xd4>)
  4023bc:	6013      	str	r3, [r2, #0]
  4023be:	e7bf      	b.n	402340 <mem_malloc+0x44>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
  4023c0:	2000      	movs	r0, #0
  4023c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
  4023c4:	2000      	movs	r0, #0
  4023c6:	4770      	bx	lr
    return NULL;
  4023c8:	2000      	movs	r0, #0
  4023ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return NULL;
  4023cc:	2000      	movs	r0, #0
  4023ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4023d0:	20400ad0 	.word	0x20400ad0
  4023d4:	20400ad4 	.word	0x20400ad4
  4023d8:	20400ad8 	.word	0x20400ad8

004023dc <memp_init>:
 * 
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
  4023dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    MEMP_STATS_AVAIL(err, i, 0);
    MEMP_STATS_AVAIL(avail, i, memp_num[i]);
  }

#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
  4023e0:	4f18      	ldr	r7, [pc, #96]	; (402444 <memp_init+0x68>)
  4023e2:	f027 0703 	bic.w	r7, r7, #3
  4023e6:	4e18      	ldr	r6, [pc, #96]	; (402448 <memp_init+0x6c>)
  4023e8:	f8df c060 	ldr.w	ip, [pc, #96]	; 40244c <memp_init+0x70>
  4023ec:	f8df e060 	ldr.w	lr, [pc, #96]	; 402450 <memp_init+0x74>
  4023f0:	f106 0a20 	add.w	sl, r6, #32
#endif /* !MEMP_SEPARATE_POOLS */
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
    memp_tab[i] = NULL;
  4023f4:	f04f 0900 	mov.w	r9, #0
  4023f8:	e015      	b.n	402426 <memp_init+0x4a>
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
      memp->next = memp_tab[i];
      memp_tab[i] = memp;
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
  4023fa:	4603      	mov	r3, r0
      memp->next = memp_tab[i];
  4023fc:	6019      	str	r1, [r3, #0]
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
  4023fe:	1958      	adds	r0, r3, r5
  402400:	3201      	adds	r2, #1
      memp_tab[i] = memp;
  402402:	4619      	mov	r1, r3
    for (j = 0; j < memp_num[i]; ++j) {
  402404:	b293      	uxth	r3, r2
  402406:	429c      	cmp	r4, r3
  402408:	d8f7      	bhi.n	4023fa <memp_init+0x1e>
  40240a:	3c01      	subs	r4, #1
  40240c:	b2a4      	uxth	r4, r4
  40240e:	fb04 5305 	mla	r3, r4, r5, r5
  402412:	fb04 7405 	mla	r4, r4, r5, r7
  402416:	f8c8 4000 	str.w	r4, [r8]
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
  40241a:	441f      	add	r7, r3
  40241c:	3604      	adds	r6, #4
  40241e:	f10e 0e02 	add.w	lr, lr, #2
  for (i = 0; i < MEMP_MAX; ++i) {
  402422:	4556      	cmp	r6, sl
  402424:	d00c      	beq.n	402440 <memp_init+0x64>
  402426:	46b0      	mov	r8, r6
    memp_tab[i] = NULL;
  402428:	f8c6 9000 	str.w	r9, [r6]
    for (j = 0; j < memp_num[i]; ++j) {
  40242c:	f83c 4f02 	ldrh.w	r4, [ip, #2]!
  402430:	2c00      	cmp	r4, #0
  402432:	d0f3      	beq.n	40241c <memp_init+0x40>
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
  402434:	f8be 5000 	ldrh.w	r5, [lr]
  402438:	463b      	mov	r3, r7
  40243a:	2200      	movs	r2, #0
  40243c:	4611      	mov	r1, r2
  40243e:	e7dd      	b.n	4023fc <memp_init+0x20>
#if MEMP_OVERFLOW_CHECK
  memp_overflow_init();
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK */
}
  402440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402444:	20400adf 	.word	0x20400adf
  402448:	2040259c 	.word	0x2040259c
  40244c:	0040d7d6 	.word	0x0040d7d6
  402450:	0040d7e8 	.word	0x0040d7e8

00402454 <memp_malloc>:
#endif
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);
 
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
  402454:	2807      	cmp	r0, #7
  402456:	d900      	bls.n	40245a <memp_malloc+0x6>
  402458:	e7fe      	b.n	402458 <memp_malloc+0x4>
  SYS_ARCH_PROTECT(old_level);
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

  memp = memp_tab[type];
  40245a:	4b05      	ldr	r3, [pc, #20]	; (402470 <memp_malloc+0x1c>)
  40245c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  
  if (memp != NULL) {
  402460:	b11b      	cbz	r3, 40246a <memp_malloc+0x16>
    memp_tab[type] = memp->next;
  402462:	6819      	ldr	r1, [r3, #0]
  402464:	4a02      	ldr	r2, [pc, #8]	; (402470 <memp_malloc+0x1c>)
  402466:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
  }

  SYS_ARCH_UNPROTECT(old_level);

  return memp;
}
  40246a:	4618      	mov	r0, r3
  40246c:	4770      	bx	lr
  40246e:	bf00      	nop
  402470:	2040259c 	.word	0x2040259c

00402474 <memp_free>:
memp_free(memp_t type, void *mem)
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  if (mem == NULL) {
  402474:	460b      	mov	r3, r1
  402476:	b129      	cbz	r1, 402484 <memp_free+0x10>
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
#endif /* MEMP_OVERFLOW_CHECK */

  MEMP_STATS_DEC(used, type); 
  
  memp->next = memp_tab[type]; 
  402478:	4a03      	ldr	r2, [pc, #12]	; (402488 <memp_free+0x14>)
  40247a:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
  40247e:	6019      	str	r1, [r3, #0]
  memp_tab[type] = memp;
  402480:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  402484:	4770      	bx	lr
  402486:	bf00      	nop
  402488:	2040259c 	.word	0x2040259c

0040248c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
  40248c:	4770      	bx	lr
	...

00402490 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, ip_addr_t *ipaddr)
{
  402490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402492:	4604      	mov	r4, r0
#if LWIP_TCP
  struct tcp_pcb *pcb;
  struct tcp_pcb_listen *lpcb;

  /* address is actually being changed? */
  if (ipaddr && (ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0) {
  402494:	2900      	cmp	r1, #0
  402496:	d027      	beq.n	4024e8 <netif_set_ipaddr+0x58>
  402498:	460d      	mov	r5, r1
  40249a:	680a      	ldr	r2, [r1, #0]
  40249c:	6843      	ldr	r3, [r0, #4]
  40249e:	429a      	cmp	r2, r3
  4024a0:	d011      	beq.n	4024c6 <netif_set_ipaddr+0x36>
    /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    pcb = tcp_active_pcbs;
  4024a2:	4b12      	ldr	r3, [pc, #72]	; (4024ec <netif_set_ipaddr+0x5c>)
  4024a4:	6818      	ldr	r0, [r3, #0]
    while (pcb != NULL) {
  4024a6:	b158      	cbz	r0, 4024c0 <netif_set_ipaddr+0x30>
#endif /* LWIP_AUTOIP */
        ) {
        /* this connection must be aborted */
        struct tcp_pcb *next = pcb->next;
        LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
        tcp_abort(pcb);
  4024a8:	4f11      	ldr	r7, [pc, #68]	; (4024f0 <netif_set_ipaddr+0x60>)
  4024aa:	e003      	b.n	4024b4 <netif_set_ipaddr+0x24>
        struct tcp_pcb *next = pcb->next;
  4024ac:	68c6      	ldr	r6, [r0, #12]
        tcp_abort(pcb);
  4024ae:	47b8      	blx	r7
        pcb = next;
  4024b0:	4630      	mov	r0, r6
    while (pcb != NULL) {
  4024b2:	b128      	cbz	r0, 4024c0 <netif_set_ipaddr+0x30>
      if (ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))
  4024b4:	6802      	ldr	r2, [r0, #0]
  4024b6:	6863      	ldr	r3, [r4, #4]
  4024b8:	429a      	cmp	r2, r3
  4024ba:	d0f7      	beq.n	4024ac <netif_set_ipaddr+0x1c>
      } else {
        pcb = pcb->next;
  4024bc:	68c0      	ldr	r0, [r0, #12]
  4024be:	e7f8      	b.n	4024b2 <netif_set_ipaddr+0x22>
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  4024c0:	4b0c      	ldr	r3, [pc, #48]	; (4024f4 <netif_set_ipaddr+0x64>)
  4024c2:	681b      	ldr	r3, [r3, #0]
  4024c4:	b92b      	cbnz	r3, 4024d2 <netif_set_ipaddr+0x42>
  }
#endif
  snmp_delete_ipaddridx_tree(netif);
  snmp_delete_iprteidx_tree(0,netif);
  /* set new IP address to netif */
  ip_addr_set(&(netif->ip_addr), ipaddr);
  4024c6:	682b      	ldr	r3, [r5, #0]
  4024c8:	6063      	str	r3, [r4, #4]
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->ip_addr),
    ip4_addr2_16(&netif->ip_addr),
    ip4_addr3_16(&netif->ip_addr),
    ip4_addr4_16(&netif->ip_addr)));
}
  4024ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  4024cc:	68db      	ldr	r3, [r3, #12]
  4024ce:	2b00      	cmp	r3, #0
  4024d0:	d0f9      	beq.n	4024c6 <netif_set_ipaddr+0x36>
      if ((!(ip_addr_isany(&(lpcb->local_ip)))) &&
  4024d2:	2b00      	cmp	r3, #0
  4024d4:	d0fa      	beq.n	4024cc <netif_set_ipaddr+0x3c>
  4024d6:	681a      	ldr	r2, [r3, #0]
  4024d8:	2a00      	cmp	r2, #0
  4024da:	d0f7      	beq.n	4024cc <netif_set_ipaddr+0x3c>
  4024dc:	6861      	ldr	r1, [r4, #4]
  4024de:	428a      	cmp	r2, r1
  4024e0:	d1f4      	bne.n	4024cc <netif_set_ipaddr+0x3c>
        ip_addr_set(&(lpcb->local_ip), ipaddr);
  4024e2:	682a      	ldr	r2, [r5, #0]
  4024e4:	601a      	str	r2, [r3, #0]
  4024e6:	e7f1      	b.n	4024cc <netif_set_ipaddr+0x3c>
  ip_addr_set(&(netif->ip_addr), ipaddr);
  4024e8:	2300      	movs	r3, #0
  4024ea:	e7ed      	b.n	4024c8 <netif_set_ipaddr+0x38>
  4024ec:	20404964 	.word	0x20404964
  4024f0:	0040347d 	.word	0x0040347d
  4024f4:	2040496c 	.word	0x2040496c

004024f8 <netif_set_addr>:
{
  4024f8:	b570      	push	{r4, r5, r6, lr}
  4024fa:	4604      	mov	r4, r0
  4024fc:	4616      	mov	r6, r2
  4024fe:	461d      	mov	r5, r3
  netif_set_ipaddr(netif, ipaddr);
  402500:	4b06      	ldr	r3, [pc, #24]	; (40251c <netif_set_addr+0x24>)
  402502:	4798      	blx	r3
void
netif_set_netmask(struct netif *netif, ip_addr_t *netmask)
{
  snmp_delete_iprteidx_tree(0, netif);
  /* set new netmask to netif */
  ip_addr_set(&(netif->netmask), netmask);
  402504:	b12e      	cbz	r6, 402512 <netif_set_addr+0x1a>
  402506:	6833      	ldr	r3, [r6, #0]
  402508:	60a3      	str	r3, [r4, #8]
  ip_addr_set(&(netif->gw), gw);
  40250a:	b125      	cbz	r5, 402516 <netif_set_addr+0x1e>
  40250c:	682b      	ldr	r3, [r5, #0]
  40250e:	60e3      	str	r3, [r4, #12]
  402510:	bd70      	pop	{r4, r5, r6, pc}
  ip_addr_set(&(netif->netmask), netmask);
  402512:	2300      	movs	r3, #0
  402514:	e7f8      	b.n	402508 <netif_set_addr+0x10>
  ip_addr_set(&(netif->gw), gw);
  402516:	2300      	movs	r3, #0
  402518:	e7f9      	b.n	40250e <netif_set_addr+0x16>
  40251a:	bf00      	nop
  40251c:	00402491 	.word	0x00402491

00402520 <netif_add>:
{
  402520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402522:	4604      	mov	r4, r0
  ip_addr_set_zero(&netif->ip_addr);
  402524:	2500      	movs	r5, #0
  402526:	6045      	str	r5, [r0, #4]
  ip_addr_set_zero(&netif->netmask);
  402528:	6085      	str	r5, [r0, #8]
  ip_addr_set_zero(&netif->gw);
  40252a:	60c5      	str	r5, [r0, #12]
  netif->flags = 0;
  40252c:	f880 502d 	strb.w	r5, [r0, #45]	; 0x2d
  netif->status_callback = NULL;
  402530:	61c5      	str	r5, [r0, #28]
  netif->state = state;
  402532:	9d06      	ldr	r5, [sp, #24]
  402534:	6205      	str	r5, [r0, #32]
  netif->num = netif_num++;
  402536:	4e0b      	ldr	r6, [pc, #44]	; (402564 <netif_add+0x44>)
  402538:	7835      	ldrb	r5, [r6, #0]
  40253a:	1c6f      	adds	r7, r5, #1
  40253c:	7037      	strb	r7, [r6, #0]
  40253e:	f880 5030 	strb.w	r5, [r0, #48]	; 0x30
  netif->input = input;
  402542:	9d08      	ldr	r5, [sp, #32]
  402544:	6105      	str	r5, [r0, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
  402546:	4d08      	ldr	r5, [pc, #32]	; (402568 <netif_add+0x48>)
  402548:	47a8      	blx	r5
  if (init(netif) != ERR_OK) {
  40254a:	4620      	mov	r0, r4
  40254c:	9b07      	ldr	r3, [sp, #28]
  40254e:	4798      	blx	r3
  402550:	b928      	cbnz	r0, 40255e <netif_add+0x3e>
  netif->next = netif_list;
  402552:	4b06      	ldr	r3, [pc, #24]	; (40256c <netif_add+0x4c>)
  402554:	681a      	ldr	r2, [r3, #0]
  402556:	6022      	str	r2, [r4, #0]
  netif_list = netif;
  402558:	601c      	str	r4, [r3, #0]
  return netif;
  40255a:	4620      	mov	r0, r4
  40255c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return NULL;
  40255e:	2000      	movs	r0, #0
}
  402560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402562:	bf00      	nop
  402564:	204025bc 	.word	0x204025bc
  402568:	004024f9 	.word	0x004024f9
  40256c:	20404954 	.word	0x20404954

00402570 <netif_set_default>:
    snmp_delete_iprteidx_tree(1, netif);
  } else {
    /* install default route */
    snmp_insert_iprteidx_tree(1, netif);
  }
  netif_default = netif;
  402570:	4b01      	ldr	r3, [pc, #4]	; (402578 <netif_set_default+0x8>)
  402572:	6018      	str	r0, [r3, #0]
  402574:	4770      	bx	lr
  402576:	bf00      	nop
  402578:	20404958 	.word	0x20404958

0040257c <netif_set_up>:
 * 
 * @see dhcp_start()
 */ 
void netif_set_up(struct netif *netif)
{
  if (!(netif->flags & NETIF_FLAG_UP)) {
  40257c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
  402580:	f013 0f01 	tst.w	r3, #1
  402584:	d114      	bne.n	4025b0 <netif_set_up+0x34>
{
  402586:	b510      	push	{r4, lr}
  402588:	4604      	mov	r4, r0
    netif->flags |= NETIF_FLAG_UP;
  40258a:	f043 0301 	orr.w	r3, r3, #1
  40258e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    
#if LWIP_SNMP
    snmp_get_sysuptime(&netif->ts);
#endif /* LWIP_SNMP */

    NETIF_STATUS_CALLBACK(netif);
  402592:	69c3      	ldr	r3, [r0, #28]
  402594:	b103      	cbz	r3, 402598 <netif_set_up+0x1c>
  402596:	4798      	blx	r3

    if (netif->flags & NETIF_FLAG_LINK_UP) {
#if LWIP_ARP
      /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */ 
      if (netif->flags & (NETIF_FLAG_ETHARP)) {
  402598:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
  40259c:	f003 0330 	and.w	r3, r3, #48	; 0x30
  4025a0:	2b30      	cmp	r3, #48	; 0x30
  4025a2:	d000      	beq.n	4025a6 <netif_set_up+0x2a>
  4025a4:	bd10      	pop	{r4, pc}
        etharp_gratuitous(netif);
  4025a6:	1d21      	adds	r1, r4, #4
  4025a8:	4620      	mov	r0, r4
  4025aa:	4b02      	ldr	r3, [pc, #8]	; (4025b4 <netif_set_up+0x38>)
  4025ac:	4798      	blx	r3
        igmp_report_groups( netif);
      }
#endif /* LWIP_IGMP */
    }
  }
}
  4025ae:	e7f9      	b.n	4025a4 <netif_set_up+0x28>
  4025b0:	4770      	bx	lr
  4025b2:	bf00      	nop
  4025b4:	0040591d 	.word	0x0040591d

004025b8 <netif_set_status_callback>:
/**
 * Set callback to be called when interface is brought up/down
 */
void netif_set_status_callback(struct netif *netif, netif_status_callback_fn status_callback)
{
  if (netif) {
  4025b8:	b100      	cbz	r0, 4025bc <netif_set_status_callback+0x4>
    netif->status_callback = status_callback;
  4025ba:	61c1      	str	r1, [r0, #28]
  4025bc:	4770      	bx	lr

004025be <pbuf_header>:
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
  4025be:	b369      	cbz	r1, 40261c <pbuf_header+0x5e>
  4025c0:	460b      	mov	r3, r1
  4025c2:	b358      	cbz	r0, 40261c <pbuf_header+0x5e>
{
  4025c4:	b410      	push	{r4}
    return 0;
  }
 
  if (header_size_increment < 0){
  4025c6:	2900      	cmp	r1, #0
  4025c8:	db11      	blt.n	4025ee <pbuf_header+0x30>
    increment_magnitude = -header_size_increment;
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  } else {
    increment_magnitude = header_size_increment;
  4025ca:	b28c      	uxth	r4, r1
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
  4025cc:	7b01      	ldrb	r1, [r0, #12]
  /* remember current payload pointer */
  payload = p->payload;
  4025ce:	6842      	ldr	r2, [r0, #4]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
  4025d0:	b199      	cbz	r1, 4025fa <pbuf_header+0x3c>
  4025d2:	2903      	cmp	r1, #3
  4025d4:	d011      	beq.n	4025fa <pbuf_header+0x3c>
      p->payload = payload;
      /* bail out unsuccesfully */
      return 1;
    }
  /* pbuf types refering to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
  4025d6:	3901      	subs	r1, #1
  4025d8:	b289      	uxth	r1, r1
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
  4025da:	2901      	cmp	r1, #1
  4025dc:	d822      	bhi.n	402624 <pbuf_header+0x66>
  4025de:	2b00      	cmp	r3, #0
  4025e0:	da20      	bge.n	402624 <pbuf_header+0x66>
  4025e2:	8941      	ldrh	r1, [r0, #10]
  4025e4:	42a1      	cmp	r1, r4
  4025e6:	d31f      	bcc.n	402628 <pbuf_header+0x6a>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
  4025e8:	1ad2      	subs	r2, r2, r3
  4025ea:	6042      	str	r2, [r0, #4]
  4025ec:	e00b      	b.n	402606 <pbuf_header+0x48>
    increment_magnitude = -header_size_increment;
  4025ee:	424c      	negs	r4, r1
  4025f0:	b2a4      	uxth	r4, r4
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  4025f2:	8942      	ldrh	r2, [r0, #10]
  4025f4:	42a2      	cmp	r2, r4
  4025f6:	d2e9      	bcs.n	4025cc <pbuf_header+0xe>
  4025f8:	e7fe      	b.n	4025f8 <pbuf_header+0x3a>
    p->payload = (u8_t *)p->payload - header_size_increment;
  4025fa:	1ad2      	subs	r2, r2, r3
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
  4025fc:	f100 0110 	add.w	r1, r0, #16
  402600:	428a      	cmp	r2, r1
  402602:	d30d      	bcc.n	402620 <pbuf_header+0x62>
    p->payload = (u8_t *)p->payload - header_size_increment;
  402604:	6042      	str	r2, [r0, #4]
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
  402606:	b29b      	uxth	r3, r3
  402608:	8942      	ldrh	r2, [r0, #10]
  40260a:	441a      	add	r2, r3
  40260c:	8142      	strh	r2, [r0, #10]
  p->tot_len += header_size_increment;
  40260e:	8902      	ldrh	r2, [r0, #8]
  402610:	4413      	add	r3, r2
  402612:	8103      	strh	r3, [r0, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
  402614:	2000      	movs	r0, #0
}
  402616:	f85d 4b04 	ldr.w	r4, [sp], #4
  40261a:	4770      	bx	lr
    return 0;
  40261c:	2000      	movs	r0, #0
  40261e:	4770      	bx	lr
      return 1;
  402620:	2001      	movs	r0, #1
  402622:	e7f8      	b.n	402616 <pbuf_header+0x58>
      return 1;
  402624:	2001      	movs	r0, #1
  402626:	e7f6      	b.n	402616 <pbuf_header+0x58>
  402628:	2001      	movs	r0, #1
  40262a:	e7f4      	b.n	402616 <pbuf_header+0x58>

0040262c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
  40262c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
  402630:	b1f8      	cbz	r0, 402672 <pbuf_free+0x46>
  402632:	4601      	mov	r1, r0
  402634:	2400      	movs	r4, #0
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
          memp_free(MEMP_PBUF, p);
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
  402636:	4d11      	ldr	r5, [pc, #68]	; (40267c <pbuf_free+0x50>)
          memp_free(MEMP_PBUF, p);
  402638:	f04f 0806 	mov.w	r8, #6
  40263c:	4e10      	ldr	r6, [pc, #64]	; (402680 <pbuf_free+0x54>)
  40263e:	e008      	b.n	402652 <pbuf_free+0x26>
          memp_free(MEMP_PBUF_POOL, p);
  402640:	2007      	movs	r0, #7
  402642:	47b0      	blx	r6
  402644:	e001      	b.n	40264a <pbuf_free+0x1e>
          memp_free(MEMP_PBUF, p);
  402646:	4640      	mov	r0, r8
  402648:	47b0      	blx	r6
        }
      }
      count++;
  40264a:	3401      	adds	r4, #1
  40264c:	b2e4      	uxtb	r4, r4
      /* proceed to next pbuf */
      p = q;
  40264e:	4639      	mov	r1, r7
  while (p != NULL) {
  402650:	b187      	cbz	r7, 402674 <pbuf_free+0x48>
    ref = --(p->ref);
  402652:	89cb      	ldrh	r3, [r1, #14]
  402654:	3b01      	subs	r3, #1
  402656:	b29b      	uxth	r3, r3
  402658:	81cb      	strh	r3, [r1, #14]
    if (ref == 0) {
  40265a:	b95b      	cbnz	r3, 402674 <pbuf_free+0x48>
      q = p->next;
  40265c:	680f      	ldr	r7, [r1, #0]
      type = p->type;
  40265e:	7b0b      	ldrb	r3, [r1, #12]
        if (type == PBUF_POOL) {
  402660:	2b03      	cmp	r3, #3
  402662:	d0ed      	beq.n	402640 <pbuf_free+0x14>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
  402664:	3b01      	subs	r3, #1
  402666:	b29b      	uxth	r3, r3
  402668:	2b01      	cmp	r3, #1
  40266a:	d9ec      	bls.n	402646 <pbuf_free+0x1a>
          mem_free(p);
  40266c:	4608      	mov	r0, r1
  40266e:	47a8      	blx	r5
  402670:	e7eb      	b.n	40264a <pbuf_free+0x1e>
    return 0;
  402672:	2400      	movs	r4, #0
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
  402674:	4620      	mov	r0, r4
  402676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40267a:	bf00      	nop
  40267c:	00402195 	.word	0x00402195
  402680:	00402475 	.word	0x00402475

00402684 <pbuf_alloc>:
{
  402684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  switch (layer) {
  402688:	2803      	cmp	r0, #3
  40268a:	f200 8093 	bhi.w	4027b4 <pbuf_alloc+0x130>
  40268e:	e8df f000 	tbb	[pc, r0]
  402692:	0208      	.short	0x0208
  402694:	0604      	.short	0x0604
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN;
  402696:	2422      	movs	r4, #34	; 0x22
  402698:	e004      	b.n	4026a4 <pbuf_alloc+0x20>
    offset = PBUF_LINK_HLEN;
  40269a:	240e      	movs	r4, #14
    break;
  40269c:	e002      	b.n	4026a4 <pbuf_alloc+0x20>
    offset = 0;
  40269e:	2400      	movs	r4, #0
    break;
  4026a0:	e000      	b.n	4026a4 <pbuf_alloc+0x20>
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
  4026a2:	2436      	movs	r4, #54	; 0x36
  4026a4:	4617      	mov	r7, r2
  4026a6:	4688      	mov	r8, r1
  switch (type) {
  4026a8:	2a03      	cmp	r2, #3
  4026aa:	f200 8085 	bhi.w	4027b8 <pbuf_alloc+0x134>
  4026ae:	e8df f002 	tbb	[pc, r2]
  4026b2:	7252      	.short	0x7252
  4026b4:	0272      	.short	0x0272
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  4026b6:	2007      	movs	r0, #7
  4026b8:	4b40      	ldr	r3, [pc, #256]	; (4027bc <pbuf_alloc+0x138>)
  4026ba:	4798      	blx	r3
    if (p == NULL) {
  4026bc:	4606      	mov	r6, r0
  4026be:	2800      	cmp	r0, #0
  4026c0:	d03d      	beq.n	40273e <pbuf_alloc+0xba>
    p->type = type;
  4026c2:	2303      	movs	r3, #3
  4026c4:	7303      	strb	r3, [r0, #12]
    p->next = NULL;
  4026c6:	2300      	movs	r3, #0
  4026c8:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
  4026ca:	1903      	adds	r3, r0, r4
  4026cc:	3313      	adds	r3, #19
  4026ce:	f023 0303 	bic.w	r3, r3, #3
  4026d2:	6043      	str	r3, [r0, #4]
    p->tot_len = length;
  4026d4:	f8a0 8008 	strh.w	r8, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
  4026d8:	3403      	adds	r4, #3
  4026da:	f024 0403 	bic.w	r4, r4, #3
  4026de:	f5c4 64c0 	rsb	r4, r4, #1536	; 0x600
  4026e2:	4544      	cmp	r4, r8
  4026e4:	bfa8      	it	ge
  4026e6:	4644      	movge	r4, r8
  4026e8:	8144      	strh	r4, [r0, #10]
    p->ref = 1;
  4026ea:	2301      	movs	r3, #1
  4026ec:	81c3      	strh	r3, [r0, #14]
    rem_len = length - p->len;
  4026ee:	b2a5      	uxth	r5, r4
  4026f0:	eba8 0505 	sub.w	r5, r8, r5
    while (rem_len > 0) {
  4026f4:	2d00      	cmp	r5, #0
  4026f6:	dd47      	ble.n	402788 <pbuf_alloc+0x104>
  4026f8:	4682      	mov	sl, r0
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  4026fa:	f04f 0807 	mov.w	r8, #7
  4026fe:	4f2f      	ldr	r7, [pc, #188]	; (4027bc <pbuf_alloc+0x138>)
      q->type = type;
  402700:	f04f 0903 	mov.w	r9, #3
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  402704:	4640      	mov	r0, r8
  402706:	47b8      	blx	r7
      if (q == NULL) {
  402708:	4604      	mov	r4, r0
  40270a:	b1e0      	cbz	r0, 402746 <pbuf_alloc+0xc2>
      q->type = type;
  40270c:	f880 900c 	strb.w	r9, [r0, #12]
      q->flags = 0;
  402710:	2300      	movs	r3, #0
  402712:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
  402714:	6003      	str	r3, [r0, #0]
      r->next = q;
  402716:	f8ca 0000 	str.w	r0, [sl]
      q->tot_len = (u16_t)rem_len;
  40271a:	b2ab      	uxth	r3, r5
  40271c:	8103      	strh	r3, [r0, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
  40271e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
  402722:	bf28      	it	cs
  402724:	f44f 63c0 	movcs.w	r3, #1536	; 0x600
  402728:	8143      	strh	r3, [r0, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
  40272a:	f100 0210 	add.w	r2, r0, #16
  40272e:	6042      	str	r2, [r0, #4]
      q->ref = 1;
  402730:	2201      	movs	r2, #1
  402732:	81c2      	strh	r2, [r0, #14]
      rem_len -= q->len;
  402734:	1aed      	subs	r5, r5, r3
      r = q;
  402736:	4682      	mov	sl, r0
    while (rem_len > 0) {
  402738:	2d00      	cmp	r5, #0
  40273a:	dce3      	bgt.n	402704 <pbuf_alloc+0x80>
  40273c:	e024      	b.n	402788 <pbuf_alloc+0x104>
  pbuf_free_ooseq_pending = 1;
  40273e:	2201      	movs	r2, #1
  402740:	4b1f      	ldr	r3, [pc, #124]	; (4027c0 <pbuf_alloc+0x13c>)
  402742:	701a      	strb	r2, [r3, #0]
  402744:	e024      	b.n	402790 <pbuf_alloc+0x10c>
  402746:	2201      	movs	r2, #1
  402748:	4b1d      	ldr	r3, [pc, #116]	; (4027c0 <pbuf_alloc+0x13c>)
  40274a:	701a      	strb	r2, [r3, #0]
        pbuf_free(p);
  40274c:	4630      	mov	r0, r6
  40274e:	4b1d      	ldr	r3, [pc, #116]	; (4027c4 <pbuf_alloc+0x140>)
  402750:	4798      	blx	r3
        return NULL;
  402752:	4626      	mov	r6, r4
  402754:	e01c      	b.n	402790 <pbuf_alloc+0x10c>
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
  402756:	f104 0013 	add.w	r0, r4, #19
  40275a:	f020 0003 	bic.w	r0, r0, #3
  40275e:	1ccb      	adds	r3, r1, #3
  402760:	f023 0303 	bic.w	r3, r3, #3
  402764:	4418      	add	r0, r3
  402766:	b280      	uxth	r0, r0
  402768:	4b17      	ldr	r3, [pc, #92]	; (4027c8 <pbuf_alloc+0x144>)
  40276a:	4798      	blx	r3
    if (p == NULL) {
  40276c:	4606      	mov	r6, r0
  40276e:	b178      	cbz	r0, 402790 <pbuf_alloc+0x10c>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
  402770:	4404      	add	r4, r0
  402772:	3413      	adds	r4, #19
  402774:	f024 0403 	bic.w	r4, r4, #3
  402778:	6044      	str	r4, [r0, #4]
    p->len = p->tot_len = length;
  40277a:	f8a0 8008 	strh.w	r8, [r0, #8]
  40277e:	f8a0 800a 	strh.w	r8, [r0, #10]
    p->next = NULL;
  402782:	2300      	movs	r3, #0
  402784:	6003      	str	r3, [r0, #0]
    p->type = type;
  402786:	7303      	strb	r3, [r0, #12]
  p->ref = 1;
  402788:	2301      	movs	r3, #1
  40278a:	81f3      	strh	r3, [r6, #14]
  p->flags = 0;
  40278c:	2300      	movs	r3, #0
  40278e:	7373      	strb	r3, [r6, #13]
}
  402790:	4630      	mov	r0, r6
  402792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
  402796:	2006      	movs	r0, #6
  402798:	4b08      	ldr	r3, [pc, #32]	; (4027bc <pbuf_alloc+0x138>)
  40279a:	4798      	blx	r3
    if (p == NULL) {
  40279c:	4606      	mov	r6, r0
  40279e:	2800      	cmp	r0, #0
  4027a0:	d0f6      	beq.n	402790 <pbuf_alloc+0x10c>
    p->payload = NULL;
  4027a2:	2300      	movs	r3, #0
  4027a4:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
  4027a6:	f8a0 8008 	strh.w	r8, [r0, #8]
  4027aa:	f8a0 800a 	strh.w	r8, [r0, #10]
    p->next = NULL;
  4027ae:	6003      	str	r3, [r0, #0]
    p->type = type;
  4027b0:	7307      	strb	r7, [r0, #12]
    break;
  4027b2:	e7e9      	b.n	402788 <pbuf_alloc+0x104>
    return NULL;
  4027b4:	2600      	movs	r6, #0
  4027b6:	e7eb      	b.n	402790 <pbuf_alloc+0x10c>
    return NULL;
  4027b8:	2600      	movs	r6, #0
  4027ba:	e7e9      	b.n	402790 <pbuf_alloc+0x10c>
  4027bc:	00402455 	.word	0x00402455
  4027c0:	2040495c 	.word	0x2040495c
  4027c4:	0040262d 	.word	0x0040262d
  4027c8:	004022fd 	.word	0x004022fd

004027cc <pbuf_realloc>:
  if (new_len >= p->tot_len) {
  4027cc:	8902      	ldrh	r2, [r0, #8]
  4027ce:	428a      	cmp	r2, r1
  4027d0:	d926      	bls.n	402820 <pbuf_realloc+0x54>
{
  4027d2:	b538      	push	{r3, r4, r5, lr}
  4027d4:	4604      	mov	r4, r0
  while (rem_len > q->len) {
  4027d6:	8943      	ldrh	r3, [r0, #10]
  4027d8:	4299      	cmp	r1, r3
  4027da:	d91f      	bls.n	40281c <pbuf_realloc+0x50>
  4027dc:	460d      	mov	r5, r1
    q->tot_len += (u16_t)grow;
  4027de:	1a89      	subs	r1, r1, r2
    rem_len -= q->len;
  4027e0:	1aeb      	subs	r3, r5, r3
  4027e2:	b29d      	uxth	r5, r3
    q->tot_len += (u16_t)grow;
  4027e4:	8923      	ldrh	r3, [r4, #8]
  4027e6:	440b      	add	r3, r1
  4027e8:	8123      	strh	r3, [r4, #8]
    q = q->next;
  4027ea:	6824      	ldr	r4, [r4, #0]
  while (rem_len > q->len) {
  4027ec:	8963      	ldrh	r3, [r4, #10]
  4027ee:	42ab      	cmp	r3, r5
  4027f0:	d3f6      	bcc.n	4027e0 <pbuf_realloc+0x14>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)) {
  4027f2:	7b22      	ldrb	r2, [r4, #12]
  4027f4:	b94a      	cbnz	r2, 40280a <pbuf_realloc+0x3e>
  4027f6:	429d      	cmp	r5, r3
  4027f8:	d007      	beq.n	40280a <pbuf_realloc+0x3e>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
  4027fa:	6863      	ldr	r3, [r4, #4]
  4027fc:	1b1b      	subs	r3, r3, r4
  4027fe:	18e9      	adds	r1, r5, r3
  402800:	b289      	uxth	r1, r1
  402802:	4620      	mov	r0, r4
  402804:	4b07      	ldr	r3, [pc, #28]	; (402824 <pbuf_realloc+0x58>)
  402806:	4798      	blx	r3
  402808:	4604      	mov	r4, r0
  q->len = rem_len;
  40280a:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
  40280c:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
  40280e:	6820      	ldr	r0, [r4, #0]
  402810:	b108      	cbz	r0, 402816 <pbuf_realloc+0x4a>
    pbuf_free(q->next);
  402812:	4b05      	ldr	r3, [pc, #20]	; (402828 <pbuf_realloc+0x5c>)
  402814:	4798      	blx	r3
  q->next = NULL;
  402816:	2300      	movs	r3, #0
  402818:	6023      	str	r3, [r4, #0]
  40281a:	bd38      	pop	{r3, r4, r5, pc}
  while (rem_len > q->len) {
  40281c:	460d      	mov	r5, r1
  40281e:	e7e8      	b.n	4027f2 <pbuf_realloc+0x26>
  402820:	4770      	bx	lr
  402822:	bf00      	nop
  402824:	0040222d 	.word	0x0040222d
  402828:	0040262d 	.word	0x0040262d

0040282c <pbuf_clen>:
pbuf_clen(struct pbuf *p)
{
  u8_t len;

  len = 0;
  while (p != NULL) {
  40282c:	4603      	mov	r3, r0
  40282e:	b130      	cbz	r0, 40283e <pbuf_clen+0x12>
  402830:	2000      	movs	r0, #0
    ++len;
  402832:	3001      	adds	r0, #1
  402834:	b2c0      	uxtb	r0, r0
    p = p->next;
  402836:	681b      	ldr	r3, [r3, #0]
  while (p != NULL) {
  402838:	2b00      	cmp	r3, #0
  40283a:	d1fa      	bne.n	402832 <pbuf_clen+0x6>
  40283c:	4770      	bx	lr
  len = 0;
  40283e:	2000      	movs	r0, #0
  }
  return len;
}
  402840:	4770      	bx	lr

00402842 <pbuf_ref>:
void
pbuf_ref(struct pbuf *p)
{
  SYS_ARCH_DECL_PROTECT(old_level);
  /* pbuf given? */
  if (p != NULL) {
  402842:	b110      	cbz	r0, 40284a <pbuf_ref+0x8>
    SYS_ARCH_PROTECT(old_level);
    ++(p->ref);
  402844:	89c3      	ldrh	r3, [r0, #14]
  402846:	3301      	adds	r3, #1
  402848:	81c3      	strh	r3, [r0, #14]
  40284a:	4770      	bx	lr

0040284c <pbuf_cat>:
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
  40284c:	b130      	cbz	r0, 40285c <pbuf_cat+0x10>
  40284e:	4602      	mov	r2, r0
  402850:	b121      	cbz	r1, 40285c <pbuf_cat+0x10>
{
  402852:	b410      	push	{r4}
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
  402854:	6803      	ldr	r3, [r0, #0]
  402856:	b91b      	cbnz	r3, 402860 <pbuf_cat+0x14>
  402858:	4603      	mov	r3, r0
  40285a:	e009      	b.n	402870 <pbuf_cat+0x24>
  40285c:	e7fe      	b.n	40285c <pbuf_cat+0x10>
  40285e:	4603      	mov	r3, r0
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
  402860:	8910      	ldrh	r0, [r2, #8]
  402862:	890c      	ldrh	r4, [r1, #8]
  402864:	4420      	add	r0, r4
  402866:	8110      	strh	r0, [r2, #8]
  for (p = h; p->next != NULL; p = p->next) {
  402868:	6818      	ldr	r0, [r3, #0]
  40286a:	461a      	mov	r2, r3
  40286c:	2800      	cmp	r0, #0
  40286e:	d1f6      	bne.n	40285e <pbuf_cat+0x12>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
  402870:	891a      	ldrh	r2, [r3, #8]
  402872:	8908      	ldrh	r0, [r1, #8]
  402874:	4402      	add	r2, r0
  402876:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  402878:	6019      	str	r1, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
  40287a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40287e:	4770      	bx	lr

00402880 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
  402880:	b510      	push	{r4, lr}
  402882:	460c      	mov	r4, r1
  pbuf_cat(h, t);
  402884:	4b02      	ldr	r3, [pc, #8]	; (402890 <pbuf_chain+0x10>)
  402886:	4798      	blx	r3
  /* t is now referenced by h */
  pbuf_ref(t);
  402888:	4620      	mov	r0, r4
  40288a:	4b02      	ldr	r3, [pc, #8]	; (402894 <pbuf_chain+0x14>)
  40288c:	4798      	blx	r3
  40288e:	bd10      	pop	{r4, pc}
  402890:	0040284d 	.word	0x0040284d
  402894:	00402843 	.word	0x00402843

00402898 <pbuf_copy>:

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (void*)p_to, (void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
  402898:	2800      	cmp	r0, #0
  40289a:	d051      	beq.n	402940 <pbuf_copy+0xa8>
{
  40289c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4028a0:	460d      	mov	r5, r1
  4028a2:	4604      	mov	r4, r0
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
  4028a4:	b119      	cbz	r1, 4028ae <pbuf_copy+0x16>
  4028a6:	8902      	ldrh	r2, [r0, #8]
  4028a8:	890b      	ldrh	r3, [r1, #8]
  4028aa:	429a      	cmp	r2, r3
  4028ac:	d200      	bcs.n	4028b0 <pbuf_copy+0x18>
  4028ae:	e7fe      	b.n	4028ae <pbuf_copy+0x16>
  4028b0:	f04f 0a00 	mov.w	sl, #0
  4028b4:	4657      	mov	r7, sl
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
  4028b6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 402944 <pbuf_copy+0xac>
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
      /* on to next p_from (if any) */
      offset_from = 0;
  4028ba:	46d0      	mov	r8, sl
  4028bc:	e00f      	b.n	4028de <pbuf_copy+0x46>
      len = p_to->len - offset_to;
  4028be:	1bdb      	subs	r3, r3, r7
  4028c0:	b29e      	uxth	r6, r3
  4028c2:	e014      	b.n	4028ee <pbuf_copy+0x56>
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
  4028c4:	8963      	ldrh	r3, [r4, #10]
  4028c6:	42bb      	cmp	r3, r7
  4028c8:	d022      	beq.n	402910 <pbuf_copy+0x78>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
    }

    if((p_from != NULL) && (p_from->len == p_from->tot_len)) {
  4028ca:	b365      	cbz	r5, 402926 <pbuf_copy+0x8e>
  4028cc:	896a      	ldrh	r2, [r5, #10]
  4028ce:	892b      	ldrh	r3, [r5, #8]
  4028d0:	429a      	cmp	r2, r3
  4028d2:	d023      	beq.n	40291c <pbuf_copy+0x84>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if((p_to != NULL) && (p_to->len == p_to->tot_len)) {
  4028d4:	b11c      	cbz	r4, 4028de <pbuf_copy+0x46>
  4028d6:	8962      	ldrh	r2, [r4, #10]
  4028d8:	8923      	ldrh	r3, [r4, #8]
  4028da:	429a      	cmp	r2, r3
  4028dc:	d028      	beq.n	402930 <pbuf_copy+0x98>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
  4028de:	8963      	ldrh	r3, [r4, #10]
  4028e0:	896a      	ldrh	r2, [r5, #10]
  4028e2:	1bd8      	subs	r0, r3, r7
  4028e4:	eba2 010a 	sub.w	r1, r2, sl
  4028e8:	4288      	cmp	r0, r1
  4028ea:	dbe8      	blt.n	4028be <pbuf_copy+0x26>
      len = p_from->len - offset_from;
  4028ec:	b28e      	uxth	r6, r1
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
  4028ee:	6860      	ldr	r0, [r4, #4]
  4028f0:	6869      	ldr	r1, [r5, #4]
  4028f2:	4632      	mov	r2, r6
  4028f4:	4451      	add	r1, sl
  4028f6:	4438      	add	r0, r7
  4028f8:	47c8      	blx	r9
    offset_to += len;
  4028fa:	4437      	add	r7, r6
  4028fc:	b2bf      	uxth	r7, r7
    offset_from += len;
  4028fe:	4456      	add	r6, sl
  402900:	fa1f fa86 	uxth.w	sl, r6
    if (offset_from >= p_from->len) {
  402904:	896b      	ldrh	r3, [r5, #10]
  402906:	4553      	cmp	r3, sl
  402908:	d8dc      	bhi.n	4028c4 <pbuf_copy+0x2c>
      p_from = p_from->next;
  40290a:	682d      	ldr	r5, [r5, #0]
      offset_from = 0;
  40290c:	46c2      	mov	sl, r8
  40290e:	e7d9      	b.n	4028c4 <pbuf_copy+0x2c>
      p_to = p_to->next;
  402910:	6824      	ldr	r4, [r4, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
  402912:	b904      	cbnz	r4, 402916 <pbuf_copy+0x7e>
  402914:	b90d      	cbnz	r5, 40291a <pbuf_copy+0x82>
      offset_to = 0;
  402916:	4647      	mov	r7, r8
  402918:	e7d7      	b.n	4028ca <pbuf_copy+0x32>
  40291a:	e7fe      	b.n	40291a <pbuf_copy+0x82>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
  40291c:	682b      	ldr	r3, [r5, #0]
  40291e:	2b00      	cmp	r3, #0
  402920:	d0d8      	beq.n	4028d4 <pbuf_copy+0x3c>
  402922:	e7fe      	b.n	402922 <pbuf_copy+0x8a>
  402924:	e7fe      	b.n	402924 <pbuf_copy+0x8c>
    if((p_to != NULL) && (p_to->len == p_to->tot_len)) {
  402926:	b144      	cbz	r4, 40293a <pbuf_copy+0xa2>
  402928:	8962      	ldrh	r2, [r4, #10]
  40292a:	8923      	ldrh	r3, [r4, #8]
  40292c:	429a      	cmp	r2, r3
  40292e:	d104      	bne.n	40293a <pbuf_copy+0xa2>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
  402930:	6823      	ldr	r3, [r4, #0]
  402932:	2b00      	cmp	r3, #0
  402934:	d1f6      	bne.n	402924 <pbuf_copy+0x8c>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  402936:	2d00      	cmp	r5, #0
  402938:	d1d1      	bne.n	4028de <pbuf_copy+0x46>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
  40293a:	2000      	movs	r0, #0
  40293c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402940:	e7fe      	b.n	402940 <pbuf_copy+0xa8>
  402942:	bf00      	nop
  402944:	00407295 	.word	0x00407295

00402948 <pbuf_copy_partial>:
  struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
  402948:	b158      	cbz	r0, 402962 <pbuf_copy_partial+0x1a>
{
  40294a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40294e:	460f      	mov	r7, r1
  402950:	4692      	mov	sl, r2
  402952:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
  402954:	b151      	cbz	r1, 40296c <pbuf_copy_partial+0x24>
  if((buf == NULL) || (dataptr == NULL)) {
    return 0;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; len != 0 && p != NULL; p = p->next) {
  402956:	b12a      	cbz	r2, 402964 <pbuf_copy_partial+0x1c>
  402958:	2600      	movs	r6, #0
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
      if (buf_copy_len > len)
          buf_copy_len = len;
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
  40295a:	f8df 9054 	ldr.w	r9, [pc, #84]	; 4029b0 <pbuf_copy_partial+0x68>
      copied_total += buf_copy_len;
      left += buf_copy_len;
      len -= buf_copy_len;
      offset = 0;
  40295e:	46b0      	mov	r8, r6
  402960:	e01d      	b.n	40299e <pbuf_copy_partial+0x56>
  402962:	e7fe      	b.n	402962 <pbuf_copy_partial+0x1a>
  for(p = buf; len != 0 && p != NULL; p = p->next) {
  402964:	4616      	mov	r6, r2
    }
  }
  return copied_total;
}
  402966:	4630      	mov	r0, r6
  402968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40296c:	e7fe      	b.n	40296c <pbuf_copy_partial+0x24>
      buf_copy_len = p->len - offset;
  40296e:	896c      	ldrh	r4, [r5, #10]
  402970:	1ae4      	subs	r4, r4, r3
  402972:	b2a4      	uxth	r4, r4
  402974:	4554      	cmp	r4, sl
  402976:	bf28      	it	cs
  402978:	4654      	movcs	r4, sl
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
  40297a:	6869      	ldr	r1, [r5, #4]
  40297c:	4622      	mov	r2, r4
  40297e:	4419      	add	r1, r3
  402980:	19b8      	adds	r0, r7, r6
  402982:	47c8      	blx	r9
      copied_total += buf_copy_len;
  402984:	4426      	add	r6, r4
  402986:	b2b6      	uxth	r6, r6
      len -= buf_copy_len;
  402988:	ebaa 0404 	sub.w	r4, sl, r4
  40298c:	fa1f fa84 	uxth.w	sl, r4
      offset = 0;
  402990:	4643      	mov	r3, r8
  for(p = buf; len != 0 && p != NULL; p = p->next) {
  402992:	682d      	ldr	r5, [r5, #0]
  402994:	f1ba 0f00 	cmp.w	sl, #0
  402998:	d0e5      	beq.n	402966 <pbuf_copy_partial+0x1e>
  40299a:	2d00      	cmp	r5, #0
  40299c:	d0e3      	beq.n	402966 <pbuf_copy_partial+0x1e>
    if ((offset != 0) && (offset >= p->len)) {
  40299e:	2b00      	cmp	r3, #0
  4029a0:	d0e5      	beq.n	40296e <pbuf_copy_partial+0x26>
  4029a2:	896a      	ldrh	r2, [r5, #10]
  4029a4:	429a      	cmp	r2, r3
  4029a6:	d8e2      	bhi.n	40296e <pbuf_copy_partial+0x26>
      offset -= p->len;
  4029a8:	1a9b      	subs	r3, r3, r2
  4029aa:	b29b      	uxth	r3, r3
  4029ac:	e7f1      	b.n	402992 <pbuf_copy_partial+0x4a>
  4029ae:	bf00      	nop
  4029b0:	00407295 	.word	0x00407295

004029b4 <tcp_accept_null>:
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(err);

  return ERR_ABRT;
}
  4029b4:	f06f 0009 	mvn.w	r0, #9
  4029b8:	4770      	bx	lr
	...

004029bc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
  4029bc:	b4f0      	push	{r4, r5, r6, r7}
  4029be:	4b14      	ldr	r3, [pc, #80]	; (402a10 <tcp_new_port+0x54>)
  4029c0:	881b      	ldrh	r3, [r3, #0]
  4029c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  u8_t i;
  u16_t n = 0;
  struct tcp_pcb *pcb;
  
again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
  4029c6:	f64f 77ff 	movw	r7, #65535	; 0xffff
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  4029ca:	f44f 4640 	mov.w	r6, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  4029ce:	4d11      	ldr	r5, [pc, #68]	; (402a14 <tcp_new_port+0x58>)
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
  4029d0:	42bb      	cmp	r3, r7
  4029d2:	d00c      	beq.n	4029ee <tcp_new_port+0x32>
  4029d4:	1c58      	adds	r0, r3, #1
  4029d6:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  4029d8:	2100      	movs	r1, #0
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  4029da:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
  4029de:	681c      	ldr	r4, [r3, #0]
  4029e0:	b93c      	cbnz	r4, 4029f2 <tcp_new_port+0x36>
  4029e2:	3101      	adds	r1, #1
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
  4029e4:	2904      	cmp	r1, #4
  4029e6:	d1f8      	bne.n	4029da <tcp_new_port+0x1e>
  4029e8:	4b09      	ldr	r3, [pc, #36]	; (402a10 <tcp_new_port+0x54>)
  4029ea:	8018      	strh	r0, [r3, #0]
        }
        goto again;
      }
    }
  }
  return tcp_port;
  4029ec:	e00b      	b.n	402a06 <tcp_new_port+0x4a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  4029ee:	4630      	mov	r0, r6
  4029f0:	e7f2      	b.n	4029d8 <tcp_new_port+0x1c>
      if (pcb->local_port == tcp_port) {
  4029f2:	8b63      	ldrh	r3, [r4, #26]
  4029f4:	4283      	cmp	r3, r0
  4029f6:	d108      	bne.n	402a0a <tcp_new_port+0x4e>
  4029f8:	3a01      	subs	r2, #1
  4029fa:	b292      	uxth	r2, r2
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
  4029fc:	2a00      	cmp	r2, #0
  4029fe:	d1e7      	bne.n	4029d0 <tcp_new_port+0x14>
  402a00:	4b03      	ldr	r3, [pc, #12]	; (402a10 <tcp_new_port+0x54>)
  402a02:	8018      	strh	r0, [r3, #0]
          return 0;
  402a04:	2000      	movs	r0, #0
}
  402a06:	bcf0      	pop	{r4, r5, r6, r7}
  402a08:	4770      	bx	lr
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  402a0a:	68e4      	ldr	r4, [r4, #12]
  402a0c:	e7e8      	b.n	4029e0 <tcp_new_port+0x24>
  402a0e:	bf00      	nop
  402a10:	2040000c 	.word	0x2040000c
  402a14:	0040d808 	.word	0x0040d808

00402a18 <tcp_init>:
{
  402a18:	4770      	bx	lr
	...

00402a1c <tcp_bind>:
{
  402a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
  402a1e:	7e03      	ldrb	r3, [r0, #24]
  402a20:	b103      	cbz	r3, 402a24 <tcp_bind+0x8>
  402a22:	e7fe      	b.n	402a22 <tcp_bind+0x6>
  402a24:	4604      	mov	r4, r0
  402a26:	460d      	mov	r5, r1
  if (port == 0) {
  402a28:	b1aa      	cbz	r2, 402a56 <tcp_bind+0x3a>
  402a2a:	491b      	ldr	r1, [pc, #108]	; (402a98 <tcp_bind+0x7c>)
  402a2c:	f101 0710 	add.w	r7, r1, #16
    for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  402a30:	f851 3b04 	ldr.w	r3, [r1], #4
  402a34:	681b      	ldr	r3, [r3, #0]
  402a36:	b9cb      	cbnz	r3, 402a6c <tcp_bind+0x50>
  for (i = 0; i < max_pcb_list; i++) {
  402a38:	42b9      	cmp	r1, r7
  402a3a:	d1f9      	bne.n	402a30 <tcp_bind+0x14>
  if (!ip_addr_isany(ipaddr)) {
  402a3c:	b115      	cbz	r5, 402a44 <tcp_bind+0x28>
  402a3e:	682b      	ldr	r3, [r5, #0]
  402a40:	b103      	cbz	r3, 402a44 <tcp_bind+0x28>
    pcb->local_ip = *ipaddr;
  402a42:	6023      	str	r3, [r4, #0]
  pcb->local_port = port;
  402a44:	8362      	strh	r2, [r4, #26]
  TCP_REG(&tcp_bound_pcbs, pcb);
  402a46:	4b15      	ldr	r3, [pc, #84]	; (402a9c <tcp_bind+0x80>)
  402a48:	681a      	ldr	r2, [r3, #0]
  402a4a:	60e2      	str	r2, [r4, #12]
  402a4c:	601c      	str	r4, [r3, #0]
  402a4e:	4b14      	ldr	r3, [pc, #80]	; (402aa0 <tcp_bind+0x84>)
  402a50:	4798      	blx	r3
  return ERR_OK;
  402a52:	2000      	movs	r0, #0
  402a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    port = tcp_new_port();
  402a56:	4b13      	ldr	r3, [pc, #76]	; (402aa4 <tcp_bind+0x88>)
  402a58:	4798      	blx	r3
    if (port == 0) {
  402a5a:	4602      	mov	r2, r0
  402a5c:	2800      	cmp	r0, #0
  402a5e:	d1e4      	bne.n	402a2a <tcp_bind+0xe>
      return ERR_BUF;
  402a60:	f06f 0001 	mvn.w	r0, #1
  402a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  402a66:	68db      	ldr	r3, [r3, #12]
  402a68:	2b00      	cmp	r3, #0
  402a6a:	d0e5      	beq.n	402a38 <tcp_bind+0x1c>
      if (cpcb->local_port == port) {
  402a6c:	8b58      	ldrh	r0, [r3, #26]
  402a6e:	4290      	cmp	r0, r2
  402a70:	d1f9      	bne.n	402a66 <tcp_bind+0x4a>
          if (ip_addr_isany(&(cpcb->local_ip)) ||
  402a72:	b153      	cbz	r3, 402a8a <tcp_bind+0x6e>
  402a74:	681e      	ldr	r6, [r3, #0]
  402a76:	b15d      	cbz	r5, 402a90 <tcp_bind+0x74>
  402a78:	b156      	cbz	r6, 402a90 <tcp_bind+0x74>
              ip_addr_isany(ipaddr) ||
  402a7a:	6828      	ldr	r0, [r5, #0]
  402a7c:	4286      	cmp	r6, r0
  402a7e:	d001      	beq.n	402a84 <tcp_bind+0x68>
  402a80:	2800      	cmp	r0, #0
  402a82:	d1f0      	bne.n	402a66 <tcp_bind+0x4a>
            return ERR_USE;
  402a84:	f06f 0007 	mvn.w	r0, #7
}
  402a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return ERR_USE;
  402a8a:	f06f 0007 	mvn.w	r0, #7
  402a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402a90:	f06f 0007 	mvn.w	r0, #7
  402a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402a96:	bf00      	nop
  402a98:	0040d808 	.word	0x0040d808
  402a9c:	20404974 	.word	0x20404974
  402aa0:	00402061 	.word	0x00402061
  402aa4:	004029bd 	.word	0x004029bd

00402aa8 <tcp_listen_with_backlog>:
{
  402aa8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, return NULL);
  402aaa:	7e03      	ldrb	r3, [r0, #24]
  402aac:	b103      	cbz	r3, 402ab0 <tcp_listen_with_backlog+0x8>
  402aae:	e7fe      	b.n	402aae <tcp_listen_with_backlog+0x6>
  402ab0:	4604      	mov	r4, r0
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
  402ab2:	2002      	movs	r0, #2
  402ab4:	4b24      	ldr	r3, [pc, #144]	; (402b48 <tcp_listen_with_backlog+0xa0>)
  402ab6:	4798      	blx	r3
  if (lpcb == NULL) {
  402ab8:	4605      	mov	r5, r0
  402aba:	2800      	cmp	r0, #0
  402abc:	d041      	beq.n	402b42 <tcp_listen_with_backlog+0x9a>
  lpcb->callback_arg = pcb->callback_arg;
  402abe:	6923      	ldr	r3, [r4, #16]
  402ac0:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
  402ac2:	8b63      	ldrh	r3, [r4, #26]
  402ac4:	8343      	strh	r3, [r0, #26]
  lpcb->state = LISTEN;
  402ac6:	2301      	movs	r3, #1
  402ac8:	7603      	strb	r3, [r0, #24]
  lpcb->prio = pcb->prio;
  402aca:	7e63      	ldrb	r3, [r4, #25]
  402acc:	7643      	strb	r3, [r0, #25]
  ip_set_option(lpcb, SOF_ACCEPTCONN);
  402ace:	7a23      	ldrb	r3, [r4, #8]
  402ad0:	f043 0302 	orr.w	r3, r3, #2
  402ad4:	7203      	strb	r3, [r0, #8]
  lpcb->ttl = pcb->ttl;
  402ad6:	7aa3      	ldrb	r3, [r4, #10]
  402ad8:	7283      	strb	r3, [r0, #10]
  lpcb->tos = pcb->tos;
  402ada:	7a63      	ldrb	r3, [r4, #9]
  402adc:	7243      	strb	r3, [r0, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
  402ade:	6823      	ldr	r3, [r4, #0]
  402ae0:	6003      	str	r3, [r0, #0]
  if (pcb->local_port != 0) {
  402ae2:	8b63      	ldrh	r3, [r4, #26]
  402ae4:	b143      	cbz	r3, 402af8 <tcp_listen_with_backlog+0x50>
    TCP_RMV(&tcp_bound_pcbs, pcb);
  402ae6:	4b19      	ldr	r3, [pc, #100]	; (402b4c <tcp_listen_with_backlog+0xa4>)
  402ae8:	681b      	ldr	r3, [r3, #0]
  402aea:	429c      	cmp	r4, r3
  402aec:	d112      	bne.n	402b14 <tcp_listen_with_backlog+0x6c>
  402aee:	68da      	ldr	r2, [r3, #12]
  402af0:	4b16      	ldr	r3, [pc, #88]	; (402b4c <tcp_listen_with_backlog+0xa4>)
  402af2:	601a      	str	r2, [r3, #0]
  402af4:	2300      	movs	r3, #0
  402af6:	60e3      	str	r3, [r4, #12]
  memp_free(MEMP_TCP_PCB, pcb);
  402af8:	4621      	mov	r1, r4
  402afa:	2001      	movs	r0, #1
  402afc:	4b14      	ldr	r3, [pc, #80]	; (402b50 <tcp_listen_with_backlog+0xa8>)
  402afe:	4798      	blx	r3
  lpcb->accept = tcp_accept_null;
  402b00:	4b14      	ldr	r3, [pc, #80]	; (402b54 <tcp_listen_with_backlog+0xac>)
  402b02:	616b      	str	r3, [r5, #20]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
  402b04:	4b14      	ldr	r3, [pc, #80]	; (402b58 <tcp_listen_with_backlog+0xb0>)
  402b06:	681a      	ldr	r2, [r3, #0]
  402b08:	60ea      	str	r2, [r5, #12]
  402b0a:	601d      	str	r5, [r3, #0]
  402b0c:	4b13      	ldr	r3, [pc, #76]	; (402b5c <tcp_listen_with_backlog+0xb4>)
  402b0e:	4798      	blx	r3
  return (struct tcp_pcb *)lpcb;
  402b10:	4628      	mov	r0, r5
  402b12:	bd38      	pop	{r3, r4, r5, pc}
    TCP_RMV(&tcp_bound_pcbs, pcb);
  402b14:	4a12      	ldr	r2, [pc, #72]	; (402b60 <tcp_listen_with_backlog+0xb8>)
  402b16:	6013      	str	r3, [r2, #0]
  402b18:	2b00      	cmp	r3, #0
  402b1a:	d0eb      	beq.n	402af4 <tcp_listen_with_backlog+0x4c>
  402b1c:	68da      	ldr	r2, [r3, #12]
  402b1e:	4294      	cmp	r4, r2
  402b20:	d106      	bne.n	402b30 <tcp_listen_with_backlog+0x88>
  402b22:	68e2      	ldr	r2, [r4, #12]
  402b24:	60da      	str	r2, [r3, #12]
  402b26:	e7e5      	b.n	402af4 <tcp_listen_with_backlog+0x4c>
  402b28:	68d3      	ldr	r3, [r2, #12]
  402b2a:	429c      	cmp	r4, r3
  402b2c:	d005      	beq.n	402b3a <tcp_listen_with_backlog+0x92>
  402b2e:	461a      	mov	r2, r3
  402b30:	2a00      	cmp	r2, #0
  402b32:	d1f9      	bne.n	402b28 <tcp_listen_with_backlog+0x80>
  402b34:	4b0a      	ldr	r3, [pc, #40]	; (402b60 <tcp_listen_with_backlog+0xb8>)
  402b36:	601a      	str	r2, [r3, #0]
  402b38:	e7dc      	b.n	402af4 <tcp_listen_with_backlog+0x4c>
  402b3a:	4b09      	ldr	r3, [pc, #36]	; (402b60 <tcp_listen_with_backlog+0xb8>)
  402b3c:	601a      	str	r2, [r3, #0]
  402b3e:	4613      	mov	r3, r2
  402b40:	e7ef      	b.n	402b22 <tcp_listen_with_backlog+0x7a>
    return NULL;
  402b42:	2000      	movs	r0, #0
}
  402b44:	bd38      	pop	{r3, r4, r5, pc}
  402b46:	bf00      	nop
  402b48:	00402455 	.word	0x00402455
  402b4c:	20404974 	.word	0x20404974
  402b50:	00402475 	.word	0x00402475
  402b54:	004029b5 	.word	0x004029b5
  402b58:	2040496c 	.word	0x2040496c
  402b5c:	00402061 	.word	0x00402061
  402b60:	20404970 	.word	0x20404970

00402b64 <tcp_update_rcv_ann_wnd>:
{
  402b64:	b470      	push	{r4, r5, r6}
  402b66:	4602      	mov	r2, r0
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
  402b68:	6a85      	ldr	r5, [r0, #40]	; 0x28
  402b6a:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
  402b6c:	6b01      	ldr	r1, [r0, #48]	; 0x30
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
  402b6e:	1963      	adds	r3, r4, r5
  402b70:	1a58      	subs	r0, r3, r1
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
  402b72:	8ed3      	ldrh	r3, [r2, #54]	; 0x36
  402b74:	f240 56b4 	movw	r6, #1460	; 0x5b4
  402b78:	42b3      	cmp	r3, r6
  402b7a:	bf94      	ite	ls
  402b7c:	1ac3      	subls	r3, r0, r3
  402b7e:	1b83      	subhi	r3, r0, r6
  402b80:	2b00      	cmp	r3, #0
  402b82:	db02      	blt.n	402b8a <tcp_update_rcv_ann_wnd+0x26>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
  402b84:	85d4      	strh	r4, [r2, #46]	; 0x2e
}
  402b86:	bc70      	pop	{r4, r5, r6}
  402b88:	4770      	bx	lr
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
  402b8a:	1a6b      	subs	r3, r5, r1
  402b8c:	2b00      	cmp	r3, #0
  402b8e:	dd03      	ble.n	402b98 <tcp_update_rcv_ann_wnd+0x34>
      pcb->rcv_ann_wnd = 0;
  402b90:	2300      	movs	r3, #0
  402b92:	85d3      	strh	r3, [r2, #46]	; 0x2e
    return 0;
  402b94:	4618      	mov	r0, r3
  402b96:	e7f6      	b.n	402b86 <tcp_update_rcv_ann_wnd+0x22>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
  402b98:	1b49      	subs	r1, r1, r5
      pcb->rcv_ann_wnd = (u16_t)new_rcv_ann_wnd;
  402b9a:	85d1      	strh	r1, [r2, #46]	; 0x2e
    return 0;
  402b9c:	2000      	movs	r0, #0
  402b9e:	e7f2      	b.n	402b86 <tcp_update_rcv_ann_wnd+0x22>

00402ba0 <tcp_recved>:
{
  402ba0:	b510      	push	{r4, lr}
  402ba2:	4604      	mov	r4, r0
  pcb->rcv_wnd += len;
  402ba4:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
  402ba6:	4419      	add	r1, r3
  402ba8:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND) {
  402baa:	f640 3368 	movw	r3, #2920	; 0xb68
  402bae:	4299      	cmp	r1, r3
  402bb0:	d808      	bhi.n	402bc4 <tcp_recved+0x24>
  pcb->rcv_wnd += len;
  402bb2:	8581      	strh	r1, [r0, #44]	; 0x2c
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
  402bb4:	4620      	mov	r0, r4
  402bb6:	4b09      	ldr	r3, [pc, #36]	; (402bdc <tcp_recved+0x3c>)
  402bb8:	4798      	blx	r3
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
  402bba:	f240 23d9 	movw	r3, #729	; 0x2d9
  402bbe:	4298      	cmp	r0, r3
  402bc0:	dc04      	bgt.n	402bcc <tcp_recved+0x2c>
  402bc2:	bd10      	pop	{r4, pc}
    pcb->rcv_wnd = TCP_WND;
  402bc4:	f640 3368 	movw	r3, #2920	; 0xb68
  402bc8:	8583      	strh	r3, [r0, #44]	; 0x2c
  402bca:	e7f3      	b.n	402bb4 <tcp_recved+0x14>
    tcp_ack_now(pcb);
  402bcc:	7fa3      	ldrb	r3, [r4, #30]
  402bce:	f043 0302 	orr.w	r3, r3, #2
  402bd2:	77a3      	strb	r3, [r4, #30]
    tcp_output(pcb);
  402bd4:	4620      	mov	r0, r4
  402bd6:	4b02      	ldr	r3, [pc, #8]	; (402be0 <tcp_recved+0x40>)
  402bd8:	4798      	blx	r3
}
  402bda:	e7f2      	b.n	402bc2 <tcp_recved+0x22>
  402bdc:	00402b65 	.word	0x00402b65
  402be0:	0040502d 	.word	0x0040502d

00402be4 <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
  402be4:	b150      	cbz	r0, 402bfc <tcp_seg_free+0x18>
{
  402be6:	b510      	push	{r4, lr}
  402be8:	4604      	mov	r4, r0
    if (seg->p != NULL) {
  402bea:	6840      	ldr	r0, [r0, #4]
  402bec:	b108      	cbz	r0, 402bf2 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
  402bee:	4b04      	ldr	r3, [pc, #16]	; (402c00 <tcp_seg_free+0x1c>)
  402bf0:	4798      	blx	r3
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
  402bf2:	4621      	mov	r1, r4
  402bf4:	2003      	movs	r0, #3
  402bf6:	4b03      	ldr	r3, [pc, #12]	; (402c04 <tcp_seg_free+0x20>)
  402bf8:	4798      	blx	r3
  402bfa:	bd10      	pop	{r4, pc}
  402bfc:	4770      	bx	lr
  402bfe:	bf00      	nop
  402c00:	0040262d 	.word	0x0040262d
  402c04:	00402475 	.word	0x00402475

00402c08 <tcp_segs_free>:
  while (seg != NULL) {
  402c08:	b148      	cbz	r0, 402c1e <tcp_segs_free+0x16>
{
  402c0a:	b538      	push	{r3, r4, r5, lr}
  402c0c:	4603      	mov	r3, r0
    tcp_seg_free(seg);
  402c0e:	4d04      	ldr	r5, [pc, #16]	; (402c20 <tcp_segs_free+0x18>)
    struct tcp_seg *next = seg->next;
  402c10:	681c      	ldr	r4, [r3, #0]
    tcp_seg_free(seg);
  402c12:	4618      	mov	r0, r3
  402c14:	47a8      	blx	r5
    seg = next;
  402c16:	4623      	mov	r3, r4
  while (seg != NULL) {
  402c18:	2c00      	cmp	r4, #0
  402c1a:	d1f9      	bne.n	402c10 <tcp_segs_free+0x8>
  402c1c:	bd38      	pop	{r3, r4, r5, pc}
  402c1e:	4770      	bx	lr
  402c20:	00402be5 	.word	0x00402be5

00402c24 <tcp_setprio>:
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  pcb->prio = prio;
  402c24:	7641      	strb	r1, [r0, #25]
  402c26:	4770      	bx	lr

00402c28 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */ 
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
  402c28:	b538      	push	{r3, r4, r5, lr}
  402c2a:	4605      	mov	r5, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
  402c2c:	2003      	movs	r0, #3
  402c2e:	4b08      	ldr	r3, [pc, #32]	; (402c50 <tcp_seg_copy+0x28>)
  402c30:	4798      	blx	r3
  if (cseg == NULL) {
  402c32:	4604      	mov	r4, r0
  402c34:	b150      	cbz	r0, 402c4c <tcp_seg_copy+0x24>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg)); 
  402c36:	6828      	ldr	r0, [r5, #0]
  402c38:	6869      	ldr	r1, [r5, #4]
  402c3a:	68aa      	ldr	r2, [r5, #8]
  402c3c:	68eb      	ldr	r3, [r5, #12]
  402c3e:	6020      	str	r0, [r4, #0]
  402c40:	6061      	str	r1, [r4, #4]
  402c42:	60a2      	str	r2, [r4, #8]
  402c44:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
  402c46:	6860      	ldr	r0, [r4, #4]
  402c48:	4b02      	ldr	r3, [pc, #8]	; (402c54 <tcp_seg_copy+0x2c>)
  402c4a:	4798      	blx	r3
  return cseg;
}
  402c4c:	4620      	mov	r0, r4
  402c4e:	bd38      	pop	{r3, r4, r5, pc}
  402c50:	00402455 	.word	0x00402455
  402c54:	00402843 	.word	0x00402843

00402c58 <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  pcb->callback_arg = arg;
  402c58:	6101      	str	r1, [r0, #16]
  402c5a:	4770      	bx	lr

00402c5c <tcp_recv>:
 */ 
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
  pcb->recv = recv;
  402c5c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  402c60:	4770      	bx	lr

00402c62 <tcp_sent>:
 */ 
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
  pcb->sent = sent;
  402c62:	67c1      	str	r1, [r0, #124]	; 0x7c
  402c64:	4770      	bx	lr

00402c66 <tcp_err>:
 */ 
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
  pcb->errf = err;
  402c66:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
  402c6a:	4770      	bx	lr

00402c6c <tcp_accept>:
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  pcb->accept = accept;
  402c6c:	6141      	str	r1, [r0, #20]
  402c6e:	4770      	bx	lr

00402c70 <tcp_poll>:
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
#if LWIP_CALLBACK_API
  pcb->poll = poll;
  402c70:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
#else /* LWIP_CALLBACK_API */  
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */  
  pcb->pollinterval = interval;
  402c74:	f880 2020 	strb.w	r2, [r0, #32]
  402c78:	4770      	bx	lr
	...

00402c7c <tcp_pcb_purge>:
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  if (pcb->state != CLOSED &&
  402c7c:	7e03      	ldrb	r3, [r0, #24]
     pcb->state != TIME_WAIT &&
  402c7e:	2b0a      	cmp	r3, #10
  402c80:	d01a      	beq.n	402cb8 <tcp_pcb_purge+0x3c>
  402c82:	2b01      	cmp	r3, #1
  402c84:	d918      	bls.n	402cb8 <tcp_pcb_purge+0x3c>
{
  402c86:	b570      	push	{r4, r5, r6, lr}
  402c88:	4604      	mov	r4, r0
      }
    }
#endif /* TCP_LISTEN_BACKLOG */


    if (pcb->refused_data != NULL) {
  402c8a:	6f80      	ldr	r0, [r0, #120]	; 0x78
  402c8c:	b118      	cbz	r0, 402c96 <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
  402c8e:	4b0b      	ldr	r3, [pc, #44]	; (402cbc <tcp_pcb_purge+0x40>)
  402c90:	4798      	blx	r3
      pcb->refused_data = NULL;
  402c92:	2300      	movs	r3, #0
  402c94:	67a3      	str	r3, [r4, #120]	; 0x78
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
  402c96:	6f60      	ldr	r0, [r4, #116]	; 0x74
  402c98:	4e09      	ldr	r6, [pc, #36]	; (402cc0 <tcp_pcb_purge+0x44>)
  402c9a:	47b0      	blx	r6
    pcb->ooseq = NULL;
  402c9c:	2500      	movs	r5, #0
  402c9e:	6765      	str	r5, [r4, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
  402ca0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  402ca4:	86a3      	strh	r3, [r4, #52]	; 0x34

    tcp_segs_free(pcb->unsent);
  402ca6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  402ca8:	47b0      	blx	r6
    tcp_segs_free(pcb->unacked);
  402caa:	6f20      	ldr	r0, [r4, #112]	; 0x70
  402cac:	47b0      	blx	r6
    pcb->unacked = pcb->unsent = NULL;
  402cae:	66e5      	str	r5, [r4, #108]	; 0x6c
  402cb0:	6725      	str	r5, [r4, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
  402cb2:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  402cb6:	bd70      	pop	{r4, r5, r6, pc}
  402cb8:	4770      	bx	lr
  402cba:	bf00      	nop
  402cbc:	0040262d 	.word	0x0040262d
  402cc0:	00402c09 	.word	0x00402c09

00402cc4 <tcp_slowtmr>:
{
  402cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402cc8:	b083      	sub	sp, #12
  ++tcp_ticks;
  402cca:	4ab6      	ldr	r2, [pc, #728]	; (402fa4 <tcp_slowtmr+0x2e0>)
  402ccc:	6813      	ldr	r3, [r2, #0]
  402cce:	3301      	adds	r3, #1
  402cd0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
  402cd2:	4ab5      	ldr	r2, [pc, #724]	; (402fa8 <tcp_slowtmr+0x2e4>)
  402cd4:	7813      	ldrb	r3, [r2, #0]
  402cd6:	3301      	adds	r3, #1
  402cd8:	7013      	strb	r3, [r2, #0]
    if (pcb->last_timer == tcp_timer_ctr) {
  402cda:	4615      	mov	r5, r2
        tcp_active_pcbs_changed = 0;
  402cdc:	4fb3      	ldr	r7, [pc, #716]	; (402fac <tcp_slowtmr+0x2e8>)
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
  402cde:	f8df b300 	ldr.w	fp, [pc, #768]	; 402fe0 <tcp_slowtmr+0x31c>
  pcb = tcp_active_pcbs;
  402ce2:	4bb3      	ldr	r3, [pc, #716]	; (402fb0 <tcp_slowtmr+0x2ec>)
  402ce4:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
  402ce6:	2c00      	cmp	r4, #0
  402ce8:	f000 817e 	beq.w	402fe8 <tcp_slowtmr+0x324>
  402cec:	2600      	movs	r6, #0
  402cee:	e003      	b.n	402cf8 <tcp_slowtmr+0x34>
      pcb = pcb->next;
  402cf0:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
  402cf2:	2c00      	cmp	r4, #0
  402cf4:	f000 8178 	beq.w	402fe8 <tcp_slowtmr+0x324>
    if (pcb->last_timer == tcp_timer_ctr) {
  402cf8:	782b      	ldrb	r3, [r5, #0]
  402cfa:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
  402cfe:	429a      	cmp	r2, r3
  402d00:	d0f6      	beq.n	402cf0 <tcp_slowtmr+0x2c>
    pcb->last_timer = tcp_timer_ctr;
  402d02:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
  402d06:	7e22      	ldrb	r2, [r4, #24]
  402d08:	2a02      	cmp	r2, #2
  402d0a:	d024      	beq.n	402d56 <tcp_slowtmr+0x92>
    else if (pcb->nrtx == TCP_MAXRTX) {
  402d0c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
  402d10:	2b0c      	cmp	r3, #12
  402d12:	d061      	beq.n	402dd8 <tcp_slowtmr+0x114>
      if (pcb->persist_backoff > 0) {
  402d14:	f894 8095 	ldrb.w	r8, [r4, #149]	; 0x95
  402d18:	f1b8 0f00 	cmp.w	r8, #0
  402d1c:	d027      	beq.n	402d6e <tcp_slowtmr+0xaa>
        pcb->persist_cnt++;
  402d1e:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
  402d22:	3301      	adds	r3, #1
  402d24:	b2db      	uxtb	r3, r3
  402d26:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= tcp_persist_backoff[pcb->persist_backoff-1]) {
  402d2a:	4aa2      	ldr	r2, [pc, #648]	; (402fb4 <tcp_slowtmr+0x2f0>)
  402d2c:	4442      	add	r2, r8
  402d2e:	f812 2c01 	ldrb.w	r2, [r2, #-1]
  402d32:	429a      	cmp	r2, r3
  402d34:	d871      	bhi.n	402e1a <tcp_slowtmr+0x156>
          pcb->persist_cnt = 0;
  402d36:	2300      	movs	r3, #0
  402d38:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
  402d3c:	f1b8 0f06 	cmp.w	r8, #6
  402d40:	d803      	bhi.n	402d4a <tcp_slowtmr+0x86>
            pcb->persist_backoff++;
  402d42:	f108 0801 	add.w	r8, r8, #1
  402d46:	f884 8095 	strb.w	r8, [r4, #149]	; 0x95
          tcp_zero_window_probe(pcb);
  402d4a:	4620      	mov	r0, r4
  402d4c:	4b9a      	ldr	r3, [pc, #616]	; (402fb8 <tcp_slowtmr+0x2f4>)
  402d4e:	4798      	blx	r3
    pcb_remove = 0;
  402d50:	f04f 0800 	mov.w	r8, #0
  402d54:	e042      	b.n	402ddc <tcp_slowtmr+0x118>
    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
  402d56:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
  402d5a:	2b06      	cmp	r3, #6
  402d5c:	f000 808d 	beq.w	402e7a <tcp_slowtmr+0x1b6>
    else if (pcb->nrtx == TCP_MAXRTX) {
  402d60:	2b0c      	cmp	r3, #12
  402d62:	d1d7      	bne.n	402d14 <tcp_slowtmr+0x50>
    pcb_reset = 0;
  402d64:	f04f 0900 	mov.w	r9, #0
    else if (pcb->nrtx == TCP_MAXRTX) {
  402d68:	f04f 0801 	mov.w	r8, #1
  402d6c:	e08c      	b.n	402e88 <tcp_slowtmr+0x1c4>
        if(pcb->rtime >= 0) {
  402d6e:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
  402d72:	2900      	cmp	r1, #0
  402d74:	db01      	blt.n	402d7a <tcp_slowtmr+0xb6>
          ++pcb->rtime;
  402d76:	3101      	adds	r1, #1
  402d78:	86a1      	strh	r1, [r4, #52]	; 0x34
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
  402d7a:	6f21      	ldr	r1, [r4, #112]	; 0x70
  402d7c:	b371      	cbz	r1, 402ddc <tcp_slowtmr+0x118>
  402d7e:	f9b4 0034 	ldrsh.w	r0, [r4, #52]	; 0x34
  402d82:	f9b4 1044 	ldrsh.w	r1, [r4, #68]	; 0x44
  402d86:	4288      	cmp	r0, r1
  402d88:	db28      	blt.n	402ddc <tcp_slowtmr+0x118>
          if (pcb->state != SYN_SENT) {
  402d8a:	2a02      	cmp	r2, #2
  402d8c:	d00b      	beq.n	402da6 <tcp_slowtmr+0xe2>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[pcb->nrtx];
  402d8e:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
  402d92:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
  402d96:	eb02 02e1 	add.w	r2, r2, r1, asr #3
  402d9a:	4988      	ldr	r1, [pc, #544]	; (402fbc <tcp_slowtmr+0x2f8>)
  402d9c:	5ccb      	ldrb	r3, [r1, r3]
  402d9e:	fa02 f303 	lsl.w	r3, r2, r3
  402da2:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
          pcb->rtime = 0;
  402da6:	2300      	movs	r3, #0
  402da8:	86a3      	strh	r3, [r4, #52]	; 0x34
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
  402daa:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
  402dae:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
          pcb->ssthresh = eff_wnd >> 1;
  402db2:	4293      	cmp	r3, r2
  402db4:	bf28      	it	cs
  402db6:	4613      	movcs	r3, r2
  402db8:	085b      	lsrs	r3, r3, #1
  402dba:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
          if (pcb->ssthresh < (pcb->mss << 1)) {
  402dbe:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
  402dc0:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
  402dc4:	da02      	bge.n	402dcc <tcp_slowtmr+0x108>
            pcb->ssthresh = (pcb->mss << 1);
  402dc6:	0053      	lsls	r3, r2, #1
  402dc8:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
          pcb->cwnd = pcb->mss;
  402dcc:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
          tcp_rexmit_rto(pcb);
  402dd0:	4620      	mov	r0, r4
  402dd2:	4b7b      	ldr	r3, [pc, #492]	; (402fc0 <tcp_slowtmr+0x2fc>)
  402dd4:	4798      	blx	r3
  402dd6:	e001      	b.n	402ddc <tcp_slowtmr+0x118>
      ++pcb_remove;
  402dd8:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
  402ddc:	7e23      	ldrb	r3, [r4, #24]
  402dde:	2b06      	cmp	r3, #6
  402de0:	d01e      	beq.n	402e20 <tcp_slowtmr+0x15c>
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
  402de2:	7a22      	ldrb	r2, [r4, #8]
  402de4:	f012 0f08 	tst.w	r2, #8
  402de8:	d04c      	beq.n	402e84 <tcp_slowtmr+0x1c0>
  402dea:	2b04      	cmp	r3, #4
  402dec:	d001      	beq.n	402df2 <tcp_slowtmr+0x12e>
  402dee:	2b07      	cmp	r3, #7
  402df0:	d17c      	bne.n	402eec <tcp_slowtmr+0x228>
      if((u32_t)(tcp_ticks - pcb->tmr) >
  402df2:	4b6c      	ldr	r3, [pc, #432]	; (402fa4 <tcp_slowtmr+0x2e0>)
  402df4:	681a      	ldr	r2, [r3, #0]
  402df6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402df8:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
  402dfa:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
  402dfe:	4b71      	ldr	r3, [pc, #452]	; (402fc4 <tcp_slowtmr+0x300>)
  402e00:	440b      	add	r3, r1
  402e02:	fbab 0303 	umull	r0, r3, fp, r3
      if((u32_t)(tcp_ticks - pcb->tmr) >
  402e06:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
  402e0a:	d91e      	bls.n	402e4a <tcp_slowtmr+0x186>
        ++pcb_remove;
  402e0c:	f108 0801 	add.w	r8, r8, #1
  402e10:	fa5f f888 	uxtb.w	r8, r8
        ++pcb_reset;
  402e14:	f04f 0901 	mov.w	r9, #1
  402e18:	e036      	b.n	402e88 <tcp_slowtmr+0x1c4>
    pcb_remove = 0;
  402e1a:	f04f 0800 	mov.w	r8, #0
  402e1e:	e7dd      	b.n	402ddc <tcp_slowtmr+0x118>
      if (pcb->flags & TF_RXCLOSED) {
  402e20:	7fa3      	ldrb	r3, [r4, #30]
  402e22:	f013 0f10 	tst.w	r3, #16
  402e26:	d009      	beq.n	402e3c <tcp_slowtmr+0x178>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
  402e28:	4b5e      	ldr	r3, [pc, #376]	; (402fa4 <tcp_slowtmr+0x2e0>)
  402e2a:	681b      	ldr	r3, [r3, #0]
  402e2c:	6a62      	ldr	r2, [r4, #36]	; 0x24
  402e2e:	1a9b      	subs	r3, r3, r2
  402e30:	2b28      	cmp	r3, #40	; 0x28
  402e32:	d903      	bls.n	402e3c <tcp_slowtmr+0x178>
          ++pcb_remove;
  402e34:	f108 0801 	add.w	r8, r8, #1
  402e38:	fa5f f888 	uxtb.w	r8, r8
    if (pcb->ooseq != NULL &&
  402e3c:	6f60      	ldr	r0, [r4, #116]	; 0x74
  402e3e:	2800      	cmp	r0, #0
  402e40:	f000 80f4 	beq.w	40302c <tcp_slowtmr+0x368>
    pcb_reset = 0;
  402e44:	f04f 0900 	mov.w	r9, #0
  402e48:	e020      	b.n	402e8c <tcp_slowtmr+0x1c8>
              (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
  402e4a:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
  402e4e:	485e      	ldr	r0, [pc, #376]	; (402fc8 <tcp_slowtmr+0x304>)
  402e50:	fb00 1303 	mla	r3, r0, r3, r1
              / TCP_SLOW_INTERVAL)
  402e54:	fbab 1303 	umull	r1, r3, fp, r3
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
  402e58:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
  402e5c:	d802      	bhi.n	402e64 <tcp_slowtmr+0x1a0>
    pcb_reset = 0;
  402e5e:	f04f 0900 	mov.w	r9, #0
  402e62:	e011      	b.n	402e88 <tcp_slowtmr+0x1c4>
        tcp_keepalive(pcb);
  402e64:	4620      	mov	r0, r4
  402e66:	4b59      	ldr	r3, [pc, #356]	; (402fcc <tcp_slowtmr+0x308>)
  402e68:	4798      	blx	r3
        pcb->keep_cnt_sent++;
  402e6a:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
  402e6e:	3301      	adds	r3, #1
  402e70:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
  402e74:	f04f 0900 	mov.w	r9, #0
  402e78:	e006      	b.n	402e88 <tcp_slowtmr+0x1c4>
  402e7a:	f04f 0900 	mov.w	r9, #0
  402e7e:	f04f 0801 	mov.w	r8, #1
  402e82:	e001      	b.n	402e88 <tcp_slowtmr+0x1c4>
  402e84:	f04f 0900 	mov.w	r9, #0
    if (pcb->ooseq != NULL &&
  402e88:	6f60      	ldr	r0, [r4, #116]	; 0x74
  402e8a:	b150      	cbz	r0, 402ea2 <tcp_slowtmr+0x1de>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
  402e8c:	4b45      	ldr	r3, [pc, #276]	; (402fa4 <tcp_slowtmr+0x2e0>)
  402e8e:	681a      	ldr	r2, [r3, #0]
  402e90:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402e92:	1ad2      	subs	r2, r2, r3
  402e94:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
  402e98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
  402e9c:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
  402ea0:	d227      	bcs.n	402ef2 <tcp_slowtmr+0x22e>
    if (pcb->state == SYN_RCVD) {
  402ea2:	7e23      	ldrb	r3, [r4, #24]
  402ea4:	2b03      	cmp	r3, #3
  402ea6:	d029      	beq.n	402efc <tcp_slowtmr+0x238>
    if (pcb->state == LAST_ACK) {
  402ea8:	2b09      	cmp	r3, #9
  402eaa:	d032      	beq.n	402f12 <tcp_slowtmr+0x24e>
    if (pcb_remove) {
  402eac:	f1b8 0f00 	cmp.w	r8, #0
  402eb0:	d13a      	bne.n	402f28 <tcp_slowtmr+0x264>
      pcb = pcb->next;
  402eb2:	f8d4 800c 	ldr.w	r8, [r4, #12]
      ++prev->polltmr;
  402eb6:	7fe3      	ldrb	r3, [r4, #31]
  402eb8:	3301      	adds	r3, #1
  402eba:	b2db      	uxtb	r3, r3
  402ebc:	77e3      	strb	r3, [r4, #31]
      if (prev->polltmr >= prev->pollinterval) {
  402ebe:	f894 2020 	ldrb.w	r2, [r4, #32]
  402ec2:	429a      	cmp	r2, r3
  402ec4:	d86a      	bhi.n	402f9c <tcp_slowtmr+0x2d8>
        prev->polltmr = 0;
  402ec6:	2300      	movs	r3, #0
  402ec8:	77e3      	strb	r3, [r4, #31]
        tcp_active_pcbs_changed = 0;
  402eca:	703b      	strb	r3, [r7, #0]
        TCP_EVENT_POLL(prev, err);
  402ecc:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
  402ed0:	2b00      	cmp	r3, #0
  402ed2:	d05b      	beq.n	402f8c <tcp_slowtmr+0x2c8>
  402ed4:	4621      	mov	r1, r4
  402ed6:	6920      	ldr	r0, [r4, #16]
  402ed8:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
  402eda:	783b      	ldrb	r3, [r7, #0]
  402edc:	2b00      	cmp	r3, #0
  402ede:	f47f af00 	bne.w	402ce2 <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
  402ee2:	2800      	cmp	r0, #0
  402ee4:	d052      	beq.n	402f8c <tcp_slowtmr+0x2c8>
  402ee6:	4626      	mov	r6, r4
      pcb = pcb->next;
  402ee8:	4644      	mov	r4, r8
  402eea:	e702      	b.n	402cf2 <tcp_slowtmr+0x2e>
    pcb_reset = 0;
  402eec:	f04f 0900 	mov.w	r9, #0
  402ef0:	e7ca      	b.n	402e88 <tcp_slowtmr+0x1c4>
      tcp_segs_free(pcb->ooseq);
  402ef2:	4b37      	ldr	r3, [pc, #220]	; (402fd0 <tcp_slowtmr+0x30c>)
  402ef4:	4798      	blx	r3
      pcb->ooseq = NULL;
  402ef6:	2300      	movs	r3, #0
  402ef8:	6763      	str	r3, [r4, #116]	; 0x74
  402efa:	e7d2      	b.n	402ea2 <tcp_slowtmr+0x1de>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  402efc:	4b29      	ldr	r3, [pc, #164]	; (402fa4 <tcp_slowtmr+0x2e0>)
  402efe:	681b      	ldr	r3, [r3, #0]
  402f00:	6a62      	ldr	r2, [r4, #36]	; 0x24
  402f02:	1a9b      	subs	r3, r3, r2
  402f04:	2b28      	cmp	r3, #40	; 0x28
  402f06:	d9d1      	bls.n	402eac <tcp_slowtmr+0x1e8>
        ++pcb_remove;
  402f08:	f108 0801 	add.w	r8, r8, #1
  402f0c:	fa5f f888 	uxtb.w	r8, r8
  402f10:	e7cc      	b.n	402eac <tcp_slowtmr+0x1e8>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  402f12:	4b24      	ldr	r3, [pc, #144]	; (402fa4 <tcp_slowtmr+0x2e0>)
  402f14:	681b      	ldr	r3, [r3, #0]
  402f16:	6a62      	ldr	r2, [r4, #36]	; 0x24
  402f18:	1a9b      	subs	r3, r3, r2
  402f1a:	2bf0      	cmp	r3, #240	; 0xf0
  402f1c:	d9c6      	bls.n	402eac <tcp_slowtmr+0x1e8>
        ++pcb_remove;
  402f1e:	f108 0801 	add.w	r8, r8, #1
  402f22:	fa5f f888 	uxtb.w	r8, r8
  402f26:	e7c1      	b.n	402eac <tcp_slowtmr+0x1e8>
      tcp_pcb_purge(pcb);
  402f28:	4620      	mov	r0, r4
  402f2a:	4b2a      	ldr	r3, [pc, #168]	; (402fd4 <tcp_slowtmr+0x310>)
  402f2c:	4798      	blx	r3
      if (prev != NULL) {
  402f2e:	b1ee      	cbz	r6, 402f6c <tcp_slowtmr+0x2a8>
        prev->next = pcb->next;
  402f30:	68e3      	ldr	r3, [r4, #12]
  402f32:	60f3      	str	r3, [r6, #12]
      if (pcb_reset) {
  402f34:	f1b9 0f00 	cmp.w	r9, #0
  402f38:	d11c      	bne.n	402f74 <tcp_slowtmr+0x2b0>
      err_fn = pcb->errf;
  402f3a:	f8d4 808c 	ldr.w	r8, [r4, #140]	; 0x8c
      err_arg = pcb->callback_arg;
  402f3e:	f8d4 a010 	ldr.w	sl, [r4, #16]
      pcb = pcb->next;
  402f42:	f8d4 900c 	ldr.w	r9, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
  402f46:	4621      	mov	r1, r4
  402f48:	2001      	movs	r0, #1
  402f4a:	4b23      	ldr	r3, [pc, #140]	; (402fd8 <tcp_slowtmr+0x314>)
  402f4c:	4798      	blx	r3
      tcp_active_pcbs_changed = 0;
  402f4e:	2300      	movs	r3, #0
  402f50:	703b      	strb	r3, [r7, #0]
      TCP_EVENT_ERR(err_fn, err_arg, ERR_ABRT);
  402f52:	f1b8 0f00 	cmp.w	r8, #0
  402f56:	d01f      	beq.n	402f98 <tcp_slowtmr+0x2d4>
  402f58:	f06f 0109 	mvn.w	r1, #9
  402f5c:	4650      	mov	r0, sl
  402f5e:	47c0      	blx	r8
      if (tcp_active_pcbs_changed) {
  402f60:	783b      	ldrb	r3, [r7, #0]
  402f62:	2b00      	cmp	r3, #0
  402f64:	f47f aebd 	bne.w	402ce2 <tcp_slowtmr+0x1e>
      pcb = pcb->next;
  402f68:	464c      	mov	r4, r9
  402f6a:	e6c2      	b.n	402cf2 <tcp_slowtmr+0x2e>
        tcp_active_pcbs = pcb->next;
  402f6c:	68e3      	ldr	r3, [r4, #12]
  402f6e:	4a10      	ldr	r2, [pc, #64]	; (402fb0 <tcp_slowtmr+0x2ec>)
  402f70:	6013      	str	r3, [r2, #0]
  402f72:	e7df      	b.n	402f34 <tcp_slowtmr+0x270>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  402f74:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  402f76:	6d20      	ldr	r0, [r4, #80]	; 0x50
  402f78:	8ba3      	ldrh	r3, [r4, #28]
  402f7a:	9301      	str	r3, [sp, #4]
  402f7c:	8b63      	ldrh	r3, [r4, #26]
  402f7e:	9300      	str	r3, [sp, #0]
  402f80:	1d23      	adds	r3, r4, #4
  402f82:	4622      	mov	r2, r4
  402f84:	f8df 805c 	ldr.w	r8, [pc, #92]	; 402fe4 <tcp_slowtmr+0x320>
  402f88:	47c0      	blx	r8
  402f8a:	e7d6      	b.n	402f3a <tcp_slowtmr+0x276>
          tcp_output(prev);
  402f8c:	4620      	mov	r0, r4
  402f8e:	4b13      	ldr	r3, [pc, #76]	; (402fdc <tcp_slowtmr+0x318>)
  402f90:	4798      	blx	r3
  402f92:	4626      	mov	r6, r4
      pcb = pcb->next;
  402f94:	4644      	mov	r4, r8
  402f96:	e6ac      	b.n	402cf2 <tcp_slowtmr+0x2e>
      pcb = pcb->next;
  402f98:	464c      	mov	r4, r9
  402f9a:	e6aa      	b.n	402cf2 <tcp_slowtmr+0x2e>
  402f9c:	4626      	mov	r6, r4
      pcb = pcb->next;
  402f9e:	4644      	mov	r4, r8
  402fa0:	e6a7      	b.n	402cf2 <tcp_slowtmr+0x2e>
  402fa2:	bf00      	nop
  402fa4:	20404968 	.word	0x20404968
  402fa8:	204025be 	.word	0x204025be
  402fac:	20404960 	.word	0x20404960
  402fb0:	20404964 	.word	0x20404964
  402fb4:	0040d818 	.word	0x0040d818
  402fb8:	00405505 	.word	0x00405505
  402fbc:	0040d7f8 	.word	0x0040d7f8
  402fc0:	004053a9 	.word	0x004053a9
  402fc4:	000a4cb8 	.word	0x000a4cb8
  402fc8:	000124f8 	.word	0x000124f8
  402fcc:	00405499 	.word	0x00405499
  402fd0:	00402c09 	.word	0x00402c09
  402fd4:	00402c7d 	.word	0x00402c7d
  402fd8:	00402475 	.word	0x00402475
  402fdc:	0040502d 	.word	0x0040502d
  402fe0:	10624dd3 	.word	0x10624dd3
  402fe4:	00405305 	.word	0x00405305
  pcb = tcp_tw_pcbs;
  402fe8:	4b13      	ldr	r3, [pc, #76]	; (403038 <tcp_slowtmr+0x374>)
  402fea:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
  402fec:	b30c      	cbz	r4, 403032 <tcp_slowtmr+0x36e>
  402fee:	2500      	movs	r5, #0
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  402ff0:	4e12      	ldr	r6, [pc, #72]	; (40303c <tcp_slowtmr+0x378>)
      tcp_pcb_purge(pcb);
  402ff2:	f8df 8050 	ldr.w	r8, [pc, #80]	; 403044 <tcp_slowtmr+0x380>
      memp_free(MEMP_TCP_PCB, pcb2);
  402ff6:	4f12      	ldr	r7, [pc, #72]	; (403040 <tcp_slowtmr+0x37c>)
  402ff8:	e006      	b.n	403008 <tcp_slowtmr+0x344>
        tcp_tw_pcbs = pcb->next;
  402ffa:	68e2      	ldr	r2, [r4, #12]
  402ffc:	4b0e      	ldr	r3, [pc, #56]	; (403038 <tcp_slowtmr+0x374>)
  402ffe:	601a      	str	r2, [r3, #0]
  403000:	e00d      	b.n	40301e <tcp_slowtmr+0x35a>
      pcb = pcb->next;
  403002:	4625      	mov	r5, r4
  403004:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
  403006:	b1a4      	cbz	r4, 403032 <tcp_slowtmr+0x36e>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  403008:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40300a:	6833      	ldr	r3, [r6, #0]
  40300c:	1a9b      	subs	r3, r3, r2
    if (pcb_remove) {
  40300e:	2bf0      	cmp	r3, #240	; 0xf0
  403010:	d9f7      	bls.n	403002 <tcp_slowtmr+0x33e>
      tcp_pcb_purge(pcb);
  403012:	4620      	mov	r0, r4
  403014:	47c0      	blx	r8
      if (prev != NULL) {
  403016:	2d00      	cmp	r5, #0
  403018:	d0ef      	beq.n	402ffa <tcp_slowtmr+0x336>
        prev->next = pcb->next;
  40301a:	68e3      	ldr	r3, [r4, #12]
  40301c:	60eb      	str	r3, [r5, #12]
      pcb = pcb->next;
  40301e:	f8d4 900c 	ldr.w	r9, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
  403022:	4621      	mov	r1, r4
  403024:	2001      	movs	r0, #1
  403026:	47b8      	blx	r7
      pcb = pcb->next;
  403028:	464c      	mov	r4, r9
  40302a:	e7ec      	b.n	403006 <tcp_slowtmr+0x342>
    pcb_reset = 0;
  40302c:	f04f 0900 	mov.w	r9, #0
  403030:	e73c      	b.n	402eac <tcp_slowtmr+0x1e8>
}
  403032:	b003      	add	sp, #12
  403034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403038:	20404978 	.word	0x20404978
  40303c:	20404968 	.word	0x20404968
  403040:	00402475 	.word	0x00402475
  403044:	00402c7d 	.word	0x00402c7d

00403048 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  403048:	b510      	push	{r4, lr}
  40304a:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
  40304c:	6802      	ldr	r2, [r0, #0]
  40304e:	428a      	cmp	r2, r1
  403050:	d00b      	beq.n	40306a <tcp_pcb_remove+0x22>
  403052:	4b18      	ldr	r3, [pc, #96]	; (4030b4 <tcp_pcb_remove+0x6c>)
  403054:	601a      	str	r2, [r3, #0]
  403056:	b17a      	cbz	r2, 403078 <tcp_pcb_remove+0x30>
  403058:	68d3      	ldr	r3, [r2, #12]
  40305a:	4299      	cmp	r1, r3
  40305c:	d01d      	beq.n	40309a <tcp_pcb_remove+0x52>
  40305e:	b1f3      	cbz	r3, 40309e <tcp_pcb_remove+0x56>
  403060:	68da      	ldr	r2, [r3, #12]
  403062:	4294      	cmp	r4, r2
  403064:	d004      	beq.n	403070 <tcp_pcb_remove+0x28>
  403066:	4613      	mov	r3, r2
  403068:	e7f9      	b.n	40305e <tcp_pcb_remove+0x16>
  40306a:	68d3      	ldr	r3, [r2, #12]
  40306c:	6003      	str	r3, [r0, #0]
  40306e:	e003      	b.n	403078 <tcp_pcb_remove+0x30>
  403070:	4a10      	ldr	r2, [pc, #64]	; (4030b4 <tcp_pcb_remove+0x6c>)
  403072:	6013      	str	r3, [r2, #0]
  403074:	68e2      	ldr	r2, [r4, #12]
  403076:	60da      	str	r2, [r3, #12]
  403078:	2300      	movs	r3, #0
  40307a:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
  40307c:	4620      	mov	r0, r4
  40307e:	4b0e      	ldr	r3, [pc, #56]	; (4030b8 <tcp_pcb_remove+0x70>)
  403080:	4798      	blx	r3
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
  403082:	7e23      	ldrb	r3, [r4, #24]
  403084:	2b0a      	cmp	r3, #10
  403086:	d005      	beq.n	403094 <tcp_pcb_remove+0x4c>
  403088:	2b01      	cmp	r3, #1
  40308a:	d003      	beq.n	403094 <tcp_pcb_remove+0x4c>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
  40308c:	7fa3      	ldrb	r3, [r4, #30]
     pcb->state != LISTEN &&
  40308e:	f013 0f01 	tst.w	r3, #1
  403092:	d108      	bne.n	4030a6 <tcp_pcb_remove+0x5e>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
  403094:	2300      	movs	r3, #0
  403096:	7623      	strb	r3, [r4, #24]
  403098:	bd10      	pop	{r4, pc}
  TCP_RMV(pcblist, pcb);
  40309a:	4613      	mov	r3, r2
  40309c:	e7ea      	b.n	403074 <tcp_pcb_remove+0x2c>
  40309e:	2200      	movs	r2, #0
  4030a0:	4b04      	ldr	r3, [pc, #16]	; (4030b4 <tcp_pcb_remove+0x6c>)
  4030a2:	601a      	str	r2, [r3, #0]
  4030a4:	e7e8      	b.n	403078 <tcp_pcb_remove+0x30>
    pcb->flags |= TF_ACK_NOW;
  4030a6:	f043 0302 	orr.w	r3, r3, #2
  4030aa:	77a3      	strb	r3, [r4, #30]
    tcp_output(pcb);
  4030ac:	4620      	mov	r0, r4
  4030ae:	4b03      	ldr	r3, [pc, #12]	; (4030bc <tcp_pcb_remove+0x74>)
  4030b0:	4798      	blx	r3
  4030b2:	e7ef      	b.n	403094 <tcp_pcb_remove+0x4c>
  4030b4:	20404970 	.word	0x20404970
  4030b8:	00402c7d 	.word	0x00402c7d
  4030bc:	0040502d 	.word	0x0040502d

004030c0 <tcp_close_shutdown>:
{
  4030c0:	b530      	push	{r4, r5, lr}
  4030c2:	b083      	sub	sp, #12
  4030c4:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
  4030c6:	b121      	cbz	r1, 4030d2 <tcp_close_shutdown+0x12>
  4030c8:	7e03      	ldrb	r3, [r0, #24]
  4030ca:	2b04      	cmp	r3, #4
  4030cc:	d00b      	beq.n	4030e6 <tcp_close_shutdown+0x26>
  4030ce:	2b07      	cmp	r3, #7
  4030d0:	d009      	beq.n	4030e6 <tcp_close_shutdown+0x26>
  switch (pcb->state) {
  4030d2:	7e23      	ldrb	r3, [r4, #24]
  4030d4:	2b07      	cmp	r3, #7
  4030d6:	f200 80b0 	bhi.w	40323a <tcp_close_shutdown+0x17a>
  4030da:	e8df f003 	tbb	[pc, r3]
  4030de:	754e      	.short	0x754e
  4030e0:	ae9a8b7f 	.word	0xae9a8b7f
  4030e4:	a3ae      	.short	0xa3ae
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND)) {
  4030e6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  4030e8:	b1e3      	cbz	r3, 403124 <tcp_close_shutdown+0x64>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  4030ea:	8ba3      	ldrh	r3, [r4, #28]
  4030ec:	9301      	str	r3, [sp, #4]
  4030ee:	8b63      	ldrh	r3, [r4, #26]
  4030f0:	9300      	str	r3, [sp, #0]
  4030f2:	1d23      	adds	r3, r4, #4
  4030f4:	4622      	mov	r2, r4
  4030f6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  4030f8:	6d20      	ldr	r0, [r4, #80]	; 0x50
  4030fa:	4d51      	ldr	r5, [pc, #324]	; (403240 <tcp_close_shutdown+0x180>)
  4030fc:	47a8      	blx	r5
      tcp_pcb_purge(pcb);
  4030fe:	4620      	mov	r0, r4
  403100:	4b50      	ldr	r3, [pc, #320]	; (403244 <tcp_close_shutdown+0x184>)
  403102:	4798      	blx	r3
      TCP_RMV_ACTIVE(pcb);
  403104:	4b50      	ldr	r3, [pc, #320]	; (403248 <tcp_close_shutdown+0x188>)
  403106:	681a      	ldr	r2, [r3, #0]
  403108:	4294      	cmp	r4, r2
  40310a:	d011      	beq.n	403130 <tcp_close_shutdown+0x70>
  40310c:	4b4f      	ldr	r3, [pc, #316]	; (40324c <tcp_close_shutdown+0x18c>)
  40310e:	601a      	str	r2, [r3, #0]
  403110:	b1aa      	cbz	r2, 40313e <tcp_close_shutdown+0x7e>
  403112:	68d3      	ldr	r3, [r2, #12]
  403114:	429c      	cmp	r4, r3
  403116:	d020      	beq.n	40315a <tcp_close_shutdown+0x9a>
  403118:	b30b      	cbz	r3, 40315e <tcp_close_shutdown+0x9e>
  40311a:	68da      	ldr	r2, [r3, #12]
  40311c:	4294      	cmp	r4, r2
  40311e:	d00a      	beq.n	403136 <tcp_close_shutdown+0x76>
  403120:	4613      	mov	r3, r2
  403122:	e7f9      	b.n	403118 <tcp_close_shutdown+0x58>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND)) {
  403124:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
  403126:	f640 3368 	movw	r3, #2920	; 0xb68
  40312a:	429a      	cmp	r2, r3
  40312c:	d1dd      	bne.n	4030ea <tcp_close_shutdown+0x2a>
  40312e:	e7d0      	b.n	4030d2 <tcp_close_shutdown+0x12>
      TCP_RMV_ACTIVE(pcb);
  403130:	68d2      	ldr	r2, [r2, #12]
  403132:	601a      	str	r2, [r3, #0]
  403134:	e003      	b.n	40313e <tcp_close_shutdown+0x7e>
  403136:	4a45      	ldr	r2, [pc, #276]	; (40324c <tcp_close_shutdown+0x18c>)
  403138:	6013      	str	r3, [r2, #0]
  40313a:	68e2      	ldr	r2, [r4, #12]
  40313c:	60da      	str	r2, [r3, #12]
  40313e:	2300      	movs	r3, #0
  403140:	60e3      	str	r3, [r4, #12]
  403142:	2201      	movs	r2, #1
  403144:	4b42      	ldr	r3, [pc, #264]	; (403250 <tcp_close_shutdown+0x190>)
  403146:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
  403148:	7e23      	ldrb	r3, [r4, #24]
  40314a:	2b04      	cmp	r3, #4
  40314c:	d00b      	beq.n	403166 <tcp_close_shutdown+0xa6>
        memp_free(MEMP_TCP_PCB, pcb);
  40314e:	4621      	mov	r1, r4
  403150:	2001      	movs	r0, #1
  403152:	4b40      	ldr	r3, [pc, #256]	; (403254 <tcp_close_shutdown+0x194>)
  403154:	4798      	blx	r3
      return ERR_OK;
  403156:	2300      	movs	r3, #0
  403158:	e058      	b.n	40320c <tcp_close_shutdown+0x14c>
      TCP_RMV_ACTIVE(pcb);
  40315a:	4613      	mov	r3, r2
  40315c:	e7ed      	b.n	40313a <tcp_close_shutdown+0x7a>
  40315e:	2200      	movs	r2, #0
  403160:	4b3a      	ldr	r3, [pc, #232]	; (40324c <tcp_close_shutdown+0x18c>)
  403162:	601a      	str	r2, [r3, #0]
  403164:	e7eb      	b.n	40313e <tcp_close_shutdown+0x7e>
        pcb->state = TIME_WAIT;
  403166:	230a      	movs	r3, #10
  403168:	7623      	strb	r3, [r4, #24]
        TCP_REG(&tcp_tw_pcbs, pcb);
  40316a:	4b3b      	ldr	r3, [pc, #236]	; (403258 <tcp_close_shutdown+0x198>)
  40316c:	681a      	ldr	r2, [r3, #0]
  40316e:	60e2      	str	r2, [r4, #12]
  403170:	601c      	str	r4, [r3, #0]
  403172:	4b3a      	ldr	r3, [pc, #232]	; (40325c <tcp_close_shutdown+0x19c>)
  403174:	4798      	blx	r3
      return ERR_OK;
  403176:	2300      	movs	r3, #0
  403178:	e048      	b.n	40320c <tcp_close_shutdown+0x14c>
    if (pcb->local_port != 0) {
  40317a:	8b63      	ldrh	r3, [r4, #26]
  40317c:	b1c3      	cbz	r3, 4031b0 <tcp_close_shutdown+0xf0>
      TCP_RMV(&tcp_bound_pcbs, pcb);
  40317e:	4b38      	ldr	r3, [pc, #224]	; (403260 <tcp_close_shutdown+0x1a0>)
  403180:	681a      	ldr	r2, [r3, #0]
  403182:	4294      	cmp	r4, r2
  403184:	d00b      	beq.n	40319e <tcp_close_shutdown+0xde>
  403186:	4b31      	ldr	r3, [pc, #196]	; (40324c <tcp_close_shutdown+0x18c>)
  403188:	601a      	str	r2, [r3, #0]
  40318a:	b17a      	cbz	r2, 4031ac <tcp_close_shutdown+0xec>
  40318c:	68d3      	ldr	r3, [r2, #12]
  40318e:	429c      	cmp	r4, r3
  403190:	d014      	beq.n	4031bc <tcp_close_shutdown+0xfc>
  403192:	b1ab      	cbz	r3, 4031c0 <tcp_close_shutdown+0x100>
  403194:	68da      	ldr	r2, [r3, #12]
  403196:	4294      	cmp	r4, r2
  403198:	d004      	beq.n	4031a4 <tcp_close_shutdown+0xe4>
  40319a:	4613      	mov	r3, r2
  40319c:	e7f9      	b.n	403192 <tcp_close_shutdown+0xd2>
  40319e:	68d2      	ldr	r2, [r2, #12]
  4031a0:	601a      	str	r2, [r3, #0]
  4031a2:	e003      	b.n	4031ac <tcp_close_shutdown+0xec>
  4031a4:	4a29      	ldr	r2, [pc, #164]	; (40324c <tcp_close_shutdown+0x18c>)
  4031a6:	6013      	str	r3, [r2, #0]
  4031a8:	68e2      	ldr	r2, [r4, #12]
  4031aa:	60da      	str	r2, [r3, #12]
  4031ac:	2300      	movs	r3, #0
  4031ae:	60e3      	str	r3, [r4, #12]
    memp_free(MEMP_TCP_PCB, pcb);
  4031b0:	4621      	mov	r1, r4
  4031b2:	2001      	movs	r0, #1
  4031b4:	4b27      	ldr	r3, [pc, #156]	; (403254 <tcp_close_shutdown+0x194>)
  4031b6:	4798      	blx	r3
    err = ERR_OK;
  4031b8:	2300      	movs	r3, #0
    break;
  4031ba:	e027      	b.n	40320c <tcp_close_shutdown+0x14c>
      TCP_RMV(&tcp_bound_pcbs, pcb);
  4031bc:	4613      	mov	r3, r2
  4031be:	e7f3      	b.n	4031a8 <tcp_close_shutdown+0xe8>
  4031c0:	2200      	movs	r2, #0
  4031c2:	4b22      	ldr	r3, [pc, #136]	; (40324c <tcp_close_shutdown+0x18c>)
  4031c4:	601a      	str	r2, [r3, #0]
  4031c6:	e7f1      	b.n	4031ac <tcp_close_shutdown+0xec>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
  4031c8:	4621      	mov	r1, r4
  4031ca:	4826      	ldr	r0, [pc, #152]	; (403264 <tcp_close_shutdown+0x1a4>)
  4031cc:	4b26      	ldr	r3, [pc, #152]	; (403268 <tcp_close_shutdown+0x1a8>)
  4031ce:	4798      	blx	r3
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
  4031d0:	4621      	mov	r1, r4
  4031d2:	2002      	movs	r0, #2
  4031d4:	4b1f      	ldr	r3, [pc, #124]	; (403254 <tcp_close_shutdown+0x194>)
  4031d6:	4798      	blx	r3
    err = ERR_OK;
  4031d8:	2300      	movs	r3, #0
    break;
  4031da:	e017      	b.n	40320c <tcp_close_shutdown+0x14c>
    TCP_PCB_REMOVE_ACTIVE(pcb);
  4031dc:	4621      	mov	r1, r4
  4031de:	481a      	ldr	r0, [pc, #104]	; (403248 <tcp_close_shutdown+0x188>)
  4031e0:	4b21      	ldr	r3, [pc, #132]	; (403268 <tcp_close_shutdown+0x1a8>)
  4031e2:	4798      	blx	r3
  4031e4:	2001      	movs	r0, #1
  4031e6:	4b1a      	ldr	r3, [pc, #104]	; (403250 <tcp_close_shutdown+0x190>)
  4031e8:	7018      	strb	r0, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
  4031ea:	4621      	mov	r1, r4
  4031ec:	4b19      	ldr	r3, [pc, #100]	; (403254 <tcp_close_shutdown+0x194>)
  4031ee:	4798      	blx	r3
    err = ERR_OK;
  4031f0:	2300      	movs	r3, #0
    break;
  4031f2:	e00b      	b.n	40320c <tcp_close_shutdown+0x14c>
    err = tcp_send_fin(pcb);
  4031f4:	4620      	mov	r0, r4
  4031f6:	4b1d      	ldr	r3, [pc, #116]	; (40326c <tcp_close_shutdown+0x1ac>)
  4031f8:	4798      	blx	r3
    if (err == ERR_OK) {
  4031fa:	4603      	mov	r3, r0
  4031fc:	b930      	cbnz	r0, 40320c <tcp_close_shutdown+0x14c>
      pcb->state = FIN_WAIT_1;
  4031fe:	2305      	movs	r3, #5
  403200:	7623      	strb	r3, [r4, #24]
  if (pcb != NULL && err == ERR_OK) {
  403202:	b1c4      	cbz	r4, 403236 <tcp_close_shutdown+0x176>
    tcp_output(pcb);
  403204:	4620      	mov	r0, r4
  403206:	4b1a      	ldr	r3, [pc, #104]	; (403270 <tcp_close_shutdown+0x1b0>)
  403208:	4798      	blx	r3
  40320a:	2300      	movs	r3, #0
}
  40320c:	4618      	mov	r0, r3
  40320e:	b003      	add	sp, #12
  403210:	bd30      	pop	{r4, r5, pc}
    err = tcp_send_fin(pcb);
  403212:	4620      	mov	r0, r4
  403214:	4b15      	ldr	r3, [pc, #84]	; (40326c <tcp_close_shutdown+0x1ac>)
  403216:	4798      	blx	r3
    if (err == ERR_OK) {
  403218:	4603      	mov	r3, r0
  40321a:	2800      	cmp	r0, #0
  40321c:	d1f6      	bne.n	40320c <tcp_close_shutdown+0x14c>
      pcb->state = FIN_WAIT_1;
  40321e:	2305      	movs	r3, #5
  403220:	7623      	strb	r3, [r4, #24]
  403222:	e7ee      	b.n	403202 <tcp_close_shutdown+0x142>
    err = tcp_send_fin(pcb);
  403224:	4620      	mov	r0, r4
  403226:	4b11      	ldr	r3, [pc, #68]	; (40326c <tcp_close_shutdown+0x1ac>)
  403228:	4798      	blx	r3
    if (err == ERR_OK) {
  40322a:	4603      	mov	r3, r0
  40322c:	2800      	cmp	r0, #0
  40322e:	d1ed      	bne.n	40320c <tcp_close_shutdown+0x14c>
      pcb->state = LAST_ACK;
  403230:	2309      	movs	r3, #9
  403232:	7623      	strb	r3, [r4, #24]
  403234:	e7e5      	b.n	403202 <tcp_close_shutdown+0x142>
  403236:	2300      	movs	r3, #0
  403238:	e7e8      	b.n	40320c <tcp_close_shutdown+0x14c>
    err = ERR_OK;
  40323a:	2300      	movs	r3, #0
  40323c:	e7e6      	b.n	40320c <tcp_close_shutdown+0x14c>
  40323e:	bf00      	nop
  403240:	00405305 	.word	0x00405305
  403244:	00402c7d 	.word	0x00402c7d
  403248:	20404964 	.word	0x20404964
  40324c:	20404970 	.word	0x20404970
  403250:	20404960 	.word	0x20404960
  403254:	00402475 	.word	0x00402475
  403258:	20404978 	.word	0x20404978
  40325c:	00402061 	.word	0x00402061
  403260:	20404974 	.word	0x20404974
  403264:	2040496c 	.word	0x2040496c
  403268:	00403049 	.word	0x00403049
  40326c:	00404f65 	.word	0x00404f65
  403270:	0040502d 	.word	0x0040502d

00403274 <tcp_close>:
{
  403274:	b508      	push	{r3, lr}
  if (pcb->state != LISTEN) {
  403276:	7e03      	ldrb	r3, [r0, #24]
  403278:	2b01      	cmp	r3, #1
  40327a:	d003      	beq.n	403284 <tcp_close+0x10>
    pcb->flags |= TF_RXCLOSED;
  40327c:	7f83      	ldrb	r3, [r0, #30]
  40327e:	f043 0310 	orr.w	r3, r3, #16
  403282:	7783      	strb	r3, [r0, #30]
  return tcp_close_shutdown(pcb, 1);
  403284:	2101      	movs	r1, #1
  403286:	4b01      	ldr	r3, [pc, #4]	; (40328c <tcp_close+0x18>)
  403288:	4798      	blx	r3
}
  40328a:	bd08      	pop	{r3, pc}
  40328c:	004030c1 	.word	0x004030c1

00403290 <tcp_recv_null>:
{
  403290:	b510      	push	{r4, lr}
  403292:	4608      	mov	r0, r1
  if (p != NULL) {
  403294:	b142      	cbz	r2, 4032a8 <tcp_recv_null+0x18>
  403296:	4614      	mov	r4, r2
    tcp_recved(pcb, p->tot_len);
  403298:	8911      	ldrh	r1, [r2, #8]
  40329a:	4b06      	ldr	r3, [pc, #24]	; (4032b4 <tcp_recv_null+0x24>)
  40329c:	4798      	blx	r3
    pbuf_free(p);
  40329e:	4620      	mov	r0, r4
  4032a0:	4b05      	ldr	r3, [pc, #20]	; (4032b8 <tcp_recv_null+0x28>)
  4032a2:	4798      	blx	r3
  return ERR_OK;
  4032a4:	2000      	movs	r0, #0
  4032a6:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
  4032a8:	b10b      	cbz	r3, 4032ae <tcp_recv_null+0x1e>
  return ERR_OK;
  4032aa:	2000      	movs	r0, #0
}
  4032ac:	bd10      	pop	{r4, pc}
    return tcp_close(pcb);
  4032ae:	4b03      	ldr	r3, [pc, #12]	; (4032bc <tcp_recv_null+0x2c>)
  4032b0:	4798      	blx	r3
  4032b2:	bd10      	pop	{r4, pc}
  4032b4:	00402ba1 	.word	0x00402ba1
  4032b8:	0040262d 	.word	0x0040262d
  4032bc:	00403275 	.word	0x00403275

004032c0 <tcp_process_refused_data>:
{
  4032c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4032c2:	4604      	mov	r4, r0
  u8_t refused_flags = pcb->refused_data->flags;
  4032c4:	6f86      	ldr	r6, [r0, #120]	; 0x78
  4032c6:	7b77      	ldrb	r7, [r6, #13]
  pcb->refused_data = NULL;
  4032c8:	2300      	movs	r3, #0
  4032ca:	6783      	str	r3, [r0, #120]	; 0x78
  TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
  4032cc:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
  4032d0:	b1e5      	cbz	r5, 40330c <tcp_process_refused_data+0x4c>
  4032d2:	4632      	mov	r2, r6
  4032d4:	4601      	mov	r1, r0
  4032d6:	6900      	ldr	r0, [r0, #16]
  4032d8:	47a8      	blx	r5
  4032da:	4605      	mov	r5, r0
  if (err == ERR_OK) {
  4032dc:	b9f5      	cbnz	r5, 40331c <tcp_process_refused_data+0x5c>
    if (refused_flags & PBUF_FLAG_TCP_FIN) {
  4032de:	f017 0f20 	tst.w	r7, #32
  4032e2:	d020      	beq.n	403326 <tcp_process_refused_data+0x66>
      if (pcb->rcv_wnd != TCP_WND) {
  4032e4:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  4032e6:	f640 3268 	movw	r2, #2920	; 0xb68
  4032ea:	4293      	cmp	r3, r2
  4032ec:	d001      	beq.n	4032f2 <tcp_process_refused_data+0x32>
        pcb->rcv_wnd++;
  4032ee:	3301      	adds	r3, #1
  4032f0:	85a3      	strh	r3, [r4, #44]	; 0x2c
      TCP_EVENT_CLOSED(pcb, err);
  4032f2:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  4032f6:	b1b6      	cbz	r6, 403326 <tcp_process_refused_data+0x66>
  4032f8:	2300      	movs	r3, #0
  4032fa:	461a      	mov	r2, r3
  4032fc:	4621      	mov	r1, r4
  4032fe:	6920      	ldr	r0, [r4, #16]
  403300:	47b0      	blx	r6
        return ERR_ABRT;
  403302:	f110 0f0a 	cmn.w	r0, #10
  403306:	bf08      	it	eq
  403308:	4605      	moveq	r5, r0
  40330a:	e00c      	b.n	403326 <tcp_process_refused_data+0x66>
  TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
  40330c:	2300      	movs	r3, #0
  40330e:	4632      	mov	r2, r6
  403310:	4601      	mov	r1, r0
  403312:	4618      	mov	r0, r3
  403314:	4d05      	ldr	r5, [pc, #20]	; (40332c <tcp_process_refused_data+0x6c>)
  403316:	47a8      	blx	r5
  403318:	4605      	mov	r5, r0
  40331a:	e7df      	b.n	4032dc <tcp_process_refused_data+0x1c>
  } else if (err == ERR_ABRT) {
  40331c:	f115 0f0a 	cmn.w	r5, #10
  403320:	d001      	beq.n	403326 <tcp_process_refused_data+0x66>
    pcb->refused_data = refused_data;
  403322:	67a6      	str	r6, [r4, #120]	; 0x78
  return ERR_OK;
  403324:	2500      	movs	r5, #0
}
  403326:	4628      	mov	r0, r5
  403328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40332a:	bf00      	nop
  40332c:	00403291 	.word	0x00403291

00403330 <tcp_fasttmr>:
{
  403330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
  403334:	4a18      	ldr	r2, [pc, #96]	; (403398 <tcp_fasttmr+0x68>)
  403336:	7813      	ldrb	r3, [r2, #0]
  403338:	3301      	adds	r3, #1
  40333a:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
  40333c:	4f17      	ldr	r7, [pc, #92]	; (40339c <tcp_fasttmr+0x6c>)
    if (pcb->last_timer != tcp_timer_ctr) {
  40333e:	4615      	mov	r5, r2
        tcp_output(pcb);
  403340:	f8df 8064 	ldr.w	r8, [pc, #100]	; 4033a8 <tcp_fasttmr+0x78>
        tcp_active_pcbs_changed = 0;
  403344:	4e16      	ldr	r6, [pc, #88]	; (4033a0 <tcp_fasttmr+0x70>)
  pcb = tcp_active_pcbs;
  403346:	683c      	ldr	r4, [r7, #0]
  while(pcb != NULL) {
  403348:	b31c      	cbz	r4, 403392 <tcp_fasttmr+0x62>
    if (pcb->last_timer != tcp_timer_ctr) {
  40334a:	782b      	ldrb	r3, [r5, #0]
  40334c:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
  403350:	429a      	cmp	r2, r3
  403352:	d100      	bne.n	403356 <tcp_fasttmr+0x26>
  403354:	e7fe      	b.n	403354 <tcp_fasttmr+0x24>
      pcb->last_timer = tcp_timer_ctr;
  403356:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
      if (pcb->flags & TF_ACK_DELAY) {
  40335a:	7fa3      	ldrb	r3, [r4, #30]
  40335c:	f013 0f01 	tst.w	r3, #1
  403360:	d10d      	bne.n	40337e <tcp_fasttmr+0x4e>
      next = pcb->next;
  403362:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
  403366:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  403368:	b13b      	cbz	r3, 40337a <tcp_fasttmr+0x4a>
        tcp_active_pcbs_changed = 0;
  40336a:	2300      	movs	r3, #0
  40336c:	7033      	strb	r3, [r6, #0]
        tcp_process_refused_data(pcb);
  40336e:	4620      	mov	r0, r4
  403370:	4b0c      	ldr	r3, [pc, #48]	; (4033a4 <tcp_fasttmr+0x74>)
  403372:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
  403374:	7833      	ldrb	r3, [r6, #0]
  403376:	2b00      	cmp	r3, #0
  403378:	d1e5      	bne.n	403346 <tcp_fasttmr+0x16>
{
  40337a:	464c      	mov	r4, r9
  40337c:	e7e4      	b.n	403348 <tcp_fasttmr+0x18>
        tcp_ack_now(pcb);
  40337e:	f043 0302 	orr.w	r3, r3, #2
  403382:	77a3      	strb	r3, [r4, #30]
        tcp_output(pcb);
  403384:	4620      	mov	r0, r4
  403386:	47c0      	blx	r8
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  403388:	7fa3      	ldrb	r3, [r4, #30]
  40338a:	f023 0303 	bic.w	r3, r3, #3
  40338e:	77a3      	strb	r3, [r4, #30]
  403390:	e7e7      	b.n	403362 <tcp_fasttmr+0x32>
  403392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403396:	bf00      	nop
  403398:	204025be 	.word	0x204025be
  40339c:	20404964 	.word	0x20404964
  4033a0:	20404960 	.word	0x20404960
  4033a4:	004032c1 	.word	0x004032c1
  4033a8:	0040502d 	.word	0x0040502d

004033ac <tcp_tmr>:
{
  4033ac:	b508      	push	{r3, lr}
  tcp_fasttmr();
  4033ae:	4b07      	ldr	r3, [pc, #28]	; (4033cc <tcp_tmr+0x20>)
  4033b0:	4798      	blx	r3
  if (++tcp_timer & 1) {
  4033b2:	4a07      	ldr	r2, [pc, #28]	; (4033d0 <tcp_tmr+0x24>)
  4033b4:	7813      	ldrb	r3, [r2, #0]
  4033b6:	3301      	adds	r3, #1
  4033b8:	b2db      	uxtb	r3, r3
  4033ba:	7013      	strb	r3, [r2, #0]
  4033bc:	f013 0f01 	tst.w	r3, #1
  4033c0:	d100      	bne.n	4033c4 <tcp_tmr+0x18>
  4033c2:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
  4033c4:	4b03      	ldr	r3, [pc, #12]	; (4033d4 <tcp_tmr+0x28>)
  4033c6:	4798      	blx	r3
}
  4033c8:	e7fb      	b.n	4033c2 <tcp_tmr+0x16>
  4033ca:	bf00      	nop
  4033cc:	00403331 	.word	0x00403331
  4033d0:	204025bd 	.word	0x204025bd
  4033d4:	00402cc5 	.word	0x00402cc5

004033d8 <tcp_abandon>:
{
  4033d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4033dc:	b083      	sub	sp, #12
  4033de:	4604      	mov	r4, r0
  if (pcb->state == TIME_WAIT) {
  4033e0:	7e03      	ldrb	r3, [r0, #24]
  4033e2:	2b0a      	cmp	r3, #10
  4033e4:	d027      	beq.n	403436 <tcp_abandon+0x5e>
  4033e6:	460e      	mov	r6, r1
    seqno = pcb->snd_nxt;
  4033e8:	f8d0 8050 	ldr.w	r8, [r0, #80]	; 0x50
    ackno = pcb->rcv_nxt;
  4033ec:	f8d0 9028 	ldr.w	r9, [r0, #40]	; 0x28
    errf = pcb->errf;
  4033f0:	f8d0 508c 	ldr.w	r5, [r0, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
  4033f4:	6907      	ldr	r7, [r0, #16]
    TCP_PCB_REMOVE_ACTIVE(pcb);
  4033f6:	4601      	mov	r1, r0
  4033f8:	4819      	ldr	r0, [pc, #100]	; (403460 <tcp_abandon+0x88>)
  4033fa:	4b1a      	ldr	r3, [pc, #104]	; (403464 <tcp_abandon+0x8c>)
  4033fc:	4798      	blx	r3
  4033fe:	2201      	movs	r2, #1
  403400:	4b19      	ldr	r3, [pc, #100]	; (403468 <tcp_abandon+0x90>)
  403402:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
  403404:	6f20      	ldr	r0, [r4, #112]	; 0x70
  403406:	b108      	cbz	r0, 40340c <tcp_abandon+0x34>
      tcp_segs_free(pcb->unacked);
  403408:	4b18      	ldr	r3, [pc, #96]	; (40346c <tcp_abandon+0x94>)
  40340a:	4798      	blx	r3
    if (pcb->unsent != NULL) {
  40340c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  40340e:	b108      	cbz	r0, 403414 <tcp_abandon+0x3c>
      tcp_segs_free(pcb->unsent);
  403410:	4b16      	ldr	r3, [pc, #88]	; (40346c <tcp_abandon+0x94>)
  403412:	4798      	blx	r3
    if (pcb->ooseq != NULL) {
  403414:	6f60      	ldr	r0, [r4, #116]	; 0x74
  403416:	b108      	cbz	r0, 40341c <tcp_abandon+0x44>
      tcp_segs_free(pcb->ooseq);
  403418:	4b14      	ldr	r3, [pc, #80]	; (40346c <tcp_abandon+0x94>)
  40341a:	4798      	blx	r3
    if (reset) {
  40341c:	b9a6      	cbnz	r6, 403448 <tcp_abandon+0x70>
    memp_free(MEMP_TCP_PCB, pcb);
  40341e:	4621      	mov	r1, r4
  403420:	2001      	movs	r0, #1
  403422:	4b13      	ldr	r3, [pc, #76]	; (403470 <tcp_abandon+0x98>)
  403424:	4798      	blx	r3
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
  403426:	b11d      	cbz	r5, 403430 <tcp_abandon+0x58>
  403428:	f06f 0109 	mvn.w	r1, #9
  40342c:	4638      	mov	r0, r7
  40342e:	47a8      	blx	r5
}
  403430:	b003      	add	sp, #12
  403432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
  403436:	4601      	mov	r1, r0
  403438:	480e      	ldr	r0, [pc, #56]	; (403474 <tcp_abandon+0x9c>)
  40343a:	4b0a      	ldr	r3, [pc, #40]	; (403464 <tcp_abandon+0x8c>)
  40343c:	4798      	blx	r3
    memp_free(MEMP_TCP_PCB, pcb);
  40343e:	4621      	mov	r1, r4
  403440:	2001      	movs	r0, #1
  403442:	4b0b      	ldr	r3, [pc, #44]	; (403470 <tcp_abandon+0x98>)
  403444:	4798      	blx	r3
  403446:	e7f3      	b.n	403430 <tcp_abandon+0x58>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, pcb->local_port, pcb->remote_port);
  403448:	8ba3      	ldrh	r3, [r4, #28]
  40344a:	9301      	str	r3, [sp, #4]
  40344c:	8b63      	ldrh	r3, [r4, #26]
  40344e:	9300      	str	r3, [sp, #0]
  403450:	1d23      	adds	r3, r4, #4
  403452:	4622      	mov	r2, r4
  403454:	4649      	mov	r1, r9
  403456:	4640      	mov	r0, r8
  403458:	4e07      	ldr	r6, [pc, #28]	; (403478 <tcp_abandon+0xa0>)
  40345a:	47b0      	blx	r6
  40345c:	e7df      	b.n	40341e <tcp_abandon+0x46>
  40345e:	bf00      	nop
  403460:	20404964 	.word	0x20404964
  403464:	00403049 	.word	0x00403049
  403468:	20404960 	.word	0x20404960
  40346c:	00402c09 	.word	0x00402c09
  403470:	00402475 	.word	0x00402475
  403474:	20404978 	.word	0x20404978
  403478:	00405305 	.word	0x00405305

0040347c <tcp_abort>:
{
  40347c:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
  40347e:	2101      	movs	r1, #1
  403480:	4b01      	ldr	r3, [pc, #4]	; (403488 <tcp_abort+0xc>)
  403482:	4798      	blx	r3
  403484:	bd08      	pop	{r3, pc}
  403486:	bf00      	nop
  403488:	004033d9 	.word	0x004033d9

0040348c <tcp_next_iss>:
u32_t
tcp_next_iss(void)
{
  static u32_t iss = 6510;
  
  iss += tcp_ticks;       /* XXX */
  40348c:	4b03      	ldr	r3, [pc, #12]	; (40349c <tcp_next_iss+0x10>)
  40348e:	6818      	ldr	r0, [r3, #0]
  403490:	4a03      	ldr	r2, [pc, #12]	; (4034a0 <tcp_next_iss+0x14>)
  403492:	6812      	ldr	r2, [r2, #0]
  403494:	4410      	add	r0, r2
  403496:	6018      	str	r0, [r3, #0]
  return iss;
}
  403498:	4770      	bx	lr
  40349a:	bf00      	nop
  40349c:	20400008 	.word	0x20400008
  4034a0:	20404968 	.word	0x20404968

004034a4 <tcp_alloc>:
{
  4034a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4034a6:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  4034a8:	2001      	movs	r0, #1
  4034aa:	4b3d      	ldr	r3, [pc, #244]	; (4035a0 <tcp_alloc+0xfc>)
  4034ac:	4798      	blx	r3
  if (pcb == NULL) {
  4034ae:	4604      	mov	r4, r0
  4034b0:	2800      	cmp	r0, #0
  4034b2:	d039      	beq.n	403528 <tcp_alloc+0x84>
    memset(pcb, 0, sizeof(struct tcp_pcb));
  4034b4:	2298      	movs	r2, #152	; 0x98
  4034b6:	2100      	movs	r1, #0
  4034b8:	4620      	mov	r0, r4
  4034ba:	4b3a      	ldr	r3, [pc, #232]	; (4035a4 <tcp_alloc+0x100>)
  4034bc:	4798      	blx	r3
    pcb->prio = prio;
  4034be:	7665      	strb	r5, [r4, #25]
    pcb->snd_buf = TCP_SND_BUF;
  4034c0:	f640 3368 	movw	r3, #2920	; 0xb68
  4034c4:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    pcb->snd_queuelen = 0;
  4034c8:	2500      	movs	r5, #0
  4034ca:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
    pcb->rcv_wnd = TCP_WND;
  4034ce:	85a3      	strh	r3, [r4, #44]	; 0x2c
    pcb->rcv_ann_wnd = TCP_WND;
  4034d0:	85e3      	strh	r3, [r4, #46]	; 0x2e
    pcb->tos = 0;
  4034d2:	7265      	strb	r5, [r4, #9]
    pcb->ttl = TCP_TTL;
  4034d4:	23ff      	movs	r3, #255	; 0xff
  4034d6:	72a3      	strb	r3, [r4, #10]
    pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
  4034d8:	f44f 7306 	mov.w	r3, #536	; 0x218
  4034dc:	86e3      	strh	r3, [r4, #54]	; 0x36
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
  4034de:	2306      	movs	r3, #6
  4034e0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    pcb->sa = 0;
  4034e4:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
  4034e8:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    pcb->rtime = -1;
  4034ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4034f0:	86a3      	strh	r3, [r4, #52]	; 0x34
    pcb->cwnd = 1;
  4034f2:	2301      	movs	r3, #1
  4034f4:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    iss = tcp_next_iss();
  4034f8:	4b2b      	ldr	r3, [pc, #172]	; (4035a8 <tcp_alloc+0x104>)
  4034fa:	4798      	blx	r3
    pcb->snd_wl2 = iss;
  4034fc:	65a0      	str	r0, [r4, #88]	; 0x58
    pcb->snd_nxt = iss;
  4034fe:	6520      	str	r0, [r4, #80]	; 0x50
    pcb->lastack = iss;
  403500:	64a0      	str	r0, [r4, #72]	; 0x48
    pcb->snd_lbb = iss;   
  403502:	65e0      	str	r0, [r4, #92]	; 0x5c
    pcb->tmr = tcp_ticks;
  403504:	4b29      	ldr	r3, [pc, #164]	; (4035ac <tcp_alloc+0x108>)
  403506:	681b      	ldr	r3, [r3, #0]
  403508:	6263      	str	r3, [r4, #36]	; 0x24
    pcb->last_timer = tcp_timer_ctr;
  40350a:	4b29      	ldr	r3, [pc, #164]	; (4035b0 <tcp_alloc+0x10c>)
  40350c:	781b      	ldrb	r3, [r3, #0]
  40350e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    pcb->polltmr = 0;
  403512:	77e5      	strb	r5, [r4, #31]
    pcb->recv = tcp_recv_null;
  403514:	4b27      	ldr	r3, [pc, #156]	; (4035b4 <tcp_alloc+0x110>)
  403516:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
  40351a:	4b27      	ldr	r3, [pc, #156]	; (4035b8 <tcp_alloc+0x114>)
  40351c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    pcb->keep_cnt_sent = 0;
  403520:	f884 5096 	strb.w	r5, [r4, #150]	; 0x96
}
  403524:	4620      	mov	r0, r4
  403526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  403528:	4b24      	ldr	r3, [pc, #144]	; (4035bc <tcp_alloc+0x118>)
  40352a:	681b      	ldr	r3, [r3, #0]
  40352c:	b183      	cbz	r3, 403550 <tcp_alloc+0xac>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  40352e:	4a1f      	ldr	r2, [pc, #124]	; (4035ac <tcp_alloc+0x108>)
  403530:	6810      	ldr	r0, [r2, #0]
  403532:	2100      	movs	r1, #0
  403534:	e001      	b.n	40353a <tcp_alloc+0x96>
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  403536:	68db      	ldr	r3, [r3, #12]
  403538:	b133      	cbz	r3, 403548 <tcp_alloc+0xa4>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  40353a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  40353c:	1a82      	subs	r2, r0, r2
  40353e:	428a      	cmp	r2, r1
  403540:	d3f9      	bcc.n	403536 <tcp_alloc+0x92>
      inactivity = tcp_ticks - pcb->tmr;
  403542:	4611      	mov	r1, r2
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  403544:	461c      	mov	r4, r3
  403546:	e7f6      	b.n	403536 <tcp_alloc+0x92>
  if (inactive != NULL) {
  403548:	b114      	cbz	r4, 403550 <tcp_alloc+0xac>
    tcp_abort(inactive);
  40354a:	4620      	mov	r0, r4
  40354c:	4b1c      	ldr	r3, [pc, #112]	; (4035c0 <tcp_alloc+0x11c>)
  40354e:	4798      	blx	r3
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  403550:	2001      	movs	r0, #1
  403552:	4b13      	ldr	r3, [pc, #76]	; (4035a0 <tcp_alloc+0xfc>)
  403554:	4798      	blx	r3
    if (pcb == NULL) {
  403556:	4604      	mov	r4, r0
  403558:	2800      	cmp	r0, #0
  40355a:	d1ab      	bne.n	4034b4 <tcp_alloc+0x10>
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  40355c:	4b19      	ldr	r3, [pc, #100]	; (4035c4 <tcp_alloc+0x120>)
  40355e:	681b      	ldr	r3, [r3, #0]
  403560:	b1bb      	cbz	r3, 403592 <tcp_alloc+0xee>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  403562:	4a12      	ldr	r2, [pc, #72]	; (4035ac <tcp_alloc+0x108>)
  403564:	6817      	ldr	r7, [r2, #0]
  403566:	2600      	movs	r6, #0
  403568:	207f      	movs	r0, #127	; 0x7f
  40356a:	e001      	b.n	403570 <tcp_alloc+0xcc>
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  40356c:	68db      	ldr	r3, [r3, #12]
  40356e:	b163      	cbz	r3, 40358a <tcp_alloc+0xe6>
    if (pcb->prio <= prio &&
  403570:	7e5a      	ldrb	r2, [r3, #25]
  403572:	4295      	cmp	r5, r2
  403574:	d3fa      	bcc.n	40356c <tcp_alloc+0xc8>
  403576:	4282      	cmp	r2, r0
  403578:	d8f8      	bhi.n	40356c <tcp_alloc+0xc8>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  40357a:	6a59      	ldr	r1, [r3, #36]	; 0x24
  40357c:	1a79      	subs	r1, r7, r1
       pcb->prio <= mprio &&
  40357e:	42b1      	cmp	r1, r6
  403580:	d3f4      	bcc.n	40356c <tcp_alloc+0xc8>
      mprio = pcb->prio;
  403582:	4610      	mov	r0, r2
      inactivity = tcp_ticks - pcb->tmr;
  403584:	460e      	mov	r6, r1
       pcb->prio <= mprio &&
  403586:	461c      	mov	r4, r3
  403588:	e7f0      	b.n	40356c <tcp_alloc+0xc8>
  if (inactive != NULL) {
  40358a:	b114      	cbz	r4, 403592 <tcp_alloc+0xee>
    tcp_abort(inactive);
  40358c:	4620      	mov	r0, r4
  40358e:	4b0c      	ldr	r3, [pc, #48]	; (4035c0 <tcp_alloc+0x11c>)
  403590:	4798      	blx	r3
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  403592:	2001      	movs	r0, #1
  403594:	4b02      	ldr	r3, [pc, #8]	; (4035a0 <tcp_alloc+0xfc>)
  403596:	4798      	blx	r3
  if (pcb != NULL) {
  403598:	4604      	mov	r4, r0
  40359a:	2800      	cmp	r0, #0
  40359c:	d0c2      	beq.n	403524 <tcp_alloc+0x80>
  40359e:	e789      	b.n	4034b4 <tcp_alloc+0x10>
  4035a0:	00402455 	.word	0x00402455
  4035a4:	004073c9 	.word	0x004073c9
  4035a8:	0040348d 	.word	0x0040348d
  4035ac:	20404968 	.word	0x20404968
  4035b0:	204025be 	.word	0x204025be
  4035b4:	00403291 	.word	0x00403291
  4035b8:	006ddd00 	.word	0x006ddd00
  4035bc:	20404978 	.word	0x20404978
  4035c0:	0040347d 	.word	0x0040347d
  4035c4:	20404964 	.word	0x20404964

004035c8 <tcp_new>:
{
  4035c8:	b508      	push	{r3, lr}
  return tcp_alloc(TCP_PRIO_NORMAL);
  4035ca:	2040      	movs	r0, #64	; 0x40
  4035cc:	4b01      	ldr	r3, [pc, #4]	; (4035d4 <tcp_new+0xc>)
  4035ce:	4798      	blx	r3
}
  4035d0:	bd08      	pop	{r3, pc}
  4035d2:	bf00      	nop
  4035d4:	004034a5 	.word	0x004034a5

004035d8 <tcp_eff_send_mss>:
 * by using ip_route to determin the netif used to send to the address and
 * calculating the minimum of TCP_MSS and that netif's mtu (if set).
 */
u16_t
tcp_eff_send_mss(u16_t sendmss, ip_addr_t *addr)
{
  4035d8:	b510      	push	{r4, lr}
  4035da:	4604      	mov	r4, r0
  u16_t mss_s;
  struct netif *outif;

  outif = ip_route(addr);
  4035dc:	4608      	mov	r0, r1
  4035de:	4b07      	ldr	r3, [pc, #28]	; (4035fc <tcp_eff_send_mss+0x24>)
  4035e0:	4798      	blx	r3
  if ((outif != NULL) && (outif->mtu != 0)) {
  4035e2:	b138      	cbz	r0, 4035f4 <tcp_eff_send_mss+0x1c>
  4035e4:	8c80      	ldrh	r0, [r0, #36]	; 0x24
  4035e6:	b138      	cbz	r0, 4035f8 <tcp_eff_send_mss+0x20>
    mss_s = outif->mtu - IP_HLEN - TCP_HLEN;
  4035e8:	3828      	subs	r0, #40	; 0x28
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
  4035ea:	b280      	uxth	r0, r0
  4035ec:	42a0      	cmp	r0, r4
  4035ee:	bf28      	it	cs
  4035f0:	4620      	movcs	r0, r4
  4035f2:	bd10      	pop	{r4, pc}
  4035f4:	4620      	mov	r0, r4
  4035f6:	bd10      	pop	{r4, pc}
  4035f8:	4620      	mov	r0, r4
  }
  return sendmss;
}
  4035fa:	bd10      	pop	{r4, pc}
  4035fc:	00401569 	.word	0x00401569

00403600 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
  403600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403602:	4605      	mov	r5, r0
  u8_t *opts, opt;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  opts = (u8_t *)tcphdr + TCP_HLEN;
  403604:	4b22      	ldr	r3, [pc, #136]	; (403690 <tcp_parseopt+0x90>)
  403606:	681c      	ldr	r4, [r3, #0]

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
  403608:	89a0      	ldrh	r0, [r4, #12]
  40360a:	4b22      	ldr	r3, [pc, #136]	; (403694 <tcp_parseopt+0x94>)
  40360c:	4798      	blx	r3
  40360e:	f3c0 300f 	ubfx	r0, r0, #12, #16
  403612:	2805      	cmp	r0, #5
  403614:	d800      	bhi.n	403618 <tcp_parseopt+0x18>
  403616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
  403618:	4b1d      	ldr	r3, [pc, #116]	; (403690 <tcp_parseopt+0x90>)
  40361a:	681b      	ldr	r3, [r3, #0]
  40361c:	8998      	ldrh	r0, [r3, #12]
  40361e:	4b1d      	ldr	r3, [pc, #116]	; (403694 <tcp_parseopt+0x94>)
  403620:	4798      	blx	r3
  403622:	0b06      	lsrs	r6, r0, #12
  403624:	3e05      	subs	r6, #5
  403626:	00b6      	lsls	r6, r6, #2
  403628:	b2b6      	uxth	r6, r6
    for (c = 0; c < max_c; ) {
  40362a:	2e00      	cmp	r6, #0
  40362c:	d0f3      	beq.n	403616 <tcp_parseopt+0x16>
  opts = (u8_t *)tcphdr + TCP_HLEN;
  40362e:	f104 0214 	add.w	r2, r4, #20
  403632:	2300      	movs	r3, #0
          return;
        }
        /* An MSS option with the right option length. */
        mss = (opts[c + 2] << 8) | opts[c + 3];
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
  403634:	f240 57b3 	movw	r7, #1459	; 0x5b3
  403638:	f240 54b4 	movw	r4, #1460	; 0x5b4
  40363c:	e003      	b.n	403646 <tcp_parseopt+0x46>
        ++c;
  40363e:	3301      	adds	r3, #1
  403640:	b29b      	uxth	r3, r3
    for (c = 0; c < max_c; ) {
  403642:	429e      	cmp	r6, r3
  403644:	d9e7      	bls.n	403616 <tcp_parseopt+0x16>
      opt = opts[c];
  403646:	4618      	mov	r0, r3
      switch (opt) {
  403648:	5cd1      	ldrb	r1, [r2, r3]
  40364a:	2901      	cmp	r1, #1
  40364c:	d0f7      	beq.n	40363e <tcp_parseopt+0x3e>
  40364e:	2900      	cmp	r1, #0
  403650:	d0e1      	beq.n	403616 <tcp_parseopt+0x16>
  403652:	2902      	cmp	r1, #2
  403654:	d006      	beq.n	403664 <tcp_parseopt+0x64>
        c += 0x0A;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        if (opts[c + 1] == 0) {
  403656:	4410      	add	r0, r2
  403658:	7841      	ldrb	r1, [r0, #1]
  40365a:	2900      	cmp	r1, #0
  40365c:	d0db      	beq.n	403616 <tcp_parseopt+0x16>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        c += opts[c + 1];
  40365e:	440b      	add	r3, r1
  403660:	b29b      	uxth	r3, r3
  403662:	e7ee      	b.n	403642 <tcp_parseopt+0x42>
        if (opts[c + 1] != 0x04 || c + 0x04 > max_c) {
  403664:	18d1      	adds	r1, r2, r3
  403666:	7849      	ldrb	r1, [r1, #1]
  403668:	2904      	cmp	r1, #4
  40366a:	d1d4      	bne.n	403616 <tcp_parseopt+0x16>
  40366c:	1d19      	adds	r1, r3, #4
  40366e:	42b1      	cmp	r1, r6
  403670:	dcd1      	bgt.n	403616 <tcp_parseopt+0x16>
        mss = (opts[c + 2] << 8) | opts[c + 3];
  403672:	4410      	add	r0, r2
  403674:	f890 e002 	ldrb.w	lr, [r0, #2]
  403678:	78c1      	ldrb	r1, [r0, #3]
  40367a:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
  40367e:	1e48      	subs	r0, r1, #1
  403680:	b280      	uxth	r0, r0
  403682:	42b8      	cmp	r0, r7
  403684:	bf88      	it	hi
  403686:	4621      	movhi	r1, r4
  403688:	86e9      	strh	r1, [r5, #54]	; 0x36
        c += 0x04;
  40368a:	3304      	adds	r3, #4
  40368c:	b29b      	uxth	r3, r3
        break;
  40368e:	e7d8      	b.n	403642 <tcp_parseopt+0x42>
  403690:	204025e4 	.word	0x204025e4
  403694:	0040119f 	.word	0x0040119f

00403698 <tcp_oos_insert_segment>:
{
  403698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40369c:	4605      	mov	r5, r0
  40369e:	4689      	mov	r9, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  4036a0:	68c3      	ldr	r3, [r0, #12]
  4036a2:	8998      	ldrh	r0, [r3, #12]
  4036a4:	4b29      	ldr	r3, [pc, #164]	; (40374c <tcp_oos_insert_segment+0xb4>)
  4036a6:	4798      	blx	r3
  4036a8:	f010 0f01 	tst.w	r0, #1
  4036ac:	d127      	bne.n	4036fe <tcp_oos_insert_segment+0x66>
    while (next &&
  4036ae:	f1b9 0f00 	cmp.w	r9, #0
  4036b2:	d049      	beq.n	403748 <tcp_oos_insert_segment+0xb0>
           TCP_SEQ_GEQ((seqno + cseg->len),
  4036b4:	f8d9 200c 	ldr.w	r2, [r9, #12]
  4036b8:	892b      	ldrh	r3, [r5, #8]
  4036ba:	6851      	ldr	r1, [r2, #4]
  4036bc:	1a5b      	subs	r3, r3, r1
  4036be:	4924      	ldr	r1, [pc, #144]	; (403750 <tcp_oos_insert_segment+0xb8>)
  4036c0:	6809      	ldr	r1, [r1, #0]
  4036c2:	440b      	add	r3, r1
  4036c4:	f8b9 1008 	ldrh.w	r1, [r9, #8]
  4036c8:	1a5b      	subs	r3, r3, r1
    while (next &&
  4036ca:	2b00      	cmp	r3, #0
  4036cc:	db04      	blt.n	4036d8 <tcp_oos_insert_segment+0x40>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  4036ce:	4f1f      	ldr	r7, [pc, #124]	; (40374c <tcp_oos_insert_segment+0xb4>)
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
  4036d0:	f8df 808c 	ldr.w	r8, [pc, #140]	; 403760 <tcp_oos_insert_segment+0xc8>
      tcp_seg_free(old_seg);
  4036d4:	4e1f      	ldr	r6, [pc, #124]	; (403754 <tcp_oos_insert_segment+0xbc>)
  4036d6:	e028      	b.n	40372a <tcp_oos_insert_segment+0x92>
    while (next &&
  4036d8:	464c      	mov	r4, r9
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
  4036da:	4b1d      	ldr	r3, [pc, #116]	; (403750 <tcp_oos_insert_segment+0xb8>)
  4036dc:	6819      	ldr	r1, [r3, #0]
  4036de:	68e3      	ldr	r3, [r4, #12]
  4036e0:	685a      	ldr	r2, [r3, #4]
  4036e2:	892b      	ldrh	r3, [r5, #8]
  4036e4:	440b      	add	r3, r1
  4036e6:	1a9b      	subs	r3, r3, r2
    if (next &&
  4036e8:	2b00      	cmp	r3, #0
  4036ea:	dd05      	ble.n	4036f8 <tcp_oos_insert_segment+0x60>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
  4036ec:	1a52      	subs	r2, r2, r1
  4036ee:	b291      	uxth	r1, r2
  4036f0:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
  4036f2:	6868      	ldr	r0, [r5, #4]
  4036f4:	4b18      	ldr	r3, [pc, #96]	; (403758 <tcp_oos_insert_segment+0xc0>)
  4036f6:	4798      	blx	r3
  cseg->next = next;
  4036f8:	602c      	str	r4, [r5, #0]
}
  4036fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    tcp_segs_free(next);
  4036fe:	4648      	mov	r0, r9
  403700:	4b16      	ldr	r3, [pc, #88]	; (40375c <tcp_oos_insert_segment+0xc4>)
  403702:	4798      	blx	r3
    next = NULL;
  403704:	2400      	movs	r4, #0
  403706:	e7f7      	b.n	4036f8 <tcp_oos_insert_segment+0x60>
      next = next->next;
  403708:	f8d9 4000 	ldr.w	r4, [r9]
      tcp_seg_free(old_seg);
  40370c:	4648      	mov	r0, r9
  40370e:	47b0      	blx	r6
    while (next &&
  403710:	b1d4      	cbz	r4, 403748 <tcp_oos_insert_segment+0xb0>
           TCP_SEQ_GEQ((seqno + cseg->len),
  403712:	68e2      	ldr	r2, [r4, #12]
  403714:	892b      	ldrh	r3, [r5, #8]
  403716:	490e      	ldr	r1, [pc, #56]	; (403750 <tcp_oos_insert_segment+0xb8>)
  403718:	6809      	ldr	r1, [r1, #0]
  40371a:	440b      	add	r3, r1
  40371c:	6851      	ldr	r1, [r2, #4]
  40371e:	1a5b      	subs	r3, r3, r1
  403720:	8921      	ldrh	r1, [r4, #8]
  403722:	1a5b      	subs	r3, r3, r1
    while (next &&
  403724:	2b00      	cmp	r3, #0
  403726:	dbd8      	blt.n	4036da <tcp_oos_insert_segment+0x42>
      next = next->next;
  403728:	46a1      	mov	r9, r4
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  40372a:	8990      	ldrh	r0, [r2, #12]
  40372c:	47b8      	blx	r7
  40372e:	f010 0f01 	tst.w	r0, #1
  403732:	d0e9      	beq.n	403708 <tcp_oos_insert_segment+0x70>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
  403734:	f8d5 a00c 	ldr.w	sl, [r5, #12]
  403738:	f8ba 400c 	ldrh.w	r4, [sl, #12]
  40373c:	2001      	movs	r0, #1
  40373e:	47c0      	blx	r8
  403740:	4320      	orrs	r0, r4
  403742:	f8aa 000c 	strh.w	r0, [sl, #12]
  403746:	e7df      	b.n	403708 <tcp_oos_insert_segment+0x70>
    next = NULL;
  403748:	2400      	movs	r4, #0
  40374a:	e7d5      	b.n	4036f8 <tcp_oos_insert_segment+0x60>
  40374c:	0040119f 	.word	0x0040119f
  403750:	204025e0 	.word	0x204025e0
  403754:	00402be5 	.word	0x00402be5
  403758:	004027cd 	.word	0x004027cd
  40375c:	00402c09 	.word	0x00402c09
  403760:	00401195 	.word	0x00401195

00403764 <tcp_receive>:
{
  403764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403768:	4604      	mov	r4, r0
  if (flags & TCP_ACK) {
  40376a:	4baa      	ldr	r3, [pc, #680]	; (403a14 <tcp_receive+0x2b0>)
  40376c:	781b      	ldrb	r3, [r3, #0]
  40376e:	f013 0f10 	tst.w	r3, #16
  403772:	f000 816b 	beq.w	403a4c <tcp_receive+0x2e8>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
  403776:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
  40377a:	6d80      	ldr	r0, [r0, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
  40377c:	6d62      	ldr	r2, [r4, #84]	; 0x54
  40377e:	4ba6      	ldr	r3, [pc, #664]	; (403a18 <tcp_receive+0x2b4>)
  403780:	681b      	ldr	r3, [r3, #0]
  403782:	1ad1      	subs	r1, r2, r3
  403784:	2900      	cmp	r1, #0
  403786:	db28      	blt.n	4037da <tcp_receive+0x76>
  403788:	429a      	cmp	r2, r3
  40378a:	d01b      	beq.n	4037c4 <tcp_receive+0x60>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
  40378c:	4aa3      	ldr	r2, [pc, #652]	; (403a1c <tcp_receive+0x2b8>)
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  40378e:	6812      	ldr	r2, [r2, #0]
  403790:	4290      	cmp	r0, r2
  403792:	d01d      	beq.n	4037d0 <tcp_receive+0x6c>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
  403794:	4ba1      	ldr	r3, [pc, #644]	; (403a1c <tcp_receive+0x2b8>)
  403796:	681a      	ldr	r2, [r3, #0]
  403798:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40379a:	1ad1      	subs	r1, r2, r3
  40379c:	2900      	cmp	r1, #0
  40379e:	dd41      	ble.n	403824 <tcp_receive+0xc0>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)){
  4037a0:	2901      	cmp	r1, #1
  4037a2:	d403      	bmi.n	4037ac <tcp_receive+0x48>
  4037a4:	6d21      	ldr	r1, [r4, #80]	; 0x50
  4037a6:	1a51      	subs	r1, r2, r1
  4037a8:	2900      	cmp	r1, #0
  4037aa:	dd6e      	ble.n	40388a <tcp_receive+0x126>
      pcb->acked = 0;
  4037ac:	2300      	movs	r3, #0
  4037ae:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    while (pcb->unsent != NULL &&
  4037b2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4037b4:	2b00      	cmp	r3, #0
  4037b6:	f000 8141 	beq.w	403a3c <tcp_receive+0x2d8>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
  4037ba:	4e98      	ldr	r6, [pc, #608]	; (403a1c <tcp_receive+0x2b8>)
  4037bc:	f8df 8278 	ldr.w	r8, [pc, #632]	; 403a38 <tcp_receive+0x2d4>
  4037c0:	4f97      	ldr	r7, [pc, #604]	; (403a20 <tcp_receive+0x2bc>)
  4037c2:	e0f8      	b.n	4039b6 <tcp_receive+0x252>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  4037c4:	4a95      	ldr	r2, [pc, #596]	; (403a1c <tcp_receive+0x2b8>)
  4037c6:	6812      	ldr	r2, [r2, #0]
  4037c8:	1a82      	subs	r2, r0, r2
  4037ca:	2a00      	cmp	r2, #0
  4037cc:	dade      	bge.n	40378c <tcp_receive+0x28>
  4037ce:	e004      	b.n	4037da <tcp_receive+0x76>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
  4037d0:	4a94      	ldr	r2, [pc, #592]	; (403a24 <tcp_receive+0x2c0>)
  4037d2:	6812      	ldr	r2, [r2, #0]
  4037d4:	89d2      	ldrh	r2, [r2, #14]
  4037d6:	42aa      	cmp	r2, r5
  4037d8:	d9dc      	bls.n	403794 <tcp_receive+0x30>
      pcb->snd_wnd = tcphdr->wnd;
  4037da:	4a92      	ldr	r2, [pc, #584]	; (403a24 <tcp_receive+0x2c0>)
  4037dc:	6812      	ldr	r2, [r2, #0]
  4037de:	89d1      	ldrh	r1, [r2, #14]
  4037e0:	b28e      	uxth	r6, r1
  4037e2:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < tcphdr->wnd) {
  4037e6:	89d2      	ldrh	r2, [r2, #14]
  4037e8:	b291      	uxth	r1, r2
  4037ea:	f8b4 7062 	ldrh.w	r7, [r4, #98]	; 0x62
  4037ee:	428f      	cmp	r7, r1
        pcb->snd_wnd_max = tcphdr->wnd;
  4037f0:	bf38      	it	cc
  4037f2:	f8a4 2062 	strhcc.w	r2, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno;
  4037f6:	6563      	str	r3, [r4, #84]	; 0x54
      pcb->snd_wl2 = ackno;
  4037f8:	4b88      	ldr	r3, [pc, #544]	; (403a1c <tcp_receive+0x2b8>)
  4037fa:	681b      	ldr	r3, [r3, #0]
  4037fc:	65a3      	str	r3, [r4, #88]	; 0x58
      if (pcb->snd_wnd == 0) {
  4037fe:	b94e      	cbnz	r6, 403814 <tcp_receive+0xb0>
        if (pcb->persist_backoff == 0) {
  403800:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
  403804:	2b00      	cmp	r3, #0
  403806:	d1c5      	bne.n	403794 <tcp_receive+0x30>
          pcb->persist_cnt = 0;
  403808:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          pcb->persist_backoff = 1;
  40380c:	2301      	movs	r3, #1
  40380e:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  403812:	e7bf      	b.n	403794 <tcp_receive+0x30>
      } else if (pcb->persist_backoff > 0) {
  403814:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
  403818:	2b00      	cmp	r3, #0
  40381a:	d0bb      	beq.n	403794 <tcp_receive+0x30>
          pcb->persist_backoff = 0;
  40381c:	2300      	movs	r3, #0
  40381e:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  403822:	e7b7      	b.n	403794 <tcp_receive+0x30>
      pcb->acked = 0;
  403824:	2100      	movs	r1, #0
  403826:	f8a4 1064 	strh.w	r1, [r4, #100]	; 0x64
      if (tcplen == 0) {
  40382a:	497f      	ldr	r1, [pc, #508]	; (403a28 <tcp_receive+0x2c4>)
  40382c:	8809      	ldrh	r1, [r1, #0]
  40382e:	b931      	cbnz	r1, 40383e <tcp_receive+0xda>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
  403830:	4428      	add	r0, r5
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge){
  403832:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
  403836:	6da5      	ldr	r5, [r4, #88]	; 0x58
  403838:	4429      	add	r1, r5
  40383a:	4288      	cmp	r0, r1
  40383c:	d003      	beq.n	403846 <tcp_receive+0xe2>
        pcb->dupacks = 0;
  40383e:	2300      	movs	r3, #0
  403840:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  403844:	e7b5      	b.n	4037b2 <tcp_receive+0x4e>
          if (pcb->rtime >= 0) {
  403846:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
            if (pcb->lastack == ackno) {
  403848:	f411 4f00 	tst.w	r1, #32768	; 0x8000
  40384c:	d1f7      	bne.n	40383e <tcp_receive+0xda>
  40384e:	429a      	cmp	r2, r3
  403850:	d1f5      	bne.n	40383e <tcp_receive+0xda>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
  403852:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
  403856:	1c53      	adds	r3, r2, #1
  403858:	b2db      	uxtb	r3, r3
  40385a:	429a      	cmp	r2, r3
                ++pcb->dupacks;
  40385c:	bf38      	it	cc
  40385e:	f884 3047 	strbcc.w	r3, [r4, #71]	; 0x47
              if (pcb->dupacks > 3) {
  403862:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
  403866:	2b03      	cmp	r3, #3
  403868:	d909      	bls.n	40387e <tcp_receive+0x11a>
                if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  40386a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
  40386e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  403870:	4413      	add	r3, r2
  403872:	b29b      	uxth	r3, r3
  403874:	429a      	cmp	r2, r3
  403876:	d29c      	bcs.n	4037b2 <tcp_receive+0x4e>
                  pcb->cwnd += pcb->mss;
  403878:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  40387c:	e799      	b.n	4037b2 <tcp_receive+0x4e>
              } else if (pcb->dupacks == 3) {
  40387e:	2b03      	cmp	r3, #3
  403880:	d197      	bne.n	4037b2 <tcp_receive+0x4e>
                tcp_rexmit_fast(pcb);
  403882:	4620      	mov	r0, r4
  403884:	4b69      	ldr	r3, [pc, #420]	; (403a2c <tcp_receive+0x2c8>)
  403886:	4798      	blx	r3
  403888:	e793      	b.n	4037b2 <tcp_receive+0x4e>
      if (pcb->flags & TF_INFR) {
  40388a:	7fa1      	ldrb	r1, [r4, #30]
  40388c:	f011 0f04 	tst.w	r1, #4
  403890:	d006      	beq.n	4038a0 <tcp_receive+0x13c>
        pcb->flags &= ~TF_INFR;
  403892:	f021 0104 	bic.w	r1, r1, #4
  403896:	77a1      	strb	r1, [r4, #30]
        pcb->cwnd = pcb->ssthresh;
  403898:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
  40389c:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
      pcb->nrtx = 0;
  4038a0:	2000      	movs	r0, #0
  4038a2:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  4038a6:	f9b4 5040 	ldrsh.w	r5, [r4, #64]	; 0x40
  4038aa:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
  4038ae:	eb01 01e5 	add.w	r1, r1, r5, asr #3
  4038b2:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
      pcb->acked = (u16_t)(ackno - pcb->lastack);
  4038b6:	1ad3      	subs	r3, r2, r3
  4038b8:	b29b      	uxth	r3, r3
  4038ba:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      pcb->snd_buf += pcb->acked;
  4038be:	f8b4 1066 	ldrh.w	r1, [r4, #102]	; 0x66
  4038c2:	440b      	add	r3, r1
  4038c4:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
      pcb->dupacks = 0;
  4038c8:	f884 0047 	strb.w	r0, [r4, #71]	; 0x47
      pcb->lastack = ackno;
  4038cc:	64a2      	str	r2, [r4, #72]	; 0x48
      if (pcb->state >= ESTABLISHED) {
  4038ce:	7e23      	ldrb	r3, [r4, #24]
  4038d0:	2b03      	cmp	r3, #3
  4038d2:	d90c      	bls.n	4038ee <tcp_receive+0x18a>
        if (pcb->cwnd < pcb->ssthresh) {
  4038d4:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
  4038d8:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
  4038dc:	4293      	cmp	r3, r2
  4038de:	d90e      	bls.n	4038fe <tcp_receive+0x19a>
          if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  4038e0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  4038e2:	4413      	add	r3, r2
  4038e4:	b29b      	uxth	r3, r3
  4038e6:	429a      	cmp	r2, r3
            pcb->cwnd += pcb->mss;
  4038e8:	bf38      	it	cc
  4038ea:	f8a4 304c 	strhcc.w	r3, [r4, #76]	; 0x4c
      while (pcb->unacked != NULL &&
  4038ee:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4038f0:	2b00      	cmp	r3, #0
  4038f2:	d04b      	beq.n	40398c <tcp_receive+0x228>
             TCP_SEQ_LEQ(ntohl(pcb->unacked->tcphdr->seqno) +
  4038f4:	f8df 8140 	ldr.w	r8, [pc, #320]	; 403a38 <tcp_receive+0x2d4>
  4038f8:	4e49      	ldr	r6, [pc, #292]	; (403a20 <tcp_receive+0x2bc>)
  4038fa:	4f48      	ldr	r7, [pc, #288]	; (403a1c <tcp_receive+0x2b8>)
  4038fc:	e018      	b.n	403930 <tcp_receive+0x1cc>
          u16_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
  4038fe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  403900:	fb03 f303 	mul.w	r3, r3, r3
  403904:	fb93 f3f2 	sdiv	r3, r3, r2
  403908:	4413      	add	r3, r2
  40390a:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
  40390c:	429a      	cmp	r2, r3
  40390e:	d2ee      	bcs.n	4038ee <tcp_receive+0x18a>
            pcb->cwnd = new_cwnd;
  403910:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  403914:	e7eb      	b.n	4038ee <tcp_receive+0x18a>
        pcb->snd_queuelen -= pbuf_clen(next->p);
  403916:	6868      	ldr	r0, [r5, #4]
  403918:	4b45      	ldr	r3, [pc, #276]	; (403a30 <tcp_receive+0x2cc>)
  40391a:	4798      	blx	r3
  40391c:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
  403920:	1a18      	subs	r0, r3, r0
  403922:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
        tcp_seg_free(next);
  403926:	4628      	mov	r0, r5
  403928:	4b42      	ldr	r3, [pc, #264]	; (403a34 <tcp_receive+0x2d0>)
  40392a:	4798      	blx	r3
      while (pcb->unacked != NULL &&
  40392c:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40392e:	b36b      	cbz	r3, 40398c <tcp_receive+0x228>
             TCP_SEQ_LEQ(ntohl(pcb->unacked->tcphdr->seqno) +
  403930:	68db      	ldr	r3, [r3, #12]
  403932:	6858      	ldr	r0, [r3, #4]
  403934:	47c0      	blx	r8
  403936:	4605      	mov	r5, r0
  403938:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40393a:	f8b3 9008 	ldrh.w	r9, [r3, #8]
  40393e:	68db      	ldr	r3, [r3, #12]
  403940:	8998      	ldrh	r0, [r3, #12]
  403942:	47b0      	blx	r6
  403944:	f010 0003 	ands.w	r0, r0, #3
  403948:	bf18      	it	ne
  40394a:	2001      	movne	r0, #1
  40394c:	4448      	add	r0, r9
  40394e:	683b      	ldr	r3, [r7, #0]
  403950:	1aed      	subs	r5, r5, r3
  403952:	4428      	add	r0, r5
      while (pcb->unacked != NULL &&
  403954:	2800      	cmp	r0, #0
  403956:	dc12      	bgt.n	40397e <tcp_receive+0x21a>
        next = pcb->unacked;
  403958:	6f25      	ldr	r5, [r4, #112]	; 0x70
        pcb->unacked = pcb->unacked->next;
  40395a:	682b      	ldr	r3, [r5, #0]
  40395c:	6723      	str	r3, [r4, #112]	; 0x70
        if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
  40395e:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
  403962:	2b00      	cmp	r3, #0
  403964:	d0d7      	beq.n	403916 <tcp_receive+0x1b2>
  403966:	68eb      	ldr	r3, [r5, #12]
  403968:	8998      	ldrh	r0, [r3, #12]
  40396a:	47b0      	blx	r6
  40396c:	f010 0f01 	tst.w	r0, #1
  403970:	d0d1      	beq.n	403916 <tcp_receive+0x1b2>
          pcb->acked--;
  403972:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
  403976:	3b01      	subs	r3, #1
  403978:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  40397c:	e7cb      	b.n	403916 <tcp_receive+0x1b2>
      if(pcb->unacked == NULL)
  40397e:	6f23      	ldr	r3, [r4, #112]	; 0x70
  403980:	b123      	cbz	r3, 40398c <tcp_receive+0x228>
        pcb->rtime = 0;
  403982:	2300      	movs	r3, #0
  403984:	86a3      	strh	r3, [r4, #52]	; 0x34
      pcb->polltmr = 0;
  403986:	2300      	movs	r3, #0
  403988:	77e3      	strb	r3, [r4, #31]
  40398a:	e712      	b.n	4037b2 <tcp_receive+0x4e>
        pcb->rtime = -1;
  40398c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  403990:	86a3      	strh	r3, [r4, #52]	; 0x34
  403992:	e7f8      	b.n	403986 <tcp_receive+0x222>
        pcb->unsent_oversize = 0;
  403994:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  403998:	e02c      	b.n	4039f4 <tcp_receive+0x290>
      pcb->snd_queuelen -= pbuf_clen(next->p);
  40399a:	6868      	ldr	r0, [r5, #4]
  40399c:	4b24      	ldr	r3, [pc, #144]	; (403a30 <tcp_receive+0x2cc>)
  40399e:	4798      	blx	r3
  4039a0:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
  4039a4:	1a18      	subs	r0, r3, r0
  4039a6:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
      tcp_seg_free(next);
  4039aa:	4628      	mov	r0, r5
  4039ac:	4b21      	ldr	r3, [pc, #132]	; (403a34 <tcp_receive+0x2d0>)
  4039ae:	4798      	blx	r3
    while (pcb->unsent != NULL &&
  4039b0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4039b2:	2b00      	cmp	r3, #0
  4039b4:	d042      	beq.n	403a3c <tcp_receive+0x2d8>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
  4039b6:	6835      	ldr	r5, [r6, #0]
  4039b8:	68db      	ldr	r3, [r3, #12]
  4039ba:	6858      	ldr	r0, [r3, #4]
  4039bc:	47c0      	blx	r8
  4039be:	4682      	mov	sl, r0
  4039c0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4039c2:	f8b3 9008 	ldrh.w	r9, [r3, #8]
  4039c6:	68db      	ldr	r3, [r3, #12]
  4039c8:	8998      	ldrh	r0, [r3, #12]
  4039ca:	47b8      	blx	r7
  4039cc:	eba5 050a 	sub.w	r5, r5, sl
  4039d0:	f010 0003 	ands.w	r0, r0, #3
  4039d4:	bf18      	it	ne
  4039d6:	2001      	movne	r0, #1
  4039d8:	4448      	add	r0, r9
  4039da:	1a2d      	subs	r5, r5, r0
    while (pcb->unsent != NULL &&
  4039dc:	2d00      	cmp	r5, #0
  4039de:	db2d      	blt.n	403a3c <tcp_receive+0x2d8>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
  4039e0:	6833      	ldr	r3, [r6, #0]
  4039e2:	6d22      	ldr	r2, [r4, #80]	; 0x50
  4039e4:	1a9b      	subs	r3, r3, r2
  4039e6:	2b00      	cmp	r3, #0
  4039e8:	dc28      	bgt.n	403a3c <tcp_receive+0x2d8>
      next = pcb->unsent;
  4039ea:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
      pcb->unsent = pcb->unsent->next;
  4039ec:	682b      	ldr	r3, [r5, #0]
  4039ee:	66e3      	str	r3, [r4, #108]	; 0x6c
      if (pcb->unsent == NULL) {
  4039f0:	2b00      	cmp	r3, #0
  4039f2:	d0cf      	beq.n	403994 <tcp_receive+0x230>
      if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
  4039f4:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
  4039f8:	2b00      	cmp	r3, #0
  4039fa:	d0ce      	beq.n	40399a <tcp_receive+0x236>
  4039fc:	68eb      	ldr	r3, [r5, #12]
  4039fe:	8998      	ldrh	r0, [r3, #12]
  403a00:	47b8      	blx	r7
  403a02:	f010 0f01 	tst.w	r0, #1
  403a06:	d0c8      	beq.n	40399a <tcp_receive+0x236>
        pcb->acked--;
  403a08:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
  403a0c:	3b01      	subs	r3, #1
  403a0e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  403a12:	e7c2      	b.n	40399a <tcp_receive+0x236>
  403a14:	204025c4 	.word	0x204025c4
  403a18:	204025e0 	.word	0x204025e0
  403a1c:	204025c0 	.word	0x204025c0
  403a20:	0040119f 	.word	0x0040119f
  403a24:	204025e4 	.word	0x204025e4
  403a28:	204025e8 	.word	0x204025e8
  403a2c:	00405439 	.word	0x00405439
  403a30:	0040282d 	.word	0x0040282d
  403a34:	00402be5 	.word	0x00402be5
  403a38:	004011c1 	.word	0x004011c1
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
  403a3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  403a3e:	b12b      	cbz	r3, 403a4c <tcp_receive+0x2e8>
  403a40:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  403a42:	499f      	ldr	r1, [pc, #636]	; (403cc0 <tcp_receive+0x55c>)
  403a44:	6809      	ldr	r1, [r1, #0]
  403a46:	1a52      	subs	r2, r2, r1
  403a48:	2a00      	cmp	r2, #0
  403a4a:	db23      	blt.n	403a94 <tcp_receive+0x330>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
  403a4c:	4b9d      	ldr	r3, [pc, #628]	; (403cc4 <tcp_receive+0x560>)
  403a4e:	881b      	ldrh	r3, [r3, #0]
  403a50:	2b00      	cmp	r3, #0
  403a52:	f000 825c 	beq.w	403f0e <tcp_receive+0x7aa>
  403a56:	7e22      	ldrb	r2, [r4, #24]
  403a58:	2a06      	cmp	r2, #6
  403a5a:	f200 8258 	bhi.w	403f0e <tcp_receive+0x7aa>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)){
  403a5e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  403a60:	4a99      	ldr	r2, [pc, #612]	; (403cc8 <tcp_receive+0x564>)
  403a62:	6812      	ldr	r2, [r2, #0]
  403a64:	1a8d      	subs	r5, r1, r2
  403a66:	2d01      	cmp	r5, #1
  403a68:	d405      	bmi.n	403a76 <tcp_receive+0x312>
  403a6a:	f1c2 0001 	rsb	r0, r2, #1
  403a6e:	1ac3      	subs	r3, r0, r3
  403a70:	440b      	add	r3, r1
  403a72:	2b00      	cmp	r3, #0
  403a74:	dd2f      	ble.n	403ad6 <tcp_receive+0x372>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
  403a76:	1a53      	subs	r3, r2, r1
  403a78:	2b00      	cmp	r3, #0
  403a7a:	db56      	blt.n	403b2a <tcp_receive+0x3c6>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
  403a7c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  403a7e:	f1c3 0301 	rsb	r3, r3, #1
  403a82:	4413      	add	r3, r2
  403a84:	1a5b      	subs	r3, r3, r1
  403a86:	2b00      	cmp	r3, #0
  403a88:	dd54      	ble.n	403b34 <tcp_receive+0x3d0>
      tcp_send_empty_ack(pcb);
  403a8a:	4620      	mov	r0, r4
  403a8c:	4b8f      	ldr	r3, [pc, #572]	; (403ccc <tcp_receive+0x568>)
  403a8e:	4798      	blx	r3
  403a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      m = m - (pcb->sa >> 3);
  403a94:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
      m = (s16_t)(tcp_ticks - pcb->rttest);
  403a98:	4a8d      	ldr	r2, [pc, #564]	; (403cd0 <tcp_receive+0x56c>)
  403a9a:	6812      	ldr	r2, [r2, #0]
  403a9c:	1ad3      	subs	r3, r2, r3
      m = m - (pcb->sa >> 3);
  403a9e:	eba3 03e1 	sub.w	r3, r3, r1, asr #3
  403aa2:	b29b      	uxth	r3, r3
  403aa4:	b218      	sxth	r0, r3
      pcb->sa += m;
  403aa6:	185a      	adds	r2, r3, r1
  403aa8:	b212      	sxth	r2, r2
  403aaa:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      if (m < 0) {
  403aae:	2800      	cmp	r0, #0
  403ab0:	db0e      	blt.n	403ad0 <tcp_receive+0x36c>
      m = m - (pcb->sv >> 2);
  403ab2:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
      pcb->sv += m;
  403ab6:	eba3 03a3 	sub.w	r3, r3, r3, asr #2
  403aba:	4403      	add	r3, r0
  403abc:	b29b      	uxth	r3, r3
  403abe:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  403ac2:	eb03 03e2 	add.w	r3, r3, r2, asr #3
  403ac6:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
      pcb->rttest = 0;
  403aca:	2300      	movs	r3, #0
  403acc:	63a3      	str	r3, [r4, #56]	; 0x38
  403ace:	e7bd      	b.n	403a4c <tcp_receive+0x2e8>
        m = -m;
  403ad0:	425b      	negs	r3, r3
  403ad2:	b218      	sxth	r0, r3
  403ad4:	e7ed      	b.n	403ab2 <tcp_receive+0x34e>
      off = pcb->rcv_nxt - seqno;
  403ad6:	462b      	mov	r3, r5
      p = inseg.p;
  403ad8:	4a7e      	ldr	r2, [pc, #504]	; (403cd4 <tcp_receive+0x570>)
  403ada:	6850      	ldr	r0, [r2, #4]
      if (inseg.p->len < off) {
  403adc:	8942      	ldrh	r2, [r0, #10]
  403ade:	4295      	cmp	r5, r2
  403ae0:	dd1e      	ble.n	403b20 <tcp_receive+0x3bc>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
  403ae2:	8901      	ldrh	r1, [r0, #8]
  403ae4:	1b49      	subs	r1, r1, r5
  403ae6:	b289      	uxth	r1, r1
          p->len = 0;
  403ae8:	2500      	movs	r5, #0
          off -= p->len;
  403aea:	1a9b      	subs	r3, r3, r2
          p->tot_len = new_tot_len;
  403aec:	8101      	strh	r1, [r0, #8]
          p->len = 0;
  403aee:	8145      	strh	r5, [r0, #10]
          p = p->next;
  403af0:	6800      	ldr	r0, [r0, #0]
        while (p->len < off) {
  403af2:	8942      	ldrh	r2, [r0, #10]
  403af4:	429a      	cmp	r2, r3
  403af6:	dbf8      	blt.n	403aea <tcp_receive+0x386>
        if(pbuf_header(p, (s16_t)-off)) {
  403af8:	425b      	negs	r3, r3
  403afa:	b219      	sxth	r1, r3
  403afc:	4b76      	ldr	r3, [pc, #472]	; (403cd8 <tcp_receive+0x574>)
  403afe:	4798      	blx	r3
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
  403b00:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  403b02:	4974      	ldr	r1, [pc, #464]	; (403cd4 <tcp_receive+0x570>)
  403b04:	4870      	ldr	r0, [pc, #448]	; (403cc8 <tcp_receive+0x564>)
  403b06:	6803      	ldr	r3, [r0, #0]
  403b08:	890d      	ldrh	r5, [r1, #8]
  403b0a:	442b      	add	r3, r5
  403b0c:	1a9b      	subs	r3, r3, r2
  403b0e:	810b      	strh	r3, [r1, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
  403b10:	68cb      	ldr	r3, [r1, #12]
  403b12:	6002      	str	r2, [r0, #0]
  403b14:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
  403b16:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  403b18:	1a53      	subs	r3, r2, r1
  403b1a:	2b00      	cmp	r3, #0
  403b1c:	daae      	bge.n	403a7c <tcp_receive+0x318>
  403b1e:	e7b4      	b.n	403a8a <tcp_receive+0x326>
        if(pbuf_header(inseg.p, (s16_t)-off)) {
  403b20:	4269      	negs	r1, r5
  403b22:	b209      	sxth	r1, r1
  403b24:	4b6c      	ldr	r3, [pc, #432]	; (403cd8 <tcp_receive+0x574>)
  403b26:	4798      	blx	r3
  403b28:	e7ea      	b.n	403b00 <tcp_receive+0x39c>
        tcp_ack_now(pcb);
  403b2a:	7fa3      	ldrb	r3, [r4, #30]
  403b2c:	f043 0302 	orr.w	r3, r3, #2
  403b30:	77a3      	strb	r3, [r4, #30]
  403b32:	e7aa      	b.n	403a8a <tcp_receive+0x326>
      if (pcb->rcv_nxt == seqno) {
  403b34:	428a      	cmp	r2, r1
  403b36:	d013      	beq.n	403b60 <tcp_receive+0x3fc>
        tcp_send_empty_ack(pcb);
  403b38:	4620      	mov	r0, r4
  403b3a:	4b64      	ldr	r3, [pc, #400]	; (403ccc <tcp_receive+0x568>)
  403b3c:	4798      	blx	r3
        if (pcb->ooseq == NULL) {
  403b3e:	6f66      	ldr	r6, [r4, #116]	; 0x74
  403b40:	2e00      	cmp	r6, #0
  403b42:	f000 812d 	beq.w	403da0 <tcp_receive+0x63c>
            if (seqno == next->tcphdr->seqno) {
  403b46:	68f1      	ldr	r1, [r6, #12]
  403b48:	684a      	ldr	r2, [r1, #4]
  403b4a:	4b5f      	ldr	r3, [pc, #380]	; (403cc8 <tcp_receive+0x564>)
  403b4c:	6818      	ldr	r0, [r3, #0]
  403b4e:	4282      	cmp	r2, r0
  403b50:	f000 812c 	beq.w	403dac <tcp_receive+0x648>
  403b54:	2700      	movs	r7, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
  403b56:	f100 3eff 	add.w	lr, r0, #4294967295
  403b5a:	f100 0c01 	add.w	ip, r0, #1
  403b5e:	e148      	b.n	403df2 <tcp_receive+0x68e>
        tcplen = TCP_TCPLEN(&inseg);
  403b60:	4b5c      	ldr	r3, [pc, #368]	; (403cd4 <tcp_receive+0x570>)
  403b62:	891d      	ldrh	r5, [r3, #8]
  403b64:	68db      	ldr	r3, [r3, #12]
  403b66:	8998      	ldrh	r0, [r3, #12]
  403b68:	4b5c      	ldr	r3, [pc, #368]	; (403cdc <tcp_receive+0x578>)
  403b6a:	4798      	blx	r3
  403b6c:	f010 0303 	ands.w	r3, r0, #3
  403b70:	bf18      	it	ne
  403b72:	2301      	movne	r3, #1
  403b74:	442b      	add	r3, r5
  403b76:	b29b      	uxth	r3, r3
  403b78:	4a52      	ldr	r2, [pc, #328]	; (403cc4 <tcp_receive+0x560>)
  403b7a:	8013      	strh	r3, [r2, #0]
        if (tcplen > pcb->rcv_wnd) {
  403b7c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
  403b7e:	429a      	cmp	r2, r3
  403b80:	d317      	bcc.n	403bb2 <tcp_receive+0x44e>
        if (pcb->ooseq != NULL) {
  403b82:	6f63      	ldr	r3, [r4, #116]	; 0x74
  403b84:	2b00      	cmp	r3, #0
  403b86:	f000 81ef 	beq.w	403f68 <tcp_receive+0x804>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  403b8a:	4b52      	ldr	r3, [pc, #328]	; (403cd4 <tcp_receive+0x570>)
  403b8c:	68db      	ldr	r3, [r3, #12]
  403b8e:	8998      	ldrh	r0, [r3, #12]
  403b90:	4b52      	ldr	r3, [pc, #328]	; (403cdc <tcp_receive+0x578>)
  403b92:	4798      	blx	r3
  403b94:	f010 0f01 	tst.w	r0, #1
  403b98:	d042      	beq.n	403c20 <tcp_receive+0x4bc>
            while (pcb->ooseq != NULL) {
  403b9a:	6f60      	ldr	r0, [r4, #116]	; 0x74
  403b9c:	2800      	cmp	r0, #0
  403b9e:	f000 81e3 	beq.w	403f68 <tcp_receive+0x804>
              tcp_seg_free(old_ooseq);
  403ba2:	4d4f      	ldr	r5, [pc, #316]	; (403ce0 <tcp_receive+0x57c>)
              pcb->ooseq = pcb->ooseq->next;
  403ba4:	6803      	ldr	r3, [r0, #0]
  403ba6:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
  403ba8:	47a8      	blx	r5
            while (pcb->ooseq != NULL) {
  403baa:	6f60      	ldr	r0, [r4, #116]	; 0x74
  403bac:	2800      	cmp	r0, #0
  403bae:	d1f9      	bne.n	403ba4 <tcp_receive+0x440>
  403bb0:	e1da      	b.n	403f68 <tcp_receive+0x804>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  403bb2:	4b48      	ldr	r3, [pc, #288]	; (403cd4 <tcp_receive+0x570>)
  403bb4:	68db      	ldr	r3, [r3, #12]
  403bb6:	8998      	ldrh	r0, [r3, #12]
  403bb8:	4b48      	ldr	r3, [pc, #288]	; (403cdc <tcp_receive+0x578>)
  403bba:	4798      	blx	r3
  403bbc:	f010 0f01 	tst.w	r0, #1
  403bc0:	d11f      	bne.n	403c02 <tcp_receive+0x49e>
          inseg.len = pcb->rcv_wnd;
  403bc2:	4b44      	ldr	r3, [pc, #272]	; (403cd4 <tcp_receive+0x570>)
  403bc4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
  403bc6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  403bc8:	68db      	ldr	r3, [r3, #12]
  403bca:	8998      	ldrh	r0, [r3, #12]
  403bcc:	4b43      	ldr	r3, [pc, #268]	; (403cdc <tcp_receive+0x578>)
  403bce:	4798      	blx	r3
  403bd0:	f010 0f02 	tst.w	r0, #2
  403bd4:	d003      	beq.n	403bde <tcp_receive+0x47a>
            inseg.len -= 1;
  403bd6:	4a3f      	ldr	r2, [pc, #252]	; (403cd4 <tcp_receive+0x570>)
  403bd8:	8913      	ldrh	r3, [r2, #8]
  403bda:	3b01      	subs	r3, #1
  403bdc:	8113      	strh	r3, [r2, #8]
          pbuf_realloc(inseg.p, inseg.len);
  403bde:	4d3d      	ldr	r5, [pc, #244]	; (403cd4 <tcp_receive+0x570>)
  403be0:	8929      	ldrh	r1, [r5, #8]
  403be2:	6868      	ldr	r0, [r5, #4]
  403be4:	4b3f      	ldr	r3, [pc, #252]	; (403ce4 <tcp_receive+0x580>)
  403be6:	4798      	blx	r3
          tcplen = TCP_TCPLEN(&inseg);
  403be8:	892e      	ldrh	r6, [r5, #8]
  403bea:	68eb      	ldr	r3, [r5, #12]
  403bec:	8998      	ldrh	r0, [r3, #12]
  403bee:	4b3b      	ldr	r3, [pc, #236]	; (403cdc <tcp_receive+0x578>)
  403bf0:	4798      	blx	r3
  403bf2:	f010 0003 	ands.w	r0, r0, #3
  403bf6:	bf18      	it	ne
  403bf8:	2001      	movne	r0, #1
  403bfa:	4406      	add	r6, r0
  403bfc:	4b31      	ldr	r3, [pc, #196]	; (403cc4 <tcp_receive+0x560>)
  403bfe:	801e      	strh	r6, [r3, #0]
  403c00:	e7bf      	b.n	403b82 <tcp_receive+0x41e>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) &~ TCP_FIN);
  403c02:	4b34      	ldr	r3, [pc, #208]	; (403cd4 <tcp_receive+0x570>)
  403c04:	68de      	ldr	r6, [r3, #12]
  403c06:	89b5      	ldrh	r5, [r6, #12]
  403c08:	4628      	mov	r0, r5
  403c0a:	4b34      	ldr	r3, [pc, #208]	; (403cdc <tcp_receive+0x578>)
  403c0c:	4798      	blx	r3
  403c0e:	f000 003e 	and.w	r0, r0, #62	; 0x3e
  403c12:	4b35      	ldr	r3, [pc, #212]	; (403ce8 <tcp_receive+0x584>)
  403c14:	4798      	blx	r3
  403c16:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
  403c1a:	4305      	orrs	r5, r0
  403c1c:	81b5      	strh	r5, [r6, #12]
  403c1e:	e7d0      	b.n	403bc2 <tcp_receive+0x45e>
            next = pcb->ooseq;
  403c20:	f8d4 9074 	ldr.w	r9, [r4, #116]	; 0x74
            while (next &&
  403c24:	f1b9 0f00 	cmp.w	r9, #0
  403c28:	f000 819c 	beq.w	403f64 <tcp_receive+0x800>
                   TCP_SEQ_GEQ(seqno + tcplen,
  403c2c:	f8d9 200c 	ldr.w	r2, [r9, #12]
  403c30:	4b24      	ldr	r3, [pc, #144]	; (403cc4 <tcp_receive+0x560>)
  403c32:	881b      	ldrh	r3, [r3, #0]
  403c34:	4924      	ldr	r1, [pc, #144]	; (403cc8 <tcp_receive+0x564>)
  403c36:	6809      	ldr	r1, [r1, #0]
  403c38:	440b      	add	r3, r1
  403c3a:	6851      	ldr	r1, [r2, #4]
  403c3c:	1a5b      	subs	r3, r3, r1
  403c3e:	f8b9 1008 	ldrh.w	r1, [r9, #8]
  403c42:	1a5b      	subs	r3, r3, r1
            while (next &&
  403c44:	2b00      	cmp	r3, #0
  403c46:	f2c0 81c0 	blt.w	403fca <tcp_receive+0x866>
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
  403c4a:	4e24      	ldr	r6, [pc, #144]	; (403cdc <tcp_receive+0x578>)
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
  403c4c:	4f21      	ldr	r7, [pc, #132]	; (403cd4 <tcp_receive+0x570>)
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
  403c4e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 403ce8 <tcp_receive+0x584>
  403c52:	e015      	b.n	403c80 <tcp_receive+0x51c>
              next = next->next;
  403c54:	f8d9 5000 	ldr.w	r5, [r9]
              tcp_seg_free(prev);
  403c58:	4648      	mov	r0, r9
  403c5a:	4b21      	ldr	r3, [pc, #132]	; (403ce0 <tcp_receive+0x57c>)
  403c5c:	4798      	blx	r3
            while (next &&
  403c5e:	2d00      	cmp	r5, #0
  403c60:	f000 8180 	beq.w	403f64 <tcp_receive+0x800>
                   TCP_SEQ_GEQ(seqno + tcplen,
  403c64:	68ea      	ldr	r2, [r5, #12]
  403c66:	4b17      	ldr	r3, [pc, #92]	; (403cc4 <tcp_receive+0x560>)
  403c68:	881b      	ldrh	r3, [r3, #0]
  403c6a:	4917      	ldr	r1, [pc, #92]	; (403cc8 <tcp_receive+0x564>)
  403c6c:	6809      	ldr	r1, [r1, #0]
  403c6e:	440b      	add	r3, r1
  403c70:	6851      	ldr	r1, [r2, #4]
  403c72:	1a5b      	subs	r3, r3, r1
  403c74:	8929      	ldrh	r1, [r5, #8]
  403c76:	1a5b      	subs	r3, r3, r1
            while (next &&
  403c78:	2b00      	cmp	r3, #0
  403c7a:	f2c0 81a7 	blt.w	403fcc <tcp_receive+0x868>
              next = next->next;
  403c7e:	46a9      	mov	r9, r5
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
  403c80:	8990      	ldrh	r0, [r2, #12]
  403c82:	47b0      	blx	r6
  403c84:	f010 0f01 	tst.w	r0, #1
  403c88:	d0e4      	beq.n	403c54 <tcp_receive+0x4f0>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
  403c8a:	68fb      	ldr	r3, [r7, #12]
  403c8c:	8998      	ldrh	r0, [r3, #12]
  403c8e:	47b0      	blx	r6
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
  403c90:	f010 0f02 	tst.w	r0, #2
  403c94:	d1de      	bne.n	403c54 <tcp_receive+0x4f0>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
  403c96:	f8d7 a00c 	ldr.w	sl, [r7, #12]
  403c9a:	f8ba 500c 	ldrh.w	r5, [sl, #12]
  403c9e:	2001      	movs	r0, #1
  403ca0:	47c0      	blx	r8
  403ca2:	4328      	orrs	r0, r5
  403ca4:	f8aa 000c 	strh.w	r0, [sl, #12]
                tcplen = TCP_TCPLEN(&inseg);
  403ca8:	893d      	ldrh	r5, [r7, #8]
  403caa:	68fb      	ldr	r3, [r7, #12]
  403cac:	8998      	ldrh	r0, [r3, #12]
  403cae:	47b0      	blx	r6
  403cb0:	f010 0003 	ands.w	r0, r0, #3
  403cb4:	bf18      	it	ne
  403cb6:	2001      	movne	r0, #1
  403cb8:	4405      	add	r5, r0
  403cba:	4b02      	ldr	r3, [pc, #8]	; (403cc4 <tcp_receive+0x560>)
  403cbc:	801d      	strh	r5, [r3, #0]
  403cbe:	e7c9      	b.n	403c54 <tcp_receive+0x4f0>
  403cc0:	204025c0 	.word	0x204025c0
  403cc4:	204025e8 	.word	0x204025e8
  403cc8:	204025e0 	.word	0x204025e0
  403ccc:	00404fb5 	.word	0x00404fb5
  403cd0:	20404968 	.word	0x20404968
  403cd4:	204025c8 	.word	0x204025c8
  403cd8:	004025bf 	.word	0x004025bf
  403cdc:	0040119f 	.word	0x0040119f
  403ce0:	00402be5 	.word	0x00402be5
  403ce4:	004027cd 	.word	0x004027cd
  403ce8:	00401195 	.word	0x00401195
              recv_data = cseg->p;
  403cec:	4b91      	ldr	r3, [pc, #580]	; (403f34 <tcp_receive+0x7d0>)
  403cee:	6019      	str	r1, [r3, #0]
            cseg->p = NULL;
  403cf0:	2300      	movs	r3, #0
  403cf2:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  403cf4:	68eb      	ldr	r3, [r5, #12]
  403cf6:	8998      	ldrh	r0, [r3, #12]
  403cf8:	47b0      	blx	r6
  403cfa:	f010 0f01 	tst.w	r0, #1
  403cfe:	d007      	beq.n	403d10 <tcp_receive+0x5ac>
            recv_flags |= TF_GOT_FIN;
  403d00:	4a8d      	ldr	r2, [pc, #564]	; (403f38 <tcp_receive+0x7d4>)
  403d02:	7813      	ldrb	r3, [r2, #0]
  403d04:	f043 0320 	orr.w	r3, r3, #32
  403d08:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
  403d0a:	7e23      	ldrb	r3, [r4, #24]
  403d0c:	2b04      	cmp	r3, #4
  403d0e:	d034      	beq.n	403d7a <tcp_receive+0x616>
          pcb->ooseq = cseg->next;
  403d10:	682b      	ldr	r3, [r5, #0]
  403d12:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
  403d14:	4628      	mov	r0, r5
  403d16:	4b89      	ldr	r3, [pc, #548]	; (403f3c <tcp_receive+0x7d8>)
  403d18:	4798      	blx	r3
        while (pcb->ooseq != NULL &&
  403d1a:	6f65      	ldr	r5, [r4, #116]	; 0x74
  403d1c:	2d00      	cmp	r5, #0
  403d1e:	d02f      	beq.n	403d80 <tcp_receive+0x61c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
  403d20:	68eb      	ldr	r3, [r5, #12]
  403d22:	685a      	ldr	r2, [r3, #4]
        while (pcb->ooseq != NULL &&
  403d24:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  403d26:	428a      	cmp	r2, r1
  403d28:	d12a      	bne.n	403d80 <tcp_receive+0x61c>
          seqno = pcb->ooseq->tcphdr->seqno;
  403d2a:	f8c8 2000 	str.w	r2, [r8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
  403d2e:	f8b5 9008 	ldrh.w	r9, [r5, #8]
  403d32:	8998      	ldrh	r0, [r3, #12]
  403d34:	47b0      	blx	r6
  403d36:	f010 0003 	ands.w	r0, r0, #3
  403d3a:	bf18      	it	ne
  403d3c:	2001      	movne	r0, #1
  403d3e:	4448      	add	r0, r9
  403d40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  403d42:	4418      	add	r0, r3
  403d44:	62a0      	str	r0, [r4, #40]	; 0x28
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
  403d46:	f8b5 9008 	ldrh.w	r9, [r5, #8]
  403d4a:	68eb      	ldr	r3, [r5, #12]
  403d4c:	8998      	ldrh	r0, [r3, #12]
  403d4e:	47b0      	blx	r6
  403d50:	f010 0003 	ands.w	r0, r0, #3
  403d54:	bf18      	it	ne
  403d56:	2001      	movne	r0, #1
  403d58:	4448      	add	r0, r9
  403d5a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  403d5c:	1a18      	subs	r0, r3, r0
  403d5e:	85a0      	strh	r0, [r4, #44]	; 0x2c
          tcp_update_rcv_ann_wnd(pcb);
  403d60:	4620      	mov	r0, r4
  403d62:	47b8      	blx	r7
          if (cseg->p->tot_len > 0) {
  403d64:	6869      	ldr	r1, [r5, #4]
  403d66:	890b      	ldrh	r3, [r1, #8]
  403d68:	2b00      	cmp	r3, #0
  403d6a:	d0c3      	beq.n	403cf4 <tcp_receive+0x590>
            if (recv_data) {
  403d6c:	4b71      	ldr	r3, [pc, #452]	; (403f34 <tcp_receive+0x7d0>)
  403d6e:	6818      	ldr	r0, [r3, #0]
  403d70:	2800      	cmp	r0, #0
  403d72:	d0bb      	beq.n	403cec <tcp_receive+0x588>
              pbuf_cat(recv_data, cseg->p);
  403d74:	4b72      	ldr	r3, [pc, #456]	; (403f40 <tcp_receive+0x7dc>)
  403d76:	4798      	blx	r3
  403d78:	e7ba      	b.n	403cf0 <tcp_receive+0x58c>
              pcb->state = CLOSE_WAIT;
  403d7a:	2307      	movs	r3, #7
  403d7c:	7623      	strb	r3, [r4, #24]
  403d7e:	e7c7      	b.n	403d10 <tcp_receive+0x5ac>
        tcp_ack(pcb);
  403d80:	7fa3      	ldrb	r3, [r4, #30]
  403d82:	f013 0f01 	tst.w	r3, #1
  403d86:	d006      	beq.n	403d96 <tcp_receive+0x632>
  403d88:	f023 0301 	bic.w	r3, r3, #1
  403d8c:	f043 0302 	orr.w	r3, r3, #2
  403d90:	77a3      	strb	r3, [r4, #30]
  403d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403d96:	f043 0301 	orr.w	r3, r3, #1
  403d9a:	77a3      	strb	r3, [r4, #30]
  403d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          pcb->ooseq = tcp_seg_copy(&inseg);
  403da0:	4868      	ldr	r0, [pc, #416]	; (403f44 <tcp_receive+0x7e0>)
  403da2:	4b69      	ldr	r3, [pc, #420]	; (403f48 <tcp_receive+0x7e4>)
  403da4:	4798      	blx	r3
  403da6:	6760      	str	r0, [r4, #116]	; 0x74
  403da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (seqno == next->tcphdr->seqno) {
  403dac:	4635      	mov	r5, r6
  403dae:	2600      	movs	r6, #0
              if (inseg.len > next->len) {
  403db0:	4b64      	ldr	r3, [pc, #400]	; (403f44 <tcp_receive+0x7e0>)
  403db2:	891a      	ldrh	r2, [r3, #8]
  403db4:	892b      	ldrh	r3, [r5, #8]
  403db6:	429a      	cmp	r2, r3
  403db8:	d94f      	bls.n	403e5a <tcp_receive+0x6f6>
                cseg = tcp_seg_copy(&inseg);
  403dba:	4862      	ldr	r0, [pc, #392]	; (403f44 <tcp_receive+0x7e0>)
  403dbc:	4b62      	ldr	r3, [pc, #392]	; (403f48 <tcp_receive+0x7e4>)
  403dbe:	4798      	blx	r3
                if (cseg != NULL) {
  403dc0:	4603      	mov	r3, r0
  403dc2:	2800      	cmp	r0, #0
  403dc4:	d049      	beq.n	403e5a <tcp_receive+0x6f6>
                  if (prev != NULL) {
  403dc6:	b136      	cbz	r6, 403dd6 <tcp_receive+0x672>
                    prev->next = cseg;
  403dc8:	6030      	str	r0, [r6, #0]
                  tcp_oos_insert_segment(cseg, next);
  403dca:	4629      	mov	r1, r5
  403dcc:	4618      	mov	r0, r3
  403dce:	4b5f      	ldr	r3, [pc, #380]	; (403f4c <tcp_receive+0x7e8>)
  403dd0:	4798      	blx	r3
  403dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    pcb->ooseq = cseg;
  403dd6:	6760      	str	r0, [r4, #116]	; 0x74
  403dd8:	e7f7      	b.n	403dca <tcp_receive+0x666>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
  403dda:	1a83      	subs	r3, r0, r2
  403ddc:	2b00      	cmp	r3, #0
  403dde:	db2f      	blt.n	403e40 <tcp_receive+0x6dc>
              if (next->next == NULL &&
  403de0:	6835      	ldr	r5, [r6, #0]
  403de2:	2d00      	cmp	r5, #0
  403de4:	d036      	beq.n	403e54 <tcp_receive+0x6f0>
            if (seqno == next->tcphdr->seqno) {
  403de6:	68e9      	ldr	r1, [r5, #12]
  403de8:	684a      	ldr	r2, [r1, #4]
  403dea:	4637      	mov	r7, r6
  403dec:	4282      	cmp	r2, r0
  403dee:	d0df      	beq.n	403db0 <tcp_receive+0x64c>
              if (next->next == NULL &&
  403df0:	462e      	mov	r6, r5
              if (prev == NULL) {
  403df2:	2f00      	cmp	r7, #0
  403df4:	d0f1      	beq.n	403dda <tcp_receive+0x676>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
  403df6:	68fb      	ldr	r3, [r7, #12]
  403df8:	685b      	ldr	r3, [r3, #4]
  403dfa:	ebae 0303 	sub.w	r3, lr, r3
  403dfe:	2b00      	cmp	r3, #0
  403e00:	dbee      	blt.n	403de0 <tcp_receive+0x67c>
  403e02:	ebac 0302 	sub.w	r3, ip, r2
  403e06:	2b00      	cmp	r3, #0
  403e08:	dcea      	bgt.n	403de0 <tcp_receive+0x67c>
                  cseg = tcp_seg_copy(&inseg);
  403e0a:	484e      	ldr	r0, [pc, #312]	; (403f44 <tcp_receive+0x7e0>)
  403e0c:	4b4e      	ldr	r3, [pc, #312]	; (403f48 <tcp_receive+0x7e4>)
  403e0e:	4798      	blx	r3
                  if (cseg != NULL) {
  403e10:	4604      	mov	r4, r0
  403e12:	b310      	cbz	r0, 403e5a <tcp_receive+0x6f6>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
  403e14:	68fb      	ldr	r3, [r7, #12]
  403e16:	6859      	ldr	r1, [r3, #4]
  403e18:	4b4d      	ldr	r3, [pc, #308]	; (403f50 <tcp_receive+0x7ec>)
  403e1a:	681b      	ldr	r3, [r3, #0]
  403e1c:	893a      	ldrh	r2, [r7, #8]
  403e1e:	440a      	add	r2, r1
  403e20:	1ad2      	subs	r2, r2, r3
  403e22:	2a00      	cmp	r2, #0
  403e24:	dd05      	ble.n	403e32 <tcp_receive+0x6ce>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
  403e26:	1a5b      	subs	r3, r3, r1
  403e28:	b299      	uxth	r1, r3
  403e2a:	8139      	strh	r1, [r7, #8]
                      pbuf_realloc(prev->p, prev->len);
  403e2c:	6878      	ldr	r0, [r7, #4]
  403e2e:	4b49      	ldr	r3, [pc, #292]	; (403f54 <tcp_receive+0x7f0>)
  403e30:	4798      	blx	r3
                    prev->next = cseg;
  403e32:	603c      	str	r4, [r7, #0]
                    tcp_oos_insert_segment(cseg, next);
  403e34:	4631      	mov	r1, r6
  403e36:	4620      	mov	r0, r4
  403e38:	4b44      	ldr	r3, [pc, #272]	; (403f4c <tcp_receive+0x7e8>)
  403e3a:	4798      	blx	r3
  403e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                  cseg = tcp_seg_copy(&inseg);
  403e40:	4840      	ldr	r0, [pc, #256]	; (403f44 <tcp_receive+0x7e0>)
  403e42:	4b41      	ldr	r3, [pc, #260]	; (403f48 <tcp_receive+0x7e4>)
  403e44:	4798      	blx	r3
                  if (cseg != NULL) {
  403e46:	b140      	cbz	r0, 403e5a <tcp_receive+0x6f6>
                    pcb->ooseq = cseg;
  403e48:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
  403e4a:	4631      	mov	r1, r6
  403e4c:	4b3f      	ldr	r3, [pc, #252]	; (403f4c <tcp_receive+0x7e8>)
  403e4e:	4798      	blx	r3
  403e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
  403e54:	1a82      	subs	r2, r0, r2
              if (next->next == NULL &&
  403e56:	2a00      	cmp	r2, #0
  403e58:	dc01      	bgt.n	403e5e <tcp_receive+0x6fa>
  403e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  403e5e:	8988      	ldrh	r0, [r1, #12]
  403e60:	4b3d      	ldr	r3, [pc, #244]	; (403f58 <tcp_receive+0x7f4>)
  403e62:	4798      	blx	r3
  403e64:	f010 0f01 	tst.w	r0, #1
  403e68:	d1f7      	bne.n	403e5a <tcp_receive+0x6f6>
                next->next = tcp_seg_copy(&inseg);
  403e6a:	4836      	ldr	r0, [pc, #216]	; (403f44 <tcp_receive+0x7e0>)
  403e6c:	4b36      	ldr	r3, [pc, #216]	; (403f48 <tcp_receive+0x7e4>)
  403e6e:	4798      	blx	r3
  403e70:	6030      	str	r0, [r6, #0]
                if (next->next != NULL) {
  403e72:	2800      	cmp	r0, #0
  403e74:	d0f1      	beq.n	403e5a <tcp_receive+0x6f6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
  403e76:	68f3      	ldr	r3, [r6, #12]
  403e78:	6859      	ldr	r1, [r3, #4]
  403e7a:	4b35      	ldr	r3, [pc, #212]	; (403f50 <tcp_receive+0x7ec>)
  403e7c:	681b      	ldr	r3, [r3, #0]
  403e7e:	8932      	ldrh	r2, [r6, #8]
  403e80:	440a      	add	r2, r1
  403e82:	1ad2      	subs	r2, r2, r3
  403e84:	2a00      	cmp	r2, #0
  403e86:	dd05      	ble.n	403e94 <tcp_receive+0x730>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
  403e88:	1a5b      	subs	r3, r3, r1
  403e8a:	b299      	uxth	r1, r3
  403e8c:	8131      	strh	r1, [r6, #8]
                    pbuf_realloc(next->p, next->len);
  403e8e:	6870      	ldr	r0, [r6, #4]
  403e90:	4b30      	ldr	r3, [pc, #192]	; (403f54 <tcp_receive+0x7f0>)
  403e92:	4798      	blx	r3
                  if ((u32_t)tcplen + seqno > pcb->rcv_nxt + (u32_t)pcb->rcv_wnd) {
  403e94:	4b31      	ldr	r3, [pc, #196]	; (403f5c <tcp_receive+0x7f8>)
  403e96:	881a      	ldrh	r2, [r3, #0]
  403e98:	4b2d      	ldr	r3, [pc, #180]	; (403f50 <tcp_receive+0x7ec>)
  403e9a:	681b      	ldr	r3, [r3, #0]
  403e9c:	441a      	add	r2, r3
  403e9e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  403ea0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  403ea2:	440b      	add	r3, r1
  403ea4:	429a      	cmp	r2, r3
  403ea6:	d9d8      	bls.n	403e5a <tcp_receive+0x6f6>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
  403ea8:	6833      	ldr	r3, [r6, #0]
  403eaa:	68db      	ldr	r3, [r3, #12]
  403eac:	8998      	ldrh	r0, [r3, #12]
  403eae:	4b2a      	ldr	r3, [pc, #168]	; (403f58 <tcp_receive+0x7f4>)
  403eb0:	4798      	blx	r3
  403eb2:	f010 0f01 	tst.w	r0, #1
  403eb6:	d11b      	bne.n	403ef0 <tcp_receive+0x78c>
                    next->next->len = pcb->rcv_nxt + pcb->rcv_wnd - seqno;
  403eb8:	6832      	ldr	r2, [r6, #0]
  403eba:	4b25      	ldr	r3, [pc, #148]	; (403f50 <tcp_receive+0x7ec>)
  403ebc:	6819      	ldr	r1, [r3, #0]
  403ebe:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  403ec0:	1a5b      	subs	r3, r3, r1
  403ec2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  403ec4:	440b      	add	r3, r1
  403ec6:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
  403ec8:	6833      	ldr	r3, [r6, #0]
  403eca:	8919      	ldrh	r1, [r3, #8]
  403ecc:	6858      	ldr	r0, [r3, #4]
  403ece:	4b21      	ldr	r3, [pc, #132]	; (403f54 <tcp_receive+0x7f0>)
  403ed0:	4798      	blx	r3
                    tcplen = TCP_TCPLEN(next->next);
  403ed2:	6833      	ldr	r3, [r6, #0]
  403ed4:	891c      	ldrh	r4, [r3, #8]
  403ed6:	68db      	ldr	r3, [r3, #12]
  403ed8:	8998      	ldrh	r0, [r3, #12]
  403eda:	4b1f      	ldr	r3, [pc, #124]	; (403f58 <tcp_receive+0x7f4>)
  403edc:	4798      	blx	r3
  403ede:	f010 0003 	ands.w	r0, r0, #3
  403ee2:	bf18      	it	ne
  403ee4:	2001      	movne	r0, #1
  403ee6:	4404      	add	r4, r0
  403ee8:	4b1c      	ldr	r3, [pc, #112]	; (403f5c <tcp_receive+0x7f8>)
  403eea:	801c      	strh	r4, [r3, #0]
  403eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) &~ TCP_FIN);
  403ef0:	6833      	ldr	r3, [r6, #0]
  403ef2:	68df      	ldr	r7, [r3, #12]
  403ef4:	89bd      	ldrh	r5, [r7, #12]
  403ef6:	4628      	mov	r0, r5
  403ef8:	4b17      	ldr	r3, [pc, #92]	; (403f58 <tcp_receive+0x7f4>)
  403efa:	4798      	blx	r3
  403efc:	f000 003e 	and.w	r0, r0, #62	; 0x3e
  403f00:	4b17      	ldr	r3, [pc, #92]	; (403f60 <tcp_receive+0x7fc>)
  403f02:	4798      	blx	r3
  403f04:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
  403f08:	4305      	orrs	r5, r0
  403f0a:	81bd      	strh	r5, [r7, #12]
  403f0c:	e7d4      	b.n	403eb8 <tcp_receive+0x754>
    if(!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd-1)){
  403f0e:	4b10      	ldr	r3, [pc, #64]	; (403f50 <tcp_receive+0x7ec>)
  403f10:	681b      	ldr	r3, [r3, #0]
  403f12:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  403f14:	1a99      	subs	r1, r3, r2
  403f16:	2900      	cmp	r1, #0
  403f18:	db05      	blt.n	403f26 <tcp_receive+0x7c2>
  403f1a:	3301      	adds	r3, #1
  403f1c:	1a9b      	subs	r3, r3, r2
  403f1e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
  403f20:	1a9b      	subs	r3, r3, r2
  403f22:	2b00      	cmp	r3, #0
  403f24:	dd99      	ble.n	403e5a <tcp_receive+0x6f6>
      tcp_ack_now(pcb);
  403f26:	7fa3      	ldrb	r3, [r4, #30]
  403f28:	f043 0302 	orr.w	r3, r3, #2
  403f2c:	77a3      	strb	r3, [r4, #30]
}
  403f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403f32:	bf00      	nop
  403f34:	204025d8 	.word	0x204025d8
  403f38:	204025dc 	.word	0x204025dc
  403f3c:	00402be5 	.word	0x00402be5
  403f40:	0040284d 	.word	0x0040284d
  403f44:	204025c8 	.word	0x204025c8
  403f48:	00402c29 	.word	0x00402c29
  403f4c:	00403699 	.word	0x00403699
  403f50:	204025e0 	.word	0x204025e0
  403f54:	004027cd 	.word	0x004027cd
  403f58:	0040119f 	.word	0x0040119f
  403f5c:	204025e8 	.word	0x204025e8
  403f60:	00401195 	.word	0x00401195
              next = next->next;
  403f64:	2500      	movs	r5, #0
            pcb->ooseq = next;
  403f66:	6765      	str	r5, [r4, #116]	; 0x74
        pcb->rcv_nxt = seqno + tcplen;
  403f68:	4b2d      	ldr	r3, [pc, #180]	; (404020 <tcp_receive+0x8bc>)
  403f6a:	881a      	ldrh	r2, [r3, #0]
  403f6c:	4b2d      	ldr	r3, [pc, #180]	; (404024 <tcp_receive+0x8c0>)
  403f6e:	681b      	ldr	r3, [r3, #0]
  403f70:	4413      	add	r3, r2
  403f72:	62a3      	str	r3, [r4, #40]	; 0x28
        pcb->rcv_wnd -= tcplen;
  403f74:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  403f76:	1a9b      	subs	r3, r3, r2
  403f78:	85a3      	strh	r3, [r4, #44]	; 0x2c
        tcp_update_rcv_ann_wnd(pcb);
  403f7a:	4620      	mov	r0, r4
  403f7c:	4b2a      	ldr	r3, [pc, #168]	; (404028 <tcp_receive+0x8c4>)
  403f7e:	4798      	blx	r3
        if (inseg.p->tot_len > 0) {
  403f80:	4b2a      	ldr	r3, [pc, #168]	; (40402c <tcp_receive+0x8c8>)
  403f82:	685b      	ldr	r3, [r3, #4]
  403f84:	891a      	ldrh	r2, [r3, #8]
  403f86:	b122      	cbz	r2, 403f92 <tcp_receive+0x82e>
          recv_data = inseg.p;
  403f88:	4a29      	ldr	r2, [pc, #164]	; (404030 <tcp_receive+0x8cc>)
  403f8a:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
  403f8c:	2200      	movs	r2, #0
  403f8e:	4b27      	ldr	r3, [pc, #156]	; (40402c <tcp_receive+0x8c8>)
  403f90:	605a      	str	r2, [r3, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  403f92:	4b26      	ldr	r3, [pc, #152]	; (40402c <tcp_receive+0x8c8>)
  403f94:	68db      	ldr	r3, [r3, #12]
  403f96:	8998      	ldrh	r0, [r3, #12]
  403f98:	4b26      	ldr	r3, [pc, #152]	; (404034 <tcp_receive+0x8d0>)
  403f9a:	4798      	blx	r3
  403f9c:	f010 0f01 	tst.w	r0, #1
  403fa0:	d004      	beq.n	403fac <tcp_receive+0x848>
          recv_flags |= TF_GOT_FIN;
  403fa2:	4a25      	ldr	r2, [pc, #148]	; (404038 <tcp_receive+0x8d4>)
  403fa4:	7813      	ldrb	r3, [r2, #0]
  403fa6:	f043 0320 	orr.w	r3, r3, #32
  403faa:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
  403fac:	6f65      	ldr	r5, [r4, #116]	; 0x74
  403fae:	2d00      	cmp	r5, #0
  403fb0:	f43f aee6 	beq.w	403d80 <tcp_receive+0x61c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
  403fb4:	68eb      	ldr	r3, [r5, #12]
  403fb6:	685a      	ldr	r2, [r3, #4]
        while (pcb->ooseq != NULL &&
  403fb8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  403fba:	428a      	cmp	r2, r1
  403fbc:	f47f aee0 	bne.w	403d80 <tcp_receive+0x61c>
          seqno = pcb->ooseq->tcphdr->seqno;
  403fc0:	f8df 8060 	ldr.w	r8, [pc, #96]	; 404024 <tcp_receive+0x8c0>
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
  403fc4:	4e1b      	ldr	r6, [pc, #108]	; (404034 <tcp_receive+0x8d0>)
          tcp_update_rcv_ann_wnd(pcb);
  403fc6:	4f18      	ldr	r7, [pc, #96]	; (404028 <tcp_receive+0x8c4>)
  403fc8:	e6af      	b.n	403d2a <tcp_receive+0x5c6>
            next = pcb->ooseq;
  403fca:	464d      	mov	r5, r9
                TCP_SEQ_GT(seqno + tcplen,
  403fcc:	4b15      	ldr	r3, [pc, #84]	; (404024 <tcp_receive+0x8c0>)
  403fce:	6819      	ldr	r1, [r3, #0]
  403fd0:	68eb      	ldr	r3, [r5, #12]
  403fd2:	685a      	ldr	r2, [r3, #4]
  403fd4:	4b12      	ldr	r3, [pc, #72]	; (404020 <tcp_receive+0x8bc>)
  403fd6:	881b      	ldrh	r3, [r3, #0]
  403fd8:	440b      	add	r3, r1
  403fda:	1a9b      	subs	r3, r3, r2
            if (next &&
  403fdc:	2b00      	cmp	r3, #0
  403fde:	ddc2      	ble.n	403f66 <tcp_receive+0x802>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
  403fe0:	4b12      	ldr	r3, [pc, #72]	; (40402c <tcp_receive+0x8c8>)
  403fe2:	1a52      	subs	r2, r2, r1
  403fe4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  403fe6:	68db      	ldr	r3, [r3, #12]
  403fe8:	8998      	ldrh	r0, [r3, #12]
  403fea:	4b12      	ldr	r3, [pc, #72]	; (404034 <tcp_receive+0x8d0>)
  403fec:	4798      	blx	r3
  403fee:	f010 0f02 	tst.w	r0, #2
  403ff2:	d003      	beq.n	403ffc <tcp_receive+0x898>
                inseg.len -= 1;
  403ff4:	4a0d      	ldr	r2, [pc, #52]	; (40402c <tcp_receive+0x8c8>)
  403ff6:	8913      	ldrh	r3, [r2, #8]
  403ff8:	3b01      	subs	r3, #1
  403ffa:	8113      	strh	r3, [r2, #8]
              pbuf_realloc(inseg.p, inseg.len);
  403ffc:	4e0b      	ldr	r6, [pc, #44]	; (40402c <tcp_receive+0x8c8>)
  403ffe:	8931      	ldrh	r1, [r6, #8]
  404000:	6870      	ldr	r0, [r6, #4]
  404002:	4b0e      	ldr	r3, [pc, #56]	; (40403c <tcp_receive+0x8d8>)
  404004:	4798      	blx	r3
              tcplen = TCP_TCPLEN(&inseg);
  404006:	8937      	ldrh	r7, [r6, #8]
  404008:	68f3      	ldr	r3, [r6, #12]
  40400a:	8998      	ldrh	r0, [r3, #12]
  40400c:	4b09      	ldr	r3, [pc, #36]	; (404034 <tcp_receive+0x8d0>)
  40400e:	4798      	blx	r3
  404010:	f010 0003 	ands.w	r0, r0, #3
  404014:	bf18      	it	ne
  404016:	2001      	movne	r0, #1
  404018:	4407      	add	r7, r0
  40401a:	4b01      	ldr	r3, [pc, #4]	; (404020 <tcp_receive+0x8bc>)
  40401c:	801f      	strh	r7, [r3, #0]
  40401e:	e7a2      	b.n	403f66 <tcp_receive+0x802>
  404020:	204025e8 	.word	0x204025e8
  404024:	204025e0 	.word	0x204025e0
  404028:	00402b65 	.word	0x00402b65
  40402c:	204025c8 	.word	0x204025c8
  404030:	204025d8 	.word	0x204025d8
  404034:	0040119f 	.word	0x0040119f
  404038:	204025dc 	.word	0x204025dc
  40403c:	004027cd 	.word	0x004027cd

00404040 <tcp_input>:
{
  404040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404044:	b083      	sub	sp, #12
  404046:	4604      	mov	r4, r0
  404048:	460d      	mov	r5, r1
  iphdr = (struct ip_hdr *)p->payload;
  40404a:	6843      	ldr	r3, [r0, #4]
  40404c:	7819      	ldrb	r1, [r3, #0]
  40404e:	f001 010f 	and.w	r1, r1, #15
  tcphdr = (struct tcp_hdr *)((u8_t *)p->payload + IPH_HL(iphdr) * 4);
  404052:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  404056:	4a85      	ldr	r2, [pc, #532]	; (40426c <tcp_input+0x22c>)
  404058:	6013      	str	r3, [r2, #0]
  if (pbuf_header(p, -((s16_t)(IPH_HL(iphdr) * 4))) || (p->tot_len < sizeof(struct tcp_hdr))) {
  40405a:	0089      	lsls	r1, r1, #2
  40405c:	4249      	negs	r1, r1
  40405e:	4b84      	ldr	r3, [pc, #528]	; (404270 <tcp_input+0x230>)
  404060:	4798      	blx	r3
  404062:	b910      	cbnz	r0, 40406a <tcp_input+0x2a>
  404064:	8923      	ldrh	r3, [r4, #8]
  404066:	2b13      	cmp	r3, #19
  404068:	d805      	bhi.n	404076 <tcp_input+0x36>
  pbuf_free(p);
  40406a:	4620      	mov	r0, r4
  40406c:	4b81      	ldr	r3, [pc, #516]	; (404274 <tcp_input+0x234>)
  40406e:	4798      	blx	r3
}
  404070:	b003      	add	sp, #12
  404072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
  404076:	4629      	mov	r1, r5
  404078:	4b7f      	ldr	r3, [pc, #508]	; (404278 <tcp_input+0x238>)
  40407a:	6818      	ldr	r0, [r3, #0]
  40407c:	4b7f      	ldr	r3, [pc, #508]	; (40427c <tcp_input+0x23c>)
  40407e:	4798      	blx	r3
  404080:	2800      	cmp	r0, #0
  404082:	d1f2      	bne.n	40406a <tcp_input+0x2a>
      ip_addr_ismulticast(&current_iphdr_dest)) {
  404084:	4b7c      	ldr	r3, [pc, #496]	; (404278 <tcp_input+0x238>)
  404086:	681b      	ldr	r3, [r3, #0]
  404088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
  40408c:	2be0      	cmp	r3, #224	; 0xe0
  40408e:	d0ec      	beq.n	40406a <tcp_input+0x2a>
  if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
  404090:	8923      	ldrh	r3, [r4, #8]
  404092:	9300      	str	r3, [sp, #0]
  404094:	2306      	movs	r3, #6
  404096:	4a78      	ldr	r2, [pc, #480]	; (404278 <tcp_input+0x238>)
  404098:	4979      	ldr	r1, [pc, #484]	; (404280 <tcp_input+0x240>)
  40409a:	4620      	mov	r0, r4
  40409c:	4d79      	ldr	r5, [pc, #484]	; (404284 <tcp_input+0x244>)
  40409e:	47a8      	blx	r5
  4040a0:	2800      	cmp	r0, #0
  4040a2:	d1e2      	bne.n	40406a <tcp_input+0x2a>
  hdrlen = TCPH_HDRLEN(tcphdr);
  4040a4:	4b71      	ldr	r3, [pc, #452]	; (40426c <tcp_input+0x22c>)
  4040a6:	681b      	ldr	r3, [r3, #0]
  4040a8:	8998      	ldrh	r0, [r3, #12]
  4040aa:	4b77      	ldr	r3, [pc, #476]	; (404288 <tcp_input+0x248>)
  4040ac:	4798      	blx	r3
  4040ae:	0b00      	lsrs	r0, r0, #12
  if(pbuf_header(p, -(hdrlen * 4))){
  4040b0:	ebc0 3080 	rsb	r0, r0, r0, lsl #14
  4040b4:	0081      	lsls	r1, r0, #2
  4040b6:	b209      	sxth	r1, r1
  4040b8:	4620      	mov	r0, r4
  4040ba:	4b6d      	ldr	r3, [pc, #436]	; (404270 <tcp_input+0x230>)
  4040bc:	4798      	blx	r3
  4040be:	2800      	cmp	r0, #0
  4040c0:	d1d3      	bne.n	40406a <tcp_input+0x2a>
  tcphdr->src = ntohs(tcphdr->src);
  4040c2:	4d6a      	ldr	r5, [pc, #424]	; (40426c <tcp_input+0x22c>)
  4040c4:	682f      	ldr	r7, [r5, #0]
  4040c6:	8838      	ldrh	r0, [r7, #0]
  4040c8:	4e6f      	ldr	r6, [pc, #444]	; (404288 <tcp_input+0x248>)
  4040ca:	47b0      	blx	r6
  4040cc:	8038      	strh	r0, [r7, #0]
  tcphdr->dest = ntohs(tcphdr->dest);
  4040ce:	682f      	ldr	r7, [r5, #0]
  4040d0:	8878      	ldrh	r0, [r7, #2]
  4040d2:	47b0      	blx	r6
  4040d4:	8078      	strh	r0, [r7, #2]
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
  4040d6:	682f      	ldr	r7, [r5, #0]
  4040d8:	6878      	ldr	r0, [r7, #4]
  4040da:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 4042c8 <tcp_input+0x288>
  4040de:	47c0      	blx	r8
  4040e0:	6078      	str	r0, [r7, #4]
  4040e2:	4b6a      	ldr	r3, [pc, #424]	; (40428c <tcp_input+0x24c>)
  4040e4:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
  4040e6:	682f      	ldr	r7, [r5, #0]
  4040e8:	68b8      	ldr	r0, [r7, #8]
  4040ea:	47c0      	blx	r8
  4040ec:	60b8      	str	r0, [r7, #8]
  4040ee:	4b68      	ldr	r3, [pc, #416]	; (404290 <tcp_input+0x250>)
  4040f0:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = ntohs(tcphdr->wnd);
  4040f2:	682f      	ldr	r7, [r5, #0]
  4040f4:	89f8      	ldrh	r0, [r7, #14]
  4040f6:	47b0      	blx	r6
  4040f8:	81f8      	strh	r0, [r7, #14]
  flags = TCPH_FLAGS(tcphdr);
  4040fa:	682b      	ldr	r3, [r5, #0]
  4040fc:	8998      	ldrh	r0, [r3, #12]
  4040fe:	47b0      	blx	r6
  404100:	fa5f fe80 	uxtb.w	lr, r0
  404104:	f00e 023f 	and.w	r2, lr, #63	; 0x3f
  404108:	4b62      	ldr	r3, [pc, #392]	; (404294 <tcp_input+0x254>)
  40410a:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
  40410c:	f01e 0303 	ands.w	r3, lr, #3
  404110:	bf18      	it	ne
  404112:	2301      	movne	r3, #1
  404114:	8921      	ldrh	r1, [r4, #8]
  404116:	440b      	add	r3, r1
  404118:	b299      	uxth	r1, r3
  40411a:	4b5f      	ldr	r3, [pc, #380]	; (404298 <tcp_input+0x258>)
  40411c:	8019      	strh	r1, [r3, #0]
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  40411e:	4b5f      	ldr	r3, [pc, #380]	; (40429c <tcp_input+0x25c>)
  404120:	6818      	ldr	r0, [r3, #0]
  404122:	2800      	cmp	r0, #0
  404124:	f000 8085 	beq.w	404232 <tcp_input+0x1f2>
    if (pcb->remote_port == tcphdr->src &&
  404128:	682f      	ldr	r7, [r5, #0]
  40412a:	883e      	ldrh	r6, [r7, #0]
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
  40412c:	4b54      	ldr	r3, [pc, #336]	; (404280 <tcp_input+0x240>)
  40412e:	f8d3 c000 	ldr.w	ip, [r3]
       ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
  404132:	4b51      	ldr	r3, [pc, #324]	; (404278 <tcp_input+0x238>)
  404134:	f8d3 8000 	ldr.w	r8, [r3]
  404138:	4605      	mov	r5, r0
  40413a:	2200      	movs	r2, #0
  40413c:	e004      	b.n	404148 <tcp_input+0x108>
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  40413e:	68eb      	ldr	r3, [r5, #12]
  404140:	462a      	mov	r2, r5
  404142:	2b00      	cmp	r3, #0
  404144:	d075      	beq.n	404232 <tcp_input+0x1f2>
  404146:	461d      	mov	r5, r3
    if (pcb->remote_port == tcphdr->src &&
  404148:	8bab      	ldrh	r3, [r5, #28]
  40414a:	42b3      	cmp	r3, r6
  40414c:	d1f7      	bne.n	40413e <tcp_input+0xfe>
  40414e:	f8b5 901a 	ldrh.w	r9, [r5, #26]
  404152:	887b      	ldrh	r3, [r7, #2]
  404154:	4599      	cmp	r9, r3
  404156:	d1f2      	bne.n	40413e <tcp_input+0xfe>
       pcb->local_port == tcphdr->dest &&
  404158:	686b      	ldr	r3, [r5, #4]
  40415a:	4563      	cmp	r3, ip
  40415c:	d1ef      	bne.n	40413e <tcp_input+0xfe>
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
  40415e:	682b      	ldr	r3, [r5, #0]
  404160:	4543      	cmp	r3, r8
  404162:	d1ec      	bne.n	40413e <tcp_input+0xfe>
      if (prev != NULL) {
  404164:	b122      	cbz	r2, 404170 <tcp_input+0x130>
        prev->next = pcb->next;
  404166:	68eb      	ldr	r3, [r5, #12]
  404168:	60d3      	str	r3, [r2, #12]
        pcb->next = tcp_active_pcbs;
  40416a:	60e8      	str	r0, [r5, #12]
        tcp_active_pcbs = pcb;
  40416c:	4b4b      	ldr	r3, [pc, #300]	; (40429c <tcp_input+0x25c>)
  40416e:	601d      	str	r5, [r3, #0]
  if (pcb == NULL) {
  404170:	2d00      	cmp	r5, #0
  404172:	d05e      	beq.n	404232 <tcp_input+0x1f2>
    inseg.next = NULL;
  404174:	4b4a      	ldr	r3, [pc, #296]	; (4042a0 <tcp_input+0x260>)
  404176:	2200      	movs	r2, #0
  404178:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
  40417a:	8921      	ldrh	r1, [r4, #8]
  40417c:	8119      	strh	r1, [r3, #8]
    inseg.p = p;
  40417e:	605c      	str	r4, [r3, #4]
    inseg.tcphdr = tcphdr;
  404180:	60df      	str	r7, [r3, #12]
    recv_data = NULL;
  404182:	4b48      	ldr	r3, [pc, #288]	; (4042a4 <tcp_input+0x264>)
  404184:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
  404186:	4b48      	ldr	r3, [pc, #288]	; (4042a8 <tcp_input+0x268>)
  404188:	701a      	strb	r2, [r3, #0]
    if (flags & TCP_PSH) {
  40418a:	f01e 0f08 	tst.w	lr, #8
  40418e:	d003      	beq.n	404198 <tcp_input+0x158>
      p->flags |= PBUF_FLAG_PUSH;
  404190:	7b63      	ldrb	r3, [r4, #13]
  404192:	f043 0301 	orr.w	r3, r3, #1
  404196:	7363      	strb	r3, [r4, #13]
    if (pcb->refused_data != NULL) {
  404198:	6fab      	ldr	r3, [r5, #120]	; 0x78
  40419a:	b15b      	cbz	r3, 4041b4 <tcp_input+0x174>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
  40419c:	4628      	mov	r0, r5
  40419e:	4b43      	ldr	r3, [pc, #268]	; (4042ac <tcp_input+0x26c>)
  4041a0:	4798      	blx	r3
  4041a2:	f110 0f0a 	cmn.w	r0, #10
  4041a6:	d034      	beq.n	404212 <tcp_input+0x1d2>
  4041a8:	6fab      	ldr	r3, [r5, #120]	; 0x78
  4041aa:	b11b      	cbz	r3, 4041b4 <tcp_input+0x174>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
  4041ac:	4b3a      	ldr	r3, [pc, #232]	; (404298 <tcp_input+0x258>)
  4041ae:	881b      	ldrh	r3, [r3, #0]
  4041b0:	2b00      	cmp	r3, #0
  4041b2:	d12e      	bne.n	404212 <tcp_input+0x1d2>
    tcp_input_pcb = pcb;
  4041b4:	4b3e      	ldr	r3, [pc, #248]	; (4042b0 <tcp_input+0x270>)
  4041b6:	601d      	str	r5, [r3, #0]
  if (flags & TCP_RST) {
  4041b8:	4b36      	ldr	r3, [pc, #216]	; (404294 <tcp_input+0x254>)
  4041ba:	781b      	ldrb	r3, [r3, #0]
  4041bc:	f013 0f04 	tst.w	r3, #4
  4041c0:	f000 814e 	beq.w	404460 <tcp_input+0x420>
    if (pcb->state == SYN_SENT) {
  4041c4:	7e2b      	ldrb	r3, [r5, #24]
  4041c6:	2b02      	cmp	r3, #2
  4041c8:	f000 8138 	beq.w	40443c <tcp_input+0x3fc>
      if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
  4041cc:	4b2f      	ldr	r3, [pc, #188]	; (40428c <tcp_input+0x24c>)
  4041ce:	681b      	ldr	r3, [r3, #0]
  4041d0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  4041d2:	1a9b      	subs	r3, r3, r2
  4041d4:	d408      	bmi.n	4041e8 <tcp_input+0x1a8>
  4041d6:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
  4041d8:	1a9b      	subs	r3, r3, r2
  u8_t acceptable = 0;
  4041da:	2b00      	cmp	r3, #0
  4041dc:	bfcc      	ite	gt
  4041de:	2300      	movgt	r3, #0
  4041e0:	2301      	movle	r3, #1
    if (acceptable) {
  4041e2:	2b00      	cmp	r3, #0
  4041e4:	f040 8132 	bne.w	40444c <tcp_input+0x40c>
      if (recv_flags & TF_RESET) {
  4041e8:	4b2f      	ldr	r3, [pc, #188]	; (4042a8 <tcp_input+0x268>)
  4041ea:	781b      	ldrb	r3, [r3, #0]
  4041ec:	f013 0f08 	tst.w	r3, #8
  4041f0:	f000 837d 	beq.w	4048ee <tcp_input+0x8ae>
        TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_RST);
  4041f4:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  4041f8:	b11b      	cbz	r3, 404202 <tcp_input+0x1c2>
  4041fa:	f06f 010a 	mvn.w	r1, #10
  4041fe:	6928      	ldr	r0, [r5, #16]
  404200:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
  404202:	4629      	mov	r1, r5
  404204:	4825      	ldr	r0, [pc, #148]	; (40429c <tcp_input+0x25c>)
  404206:	4b2b      	ldr	r3, [pc, #172]	; (4042b4 <tcp_input+0x274>)
  404208:	4798      	blx	r3
        memp_free(MEMP_TCP_PCB, pcb);
  40420a:	4629      	mov	r1, r5
  40420c:	2001      	movs	r0, #1
  40420e:	4b2a      	ldr	r3, [pc, #168]	; (4042b8 <tcp_input+0x278>)
  404210:	4798      	blx	r3
    tcp_input_pcb = NULL;
  404212:	2300      	movs	r3, #0
  404214:	4a26      	ldr	r2, [pc, #152]	; (4042b0 <tcp_input+0x270>)
  404216:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
  404218:	4a22      	ldr	r2, [pc, #136]	; (4042a4 <tcp_input+0x264>)
  40421a:	6013      	str	r3, [r2, #0]
    if (inseg.p != NULL)
  40421c:	4b20      	ldr	r3, [pc, #128]	; (4042a0 <tcp_input+0x260>)
  40421e:	6858      	ldr	r0, [r3, #4]
  404220:	2800      	cmp	r0, #0
  404222:	f43f af25 	beq.w	404070 <tcp_input+0x30>
      pbuf_free(inseg.p);
  404226:	4b13      	ldr	r3, [pc, #76]	; (404274 <tcp_input+0x234>)
  404228:	4798      	blx	r3
      inseg.p = NULL;
  40422a:	2200      	movs	r2, #0
  40422c:	4b1c      	ldr	r3, [pc, #112]	; (4042a0 <tcp_input+0x260>)
  40422e:	605a      	str	r2, [r3, #4]
  404230:	e71e      	b.n	404070 <tcp_input+0x30>
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  404232:	4b22      	ldr	r3, [pc, #136]	; (4042bc <tcp_input+0x27c>)
  404234:	6818      	ldr	r0, [r3, #0]
  404236:	2800      	cmp	r0, #0
  404238:	d073      	beq.n	404322 <tcp_input+0x2e2>
      if (pcb->remote_port == tcphdr->src &&
  40423a:	4b0c      	ldr	r3, [pc, #48]	; (40426c <tcp_input+0x22c>)
  40423c:	681f      	ldr	r7, [r3, #0]
  40423e:	883a      	ldrh	r2, [r7, #0]
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
  404240:	4b0f      	ldr	r3, [pc, #60]	; (404280 <tcp_input+0x240>)
  404242:	f8d3 8000 	ldr.w	r8, [r3]
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
  404246:	4b0c      	ldr	r3, [pc, #48]	; (404278 <tcp_input+0x238>)
  404248:	f8d3 c000 	ldr.w	ip, [r3]
  40424c:	e040      	b.n	4042d0 <tcp_input+0x290>
  } else if (flags & TCP_FIN) {
  40424e:	f01e 0f01 	tst.w	lr, #1
  404252:	d002      	beq.n	40425a <tcp_input+0x21a>
    pcb->tmr = tcp_ticks;
  404254:	4b1a      	ldr	r3, [pc, #104]	; (4042c0 <tcp_input+0x280>)
  404256:	681b      	ldr	r3, [r3, #0]
  404258:	6243      	str	r3, [r0, #36]	; 0x24
  if ((tcplen > 0))  {
  40425a:	2900      	cmp	r1, #0
  40425c:	d05d      	beq.n	40431a <tcp_input+0x2da>
    pcb->flags |= TF_ACK_NOW;
  40425e:	7f83      	ldrb	r3, [r0, #30]
  404260:	f043 0302 	orr.w	r3, r3, #2
  404264:	7783      	strb	r3, [r0, #30]
    return tcp_output(pcb);
  404266:	4b17      	ldr	r3, [pc, #92]	; (4042c4 <tcp_input+0x284>)
  404268:	4798      	blx	r3
  40426a:	e056      	b.n	40431a <tcp_input+0x2da>
  40426c:	204025e4 	.word	0x204025e4
  404270:	004025bf 	.word	0x004025bf
  404274:	0040262d 	.word	0x0040262d
  404278:	20403938 	.word	0x20403938
  40427c:	004018a5 	.word	0x004018a5
  404280:	20403930 	.word	0x20403930
  404284:	0040146d 	.word	0x0040146d
  404288:	0040119f 	.word	0x0040119f
  40428c:	204025e0 	.word	0x204025e0
  404290:	204025c0 	.word	0x204025c0
  404294:	204025c4 	.word	0x204025c4
  404298:	204025e8 	.word	0x204025e8
  40429c:	20404964 	.word	0x20404964
  4042a0:	204025c8 	.word	0x204025c8
  4042a4:	204025d8 	.word	0x204025d8
  4042a8:	204025dc 	.word	0x204025dc
  4042ac:	004032c1 	.word	0x004032c1
  4042b0:	2040497c 	.word	0x2040497c
  4042b4:	00403049 	.word	0x00403049
  4042b8:	00402475 	.word	0x00402475
  4042bc:	20404978 	.word	0x20404978
  4042c0:	20404968 	.word	0x20404968
  4042c4:	0040502d 	.word	0x0040502d
  4042c8:	004011c1 	.word	0x004011c1
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  4042cc:	68c0      	ldr	r0, [r0, #12]
  4042ce:	b340      	cbz	r0, 404322 <tcp_input+0x2e2>
      if (pcb->remote_port == tcphdr->src &&
  4042d0:	8b83      	ldrh	r3, [r0, #28]
  4042d2:	4293      	cmp	r3, r2
  4042d4:	d1fa      	bne.n	4042cc <tcp_input+0x28c>
         pcb->local_port == tcphdr->dest &&
  4042d6:	8b45      	ldrh	r5, [r0, #26]
      if (pcb->remote_port == tcphdr->src &&
  4042d8:	887e      	ldrh	r6, [r7, #2]
  4042da:	42ae      	cmp	r6, r5
  4042dc:	d1f6      	bne.n	4042cc <tcp_input+0x28c>
         pcb->local_port == tcphdr->dest &&
  4042de:	6846      	ldr	r6, [r0, #4]
  4042e0:	4546      	cmp	r6, r8
  4042e2:	d1f3      	bne.n	4042cc <tcp_input+0x28c>
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
  4042e4:	6806      	ldr	r6, [r0, #0]
  4042e6:	4566      	cmp	r6, ip
  4042e8:	d1f0      	bne.n	4042cc <tcp_input+0x28c>
  if (flags & TCP_RST)  {
  4042ea:	f01e 0f04 	tst.w	lr, #4
  4042ee:	d114      	bne.n	40431a <tcp_input+0x2da>
  if (flags & TCP_SYN) {
  4042f0:	f01e 0f02 	tst.w	lr, #2
  4042f4:	d0ab      	beq.n	40424e <tcp_input+0x20e>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt+pcb->rcv_wnd)) {
  4042f6:	4a7e      	ldr	r2, [pc, #504]	; (4044f0 <tcp_input+0x4b0>)
  4042f8:	6816      	ldr	r6, [r2, #0]
  4042fa:	6a82      	ldr	r2, [r0, #40]	; 0x28
  4042fc:	1ab2      	subs	r2, r6, r2
  4042fe:	d4ac      	bmi.n	40425a <tcp_input+0x21a>
  404300:	8d87      	ldrh	r7, [r0, #44]	; 0x2c
  404302:	1bd2      	subs	r2, r2, r7
  404304:	2a00      	cmp	r2, #0
  404306:	dca8      	bgt.n	40425a <tcp_input+0x21a>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  404308:	9301      	str	r3, [sp, #4]
  40430a:	9500      	str	r5, [sp, #0]
  40430c:	4b79      	ldr	r3, [pc, #484]	; (4044f4 <tcp_input+0x4b4>)
  40430e:	4a7a      	ldr	r2, [pc, #488]	; (4044f8 <tcp_input+0x4b8>)
  404310:	4431      	add	r1, r6
  404312:	487a      	ldr	r0, [pc, #488]	; (4044fc <tcp_input+0x4bc>)
  404314:	6800      	ldr	r0, [r0, #0]
  404316:	4d7a      	ldr	r5, [pc, #488]	; (404500 <tcp_input+0x4c0>)
  404318:	47a8      	blx	r5
        pbuf_free(p);
  40431a:	4620      	mov	r0, r4
  40431c:	4b79      	ldr	r3, [pc, #484]	; (404504 <tcp_input+0x4c4>)
  40431e:	4798      	blx	r3
        return;
  404320:	e6a6      	b.n	404070 <tcp_input+0x30>
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  404322:	4b79      	ldr	r3, [pc, #484]	; (404508 <tcp_input+0x4c8>)
  404324:	f8d3 c000 	ldr.w	ip, [r3]
  404328:	f1bc 0f00 	cmp.w	ip, #0
  40432c:	f000 834b 	beq.w	4049c6 <tcp_input+0x986>
      if (lpcb->local_port == tcphdr->dest) {
  404330:	4b76      	ldr	r3, [pc, #472]	; (40450c <tcp_input+0x4cc>)
  404332:	681f      	ldr	r7, [r3, #0]
  404334:	8878      	ldrh	r0, [r7, #2]
        if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest) ||
  404336:	4b70      	ldr	r3, [pc, #448]	; (4044f8 <tcp_input+0x4b8>)
  404338:	681e      	ldr	r6, [r3, #0]
  40433a:	4665      	mov	r5, ip
  40433c:	2200      	movs	r2, #0
  40433e:	e005      	b.n	40434c <tcp_input+0x30c>
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  404340:	68eb      	ldr	r3, [r5, #12]
  404342:	462a      	mov	r2, r5
  404344:	2b00      	cmp	r3, #0
  404346:	f000 833e 	beq.w	4049c6 <tcp_input+0x986>
  40434a:	461d      	mov	r5, r3
      if (lpcb->local_port == tcphdr->dest) {
  40434c:	8b6b      	ldrh	r3, [r5, #26]
  40434e:	4283      	cmp	r3, r0
  404350:	d1f6      	bne.n	404340 <tcp_input+0x300>
        if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest) ||
  404352:	682b      	ldr	r3, [r5, #0]
  404354:	42b3      	cmp	r3, r6
  404356:	d002      	beq.n	40435e <tcp_input+0x31e>
            ip_addr_isany(&(lpcb->local_ip))) {
  404358:	b10d      	cbz	r5, 40435e <tcp_input+0x31e>
  40435a:	2b00      	cmp	r3, #0
  40435c:	d1f0      	bne.n	404340 <tcp_input+0x300>
    if (lpcb != NULL) {
  40435e:	2d00      	cmp	r5, #0
  404360:	f000 8331 	beq.w	4049c6 <tcp_input+0x986>
      if (prev != NULL) {
  404364:	b12a      	cbz	r2, 404372 <tcp_input+0x332>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
  404366:	68eb      	ldr	r3, [r5, #12]
  404368:	60d3      	str	r3, [r2, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
  40436a:	f8c5 c00c 	str.w	ip, [r5, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
  40436e:	4b66      	ldr	r3, [pc, #408]	; (404508 <tcp_input+0x4c8>)
  404370:	601d      	str	r5, [r3, #0]
  if (flags & TCP_RST) {
  404372:	f01e 0f04 	tst.w	lr, #4
  404376:	d105      	bne.n	404384 <tcp_input+0x344>
  if (flags & TCP_ACK) {
  404378:	f01e 0f10 	tst.w	lr, #16
  40437c:	d106      	bne.n	40438c <tcp_input+0x34c>
  } else if (flags & TCP_SYN) {
  40437e:	f01e 0f02 	tst.w	lr, #2
  404382:	d111      	bne.n	4043a8 <tcp_input+0x368>
      pbuf_free(p);
  404384:	4620      	mov	r0, r4
  404386:	4b5f      	ldr	r3, [pc, #380]	; (404504 <tcp_input+0x4c4>)
  404388:	4798      	blx	r3
      return;
  40438a:	e671      	b.n	404070 <tcp_input+0x30>
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  40438c:	4b58      	ldr	r3, [pc, #352]	; (4044f0 <tcp_input+0x4b0>)
  40438e:	6818      	ldr	r0, [r3, #0]
  404390:	883b      	ldrh	r3, [r7, #0]
  404392:	9301      	str	r3, [sp, #4]
  404394:	887b      	ldrh	r3, [r7, #2]
  404396:	9300      	str	r3, [sp, #0]
  404398:	4b56      	ldr	r3, [pc, #344]	; (4044f4 <tcp_input+0x4b4>)
  40439a:	4a57      	ldr	r2, [pc, #348]	; (4044f8 <tcp_input+0x4b8>)
  40439c:	4401      	add	r1, r0
  40439e:	4857      	ldr	r0, [pc, #348]	; (4044fc <tcp_input+0x4bc>)
  4043a0:	6800      	ldr	r0, [r0, #0]
  4043a2:	4d57      	ldr	r5, [pc, #348]	; (404500 <tcp_input+0x4c0>)
  4043a4:	47a8      	blx	r5
  4043a6:	e7ed      	b.n	404384 <tcp_input+0x344>
    npcb = tcp_alloc(pcb->prio);
  4043a8:	7e68      	ldrb	r0, [r5, #25]
  4043aa:	4b59      	ldr	r3, [pc, #356]	; (404510 <tcp_input+0x4d0>)
  4043ac:	4798      	blx	r3
    if (npcb == NULL) {
  4043ae:	4606      	mov	r6, r0
  4043b0:	2800      	cmp	r0, #0
  4043b2:	d0e7      	beq.n	404384 <tcp_input+0x344>
    ip_addr_copy(npcb->local_ip, current_iphdr_dest);
  4043b4:	4b50      	ldr	r3, [pc, #320]	; (4044f8 <tcp_input+0x4b8>)
  4043b6:	681b      	ldr	r3, [r3, #0]
  4043b8:	6003      	str	r3, [r0, #0]
    npcb->local_port = pcb->local_port;
  4043ba:	8b6b      	ldrh	r3, [r5, #26]
  4043bc:	8343      	strh	r3, [r0, #26]
    ip_addr_copy(npcb->remote_ip, current_iphdr_src);
  4043be:	4b4d      	ldr	r3, [pc, #308]	; (4044f4 <tcp_input+0x4b4>)
  4043c0:	681b      	ldr	r3, [r3, #0]
  4043c2:	6043      	str	r3, [r0, #4]
    npcb->remote_port = tcphdr->src;
  4043c4:	4b51      	ldr	r3, [pc, #324]	; (40450c <tcp_input+0x4cc>)
  4043c6:	681a      	ldr	r2, [r3, #0]
  4043c8:	8813      	ldrh	r3, [r2, #0]
  4043ca:	8383      	strh	r3, [r0, #28]
    npcb->state = SYN_RCVD;
  4043cc:	2303      	movs	r3, #3
  4043ce:	7603      	strb	r3, [r0, #24]
    npcb->rcv_nxt = seqno + 1;
  4043d0:	4b47      	ldr	r3, [pc, #284]	; (4044f0 <tcp_input+0x4b0>)
  4043d2:	681b      	ldr	r3, [r3, #0]
  4043d4:	1c59      	adds	r1, r3, #1
  4043d6:	6281      	str	r1, [r0, #40]	; 0x28
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
  4043d8:	6301      	str	r1, [r0, #48]	; 0x30
    npcb->snd_wnd = tcphdr->wnd;
  4043da:	89d1      	ldrh	r1, [r2, #14]
  4043dc:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
    npcb->snd_wnd_max = tcphdr->wnd;
  4043e0:	89d2      	ldrh	r2, [r2, #14]
  4043e2:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
    npcb->ssthresh = npcb->snd_wnd;
  4043e6:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
  4043ea:	3b01      	subs	r3, #1
  4043ec:	6543      	str	r3, [r0, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
  4043ee:	692b      	ldr	r3, [r5, #16]
  4043f0:	6103      	str	r3, [r0, #16]
    npcb->accept = pcb->accept;
  4043f2:	696b      	ldr	r3, [r5, #20]
  4043f4:	6143      	str	r3, [r0, #20]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
  4043f6:	7a2b      	ldrb	r3, [r5, #8]
  4043f8:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  4043fc:	7203      	strb	r3, [r0, #8]
    TCP_REG_ACTIVE(npcb);
  4043fe:	4b45      	ldr	r3, [pc, #276]	; (404514 <tcp_input+0x4d4>)
  404400:	681a      	ldr	r2, [r3, #0]
  404402:	60c2      	str	r2, [r0, #12]
  404404:	6018      	str	r0, [r3, #0]
  404406:	4b44      	ldr	r3, [pc, #272]	; (404518 <tcp_input+0x4d8>)
  404408:	4798      	blx	r3
  40440a:	2201      	movs	r2, #1
  40440c:	4b43      	ldr	r3, [pc, #268]	; (40451c <tcp_input+0x4dc>)
  40440e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
  404410:	4630      	mov	r0, r6
  404412:	4b43      	ldr	r3, [pc, #268]	; (404520 <tcp_input+0x4e0>)
  404414:	4798      	blx	r3
    npcb->mss = tcp_eff_send_mss(npcb->mss, &(npcb->remote_ip));
  404416:	1d31      	adds	r1, r6, #4
  404418:	8ef0      	ldrh	r0, [r6, #54]	; 0x36
  40441a:	4b42      	ldr	r3, [pc, #264]	; (404524 <tcp_input+0x4e4>)
  40441c:	4798      	blx	r3
  40441e:	86f0      	strh	r0, [r6, #54]	; 0x36
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
  404420:	2112      	movs	r1, #18
  404422:	4630      	mov	r0, r6
  404424:	4b40      	ldr	r3, [pc, #256]	; (404528 <tcp_input+0x4e8>)
  404426:	4798      	blx	r3
    if (rc != ERR_OK) {
  404428:	b918      	cbnz	r0, 404432 <tcp_input+0x3f2>
    return tcp_output(npcb);
  40442a:	4630      	mov	r0, r6
  40442c:	4b3f      	ldr	r3, [pc, #252]	; (40452c <tcp_input+0x4ec>)
  40442e:	4798      	blx	r3
  404430:	e7a8      	b.n	404384 <tcp_input+0x344>
      tcp_abandon(npcb, 0);
  404432:	2100      	movs	r1, #0
  404434:	4630      	mov	r0, r6
  404436:	4b3e      	ldr	r3, [pc, #248]	; (404530 <tcp_input+0x4f0>)
  404438:	4798      	blx	r3
  40443a:	e7a3      	b.n	404384 <tcp_input+0x344>
      if (ackno == pcb->snd_nxt) {
  40443c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  40443e:	4a2f      	ldr	r2, [pc, #188]	; (4044fc <tcp_input+0x4bc>)
  404440:	6812      	ldr	r2, [r2, #0]
  u8_t acceptable = 0;
  404442:	4293      	cmp	r3, r2
  404444:	bf14      	ite	ne
  404446:	2300      	movne	r3, #0
  404448:	2301      	moveq	r3, #1
  40444a:	e6ca      	b.n	4041e2 <tcp_input+0x1a2>
      recv_flags |= TF_RESET;
  40444c:	4a39      	ldr	r2, [pc, #228]	; (404534 <tcp_input+0x4f4>)
  40444e:	7813      	ldrb	r3, [r2, #0]
  404450:	f043 0308 	orr.w	r3, r3, #8
  404454:	7013      	strb	r3, [r2, #0]
      pcb->flags &= ~TF_ACK_DELAY;
  404456:	7fab      	ldrb	r3, [r5, #30]
  404458:	f023 0301 	bic.w	r3, r3, #1
  40445c:	77ab      	strb	r3, [r5, #30]
  40445e:	e6c3      	b.n	4041e8 <tcp_input+0x1a8>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) { 
  404460:	f013 0f02 	tst.w	r3, #2
  404464:	d009      	beq.n	40447a <tcp_input+0x43a>
  404466:	7e2b      	ldrb	r3, [r5, #24]
  404468:	3b02      	subs	r3, #2
  40446a:	b2db      	uxtb	r3, r3
  40446c:	2b01      	cmp	r3, #1
  40446e:	d904      	bls.n	40447a <tcp_input+0x43a>
    tcp_ack_now(pcb);
  404470:	7fab      	ldrb	r3, [r5, #30]
  404472:	f043 0302 	orr.w	r3, r3, #2
  404476:	77ab      	strb	r3, [r5, #30]
  404478:	e6b6      	b.n	4041e8 <tcp_input+0x1a8>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
  40447a:	7fab      	ldrb	r3, [r5, #30]
  40447c:	f013 0f10 	tst.w	r3, #16
  404480:	d102      	bne.n	404488 <tcp_input+0x448>
    pcb->tmr = tcp_ticks;
  404482:	4b2d      	ldr	r3, [pc, #180]	; (404538 <tcp_input+0x4f8>)
  404484:	681b      	ldr	r3, [r3, #0]
  404486:	626b      	str	r3, [r5, #36]	; 0x24
  pcb->keep_cnt_sent = 0;
  404488:	2300      	movs	r3, #0
  40448a:	f885 3096 	strb.w	r3, [r5, #150]	; 0x96
  tcp_parseopt(pcb);
  40448e:	4628      	mov	r0, r5
  404490:	4b23      	ldr	r3, [pc, #140]	; (404520 <tcp_input+0x4e0>)
  404492:	4798      	blx	r3
  switch (pcb->state) {
  404494:	7e2b      	ldrb	r3, [r5, #24]
  404496:	3b02      	subs	r3, #2
  404498:	2b07      	cmp	r3, #7
  40449a:	f63f aea5 	bhi.w	4041e8 <tcp_input+0x1a8>
  40449e:	e8df f013 	tbh	[pc, r3, lsl #1]
  4044a2:	0008      	.short	0x0008
  4044a4:	010600a8 	.word	0x010600a8
  4044a8:	016f0116 	.word	0x016f0116
  4044ac:	01d40106 	.word	0x01d40106
  4044b0:	0211      	.short	0x0211
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
  4044b2:	4b22      	ldr	r3, [pc, #136]	; (40453c <tcp_input+0x4fc>)
  4044b4:	781b      	ldrb	r3, [r3, #0]
  4044b6:	f003 0312 	and.w	r3, r3, #18
  4044ba:	2b12      	cmp	r3, #18
  4044bc:	d042      	beq.n	404544 <tcp_input+0x504>
    else if (flags & TCP_ACK) {
  4044be:	4b1f      	ldr	r3, [pc, #124]	; (40453c <tcp_input+0x4fc>)
  4044c0:	781b      	ldrb	r3, [r3, #0]
  4044c2:	f013 0f10 	tst.w	r3, #16
  4044c6:	f43f ae8f 	beq.w	4041e8 <tcp_input+0x1a8>
        tcphdr->dest, tcphdr->src);
  4044ca:	4b10      	ldr	r3, [pc, #64]	; (40450c <tcp_input+0x4cc>)
  4044cc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  4044ce:	4a1c      	ldr	r2, [pc, #112]	; (404540 <tcp_input+0x500>)
  4044d0:	8810      	ldrh	r0, [r2, #0]
  4044d2:	4a07      	ldr	r2, [pc, #28]	; (4044f0 <tcp_input+0x4b0>)
  4044d4:	6811      	ldr	r1, [r2, #0]
  4044d6:	881a      	ldrh	r2, [r3, #0]
  4044d8:	9201      	str	r2, [sp, #4]
  4044da:	885b      	ldrh	r3, [r3, #2]
  4044dc:	9300      	str	r3, [sp, #0]
  4044de:	4b05      	ldr	r3, [pc, #20]	; (4044f4 <tcp_input+0x4b4>)
  4044e0:	4a05      	ldr	r2, [pc, #20]	; (4044f8 <tcp_input+0x4b8>)
  4044e2:	4401      	add	r1, r0
  4044e4:	4805      	ldr	r0, [pc, #20]	; (4044fc <tcp_input+0x4bc>)
  4044e6:	6800      	ldr	r0, [r0, #0]
  4044e8:	4c05      	ldr	r4, [pc, #20]	; (404500 <tcp_input+0x4c0>)
  4044ea:	47a0      	blx	r4
  4044ec:	e67c      	b.n	4041e8 <tcp_input+0x1a8>
  4044ee:	bf00      	nop
  4044f0:	204025e0 	.word	0x204025e0
  4044f4:	20403930 	.word	0x20403930
  4044f8:	20403938 	.word	0x20403938
  4044fc:	204025c0 	.word	0x204025c0
  404500:	00405305 	.word	0x00405305
  404504:	0040262d 	.word	0x0040262d
  404508:	2040496c 	.word	0x2040496c
  40450c:	204025e4 	.word	0x204025e4
  404510:	004034a5 	.word	0x004034a5
  404514:	20404964 	.word	0x20404964
  404518:	00402061 	.word	0x00402061
  40451c:	20404960 	.word	0x20404960
  404520:	00403601 	.word	0x00403601
  404524:	004035d9 	.word	0x004035d9
  404528:	00404e91 	.word	0x00404e91
  40452c:	0040502d 	.word	0x0040502d
  404530:	004033d9 	.word	0x004033d9
  404534:	204025dc 	.word	0x204025dc
  404538:	20404968 	.word	0x20404968
  40453c:	204025c4 	.word	0x204025c4
  404540:	204025e8 	.word	0x204025e8
        && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
  404544:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  404546:	68db      	ldr	r3, [r3, #12]
  404548:	6858      	ldr	r0, [r3, #4]
  40454a:	4ba1      	ldr	r3, [pc, #644]	; (4047d0 <tcp_input+0x790>)
  40454c:	4798      	blx	r3
  40454e:	3001      	adds	r0, #1
  404550:	4ba0      	ldr	r3, [pc, #640]	; (4047d4 <tcp_input+0x794>)
  404552:	681b      	ldr	r3, [r3, #0]
  404554:	4298      	cmp	r0, r3
  404556:	d1b2      	bne.n	4044be <tcp_input+0x47e>
      pcb->snd_buf++;
  404558:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
  40455c:	3301      	adds	r3, #1
  40455e:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
      pcb->rcv_nxt = seqno + 1;
  404562:	4b9d      	ldr	r3, [pc, #628]	; (4047d8 <tcp_input+0x798>)
  404564:	681b      	ldr	r3, [r3, #0]
  404566:	1c5a      	adds	r2, r3, #1
  404568:	62aa      	str	r2, [r5, #40]	; 0x28
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
  40456a:	632a      	str	r2, [r5, #48]	; 0x30
      pcb->lastack = ackno;
  40456c:	64a8      	str	r0, [r5, #72]	; 0x48
      pcb->snd_wnd = tcphdr->wnd;
  40456e:	4a9b      	ldr	r2, [pc, #620]	; (4047dc <tcp_input+0x79c>)
  404570:	6812      	ldr	r2, [r2, #0]
  404572:	89d1      	ldrh	r1, [r2, #14]
  404574:	f8a5 1060 	strh.w	r1, [r5, #96]	; 0x60
      pcb->snd_wnd_max = tcphdr->wnd;
  404578:	89d2      	ldrh	r2, [r2, #14]
  40457a:	f8a5 2062 	strh.w	r2, [r5, #98]	; 0x62
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
  40457e:	3b01      	subs	r3, #1
  404580:	656b      	str	r3, [r5, #84]	; 0x54
      pcb->state = ESTABLISHED;
  404582:	2304      	movs	r3, #4
  404584:	762b      	strb	r3, [r5, #24]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &(pcb->remote_ip));
  404586:	18e9      	adds	r1, r5, r3
  404588:	8ee8      	ldrh	r0, [r5, #54]	; 0x36
  40458a:	4b95      	ldr	r3, [pc, #596]	; (4047e0 <tcp_input+0x7a0>)
  40458c:	4798      	blx	r3
  40458e:	86e8      	strh	r0, [r5, #54]	; 0x36
      pcb->ssthresh = pcb->mss * 10;
  404590:	eb00 0380 	add.w	r3, r0, r0, lsl #2
  404594:	005b      	lsls	r3, r3, #1
  404596:	f8a5 304e 	strh.w	r3, [r5, #78]	; 0x4e
      pcb->cwnd = ((pcb->cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
  40459a:	f8b5 304c 	ldrh.w	r3, [r5, #76]	; 0x4c
  40459e:	2b01      	cmp	r3, #1
  4045a0:	d101      	bne.n	4045a6 <tcp_input+0x566>
  4045a2:	0040      	lsls	r0, r0, #1
  4045a4:	b280      	uxth	r0, r0
  4045a6:	f8a5 004c 	strh.w	r0, [r5, #76]	; 0x4c
      --pcb->snd_queuelen;
  4045aa:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
  4045ae:	3b01      	subs	r3, #1
  4045b0:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
      rseg = pcb->unacked;
  4045b4:	6f28      	ldr	r0, [r5, #112]	; 0x70
      pcb->unacked = rseg->next;
  4045b6:	6803      	ldr	r3, [r0, #0]
  4045b8:	672b      	str	r3, [r5, #112]	; 0x70
      tcp_seg_free(rseg);
  4045ba:	4b8a      	ldr	r3, [pc, #552]	; (4047e4 <tcp_input+0x7a4>)
  4045bc:	4798      	blx	r3
      if(pcb->unacked == NULL)
  4045be:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  4045c0:	b993      	cbnz	r3, 4045e8 <tcp_input+0x5a8>
        pcb->rtime = -1;
  4045c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4045c6:	86ab      	strh	r3, [r5, #52]	; 0x34
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
  4045c8:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
  4045cc:	b13b      	cbz	r3, 4045de <tcp_input+0x59e>
  4045ce:	2200      	movs	r2, #0
  4045d0:	4629      	mov	r1, r5
  4045d2:	6928      	ldr	r0, [r5, #16]
  4045d4:	4798      	blx	r3
      if (err == ERR_ABRT) {
  4045d6:	f110 0f0a 	cmn.w	r0, #10
  4045da:	f43f ae1a 	beq.w	404212 <tcp_input+0x1d2>
      tcp_ack_now(pcb);
  4045de:	7fab      	ldrb	r3, [r5, #30]
  4045e0:	f043 0302 	orr.w	r3, r3, #2
  4045e4:	77ab      	strb	r3, [r5, #30]
  4045e6:	e5ff      	b.n	4041e8 <tcp_input+0x1a8>
        pcb->rtime = 0;
  4045e8:	2300      	movs	r3, #0
  4045ea:	86ab      	strh	r3, [r5, #52]	; 0x34
        pcb->nrtx = 0;
  4045ec:	f885 3046 	strb.w	r3, [r5, #70]	; 0x46
  4045f0:	e7ea      	b.n	4045c8 <tcp_input+0x588>
    if (flags & TCP_ACK) {
  4045f2:	4b7d      	ldr	r3, [pc, #500]	; (4047e8 <tcp_input+0x7a8>)
  4045f4:	781b      	ldrb	r3, [r3, #0]
  4045f6:	f013 0f10 	tst.w	r3, #16
  4045fa:	d049      	beq.n	404690 <tcp_input+0x650>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  4045fc:	4b75      	ldr	r3, [pc, #468]	; (4047d4 <tcp_input+0x794>)
  4045fe:	6818      	ldr	r0, [r3, #0]
  404600:	6cab      	ldr	r3, [r5, #72]	; 0x48
  404602:	43db      	mvns	r3, r3
  404604:	42c3      	cmn	r3, r0
  404606:	d433      	bmi.n	404670 <tcp_input+0x630>
  404608:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  40460a:	1ac3      	subs	r3, r0, r3
  40460c:	2b00      	cmp	r3, #0
  40460e:	dc2f      	bgt.n	404670 <tcp_input+0x630>
        pcb->state = ESTABLISHED;
  404610:	2304      	movs	r3, #4
  404612:	762b      	strb	r3, [r5, #24]
        TCP_EVENT_ACCEPT(pcb, ERR_OK, err);
  404614:	696b      	ldr	r3, [r5, #20]
  404616:	b143      	cbz	r3, 40462a <tcp_input+0x5ea>
  404618:	2200      	movs	r2, #0
  40461a:	4629      	mov	r1, r5
  40461c:	6928      	ldr	r0, [r5, #16]
  40461e:	4798      	blx	r3
        if (err != ERR_OK) {
  404620:	b138      	cbz	r0, 404632 <tcp_input+0x5f2>
          if (err != ERR_ABRT) {
  404622:	f110 0f0a 	cmn.w	r0, #10
  404626:	f43f adf4 	beq.w	404212 <tcp_input+0x1d2>
            tcp_abort(pcb);
  40462a:	4628      	mov	r0, r5
  40462c:	4b6f      	ldr	r3, [pc, #444]	; (4047ec <tcp_input+0x7ac>)
  40462e:	4798      	blx	r3
  404630:	e5ef      	b.n	404212 <tcp_input+0x1d2>
        old_cwnd = pcb->cwnd;
  404632:	f8b5 404c 	ldrh.w	r4, [r5, #76]	; 0x4c
        tcp_receive(pcb);
  404636:	4628      	mov	r0, r5
  404638:	4b6d      	ldr	r3, [pc, #436]	; (4047f0 <tcp_input+0x7b0>)
  40463a:	4798      	blx	r3
        if (pcb->acked != 0) {
  40463c:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
  404640:	b113      	cbz	r3, 404648 <tcp_input+0x608>
          pcb->acked--;
  404642:	3b01      	subs	r3, #1
  404644:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
        pcb->cwnd = ((old_cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
  404648:	2c01      	cmp	r4, #1
  40464a:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
  40464c:	bf04      	itt	eq
  40464e:	005b      	lsleq	r3, r3, #1
  404650:	b29b      	uxtheq	r3, r3
  404652:	f8a5 304c 	strh.w	r3, [r5, #76]	; 0x4c
        if (recv_flags & TF_GOT_FIN) {
  404656:	4b67      	ldr	r3, [pc, #412]	; (4047f4 <tcp_input+0x7b4>)
  404658:	781b      	ldrb	r3, [r3, #0]
  40465a:	f013 0f20 	tst.w	r3, #32
  40465e:	f43f adc3 	beq.w	4041e8 <tcp_input+0x1a8>
          tcp_ack_now(pcb);
  404662:	7fab      	ldrb	r3, [r5, #30]
  404664:	f043 0302 	orr.w	r3, r3, #2
  404668:	77ab      	strb	r3, [r5, #30]
          pcb->state = CLOSE_WAIT;
  40466a:	2307      	movs	r3, #7
  40466c:	762b      	strb	r3, [r5, #24]
  40466e:	e5bb      	b.n	4041e8 <tcp_input+0x1a8>
                tcphdr->dest, tcphdr->src);
  404670:	4b5a      	ldr	r3, [pc, #360]	; (4047dc <tcp_input+0x79c>)
  404672:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  404674:	4a60      	ldr	r2, [pc, #384]	; (4047f8 <tcp_input+0x7b8>)
  404676:	8814      	ldrh	r4, [r2, #0]
  404678:	4a57      	ldr	r2, [pc, #348]	; (4047d8 <tcp_input+0x798>)
  40467a:	6811      	ldr	r1, [r2, #0]
  40467c:	881a      	ldrh	r2, [r3, #0]
  40467e:	9201      	str	r2, [sp, #4]
  404680:	885b      	ldrh	r3, [r3, #2]
  404682:	9300      	str	r3, [sp, #0]
  404684:	4b5d      	ldr	r3, [pc, #372]	; (4047fc <tcp_input+0x7bc>)
  404686:	4a5e      	ldr	r2, [pc, #376]	; (404800 <tcp_input+0x7c0>)
  404688:	4421      	add	r1, r4
  40468a:	4c5e      	ldr	r4, [pc, #376]	; (404804 <tcp_input+0x7c4>)
  40468c:	47a0      	blx	r4
  40468e:	e5ab      	b.n	4041e8 <tcp_input+0x1a8>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
  404690:	f013 0f02 	tst.w	r3, #2
  404694:	f43f ada8 	beq.w	4041e8 <tcp_input+0x1a8>
  404698:	6aab      	ldr	r3, [r5, #40]	; 0x28
  40469a:	3b01      	subs	r3, #1
  40469c:	4a4e      	ldr	r2, [pc, #312]	; (4047d8 <tcp_input+0x798>)
  40469e:	6812      	ldr	r2, [r2, #0]
  4046a0:	4293      	cmp	r3, r2
  4046a2:	f47f ada1 	bne.w	4041e8 <tcp_input+0x1a8>
      tcp_rexmit(pcb);
  4046a6:	4628      	mov	r0, r5
  4046a8:	4b57      	ldr	r3, [pc, #348]	; (404808 <tcp_input+0x7c8>)
  4046aa:	4798      	blx	r3
  4046ac:	e59c      	b.n	4041e8 <tcp_input+0x1a8>
    tcp_receive(pcb);
  4046ae:	4628      	mov	r0, r5
  4046b0:	4b4f      	ldr	r3, [pc, #316]	; (4047f0 <tcp_input+0x7b0>)
  4046b2:	4798      	blx	r3
    if (recv_flags & TF_GOT_FIN) { /* passive close */
  4046b4:	4b4f      	ldr	r3, [pc, #316]	; (4047f4 <tcp_input+0x7b4>)
  4046b6:	781b      	ldrb	r3, [r3, #0]
  4046b8:	f013 0f20 	tst.w	r3, #32
  4046bc:	f43f ad94 	beq.w	4041e8 <tcp_input+0x1a8>
      tcp_ack_now(pcb);
  4046c0:	7fab      	ldrb	r3, [r5, #30]
  4046c2:	f043 0302 	orr.w	r3, r3, #2
  4046c6:	77ab      	strb	r3, [r5, #30]
      pcb->state = CLOSE_WAIT;
  4046c8:	2307      	movs	r3, #7
  4046ca:	762b      	strb	r3, [r5, #24]
  4046cc:	e58c      	b.n	4041e8 <tcp_input+0x1a8>
    tcp_receive(pcb);
  4046ce:	4628      	mov	r0, r5
  4046d0:	4b47      	ldr	r3, [pc, #284]	; (4047f0 <tcp_input+0x7b0>)
  4046d2:	4798      	blx	r3
    if (recv_flags & TF_GOT_FIN) {
  4046d4:	4b47      	ldr	r3, [pc, #284]	; (4047f4 <tcp_input+0x7b4>)
  4046d6:	781b      	ldrb	r3, [r3, #0]
  4046d8:	f013 0f20 	tst.w	r3, #32
  4046dc:	d041      	beq.n	404762 <tcp_input+0x722>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
  4046de:	4b42      	ldr	r3, [pc, #264]	; (4047e8 <tcp_input+0x7a8>)
  4046e0:	781b      	ldrb	r3, [r3, #0]
  4046e2:	f013 0f10 	tst.w	r3, #16
  4046e6:	d035      	beq.n	404754 <tcp_input+0x714>
  4046e8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4046ea:	4b3a      	ldr	r3, [pc, #232]	; (4047d4 <tcp_input+0x794>)
  4046ec:	681b      	ldr	r3, [r3, #0]
  4046ee:	429a      	cmp	r2, r3
  4046f0:	d130      	bne.n	404754 <tcp_input+0x714>
        tcp_ack_now(pcb);
  4046f2:	7fab      	ldrb	r3, [r5, #30]
  4046f4:	f043 0302 	orr.w	r3, r3, #2
  4046f8:	77ab      	strb	r3, [r5, #30]
        tcp_pcb_purge(pcb);
  4046fa:	4628      	mov	r0, r5
  4046fc:	4b43      	ldr	r3, [pc, #268]	; (40480c <tcp_input+0x7cc>)
  4046fe:	4798      	blx	r3
        TCP_RMV_ACTIVE(pcb);
  404700:	4b43      	ldr	r3, [pc, #268]	; (404810 <tcp_input+0x7d0>)
  404702:	681b      	ldr	r3, [r3, #0]
  404704:	42ab      	cmp	r3, r5
  404706:	d10e      	bne.n	404726 <tcp_input+0x6e6>
  404708:	68ea      	ldr	r2, [r5, #12]
  40470a:	4b41      	ldr	r3, [pc, #260]	; (404810 <tcp_input+0x7d0>)
  40470c:	601a      	str	r2, [r3, #0]
  40470e:	2201      	movs	r2, #1
  404710:	4b40      	ldr	r3, [pc, #256]	; (404814 <tcp_input+0x7d4>)
  404712:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
  404714:	230a      	movs	r3, #10
  404716:	762b      	strb	r3, [r5, #24]
        TCP_REG(&tcp_tw_pcbs, pcb);
  404718:	4b3f      	ldr	r3, [pc, #252]	; (404818 <tcp_input+0x7d8>)
  40471a:	681a      	ldr	r2, [r3, #0]
  40471c:	60ea      	str	r2, [r5, #12]
  40471e:	601d      	str	r5, [r3, #0]
  404720:	4b3e      	ldr	r3, [pc, #248]	; (40481c <tcp_input+0x7dc>)
  404722:	4798      	blx	r3
  404724:	e560      	b.n	4041e8 <tcp_input+0x1a8>
        TCP_RMV_ACTIVE(pcb);
  404726:	4a3e      	ldr	r2, [pc, #248]	; (404820 <tcp_input+0x7e0>)
  404728:	6013      	str	r3, [r2, #0]
  40472a:	2200      	movs	r2, #0
  40472c:	2001      	movs	r0, #1
  40472e:	b92b      	cbnz	r3, 40473c <tcp_input+0x6fc>
  404730:	2a00      	cmp	r2, #0
  404732:	d0ec      	beq.n	40470e <tcp_input+0x6ce>
  404734:	2200      	movs	r2, #0
  404736:	4b3a      	ldr	r3, [pc, #232]	; (404820 <tcp_input+0x7e0>)
  404738:	601a      	str	r2, [r3, #0]
  40473a:	e7e8      	b.n	40470e <tcp_input+0x6ce>
  40473c:	68d9      	ldr	r1, [r3, #12]
  40473e:	42a9      	cmp	r1, r5
  404740:	d105      	bne.n	40474e <tcp_input+0x70e>
  404742:	b10a      	cbz	r2, 404748 <tcp_input+0x708>
  404744:	4a36      	ldr	r2, [pc, #216]	; (404820 <tcp_input+0x7e0>)
  404746:	6013      	str	r3, [r2, #0]
  404748:	68ca      	ldr	r2, [r1, #12]
  40474a:	60da      	str	r2, [r3, #12]
  40474c:	e7df      	b.n	40470e <tcp_input+0x6ce>
  40474e:	4602      	mov	r2, r0
  404750:	460b      	mov	r3, r1
  404752:	e7ec      	b.n	40472e <tcp_input+0x6ee>
        tcp_ack_now(pcb);
  404754:	7fab      	ldrb	r3, [r5, #30]
  404756:	f043 0302 	orr.w	r3, r3, #2
  40475a:	77ab      	strb	r3, [r5, #30]
        pcb->state = CLOSING;
  40475c:	2308      	movs	r3, #8
  40475e:	762b      	strb	r3, [r5, #24]
  404760:	e542      	b.n	4041e8 <tcp_input+0x1a8>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
  404762:	4b21      	ldr	r3, [pc, #132]	; (4047e8 <tcp_input+0x7a8>)
  404764:	781b      	ldrb	r3, [r3, #0]
  404766:	f013 0f10 	tst.w	r3, #16
  40476a:	f43f ad3d 	beq.w	4041e8 <tcp_input+0x1a8>
  40476e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  404770:	4b18      	ldr	r3, [pc, #96]	; (4047d4 <tcp_input+0x794>)
  404772:	681b      	ldr	r3, [r3, #0]
  404774:	429a      	cmp	r2, r3
  404776:	f47f ad37 	bne.w	4041e8 <tcp_input+0x1a8>
      pcb->state = FIN_WAIT_2;
  40477a:	2306      	movs	r3, #6
  40477c:	762b      	strb	r3, [r5, #24]
  40477e:	e533      	b.n	4041e8 <tcp_input+0x1a8>
    tcp_receive(pcb);
  404780:	4628      	mov	r0, r5
  404782:	4b1b      	ldr	r3, [pc, #108]	; (4047f0 <tcp_input+0x7b0>)
  404784:	4798      	blx	r3
    if (recv_flags & TF_GOT_FIN) {
  404786:	4b1b      	ldr	r3, [pc, #108]	; (4047f4 <tcp_input+0x7b4>)
  404788:	781b      	ldrb	r3, [r3, #0]
  40478a:	f013 0f20 	tst.w	r3, #32
  40478e:	f43f ad2b 	beq.w	4041e8 <tcp_input+0x1a8>
      tcp_ack_now(pcb);
  404792:	7fab      	ldrb	r3, [r5, #30]
  404794:	f043 0302 	orr.w	r3, r3, #2
  404798:	77ab      	strb	r3, [r5, #30]
      tcp_pcb_purge(pcb);
  40479a:	4628      	mov	r0, r5
  40479c:	4b1b      	ldr	r3, [pc, #108]	; (40480c <tcp_input+0x7cc>)
  40479e:	4798      	blx	r3
      TCP_RMV_ACTIVE(pcb);
  4047a0:	4b1b      	ldr	r3, [pc, #108]	; (404810 <tcp_input+0x7d0>)
  4047a2:	681b      	ldr	r3, [r3, #0]
  4047a4:	42ab      	cmp	r3, r5
  4047a6:	d10e      	bne.n	4047c6 <tcp_input+0x786>
  4047a8:	68ea      	ldr	r2, [r5, #12]
  4047aa:	4b19      	ldr	r3, [pc, #100]	; (404810 <tcp_input+0x7d0>)
  4047ac:	601a      	str	r2, [r3, #0]
  4047ae:	2201      	movs	r2, #1
  4047b0:	4b18      	ldr	r3, [pc, #96]	; (404814 <tcp_input+0x7d4>)
  4047b2:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
  4047b4:	230a      	movs	r3, #10
  4047b6:	762b      	strb	r3, [r5, #24]
      TCP_REG(&tcp_tw_pcbs, pcb);
  4047b8:	4b17      	ldr	r3, [pc, #92]	; (404818 <tcp_input+0x7d8>)
  4047ba:	681a      	ldr	r2, [r3, #0]
  4047bc:	60ea      	str	r2, [r5, #12]
  4047be:	601d      	str	r5, [r3, #0]
  4047c0:	4b16      	ldr	r3, [pc, #88]	; (40481c <tcp_input+0x7dc>)
  4047c2:	4798      	blx	r3
  4047c4:	e510      	b.n	4041e8 <tcp_input+0x1a8>
      TCP_RMV_ACTIVE(pcb);
  4047c6:	4a16      	ldr	r2, [pc, #88]	; (404820 <tcp_input+0x7e0>)
  4047c8:	6013      	str	r3, [r2, #0]
  4047ca:	2200      	movs	r2, #0
  4047cc:	2001      	movs	r0, #1
  4047ce:	e02e      	b.n	40482e <tcp_input+0x7ee>
  4047d0:	004011c1 	.word	0x004011c1
  4047d4:	204025c0 	.word	0x204025c0
  4047d8:	204025e0 	.word	0x204025e0
  4047dc:	204025e4 	.word	0x204025e4
  4047e0:	004035d9 	.word	0x004035d9
  4047e4:	00402be5 	.word	0x00402be5
  4047e8:	204025c4 	.word	0x204025c4
  4047ec:	0040347d 	.word	0x0040347d
  4047f0:	00403765 	.word	0x00403765
  4047f4:	204025dc 	.word	0x204025dc
  4047f8:	204025e8 	.word	0x204025e8
  4047fc:	20403930 	.word	0x20403930
  404800:	20403938 	.word	0x20403938
  404804:	00405305 	.word	0x00405305
  404808:	004053dd 	.word	0x004053dd
  40480c:	00402c7d 	.word	0x00402c7d
  404810:	20404964 	.word	0x20404964
  404814:	20404960 	.word	0x20404960
  404818:	20404978 	.word	0x20404978
  40481c:	00402061 	.word	0x00402061
  404820:	20404970 	.word	0x20404970
  404824:	68d9      	ldr	r1, [r3, #12]
  404826:	42a9      	cmp	r1, r5
  404828:	d009      	beq.n	40483e <tcp_input+0x7fe>
  40482a:	4602      	mov	r2, r0
  40482c:	460b      	mov	r3, r1
  40482e:	2b00      	cmp	r3, #0
  404830:	d1f8      	bne.n	404824 <tcp_input+0x7e4>
  404832:	2a00      	cmp	r2, #0
  404834:	d0bb      	beq.n	4047ae <tcp_input+0x76e>
  404836:	2200      	movs	r2, #0
  404838:	4b72      	ldr	r3, [pc, #456]	; (404a04 <tcp_input+0x9c4>)
  40483a:	601a      	str	r2, [r3, #0]
  40483c:	e7b7      	b.n	4047ae <tcp_input+0x76e>
  40483e:	b10a      	cbz	r2, 404844 <tcp_input+0x804>
  404840:	4a70      	ldr	r2, [pc, #448]	; (404a04 <tcp_input+0x9c4>)
  404842:	6013      	str	r3, [r2, #0]
  404844:	68ca      	ldr	r2, [r1, #12]
  404846:	60da      	str	r2, [r3, #12]
  404848:	e7b1      	b.n	4047ae <tcp_input+0x76e>
    tcp_receive(pcb);
  40484a:	4628      	mov	r0, r5
  40484c:	4b6e      	ldr	r3, [pc, #440]	; (404a08 <tcp_input+0x9c8>)
  40484e:	4798      	blx	r3
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
  404850:	4b6e      	ldr	r3, [pc, #440]	; (404a0c <tcp_input+0x9cc>)
  404852:	781b      	ldrb	r3, [r3, #0]
  404854:	f013 0f10 	tst.w	r3, #16
  404858:	f43f acc6 	beq.w	4041e8 <tcp_input+0x1a8>
  40485c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40485e:	4b6c      	ldr	r3, [pc, #432]	; (404a10 <tcp_input+0x9d0>)
  404860:	681b      	ldr	r3, [r3, #0]
  404862:	429a      	cmp	r2, r3
  404864:	f47f acc0 	bne.w	4041e8 <tcp_input+0x1a8>
      tcp_pcb_purge(pcb);
  404868:	4628      	mov	r0, r5
  40486a:	4b6a      	ldr	r3, [pc, #424]	; (404a14 <tcp_input+0x9d4>)
  40486c:	4798      	blx	r3
      TCP_RMV_ACTIVE(pcb);
  40486e:	4b6a      	ldr	r3, [pc, #424]	; (404a18 <tcp_input+0x9d8>)
  404870:	681b      	ldr	r3, [r3, #0]
  404872:	42ab      	cmp	r3, r5
  404874:	d10e      	bne.n	404894 <tcp_input+0x854>
  404876:	68ea      	ldr	r2, [r5, #12]
  404878:	4b67      	ldr	r3, [pc, #412]	; (404a18 <tcp_input+0x9d8>)
  40487a:	601a      	str	r2, [r3, #0]
  40487c:	2201      	movs	r2, #1
  40487e:	4b67      	ldr	r3, [pc, #412]	; (404a1c <tcp_input+0x9dc>)
  404880:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
  404882:	230a      	movs	r3, #10
  404884:	762b      	strb	r3, [r5, #24]
      TCP_REG(&tcp_tw_pcbs, pcb);
  404886:	4b66      	ldr	r3, [pc, #408]	; (404a20 <tcp_input+0x9e0>)
  404888:	681a      	ldr	r2, [r3, #0]
  40488a:	60ea      	str	r2, [r5, #12]
  40488c:	601d      	str	r5, [r3, #0]
  40488e:	4b65      	ldr	r3, [pc, #404]	; (404a24 <tcp_input+0x9e4>)
  404890:	4798      	blx	r3
  404892:	e4a9      	b.n	4041e8 <tcp_input+0x1a8>
      TCP_RMV_ACTIVE(pcb);
  404894:	4a5b      	ldr	r2, [pc, #364]	; (404a04 <tcp_input+0x9c4>)
  404896:	6013      	str	r3, [r2, #0]
  404898:	2200      	movs	r2, #0
  40489a:	2001      	movs	r0, #1
  40489c:	e004      	b.n	4048a8 <tcp_input+0x868>
  40489e:	68d9      	ldr	r1, [r3, #12]
  4048a0:	42a9      	cmp	r1, r5
  4048a2:	d009      	beq.n	4048b8 <tcp_input+0x878>
  4048a4:	4602      	mov	r2, r0
  4048a6:	460b      	mov	r3, r1
  4048a8:	2b00      	cmp	r3, #0
  4048aa:	d1f8      	bne.n	40489e <tcp_input+0x85e>
  4048ac:	2a00      	cmp	r2, #0
  4048ae:	d0e5      	beq.n	40487c <tcp_input+0x83c>
  4048b0:	2200      	movs	r2, #0
  4048b2:	4b54      	ldr	r3, [pc, #336]	; (404a04 <tcp_input+0x9c4>)
  4048b4:	601a      	str	r2, [r3, #0]
  4048b6:	e7e1      	b.n	40487c <tcp_input+0x83c>
  4048b8:	b10a      	cbz	r2, 4048be <tcp_input+0x87e>
  4048ba:	4a52      	ldr	r2, [pc, #328]	; (404a04 <tcp_input+0x9c4>)
  4048bc:	6013      	str	r3, [r2, #0]
  4048be:	68ca      	ldr	r2, [r1, #12]
  4048c0:	60da      	str	r2, [r3, #12]
  4048c2:	e7db      	b.n	40487c <tcp_input+0x83c>
    tcp_receive(pcb);
  4048c4:	4628      	mov	r0, r5
  4048c6:	4b50      	ldr	r3, [pc, #320]	; (404a08 <tcp_input+0x9c8>)
  4048c8:	4798      	blx	r3
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
  4048ca:	4b50      	ldr	r3, [pc, #320]	; (404a0c <tcp_input+0x9cc>)
  4048cc:	781b      	ldrb	r3, [r3, #0]
  4048ce:	f013 0f10 	tst.w	r3, #16
  4048d2:	f43f ac89 	beq.w	4041e8 <tcp_input+0x1a8>
  4048d6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4048d8:	4b4d      	ldr	r3, [pc, #308]	; (404a10 <tcp_input+0x9d0>)
  4048da:	681b      	ldr	r3, [r3, #0]
  4048dc:	429a      	cmp	r2, r3
  4048de:	f47f ac83 	bne.w	4041e8 <tcp_input+0x1a8>
      recv_flags |= TF_CLOSED;
  4048e2:	4a51      	ldr	r2, [pc, #324]	; (404a28 <tcp_input+0x9e8>)
  4048e4:	7813      	ldrb	r3, [r2, #0]
  4048e6:	f043 0310 	orr.w	r3, r3, #16
  4048ea:	7013      	strb	r3, [r2, #0]
  4048ec:	e47c      	b.n	4041e8 <tcp_input+0x1a8>
      } else if (recv_flags & TF_CLOSED) {
  4048ee:	f013 0f10 	tst.w	r3, #16
  4048f2:	d013      	beq.n	40491c <tcp_input+0x8dc>
        if (!(pcb->flags & TF_RXCLOSED)) {
  4048f4:	7fab      	ldrb	r3, [r5, #30]
  4048f6:	f013 0f10 	tst.w	r3, #16
  4048fa:	d106      	bne.n	40490a <tcp_input+0x8ca>
          TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_CLSD);
  4048fc:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  404900:	b11b      	cbz	r3, 40490a <tcp_input+0x8ca>
  404902:	f06f 010b 	mvn.w	r1, #11
  404906:	6928      	ldr	r0, [r5, #16]
  404908:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
  40490a:	4629      	mov	r1, r5
  40490c:	4842      	ldr	r0, [pc, #264]	; (404a18 <tcp_input+0x9d8>)
  40490e:	4b47      	ldr	r3, [pc, #284]	; (404a2c <tcp_input+0x9ec>)
  404910:	4798      	blx	r3
        memp_free(MEMP_TCP_PCB, pcb);
  404912:	4629      	mov	r1, r5
  404914:	2001      	movs	r0, #1
  404916:	4b46      	ldr	r3, [pc, #280]	; (404a30 <tcp_input+0x9f0>)
  404918:	4798      	blx	r3
  40491a:	e47a      	b.n	404212 <tcp_input+0x1d2>
        if (pcb->acked > 0) {
  40491c:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
  404920:	b142      	cbz	r2, 404934 <tcp_input+0x8f4>
          TCP_EVENT_SENT(pcb, pcb->acked, err);
  404922:	6feb      	ldr	r3, [r5, #124]	; 0x7c
  404924:	b133      	cbz	r3, 404934 <tcp_input+0x8f4>
  404926:	4629      	mov	r1, r5
  404928:	6928      	ldr	r0, [r5, #16]
  40492a:	4798      	blx	r3
          if (err == ERR_ABRT) {
  40492c:	f110 0f0a 	cmn.w	r0, #10
  404930:	f43f ac6f 	beq.w	404212 <tcp_input+0x1d2>
        if (recv_data != NULL) {
  404934:	4b3f      	ldr	r3, [pc, #252]	; (404a34 <tcp_input+0x9f4>)
  404936:	681a      	ldr	r2, [r3, #0]
  404938:	b1ca      	cbz	r2, 40496e <tcp_input+0x92e>
          if (pcb->flags & TF_RXCLOSED) {
  40493a:	7fab      	ldrb	r3, [r5, #30]
  40493c:	f013 0f10 	tst.w	r3, #16
  404940:	d006      	beq.n	404950 <tcp_input+0x910>
            pbuf_free(recv_data);
  404942:	4610      	mov	r0, r2
  404944:	4b3c      	ldr	r3, [pc, #240]	; (404a38 <tcp_input+0x9f8>)
  404946:	4798      	blx	r3
            tcp_abort(pcb);
  404948:	4628      	mov	r0, r5
  40494a:	4b3c      	ldr	r3, [pc, #240]	; (404a3c <tcp_input+0x9fc>)
  40494c:	4798      	blx	r3
            goto aborted;
  40494e:	e460      	b.n	404212 <tcp_input+0x1d2>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
  404950:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
  404954:	b1ec      	cbz	r4, 404992 <tcp_input+0x952>
  404956:	2300      	movs	r3, #0
  404958:	4629      	mov	r1, r5
  40495a:	6928      	ldr	r0, [r5, #16]
  40495c:	47a0      	blx	r4
          if (err == ERR_ABRT) {
  40495e:	f110 0f0a 	cmn.w	r0, #10
  404962:	f43f ac56 	beq.w	404212 <tcp_input+0x1d2>
          if (err != ERR_OK) {
  404966:	b110      	cbz	r0, 40496e <tcp_input+0x92e>
            pcb->refused_data = recv_data;
  404968:	4b32      	ldr	r3, [pc, #200]	; (404a34 <tcp_input+0x9f4>)
  40496a:	681b      	ldr	r3, [r3, #0]
  40496c:	67ab      	str	r3, [r5, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
  40496e:	4b2e      	ldr	r3, [pc, #184]	; (404a28 <tcp_input+0x9e8>)
  404970:	781b      	ldrb	r3, [r3, #0]
  404972:	f013 0f20 	tst.w	r3, #32
  404976:	d005      	beq.n	404984 <tcp_input+0x944>
          if (pcb->refused_data != NULL) {
  404978:	6fab      	ldr	r3, [r5, #120]	; 0x78
  40497a:	b183      	cbz	r3, 40499e <tcp_input+0x95e>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
  40497c:	7b5a      	ldrb	r2, [r3, #13]
  40497e:	f042 0220 	orr.w	r2, r2, #32
  404982:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
  404984:	2200      	movs	r2, #0
  404986:	4b2e      	ldr	r3, [pc, #184]	; (404a40 <tcp_input+0xa00>)
  404988:	601a      	str	r2, [r3, #0]
        tcp_output(pcb);
  40498a:	4628      	mov	r0, r5
  40498c:	4b2d      	ldr	r3, [pc, #180]	; (404a44 <tcp_input+0xa04>)
  40498e:	4798      	blx	r3
  404990:	e43f      	b.n	404212 <tcp_input+0x1d2>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
  404992:	2300      	movs	r3, #0
  404994:	4629      	mov	r1, r5
  404996:	4618      	mov	r0, r3
  404998:	4c2b      	ldr	r4, [pc, #172]	; (404a48 <tcp_input+0xa08>)
  40499a:	47a0      	blx	r4
  40499c:	e7df      	b.n	40495e <tcp_input+0x91e>
            if (pcb->rcv_wnd != TCP_WND) {
  40499e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
  4049a0:	f640 3268 	movw	r2, #2920	; 0xb68
  4049a4:	4293      	cmp	r3, r2
  4049a6:	d001      	beq.n	4049ac <tcp_input+0x96c>
              pcb->rcv_wnd++;
  4049a8:	3301      	adds	r3, #1
  4049aa:	85ab      	strh	r3, [r5, #44]	; 0x2c
            TCP_EVENT_CLOSED(pcb, err);
  4049ac:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
  4049b0:	2c00      	cmp	r4, #0
  4049b2:	d0e7      	beq.n	404984 <tcp_input+0x944>
  4049b4:	2300      	movs	r3, #0
  4049b6:	461a      	mov	r2, r3
  4049b8:	4629      	mov	r1, r5
  4049ba:	6928      	ldr	r0, [r5, #16]
  4049bc:	47a0      	blx	r4
            if (err == ERR_ABRT) {
  4049be:	f110 0f0a 	cmn.w	r0, #10
  4049c2:	d1df      	bne.n	404984 <tcp_input+0x944>
  4049c4:	e425      	b.n	404212 <tcp_input+0x1d2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
  4049c6:	4b21      	ldr	r3, [pc, #132]	; (404a4c <tcp_input+0xa0c>)
  4049c8:	681b      	ldr	r3, [r3, #0]
  4049ca:	8998      	ldrh	r0, [r3, #12]
  4049cc:	4b20      	ldr	r3, [pc, #128]	; (404a50 <tcp_input+0xa10>)
  4049ce:	4798      	blx	r3
  4049d0:	f010 0f04 	tst.w	r0, #4
  4049d4:	d004      	beq.n	4049e0 <tcp_input+0x9a0>
    pbuf_free(p);
  4049d6:	4620      	mov	r0, r4
  4049d8:	4b17      	ldr	r3, [pc, #92]	; (404a38 <tcp_input+0x9f8>)
  4049da:	4798      	blx	r3
  4049dc:	f7ff bb48 	b.w	404070 <tcp_input+0x30>
        tcphdr->dest, tcphdr->src);
  4049e0:	4b1a      	ldr	r3, [pc, #104]	; (404a4c <tcp_input+0xa0c>)
  4049e2:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen,
  4049e4:	4a1b      	ldr	r2, [pc, #108]	; (404a54 <tcp_input+0xa14>)
  4049e6:	8810      	ldrh	r0, [r2, #0]
  4049e8:	4a1b      	ldr	r2, [pc, #108]	; (404a58 <tcp_input+0xa18>)
  4049ea:	6811      	ldr	r1, [r2, #0]
  4049ec:	881a      	ldrh	r2, [r3, #0]
  4049ee:	9201      	str	r2, [sp, #4]
  4049f0:	885b      	ldrh	r3, [r3, #2]
  4049f2:	9300      	str	r3, [sp, #0]
  4049f4:	4b19      	ldr	r3, [pc, #100]	; (404a5c <tcp_input+0xa1c>)
  4049f6:	4a1a      	ldr	r2, [pc, #104]	; (404a60 <tcp_input+0xa20>)
  4049f8:	4401      	add	r1, r0
  4049fa:	4805      	ldr	r0, [pc, #20]	; (404a10 <tcp_input+0x9d0>)
  4049fc:	6800      	ldr	r0, [r0, #0]
  4049fe:	4d19      	ldr	r5, [pc, #100]	; (404a64 <tcp_input+0xa24>)
  404a00:	47a8      	blx	r5
  404a02:	e7e8      	b.n	4049d6 <tcp_input+0x996>
  404a04:	20404970 	.word	0x20404970
  404a08:	00403765 	.word	0x00403765
  404a0c:	204025c4 	.word	0x204025c4
  404a10:	204025c0 	.word	0x204025c0
  404a14:	00402c7d 	.word	0x00402c7d
  404a18:	20404964 	.word	0x20404964
  404a1c:	20404960 	.word	0x20404960
  404a20:	20404978 	.word	0x20404978
  404a24:	00402061 	.word	0x00402061
  404a28:	204025dc 	.word	0x204025dc
  404a2c:	00403049 	.word	0x00403049
  404a30:	00402475 	.word	0x00402475
  404a34:	204025d8 	.word	0x204025d8
  404a38:	0040262d 	.word	0x0040262d
  404a3c:	0040347d 	.word	0x0040347d
  404a40:	2040497c 	.word	0x2040497c
  404a44:	0040502d 	.word	0x0040502d
  404a48:	00403291 	.word	0x00403291
  404a4c:	204025e4 	.word	0x204025e4
  404a50:	0040119f 	.word	0x0040119f
  404a54:	204025e8 	.word	0x204025e8
  404a58:	204025e0 	.word	0x204025e0
  404a5c:	20403930 	.word	0x20403930
  404a60:	20403938 	.word	0x20403938
  404a64:	00405305 	.word	0x00405305

00404a68 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
  404a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404a6c:	4681      	mov	r9, r0
  404a6e:	4688      	mov	r8, r1
  404a70:	4616      	mov	r6, r2
  404a72:	469a      	mov	sl, r3
  404a74:	f89d 7020 	ldrb.w	r7, [sp, #32]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
  404a78:	f007 0301 	and.w	r3, r7, #1
  404a7c:	f007 0202 	and.w	r2, r7, #2
  404a80:	2a00      	cmp	r2, #0
  404a82:	bf14      	ite	ne
  404a84:	250c      	movne	r5, #12
  404a86:	2500      	moveq	r5, #0
  404a88:	eb05 0583 	add.w	r5, r5, r3, lsl #2

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
  404a8c:	2003      	movs	r0, #3
  404a8e:	4b23      	ldr	r3, [pc, #140]	; (404b1c <tcp_create_segment+0xb4>)
  404a90:	4798      	blx	r3
  404a92:	4604      	mov	r4, r0
  404a94:	2800      	cmp	r0, #0
  404a96:	d038      	beq.n	404b0a <tcp_create_segment+0xa2>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
    return NULL;
  }
  seg->flags = optflags;
  404a98:	7287      	strb	r7, [r0, #10]
  seg->next = NULL;
  404a9a:	2300      	movs	r3, #0
  404a9c:	6003      	str	r3, [r0, #0]
  seg->p = p;
  404a9e:	f8c0 8004 	str.w	r8, [r0, #4]
  seg->len = p->tot_len - optlen;
  404aa2:	f8b8 3008 	ldrh.w	r3, [r8, #8]
  404aa6:	1b5b      	subs	r3, r3, r5
  404aa8:	8103      	strh	r3, [r0, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
  404aaa:	2114      	movs	r1, #20
  404aac:	4640      	mov	r0, r8
  404aae:	4b1c      	ldr	r3, [pc, #112]	; (404b20 <tcp_create_segment+0xb8>)
  404ab0:	4798      	blx	r3
  404ab2:	bb70      	cbnz	r0, 404b12 <tcp_create_segment+0xaa>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
    return NULL;
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
  404ab4:	6863      	ldr	r3, [r4, #4]
  404ab6:	f8d3 8004 	ldr.w	r8, [r3, #4]
  404aba:	f8c4 800c 	str.w	r8, [r4, #12]
  seg->tcphdr->src = htons(pcb->local_port);
  404abe:	f8b9 001a 	ldrh.w	r0, [r9, #26]
  404ac2:	4f18      	ldr	r7, [pc, #96]	; (404b24 <tcp_create_segment+0xbc>)
  404ac4:	47b8      	blx	r7
  404ac6:	f8a8 0000 	strh.w	r0, [r8]
  seg->tcphdr->dest = htons(pcb->remote_port);
  404aca:	f8d4 800c 	ldr.w	r8, [r4, #12]
  404ace:	f8b9 001c 	ldrh.w	r0, [r9, #28]
  404ad2:	47b8      	blx	r7
  404ad4:	f8a8 0002 	strh.w	r0, [r8, #2]
  seg->tcphdr->seqno = htonl(seqno);
  404ad8:	f8d4 800c 	ldr.w	r8, [r4, #12]
  404adc:	4650      	mov	r0, sl
  404ade:	4b12      	ldr	r3, [pc, #72]	; (404b28 <tcp_create_segment+0xc0>)
  404ae0:	4798      	blx	r3
  404ae2:	f8c8 0004 	str.w	r0, [r8, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
  404ae6:	f8d4 800c 	ldr.w	r8, [r4, #12]
  404aea:	f3c5 0587 	ubfx	r5, r5, #2, #8
  404aee:	3505      	adds	r5, #5
  404af0:	ea46 3505 	orr.w	r5, r6, r5, lsl #12
  404af4:	b2a8      	uxth	r0, r5
  404af6:	47b8      	blx	r7
  404af8:	f8a8 000c 	strh.w	r0, [r8, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
  404afc:	68e3      	ldr	r3, [r4, #12]
  404afe:	2200      	movs	r2, #0
  404b00:	749a      	strb	r2, [r3, #18]
  404b02:	74da      	strb	r2, [r3, #19]
  return seg;
} 
  404b04:	4620      	mov	r0, r4
  404b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
  404b0a:	4640      	mov	r0, r8
  404b0c:	4b07      	ldr	r3, [pc, #28]	; (404b2c <tcp_create_segment+0xc4>)
  404b0e:	4798      	blx	r3
    return NULL;
  404b10:	e7f8      	b.n	404b04 <tcp_create_segment+0x9c>
    tcp_seg_free(seg);
  404b12:	4620      	mov	r0, r4
  404b14:	4b06      	ldr	r3, [pc, #24]	; (404b30 <tcp_create_segment+0xc8>)
  404b16:	4798      	blx	r3
    return NULL;
  404b18:	2400      	movs	r4, #0
  404b1a:	e7f3      	b.n	404b04 <tcp_create_segment+0x9c>
  404b1c:	00402455 	.word	0x00402455
  404b20:	004025bf 	.word	0x004025bf
  404b24:	00401195 	.word	0x00401195
  404b28:	004011a9 	.word	0x004011a9
  404b2c:	0040262d 	.word	0x0040262d
  404b30:	00402be5 	.word	0x00402be5

00404b34 <tcp_output_alloc_header>:
{
  404b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404b38:	4606      	mov	r6, r0
  404b3a:	460c      	mov	r4, r1
  404b3c:	4699      	mov	r9, r3
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
  404b3e:	3214      	adds	r2, #20
  404b40:	4411      	add	r1, r2
  404b42:	2200      	movs	r2, #0
  404b44:	b289      	uxth	r1, r1
  404b46:	2001      	movs	r0, #1
  404b48:	4b14      	ldr	r3, [pc, #80]	; (404b9c <tcp_output_alloc_header+0x68>)
  404b4a:	4798      	blx	r3
  if (p != NULL) {
  404b4c:	4680      	mov	r8, r0
  404b4e:	b310      	cbz	r0, 404b96 <tcp_output_alloc_header+0x62>
    tcphdr = (struct tcp_hdr *)p->payload;
  404b50:	6845      	ldr	r5, [r0, #4]
    tcphdr->src = htons(pcb->local_port);
  404b52:	8b70      	ldrh	r0, [r6, #26]
  404b54:	4f12      	ldr	r7, [pc, #72]	; (404ba0 <tcp_output_alloc_header+0x6c>)
  404b56:	47b8      	blx	r7
  404b58:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = htons(pcb->remote_port);
  404b5a:	8bb0      	ldrh	r0, [r6, #28]
  404b5c:	47b8      	blx	r7
  404b5e:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
  404b60:	f8c5 9004 	str.w	r9, [r5, #4]
    tcphdr->ackno = htonl(pcb->rcv_nxt);
  404b64:	6ab0      	ldr	r0, [r6, #40]	; 0x28
  404b66:	4b0f      	ldr	r3, [pc, #60]	; (404ba4 <tcp_output_alloc_header+0x70>)
  404b68:	4798      	blx	r3
  404b6a:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
  404b6c:	08a0      	lsrs	r0, r4, #2
  404b6e:	3005      	adds	r0, #5
  404b70:	0300      	lsls	r0, r0, #12
  404b72:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  404b76:	f040 0010 	orr.w	r0, r0, #16
  404b7a:	47b8      	blx	r7
  404b7c:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = htons(pcb->rcv_ann_wnd);
  404b7e:	8df0      	ldrh	r0, [r6, #46]	; 0x2e
  404b80:	47b8      	blx	r7
  404b82:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
  404b84:	2300      	movs	r3, #0
  404b86:	742b      	strb	r3, [r5, #16]
  404b88:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
  404b8a:	74ab      	strb	r3, [r5, #18]
  404b8c:	74eb      	strb	r3, [r5, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  404b8e:	8df2      	ldrh	r2, [r6, #46]	; 0x2e
  404b90:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  404b92:	4413      	add	r3, r2
  404b94:	6333      	str	r3, [r6, #48]	; 0x30
}
  404b96:	4640      	mov	r0, r8
  404b98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404b9c:	00402685 	.word	0x00402685
  404ba0:	00401195 	.word	0x00401195
  404ba4:	004011a9 	.word	0x004011a9

00404ba8 <tcp_write>:
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)", 
  404ba8:	b359      	cbz	r1, 404c02 <tcp_write+0x5a>
{
  404baa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404bae:	b08b      	sub	sp, #44	; 0x2c
  404bb0:	460d      	mov	r5, r1
  if ((pcb->state != ESTABLISHED) &&
  404bb2:	7e04      	ldrb	r4, [r0, #24]
      (pcb->state != CLOSE_WAIT) &&
  404bb4:	1ea1      	subs	r1, r4, #2
  404bb6:	b2c9      	uxtb	r1, r1
      (pcb->state != SYN_SENT) &&
  404bb8:	2902      	cmp	r1, #2
  404bba:	d902      	bls.n	404bc2 <tcp_write+0x1a>
  404bbc:	2c07      	cmp	r4, #7
  404bbe:	f040 814f 	bne.w	404e60 <tcp_write+0x2b8>
  } else if (len == 0) {
  404bc2:	b13a      	cbz	r2, 404bd4 <tcp_write+0x2c>
  if (len > pcb->snd_buf) {
  404bc4:	f8b0 1066 	ldrh.w	r1, [r0, #102]	; 0x66
  404bc8:	4291      	cmp	r1, r2
  404bca:	d31b      	bcc.n	404c04 <tcp_write+0x5c>
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  404bcc:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
  404bd0:	2907      	cmp	r1, #7
  404bd2:	d81e      	bhi.n	404c12 <tcp_write+0x6a>
  404bd4:	9505      	str	r5, [sp, #20]
  404bd6:	9309      	str	r3, [sp, #36]	; 0x24
  404bd8:	4692      	mov	sl, r2
  404bda:	4604      	mov	r4, r0
  u16_t mss_local = LWIP_MIN(pcb->mss, pcb->snd_wnd_max/2);
  404bdc:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
  404be0:	085b      	lsrs	r3, r3, #1
  404be2:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
  404be4:	4293      	cmp	r3, r2
  404be6:	bf28      	it	cs
  404be8:	4613      	movcs	r3, r2
  404bea:	9307      	str	r3, [sp, #28]

  err = tcp_write_checks(pcb, len);
  if (err != ERR_OK) {
    return err;
  }
  queuelen = pcb->snd_queuelen;
  404bec:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
  404bf0:	9304      	str	r3, [sp, #16]
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
  404bf2:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
  404bf4:	b9af      	cbnz	r7, 404c22 <tcp_write+0x7a>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
  404bf6:	9703      	str	r7, [sp, #12]
  u16_t oversize = 0;
  404bf8:	2500      	movs	r5, #0
  u16_t oversize_used = 0;
  404bfa:	462e      	mov	r6, r5
  u16_t pos = 0; /* position in 'arg' data */
  404bfc:	46a9      	mov	r9, r5
  struct pbuf *concat_p = NULL;
  404bfe:	46a8      	mov	r8, r5
  404c00:	e038      	b.n	404c74 <tcp_write+0xcc>
  404c02:	e7fe      	b.n	404c02 <tcp_write+0x5a>
    pcb->flags |= TF_NAGLEMEMERR;
  404c04:	7f83      	ldrb	r3, [r0, #30]
  404c06:	f063 037f 	orn	r3, r3, #127	; 0x7f
  404c0a:	7783      	strb	r3, [r0, #30]
    return ERR_MEM;
  404c0c:	f04f 30ff 	mov.w	r0, #4294967295
  404c10:	e07a      	b.n	404d08 <tcp_write+0x160>
    pcb->flags |= TF_NAGLEMEMERR;
  404c12:	7f83      	ldrb	r3, [r0, #30]
  404c14:	f063 037f 	orn	r3, r3, #127	; 0x7f
  404c18:	7783      	strb	r3, [r0, #30]
    return ERR_MEM;
  404c1a:	f04f 30ff 	mov.w	r0, #4294967295
  404c1e:	e073      	b.n	404d08 <tcp_write+0x160>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
         last_unsent = last_unsent->next);
  404c20:	461f      	mov	r7, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  404c22:	683b      	ldr	r3, [r7, #0]
  404c24:	2b00      	cmp	r3, #0
  404c26:	d1fb      	bne.n	404c20 <tcp_write+0x78>
  404c28:	9302      	str	r3, [sp, #8]

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
  404c2a:	7abb      	ldrb	r3, [r7, #10]
  404c2c:	f003 0001 	and.w	r0, r3, #1
  404c30:	f003 0302 	and.w	r3, r3, #2
  404c34:	2b00      	cmp	r3, #0
  404c36:	bf14      	ite	ne
  404c38:	220c      	movne	r2, #12
  404c3a:	2200      	moveq	r2, #0
    space = mss_local - (last_unsent->len + unsent_optlen);
  404c3c:	893b      	ldrh	r3, [r7, #8]
  404c3e:	9907      	ldr	r1, [sp, #28]
  404c40:	1ac9      	subs	r1, r1, r3
  404c42:	eba1 0180 	sub.w	r1, r1, r0, lsl #2
  404c46:	1a89      	subs	r1, r1, r2
  404c48:	b289      	uxth	r1, r1
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->unsent_oversize */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
  404c4a:	f8b4 606a 	ldrh.w	r6, [r4, #106]	; 0x6a
    if (oversize > 0) {
  404c4e:	b1c6      	cbz	r6, 404c82 <tcp_write+0xda>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize_used <= space);
      seg = last_unsent;
      oversize_used = oversize < len ? oversize : len;
  404c50:	4652      	mov	r2, sl
  404c52:	45b2      	cmp	sl, r6
  404c54:	bf28      	it	cs
  404c56:	4632      	movcs	r2, r6
      pos += oversize_used;
      oversize -= oversize_used;
  404c58:	1ab5      	subs	r5, r6, r2
  404c5a:	b2ad      	uxth	r5, r5
      space -= oversize_used;
  404c5c:	1a89      	subs	r1, r1, r2
  404c5e:	b289      	uxth	r1, r1
      pos += oversize_used;
  404c60:	4616      	mov	r6, r2
      space -= oversize_used;
  404c62:	9703      	str	r7, [sp, #12]
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
  404c64:	2900      	cmp	r1, #0
  404c66:	bf18      	it	ne
  404c68:	4556      	cmpne	r6, sl
  404c6a:	d200      	bcs.n	404c6e <tcp_write+0xc6>
  404c6c:	b96b      	cbnz	r3, 404c8a <tcp_write+0xe2>
  404c6e:	46b1      	mov	r9, r6
  struct pbuf *concat_p = NULL;
  404c70:	f04f 0800 	mov.w	r8, #0
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
  404c74:	45ca      	cmp	sl, r9
  404c76:	f240 80c5 	bls.w	404e04 <tcp_write+0x25c>
  404c7a:	2300      	movs	r3, #0
  404c7c:	9302      	str	r3, [sp, #8]
  404c7e:	9306      	str	r3, [sp, #24]
  404c80:	e04e      	b.n	404d20 <tcp_write+0x178>
    oversize = pcb->unsent_oversize;
  404c82:	4635      	mov	r5, r6
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
  404c84:	9a02      	ldr	r2, [sp, #8]
  404c86:	9203      	str	r2, [sp, #12]
  404c88:	e7ec      	b.n	404c64 <tcp_write+0xbc>
      u16_t seglen = space < len - pos ? space : len - pos;
  404c8a:	ebaa 0306 	sub.w	r3, sl, r6
  404c8e:	428b      	cmp	r3, r1
  404c90:	bfa8      	it	ge
  404c92:	460b      	movge	r3, r1
  404c94:	fa1f f983 	uxth.w	r9, r3
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
  404c98:	2200      	movs	r2, #0
  404c9a:	2003      	movs	r0, #3
  404c9c:	4b74      	ldr	r3, [pc, #464]	; (404e70 <tcp_write+0x2c8>)
  404c9e:	4798      	blx	r3
  if (p == NULL) {
  404ca0:	4680      	mov	r8, r0
  404ca2:	2800      	cmp	r0, #0
  404ca4:	f000 80df 	beq.w	404e66 <tcp_write+0x2be>
  *oversize = p->len - length;
  404ca8:	8945      	ldrh	r5, [r0, #10]
  404caa:	eba5 0509 	sub.w	r5, r5, r9
  404cae:	b2ad      	uxth	r5, r5
  p->len = p->tot_len = length;
  404cb0:	f8a0 9008 	strh.w	r9, [r0, #8]
  404cb4:	f8a0 900a 	strh.w	r9, [r0, #10]
        TCP_DATA_COPY2(concat_p->payload, (u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
  404cb8:	464a      	mov	r2, r9
  404cba:	9b05      	ldr	r3, [sp, #20]
  404cbc:	1999      	adds	r1, r3, r6
  404cbe:	6840      	ldr	r0, [r0, #4]
  404cc0:	4b6c      	ldr	r3, [pc, #432]	; (404e74 <tcp_write+0x2cc>)
  404cc2:	4798      	blx	r3
      pos += seglen;
  404cc4:	44b1      	add	r9, r6
  404cc6:	fa1f f989 	uxth.w	r9, r9
      queuelen += pbuf_clen(concat_p);
  404cca:	4640      	mov	r0, r8
  404ccc:	4b6a      	ldr	r3, [pc, #424]	; (404e78 <tcp_write+0x2d0>)
  404cce:	4798      	blx	r3
  404cd0:	9b04      	ldr	r3, [sp, #16]
  404cd2:	4403      	add	r3, r0
  404cd4:	b29b      	uxth	r3, r3
  404cd6:	9304      	str	r3, [sp, #16]
  404cd8:	9703      	str	r7, [sp, #12]
  404cda:	e7cb      	b.n	404c74 <tcp_write+0xcc>
    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: queue too long %"U16_F" (%"U16_F")\n", queuelen, TCP_SND_QUEUELEN));
      pbuf_free(p);
  404cdc:	4628      	mov	r0, r5
  404cde:	4b67      	ldr	r3, [pc, #412]	; (404e7c <tcp_write+0x2d4>)
  404ce0:	4798      	blx	r3
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  }

  return ERR_OK;
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
  404ce2:	7fa3      	ldrb	r3, [r4, #30]
  404ce4:	f063 037f 	orn	r3, r3, #127	; 0x7f
  404ce8:	77a3      	strb	r3, [r4, #30]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
  404cea:	f1b8 0f00 	cmp.w	r8, #0
  404cee:	d002      	beq.n	404cf6 <tcp_write+0x14e>
    pbuf_free(concat_p);
  404cf0:	4640      	mov	r0, r8
  404cf2:	4b62      	ldr	r3, [pc, #392]	; (404e7c <tcp_write+0x2d4>)
  404cf4:	4798      	blx	r3
  }
  if (queue != NULL) {
  404cf6:	9b02      	ldr	r3, [sp, #8]
  404cf8:	2b00      	cmp	r3, #0
  404cfa:	f000 80ae 	beq.w	404e5a <tcp_write+0x2b2>
    tcp_segs_free(queue);
  404cfe:	4618      	mov	r0, r3
  404d00:	4b5f      	ldr	r3, [pc, #380]	; (404e80 <tcp_write+0x2d8>)
  404d02:	4798      	blx	r3
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
  404d04:	f04f 30ff 	mov.w	r0, #4294967295
}
  404d08:	b00b      	add	sp, #44	; 0x2c
  404d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
  404d0e:	9b03      	ldr	r3, [sp, #12]
  404d10:	9302      	str	r3, [sp, #8]
    pos += seglen;
  404d12:	44d9      	add	r9, fp
  404d14:	fa1f f989 	uxth.w	r9, r9
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
  404d18:	9b03      	ldr	r3, [sp, #12]
  404d1a:	9306      	str	r3, [sp, #24]
  while (pos < len) {
  404d1c:	45ca      	cmp	sl, r9
  404d1e:	d935      	bls.n	404d8c <tcp_write+0x1e4>
    u16_t left = len - pos;
  404d20:	ebaa 0b09 	sub.w	fp, sl, r9
    u16_t seglen = left > max_len ? max_len : left;
  404d24:	fa1f fb8b 	uxth.w	fp, fp
  404d28:	9907      	ldr	r1, [sp, #28]
  404d2a:	458b      	cmp	fp, r1
  404d2c:	bf28      	it	cs
  404d2e:	468b      	movcs	fp, r1
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
  404d30:	2200      	movs	r2, #0
  404d32:	4610      	mov	r0, r2
  404d34:	4b4e      	ldr	r3, [pc, #312]	; (404e70 <tcp_write+0x2c8>)
  404d36:	4798      	blx	r3
  if (p == NULL) {
  404d38:	4605      	mov	r5, r0
  404d3a:	2800      	cmp	r0, #0
  404d3c:	d0d1      	beq.n	404ce2 <tcp_write+0x13a>
  *oversize = p->len - length;
  404d3e:	8943      	ldrh	r3, [r0, #10]
  404d40:	9308      	str	r3, [sp, #32]
  p->len = p->tot_len = length;
  404d42:	f8a0 b008 	strh.w	fp, [r0, #8]
  404d46:	f8a0 b00a 	strh.w	fp, [r0, #10]
      TCP_DATA_COPY2((char *)p->payload + optlen, (u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
  404d4a:	465a      	mov	r2, fp
  404d4c:	9b05      	ldr	r3, [sp, #20]
  404d4e:	eb03 0109 	add.w	r1, r3, r9
  404d52:	6840      	ldr	r0, [r0, #4]
  404d54:	4b47      	ldr	r3, [pc, #284]	; (404e74 <tcp_write+0x2cc>)
  404d56:	4798      	blx	r3
    queuelen += pbuf_clen(p);
  404d58:	4628      	mov	r0, r5
  404d5a:	4b47      	ldr	r3, [pc, #284]	; (404e78 <tcp_write+0x2d0>)
  404d5c:	4798      	blx	r3
  404d5e:	9b04      	ldr	r3, [sp, #16]
  404d60:	4403      	add	r3, r0
  404d62:	b29b      	uxth	r3, r3
  404d64:	9304      	str	r3, [sp, #16]
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  404d66:	2b08      	cmp	r3, #8
  404d68:	d8b8      	bhi.n	404cdc <tcp_write+0x134>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
  404d6a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  404d6c:	2200      	movs	r2, #0
  404d6e:	9200      	str	r2, [sp, #0]
  404d70:	444b      	add	r3, r9
  404d72:	4629      	mov	r1, r5
  404d74:	4620      	mov	r0, r4
  404d76:	4d43      	ldr	r5, [pc, #268]	; (404e84 <tcp_write+0x2dc>)
  404d78:	47a8      	blx	r5
  404d7a:	9003      	str	r0, [sp, #12]
  404d7c:	2800      	cmp	r0, #0
  404d7e:	d0b0      	beq.n	404ce2 <tcp_write+0x13a>
    if (queue == NULL) {
  404d80:	9b02      	ldr	r3, [sp, #8]
  404d82:	2b00      	cmp	r3, #0
  404d84:	d0c3      	beq.n	404d0e <tcp_write+0x166>
      prev_seg->next = seg;
  404d86:	9a06      	ldr	r2, [sp, #24]
  404d88:	6010      	str	r0, [r2, #0]
  404d8a:	e7c2      	b.n	404d12 <tcp_write+0x16a>
  *oversize = p->len - length;
  404d8c:	9b08      	ldr	r3, [sp, #32]
  404d8e:	eba3 050b 	sub.w	r5, r3, fp
  404d92:	b2ad      	uxth	r5, r5
  if (oversize_used > 0) {
  404d94:	b13e      	cbz	r6, 404da6 <tcp_write+0x1fe>
    for (p = last_unsent->p; p; p = p->next) {
  404d96:	f8d7 9004 	ldr.w	r9, [r7, #4]
  404d9a:	f1b9 0f00 	cmp.w	r9, #0
  404d9e:	d150      	bne.n	404e42 <tcp_write+0x29a>
    last_unsent->len += oversize_used;
  404da0:	893b      	ldrh	r3, [r7, #8]
  404da2:	441e      	add	r6, r3
  404da4:	813e      	strh	r6, [r7, #8]
  pcb->unsent_oversize = oversize;
  404da6:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  if (concat_p != NULL) {
  404daa:	f1b8 0f00 	cmp.w	r8, #0
  404dae:	d008      	beq.n	404dc2 <tcp_write+0x21a>
    pbuf_cat(last_unsent->p, concat_p);
  404db0:	4641      	mov	r1, r8
  404db2:	6878      	ldr	r0, [r7, #4]
  404db4:	4b34      	ldr	r3, [pc, #208]	; (404e88 <tcp_write+0x2e0>)
  404db6:	4798      	blx	r3
    last_unsent->len += concat_p->tot_len;
  404db8:	893b      	ldrh	r3, [r7, #8]
  404dba:	f8b8 2008 	ldrh.w	r2, [r8, #8]
  404dbe:	4413      	add	r3, r2
  404dc0:	813b      	strh	r3, [r7, #8]
  if (last_unsent == NULL) {
  404dc2:	2f00      	cmp	r7, #0
  404dc4:	d140      	bne.n	404e48 <tcp_write+0x2a0>
    pcb->unsent = queue;
  404dc6:	9b02      	ldr	r3, [sp, #8]
  404dc8:	66e3      	str	r3, [r4, #108]	; 0x6c
  pcb->snd_lbb += len;
  404dca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  404dcc:	4453      	add	r3, sl
  404dce:	65e3      	str	r3, [r4, #92]	; 0x5c
  pcb->snd_buf -= len;
  404dd0:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
  404dd4:	eba3 030a 	sub.w	r3, r3, sl
  404dd8:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
  pcb->snd_queuelen = queuelen;
  404ddc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  404de0:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
  404de4:	9b03      	ldr	r3, [sp, #12]
  404de6:	b393      	cbz	r3, 404e4e <tcp_write+0x2a6>
  404de8:	68dc      	ldr	r4, [r3, #12]
  404dea:	b394      	cbz	r4, 404e52 <tcp_write+0x2aa>
  404dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404dee:	f013 0f02 	tst.w	r3, #2
  404df2:	d130      	bne.n	404e56 <tcp_write+0x2ae>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  404df4:	89a5      	ldrh	r5, [r4, #12]
  404df6:	2008      	movs	r0, #8
  404df8:	4b24      	ldr	r3, [pc, #144]	; (404e8c <tcp_write+0x2e4>)
  404dfa:	4798      	blx	r3
  404dfc:	4328      	orrs	r0, r5
  404dfe:	81a0      	strh	r0, [r4, #12]
  return ERR_OK;
  404e00:	2000      	movs	r0, #0
  404e02:	e781      	b.n	404d08 <tcp_write+0x160>
  while (pos < len) {
  404e04:	2300      	movs	r3, #0
  404e06:	9302      	str	r3, [sp, #8]
  404e08:	e7c4      	b.n	404d94 <tcp_write+0x1ec>
  404e0a:	4699      	mov	r9, r3
      p->tot_len += oversize_used;
  404e0c:	f8b9 3008 	ldrh.w	r3, [r9, #8]
  404e10:	4433      	add	r3, r6
  404e12:	f8a9 3008 	strh.w	r3, [r9, #8]
      if (p->next == NULL) {
  404e16:	f8d9 3000 	ldr.w	r3, [r9]
  404e1a:	2b00      	cmp	r3, #0
  404e1c:	d1f5      	bne.n	404e0a <tcp_write+0x262>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
  404e1e:	f8b9 300a 	ldrh.w	r3, [r9, #10]
  404e22:	f8d9 0004 	ldr.w	r0, [r9, #4]
  404e26:	4632      	mov	r2, r6
  404e28:	9905      	ldr	r1, [sp, #20]
  404e2a:	4418      	add	r0, r3
  404e2c:	47d8      	blx	fp
        p->len += oversize_used;
  404e2e:	f8b9 300a 	ldrh.w	r3, [r9, #10]
  404e32:	4433      	add	r3, r6
  404e34:	f8a9 300a 	strh.w	r3, [r9, #10]
    for (p = last_unsent->p; p; p = p->next) {
  404e38:	f8d9 3000 	ldr.w	r3, [r9]
  404e3c:	2b00      	cmp	r3, #0
  404e3e:	d0af      	beq.n	404da0 <tcp_write+0x1f8>
  404e40:	e7e3      	b.n	404e0a <tcp_write+0x262>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
  404e42:	f8df b030 	ldr.w	fp, [pc, #48]	; 404e74 <tcp_write+0x2cc>
  404e46:	e7e1      	b.n	404e0c <tcp_write+0x264>
    last_unsent->next = queue;
  404e48:	9b02      	ldr	r3, [sp, #8]
  404e4a:	603b      	str	r3, [r7, #0]
  404e4c:	e7bd      	b.n	404dca <tcp_write+0x222>
  return ERR_OK;
  404e4e:	2000      	movs	r0, #0
  404e50:	e75a      	b.n	404d08 <tcp_write+0x160>
  404e52:	2000      	movs	r0, #0
  404e54:	e758      	b.n	404d08 <tcp_write+0x160>
  404e56:	2000      	movs	r0, #0
  404e58:	e756      	b.n	404d08 <tcp_write+0x160>
  return ERR_MEM;
  404e5a:	f04f 30ff 	mov.w	r0, #4294967295
  404e5e:	e753      	b.n	404d08 <tcp_write+0x160>
    return ERR_CONN;
  404e60:	f06f 000c 	mvn.w	r0, #12
  404e64:	e750      	b.n	404d08 <tcp_write+0x160>
  pcb->flags |= TF_NAGLEMEMERR;
  404e66:	7fa3      	ldrb	r3, [r4, #30]
  404e68:	f063 037f 	orn	r3, r3, #127	; 0x7f
  404e6c:	77a3      	strb	r3, [r4, #30]
  404e6e:	e742      	b.n	404cf6 <tcp_write+0x14e>
  404e70:	00402685 	.word	0x00402685
  404e74:	00407295 	.word	0x00407295
  404e78:	0040282d 	.word	0x0040282d
  404e7c:	0040262d 	.word	0x0040262d
  404e80:	00402c09 	.word	0x00402c09
  404e84:	00404a69 	.word	0x00404a69
  404e88:	0040284d 	.word	0x0040284d
  404e8c:	00401195 	.word	0x00401195

00404e90 <tcp_enqueue_flags>:

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  404e90:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
  404e94:	2b07      	cmp	r3, #7
  404e96:	d822      	bhi.n	404ede <tcp_enqueue_flags+0x4e>
{
  404e98:	b5f0      	push	{r4, r5, r6, r7, lr}
  404e9a:	b083      	sub	sp, #12
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
    return ERR_MEM;
  }

  if (flags & TCP_SYN) {
  404e9c:	f001 0302 	and.w	r3, r1, #2
  u8_t optflags = 0;
  404ea0:	f3c1 0640 	ubfx	r6, r1, #1, #1
#if LWIP_TCP_TIMESTAMPS
  if ((pcb->flags & TF_TIMESTAMP)) {
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
  404ea4:	2b00      	cmp	r3, #0
  404ea6:	bf14      	ite	ne
  404ea8:	2704      	movne	r7, #4
  404eaa:	2700      	moveq	r7, #0

  /* tcp_enqueue_flags is always called with either SYN or FIN in flags.
   * We need one available snd_buf byte to do that.
   * This means we can't send FIN while snd_buf==0. A better fix would be to
   * not include SYN and FIN sequence numbers in the snd_buf count. */
  if (pcb->snd_buf == 0) {
  404eac:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
  404eb0:	2b00      	cmp	r3, #0
  404eb2:	d04e      	beq.n	404f52 <tcp_enqueue_flags+0xc2>
  404eb4:	460d      	mov	r5, r1
  404eb6:	4604      	mov	r4, r0
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
  }

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
  404eb8:	2200      	movs	r2, #0
  404eba:	4639      	mov	r1, r7
  404ebc:	4610      	mov	r0, r2
  404ebe:	4b26      	ldr	r3, [pc, #152]	; (404f58 <tcp_enqueue_flags+0xc8>)
  404ec0:	4798      	blx	r3
  404ec2:	4601      	mov	r1, r0
  404ec4:	b190      	cbz	r0, 404eec <tcp_enqueue_flags+0x5c>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
  404ec6:	9600      	str	r6, [sp, #0]
  404ec8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  404eca:	462a      	mov	r2, r5
  404ecc:	4620      	mov	r0, r4
  404ece:	4e23      	ldr	r6, [pc, #140]	; (404f5c <tcp_enqueue_flags+0xcc>)
  404ed0:	47b0      	blx	r6
  404ed2:	4601      	mov	r1, r0
  404ed4:	b188      	cbz	r0, 404efa <tcp_enqueue_flags+0x6a>
               ntohl(seg->tcphdr->seqno),
               ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
  404ed6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  404ed8:	b9ba      	cbnz	r2, 404f0a <tcp_enqueue_flags+0x7a>
    pcb->unsent = seg;
  404eda:	66e0      	str	r0, [r4, #108]	; 0x6c
  404edc:	e019      	b.n	404f12 <tcp_enqueue_flags+0x82>
    pcb->flags |= TF_NAGLEMEMERR;
  404ede:	7f83      	ldrb	r3, [r0, #30]
  404ee0:	f063 037f 	orn	r3, r3, #127	; 0x7f
  404ee4:	7783      	strb	r3, [r0, #30]
    return ERR_MEM;
  404ee6:	f04f 30ff 	mov.w	r0, #4294967295
  404eea:	4770      	bx	lr
    pcb->flags |= TF_NAGLEMEMERR;
  404eec:	7fa3      	ldrb	r3, [r4, #30]
  404eee:	f063 037f 	orn	r3, r3, #127	; 0x7f
  404ef2:	77a3      	strb	r3, [r4, #30]
    return ERR_MEM;
  404ef4:	f04f 30ff 	mov.w	r0, #4294967295
  404ef8:	e029      	b.n	404f4e <tcp_enqueue_flags+0xbe>
    pcb->flags |= TF_NAGLEMEMERR;
  404efa:	7fa3      	ldrb	r3, [r4, #30]
  404efc:	f063 037f 	orn	r3, r3, #127	; 0x7f
  404f00:	77a3      	strb	r3, [r4, #30]
    return ERR_MEM;
  404f02:	f04f 30ff 	mov.w	r0, #4294967295
  404f06:	e022      	b.n	404f4e <tcp_enqueue_flags+0xbe>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
  404f08:	461a      	mov	r2, r3
  404f0a:	6813      	ldr	r3, [r2, #0]
  404f0c:	2b00      	cmp	r3, #0
  404f0e:	d1fb      	bne.n	404f08 <tcp_enqueue_flags+0x78>
    useg->next = seg;
  404f10:	6011      	str	r1, [r2, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
  404f12:	2300      	movs	r3, #0
  404f14:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
  404f18:	f015 0f03 	tst.w	r5, #3
  404f1c:	d007      	beq.n	404f2e <tcp_enqueue_flags+0x9e>
    pcb->snd_lbb++;
  404f1e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  404f20:	3301      	adds	r3, #1
  404f22:	65e3      	str	r3, [r4, #92]	; 0x5c
    /* optlen does not influence snd_buf */
    pcb->snd_buf--;
  404f24:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
  404f28:	3b01      	subs	r3, #1
  404f2a:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
  }
  if (flags & TCP_FIN) {
  404f2e:	f015 0f01 	tst.w	r5, #1
  404f32:	d003      	beq.n	404f3c <tcp_enqueue_flags+0xac>
    pcb->flags |= TF_FIN;
  404f34:	7fa3      	ldrb	r3, [r4, #30]
  404f36:	f043 0320 	orr.w	r3, r3, #32
  404f3a:	77a3      	strb	r3, [r4, #30]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
  404f3c:	6848      	ldr	r0, [r1, #4]
  404f3e:	4b08      	ldr	r3, [pc, #32]	; (404f60 <tcp_enqueue_flags+0xd0>)
  404f40:	4798      	blx	r3
  404f42:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
  404f46:	4418      	add	r0, r3
  404f48:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
  404f4c:	2000      	movs	r0, #0
}
  404f4e:	b003      	add	sp, #12
  404f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_MEM;
  404f52:	f04f 30ff 	mov.w	r0, #4294967295
  404f56:	e7fa      	b.n	404f4e <tcp_enqueue_flags+0xbe>
  404f58:	00402685 	.word	0x00402685
  404f5c:	00404a69 	.word	0x00404a69
  404f60:	0040282d 	.word	0x0040282d

00404f64 <tcp_send_fin>:
{
  404f64:	b570      	push	{r4, r5, r6, lr}
  404f66:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
  404f68:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
  404f6a:	b90c      	cbnz	r4, 404f70 <tcp_send_fin+0xc>
  404f6c:	e00a      	b.n	404f84 <tcp_send_fin+0x20>
         last_unsent = last_unsent->next);
  404f6e:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  404f70:	6823      	ldr	r3, [r4, #0]
  404f72:	2b00      	cmp	r3, #0
  404f74:	d1fb      	bne.n	404f6e <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
  404f76:	68e3      	ldr	r3, [r4, #12]
  404f78:	8998      	ldrh	r0, [r3, #12]
  404f7a:	4b0b      	ldr	r3, [pc, #44]	; (404fa8 <tcp_send_fin+0x44>)
  404f7c:	4798      	blx	r3
  404f7e:	f010 0f07 	tst.w	r0, #7
  404f82:	d004      	beq.n	404f8e <tcp_send_fin+0x2a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
  404f84:	2101      	movs	r1, #1
  404f86:	4628      	mov	r0, r5
  404f88:	4b08      	ldr	r3, [pc, #32]	; (404fac <tcp_send_fin+0x48>)
  404f8a:	4798      	blx	r3
}
  404f8c:	bd70      	pop	{r4, r5, r6, pc}
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
  404f8e:	68e6      	ldr	r6, [r4, #12]
  404f90:	89b4      	ldrh	r4, [r6, #12]
  404f92:	2001      	movs	r0, #1
  404f94:	4b06      	ldr	r3, [pc, #24]	; (404fb0 <tcp_send_fin+0x4c>)
  404f96:	4798      	blx	r3
  404f98:	4320      	orrs	r0, r4
  404f9a:	81b0      	strh	r0, [r6, #12]
      pcb->flags |= TF_FIN;
  404f9c:	7fab      	ldrb	r3, [r5, #30]
  404f9e:	f043 0320 	orr.w	r3, r3, #32
  404fa2:	77ab      	strb	r3, [r5, #30]
      return ERR_OK;
  404fa4:	2000      	movs	r0, #0
  404fa6:	bd70      	pop	{r4, r5, r6, pc}
  404fa8:	0040119f 	.word	0x0040119f
  404fac:	00404e91 	.word	0x00404e91
  404fb0:	00401195 	.word	0x00401195

00404fb4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
  404fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404fb8:	b082      	sub	sp, #8
  404fba:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, htonl(pcb->snd_nxt));
  404fbc:	6d00      	ldr	r0, [r0, #80]	; 0x50
  404fbe:	4b16      	ldr	r3, [pc, #88]	; (405018 <tcp_send_empty_ack+0x64>)
  404fc0:	4798      	blx	r3
  404fc2:	4603      	mov	r3, r0
  404fc4:	2200      	movs	r2, #0
  404fc6:	4611      	mov	r1, r2
  404fc8:	4620      	mov	r0, r4
  404fca:	4d14      	ldr	r5, [pc, #80]	; (40501c <tcp_send_empty_ack+0x68>)
  404fcc:	47a8      	blx	r5
  if (p == NULL) {
  404fce:	b300      	cbz	r0, 405012 <tcp_send_empty_ack+0x5e>
  404fd0:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  404fd2:	6847      	ldr	r7, [r0, #4]
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, 
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  /* remove ACK flags from the PCB, as we send an empty ACK now */
  pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  404fd4:	7fa3      	ldrb	r3, [r4, #30]
  404fd6:	f023 0303 	bic.w	r3, r3, #3
  404fda:	77a3      	strb	r3, [r4, #30]
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif 

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &(pcb->local_ip), &(pcb->remote_ip),
  404fdc:	1d26      	adds	r6, r4, #4
  404fde:	8903      	ldrh	r3, [r0, #8]
  404fe0:	9300      	str	r3, [sp, #0]
  404fe2:	2306      	movs	r3, #6
  404fe4:	4632      	mov	r2, r6
  404fe6:	4621      	mov	r1, r4
  404fe8:	f8df 803c 	ldr.w	r8, [pc, #60]	; 405028 <tcp_send_empty_ack+0x74>
  404fec:	47c0      	blx	r8
  404fee:	8238      	strh	r0, [r7, #16]
#endif
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
  404ff0:	7aa3      	ldrb	r3, [r4, #10]
  404ff2:	2206      	movs	r2, #6
  404ff4:	9201      	str	r2, [sp, #4]
  404ff6:	7a62      	ldrb	r2, [r4, #9]
  404ff8:	9200      	str	r2, [sp, #0]
  404ffa:	4632      	mov	r2, r6
  404ffc:	4621      	mov	r1, r4
  404ffe:	4628      	mov	r0, r5
  405000:	4c07      	ldr	r4, [pc, #28]	; (405020 <tcp_send_empty_ack+0x6c>)
  405002:	47a0      	blx	r4
      IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/
  pbuf_free(p);
  405004:	4628      	mov	r0, r5
  405006:	4b07      	ldr	r3, [pc, #28]	; (405024 <tcp_send_empty_ack+0x70>)
  405008:	4798      	blx	r3

  return ERR_OK;
  40500a:	2000      	movs	r0, #0
}
  40500c:	b002      	add	sp, #8
  40500e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_BUF;
  405012:	f06f 0001 	mvn.w	r0, #1
  405016:	e7f9      	b.n	40500c <tcp_send_empty_ack+0x58>
  405018:	004011a9 	.word	0x004011a9
  40501c:	00404b35 	.word	0x00404b35
  405020:	00401865 	.word	0x00401865
  405024:	0040262d 	.word	0x0040262d
  405028:	0040146d 	.word	0x0040146d

0040502c <tcp_output>:

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
  40502c:	4ba2      	ldr	r3, [pc, #648]	; (4052b8 <tcp_output+0x28c>)
  40502e:	681b      	ldr	r3, [r3, #0]
  405030:	4283      	cmp	r3, r0
  405032:	f000 8165 	beq.w	405300 <tcp_output+0x2d4>
{
  405036:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40503a:	b085      	sub	sp, #20
  40503c:	4605      	mov	r5, r0
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
  40503e:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  405042:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
  405046:	429a      	cmp	r2, r3
  405048:	bf28      	it	cs
  40504a:	461a      	movcs	r2, r3
  40504c:	4692      	mov	sl, r2

  seg = pcb->unsent;
  40504e:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
  405050:	7f83      	ldrb	r3, [r0, #30]
  405052:	f013 0f02 	tst.w	r3, #2
  405056:	d014      	beq.n	405082 <tcp_output+0x56>
  405058:	b17c      	cbz	r4, 40507a <tcp_output+0x4e>
     (seg == NULL ||
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
  40505a:	68e3      	ldr	r3, [r4, #12]
  40505c:	6858      	ldr	r0, [r3, #4]
  40505e:	4b97      	ldr	r3, [pc, #604]	; (4052bc <tcp_output+0x290>)
  405060:	4798      	blx	r3
  405062:	8923      	ldrh	r3, [r4, #8]
  405064:	6caa      	ldr	r2, [r5, #72]	; 0x48
  405066:	1a9b      	subs	r3, r3, r2
  405068:	4418      	add	r0, r3
     (seg == NULL ||
  40506a:	4582      	cmp	sl, r0
  40506c:	d305      	bcc.n	40507a <tcp_output+0x4e>
     return tcp_send_empty_ack(pcb);
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
  40506e:	f8d5 8070 	ldr.w	r8, [r5, #112]	; 0x70
  if (useg != NULL) {
  405072:	f1b8 0f00 	cmp.w	r8, #0
  405076:	d10f      	bne.n	405098 <tcp_output+0x6c>
  405078:	e015      	b.n	4050a6 <tcp_output+0x7a>
     return tcp_send_empty_ack(pcb);
  40507a:	4628      	mov	r0, r5
  40507c:	4b90      	ldr	r3, [pc, #576]	; (4052c0 <tcp_output+0x294>)
  40507e:	4798      	blx	r3
  405080:	e13b      	b.n	4052fa <tcp_output+0x2ce>
  useg = pcb->unacked;
  405082:	f8d0 8070 	ldr.w	r8, [r0, #112]	; 0x70
  if (useg != NULL) {
  405086:	f1b8 0f00 	cmp.w	r8, #0
  40508a:	d105      	bne.n	405098 <tcp_output+0x6c>
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
  40508c:	b95c      	cbnz	r4, 4050a6 <tcp_output+0x7a>
    seg = pcb->unsent;
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
  40508e:	2300      	movs	r3, #0
  405090:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
  405094:	e12c      	b.n	4052f0 <tcp_output+0x2c4>
    for (; useg->next != NULL; useg = useg->next);
  405096:	4698      	mov	r8, r3
  405098:	f8d8 3000 	ldr.w	r3, [r8]
  40509c:	2b00      	cmp	r3, #0
  40509e:	d1fa      	bne.n	405096 <tcp_output+0x6a>
  while (seg != NULL &&
  4050a0:	2c00      	cmp	r4, #0
  4050a2:	f000 8121 	beq.w	4052e8 <tcp_output+0x2bc>
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
  4050a6:	4e85      	ldr	r6, [pc, #532]	; (4052bc <tcp_output+0x290>)
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
  4050a8:	f8df b234 	ldr.w	fp, [pc, #564]	; 4052e0 <tcp_output+0x2b4>
  4050ac:	e0a2      	b.n	4051f4 <tcp_output+0x1c8>
    if((tcp_do_output_nagle(pcb) == 0) &&
  4050ae:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
  4050b2:	b13a      	cbz	r2, 4050c4 <tcp_output+0x98>
  4050b4:	f8b5 2068 	ldrh.w	r2, [r5, #104]	; 0x68
  4050b8:	2a07      	cmp	r2, #7
  4050ba:	d803      	bhi.n	4050c4 <tcp_output+0x98>
  4050bc:	f013 0fa0 	tst.w	r3, #160	; 0xa0
  4050c0:	f000 8112 	beq.w	4052e8 <tcp_output+0x2bc>
    pcb->unsent = seg->next;
  4050c4:	6823      	ldr	r3, [r4, #0]
  4050c6:	66eb      	str	r3, [r5, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
  4050c8:	7e2b      	ldrb	r3, [r5, #24]
  4050ca:	2b02      	cmp	r3, #2
  4050cc:	d00c      	beq.n	4050e8 <tcp_output+0xbc>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
  4050ce:	f8d4 900c 	ldr.w	r9, [r4, #12]
  4050d2:	f8b9 700c 	ldrh.w	r7, [r9, #12]
  4050d6:	2010      	movs	r0, #16
  4050d8:	47d8      	blx	fp
  4050da:	4338      	orrs	r0, r7
  4050dc:	f8a9 000c 	strh.w	r0, [r9, #12]
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  4050e0:	7fab      	ldrb	r3, [r5, #30]
  4050e2:	f023 0303 	bic.w	r3, r3, #3
  4050e6:	77ab      	strb	r3, [r5, #30]
  /** @bug Exclude retransmitted segments from this count. */
  snmp_inc_tcpoutsegs();

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = htonl(pcb->rcv_nxt);
  4050e8:	68e7      	ldr	r7, [r4, #12]
  4050ea:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  4050ec:	4b75      	ldr	r3, [pc, #468]	; (4052c4 <tcp_output+0x298>)
  4050ee:	4798      	blx	r3
  4050f0:	60b8      	str	r0, [r7, #8]

  /* advertise our receive window size in this TCP segment */
  seg->tcphdr->wnd = htons(pcb->rcv_ann_wnd);
  4050f2:	68e7      	ldr	r7, [r4, #12]
  4050f4:	8de8      	ldrh	r0, [r5, #46]	; 0x2e
  4050f6:	47d8      	blx	fp
  4050f8:	81f8      	strh	r0, [r7, #14]

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  4050fa:	8dea      	ldrh	r2, [r5, #46]	; 0x2e
  4050fc:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4050fe:	4413      	add	r3, r2
  405100:	632b      	str	r3, [r5, #48]	; 0x30

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
  405102:	7aa3      	ldrb	r3, [r4, #10]
  405104:	f013 0f01 	tst.w	r3, #1
  405108:	f040 8094 	bne.w	405234 <tcp_output+0x208>
  }
#endif

  /* Set retransmission timer running if it is not currently enabled 
     This must be set before checking the route. */
  if (pcb->rtime == -1) {
  40510c:	f9b5 3034 	ldrsh.w	r3, [r5, #52]	; 0x34
  405110:	f1b3 3fff 	cmp.w	r3, #4294967295
  405114:	f000 809a 	beq.w	40524c <tcp_output+0x220>
    pcb->rtime = 0;
  }

  /* If we don't have a local IP address, we get one by
     calling ip_route(). */
  if (ip_addr_isany(&(pcb->local_ip))) {
  405118:	b10d      	cbz	r5, 40511e <tcp_output+0xf2>
  40511a:	682b      	ldr	r3, [r5, #0]
  40511c:	b933      	cbnz	r3, 40512c <tcp_output+0x100>
    netif = ip_route(&(pcb->remote_ip));
  40511e:	1d28      	adds	r0, r5, #4
  405120:	4b69      	ldr	r3, [pc, #420]	; (4052c8 <tcp_output+0x29c>)
  405122:	4798      	blx	r3
    if (netif == NULL) {
  405124:	2800      	cmp	r0, #0
  405126:	d02e      	beq.n	405186 <tcp_output+0x15a>
      return;
    }
    ip_addr_copy(pcb->local_ip, netif->ip_addr);
  405128:	6843      	ldr	r3, [r0, #4]
  40512a:	602b      	str	r3, [r5, #0]
  }

  if (pcb->rttest == 0) {
  40512c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40512e:	2b00      	cmp	r3, #0
  405130:	f000 808f 	beq.w	405252 <tcp_output+0x226>
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          htonl(seg->tcphdr->seqno), htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
  405134:	6862      	ldr	r2, [r4, #4]
  405136:	68e3      	ldr	r3, [r4, #12]
  405138:	6851      	ldr	r1, [r2, #4]
  40513a:	1a5b      	subs	r3, r3, r1
  40513c:	b29b      	uxth	r3, r3

  seg->p->len -= len;
  40513e:	8951      	ldrh	r1, [r2, #10]
  405140:	1ac9      	subs	r1, r1, r3
  405142:	8151      	strh	r1, [r2, #10]
  seg->p->tot_len -= len;
  405144:	6861      	ldr	r1, [r4, #4]
  405146:	890a      	ldrh	r2, [r1, #8]
  405148:	1ad3      	subs	r3, r2, r3
  40514a:	810b      	strh	r3, [r1, #8]

  seg->p->payload = seg->tcphdr;
  40514c:	6863      	ldr	r3, [r4, #4]
  40514e:	68e2      	ldr	r2, [r4, #12]
  405150:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
  405152:	68e3      	ldr	r3, [r4, #12]
  405154:	2200      	movs	r2, #0
  405156:	741a      	strb	r2, [r3, #16]
  405158:	745a      	strb	r2, [r3, #17]
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
  }
#else /* TCP_CHECKSUM_ON_COPY */
  seg->tcphdr->chksum = inet_chksum_pseudo(seg->p, &(pcb->local_ip),
  40515a:	68e7      	ldr	r7, [r4, #12]
  40515c:	6860      	ldr	r0, [r4, #4]
  40515e:	1d2a      	adds	r2, r5, #4
  405160:	8903      	ldrh	r3, [r0, #8]
  405162:	9300      	str	r3, [sp, #0]
  405164:	2306      	movs	r3, #6
  405166:	9203      	str	r2, [sp, #12]
  405168:	4629      	mov	r1, r5
  40516a:	f8df 9178 	ldr.w	r9, [pc, #376]	; 4052e4 <tcp_output+0x2b8>
  40516e:	47c8      	blx	r9
  405170:	8238      	strh	r0, [r7, #16]

#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
  405172:	7aab      	ldrb	r3, [r5, #10]
  405174:	6860      	ldr	r0, [r4, #4]
  405176:	2206      	movs	r2, #6
  405178:	9201      	str	r2, [sp, #4]
  40517a:	7a6a      	ldrb	r2, [r5, #9]
  40517c:	9200      	str	r2, [sp, #0]
  40517e:	9a03      	ldr	r2, [sp, #12]
  405180:	4629      	mov	r1, r5
  405182:	4f52      	ldr	r7, [pc, #328]	; (4052cc <tcp_output+0x2a0>)
  405184:	47b8      	blx	r7
    snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
  405186:	68e3      	ldr	r3, [r4, #12]
  405188:	6858      	ldr	r0, [r3, #4]
  40518a:	47b0      	blx	r6
  40518c:	4607      	mov	r7, r0
  40518e:	f8b4 9008 	ldrh.w	r9, [r4, #8]
  405192:	68e3      	ldr	r3, [r4, #12]
  405194:	8998      	ldrh	r0, [r3, #12]
  405196:	4b4e      	ldr	r3, [pc, #312]	; (4052d0 <tcp_output+0x2a4>)
  405198:	4798      	blx	r3
  40519a:	f010 0003 	ands.w	r0, r0, #3
  40519e:	bf18      	it	ne
  4051a0:	2001      	movne	r0, #1
  4051a2:	4448      	add	r0, r9
  4051a4:	4407      	add	r7, r0
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
  4051a6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  4051a8:	1bdb      	subs	r3, r3, r7
  4051aa:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
  4051ac:	bfb8      	it	lt
  4051ae:	652f      	strlt	r7, [r5, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
  4051b0:	8927      	ldrh	r7, [r4, #8]
  4051b2:	68e3      	ldr	r3, [r4, #12]
  4051b4:	8998      	ldrh	r0, [r3, #12]
  4051b6:	4b46      	ldr	r3, [pc, #280]	; (4052d0 <tcp_output+0x2a4>)
  4051b8:	4798      	blx	r3
  4051ba:	f010 0003 	ands.w	r0, r0, #3
  4051be:	bf18      	it	ne
  4051c0:	2001      	movne	r0, #1
  4051c2:	42f8      	cmn	r0, r7
  4051c4:	d073      	beq.n	4052ae <tcp_output+0x282>
      seg->next = NULL;
  4051c6:	2300      	movs	r3, #0
  4051c8:	6023      	str	r3, [r4, #0]
      if (pcb->unacked == NULL) {
  4051ca:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  4051cc:	2b00      	cmp	r3, #0
  4051ce:	d048      	beq.n	405262 <tcp_output+0x236>
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
  4051d0:	68e3      	ldr	r3, [r4, #12]
  4051d2:	6858      	ldr	r0, [r3, #4]
  4051d4:	47b0      	blx	r6
  4051d6:	4607      	mov	r7, r0
  4051d8:	f8d8 300c 	ldr.w	r3, [r8, #12]
  4051dc:	6858      	ldr	r0, [r3, #4]
  4051de:	47b0      	blx	r6
  4051e0:	1a38      	subs	r0, r7, r0
  4051e2:	2800      	cmp	r0, #0
  4051e4:	db40      	blt.n	405268 <tcp_output+0x23c>
          useg->next = seg;
  4051e6:	f8c8 4000 	str.w	r4, [r8]
  4051ea:	46a0      	mov	r8, r4
    seg = pcb->unsent;
  4051ec:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  while (seg != NULL &&
  4051ee:	2c00      	cmp	r4, #0
  4051f0:	f43f af4d 	beq.w	40508e <tcp_output+0x62>
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
  4051f4:	68e3      	ldr	r3, [r4, #12]
  4051f6:	6858      	ldr	r0, [r3, #4]
  4051f8:	47b0      	blx	r6
  4051fa:	6cab      	ldr	r3, [r5, #72]	; 0x48
  4051fc:	1ac0      	subs	r0, r0, r3
  4051fe:	8923      	ldrh	r3, [r4, #8]
  405200:	4418      	add	r0, r3
  while (seg != NULL &&
  405202:	4582      	cmp	sl, r0
  405204:	d370      	bcc.n	4052e8 <tcp_output+0x2bc>
    if((tcp_do_output_nagle(pcb) == 0) &&
  405206:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  405208:	2b00      	cmp	r3, #0
  40520a:	f43f af5b 	beq.w	4050c4 <tcp_output+0x98>
  40520e:	7fab      	ldrb	r3, [r5, #30]
  405210:	f013 0f44 	tst.w	r3, #68	; 0x44
  405214:	f47f af56 	bne.w	4050c4 <tcp_output+0x98>
  405218:	6eea      	ldr	r2, [r5, #108]	; 0x6c
  40521a:	2a00      	cmp	r2, #0
  40521c:	f43f af47 	beq.w	4050ae <tcp_output+0x82>
  405220:	6811      	ldr	r1, [r2, #0]
  405222:	2900      	cmp	r1, #0
  405224:	f47f af4e 	bne.w	4050c4 <tcp_output+0x98>
  405228:	8911      	ldrh	r1, [r2, #8]
  40522a:	8eea      	ldrh	r2, [r5, #54]	; 0x36
  40522c:	4291      	cmp	r1, r2
  40522e:	f4bf af49 	bcs.w	4050c4 <tcp_output+0x98>
  405232:	e73c      	b.n	4050ae <tcp_output+0x82>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  405234:	68e7      	ldr	r7, [r4, #12]
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->remote_ip);
  405236:	1d29      	adds	r1, r5, #4
  405238:	f240 50b4 	movw	r0, #1460	; 0x5b4
  40523c:	4b25      	ldr	r3, [pc, #148]	; (4052d4 <tcp_output+0x2a8>)
  40523e:	4798      	blx	r3
    *opts = TCP_BUILD_MSS_OPTION(mss);
  405240:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
  405244:	4b1f      	ldr	r3, [pc, #124]	; (4052c4 <tcp_output+0x298>)
  405246:	4798      	blx	r3
  405248:	6178      	str	r0, [r7, #20]
  40524a:	e75f      	b.n	40510c <tcp_output+0xe0>
    pcb->rtime = 0;
  40524c:	2300      	movs	r3, #0
  40524e:	86ab      	strh	r3, [r5, #52]	; 0x34
  405250:	e762      	b.n	405118 <tcp_output+0xec>
    pcb->rttest = tcp_ticks;
  405252:	4b21      	ldr	r3, [pc, #132]	; (4052d8 <tcp_output+0x2ac>)
  405254:	681b      	ldr	r3, [r3, #0]
  405256:	63ab      	str	r3, [r5, #56]	; 0x38
    pcb->rtseq = ntohl(seg->tcphdr->seqno);
  405258:	68e3      	ldr	r3, [r4, #12]
  40525a:	6858      	ldr	r0, [r3, #4]
  40525c:	47b0      	blx	r6
  40525e:	63e8      	str	r0, [r5, #60]	; 0x3c
  405260:	e768      	b.n	405134 <tcp_output+0x108>
        pcb->unacked = seg;
  405262:	672c      	str	r4, [r5, #112]	; 0x70
  405264:	46a0      	mov	r8, r4
  405266:	e7c1      	b.n	4051ec <tcp_output+0x1c0>
          struct tcp_seg **cur_seg = &(pcb->unacked);
  405268:	f105 0970 	add.w	r9, r5, #112	; 0x70
          while (*cur_seg &&
  40526c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  40526e:	b1c3      	cbz	r3, 4052a2 <tcp_output+0x276>
  405270:	4622      	mov	r2, r4
  405272:	464c      	mov	r4, r9
  405274:	4691      	mov	r9, r2
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
  405276:	68db      	ldr	r3, [r3, #12]
  405278:	6858      	ldr	r0, [r3, #4]
  40527a:	47b0      	blx	r6
  40527c:	4607      	mov	r7, r0
  40527e:	f8d9 300c 	ldr.w	r3, [r9, #12]
  405282:	6858      	ldr	r0, [r3, #4]
  405284:	47b0      	blx	r6
  405286:	1a38      	subs	r0, r7, r0
          while (*cur_seg &&
  405288:	2800      	cmp	r0, #0
  40528a:	da07      	bge.n	40529c <tcp_output+0x270>
              cur_seg = &((*cur_seg)->next );
  40528c:	6824      	ldr	r4, [r4, #0]
          while (*cur_seg &&
  40528e:	6823      	ldr	r3, [r4, #0]
  405290:	2b00      	cmp	r3, #0
  405292:	d1f0      	bne.n	405276 <tcp_output+0x24a>
  405294:	464b      	mov	r3, r9
  405296:	46a1      	mov	r9, r4
  405298:	461c      	mov	r4, r3
  40529a:	e002      	b.n	4052a2 <tcp_output+0x276>
  40529c:	464b      	mov	r3, r9
  40529e:	46a1      	mov	r9, r4
  4052a0:	461c      	mov	r4, r3
          seg->next = (*cur_seg);
  4052a2:	f8d9 3000 	ldr.w	r3, [r9]
  4052a6:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
  4052a8:	f8c9 4000 	str.w	r4, [r9]
  4052ac:	e79e      	b.n	4051ec <tcp_output+0x1c0>
      tcp_seg_free(seg);
  4052ae:	4620      	mov	r0, r4
  4052b0:	4b0a      	ldr	r3, [pc, #40]	; (4052dc <tcp_output+0x2b0>)
  4052b2:	4798      	blx	r3
  4052b4:	e79a      	b.n	4051ec <tcp_output+0x1c0>
  4052b6:	bf00      	nop
  4052b8:	2040497c 	.word	0x2040497c
  4052bc:	004011c1 	.word	0x004011c1
  4052c0:	00404fb5 	.word	0x00404fb5
  4052c4:	004011a9 	.word	0x004011a9
  4052c8:	00401569 	.word	0x00401569
  4052cc:	00401865 	.word	0x00401865
  4052d0:	0040119f 	.word	0x0040119f
  4052d4:	004035d9 	.word	0x004035d9
  4052d8:	20404968 	.word	0x20404968
  4052dc:	00402be5 	.word	0x00402be5
  4052e0:	00401195 	.word	0x00401195
  4052e4:	0040146d 	.word	0x0040146d
  if (pcb->unsent == NULL) {
  4052e8:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
  4052ea:	2b00      	cmp	r3, #0
  4052ec:	f43f aecf 	beq.w	40508e <tcp_output+0x62>
  pcb->flags &= ~TF_NAGLEMEMERR;
  4052f0:	7fab      	ldrb	r3, [r5, #30]
  4052f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4052f6:	77ab      	strb	r3, [r5, #30]
  return ERR_OK;
  4052f8:	2000      	movs	r0, #0
}
  4052fa:	b005      	add	sp, #20
  4052fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return ERR_OK;
  405300:	2000      	movs	r0, #0
  405302:	4770      	bx	lr

00405304 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  ip_addr_t *local_ip, ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
  405304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405308:	b083      	sub	sp, #12
  40530a:	4681      	mov	r9, r0
  40530c:	468a      	mov	sl, r1
  40530e:	4693      	mov	fp, r2
  405310:	4698      	mov	r8, r3
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
  405312:	2200      	movs	r2, #0
  405314:	2114      	movs	r1, #20
  405316:	2001      	movs	r0, #1
  405318:	4b1d      	ldr	r3, [pc, #116]	; (405390 <tcp_rst+0x8c>)
  40531a:	4798      	blx	r3
  if (p == NULL) {
  40531c:	2800      	cmp	r0, #0
  40531e:	d033      	beq.n	405388 <tcp_rst+0x84>
  405320:	4605      	mov	r5, r0
      return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
  405322:	6844      	ldr	r4, [r0, #4]
  tcphdr->src = htons(local_port);
  405324:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
  405328:	4e1a      	ldr	r6, [pc, #104]	; (405394 <tcp_rst+0x90>)
  40532a:	47b0      	blx	r6
  40532c:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = htons(remote_port);
  40532e:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
  405332:	47b0      	blx	r6
  405334:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = htonl(seqno);
  405336:	4648      	mov	r0, r9
  405338:	4f17      	ldr	r7, [pc, #92]	; (405398 <tcp_rst+0x94>)
  40533a:	47b8      	blx	r7
  40533c:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = htonl(ackno);
  40533e:	4650      	mov	r0, sl
  405340:	47b8      	blx	r7
  405342:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
  405344:	f245 0014 	movw	r0, #20500	; 0x5014
  405348:	47b0      	blx	r6
  40534a:	81a0      	strh	r0, [r4, #12]
  tcphdr->wnd = PP_HTONS(TCP_WND);
  40534c:	2600      	movs	r6, #0
  40534e:	230b      	movs	r3, #11
  405350:	73a3      	strb	r3, [r4, #14]
  405352:	2368      	movs	r3, #104	; 0x68
  405354:	73e3      	strb	r3, [r4, #15]
  tcphdr->chksum = 0;
  405356:	7426      	strb	r6, [r4, #16]
  405358:	7466      	strb	r6, [r4, #17]
  tcphdr->urgp = 0;
  40535a:	74a6      	strb	r6, [r4, #18]
  40535c:	74e6      	strb	r6, [r4, #19]

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, local_ip, remote_ip,
  40535e:	892b      	ldrh	r3, [r5, #8]
  405360:	9300      	str	r3, [sp, #0]
  405362:	2306      	movs	r3, #6
  405364:	4642      	mov	r2, r8
  405366:	4659      	mov	r1, fp
  405368:	4628      	mov	r0, r5
  40536a:	4f0c      	ldr	r7, [pc, #48]	; (40539c <tcp_rst+0x98>)
  40536c:	47b8      	blx	r7
  40536e:	8220      	strh	r0, [r4, #16]
              IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
  snmp_inc_tcpoutrsts();
   /* Send output with hardcoded TTL since we have no access to the pcb */
  ip_output(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP);
  405370:	2306      	movs	r3, #6
  405372:	9301      	str	r3, [sp, #4]
  405374:	9600      	str	r6, [sp, #0]
  405376:	23ff      	movs	r3, #255	; 0xff
  405378:	4642      	mov	r2, r8
  40537a:	4659      	mov	r1, fp
  40537c:	4628      	mov	r0, r5
  40537e:	4c08      	ldr	r4, [pc, #32]	; (4053a0 <tcp_rst+0x9c>)
  405380:	47a0      	blx	r4
  pbuf_free(p);
  405382:	4628      	mov	r0, r5
  405384:	4b07      	ldr	r3, [pc, #28]	; (4053a4 <tcp_rst+0xa0>)
  405386:	4798      	blx	r3
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
  405388:	b003      	add	sp, #12
  40538a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40538e:	bf00      	nop
  405390:	00402685 	.word	0x00402685
  405394:	00401195 	.word	0x00401195
  405398:	004011a9 	.word	0x004011a9
  40539c:	0040146d 	.word	0x0040146d
  4053a0:	00401865 	.word	0x00401865
  4053a4:	0040262d 	.word	0x0040262d

004053a8 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
  4053a8:	6f02      	ldr	r2, [r0, #112]	; 0x70
  4053aa:	b10a      	cbz	r2, 4053b0 <tcp_rexmit_rto+0x8>
{
  4053ac:	b508      	push	{r3, lr}
  4053ae:	e001      	b.n	4053b4 <tcp_rexmit_rto+0xc>
  4053b0:	4770      	bx	lr
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
  4053b2:	461a      	mov	r2, r3
  4053b4:	6813      	ldr	r3, [r2, #0]
  4053b6:	2b00      	cmp	r3, #0
  4053b8:	d1fb      	bne.n	4053b2 <tcp_rexmit_rto+0xa>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
  4053ba:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  4053bc:	6013      	str	r3, [r2, #0]
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  4053be:	6f03      	ldr	r3, [r0, #112]	; 0x70
  4053c0:	66c3      	str	r3, [r0, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
  4053c2:	2200      	movs	r2, #0
  4053c4:	6702      	str	r2, [r0, #112]	; 0x70
  /* last unsent hasn't changed, no need to reset unsent_oversize */

  /* increment number of retransmissions */
  ++pcb->nrtx;
  4053c6:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
  4053ca:	3301      	adds	r3, #1
  4053cc:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
  4053d0:	6382      	str	r2, [r0, #56]	; 0x38

  /* Do the actual retransmission */
  tcp_output(pcb);
  4053d2:	4b01      	ldr	r3, [pc, #4]	; (4053d8 <tcp_rexmit_rto+0x30>)
  4053d4:	4798      	blx	r3
  4053d6:	bd08      	pop	{r3, pc}
  4053d8:	0040502d 	.word	0x0040502d

004053dc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
  4053dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
  4053e0:	6f07      	ldr	r7, [r0, #112]	; 0x70
  4053e2:	b317      	cbz	r7, 40542a <tcp_rexmit+0x4e>
  4053e4:	4680      	mov	r8, r0
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
  4053e6:	683b      	ldr	r3, [r7, #0]
  4053e8:	6703      	str	r3, [r0, #112]	; 0x70

  cur_seg = &(pcb->unsent);
  4053ea:	f100 056c 	add.w	r5, r0, #108	; 0x6c
  while (*cur_seg &&
  4053ee:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  4053f0:	b173      	cbz	r3, 405410 <tcp_rexmit+0x34>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
  4053f2:	4e10      	ldr	r6, [pc, #64]	; (405434 <tcp_rexmit+0x58>)
  4053f4:	68db      	ldr	r3, [r3, #12]
  4053f6:	6858      	ldr	r0, [r3, #4]
  4053f8:	47b0      	blx	r6
  4053fa:	4604      	mov	r4, r0
  4053fc:	68fb      	ldr	r3, [r7, #12]
  4053fe:	6858      	ldr	r0, [r3, #4]
  405400:	47b0      	blx	r6
  405402:	1a20      	subs	r0, r4, r0
  while (*cur_seg &&
  405404:	2800      	cmp	r0, #0
  405406:	da03      	bge.n	405410 <tcp_rexmit+0x34>
      cur_seg = &((*cur_seg)->next );
  405408:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
  40540a:	682b      	ldr	r3, [r5, #0]
  40540c:	2b00      	cmp	r3, #0
  40540e:	d1f1      	bne.n	4053f4 <tcp_rexmit+0x18>
  }
  seg->next = *cur_seg;
  405410:	682b      	ldr	r3, [r5, #0]
  405412:	603b      	str	r3, [r7, #0]
  *cur_seg = seg;
  405414:	602f      	str	r7, [r5, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
  405416:	683b      	ldr	r3, [r7, #0]
  405418:	b14b      	cbz	r3, 40542e <tcp_rexmit+0x52>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  }
#endif /* TCP_OVERSIZE */

  ++pcb->nrtx;
  40541a:	f898 3046 	ldrb.w	r3, [r8, #70]	; 0x46
  40541e:	3301      	adds	r3, #1
  405420:	f888 3046 	strb.w	r3, [r8, #70]	; 0x46

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
  405424:	2300      	movs	r3, #0
  405426:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  40542a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pcb->unsent_oversize = 0;
  40542e:	f8a8 306a 	strh.w	r3, [r8, #106]	; 0x6a
  405432:	e7f2      	b.n	40541a <tcp_rexmit+0x3e>
  405434:	004011c1 	.word	0x004011c1

00405438 <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void 
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
  405438:	6f03      	ldr	r3, [r0, #112]	; 0x70
  40543a:	b11b      	cbz	r3, 405444 <tcp_rexmit_fast+0xc>
  40543c:	7f83      	ldrb	r3, [r0, #30]
  40543e:	f013 0f04 	tst.w	r3, #4
  405442:	d000      	beq.n	405446 <tcp_rexmit_fast+0xe>
  405444:	4770      	bx	lr
{
  405446:	b510      	push	{r4, lr}
  405448:	4604      	mov	r4, r0
    LWIP_DEBUGF(TCP_FR_DEBUG, 
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
  40544a:	4b12      	ldr	r3, [pc, #72]	; (405494 <tcp_rexmit_fast+0x5c>)
  40544c:	4798      	blx	r3

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    if (pcb->cwnd > pcb->snd_wnd) {
  40544e:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
  405452:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
  405456:	4293      	cmp	r3, r2
  405458:	d917      	bls.n	40548a <tcp_rexmit_fast+0x52>
      pcb->ssthresh = pcb->snd_wnd / 2;
  40545a:	0852      	lsrs	r2, r2, #1
  40545c:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
    } else {
      pcb->ssthresh = pcb->cwnd / 2;
    }
    
    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < 2*pcb->mss) {
  405460:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  405462:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
  405466:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
  40546a:	da02      	bge.n	405472 <tcp_rexmit_fast+0x3a>
      LWIP_DEBUGF(TCP_FR_DEBUG, 
                  ("tcp_receive: The minimum value for ssthresh %"U16_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, 2*pcb->mss));
      pcb->ssthresh = 2*pcb->mss;
  40546c:	005a      	lsls	r2, r3, #1
  40546e:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
    }
    
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
  405472:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  405476:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
  40547a:	4413      	add	r3, r2
  40547c:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    pcb->flags |= TF_INFR;
  405480:	7fa3      	ldrb	r3, [r4, #30]
  405482:	f043 0304 	orr.w	r3, r3, #4
  405486:	77a3      	strb	r3, [r4, #30]
  405488:	bd10      	pop	{r4, pc}
      pcb->ssthresh = pcb->cwnd / 2;
  40548a:	085b      	lsrs	r3, r3, #1
  40548c:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  405490:	e7e6      	b.n	405460 <tcp_rexmit_fast+0x28>
  405492:	bf00      	nop
  405494:	004053dd 	.word	0x004053dd

00405498 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
void
tcp_keepalive(struct tcp_pcb *pcb)
{
  405498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40549c:	b082      	sub	sp, #8
  40549e:	4604      	mov	r4, r0
                          ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
                          tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));
   
  p = tcp_output_alloc_header(pcb, 0, 0, htonl(pcb->snd_nxt - 1));
  4054a0:	6d00      	ldr	r0, [r0, #80]	; 0x50
  4054a2:	3801      	subs	r0, #1
  4054a4:	4b12      	ldr	r3, [pc, #72]	; (4054f0 <tcp_keepalive+0x58>)
  4054a6:	4798      	blx	r3
  4054a8:	4603      	mov	r3, r0
  4054aa:	2200      	movs	r2, #0
  4054ac:	4611      	mov	r1, r2
  4054ae:	4620      	mov	r0, r4
  4054b0:	4d10      	ldr	r5, [pc, #64]	; (4054f4 <tcp_keepalive+0x5c>)
  4054b2:	47a8      	blx	r5
  if(p == NULL) {
  4054b4:	b1c0      	cbz	r0, 4054e8 <tcp_keepalive+0x50>
  4054b6:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_DEBUG, 
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  4054b8:	6847      	ldr	r7, [r0, #4]

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
  4054ba:	1d26      	adds	r6, r4, #4
  4054bc:	8903      	ldrh	r3, [r0, #8]
  4054be:	9300      	str	r3, [sp, #0]
  4054c0:	2306      	movs	r3, #6
  4054c2:	4632      	mov	r2, r6
  4054c4:	4621      	mov	r1, r4
  4054c6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 405500 <tcp_keepalive+0x68>
  4054ca:	47c0      	blx	r8
  4054cc:	8238      	strh	r0, [r7, #16]
  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
  4054ce:	7aa3      	ldrb	r3, [r4, #10]
  4054d0:	2206      	movs	r2, #6
  4054d2:	9201      	str	r2, [sp, #4]
  4054d4:	2200      	movs	r2, #0
  4054d6:	9200      	str	r2, [sp, #0]
  4054d8:	4632      	mov	r2, r6
  4054da:	4621      	mov	r1, r4
  4054dc:	4628      	mov	r0, r5
  4054de:	4c06      	ldr	r4, [pc, #24]	; (4054f8 <tcp_keepalive+0x60>)
  4054e0:	47a0      	blx	r4
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
  4054e2:	4628      	mov	r0, r5
  4054e4:	4b05      	ldr	r3, [pc, #20]	; (4054fc <tcp_keepalive+0x64>)
  4054e6:	4798      	blx	r3

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
  4054e8:	b002      	add	sp, #8
  4054ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4054ee:	bf00      	nop
  4054f0:	004011a9 	.word	0x004011a9
  4054f4:	00404b35 	.word	0x00404b35
  4054f8:	00401865 	.word	0x00401865
  4054fc:	0040262d 	.word	0x0040262d
  405500:	0040146d 	.word	0x0040146d

00405504 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
void
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
  405504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405508:	b082      	sub	sp, #8
  LWIP_DEBUGF(TCP_DEBUG, 
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
               tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));

  seg = pcb->unacked;
  40550a:	6f05      	ldr	r5, [r0, #112]	; 0x70

  if(seg == NULL) {
  40550c:	b1fd      	cbz	r5, 40554e <tcp_zero_window_probe+0x4a>
  40550e:	4604      	mov	r4, r0
  }
  if(seg == NULL) {
    return;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
  405510:	68eb      	ldr	r3, [r5, #12]
  405512:	8998      	ldrh	r0, [r3, #12]
  405514:	4b26      	ldr	r3, [pc, #152]	; (4055b0 <tcp_zero_window_probe+0xac>)
  405516:	4798      	blx	r3
  405518:	f010 0f01 	tst.w	r0, #1
  40551c:	d001      	beq.n	405522 <tcp_zero_window_probe+0x1e>
  40551e:	892b      	ldrh	r3, [r5, #8]
  405520:	b1c3      	cbz	r3, 405554 <tcp_zero_window_probe+0x50>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
  405522:	68eb      	ldr	r3, [r5, #12]
  405524:	685b      	ldr	r3, [r3, #4]
  405526:	2201      	movs	r2, #1
  405528:	2100      	movs	r1, #0
  40552a:	4620      	mov	r0, r4
  40552c:	4e21      	ldr	r6, [pc, #132]	; (4055b4 <tcp_zero_window_probe+0xb0>)
  40552e:	47b0      	blx	r6
  if(p == NULL) {
  405530:	4606      	mov	r6, r0
  405532:	2800      	cmp	r0, #0
  405534:	d039      	beq.n	4055aa <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  405536:	6877      	ldr	r7, [r6, #4]
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  405538:	6868      	ldr	r0, [r5, #4]
  40553a:	8903      	ldrh	r3, [r0, #8]
  40553c:	892a      	ldrh	r2, [r5, #8]
  40553e:	1a9b      	subs	r3, r3, r2
  405540:	b29b      	uxth	r3, r3
  405542:	2201      	movs	r2, #1
  405544:	f107 0114 	add.w	r1, r7, #20
  405548:	4d1b      	ldr	r5, [pc, #108]	; (4055b8 <tcp_zero_window_probe+0xb4>)
  40554a:	47a8      	blx	r5
  40554c:	e015      	b.n	40557a <tcp_zero_window_probe+0x76>
    seg = pcb->unsent;
  40554e:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
  if(seg == NULL) {
  405550:	b35d      	cbz	r5, 4055aa <tcp_zero_window_probe+0xa6>
  405552:	e7dc      	b.n	40550e <tcp_zero_window_probe+0xa>
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
  405554:	68eb      	ldr	r3, [r5, #12]
  405556:	685b      	ldr	r3, [r3, #4]
  405558:	2200      	movs	r2, #0
  40555a:	4611      	mov	r1, r2
  40555c:	4620      	mov	r0, r4
  40555e:	4d15      	ldr	r5, [pc, #84]	; (4055b4 <tcp_zero_window_probe+0xb0>)
  405560:	47a8      	blx	r5
  if(p == NULL) {
  405562:	4606      	mov	r6, r0
  405564:	b308      	cbz	r0, 4055aa <tcp_zero_window_probe+0xa6>
  tcphdr = (struct tcp_hdr *)p->payload;
  405566:	6877      	ldr	r7, [r6, #4]
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
  405568:	f9b7 500c 	ldrsh.w	r5, [r7, #12]
  40556c:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
  405570:	2011      	movs	r0, #17
  405572:	4b12      	ldr	r3, [pc, #72]	; (4055bc <tcp_zero_window_probe+0xb8>)
  405574:	4798      	blx	r3
  405576:	4328      	orrs	r0, r5
  405578:	81b8      	strh	r0, [r7, #12]
  }

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
  40557a:	1d25      	adds	r5, r4, #4
  40557c:	8933      	ldrh	r3, [r6, #8]
  40557e:	9300      	str	r3, [sp, #0]
  405580:	2306      	movs	r3, #6
  405582:	462a      	mov	r2, r5
  405584:	4621      	mov	r1, r4
  405586:	4630      	mov	r0, r6
  405588:	f8df 803c 	ldr.w	r8, [pc, #60]	; 4055c8 <tcp_zero_window_probe+0xc4>
  40558c:	47c0      	blx	r8
  40558e:	8238      	strh	r0, [r7, #16]
  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
  405590:	7aa3      	ldrb	r3, [r4, #10]
  405592:	2206      	movs	r2, #6
  405594:	9201      	str	r2, [sp, #4]
  405596:	2200      	movs	r2, #0
  405598:	9200      	str	r2, [sp, #0]
  40559a:	462a      	mov	r2, r5
  40559c:	4621      	mov	r1, r4
  40559e:	4630      	mov	r0, r6
  4055a0:	4c07      	ldr	r4, [pc, #28]	; (4055c0 <tcp_zero_window_probe+0xbc>)
  4055a2:	47a0      	blx	r4
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
  4055a4:	4630      	mov	r0, r6
  4055a6:	4b07      	ldr	r3, [pc, #28]	; (4055c4 <tcp_zero_window_probe+0xc0>)
  4055a8:	4798      	blx	r3

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
  4055aa:	b002      	add	sp, #8
  4055ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4055b0:	0040119f 	.word	0x0040119f
  4055b4:	00404b35 	.word	0x00404b35
  4055b8:	00402949 	.word	0x00402949
  4055bc:	00401195 	.word	0x00401195
  4055c0:	00401865 	.word	0x00401865
  4055c4:	0040262d 	.word	0x0040262d
  4055c8:	0040146d 	.word	0x0040146d

004055cc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
  4055cc:	4770      	bx	lr
	...

004055d0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
  4055d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4055d4:	b085      	sub	sp, #20
  4055d6:	4604      	mov	r4, r0
  4055d8:	4689      	mov	r9, r1

  PERF_START;

  UDP_STATS_INC(udp.recv);

  iphdr = (struct ip_hdr *)p->payload;
  4055da:	f8d0 8004 	ldr.w	r8, [r0, #4]
  4055de:	f898 1000 	ldrb.w	r1, [r8]
  4055e2:	f001 010f 	and.w	r1, r1, #15

  /* Check minimum length (IP header + UDP header)
   * and move payload pointer to UDP header */
  if (p->tot_len < (IPH_HL(iphdr) * 4 + UDP_HLEN) || pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4))) {
  4055e6:	8903      	ldrh	r3, [r0, #8]
  4055e8:	1c8a      	adds	r2, r1, #2
  4055ea:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
  4055ee:	db04      	blt.n	4055fa <udp_input+0x2a>
  4055f0:	0089      	lsls	r1, r1, #2
  4055f2:	4249      	negs	r1, r1
  4055f4:	4b59      	ldr	r3, [pc, #356]	; (40575c <udp_input+0x18c>)
  4055f6:	4798      	blx	r3
  4055f8:	b128      	cbz	r0, 405606 <udp_input+0x36>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    snmp_inc_udpinerrors();
    pbuf_free(p);
  4055fa:	4620      	mov	r0, r4
  4055fc:	4b58      	ldr	r3, [pc, #352]	; (405760 <udp_input+0x190>)
  4055fe:	4798      	blx	r3
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
}
  405600:	b005      	add	sp, #20
  405602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  udphdr = (struct udp_hdr *)p->payload;
  405606:	f8d4 a004 	ldr.w	sl, [r4, #4]
  broadcast = ip_addr_isbroadcast(&current_iphdr_dest, inp);
  40560a:	4649      	mov	r1, r9
  40560c:	4b55      	ldr	r3, [pc, #340]	; (405764 <udp_input+0x194>)
  40560e:	6818      	ldr	r0, [r3, #0]
  405610:	4b55      	ldr	r3, [pc, #340]	; (405768 <udp_input+0x198>)
  405612:	4798      	blx	r3
  405614:	4607      	mov	r7, r0
  src = ntohs(udphdr->src);
  405616:	f8ba 0000 	ldrh.w	r0, [sl]
  40561a:	4e54      	ldr	r6, [pc, #336]	; (40576c <udp_input+0x19c>)
  40561c:	47b0      	blx	r6
  40561e:	4605      	mov	r5, r0
  dest = ntohs(udphdr->dest);
  405620:	f8ba 0002 	ldrh.w	r0, [sl, #2]
  405624:	47b0      	blx	r6
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  405626:	4b52      	ldr	r3, [pc, #328]	; (405770 <udp_input+0x1a0>)
  405628:	f8d3 e000 	ldr.w	lr, [r3]
  40562c:	f1be 0f00 	cmp.w	lr, #0
  405630:	d042      	beq.n	4056b8 <udp_input+0xe8>
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
  405632:	4b4c      	ldr	r3, [pc, #304]	; (405764 <udp_input+0x194>)
  405634:	f8d3 c000 	ldr.w	ip, [r3]
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
  405638:	4b4e      	ldr	r3, [pc, #312]	; (405774 <udp_input+0x1a4>)
  40563a:	f8d3 b000 	ldr.w	fp, [r3]
  40563e:	4673      	mov	r3, lr
  405640:	2600      	movs	r6, #0
  405642:	4632      	mov	r2, r6
  405644:	9403      	str	r4, [sp, #12]
  405646:	e07c      	b.n	405742 <udp_input+0x172>
          if ((uncon_pcb == NULL) && 
  405648:	7c19      	ldrb	r1, [r3, #16]
  40564a:	f001 0104 	and.w	r1, r1, #4
  40564e:	2900      	cmp	r1, #0
  405650:	bf08      	it	eq
  405652:	461e      	moveq	r6, r3
  405654:	e06d      	b.n	405732 <udp_input+0x162>
          (pcb->remote_port == src) &&
  405656:	f113 0f04 	cmn.w	r3, #4
  40565a:	d003      	beq.n	405664 <udp_input+0x94>
          (ip_addr_isany(&pcb->remote_ip) ||
  40565c:	6859      	ldr	r1, [r3, #4]
  40565e:	b109      	cbz	r1, 405664 <udp_input+0x94>
  405660:	4559      	cmp	r1, fp
  405662:	d169      	bne.n	405738 <udp_input+0x168>
  405664:	9c03      	ldr	r4, [sp, #12]
        if (prev != NULL) {
  405666:	b12a      	cbz	r2, 405674 <udp_input+0xa4>
          prev->next = pcb->next;
  405668:	68d9      	ldr	r1, [r3, #12]
  40566a:	60d1      	str	r1, [r2, #12]
          pcb->next = udp_pcbs;
  40566c:	f8c3 e00c 	str.w	lr, [r3, #12]
          udp_pcbs = pcb;
  405670:	4a3f      	ldr	r2, [pc, #252]	; (405770 <udp_input+0x1a0>)
  405672:	6013      	str	r3, [r2, #0]
    if (pcb == NULL) {
  405674:	b113      	cbz	r3, 40567c <udp_input+0xac>
  405676:	461e      	mov	r6, r3
  405678:	e001      	b.n	40567e <udp_input+0xae>
  40567a:	9c03      	ldr	r4, [sp, #12]
  if (pcb != NULL || ip_addr_cmp(&inp->ip_addr, &current_iphdr_dest)) {
  40567c:	b1e6      	cbz	r6, 4056b8 <udp_input+0xe8>
      if (udphdr->chksum != 0) {
  40567e:	f8ba 3006 	ldrh.w	r3, [sl, #6]
  405682:	b14b      	cbz	r3, 405698 <udp_input+0xc8>
        if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
  405684:	8923      	ldrh	r3, [r4, #8]
  405686:	9300      	str	r3, [sp, #0]
  405688:	2311      	movs	r3, #17
  40568a:	4a36      	ldr	r2, [pc, #216]	; (405764 <udp_input+0x194>)
  40568c:	4939      	ldr	r1, [pc, #228]	; (405774 <udp_input+0x1a4>)
  40568e:	4620      	mov	r0, r4
  405690:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 40577c <udp_input+0x1ac>
  405694:	47c8      	blx	r9
  405696:	b9d8      	cbnz	r0, 4056d0 <udp_input+0x100>
    if(pbuf_header(p, -UDP_HLEN)) {
  405698:	f06f 0107 	mvn.w	r1, #7
  40569c:	4620      	mov	r0, r4
  40569e:	4b2f      	ldr	r3, [pc, #188]	; (40575c <udp_input+0x18c>)
  4056a0:	4798      	blx	r3
  4056a2:	b9c8      	cbnz	r0, 4056d8 <udp_input+0x108>
    if (pcb != NULL) {
  4056a4:	b306      	cbz	r6, 4056e8 <udp_input+0x118>
      if (pcb->recv != NULL) {
  4056a6:	69b7      	ldr	r7, [r6, #24]
  4056a8:	b1d7      	cbz	r7, 4056e0 <udp_input+0x110>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
  4056aa:	69f0      	ldr	r0, [r6, #28]
  4056ac:	9500      	str	r5, [sp, #0]
  4056ae:	4b31      	ldr	r3, [pc, #196]	; (405774 <udp_input+0x1a4>)
  4056b0:	4622      	mov	r2, r4
  4056b2:	4631      	mov	r1, r6
  4056b4:	47b8      	blx	r7
  4056b6:	e7a3      	b.n	405600 <udp_input+0x30>
  if (pcb != NULL || ip_addr_cmp(&inp->ip_addr, &current_iphdr_dest)) {
  4056b8:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4056bc:	4b29      	ldr	r3, [pc, #164]	; (405764 <udp_input+0x194>)
  4056be:	681b      	ldr	r3, [r3, #0]
  4056c0:	429a      	cmp	r2, r3
  4056c2:	d003      	beq.n	4056cc <udp_input+0xfc>
    pbuf_free(p);
  4056c4:	4620      	mov	r0, r4
  4056c6:	4b26      	ldr	r3, [pc, #152]	; (405760 <udp_input+0x190>)
  4056c8:	4798      	blx	r3
}
  4056ca:	e799      	b.n	405600 <udp_input+0x30>
  4056cc:	2600      	movs	r6, #0
  4056ce:	e7d6      	b.n	40567e <udp_input+0xae>
          pbuf_free(p);
  4056d0:	4620      	mov	r0, r4
  4056d2:	4b23      	ldr	r3, [pc, #140]	; (405760 <udp_input+0x190>)
  4056d4:	4798      	blx	r3
          goto end;
  4056d6:	e793      	b.n	405600 <udp_input+0x30>
      pbuf_free(p);
  4056d8:	4620      	mov	r0, r4
  4056da:	4b21      	ldr	r3, [pc, #132]	; (405760 <udp_input+0x190>)
  4056dc:	4798      	blx	r3
      goto end;
  4056de:	e78f      	b.n	405600 <udp_input+0x30>
        pbuf_free(p);
  4056e0:	4620      	mov	r0, r4
  4056e2:	4b1f      	ldr	r3, [pc, #124]	; (405760 <udp_input+0x190>)
  4056e4:	4798      	blx	r3
        goto end;
  4056e6:	e78b      	b.n	405600 <udp_input+0x30>
      if (!broadcast &&
  4056e8:	b997      	cbnz	r7, 405710 <udp_input+0x140>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
  4056ea:	4b1e      	ldr	r3, [pc, #120]	; (405764 <udp_input+0x194>)
  4056ec:	681b      	ldr	r3, [r3, #0]
  4056ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!broadcast &&
  4056f2:	2be0      	cmp	r3, #224	; 0xe0
  4056f4:	d00c      	beq.n	405710 <udp_input+0x140>
        pbuf_header(p, (IPH_HL(iphdr) * 4) + UDP_HLEN);
  4056f6:	f898 1000 	ldrb.w	r1, [r8]
  4056fa:	f001 010f 	and.w	r1, r1, #15
  4056fe:	3102      	adds	r1, #2
  405700:	0089      	lsls	r1, r1, #2
  405702:	4620      	mov	r0, r4
  405704:	4b15      	ldr	r3, [pc, #84]	; (40575c <udp_input+0x18c>)
  405706:	4798      	blx	r3
        icmp_dest_unreach(p, ICMP_DUR_PORT);
  405708:	2103      	movs	r1, #3
  40570a:	4620      	mov	r0, r4
  40570c:	4b1a      	ldr	r3, [pc, #104]	; (405778 <udp_input+0x1a8>)
  40570e:	4798      	blx	r3
      pbuf_free(p);
  405710:	4620      	mov	r0, r4
  405712:	4b13      	ldr	r3, [pc, #76]	; (405760 <udp_input+0x190>)
  405714:	4798      	blx	r3
  405716:	e773      	b.n	405600 <udp_input+0x30>
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
  405718:	6819      	ldr	r1, [r3, #0]
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
  40571a:	458c      	cmp	ip, r1
  40571c:	d007      	beq.n	40572e <udp_input+0x15e>
             (ip_addr_isany(&pcb->local_ip) ||
  40571e:	b131      	cbz	r1, 40572e <udp_input+0x15e>
  405720:	b12b      	cbz	r3, 40572e <udp_input+0x15e>
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
  405722:	ea8c 0401 	eor.w	r4, ip, r1
             (ip_addr_isany(&pcb->local_ip) ||
  405726:	f8d9 1008 	ldr.w	r1, [r9, #8]
  40572a:	420c      	tst	r4, r1
  40572c:	d104      	bne.n	405738 <udp_input+0x168>
          if ((uncon_pcb == NULL) && 
  40572e:	2e00      	cmp	r6, #0
  405730:	d08a      	beq.n	405648 <udp_input+0x78>
      if ((local_match != 0) &&
  405732:	8a99      	ldrh	r1, [r3, #20]
  405734:	42a9      	cmp	r1, r5
  405736:	d08e      	beq.n	405656 <udp_input+0x86>
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  405738:	68d9      	ldr	r1, [r3, #12]
  40573a:	461a      	mov	r2, r3
  40573c:	2900      	cmp	r1, #0
  40573e:	d09c      	beq.n	40567a <udp_input+0xaa>
  405740:	460b      	mov	r3, r1
      if (pcb->local_port == dest) {
  405742:	8a59      	ldrh	r1, [r3, #18]
  405744:	4281      	cmp	r1, r0
  405746:	d1f7      	bne.n	405738 <udp_input+0x168>
        if (
  405748:	2f00      	cmp	r7, #0
  40574a:	d1e5      	bne.n	405718 <udp_input+0x148>
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
  40574c:	2b00      	cmp	r3, #0
  40574e:	d0ee      	beq.n	40572e <udp_input+0x15e>
  405750:	6819      	ldr	r1, [r3, #0]
  405752:	2900      	cmp	r1, #0
  405754:	d0eb      	beq.n	40572e <udp_input+0x15e>
  405756:	4561      	cmp	r1, ip
  405758:	d1ee      	bne.n	405738 <udp_input+0x168>
  40575a:	e7e8      	b.n	40572e <udp_input+0x15e>
  40575c:	004025bf 	.word	0x004025bf
  405760:	0040262d 	.word	0x0040262d
  405764:	20403938 	.word	0x20403938
  405768:	004018a5 	.word	0x004018a5
  40576c:	0040119f 	.word	0x0040119f
  405770:	20404980 	.word	0x20404980
  405774:	20403930 	.word	0x20403930
  405778:	004013d1 	.word	0x004013d1
  40577c:	0040146d 	.word	0x0040146d

00405780 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
  405780:	b510      	push	{r4, lr}
  405782:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  snmp_delete_arpidx_tree(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
  405784:	eb00 0280 	add.w	r2, r0, r0, lsl #2
  405788:	4b09      	ldr	r3, [pc, #36]	; (4057b0 <etharp_free_entry+0x30>)
  40578a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40578e:	b138      	cbz	r0, 4057a0 <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
  405790:	4b08      	ldr	r3, [pc, #32]	; (4057b4 <etharp_free_entry+0x34>)
  405792:	4798      	blx	r3
    arp_table[i].q = NULL;
  405794:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  405798:	009b      	lsls	r3, r3, #2
  40579a:	2100      	movs	r1, #0
  40579c:	4a04      	ldr	r2, [pc, #16]	; (4057b0 <etharp_free_entry+0x30>)
  40579e:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
  4057a0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4057a4:	4b02      	ldr	r3, [pc, #8]	; (4057b0 <etharp_free_entry+0x30>)
  4057a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
  4057aa:	2300      	movs	r3, #0
  4057ac:	74a3      	strb	r3, [r4, #18]
  4057ae:	bd10      	pop	{r4, pc}
  4057b0:	204025ec 	.word	0x204025ec
  4057b4:	0040262d 	.word	0x0040262d

004057b8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(ip_addr_t *ipaddr, u8_t flags)
{
  4057b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4057bc:	b083      	sub	sp, #12
  4057be:	4a3a      	ldr	r2, [pc, #232]	; (4058a8 <etharp_find_entry+0xf0>)
  4057c0:	2300      	movs	r3, #0
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0, age_pending = 0, age_stable = 0;
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  /* its age */
  u8_t age_queue = 0;
  4057c2:	4698      	mov	r8, r3
  s8_t old_queue = ARP_TABLE_SIZE;
  4057c4:	260a      	movs	r6, #10
  u8_t i = 0, age_pending = 0, age_stable = 0;
  4057c6:	469e      	mov	lr, r3
  4057c8:	469b      	mov	fp, r3
  s8_t empty = ARP_TABLE_SIZE;
  4057ca:	4634      	mov	r4, r6
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  4057cc:	46b4      	mov	ip, r6
  4057ce:	46b1      	mov	r9, r6
  4057d0:	9101      	str	r1, [sp, #4]
  4057d2:	e014      	b.n	4057fe <etharp_find_entry+0x46>
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
  4057d4:	b17f      	cbz	r7, 4057f6 <etharp_find_entry+0x3e>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip_addr_cmp(ipaddr, &arp_table[i].ipaddr)) {
  4057d6:	b120      	cbz	r0, 4057e2 <etharp_find_entry+0x2a>
  4057d8:	6801      	ldr	r1, [r0, #0]
  4057da:	468a      	mov	sl, r1
  4057dc:	6869      	ldr	r1, [r5, #4]
  4057de:	458a      	cmp	sl, r1
  4057e0:	d015      	beq.n	40580e <etharp_find_entry+0x56>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
  4057e2:	2f01      	cmp	r7, #1
  4057e4:	d015      	beq.n	405812 <etharp_find_entry+0x5a>
            old_pending = i;
            age_pending = arp_table[i].ctime;
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
  4057e6:	2f01      	cmp	r7, #1
  4057e8:	d905      	bls.n	4057f6 <etharp_find_entry+0x3e>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
  4057ea:	7ced      	ldrb	r5, [r5, #19]
  4057ec:	4575      	cmp	r5, lr
  4057ee:	d302      	bcc.n	4057f6 <etharp_find_entry+0x3e>
            old_stable = i;
  4057f0:	fa4f fc83 	sxtb.w	ip, r3
            age_stable = arp_table[i].ctime;
  4057f4:	46ae      	mov	lr, r5
  4057f6:	3301      	adds	r3, #1
  4057f8:	3214      	adds	r2, #20
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  4057fa:	2b0a      	cmp	r3, #10
  4057fc:	d018      	beq.n	405830 <etharp_find_entry+0x78>
  4057fe:	4615      	mov	r5, r2
    u8_t state = arp_table[i].state;
  405800:	7c97      	ldrb	r7, [r2, #18]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
  405802:	2c0a      	cmp	r4, #10
  405804:	d1e6      	bne.n	4057d4 <etharp_find_entry+0x1c>
  405806:	2f00      	cmp	r7, #0
  405808:	d1e4      	bne.n	4057d4 <etharp_find_entry+0x1c>
      empty = i;
  40580a:	b25c      	sxtb	r4, r3
  40580c:	e7f3      	b.n	4057f6 <etharp_find_entry+0x3e>
        return i;
  40580e:	b258      	sxtb	r0, r3
  405810:	e028      	b.n	405864 <etharp_find_entry+0xac>
        if (arp_table[i].q != NULL) {
  405812:	682f      	ldr	r7, [r5, #0]
  405814:	b12f      	cbz	r7, 405822 <etharp_find_entry+0x6a>
          if (arp_table[i].ctime >= age_queue) {
  405816:	7ced      	ldrb	r5, [r5, #19]
  405818:	4545      	cmp	r5, r8
  40581a:	d3ec      	bcc.n	4057f6 <etharp_find_entry+0x3e>
            old_queue = i;
  40581c:	b25e      	sxtb	r6, r3
            age_queue = arp_table[i].ctime;
  40581e:	46a8      	mov	r8, r5
  405820:	e7e9      	b.n	4057f6 <etharp_find_entry+0x3e>
          if (arp_table[i].ctime >= age_pending) {
  405822:	7ced      	ldrb	r5, [r5, #19]
  405824:	455d      	cmp	r5, fp
  405826:	d3e6      	bcc.n	4057f6 <etharp_find_entry+0x3e>
            old_pending = i;
  405828:	fa4f f983 	sxtb.w	r9, r3
            age_pending = arp_table[i].ctime;
  40582c:	46ab      	mov	fp, r5
  40582e:	e7e2      	b.n	4057f6 <etharp_find_entry+0x3e>
  405830:	9901      	ldr	r1, [sp, #4]
    }
  }
  /* { we have no match } => try to create a new entry */
   
  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
  405832:	f011 0f02 	tst.w	r1, #2
  405836:	d12e      	bne.n	405896 <etharp_find_entry+0xde>
  405838:	4605      	mov	r5, r0
  40583a:	2c0a      	cmp	r4, #10
  40583c:	d015      	beq.n	40586a <etharp_find_entry+0xb2>
   * 
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */ 

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
  40583e:	2c09      	cmp	r4, #9
  405840:	dc16      	bgt.n	405870 <etharp_find_entry+0xb8>
    i = empty;
  405842:	b2e4      	uxtb	r4, r4
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
  405844:	b135      	cbz	r5, 405854 <etharp_find_entry+0x9c>
    /* set IP address */
    ip_addr_copy(arp_table[i].ipaddr, *ipaddr);
  405846:	6829      	ldr	r1, [r5, #0]
  405848:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  40584c:	4a16      	ldr	r2, [pc, #88]	; (4058a8 <etharp_find_entry+0xf0>)
  40584e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  405852:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
  405854:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  405858:	4b13      	ldr	r3, [pc, #76]	; (4058a8 <etharp_find_entry+0xf0>)
  40585a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40585e:	2200      	movs	r2, #0
  405860:	74da      	strb	r2, [r3, #19]
  return (err_t)i;
  405862:	b260      	sxtb	r0, r4
}
  405864:	b003      	add	sp, #12
  405866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
  40586a:	f011 0f01 	tst.w	r1, #1
  40586e:	d015      	beq.n	40589c <etharp_find_entry+0xe4>
    if (old_stable < ARP_TABLE_SIZE) {
  405870:	f1bc 0f09 	cmp.w	ip, #9
  405874:	dc05      	bgt.n	405882 <etharp_find_entry+0xca>
      i = old_stable;
  405876:	fa5f f48c 	uxtb.w	r4, ip
    etharp_free_entry(i);
  40587a:	4620      	mov	r0, r4
  40587c:	4b0b      	ldr	r3, [pc, #44]	; (4058ac <etharp_find_entry+0xf4>)
  40587e:	4798      	blx	r3
  405880:	e7e0      	b.n	405844 <etharp_find_entry+0x8c>
    } else if (old_pending < ARP_TABLE_SIZE) {
  405882:	f1b9 0f09 	cmp.w	r9, #9
  405886:	dc02      	bgt.n	40588e <etharp_find_entry+0xd6>
      i = old_pending;
  405888:	fa5f f489 	uxtb.w	r4, r9
  40588c:	e7f5      	b.n	40587a <etharp_find_entry+0xc2>
    } else if (old_queue < ARP_TABLE_SIZE) {
  40588e:	2e09      	cmp	r6, #9
  405890:	dc07      	bgt.n	4058a2 <etharp_find_entry+0xea>
      i = old_queue;
  405892:	b2f4      	uxtb	r4, r6
  405894:	e7f1      	b.n	40587a <etharp_find_entry+0xc2>
    return (s8_t)ERR_MEM;
  405896:	f04f 30ff 	mov.w	r0, #4294967295
  40589a:	e7e3      	b.n	405864 <etharp_find_entry+0xac>
  40589c:	f04f 30ff 	mov.w	r0, #4294967295
  4058a0:	e7e0      	b.n	405864 <etharp_find_entry+0xac>
      return (s8_t)ERR_MEM;
  4058a2:	f04f 30ff 	mov.w	r0, #4294967295
  4058a6:	e7dd      	b.n	405864 <etharp_find_entry+0xac>
  4058a8:	204025ec 	.word	0x204025ec
  4058ac:	00405781 	.word	0x00405781

004058b0 <etharp_send_ip>:
 * @params dst the destination MAC address to be copied into the ethernet header
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
static err_t
etharp_send_ip(struct netif *netif, struct pbuf *p, struct eth_addr *src, struct eth_addr *dst)
{
  4058b0:	b538      	push	{r3, r4, r5, lr}
  struct eth_hdr *ethhdr = (struct eth_hdr *)p->payload;
  4058b2:	684c      	ldr	r4, [r1, #4]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
              (netif->hwaddr_len == ETHARP_HWADDR_LEN));
  ETHADDR32_COPY(&ethhdr->dest, dst);
  4058b4:	681d      	ldr	r5, [r3, #0]
  4058b6:	6025      	str	r5, [r4, #0]
  4058b8:	889b      	ldrh	r3, [r3, #4]
  4058ba:	80a3      	strh	r3, [r4, #4]
  ETHADDR16_COPY(&ethhdr->src, src);
  4058bc:	6813      	ldr	r3, [r2, #0]
  4058be:	f8c4 3006 	str.w	r3, [r4, #6]
  4058c2:	8893      	ldrh	r3, [r2, #4]
  4058c4:	8163      	strh	r3, [r4, #10]
  ethhdr->type = PP_HTONS(ETHTYPE_IP);
  4058c6:	2308      	movs	r3, #8
  4058c8:	7323      	strb	r3, [r4, #12]
  4058ca:	2300      	movs	r3, #0
  4058cc:	7363      	strb	r3, [r4, #13]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_send_ip: sending packet %p\n", (void *)p));
  /* send the packet */
  return netif->linkoutput(netif, p);
  4058ce:	6983      	ldr	r3, [r0, #24]
  4058d0:	4798      	blx	r3
}
  4058d2:	bd38      	pop	{r3, r4, r5, pc}

004058d4 <etharp_tmr>:
{
  4058d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4058d6:	4c0f      	ldr	r4, [pc, #60]	; (405914 <etharp_tmr+0x40>)
  4058d8:	2500      	movs	r5, #0
        etharp_free_entry(i);
  4058da:	4e0f      	ldr	r6, [pc, #60]	; (405918 <etharp_tmr+0x44>)
        arp_table[i].state = ETHARP_STATE_STABLE;
  4058dc:	2702      	movs	r7, #2
  4058de:	e006      	b.n	4058ee <etharp_tmr+0x1a>
      else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING) {
  4058e0:	2a03      	cmp	r2, #3
        arp_table[i].state = ETHARP_STATE_STABLE;
  4058e2:	bf08      	it	eq
  4058e4:	748f      	strbeq	r7, [r1, #18]
  4058e6:	3501      	adds	r5, #1
  4058e8:	3414      	adds	r4, #20
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  4058ea:	2d0a      	cmp	r5, #10
  4058ec:	d010      	beq.n	405910 <etharp_tmr+0x3c>
    u8_t state = arp_table[i].state;
  4058ee:	4628      	mov	r0, r5
  4058f0:	4621      	mov	r1, r4
  4058f2:	7ca2      	ldrb	r2, [r4, #18]
    if (state != ETHARP_STATE_EMPTY
  4058f4:	2a00      	cmp	r2, #0
  4058f6:	d0f6      	beq.n	4058e6 <etharp_tmr+0x12>
      arp_table[i].ctime++;
  4058f8:	7ce3      	ldrb	r3, [r4, #19]
  4058fa:	3301      	adds	r3, #1
  4058fc:	b2db      	uxtb	r3, r3
  4058fe:	74e3      	strb	r3, [r4, #19]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
  405900:	2bef      	cmp	r3, #239	; 0xef
  405902:	d803      	bhi.n	40590c <etharp_tmr+0x38>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
  405904:	2b01      	cmp	r3, #1
  405906:	d9eb      	bls.n	4058e0 <etharp_tmr+0xc>
  405908:	2a01      	cmp	r2, #1
  40590a:	d1e9      	bne.n	4058e0 <etharp_tmr+0xc>
        etharp_free_entry(i);
  40590c:	47b0      	blx	r6
  40590e:	e7ea      	b.n	4058e6 <etharp_tmr+0x12>
}
  405910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405912:	bf00      	nop
  405914:	204025ec 	.word	0x204025ec
  405918:	00405781 	.word	0x00405781

0040591c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, ip_addr_t *ipaddr)
{
  40591c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405920:	4605      	mov	r5, r0
  405922:	4688      	mov	r8, r1
  p = pbuf_alloc(PBUF_RAW, SIZEOF_ETHARP_PACKET, PBUF_RAM);
  405924:	2200      	movs	r2, #0
  405926:	212a      	movs	r1, #42	; 0x2a
  405928:	2003      	movs	r0, #3
  40592a:	4b22      	ldr	r3, [pc, #136]	; (4059b4 <etharp_request+0x98>)
  40592c:	4798      	blx	r3
  if (p == NULL) {
  40592e:	2800      	cmp	r0, #0
  405930:	d03c      	beq.n	4059ac <etharp_request+0x90>
  405932:	4607      	mov	r7, r0
  ethhdr = (struct eth_hdr *)p->payload;
  405934:	6844      	ldr	r4, [r0, #4]
  hdr->opcode = htons(opcode);
  405936:	2001      	movs	r0, #1
  405938:	4b1f      	ldr	r3, [pc, #124]	; (4059b8 <etharp_request+0x9c>)
  40593a:	4798      	blx	r3
  40593c:	82a0      	strh	r0, [r4, #20]
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
  40593e:	f8d5 3027 	ldr.w	r3, [r5, #39]	; 0x27
  405942:	f8c4 3016 	str.w	r3, [r4, #22]
  405946:	f8b5 302b 	ldrh.w	r3, [r5, #43]	; 0x2b
  40594a:	8363      	strh	r3, [r4, #26]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
  40594c:	4b1b      	ldr	r3, [pc, #108]	; (4059bc <etharp_request+0xa0>)
  40594e:	6818      	ldr	r0, [r3, #0]
  405950:	6220      	str	r0, [r4, #32]
  405952:	889b      	ldrh	r3, [r3, #4]
  405954:	84a3      	strh	r3, [r4, #36]	; 0x24
  ETHADDR16_COPY(&ethhdr->dest, ethdst_addr);
  405956:	4b1a      	ldr	r3, [pc, #104]	; (4059c0 <etharp_request+0xa4>)
  405958:	6818      	ldr	r0, [r3, #0]
  40595a:	6020      	str	r0, [r4, #0]
  40595c:	889b      	ldrh	r3, [r3, #4]
  40595e:	80a3      	strh	r3, [r4, #4]
  ETHADDR16_COPY(&ethhdr->src, ethsrc_addr);
  405960:	f8d5 3027 	ldr.w	r3, [r5, #39]	; 0x27
  405964:	f8c4 3006 	str.w	r3, [r4, #6]
  405968:	f8b5 302b 	ldrh.w	r3, [r5, #43]	; 0x2b
  40596c:	8163      	strh	r3, [r4, #10]
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
  40596e:	686b      	ldr	r3, [r5, #4]
  405970:	61e3      	str	r3, [r4, #28]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
  405972:	f8d8 3000 	ldr.w	r3, [r8]
  405976:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
  40597a:	2200      	movs	r2, #0
  40597c:	73a2      	strb	r2, [r4, #14]
  40597e:	2301      	movs	r3, #1
  405980:	73e3      	strb	r3, [r4, #15]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
  405982:	2308      	movs	r3, #8
  405984:	7423      	strb	r3, [r4, #16]
  405986:	7462      	strb	r2, [r4, #17]
  hdr->hwlen = ETHARP_HWADDR_LEN;
  405988:	2206      	movs	r2, #6
  40598a:	74a2      	strb	r2, [r4, #18]
  hdr->protolen = sizeof(ip_addr_t);
  40598c:	2204      	movs	r2, #4
  40598e:	74e2      	strb	r2, [r4, #19]
  ethhdr->type = PP_HTONS(ETHTYPE_ARP);
  405990:	7323      	strb	r3, [r4, #12]
  405992:	2306      	movs	r3, #6
  405994:	7363      	strb	r3, [r4, #13]
  result = netif->linkoutput(netif, p);
  405996:	69ab      	ldr	r3, [r5, #24]
  405998:	4639      	mov	r1, r7
  40599a:	4628      	mov	r0, r5
  40599c:	4798      	blx	r3
  40599e:	4604      	mov	r4, r0
  pbuf_free(p);
  4059a0:	4638      	mov	r0, r7
  4059a2:	4b08      	ldr	r3, [pc, #32]	; (4059c4 <etharp_request+0xa8>)
  4059a4:	4798      	blx	r3
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
                    (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
                    ipaddr, ARP_REQUEST);
}
  4059a6:	4620      	mov	r0, r4
  4059a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
  4059ac:	f04f 34ff 	mov.w	r4, #4294967295
  4059b0:	e7f9      	b.n	4059a6 <etharp_request+0x8a>
  4059b2:	bf00      	nop
  4059b4:	00402685 	.word	0x00402685
  4059b8:	00401195 	.word	0x00401195
  4059bc:	0040d828 	.word	0x0040d828
  4059c0:	0040d820 	.word	0x0040d820
  4059c4:	0040262d 	.word	0x0040262d

004059c8 <etharp_output_to_arp_index>:
{
  4059c8:	b570      	push	{r4, r5, r6, lr}
  4059ca:	4605      	mov	r5, r0
  4059cc:	460e      	mov	r6, r1
  4059ce:	4614      	mov	r4, r2
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
  4059d0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4059d4:	4b15      	ldr	r3, [pc, #84]	; (405a2c <etharp_output_to_arp_index+0x64>)
  4059d6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4059da:	7c9b      	ldrb	r3, [r3, #18]
  4059dc:	2b02      	cmp	r3, #2
  4059de:	d00c      	beq.n	4059fa <etharp_output_to_arp_index+0x32>
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
  4059e0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4059e4:	4b11      	ldr	r3, [pc, #68]	; (405a2c <etharp_output_to_arp_index+0x64>)
  4059e6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
  4059ea:	330c      	adds	r3, #12
  4059ec:	f105 0227 	add.w	r2, r5, #39	; 0x27
  4059f0:	4631      	mov	r1, r6
  4059f2:	4628      	mov	r0, r5
  4059f4:	4c0e      	ldr	r4, [pc, #56]	; (405a30 <etharp_output_to_arp_index+0x68>)
  4059f6:	47a0      	blx	r4
}
  4059f8:	bd70      	pop	{r4, r5, r6, pc}
      (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED)) {
  4059fa:	4613      	mov	r3, r2
  4059fc:	4a0b      	ldr	r2, [pc, #44]	; (405a2c <etharp_output_to_arp_index+0x64>)
  4059fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
  405a02:	7cdb      	ldrb	r3, [r3, #19]
  405a04:	2be3      	cmp	r3, #227	; 0xe3
  405a06:	d9eb      	bls.n	4059e0 <etharp_output_to_arp_index+0x18>
    if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
  405a08:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  405a0c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  405a10:	3104      	adds	r1, #4
  405a12:	4b08      	ldr	r3, [pc, #32]	; (405a34 <etharp_output_to_arp_index+0x6c>)
  405a14:	4798      	blx	r3
  405a16:	2800      	cmp	r0, #0
  405a18:	d1e2      	bne.n	4059e0 <etharp_output_to_arp_index+0x18>
      arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING;
  405a1a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  405a1e:	4a03      	ldr	r2, [pc, #12]	; (405a2c <etharp_output_to_arp_index+0x64>)
  405a20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  405a24:	2203      	movs	r2, #3
  405a26:	749a      	strb	r2, [r3, #18]
  405a28:	e7da      	b.n	4059e0 <etharp_output_to_arp_index+0x18>
  405a2a:	bf00      	nop
  405a2c:	204025ec 	.word	0x204025ec
  405a30:	004058b1 	.word	0x004058b1
  405a34:	0040591d 	.word	0x0040591d

00405a38 <etharp_query>:
{
  405a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405a3c:	4607      	mov	r7, r0
  405a3e:	460d      	mov	r5, r1
  405a40:	4616      	mov	r6, r2
  if (ip_addr_isbroadcast(ipaddr, netif) ||
  405a42:	4601      	mov	r1, r0
  405a44:	6828      	ldr	r0, [r5, #0]
  405a46:	4b4c      	ldr	r3, [pc, #304]	; (405b78 <etharp_query+0x140>)
  405a48:	4798      	blx	r3
  405a4a:	2800      	cmp	r0, #0
  405a4c:	d16b      	bne.n	405b26 <etharp_query+0xee>
      ip_addr_ismulticast(ipaddr) ||
  405a4e:	682b      	ldr	r3, [r5, #0]
      ip_addr_isany(ipaddr)) {
  405a50:	2b00      	cmp	r3, #0
  405a52:	bf18      	it	ne
  405a54:	2d00      	cmpne	r5, #0
  405a56:	d06a      	beq.n	405b2e <etharp_query+0xf6>
      ip_addr_ismulticast(ipaddr) ||
  405a58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip_addr_isany(ipaddr)) {
  405a5c:	2be0      	cmp	r3, #224	; 0xe0
  405a5e:	d066      	beq.n	405b2e <etharp_query+0xf6>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD);
  405a60:	2101      	movs	r1, #1
  405a62:	4628      	mov	r0, r5
  405a64:	4b45      	ldr	r3, [pc, #276]	; (405b7c <etharp_query+0x144>)
  405a66:	4798      	blx	r3
  if (i < 0) {
  405a68:	1e04      	subs	r4, r0, #0
  405a6a:	db64      	blt.n	405b36 <etharp_query+0xfe>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
  405a6c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  405a70:	4a43      	ldr	r2, [pc, #268]	; (405b80 <etharp_query+0x148>)
  405a72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  405a76:	7c9b      	ldrb	r3, [r3, #18]
  405a78:	b993      	cbnz	r3, 405aa0 <etharp_query+0x68>
    arp_table[i].state = ETHARP_STATE_PENDING;
  405a7a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  405a7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  405a82:	2201      	movs	r2, #1
  405a84:	749a      	strb	r2, [r3, #18]
  if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
  405a86:	fab6 f886 	clz	r8, r6
  405a8a:	ea4f 1858 	mov.w	r8, r8, lsr #5
    result = etharp_request(netif, ipaddr);
  405a8e:	4629      	mov	r1, r5
  405a90:	4638      	mov	r0, r7
  405a92:	4b3c      	ldr	r3, [pc, #240]	; (405b84 <etharp_query+0x14c>)
  405a94:	4798      	blx	r3
    if (q == NULL) {
  405a96:	f1b8 0f00 	cmp.w	r8, #0
  405a9a:	d00c      	beq.n	405ab6 <etharp_query+0x7e>
  405a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
  405aa0:	fab6 f886 	clz	r8, r6
  405aa4:	ea4f 1858 	mov.w	r8, r8, lsr #5
  405aa8:	2b01      	cmp	r3, #1
  405aaa:	d0f0      	beq.n	405a8e <etharp_query+0x56>
  405aac:	f1b8 0f00 	cmp.w	r8, #0
  405ab0:	d1ed      	bne.n	405a8e <etharp_query+0x56>
  err_t result = ERR_MEM;
  405ab2:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
  405ab6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  405aba:	4a31      	ldr	r2, [pc, #196]	; (405b80 <etharp_query+0x148>)
  405abc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  405ac0:	7c9b      	ldrb	r3, [r3, #18]
  405ac2:	2b01      	cmp	r3, #1
  405ac4:	d803      	bhi.n	405ace <etharp_query+0x96>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
  405ac6:	2b01      	cmp	r3, #1
  405ac8:	d010      	beq.n	405aec <etharp_query+0xb4>
}
  405aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ETHARP_SET_HINT(netif, i);
  405ace:	4b2e      	ldr	r3, [pc, #184]	; (405b88 <etharp_query+0x150>)
  405ad0:	701c      	strb	r4, [r3, #0]
    result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
  405ad2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  405ad6:	eb02 0384 	add.w	r3, r2, r4, lsl #2
  405ada:	330c      	adds	r3, #12
  405adc:	f107 0227 	add.w	r2, r7, #39	; 0x27
  405ae0:	4631      	mov	r1, r6
  405ae2:	4638      	mov	r0, r7
  405ae4:	4c29      	ldr	r4, [pc, #164]	; (405b8c <etharp_query+0x154>)
  405ae6:	47a0      	blx	r4
  405ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (p) {
  405aec:	b346      	cbz	r6, 405b40 <etharp_query+0x108>
      if(p->type != PBUF_ROM) {
  405aee:	7b33      	ldrb	r3, [r6, #12]
  405af0:	2b01      	cmp	r3, #1
  405af2:	d123      	bne.n	405b3c <etharp_query+0x104>
  405af4:	4633      	mov	r3, r6
      p = p->next;
  405af6:	681b      	ldr	r3, [r3, #0]
    while (p) {
  405af8:	b34b      	cbz	r3, 405b4e <etharp_query+0x116>
      if(p->type != PBUF_ROM) {
  405afa:	7b1a      	ldrb	r2, [r3, #12]
  405afc:	2a01      	cmp	r2, #1
  405afe:	d0fa      	beq.n	405af6 <etharp_query+0xbe>
      p = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
  405b00:	2200      	movs	r2, #0
  405b02:	8919      	ldrh	r1, [r3, #8]
  405b04:	2003      	movs	r0, #3
  405b06:	4b22      	ldr	r3, [pc, #136]	; (405b90 <etharp_query+0x158>)
  405b08:	4798      	blx	r3
      if(p != NULL) {
  405b0a:	4605      	mov	r5, r0
  405b0c:	b138      	cbz	r0, 405b1e <etharp_query+0xe6>
        if (pbuf_copy(p, q) != ERR_OK) {
  405b0e:	4631      	mov	r1, r6
  405b10:	4628      	mov	r0, r5
  405b12:	4b20      	ldr	r3, [pc, #128]	; (405b94 <etharp_query+0x15c>)
  405b14:	4798      	blx	r3
  405b16:	b1f0      	cbz	r0, 405b56 <etharp_query+0x11e>
          pbuf_free(p);
  405b18:	4628      	mov	r0, r5
  405b1a:	4b1f      	ldr	r3, [pc, #124]	; (405b98 <etharp_query+0x160>)
  405b1c:	4798      	blx	r3
      result = ERR_MEM;
  405b1e:	f04f 30ff 	mov.w	r0, #4294967295
  405b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_ARG;
  405b26:	f06f 000d 	mvn.w	r0, #13
  405b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405b2e:	f06f 000d 	mvn.w	r0, #13
  405b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (err_t)i;
  405b36:	4620      	mov	r0, r4
  405b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(p->type != PBUF_ROM) {
  405b3c:	4633      	mov	r3, r6
  405b3e:	e7df      	b.n	405b00 <etharp_query+0xc8>
      pbuf_ref(p);
  405b40:	4630      	mov	r0, r6
  405b42:	4b16      	ldr	r3, [pc, #88]	; (405b9c <etharp_query+0x164>)
  405b44:	4798      	blx	r3
      result = ERR_MEM;
  405b46:	f04f 30ff 	mov.w	r0, #4294967295
  405b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pbuf_ref(p);
  405b4e:	4630      	mov	r0, r6
  405b50:	4b12      	ldr	r3, [pc, #72]	; (405b9c <etharp_query+0x164>)
  405b52:	4798      	blx	r3
      p = q;
  405b54:	4635      	mov	r5, r6
      if (arp_table[i].q != NULL) {
  405b56:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  405b5a:	4a09      	ldr	r2, [pc, #36]	; (405b80 <etharp_query+0x148>)
  405b5c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  405b60:	b108      	cbz	r0, 405b66 <etharp_query+0x12e>
        pbuf_free(arp_table[i].q);
  405b62:	4b0d      	ldr	r3, [pc, #52]	; (405b98 <etharp_query+0x160>)
  405b64:	4798      	blx	r3
      arp_table[i].q = p;
  405b66:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  405b6a:	4a05      	ldr	r2, [pc, #20]	; (405b80 <etharp_query+0x148>)
  405b6c:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
      result = ERR_OK;
  405b70:	2000      	movs	r0, #0
  405b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405b76:	bf00      	nop
  405b78:	004018a5 	.word	0x004018a5
  405b7c:	004057b9 	.word	0x004057b9
  405b80:	204025ec 	.word	0x204025ec
  405b84:	0040591d 	.word	0x0040591d
  405b88:	204026b4 	.word	0x204026b4
  405b8c:	004058b1 	.word	0x004058b1
  405b90:	00402685 	.word	0x00402685
  405b94:	00402899 	.word	0x00402899
  405b98:	0040262d 	.word	0x0040262d
  405b9c:	00402843 	.word	0x00402843

00405ba0 <etharp_output>:
{
  405ba0:	b570      	push	{r4, r5, r6, lr}
  405ba2:	b082      	sub	sp, #8
  405ba4:	4605      	mov	r5, r0
  405ba6:	460e      	mov	r6, r1
  405ba8:	4614      	mov	r4, r2
  if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
  405baa:	210e      	movs	r1, #14
  405bac:	4630      	mov	r0, r6
  405bae:	4b3d      	ldr	r3, [pc, #244]	; (405ca4 <etharp_output+0x104>)
  405bb0:	4798      	blx	r3
  405bb2:	2800      	cmp	r0, #0
  405bb4:	d16c      	bne.n	405c90 <etharp_output+0xf0>
  if (ip_addr_isbroadcast(ipaddr, netif)) {
  405bb6:	4629      	mov	r1, r5
  405bb8:	6820      	ldr	r0, [r4, #0]
  405bba:	4b3b      	ldr	r3, [pc, #236]	; (405ca8 <etharp_output+0x108>)
  405bbc:	4798      	blx	r3
  405bbe:	2800      	cmp	r0, #0
  405bc0:	d15d      	bne.n	405c7e <etharp_output+0xde>
  } else if (ip_addr_ismulticast(ipaddr)) {
  405bc2:	6823      	ldr	r3, [r4, #0]
  405bc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  405bc8:	2ae0      	cmp	r2, #224	; 0xe0
  405bca:	d024      	beq.n	405c16 <etharp_output+0x76>
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
  405bcc:	686a      	ldr	r2, [r5, #4]
  405bce:	405a      	eors	r2, r3
  405bd0:	68a9      	ldr	r1, [r5, #8]
  405bd2:	420a      	tst	r2, r1
  405bd4:	d00a      	beq.n	405bec <etharp_output+0x4c>
        !ip_addr_islinklocal(ipaddr)) {
  405bd6:	b29b      	uxth	r3, r3
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
  405bd8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
  405bdc:	4293      	cmp	r3, r2
  405bde:	d005      	beq.n	405bec <etharp_output+0x4c>
        if (!ip_addr_isany(&netif->gw)) {
  405be0:	f115 040c 	adds.w	r4, r5, #12
  405be4:	d057      	beq.n	405c96 <etharp_output+0xf6>
  405be6:	68eb      	ldr	r3, [r5, #12]
  405be8:	2b00      	cmp	r3, #0
  405bea:	d057      	beq.n	405c9c <etharp_output+0xfc>
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  405bec:	4b2f      	ldr	r3, [pc, #188]	; (405cac <etharp_output+0x10c>)
  405bee:	781a      	ldrb	r2, [r3, #0]
  405bf0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  405bf4:	4b2e      	ldr	r3, [pc, #184]	; (405cb0 <etharp_output+0x110>)
  405bf6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  405bfa:	7c9b      	ldrb	r3, [r3, #18]
  405bfc:	2b01      	cmp	r3, #1
  405bfe:	d907      	bls.n	405c10 <etharp_output+0x70>
            (ip_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
  405c00:	460b      	mov	r3, r1
  405c02:	492b      	ldr	r1, [pc, #172]	; (405cb0 <etharp_output+0x110>)
  405c04:	eb01 0383 	add.w	r3, r1, r3, lsl #2
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  405c08:	6821      	ldr	r1, [r4, #0]
  405c0a:	685b      	ldr	r3, [r3, #4]
  405c0c:	4299      	cmp	r1, r3
  405c0e:	d018      	beq.n	405c42 <etharp_output+0xa2>
  405c10:	4b27      	ldr	r3, [pc, #156]	; (405cb0 <etharp_output+0x110>)
{
  405c12:	2200      	movs	r2, #0
  405c14:	e01e      	b.n	405c54 <etharp_output+0xb4>
    mcastaddr.addr[0] = LL_MULTICAST_ADDR_0;
  405c16:	2301      	movs	r3, #1
  405c18:	f88d 3000 	strb.w	r3, [sp]
    mcastaddr.addr[1] = LL_MULTICAST_ADDR_1;
  405c1c:	2300      	movs	r3, #0
  405c1e:	f88d 3001 	strb.w	r3, [sp, #1]
    mcastaddr.addr[2] = LL_MULTICAST_ADDR_2;
  405c22:	235e      	movs	r3, #94	; 0x5e
  405c24:	f88d 3002 	strb.w	r3, [sp, #2]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
  405c28:	7863      	ldrb	r3, [r4, #1]
  405c2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  405c2e:	f88d 3003 	strb.w	r3, [sp, #3]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
  405c32:	78a3      	ldrb	r3, [r4, #2]
  405c34:	f88d 3004 	strb.w	r3, [sp, #4]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
  405c38:	78e3      	ldrb	r3, [r4, #3]
  405c3a:	f88d 3005 	strb.w	r3, [sp, #5]
    dest = &mcastaddr;
  405c3e:	466b      	mov	r3, sp
  405c40:	e01e      	b.n	405c80 <etharp_output+0xe0>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
  405c42:	4631      	mov	r1, r6
  405c44:	4628      	mov	r0, r5
  405c46:	4b1b      	ldr	r3, [pc, #108]	; (405cb4 <etharp_output+0x114>)
  405c48:	4798      	blx	r3
  405c4a:	e01f      	b.n	405c8c <etharp_output+0xec>
  405c4c:	3201      	adds	r2, #1
  405c4e:	3314      	adds	r3, #20
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
  405c50:	2a0a      	cmp	r2, #10
  405c52:	d00e      	beq.n	405c72 <etharp_output+0xd2>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
  405c54:	7c99      	ldrb	r1, [r3, #18]
  405c56:	2901      	cmp	r1, #1
  405c58:	d9f8      	bls.n	405c4c <etharp_output+0xac>
  405c5a:	6820      	ldr	r0, [r4, #0]
  405c5c:	6859      	ldr	r1, [r3, #4]
  405c5e:	4288      	cmp	r0, r1
  405c60:	d1f4      	bne.n	405c4c <etharp_output+0xac>
        ETHARP_SET_HINT(netif, i);
  405c62:	b2d2      	uxtb	r2, r2
  405c64:	4b11      	ldr	r3, [pc, #68]	; (405cac <etharp_output+0x10c>)
  405c66:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
  405c68:	4631      	mov	r1, r6
  405c6a:	4628      	mov	r0, r5
  405c6c:	4b11      	ldr	r3, [pc, #68]	; (405cb4 <etharp_output+0x114>)
  405c6e:	4798      	blx	r3
  405c70:	e00c      	b.n	405c8c <etharp_output+0xec>
    return etharp_query(netif, dst_addr, q);
  405c72:	4632      	mov	r2, r6
  405c74:	4621      	mov	r1, r4
  405c76:	4628      	mov	r0, r5
  405c78:	4b0f      	ldr	r3, [pc, #60]	; (405cb8 <etharp_output+0x118>)
  405c7a:	4798      	blx	r3
  405c7c:	e006      	b.n	405c8c <etharp_output+0xec>
    dest = (struct eth_addr *)&ethbroadcast;
  405c7e:	4b0f      	ldr	r3, [pc, #60]	; (405cbc <etharp_output+0x11c>)
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
  405c80:	f105 0227 	add.w	r2, r5, #39	; 0x27
  405c84:	4631      	mov	r1, r6
  405c86:	4628      	mov	r0, r5
  405c88:	4c0d      	ldr	r4, [pc, #52]	; (405cc0 <etharp_output+0x120>)
  405c8a:	47a0      	blx	r4
}
  405c8c:	b002      	add	sp, #8
  405c8e:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_BUF;
  405c90:	f06f 0001 	mvn.w	r0, #1
  405c94:	e7fa      	b.n	405c8c <etharp_output+0xec>
          return ERR_RTE;
  405c96:	f06f 0003 	mvn.w	r0, #3
  405c9a:	e7f7      	b.n	405c8c <etharp_output+0xec>
  405c9c:	f06f 0003 	mvn.w	r0, #3
  405ca0:	e7f4      	b.n	405c8c <etharp_output+0xec>
  405ca2:	bf00      	nop
  405ca4:	004025bf 	.word	0x004025bf
  405ca8:	004018a5 	.word	0x004018a5
  405cac:	204026b4 	.word	0x204026b4
  405cb0:	204025ec 	.word	0x204025ec
  405cb4:	004059c9 	.word	0x004059c9
  405cb8:	00405a39 	.word	0x00405a39
  405cbc:	0040d820 	.word	0x0040d820
  405cc0:	004058b1 	.word	0x004058b1

00405cc4 <ethernet_input>:
 * @param p the recevied packet, p->payload pointing to the ethernet header
 * @param netif the network interface on which the packet was received
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
  405cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405cc8:	b083      	sub	sp, #12
  405cca:	4604      	mov	r4, r0
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
  405ccc:	8947      	ldrh	r7, [r0, #10]
  405cce:	2f0e      	cmp	r7, #14
  405cd0:	d919      	bls.n	405d06 <ethernet_input+0x42>
  405cd2:	460e      	mov	r6, r1
    ETHARP_STATS_INC(etharp.drop);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
  405cd4:	6845      	ldr	r5, [r0, #4]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0], (unsigned)ethhdr->src.addr[1], (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3], (unsigned)ethhdr->src.addr[4], (unsigned)ethhdr->src.addr[5],
     (unsigned)htons(ethhdr->type)));

  type = ethhdr->type;
  405cd6:	f8b5 800c 	ldrh.w	r8, [r5, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
  405cda:	782b      	ldrb	r3, [r5, #0]
  405cdc:	f013 0f01 	tst.w	r3, #1
  405ce0:	d00b      	beq.n	405cfa <ethernet_input+0x36>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_MULTICAST_ADDR_0) {
  405ce2:	2b01      	cmp	r3, #1
  405ce4:	d016      	beq.n	405d14 <ethernet_input+0x50>
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
          (ethhdr->dest.addr[2] == LL_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
      }
    } else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
  405ce6:	2206      	movs	r2, #6
  405ce8:	496d      	ldr	r1, [pc, #436]	; (405ea0 <ethernet_input+0x1dc>)
  405cea:	4628      	mov	r0, r5
  405cec:	4b6d      	ldr	r3, [pc, #436]	; (405ea4 <ethernet_input+0x1e0>)
  405cee:	4798      	blx	r3
  405cf0:	b918      	cbnz	r0, 405cfa <ethernet_input+0x36>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
  405cf2:	7b63      	ldrb	r3, [r4, #13]
  405cf4:	f043 0308 	orr.w	r3, r3, #8
  405cf8:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
  405cfa:	f1b8 0f08 	cmp.w	r8, #8
  405cfe:	d014      	beq.n	405d2a <ethernet_input+0x66>
  405d00:	f5b8 6fc1 	cmp.w	r8, #1544	; 0x608
  405d04:	d022      	beq.n	405d4c <ethernet_input+0x88>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
  405d06:	4620      	mov	r0, r4
  405d08:	4b67      	ldr	r3, [pc, #412]	; (405ea8 <ethernet_input+0x1e4>)
  405d0a:	4798      	blx	r3
  return ERR_OK;
}
  405d0c:	2000      	movs	r0, #0
  405d0e:	b003      	add	sp, #12
  405d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
  405d14:	786b      	ldrb	r3, [r5, #1]
  405d16:	2b00      	cmp	r3, #0
  405d18:	d1ef      	bne.n	405cfa <ethernet_input+0x36>
  405d1a:	78ab      	ldrb	r3, [r5, #2]
  405d1c:	2b5e      	cmp	r3, #94	; 0x5e
  405d1e:	d1ec      	bne.n	405cfa <ethernet_input+0x36>
        p->flags |= PBUF_FLAG_LLMCAST;
  405d20:	7b43      	ldrb	r3, [r0, #13]
  405d22:	f043 0310 	orr.w	r3, r3, #16
  405d26:	7343      	strb	r3, [r0, #13]
  405d28:	e7e7      	b.n	405cfa <ethernet_input+0x36>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  405d2a:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
  405d2e:	f013 0f20 	tst.w	r3, #32
  405d32:	d0e8      	beq.n	405d06 <ethernet_input+0x42>
      if(pbuf_header(p, -ip_hdr_offset)) {
  405d34:	f06f 010d 	mvn.w	r1, #13
  405d38:	4620      	mov	r0, r4
  405d3a:	4b5c      	ldr	r3, [pc, #368]	; (405eac <ethernet_input+0x1e8>)
  405d3c:	4798      	blx	r3
  405d3e:	2800      	cmp	r0, #0
  405d40:	d1e1      	bne.n	405d06 <ethernet_input+0x42>
        ip_input(p, netif);
  405d42:	4631      	mov	r1, r6
  405d44:	4620      	mov	r0, r4
  405d46:	4b5a      	ldr	r3, [pc, #360]	; (405eb0 <ethernet_input+0x1ec>)
  405d48:	4798      	blx	r3
      break;
  405d4a:	e7df      	b.n	405d0c <ethernet_input+0x48>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  405d4c:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
  405d50:	f013 0f20 	tst.w	r3, #32
  405d54:	d0d7      	beq.n	405d06 <ethernet_input+0x42>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  405d56:	b17e      	cbz	r6, 405d78 <ethernet_input+0xb4>
  if (p->len < SIZEOF_ETHARP_PACKET) {
  405d58:	2f29      	cmp	r7, #41	; 0x29
  405d5a:	d90e      	bls.n	405d7a <ethernet_input+0xb6>
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
  405d5c:	89eb      	ldrh	r3, [r5, #14]
  405d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  405d62:	d105      	bne.n	405d70 <ethernet_input+0xac>
  405d64:	7cab      	ldrb	r3, [r5, #18]
  405d66:	2b06      	cmp	r3, #6
  405d68:	d102      	bne.n	405d70 <ethernet_input+0xac>
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
  405d6a:	7ceb      	ldrb	r3, [r5, #19]
  405d6c:	2b04      	cmp	r3, #4
  405d6e:	d008      	beq.n	405d82 <ethernet_input+0xbe>
    pbuf_free(p);
  405d70:	4620      	mov	r0, r4
  405d72:	4b4d      	ldr	r3, [pc, #308]	; (405ea8 <ethernet_input+0x1e4>)
  405d74:	4798      	blx	r3
  405d76:	e7c9      	b.n	405d0c <ethernet_input+0x48>
  405d78:	e7fe      	b.n	405d78 <ethernet_input+0xb4>
    pbuf_free(p);
  405d7a:	4620      	mov	r0, r4
  405d7c:	4b4a      	ldr	r3, [pc, #296]	; (405ea8 <ethernet_input+0x1e4>)
  405d7e:	4798      	blx	r3
  405d80:	e7c4      	b.n	405d0c <ethernet_input+0x48>
      (hdr->protolen != sizeof(ip_addr_t)) ||
  405d82:	8a2b      	ldrh	r3, [r5, #16]
  405d84:	2b08      	cmp	r3, #8
  405d86:	d1f3      	bne.n	405d70 <ethernet_input+0xac>
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
  405d88:	69e8      	ldr	r0, [r5, #28]
  405d8a:	9001      	str	r0, [sp, #4]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
  405d8c:	f8d5 2026 	ldr.w	r2, [r5, #38]	; 0x26
  if (ip_addr_isany(&netif->ip_addr)) {
  405d90:	f116 0f04 	cmn.w	r6, #4
  405d94:	d07d      	beq.n	405e92 <ethernet_input+0x1ce>
  405d96:	6873      	ldr	r3, [r6, #4]
  405d98:	2b00      	cmp	r3, #0
  405d9a:	d07a      	beq.n	405e92 <ethernet_input+0x1ce>
    for_us = (u8_t)ip_addr_cmp(&dipaddr, &(netif->ip_addr));
  405d9c:	429a      	cmp	r2, r3
  405d9e:	bf0c      	ite	eq
  405da0:	f04f 0901 	moveq.w	r9, #1
  405da4:	f04f 0900 	movne.w	r9, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
  405da8:	f105 0716 	add.w	r7, r5, #22
  405dac:	d06d      	beq.n	405e8a <ethernet_input+0x1c6>
  405dae:	f04f 0a02 	mov.w	sl, #2
      etharp_arp_input(netif, (struct eth_addr*)(netif->hwaddr), p);
  405db2:	f106 0827 	add.w	r8, r6, #39	; 0x27
  if (ip_addr_isany(ipaddr) ||
  405db6:	2800      	cmp	r0, #0
  405db8:	d03a      	beq.n	405e30 <ethernet_input+0x16c>
      ip_addr_isbroadcast(ipaddr, netif) ||
  405dba:	4631      	mov	r1, r6
  405dbc:	4b3d      	ldr	r3, [pc, #244]	; (405eb4 <ethernet_input+0x1f0>)
  405dbe:	4798      	blx	r3
  if (ip_addr_isany(ipaddr) ||
  405dc0:	bbb0      	cbnz	r0, 405e30 <ethernet_input+0x16c>
      ip_addr_ismulticast(ipaddr)) {
  405dc2:	9b01      	ldr	r3, [sp, #4]
  405dc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip_addr_isbroadcast(ipaddr, netif) ||
  405dc8:	2be0      	cmp	r3, #224	; 0xe0
  405dca:	d031      	beq.n	405e30 <ethernet_input+0x16c>
  i = etharp_find_entry(ipaddr, flags);
  405dcc:	4651      	mov	r1, sl
  405dce:	a801      	add	r0, sp, #4
  405dd0:	4b39      	ldr	r3, [pc, #228]	; (405eb8 <ethernet_input+0x1f4>)
  405dd2:	4798      	blx	r3
  if (i < 0) {
  405dd4:	1e03      	subs	r3, r0, #0
  405dd6:	db2b      	blt.n	405e30 <ethernet_input+0x16c>
    arp_table[i].state = ETHARP_STATE_STABLE;
  405dd8:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 405ec0 <ethernet_input+0x1fc>
  405ddc:	009a      	lsls	r2, r3, #2
  405dde:	18d1      	adds	r1, r2, r3
  405de0:	0089      	lsls	r1, r1, #2
  405de2:	eb0e 0c01 	add.w	ip, lr, r1
  405de6:	2002      	movs	r0, #2
  405de8:	f88c 0012 	strb.w	r0, [ip, #18]
  arp_table[i].netif = netif;
  405dec:	f8cc 6008 	str.w	r6, [ip, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
  405df0:	460a      	mov	r2, r1
  405df2:	320c      	adds	r2, #12
  405df4:	eb0e 0a02 	add.w	sl, lr, r2
  405df8:	6838      	ldr	r0, [r7, #0]
  405dfa:	f84e 0002 	str.w	r0, [lr, r2]
  405dfe:	88ba      	ldrh	r2, [r7, #4]
  405e00:	f8aa 2004 	strh.w	r2, [sl, #4]
  arp_table[i].ctime = 0;
  405e04:	2200      	movs	r2, #0
  405e06:	f88c 2013 	strb.w	r2, [ip, #19]
  if (arp_table[i].q != NULL) {
  405e0a:	f85e a001 	ldr.w	sl, [lr, r1]
  405e0e:	f1ba 0f00 	cmp.w	sl, #0
  405e12:	d00d      	beq.n	405e30 <ethernet_input+0x16c>
    arp_table[i].q = NULL;
  405e14:	460b      	mov	r3, r1
  405e16:	4611      	mov	r1, r2
  405e18:	f84e 1003 	str.w	r1, [lr, r3]
    etharp_send_ip(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr);
  405e1c:	463b      	mov	r3, r7
  405e1e:	4642      	mov	r2, r8
  405e20:	4651      	mov	r1, sl
  405e22:	4630      	mov	r0, r6
  405e24:	f8df b09c 	ldr.w	fp, [pc, #156]	; 405ec4 <ethernet_input+0x200>
  405e28:	47d8      	blx	fp
    pbuf_free(p);
  405e2a:	4650      	mov	r0, sl
  405e2c:	4b1e      	ldr	r3, [pc, #120]	; (405ea8 <ethernet_input+0x1e4>)
  405e2e:	4798      	blx	r3
  switch (hdr->opcode) {
  405e30:	8aab      	ldrh	r3, [r5, #20]
  405e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  405e36:	d124      	bne.n	405e82 <ethernet_input+0x1be>
    if (for_us) {
  405e38:	f1b9 0f00 	cmp.w	r9, #0
  405e3c:	d021      	beq.n	405e82 <ethernet_input+0x1be>
      hdr->opcode = htons(ARP_REPLY);
  405e3e:	2002      	movs	r0, #2
  405e40:	4b1e      	ldr	r3, [pc, #120]	; (405ebc <ethernet_input+0x1f8>)
  405e42:	4798      	blx	r3
  405e44:	82a8      	strh	r0, [r5, #20]
      IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
  405e46:	69eb      	ldr	r3, [r5, #28]
  405e48:	f8c5 3026 	str.w	r3, [r5, #38]	; 0x26
      IPADDR2_COPY(&hdr->sipaddr, &netif->ip_addr);
  405e4c:	6873      	ldr	r3, [r6, #4]
  405e4e:	61eb      	str	r3, [r5, #28]
      ETHADDR16_COPY(&hdr->dhwaddr, &hdr->shwaddr);
  405e50:	683b      	ldr	r3, [r7, #0]
  405e52:	622b      	str	r3, [r5, #32]
  405e54:	88bb      	ldrh	r3, [r7, #4]
  405e56:	84ab      	strh	r3, [r5, #36]	; 0x24
      ETHADDR16_COPY(&ethhdr->dest, &hdr->shwaddr);
  405e58:	683b      	ldr	r3, [r7, #0]
  405e5a:	602b      	str	r3, [r5, #0]
  405e5c:	88bb      	ldrh	r3, [r7, #4]
  405e5e:	80ab      	strh	r3, [r5, #4]
      ETHADDR16_COPY(&hdr->shwaddr, ethaddr);
  405e60:	f8d8 3000 	ldr.w	r3, [r8]
  405e64:	603b      	str	r3, [r7, #0]
  405e66:	f8b8 3004 	ldrh.w	r3, [r8, #4]
  405e6a:	80bb      	strh	r3, [r7, #4]
      ETHADDR16_COPY(&ethhdr->src, ethaddr);
  405e6c:	f8d8 3000 	ldr.w	r3, [r8]
  405e70:	f8c5 3006 	str.w	r3, [r5, #6]
  405e74:	f8b8 3004 	ldrh.w	r3, [r8, #4]
  405e78:	816b      	strh	r3, [r5, #10]
      netif->linkoutput(netif, p);
  405e7a:	69b3      	ldr	r3, [r6, #24]
  405e7c:	4621      	mov	r1, r4
  405e7e:	4630      	mov	r0, r6
  405e80:	4798      	blx	r3
  pbuf_free(p);
  405e82:	4620      	mov	r0, r4
  405e84:	4b08      	ldr	r3, [pc, #32]	; (405ea8 <ethernet_input+0x1e4>)
  405e86:	4798      	blx	r3
  405e88:	e740      	b.n	405d0c <ethernet_input+0x48>
    for_us = (u8_t)ip_addr_cmp(&dipaddr, &(netif->ip_addr));
  405e8a:	f04f 0901 	mov.w	r9, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
  405e8e:	46ca      	mov	sl, r9
  405e90:	e78f      	b.n	405db2 <ethernet_input+0xee>
  405e92:	f105 0716 	add.w	r7, r5, #22
  405e96:	f04f 0900 	mov.w	r9, #0
  405e9a:	f04f 0a02 	mov.w	sl, #2
  405e9e:	e788      	b.n	405db2 <ethernet_input+0xee>
  405ea0:	0040d820 	.word	0x0040d820
  405ea4:	00407235 	.word	0x00407235
  405ea8:	0040262d 	.word	0x0040262d
  405eac:	004025bf 	.word	0x004025bf
  405eb0:	004015ad 	.word	0x004015ad
  405eb4:	004018a5 	.word	0x004018a5
  405eb8:	004057b9 	.word	0x004057b9
  405ebc:	00401195 	.word	0x00401195
  405ec0:	204025ec 	.word	0x204025ec
  405ec4:	004058b1 	.word	0x004058b1

00405ec8 <gmac_rx_populate_queue>:
 * (since the lsb are used as status bits by GMAC).
 *
 * \param p_gmac_dev Pointer to driver data structure.
 */
static void gmac_rx_populate_queue(struct gmac_device *p_gmac_dev)
{
  405ec8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405ecc:	4607      	mov	r7, r0
  405ece:	f100 0430 	add.w	r4, r0, #48	; 0x30
  405ed2:	4606      	mov	r6, r0
	uint32_t ul_index = 0;
	struct pbuf *p = 0;

	/* Set up the RX descriptors. */
	for (ul_index = 0; ul_index < GMAC_RX_BUFFERS; ul_index++) {
  405ed4:	2500      	movs	r5, #0
		if (p_gmac_dev->rx_pbuf[ul_index] == 0) {

			/* Allocate a new pbuf with the maximum size. */
			p = pbuf_alloc(PBUF_RAW, (u16_t) GMAC_FRAME_LENTGH_MAX, PBUF_POOL);
  405ed6:	f04f 0b03 	mov.w	fp, #3
  405eda:	f44f 6ac0 	mov.w	sl, #1536	; 0x600
  405ede:	f8df 9044 	ldr.w	r9, [pc, #68]	; 405f24 <gmac_rx_populate_queue+0x5c>
  405ee2:	46a0      	mov	r8, r4
		if (p_gmac_dev->rx_pbuf[ul_index] == 0) {
  405ee4:	6823      	ldr	r3, [r4, #0]
  405ee6:	b133      	cbz	r3, 405ef6 <gmac_rx_populate_queue+0x2e>
	for (ul_index = 0; ul_index < GMAC_RX_BUFFERS; ul_index++) {
  405ee8:	3501      	adds	r5, #1
  405eea:	3404      	adds	r4, #4
  405eec:	3608      	adds	r6, #8
  405eee:	2d03      	cmp	r5, #3
  405ef0:	d1f7      	bne.n	405ee2 <gmac_rx_populate_queue+0x1a>
  405ef2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			p = pbuf_alloc(PBUF_RAW, (u16_t) GMAC_FRAME_LENTGH_MAX, PBUF_POOL);
  405ef6:	465a      	mov	r2, fp
  405ef8:	4651      	mov	r1, sl
  405efa:	4658      	mov	r0, fp
  405efc:	47c8      	blx	r9
			if (p == NULL) {
  405efe:	4603      	mov	r3, r0
  405f00:	2800      	cmp	r0, #0
  405f02:	d0f6      	beq.n	405ef2 <gmac_rx_populate_queue+0x2a>

			/* Make sure that the payload buffer is properly aligned. */
			LWIP_ASSERT("gmac_rx_populate_queue: unaligned p->payload buffer address",
					(((uint32_t)p->payload & 0xFFFFFFFC) == (uint32_t)p->payload));

			if (ul_index == GMAC_RX_BUFFERS - 1)
  405f04:	2d02      	cmp	r5, #2
  405f06:	d007      	beq.n	405f18 <gmac_rx_populate_queue+0x50>
				p_gmac_dev->rx_desc[ul_index].addr.val = (u32_t) p->payload | GMAC_RXD_WRAP;
			else
				p_gmac_dev->rx_desc[ul_index].addr.val = (u32_t) p->payload;
  405f08:	6842      	ldr	r2, [r0, #4]
  405f0a:	f847 2035 	str.w	r2, [r7, r5, lsl #3]

			/* Reset status value. */
			p_gmac_dev->rx_desc[ul_index].status.val = 0;
  405f0e:	2200      	movs	r2, #0
  405f10:	6072      	str	r2, [r6, #4]

			/* Save pbuf pointer to be sent to lwIP upper layer. */
			p_gmac_dev->rx_pbuf[ul_index] = p;
  405f12:	f8c8 3000 	str.w	r3, [r8]
  405f16:	e7e7      	b.n	405ee8 <gmac_rx_populate_queue+0x20>
				p_gmac_dev->rx_desc[ul_index].addr.val = (u32_t) p->payload | GMAC_RXD_WRAP;
  405f18:	6842      	ldr	r2, [r0, #4]
  405f1a:	f042 0202 	orr.w	r2, r2, #2
  405f1e:	613a      	str	r2, [r7, #16]
  405f20:	e7f5      	b.n	405f0e <gmac_rx_populate_queue+0x46>
  405f22:	bf00      	nop
  405f24:	00402685 	.word	0x00402685

00405f28 <gmac_low_level_output>:
 *
 * \return ERR_OK if the packet could be sent.
 * an err_t value if the packet couldn't be sent.
 */
static err_t gmac_low_level_output(struct netif *netif, struct pbuf *p)
{
  405f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct gmac_device *ps_gmac_dev = netif->state;
  405f2c:	6a07      	ldr	r7, [r0, #32]
	return p_gmac->GMAC_TSR;
  405f2e:	4b1c      	ldr	r3, [pc, #112]	; (405fa0 <gmac_low_level_output+0x78>)
  405f30:	695b      	ldr	r3, [r3, #20]
		gmac_clear_tx_status(GMAC, GMAC_TX_ERRORS);

		gmac_enable_transmit(GMAC, true);
	}

	buffer = (uint8_t*)ps_gmac_dev->tx_desc[ps_gmac_dev->us_tx_idx].addr;
  405f32:	f241 230c 	movw	r3, #4620	; 0x120c
  405f36:	58fb      	ldr	r3, [r7, r3]
  405f38:	3303      	adds	r3, #3
  405f3a:	f857 5033 	ldr.w	r5, [r7, r3, lsl #3]

	/* Copy pbuf chain into TX buffer. */
	for (q = p; q != NULL; q = q->next) {
  405f3e:	4688      	mov	r8, r1
  405f40:	b151      	cbz	r1, 405f58 <gmac_low_level_output+0x30>
  405f42:	460c      	mov	r4, r1
		memcpy(buffer, q->payload, q->len);
  405f44:	4e17      	ldr	r6, [pc, #92]	; (405fa4 <gmac_low_level_output+0x7c>)
  405f46:	8962      	ldrh	r2, [r4, #10]
  405f48:	6861      	ldr	r1, [r4, #4]
  405f4a:	4628      	mov	r0, r5
  405f4c:	47b0      	blx	r6
		buffer += q->len;
  405f4e:	8963      	ldrh	r3, [r4, #10]
  405f50:	441d      	add	r5, r3
	for (q = p; q != NULL; q = q->next) {
  405f52:	6824      	ldr	r4, [r4, #0]
  405f54:	2c00      	cmp	r4, #0
  405f56:	d1f6      	bne.n	405f46 <gmac_low_level_output+0x1e>
	}

	/* Set len and mark the buffer to be sent by GMAC. */
	ps_gmac_dev->tx_desc[ps_gmac_dev->us_tx_idx].status.bm.b_len = p->tot_len;
  405f58:	f241 210c 	movw	r1, #4620	; 0x120c
  405f5c:	587a      	ldr	r2, [r7, r1]
  405f5e:	1cd3      	adds	r3, r2, #3
  405f60:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
  405f64:	8898      	ldrh	r0, [r3, #4]
  405f66:	f8b8 4008 	ldrh.w	r4, [r8, #8]
  405f6a:	f364 000d 	bfi	r0, r4, #0, #14
  405f6e:	8098      	strh	r0, [r3, #4]
	ps_gmac_dev->tx_desc[ps_gmac_dev->us_tx_idx].status.bm.b_used = 0;
  405f70:	79d8      	ldrb	r0, [r3, #7]
  405f72:	f36f 10c7 	bfc	r0, #7, #1
  405f76:	71d8      	strb	r0, [r3, #7]

	LWIP_DEBUGF(NETIF_DEBUG,
			("gmac_low_level_output: DMA buffer sent, size=%d [idx=%u]\n",
			p->tot_len, ps_gmac_dev->us_tx_idx));

	ps_gmac_dev->us_tx_idx = (ps_gmac_dev->us_tx_idx + 1) % GMAC_TX_BUFFERS;
  405f78:	3201      	adds	r2, #1
  405f7a:	4b0b      	ldr	r3, [pc, #44]	; (405fa8 <gmac_low_level_output+0x80>)
  405f7c:	fba3 0302 	umull	r0, r3, r3, r2
  405f80:	085b      	lsrs	r3, r3, #1
  405f82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  405f86:	1ad3      	subs	r3, r2, r3
  405f88:	507b      	str	r3, [r7, r1]
  __ASM volatile ("dsb");
  405f8a:	f3bf 8f4f 	dsb	sy
	p_gmac->GMAC_NCR |= GMAC_NCR_TSTART;
  405f8e:	4a04      	ldr	r2, [pc, #16]	; (405fa0 <gmac_low_level_output+0x78>)
  405f90:	6813      	ldr	r3, [r2, #0]
  405f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  405f96:	6013      	str	r3, [r2, #0]
	lwip_tx_count += p->tot_len;
#endif
	LINK_STATS_INC(link.xmit);

	return ERR_OK;
}
  405f98:	2000      	movs	r0, #0
  405f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405f9e:	bf00      	nop
  405fa0:	40050000 	.word	0x40050000
  405fa4:	00407295 	.word	0x00407295
  405fa8:	aaaaaaab 	.word	0xaaaaaaab

00405fac <GMAC_Handler>:
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  405fac:	2280      	movs	r2, #128	; 0x80
  405fae:	4b02      	ldr	r3, [pc, #8]	; (405fb8 <GMAC_Handler+0xc>)
  405fb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  405fb4:	4770      	bx	lr
  405fb6:	bf00      	nop
  405fb8:	e000e100 	.word	0xe000e100

00405fbc <ethernetif_input>:
 * input function is called.
 *
 * \param netif the lwIP network interface structure for this ethernetif.
 */
void ethernetif_input(struct netif *netif)
{
  405fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct gmac_device *ps_gmac_dev = netif->state;
  405fc0:	6a04      	ldr	r4, [r0, #32]
	gmac_rx_descriptor_t *p_rx = &ps_gmac_dev->rx_desc[ps_gmac_dev->us_rx_idx];
  405fc2:	f241 2308 	movw	r3, #4616	; 0x1208
  405fc6:	f854 8003 	ldr.w	r8, [r4, r3]
	return p_gmac->GMAC_RSR;
  405fca:	4b24      	ldr	r3, [pc, #144]	; (40605c <ethernetif_input+0xa0>)
  405fcc:	6a1b      	ldr	r3, [r3, #32]
  405fce:	eb04 02c8 	add.w	r2, r4, r8, lsl #3
	if ((p_rx->addr.val & GMAC_RXD_OWNERSHIP) == GMAC_RXD_OWNERSHIP) {
  405fd2:	f854 3038 	ldr.w	r3, [r4, r8, lsl #3]
  405fd6:	f013 0f01 	tst.w	r3, #1
  405fda:	d032      	beq.n	406042 <ethernetif_input+0x86>
  405fdc:	4606      	mov	r6, r0
		p = ps_gmac_dev->rx_pbuf[ps_gmac_dev->us_rx_idx];
  405fde:	f108 030c 	add.w	r3, r8, #12
  405fe2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
		length = p_rx->status.val & GMAC_RXD_LEN_MASK;
  405fe6:	6853      	ldr	r3, [r2, #4]
		p->len = length;
  405fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
  405fec:	816b      	strh	r3, [r5, #10]
		ps_gmac_dev->rx_pbuf[ps_gmac_dev->us_rx_idx] = 0;
  405fee:	f241 2708 	movw	r7, #4616	; 0x1208
  405ff2:	59e2      	ldr	r2, [r4, r7]
  405ff4:	320c      	adds	r2, #12
  405ff6:	2100      	movs	r1, #0
  405ff8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
		p->tot_len = length;
  405ffc:	812b      	strh	r3, [r5, #8]
		gmac_rx_populate_queue(ps_gmac_dev);
  405ffe:	4620      	mov	r0, r4
  406000:	4b17      	ldr	r3, [pc, #92]	; (406060 <ethernetif_input+0xa4>)
  406002:	4798      	blx	r3
		p_rx->addr.val &= ~(GMAC_RXD_OWNERSHIP);
  406004:	f854 3038 	ldr.w	r3, [r4, r8, lsl #3]
  406008:	f023 0301 	bic.w	r3, r3, #1
  40600c:	f844 3038 	str.w	r3, [r4, r8, lsl #3]
		ps_gmac_dev->us_rx_idx = (ps_gmac_dev->us_rx_idx + 1) % GMAC_RX_BUFFERS;
  406010:	59e2      	ldr	r2, [r4, r7]
  406012:	3201      	adds	r2, #1
  406014:	4b13      	ldr	r3, [pc, #76]	; (406064 <ethernetif_input+0xa8>)
  406016:	fba3 1302 	umull	r1, r3, r3, r2
  40601a:	085b      	lsrs	r3, r3, #1
  40601c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  406020:	1ad3      	subs	r3, r2, r3
  406022:	51e3      	str	r3, [r4, r7]
	struct eth_hdr *ethhdr;
	struct pbuf *p;

	/* Move received packet into a new pbuf. */
	p = gmac_low_level_input(netif);
	if (p == NULL)
  406024:	b16d      	cbz	r5, 406042 <ethernetif_input+0x86>
		return;

	/* Points to packet payload, which starts with an Ethernet header. */
	ethhdr = p->payload;

	switch (htons(ethhdr->type)) {
  406026:	686b      	ldr	r3, [r5, #4]
  406028:	8998      	ldrh	r0, [r3, #12]
  40602a:	4b0f      	ldr	r3, [pc, #60]	; (406068 <ethernetif_input+0xac>)
  40602c:	4798      	blx	r3
  40602e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
  406032:	d008      	beq.n	406046 <ethernetif_input+0x8a>
  406034:	f640 0306 	movw	r3, #2054	; 0x806
  406038:	4298      	cmp	r0, r3
  40603a:	d004      	beq.n	406046 <ethernetif_input+0x8a>
			}
			break;

		default:
			/* Free buffer. */
			pbuf_free(p);
  40603c:	4628      	mov	r0, r5
  40603e:	4b0b      	ldr	r3, [pc, #44]	; (40606c <ethernetif_input+0xb0>)
  406040:	4798      	blx	r3
  406042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (netif->input(p, netif) != ERR_OK) {
  406046:	6933      	ldr	r3, [r6, #16]
  406048:	4631      	mov	r1, r6
  40604a:	4628      	mov	r0, r5
  40604c:	4798      	blx	r3
  40604e:	2800      	cmp	r0, #0
  406050:	d0f7      	beq.n	406042 <ethernetif_input+0x86>
				pbuf_free(p);
  406052:	4628      	mov	r0, r5
  406054:	4b05      	ldr	r3, [pc, #20]	; (40606c <ethernetif_input+0xb0>)
  406056:	4798      	blx	r3
  406058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40605c:	40050000 	.word	0x40050000
  406060:	00405ec9 	.word	0x00405ec9
  406064:	aaaaaaab 	.word	0xaaaaaaab
  406068:	00401195 	.word	0x00401195
  40606c:	0040262d 	.word	0x0040262d

00406070 <ethernetif_init>:
 * \return ERR_OK if the loopif is initialized.
 * ERR_MEM if private data couldn't be allocated.
 * any other err_t on error.
 */
err_t ethernetif_init(struct netif *netif)
{
  406070:	b5f0      	push	{r4, r5, r6, r7, lr}
  406072:	b083      	sub	sp, #12
  406074:	4606      	mov	r6, r0
	LWIP_ASSERT("netif != NULL", (netif != NULL));

	gs_gmac_dev.netif = netif;
  406076:	4b7a      	ldr	r3, [pc, #488]	; (406260 <ethernetif_init+0x1f0>)
  406078:	f241 2210 	movw	r2, #4624	; 0x1210
  40607c:	5098      	str	r0, [r3, r2]
	 */
#if LWIP_SNMP
	NETIF_INIT_SNMP(netif, snmp_ifType_ethernet_csmacd, NET_LINK_SPEED);
#endif /* LWIP_SNMP */

	netif->state = &gs_gmac_dev;
  40607e:	6203      	str	r3, [r0, #32]
	netif->name[0] = IFNAME0;
  406080:	2365      	movs	r3, #101	; 0x65
  406082:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
	netif->name[1] = IFNAME1;
  406086:	236e      	movs	r3, #110	; 0x6e
  406088:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f

	/* We directly use etharp_output() here to save a function call.
	 * You can instead declare your own function an call etharp_output()
	 * from it if you have to do some checks before sending (e.g. if link
	 * is available...) */
	netif->output = etharp_output;
  40608c:	4b75      	ldr	r3, [pc, #468]	; (406264 <ethernetif_init+0x1f4>)
  40608e:	6143      	str	r3, [r0, #20]
	netif->linkoutput = gmac_low_level_output;
  406090:	4b75      	ldr	r3, [pc, #468]	; (406268 <ethernetif_init+0x1f8>)
  406092:	6183      	str	r3, [r0, #24]
	netif->hwaddr_len = sizeof(gs_uc_mac_address);
  406094:	2306      	movs	r3, #6
  406096:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
	netif->hwaddr[0] = gs_uc_mac_address[0];
  40609a:	2300      	movs	r3, #0
  40609c:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
	netif->hwaddr[1] = gs_uc_mac_address[1];
  4060a0:	2304      	movs	r3, #4
  4060a2:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	netif->hwaddr[2] = gs_uc_mac_address[2];
  4060a6:	2325      	movs	r3, #37	; 0x25
  4060a8:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
	netif->hwaddr[3] = gs_uc_mac_address[3];
  4060ac:	231c      	movs	r3, #28
  4060ae:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
	netif->hwaddr[4] = gs_uc_mac_address[4];
  4060b2:	23a0      	movs	r3, #160	; 0xa0
  4060b4:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
	netif->hwaddr[5] = gs_uc_mac_address[5];
  4060b8:	2302      	movs	r3, #2
  4060ba:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
	netif->mtu = NET_MTU;
  4060be:	f240 53dc 	movw	r3, #1500	; 0x5dc
  4060c2:	8483      	strh	r3, [r0, #36]	; 0x24
	netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP
  4060c4:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
  4060c8:	f043 0322 	orr.w	r3, r3, #34	; 0x22
  4060cc:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	ul_delay = sysclk_get_cpu_hz() / 1000 / 3 * 400;
  4060d0:	4b66      	ldr	r3, [pc, #408]	; (40626c <ethernetif_init+0x1fc>)
  4060d2:	9301      	str	r3, [sp, #4]
	while (ul_delay--) {
  4060d4:	9b01      	ldr	r3, [sp, #4]
  4060d6:	1e5a      	subs	r2, r3, #1
  4060d8:	9201      	str	r2, [sp, #4]
  4060da:	2b00      	cmp	r3, #0
  4060dc:	d1fa      	bne.n	4060d4 <ethernetif_init+0x64>
	pmc_enable_periph_clk(ID_GMAC);
  4060de:	2027      	movs	r0, #39	; 0x27
  4060e0:	4b63      	ldr	r3, [pc, #396]	; (406270 <ethernetif_init+0x200>)
  4060e2:	4798      	blx	r3
	p_gmac->GMAC_NCR = ul_ncr;
  4060e4:	4c63      	ldr	r4, [pc, #396]	; (406274 <ethernetif_init+0x204>)
  4060e6:	2700      	movs	r7, #0
  4060e8:	6027      	str	r7, [r4, #0]
	p_gmac->GMAC_IDR = ul_source;
  4060ea:	f04f 32ff 	mov.w	r2, #4294967295
  4060ee:	62e2      	str	r2, [r4, #44]	; 0x2c
	p_gmac->GMAC_NCR |= GMAC_NCR_CLRSTAT;
  4060f0:	6823      	ldr	r3, [r4, #0]
  4060f2:	f043 0320 	orr.w	r3, r3, #32
  4060f6:	6023      	str	r3, [r4, #0]
	p_gmac->GMAC_RSR = ul_status;
  4060f8:	230f      	movs	r3, #15
  4060fa:	6223      	str	r3, [r4, #32]
	p_gmac->GMAC_TSR = ul_status;
  4060fc:	f240 133f 	movw	r3, #319	; 0x13f
  406100:	6163      	str	r3, [r4, #20]
	return p_gmac->GMAC_ISR;
  406102:	6a63      	ldr	r3, [r4, #36]	; 0x24
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_CAF;
  406104:	6863      	ldr	r3, [r4, #4]
  406106:	f023 0310 	bic.w	r3, r3, #16
  40610a:	6063      	str	r3, [r4, #4]
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_NBC;
  40610c:	6863      	ldr	r3, [r4, #4]
  40610e:	f023 0320 	bic.w	r3, r3, #32
  406112:	6063      	str	r3, [r4, #4]
	p_gmac->GMAC_DCFGR = (p_gmac->GMAC_DCFGR & ~GMAC_DCFGR_DRBS_Msk)
  406114:	6923      	ldr	r3, [r4, #16]
  406116:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
			| GMAC_DCFGR_DRBS(ul_code);
  40611a:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
	p_gmac->GMAC_DCFGR = (p_gmac->GMAC_DCFGR & ~GMAC_DCFGR_DRBS_Msk)
  40611e:	6123      	str	r3, [r4, #16]
 *
 * \return Interrupt status.
 */
static inline uint32_t gmac_get_priority_interrupt_status(Gmac* p_gmac, gmac_quelist_t queue_idx)
{
	return p_gmac->GMAC_ISRPQ[queue_idx - 1];
  406120:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
  406124:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
  406128:	f8d4 3408 	ldr.w	r3, [r4, #1032]	; 0x408
  40612c:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
  406130:	f8d4 3410 	ldr.w	r3, [r4, #1040]	; 0x410
	gs_tx_desc_null.addr = (uint32_t)0xFFFFFFFF;
  406134:	4b50      	ldr	r3, [pc, #320]	; (406278 <ethernetif_init+0x208>)
  406136:	601a      	str	r2, [r3, #0]
	gs_tx_desc_null.status.val = GMAC_TXD_WRAP | GMAC_TXD_USED;
  406138:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
  40613c:	605a      	str	r2, [r3, #4]
 * \param p_gmac   Pointer to the GMAC instance.
 * \param queue_idx   Index of queue, start from 1
 */
static inline void gmac_set_tx_priority_queue(Gmac* p_gmac, uint32_t ul_addr, gmac_quelist_t queue_idx)
{
    p_gmac->GMAC_TBQBAPQ[queue_idx - 1] = GMAC_TBQB_ADDR_Msk & ul_addr;
  40613e:	f023 0303 	bic.w	r3, r3, #3
  406142:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  406146:	f8c4 3444 	str.w	r3, [r4, #1092]	; 0x444
  40614a:	f8c4 3448 	str.w	r3, [r4, #1096]	; 0x448
  40614e:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
  406152:	f8c4 3450 	str.w	r3, [r4, #1104]	; 0x450
	gs_rx_desc_null.addr.val |= GMAC_RXD_WRAP;
  406156:	4b49      	ldr	r3, [pc, #292]	; (40627c <ethernetif_init+0x20c>)
  406158:	f06f 0201 	mvn.w	r2, #1
  40615c:	601a      	str	r2, [r3, #0]
	gs_rx_desc_null.status.val = 0;
  40615e:	605f      	str	r7, [r3, #4]
 * \param p_gmac   Pointer to the GMAC instance.
 * \param queue_idx   Index of queue, start from 1
 */
static inline void gmac_set_rx_priority_queue(Gmac* p_gmac, uint32_t ul_addr, gmac_quelist_t queue_idx)
{
    p_gmac->GMAC_RBQBAPQ[queue_idx - 1] = GMAC_RBQB_ADDR_Msk & ul_addr;
  406160:	f023 0303 	bic.w	r3, r3, #3
  406164:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
  406168:	f8c4 3484 	str.w	r3, [r4, #1156]	; 0x484
  40616c:	f8c4 3488 	str.w	r3, [r4, #1160]	; 0x488
  406170:	f8c4 348c 	str.w	r3, [r4, #1164]	; 0x48c
  406174:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
	ps_gmac_dev->us_rx_idx = 0;
  406178:	4d39      	ldr	r5, [pc, #228]	; (406260 <ethernetif_init+0x1f0>)
  40617a:	f241 2308 	movw	r3, #4616	; 0x1208
  40617e:	50ef      	str	r7, [r5, r3]
		ps_gmac_dev->rx_pbuf[ul_index] = 0;
  406180:	632f      	str	r7, [r5, #48]	; 0x30
		ps_gmac_dev->rx_desc[ul_index].addr.val = 0;
  406182:	602f      	str	r7, [r5, #0]
		ps_gmac_dev->rx_desc[ul_index].status.val = 0;
  406184:	606f      	str	r7, [r5, #4]
		ps_gmac_dev->rx_pbuf[ul_index] = 0;
  406186:	636f      	str	r7, [r5, #52]	; 0x34
		ps_gmac_dev->rx_desc[ul_index].addr.val = 0;
  406188:	60af      	str	r7, [r5, #8]
		ps_gmac_dev->rx_desc[ul_index].status.val = 0;
  40618a:	60ef      	str	r7, [r5, #12]
		ps_gmac_dev->rx_pbuf[ul_index] = 0;
  40618c:	63af      	str	r7, [r5, #56]	; 0x38
		ps_gmac_dev->rx_desc[ul_index].status.val = 0;
  40618e:	616f      	str	r7, [r5, #20]
	ps_gmac_dev->rx_desc[ul_index - 1].addr.val |= GMAC_RXD_WRAP;
  406190:	2302      	movs	r3, #2
  406192:	612b      	str	r3, [r5, #16]
	gmac_rx_populate_queue(ps_gmac_dev);
  406194:	4628      	mov	r0, r5
  406196:	4b3a      	ldr	r3, [pc, #232]	; (406280 <ethernetif_init+0x210>)
  406198:	4798      	blx	r3
	p_gmac->GMAC_RBQB = GMAC_RBQB_ADDR_Msk & ul_addr;
  40619a:	f025 0303 	bic.w	r3, r5, #3
  40619e:	61a3      	str	r3, [r4, #24]
	ps_gmac_dev->us_tx_idx = 0;
  4061a0:	f241 230c 	movw	r3, #4620	; 0x120c
  4061a4:	50ef      	str	r7, [r5, r3]
		ps_gmac_dev->tx_desc[ul_index].addr = (uint32_t)&ps_gmac_dev->tx_buf[ul_index][0];
  4061a6:	f105 033c 	add.w	r3, r5, #60	; 0x3c
  4061aa:	61ab      	str	r3, [r5, #24]
		ps_gmac_dev->tx_desc[ul_index].status.val = GMAC_TXD_USED | GMAC_TXD_LAST;
  4061ac:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
  4061b0:	61eb      	str	r3, [r5, #28]
		ps_gmac_dev->tx_desc[ul_index].addr = (uint32_t)&ps_gmac_dev->tx_buf[ul_index][0];
  4061b2:	f205 622a 	addw	r2, r5, #1578	; 0x62a
  4061b6:	622a      	str	r2, [r5, #32]
		ps_gmac_dev->tx_desc[ul_index].status.val = GMAC_TXD_USED | GMAC_TXD_LAST;
  4061b8:	626b      	str	r3, [r5, #36]	; 0x24
		ps_gmac_dev->tx_desc[ul_index].addr = (uint32_t)&ps_gmac_dev->tx_buf[ul_index][0];
  4061ba:	f605 4318 	addw	r3, r5, #3096	; 0xc18
  4061be:	62ab      	str	r3, [r5, #40]	; 0x28
	ps_gmac_dev->tx_desc[ul_index - 1].status.val |= GMAC_TXD_WRAP;
  4061c0:	4b30      	ldr	r3, [pc, #192]	; (406284 <ethernetif_init+0x214>)
  4061c2:	62eb      	str	r3, [r5, #44]	; 0x2c
	gmac_set_tx_queue(GMAC, (uint32_t) &ps_gmac_dev->tx_desc[0]);
  4061c4:	3518      	adds	r5, #24
	p_gmac->GMAC_TBQB = GMAC_TBQB_ADDR_Msk & ul_addr;
  4061c6:	f025 0503 	bic.w	r5, r5, #3
  4061ca:	61e5      	str	r5, [r4, #28]
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
  4061cc:	6823      	ldr	r3, [r4, #0]
  4061ce:	f043 0308 	orr.w	r3, r3, #8
  4061d2:	6023      	str	r3, [r4, #0]
		p_gmac->GMAC_NCR |= GMAC_NCR_RXEN;
  4061d4:	6823      	ldr	r3, [r4, #0]
  4061d6:	f043 0304 	orr.w	r3, r3, #4
  4061da:	6023      	str	r3, [r4, #0]
		p_gmac->GMAC_NCR |= GMAC_NCR_WESTAT;
  4061dc:	6823      	ldr	r3, [r4, #0]
  4061de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4061e2:	6023      	str	r3, [r4, #0]
	p_gmac->GMAC_IER = ul_source;
  4061e4:	62a7      	str	r7, [r4, #40]	; 0x28
	p_gmac->GMAC_SA[uc_index].GMAC_SAB = (p_mac_addr[3] << 24)
  4061e6:	f896 202a 	ldrb.w	r2, [r6, #42]	; 0x2a
			| (p_mac_addr[2] << 16)
  4061ea:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
  4061ee:	041b      	lsls	r3, r3, #16
  4061f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
			| (p_mac_addr[0]);
  4061f4:	f896 2027 	ldrb.w	r2, [r6, #39]	; 0x27
  4061f8:	4313      	orrs	r3, r2
			| (p_mac_addr[1] << 8)
  4061fa:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
			| (p_mac_addr[0]);
  4061fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	p_gmac->GMAC_SA[uc_index].GMAC_SAB = (p_mac_addr[3] << 24)
  406202:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	p_gmac->GMAC_SA[uc_index].GMAC_SAT = (p_mac_addr[5] << 8)
  406206:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
			| (p_mac_addr[4]);
  40620a:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
  40620e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	p_gmac->GMAC_SA[uc_index].GMAC_SAT = (p_mac_addr[5] << 8)
  406212:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  406216:	4b1c      	ldr	r3, [pc, #112]	; (406288 <ethernetif_init+0x218>)
  406218:	f883 7327 	strb.w	r7, [r3, #807]	; 0x327
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40621c:	2280      	movs	r2, #128	; 0x80
  40621e:	605a      	str	r2, [r3, #4]
	if (ethernet_phy_init(GMAC, BOARD_GMAC_PHY_ADDR, sysclk_get_cpu_hz()) != GMAC_OK) {
  406220:	f102 620f 	add.w	r2, r2, #149946368	; 0x8f00000
  406224:	f502 4251 	add.w	r2, r2, #53504	; 0xd100
  406228:	4639      	mov	r1, r7
  40622a:	4620      	mov	r0, r4
  40622c:	4b17      	ldr	r3, [pc, #92]	; (40628c <ethernetif_init+0x21c>)
  40622e:	4798      	blx	r3
  406230:	b110      	cbz	r0, 406238 <ethernetif_init+0x1c8>
	if (id == 0)
		return ERR_MEM;
#endif

	return ERR_OK;
}
  406232:	2000      	movs	r0, #0
  406234:	b003      	add	sp, #12
  406236:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (ethernet_phy_auto_negotiate(GMAC, BOARD_GMAC_PHY_ADDR) != GMAC_OK) {
  406238:	4639      	mov	r1, r7
  40623a:	4620      	mov	r0, r4
  40623c:	4b14      	ldr	r3, [pc, #80]	; (406290 <ethernetif_init+0x220>)
  40623e:	4798      	blx	r3
  406240:	2800      	cmp	r0, #0
  406242:	d1f6      	bne.n	406232 <ethernetif_init+0x1c2>
	while (ethernet_phy_set_link(GMAC, BOARD_GMAC_PHY_ADDR, 1) != GMAC_OK) {
  406244:	2201      	movs	r2, #1
  406246:	4639      	mov	r1, r7
  406248:	4620      	mov	r0, r4
  40624a:	4b12      	ldr	r3, [pc, #72]	; (406294 <ethernetif_init+0x224>)
  40624c:	4798      	blx	r3
  40624e:	2800      	cmp	r0, #0
  406250:	d1ef      	bne.n	406232 <ethernetif_init+0x1c2>
	netif->flags |= NETIF_FLAG_LINK_UP;
  406252:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
  406256:	f043 0310 	orr.w	r3, r3, #16
  40625a:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
  40625e:	e7e8      	b.n	406232 <ethernetif_init+0x1c2>
  406260:	204026b8 	.word	0x204026b8
  406264:	00405ba1 	.word	0x00405ba1
  406268:	00405f29 	.word	0x00405f29
  40626c:	01312d00 	.word	0x01312d00
  406270:	00400ce9 	.word	0x00400ce9
  406274:	40050000 	.word	0x40050000
  406278:	204038d8 	.word	0x204038d8
  40627c:	204038d0 	.word	0x204038d0
  406280:	00405ec9 	.word	0x00405ec9
  406284:	c0008000 	.word	0xc0008000
  406288:	e000e100 	.word	0xe000e100
  40628c:	004006d5 	.word	0x004006d5
  406290:	004004d9 	.word	0x004004d9
  406294:	004003e5 	.word	0x004003e5

00406298 <status_callback>:
 * is up.
 *
 * \param netif The network interface instance.
 */
void status_callback(struct netif *netif)
{
  406298:	b500      	push	{lr}
  40629a:	b087      	sub	sp, #28
	int8_t c_mess[20];
	if (netif_is_up(netif)) {
  40629c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
  4062a0:	f013 0f01 	tst.w	r3, #1
  4062a4:	d105      	bne.n	4062b2 <status_callback+0x1a>
		strcpy((char*)c_mess, "IP=");
		strcat((char*)c_mess, inet_ntoa(*(struct in_addr *)&(netif->ip_addr)));
		printf("Network up %s\r\n", (char const*)c_mess);
	} else {
		printf("Network down\r\n");
  4062a6:	480a      	ldr	r0, [pc, #40]	; (4062d0 <status_callback+0x38>)
  4062a8:	4b0a      	ldr	r3, [pc, #40]	; (4062d4 <status_callback+0x3c>)
  4062aa:	4798      	blx	r3
	}
}
  4062ac:	b007      	add	sp, #28
  4062ae:	f85d fb04 	ldr.w	pc, [sp], #4
		strcpy((char*)c_mess, "IP=");
  4062b2:	4b09      	ldr	r3, [pc, #36]	; (4062d8 <status_callback+0x40>)
  4062b4:	9301      	str	r3, [sp, #4]
		strcat((char*)c_mess, inet_ntoa(*(struct in_addr *)&(netif->ip_addr)));
  4062b6:	3004      	adds	r0, #4
  4062b8:	4b08      	ldr	r3, [pc, #32]	; (4062dc <status_callback+0x44>)
  4062ba:	4798      	blx	r3
  4062bc:	4601      	mov	r1, r0
  4062be:	a801      	add	r0, sp, #4
  4062c0:	4b07      	ldr	r3, [pc, #28]	; (4062e0 <status_callback+0x48>)
  4062c2:	4798      	blx	r3
		printf("Network up %s\r\n", (char const*)c_mess);
  4062c4:	a901      	add	r1, sp, #4
  4062c6:	4807      	ldr	r0, [pc, #28]	; (4062e4 <status_callback+0x4c>)
  4062c8:	4b02      	ldr	r3, [pc, #8]	; (4062d4 <status_callback+0x3c>)
  4062ca:	4798      	blx	r3
  4062cc:	e7ee      	b.n	4062ac <status_callback+0x14>
  4062ce:	bf00      	nop
  4062d0:	0040d89c 	.word	0x0040d89c
  4062d4:	0040720d 	.word	0x0040720d
  4062d8:	003d5049 	.word	0x003d5049
  4062dc:	004019a1 	.word	0x004019a1
  4062e0:	00407651 	.word	0x00407651
  4062e4:	0040d88c 	.word	0x0040d88c

004062e8 <init_ethernet>:
{
  4062e8:	b570      	push	{r4, r5, r6, lr}
  4062ea:	b088      	sub	sp, #32
	lwip_init();
  4062ec:	4b15      	ldr	r3, [pc, #84]	; (406344 <init_ethernet+0x5c>)
  4062ee:	4798      	blx	r3
	printf("----lwIP initialized\r\n");
  4062f0:	4815      	ldr	r0, [pc, #84]	; (406348 <init_ethernet+0x60>)
  4062f2:	4d16      	ldr	r5, [pc, #88]	; (40634c <init_ethernet+0x64>)
  4062f4:	47a8      	blx	r5
	IP4_ADDR(&x_ip_addr, ETHERNET_CONF_IPADDR0, ETHERNET_CONF_IPADDR1,
  4062f6:	4b16      	ldr	r3, [pc, #88]	; (406350 <init_ethernet+0x68>)
  4062f8:	9305      	str	r3, [sp, #20]
	IP4_ADDR(&x_net_mask, ETHERNET_CONF_NET_MASK0, ETHERNET_CONF_NET_MASK1,
  4062fa:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
  4062fe:	9306      	str	r3, [sp, #24]
	IP4_ADDR(&x_gateway, ETHERNET_CONF_GATEWAY_ADDR0,
  406300:	ab08      	add	r3, sp, #32
  406302:	4a14      	ldr	r2, [pc, #80]	; (406354 <init_ethernet+0x6c>)
  406304:	f843 2d04 	str.w	r2, [r3, #-4]!
	if (NULL == netif_add(&gs_net_if, &x_ip_addr, &x_net_mask, &x_gateway, NULL,
  406308:	4c13      	ldr	r4, [pc, #76]	; (406358 <init_ethernet+0x70>)
  40630a:	4a14      	ldr	r2, [pc, #80]	; (40635c <init_ethernet+0x74>)
  40630c:	9202      	str	r2, [sp, #8]
  40630e:	4a14      	ldr	r2, [pc, #80]	; (406360 <init_ethernet+0x78>)
  406310:	9201      	str	r2, [sp, #4]
  406312:	2200      	movs	r2, #0
  406314:	9200      	str	r2, [sp, #0]
  406316:	aa06      	add	r2, sp, #24
  406318:	a905      	add	r1, sp, #20
  40631a:	4620      	mov	r0, r4
  40631c:	4e11      	ldr	r6, [pc, #68]	; (406364 <init_ethernet+0x7c>)
  40631e:	47b0      	blx	r6
	netif_set_default(&gs_net_if);
  406320:	4620      	mov	r0, r4
  406322:	4b11      	ldr	r3, [pc, #68]	; (406368 <init_ethernet+0x80>)
  406324:	4798      	blx	r3
	netif_set_status_callback(&gs_net_if, status_callback);
  406326:	4911      	ldr	r1, [pc, #68]	; (40636c <init_ethernet+0x84>)
  406328:	4620      	mov	r0, r4
  40632a:	4b11      	ldr	r3, [pc, #68]	; (406370 <init_ethernet+0x88>)
  40632c:	4798      	blx	r3
	netif_set_up(&gs_net_if);
  40632e:	4620      	mov	r0, r4
  406330:	4b10      	ldr	r3, [pc, #64]	; (406374 <init_ethernet+0x8c>)
  406332:	4798      	blx	r3
	printf("Static IP Address Assigned\r\n");
  406334:	4810      	ldr	r0, [pc, #64]	; (406378 <init_ethernet+0x90>)
  406336:	47a8      	blx	r5
	printf("----Ethernet interface configured\r\n");
  406338:	4810      	ldr	r0, [pc, #64]	; (40637c <init_ethernet+0x94>)
  40633a:	47a8      	blx	r5
	sys_init_timing();
  40633c:	4b10      	ldr	r3, [pc, #64]	; (406380 <init_ethernet+0x98>)
  40633e:	4798      	blx	r3
}
  406340:	b008      	add	sp, #32
  406342:	bd70      	pop	{r4, r5, r6, pc}
  406344:	00401fad 	.word	0x00401fad
  406348:	0040d830 	.word	0x0040d830
  40634c:	0040720d 	.word	0x0040720d
  406350:	6400a8c0 	.word	0x6400a8c0
  406354:	fa00a8c0 	.word	0xfa00a8c0
  406358:	20404984 	.word	0x20404984
  40635c:	00405cc5 	.word	0x00405cc5
  406360:	00406071 	.word	0x00406071
  406364:	00402521 	.word	0x00402521
  406368:	00402571 	.word	0x00402571
  40636c:	00406299 	.word	0x00406299
  406370:	004025b9 	.word	0x004025b9
  406374:	0040257d 	.word	0x0040257d
  406378:	0040d848 	.word	0x0040d848
  40637c:	0040d868 	.word	0x0040d868
  406380:	00406725 	.word	0x00406725

00406384 <ethernet_task>:

/**
 * \brief Process incoming ethernet frames, then update timers.
 */
void ethernet_task(void)
{
  406384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Poll the network interface driver for incoming ethernet frames. */
	ethernetif_input(&gs_net_if);
  406386:	4814      	ldr	r0, [pc, #80]	; (4063d8 <ethernet_task+0x54>)
  406388:	4b14      	ldr	r3, [pc, #80]	; (4063dc <ethernet_task+0x58>)
  40638a:	4798      	blx	r3
	ul_cur_time = sys_get_ms();
  40638c:	4b14      	ldr	r3, [pc, #80]	; (4063e0 <ethernet_task+0x5c>)
  40638e:	4798      	blx	r3
	if (ul_cur_time >= ul_last_time) {
  406390:	4b14      	ldr	r3, [pc, #80]	; (4063e4 <ethernet_task+0x60>)
  406392:	681d      	ldr	r5, [r3, #0]
  406394:	42a8      	cmp	r0, r5
  406396:	d307      	bcc.n	4063a8 <ethernet_task+0x24>
		ul_time_diff = ul_cur_time - ul_last_time;
  406398:	1b45      	subs	r5, r0, r5
	if (ul_time_diff) {
  40639a:	b1dd      	cbz	r5, 4063d4 <ethernet_task+0x50>
		ul_last_time = ul_cur_time;
  40639c:	4b11      	ldr	r3, [pc, #68]	; (4063e4 <ethernet_task+0x60>)
  40639e:	6018      	str	r0, [r3, #0]
  4063a0:	4c11      	ldr	r4, [pc, #68]	; (4063e8 <ethernet_task+0x64>)
  4063a2:	f104 0724 	add.w	r7, r4, #36	; 0x24
  4063a6:	e009      	b.n	4063bc <ethernet_task+0x38>
		ul_time_diff = 0xFFFFFFFF - ul_last_time + ul_cur_time;
  4063a8:	43ed      	mvns	r5, r5
  4063aa:	4405      	add	r5, r0
  4063ac:	e7f5      	b.n	40639a <ethernet_task+0x16>
				p_tmr_inf->timer -= p_tmr_inf->timer_interval;
  4063ae:	6833      	ldr	r3, [r6, #0]
  4063b0:	6872      	ldr	r2, [r6, #4]
  4063b2:	1a9b      	subs	r3, r3, r2
  4063b4:	6033      	str	r3, [r6, #0]
  4063b6:	340c      	adds	r4, #12
		for (ul_idx_timer = 0;
  4063b8:	42bc      	cmp	r4, r7
  4063ba:	d00b      	beq.n	4063d4 <ethernet_task+0x50>
  4063bc:	4626      	mov	r6, r4
			p_tmr_inf->timer += ul_time_diff;
  4063be:	6823      	ldr	r3, [r4, #0]
  4063c0:	442b      	add	r3, r5
  4063c2:	6023      	str	r3, [r4, #0]
			if (p_tmr_inf->timer > p_tmr_inf->timer_interval) {
  4063c4:	6862      	ldr	r2, [r4, #4]
  4063c6:	4293      	cmp	r3, r2
  4063c8:	d9f5      	bls.n	4063b6 <ethernet_task+0x32>
				if (p_tmr_inf->timer_func) {
  4063ca:	68a3      	ldr	r3, [r4, #8]
  4063cc:	2b00      	cmp	r3, #0
  4063ce:	d0ee      	beq.n	4063ae <ethernet_task+0x2a>
					p_tmr_inf->timer_func();
  4063d0:	4798      	blx	r3
  4063d2:	e7ec      	b.n	4063ae <ethernet_task+0x2a>
  4063d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4063d6:	bf00      	nop
  4063d8:	20404984 	.word	0x20404984
  4063dc:	00405fbd 	.word	0x00405fbd
  4063e0:	004067b9 	.word	0x004067b9
  4063e4:	204038e0 	.word	0x204038e0
  4063e8:	20400010 	.word	0x20400010

004063ec <echo_accept>:
		printf("!!! TCP NEW ERROR !!!\r\n");	
	}
}

err_t echo_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
  4063ec:	b538      	push	{r3, r4, r5, lr}
  4063ee:	460c      	mov	r4, r1
	
	LWIP_UNUSED_ARG(arg);
	LWIP_UNUSED_ARG(err);
	
	/* commonly observed practice to call tcp_setprio(), why? */
	tcp_setprio(newpcb, TCP_PRIO_MIN);
  4063f0:	2101      	movs	r1, #1
  4063f2:	4620      	mov	r0, r4
  4063f4:	4b10      	ldr	r3, [pc, #64]	; (406438 <echo_accept+0x4c>)
  4063f6:	4798      	blx	r3
	
	es = (struct echo_state *)mem_malloc(sizeof(struct echo_state));
  4063f8:	200c      	movs	r0, #12
  4063fa:	4b10      	ldr	r3, [pc, #64]	; (40643c <echo_accept+0x50>)
  4063fc:	4798      	blx	r3
	if(es !=NULL)
  4063fe:	b1c0      	cbz	r0, 406432 <echo_accept+0x46>
  406400:	4601      	mov	r1, r0
	{
		es->state = ES_ACCEPTED;
  406402:	2301      	movs	r3, #1
  406404:	7003      	strb	r3, [r0, #0]
		es->pcb = newpcb;
  406406:	6044      	str	r4, [r0, #4]
		es->retries = 0;
  406408:	2500      	movs	r5, #0
  40640a:	7045      	strb	r5, [r0, #1]
		es->p = NULL;
  40640c:	6085      	str	r5, [r0, #8]
		/* pass newly allocated es to our callback */
		tcp_arg(newpcb, es);
  40640e:	4620      	mov	r0, r4
  406410:	4b0b      	ldr	r3, [pc, #44]	; (406440 <echo_accept+0x54>)
  406412:	4798      	blx	r3
		tcp_recv(newpcb, echo_recv);
  406414:	490b      	ldr	r1, [pc, #44]	; (406444 <echo_accept+0x58>)
  406416:	4620      	mov	r0, r4
  406418:	4b0b      	ldr	r3, [pc, #44]	; (406448 <echo_accept+0x5c>)
  40641a:	4798      	blx	r3
		tcp_err(newpcb, echo_error);
  40641c:	490b      	ldr	r1, [pc, #44]	; (40644c <echo_accept+0x60>)
  40641e:	4620      	mov	r0, r4
  406420:	4b0b      	ldr	r3, [pc, #44]	; (406450 <echo_accept+0x64>)
  406422:	4798      	blx	r3
		tcp_poll(newpcb, echo_poll, 0);
  406424:	462a      	mov	r2, r5
  406426:	490b      	ldr	r1, [pc, #44]	; (406454 <echo_accept+0x68>)
  406428:	4620      	mov	r0, r4
  40642a:	4b0b      	ldr	r3, [pc, #44]	; (406458 <echo_accept+0x6c>)
  40642c:	4798      	blx	r3
		ret_err = ERR_OK;
  40642e:	4628      	mov	r0, r5
  406430:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		ret_err = ERR_MEM;
  406432:	f04f 30ff 	mov.w	r0, #4294967295
	}
	return ret_err;
}
  406436:	bd38      	pop	{r3, r4, r5, pc}
  406438:	00402c25 	.word	0x00402c25
  40643c:	004022fd 	.word	0x004022fd
  406440:	00402c59 	.word	0x00402c59
  406444:	004065ad 	.word	0x004065ad
  406448:	00402c5d 	.word	0x00402c5d
  40644c:	0040645d 	.word	0x0040645d
  406450:	00402c67 	.word	0x00402c67
  406454:	0040666d 	.word	0x0040666d
  406458:	00402c71 	.word	0x00402c71

0040645c <echo_error>:
	struct echo_state *es;
	
	LWIP_UNUSED_ARG(err);
	
	es = (struct echo_state *)arg;
	if(es!=NULL)
  40645c:	b118      	cbz	r0, 406466 <echo_error+0xa>
{
  40645e:	b508      	push	{r3, lr}
	{
		mem_free(es);
  406460:	4b01      	ldr	r3, [pc, #4]	; (406468 <echo_error+0xc>)
  406462:	4798      	blx	r3
  406464:	bd08      	pop	{r3, pc}
  406466:	4770      	bx	lr
  406468:	00402195 	.word	0x00402195

0040646c <echo_init>:
{
  40646c:	b510      	push	{r4, lr}
	echo_pcb = tcp_new();
  40646e:	4b0e      	ldr	r3, [pc, #56]	; (4064a8 <echo_init+0x3c>)
  406470:	4798      	blx	r3
  406472:	4b0e      	ldr	r3, [pc, #56]	; (4064ac <echo_init+0x40>)
  406474:	6018      	str	r0, [r3, #0]
	if(echo_pcb != NULL)
  406476:	b190      	cbz	r0, 40649e <echo_init+0x32>
		err = tcp_bind(echo_pcb, IP_ADDR_ANY, 7);
  406478:	2207      	movs	r2, #7
  40647a:	490d      	ldr	r1, [pc, #52]	; (4064b0 <echo_init+0x44>)
  40647c:	4b0d      	ldr	r3, [pc, #52]	; (4064b4 <echo_init+0x48>)
  40647e:	4798      	blx	r3
		if(err==ERR_OK)
  406480:	b948      	cbnz	r0, 406496 <echo_init+0x2a>
			echo_pcb = tcp_listen(echo_pcb);
  406482:	4c0a      	ldr	r4, [pc, #40]	; (4064ac <echo_init+0x40>)
  406484:	21ff      	movs	r1, #255	; 0xff
  406486:	6820      	ldr	r0, [r4, #0]
  406488:	4b0b      	ldr	r3, [pc, #44]	; (4064b8 <echo_init+0x4c>)
  40648a:	4798      	blx	r3
  40648c:	6020      	str	r0, [r4, #0]
			tcp_accept(echo_pcb, echo_accept);
  40648e:	490b      	ldr	r1, [pc, #44]	; (4064bc <echo_init+0x50>)
  406490:	4b0b      	ldr	r3, [pc, #44]	; (4064c0 <echo_init+0x54>)
  406492:	4798      	blx	r3
  406494:	bd10      	pop	{r4, pc}
			printf("!!! TCP BIND ERROR !!!\r\n");
  406496:	480b      	ldr	r0, [pc, #44]	; (4064c4 <echo_init+0x58>)
  406498:	4b0b      	ldr	r3, [pc, #44]	; (4064c8 <echo_init+0x5c>)
  40649a:	4798      	blx	r3
  40649c:	bd10      	pop	{r4, pc}
		printf("!!! TCP NEW ERROR !!!\r\n");	
  40649e:	480b      	ldr	r0, [pc, #44]	; (4064cc <echo_init+0x60>)
  4064a0:	4b09      	ldr	r3, [pc, #36]	; (4064c8 <echo_init+0x5c>)
  4064a2:	4798      	blx	r3
  4064a4:	bd10      	pop	{r4, pc}
  4064a6:	bf00      	nop
  4064a8:	004035c9 	.word	0x004035c9
  4064ac:	204038e4 	.word	0x204038e4
  4064b0:	0040d7d4 	.word	0x0040d7d4
  4064b4:	00402a1d 	.word	0x00402a1d
  4064b8:	00402aa9 	.word	0x00402aa9
  4064bc:	004063ed 	.word	0x004063ed
  4064c0:	00402c6d 	.word	0x00402c6d
  4064c4:	0040d8ac 	.word	0x0040d8ac
  4064c8:	0040720d 	.word	0x0040720d
  4064cc:	0040d8c8 	.word	0x0040d8c8

004064d0 <echo_send>:
	}
	return ERR_OK;
}

void echo_send(struct tcp_pcb *tpcb, struct echo_state *es)
{
  4064d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct pbuf *ptr;
	err_t wr_err = ERR_OK;
	
	while ((wr_err==ERR_OK)&&
			(es->p !=NULL) &&
  4064d4:	688c      	ldr	r4, [r1, #8]
	while ((wr_err==ERR_OK)&&
  4064d6:	b36c      	cbz	r4, 406534 <echo_send+0x64>
			(es->p->len <= tcp_sndbuf(tpcb)))
  4064d8:	8962      	ldrh	r2, [r4, #10]
			(es->p !=NULL) &&
  4064da:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
  4064de:	4293      	cmp	r3, r2
  4064e0:	d328      	bcc.n	406534 <echo_send+0x64>
  4064e2:	460f      	mov	r7, r1
  4064e4:	4606      	mov	r6, r0
	{
		ptr = es->p;
		
		/* enqueue data for transmission */
		wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
  4064e6:	f8df 8060 	ldr.w	r8, [pc, #96]	; 406548 <echo_send+0x78>
			/* continue with next pbuf in chain (if any) */
			es->p = ptr->next;
			if(es->p !=NULL)
			{
				/* new reference! */
				pbuf_ref(es->p);
  4064ea:	f8df 9060 	ldr.w	r9, [pc, #96]	; 40654c <echo_send+0x7c>
			}
			/* chop first pbuf from chain */
			do{
				/*try hard to free pbuf */
				freed = pbuf_free(ptr);
  4064ee:	4d14      	ldr	r5, [pc, #80]	; (406540 <echo_send+0x70>)
  4064f0:	e00e      	b.n	406510 <echo_send+0x40>
  4064f2:	4620      	mov	r0, r4
  4064f4:	47a8      	blx	r5
			}
			while(freed == 0);
  4064f6:	2800      	cmp	r0, #0
  4064f8:	d0fb      	beq.n	4064f2 <echo_send+0x22>
			/* we can read more data now */
			tcp_recved(tpcb, plen);
  4064fa:	4651      	mov	r1, sl
  4064fc:	4630      	mov	r0, r6
  4064fe:	4b11      	ldr	r3, [pc, #68]	; (406544 <echo_send+0x74>)
  406500:	4798      	blx	r3
			(es->p !=NULL) &&
  406502:	68bc      	ldr	r4, [r7, #8]
	while ((wr_err==ERR_OK)&&
  406504:	b18c      	cbz	r4, 40652a <echo_send+0x5a>
			(es->p->len <= tcp_sndbuf(tpcb)))
  406506:	8962      	ldrh	r2, [r4, #10]
			(es->p !=NULL) &&
  406508:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
  40650c:	4293      	cmp	r3, r2
  40650e:	d311      	bcc.n	406534 <echo_send+0x64>
		wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
  406510:	2301      	movs	r3, #1
  406512:	6861      	ldr	r1, [r4, #4]
  406514:	4630      	mov	r0, r6
  406516:	47c0      	blx	r8
		if(wr_err ==ERR_OK)
  406518:	b948      	cbnz	r0, 40652e <echo_send+0x5e>
			plen = ptr->len;
  40651a:	f8b4 a00a 	ldrh.w	sl, [r4, #10]
			es->p = ptr->next;
  40651e:	6820      	ldr	r0, [r4, #0]
  406520:	60b8      	str	r0, [r7, #8]
			if(es->p !=NULL)
  406522:	2800      	cmp	r0, #0
  406524:	d0e5      	beq.n	4064f2 <echo_send+0x22>
				pbuf_ref(es->p);
  406526:	47c8      	blx	r9
  406528:	e7e3      	b.n	4064f2 <echo_send+0x22>
  40652a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		else if(wr_err==ERR_MEM)
  40652e:	f1b0 3fff 	cmp.w	r0, #4294967295
  406532:	d001      	beq.n	406538 <echo_send+0x68>
  406534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		{
			/* we are low on memory, try later/harder, defer to poll */
			es->p = ptr;
  406538:	60bc      	str	r4, [r7, #8]
  40653a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40653e:	bf00      	nop
  406540:	0040262d 	.word	0x0040262d
  406544:	00402ba1 	.word	0x00402ba1
  406548:	00404ba9 	.word	0x00404ba9
  40654c:	00402843 	.word	0x00402843

00406550 <echo_close>:
		}
	}
}

void echo_close(struct tcp_pcb *tpcb, struct echo_state *es)
{
  406550:	b538      	push	{r3, r4, r5, lr}
  406552:	4604      	mov	r4, r0
  406554:	460d      	mov	r5, r1
	tcp_arg(tpcb, NULL);
  406556:	2100      	movs	r1, #0
  406558:	4b0d      	ldr	r3, [pc, #52]	; (406590 <echo_close+0x40>)
  40655a:	4798      	blx	r3
	tcp_sent(tpcb, NULL);
  40655c:	2100      	movs	r1, #0
  40655e:	4620      	mov	r0, r4
  406560:	4b0c      	ldr	r3, [pc, #48]	; (406594 <echo_close+0x44>)
  406562:	4798      	blx	r3
	tcp_recv(tpcb, NULL);
  406564:	2100      	movs	r1, #0
  406566:	4620      	mov	r0, r4
  406568:	4b0b      	ldr	r3, [pc, #44]	; (406598 <echo_close+0x48>)
  40656a:	4798      	blx	r3
	tcp_err(tpcb, NULL);
  40656c:	2100      	movs	r1, #0
  40656e:	4620      	mov	r0, r4
  406570:	4b0a      	ldr	r3, [pc, #40]	; (40659c <echo_close+0x4c>)
  406572:	4798      	blx	r3
	tcp_poll(tpcb, NULL, 0);
  406574:	2200      	movs	r2, #0
  406576:	4611      	mov	r1, r2
  406578:	4620      	mov	r0, r4
  40657a:	4b09      	ldr	r3, [pc, #36]	; (4065a0 <echo_close+0x50>)
  40657c:	4798      	blx	r3
	
	if(es != NULL)
  40657e:	b115      	cbz	r5, 406586 <echo_close+0x36>
	{
		mem_free(es);
  406580:	4628      	mov	r0, r5
  406582:	4b08      	ldr	r3, [pc, #32]	; (4065a4 <echo_close+0x54>)
  406584:	4798      	blx	r3
	}
	tcp_close(tpcb);
  406586:	4620      	mov	r0, r4
  406588:	4b07      	ldr	r3, [pc, #28]	; (4065a8 <echo_close+0x58>)
  40658a:	4798      	blx	r3
  40658c:	bd38      	pop	{r3, r4, r5, pc}
  40658e:	bf00      	nop
  406590:	00402c59 	.word	0x00402c59
  406594:	00402c63 	.word	0x00402c63
  406598:	00402c5d 	.word	0x00402c5d
  40659c:	00402c67 	.word	0x00402c67
  4065a0:	00402c71 	.word	0x00402c71
  4065a4:	00402195 	.word	0x00402195
  4065a8:	00403275 	.word	0x00403275

004065ac <echo_recv>:
{
  4065ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4065ae:	4605      	mov	r5, r0
  4065b0:	460f      	mov	r7, r1
	if (p == NULL)
  4065b2:	b192      	cbz	r2, 4065da <echo_recv+0x2e>
  4065b4:	461c      	mov	r4, r3
  4065b6:	4616      	mov	r6, r2
	else if(err != ERR_OK)
  4065b8:	bb1b      	cbnz	r3, 406602 <echo_recv+0x56>
	else if(es->state == ES_ACCEPTED)
  4065ba:	7803      	ldrb	r3, [r0, #0]
  4065bc:	2b01      	cmp	r3, #1
  4065be:	d027      	beq.n	406610 <echo_recv+0x64>
	else if(es->state == ES_RECEIVED)
  4065c0:	2b02      	cmp	r3, #2
  4065c2:	d032      	beq.n	40662a <echo_recv+0x7e>
		tcp_recved(tpcb, p->tot_len);
  4065c4:	8911      	ldrh	r1, [r2, #8]
  4065c6:	4638      	mov	r0, r7
  4065c8:	4b21      	ldr	r3, [pc, #132]	; (406650 <echo_recv+0xa4>)
  4065ca:	4798      	blx	r3
		es->p = NULL;
  4065cc:	2300      	movs	r3, #0
  4065ce:	60ab      	str	r3, [r5, #8]
		pbuf_free(p);
  4065d0:	4630      	mov	r0, r6
  4065d2:	4b20      	ldr	r3, [pc, #128]	; (406654 <echo_recv+0xa8>)
  4065d4:	4798      	blx	r3
		ret_err = ERR_OK;
  4065d6:	4620      	mov	r0, r4
}
  4065d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		es->state = ES_CLOSING;
  4065da:	2303      	movs	r3, #3
  4065dc:	7003      	strb	r3, [r0, #0]
		if(es->p==NULL)
  4065de:	6883      	ldr	r3, [r0, #8]
  4065e0:	b14b      	cbz	r3, 4065f6 <echo_recv+0x4a>
			tcp_sent(tpcb, echo_sent);
  4065e2:	491d      	ldr	r1, [pc, #116]	; (406658 <echo_recv+0xac>)
  4065e4:	4638      	mov	r0, r7
  4065e6:	4b1d      	ldr	r3, [pc, #116]	; (40665c <echo_recv+0xb0>)
  4065e8:	4798      	blx	r3
			echo_send(tpcb, es);
  4065ea:	4629      	mov	r1, r5
  4065ec:	4638      	mov	r0, r7
  4065ee:	4b1c      	ldr	r3, [pc, #112]	; (406660 <echo_recv+0xb4>)
  4065f0:	4798      	blx	r3
		ret_err = ERR_OK;
  4065f2:	2000      	movs	r0, #0
  4065f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			echo_close(tpcb,es);
  4065f6:	4601      	mov	r1, r0
  4065f8:	4638      	mov	r0, r7
  4065fa:	4b1a      	ldr	r3, [pc, #104]	; (406664 <echo_recv+0xb8>)
  4065fc:	4798      	blx	r3
		ret_err = ERR_OK;
  4065fe:	2000      	movs	r0, #0
  406600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			es->p = NULL;
  406602:	2300      	movs	r3, #0
  406604:	6083      	str	r3, [r0, #8]
			pbuf_free(p);
  406606:	4610      	mov	r0, r2
  406608:	4b12      	ldr	r3, [pc, #72]	; (406654 <echo_recv+0xa8>)
  40660a:	4798      	blx	r3
		ret_err = err;
  40660c:	4620      	mov	r0, r4
  40660e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		es->state = ES_RECEIVED;
  406610:	2302      	movs	r3, #2
  406612:	7003      	strb	r3, [r0, #0]
		es->p = p;
  406614:	60aa      	str	r2, [r5, #8]
		tcp_sent(tpcb, echo_sent);
  406616:	4910      	ldr	r1, [pc, #64]	; (406658 <echo_recv+0xac>)
  406618:	4638      	mov	r0, r7
  40661a:	4b10      	ldr	r3, [pc, #64]	; (40665c <echo_recv+0xb0>)
  40661c:	4798      	blx	r3
		echo_send(tpcb, es);
  40661e:	4629      	mov	r1, r5
  406620:	4638      	mov	r0, r7
  406622:	4b0f      	ldr	r3, [pc, #60]	; (406660 <echo_recv+0xb4>)
  406624:	4798      	blx	r3
		ret_err = ERR_OK;
  406626:	4620      	mov	r0, r4
  406628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(es->p == NULL)
  40662a:	6880      	ldr	r0, [r0, #8]
  40662c:	b120      	cbz	r0, 406638 <echo_recv+0x8c>
			pbuf_chain(ptr, p);
  40662e:	4611      	mov	r1, r2
  406630:	4b0d      	ldr	r3, [pc, #52]	; (406668 <echo_recv+0xbc>)
  406632:	4798      	blx	r3
		ret_err = ERR_OK;
  406634:	4620      	mov	r0, r4
  406636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			es->p = p;
  406638:	60aa      	str	r2, [r5, #8]
			tcp_sent(tpcb, echo_sent);
  40663a:	4907      	ldr	r1, [pc, #28]	; (406658 <echo_recv+0xac>)
  40663c:	4638      	mov	r0, r7
  40663e:	4b07      	ldr	r3, [pc, #28]	; (40665c <echo_recv+0xb0>)
  406640:	4798      	blx	r3
			echo_send(tpcb, es);
  406642:	4629      	mov	r1, r5
  406644:	4638      	mov	r0, r7
  406646:	4b06      	ldr	r3, [pc, #24]	; (406660 <echo_recv+0xb4>)
  406648:	4798      	blx	r3
		ret_err = ERR_OK;
  40664a:	4620      	mov	r0, r4
  40664c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40664e:	bf00      	nop
  406650:	00402ba1 	.word	0x00402ba1
  406654:	0040262d 	.word	0x0040262d
  406658:	004066c5 	.word	0x004066c5
  40665c:	00402c63 	.word	0x00402c63
  406660:	004064d1 	.word	0x004064d1
  406664:	00406551 	.word	0x00406551
  406668:	00402881 	.word	0x00402881

0040666c <echo_poll>:
{
  40666c:	b538      	push	{r3, r4, r5, lr}
  40666e:	460d      	mov	r5, r1
	if(es!=NULL)
  406670:	b1b8      	cbz	r0, 4066a2 <echo_poll+0x36>
  406672:	4604      	mov	r4, r0
		if(es->p!=NULL)
  406674:	6883      	ldr	r3, [r0, #8]
  406676:	b14b      	cbz	r3, 40668c <echo_poll+0x20>
			tcp_sent(tpcb, echo_sent);
  406678:	490d      	ldr	r1, [pc, #52]	; (4066b0 <echo_poll+0x44>)
  40667a:	4628      	mov	r0, r5
  40667c:	4b0d      	ldr	r3, [pc, #52]	; (4066b4 <echo_poll+0x48>)
  40667e:	4798      	blx	r3
			echo_send(tpcb, es);
  406680:	4621      	mov	r1, r4
  406682:	4628      	mov	r0, r5
  406684:	4b0c      	ldr	r3, [pc, #48]	; (4066b8 <echo_poll+0x4c>)
  406686:	4798      	blx	r3
		ret_err = ERR_OK;
  406688:	2000      	movs	r0, #0
  40668a:	bd38      	pop	{r3, r4, r5, pc}
			if(es->state == ES_CLOSING)
  40668c:	7803      	ldrb	r3, [r0, #0]
  40668e:	2b03      	cmp	r3, #3
  406690:	d001      	beq.n	406696 <echo_poll+0x2a>
		ret_err = ERR_OK;
  406692:	2000      	movs	r0, #0
}
  406694:	bd38      	pop	{r3, r4, r5, pc}
				echo_close(tpcb, es);
  406696:	4601      	mov	r1, r0
  406698:	4628      	mov	r0, r5
  40669a:	4b08      	ldr	r3, [pc, #32]	; (4066bc <echo_poll+0x50>)
  40669c:	4798      	blx	r3
		ret_err = ERR_OK;
  40669e:	2000      	movs	r0, #0
  4066a0:	bd38      	pop	{r3, r4, r5, pc}
		tcp_abort(tpcb);
  4066a2:	4608      	mov	r0, r1
  4066a4:	4b06      	ldr	r3, [pc, #24]	; (4066c0 <echo_poll+0x54>)
  4066a6:	4798      	blx	r3
		ret_err = ERR_ABRT;
  4066a8:	f06f 0009 	mvn.w	r0, #9
  4066ac:	bd38      	pop	{r3, r4, r5, pc}
  4066ae:	bf00      	nop
  4066b0:	004066c5 	.word	0x004066c5
  4066b4:	00402c63 	.word	0x00402c63
  4066b8:	004064d1 	.word	0x004064d1
  4066bc:	00406551 	.word	0x00406551
  4066c0:	0040347d 	.word	0x0040347d

004066c4 <echo_sent>:
{
  4066c4:	b538      	push	{r3, r4, r5, lr}
  4066c6:	4604      	mov	r4, r0
  4066c8:	460d      	mov	r5, r1
	es->retries = 0;
  4066ca:	2300      	movs	r3, #0
  4066cc:	7043      	strb	r3, [r0, #1]
	if(es->p !=NULL)
  4066ce:	6883      	ldr	r3, [r0, #8]
  4066d0:	b14b      	cbz	r3, 4066e6 <echo_sent+0x22>
		tcp_sent(tpcb, echo_sent);
  4066d2:	4909      	ldr	r1, [pc, #36]	; (4066f8 <echo_sent+0x34>)
  4066d4:	4628      	mov	r0, r5
  4066d6:	4b09      	ldr	r3, [pc, #36]	; (4066fc <echo_sent+0x38>)
  4066d8:	4798      	blx	r3
		echo_send(tpcb, es);
  4066da:	4621      	mov	r1, r4
  4066dc:	4628      	mov	r0, r5
  4066de:	4b08      	ldr	r3, [pc, #32]	; (406700 <echo_sent+0x3c>)
  4066e0:	4798      	blx	r3
}
  4066e2:	2000      	movs	r0, #0
  4066e4:	bd38      	pop	{r3, r4, r5, pc}
		if(es->state == ES_CLOSING)
  4066e6:	7803      	ldrb	r3, [r0, #0]
  4066e8:	2b03      	cmp	r3, #3
  4066ea:	d1fa      	bne.n	4066e2 <echo_sent+0x1e>
			echo_close(tpcb, es);
  4066ec:	4601      	mov	r1, r0
  4066ee:	4628      	mov	r0, r5
  4066f0:	4b04      	ldr	r3, [pc, #16]	; (406704 <echo_sent+0x40>)
  4066f2:	4798      	blx	r3
  4066f4:	e7f5      	b.n	4066e2 <echo_sent+0x1e>
  4066f6:	bf00      	nop
  4066f8:	004066c5 	.word	0x004066c5
  4066fc:	00402c63 	.word	0x00402c63
  406700:	004064d1 	.word	0x004064d1
  406704:	00406551 	.word	0x00406551

00406708 <TC0_Handler>:

/**
 * TC0 Interrupt handler.
 */
void TC0_Handler(void)
{
  406708:	b082      	sub	sp, #8
	/* Remove warnings. */
	volatile uint32_t ul_dummy;

	/* Clear status bit to acknowledge interrupt. */
	ul_dummy = TC0->TC_CHANNEL[0].TC_SR;
  40670a:	4b04      	ldr	r3, [pc, #16]	; (40671c <TC0_Handler+0x14>)
  40670c:	6a1b      	ldr	r3, [r3, #32]
  40670e:	9301      	str	r3, [sp, #4]

	/* Increase tick. */
	gs_ul_clk_tick++;
  406710:	4a03      	ldr	r2, [pc, #12]	; (406720 <TC0_Handler+0x18>)
  406712:	6813      	ldr	r3, [r2, #0]
  406714:	3301      	adds	r3, #1
  406716:	6013      	str	r3, [r2, #0]
}
  406718:	b002      	add	sp, #8
  40671a:	4770      	bx	lr
  40671c:	4000c000 	.word	0x4000c000
  406720:	204038e8 	.word	0x204038e8

00406724 <sys_init_timing>:

/**
 * \brief Initialize the timer counter (TC0).
 */
void sys_init_timing(void)
{
  406724:	b570      	push	{r4, r5, r6, lr}
  406726:	b084      	sub	sp, #16
	uint32_t ul_div;
	uint32_t ul_tcclks;

	/* Clear tick value. */
	gs_ul_clk_tick = 0;
  406728:	2500      	movs	r5, #0
  40672a:	4b18      	ldr	r3, [pc, #96]	; (40678c <sys_init_timing+0x68>)
  40672c:	601d      	str	r5, [r3, #0]

	/* Configure PMC. */
	pmc_enable_periph_clk(ID_TC0);
  40672e:	2017      	movs	r0, #23
  406730:	4b17      	ldr	r3, [pc, #92]	; (406790 <sys_init_timing+0x6c>)
  406732:	4798      	blx	r3

	/* Configure TC for a 1kHz frequency and trigger on RC compare. */
	tc_find_mck_divisor(1000,
  406734:	4c17      	ldr	r4, [pc, #92]	; (406794 <sys_init_timing+0x70>)
  406736:	9400      	str	r4, [sp, #0]
  406738:	ab02      	add	r3, sp, #8
  40673a:	aa03      	add	r2, sp, #12
  40673c:	4621      	mov	r1, r4
  40673e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  406742:	4e15      	ldr	r6, [pc, #84]	; (406798 <sys_init_timing+0x74>)
  406744:	47b0      	blx	r6
			sysclk_get_main_hz(), &ul_div, &ul_tcclks,
			sysclk_get_main_hz());
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  406746:	4e15      	ldr	r6, [pc, #84]	; (40679c <sys_init_timing+0x78>)
  406748:	9a02      	ldr	r2, [sp, #8]
  40674a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  40674e:	4629      	mov	r1, r5
  406750:	4630      	mov	r0, r6
  406752:	4b13      	ldr	r3, [pc, #76]	; (4067a0 <sys_init_timing+0x7c>)
  406754:	4798      	blx	r3
	tc_write_rc(TC0, 0, (sysclk_get_main_hz() / ul_div) / 1000);
  406756:	9a03      	ldr	r2, [sp, #12]
  406758:	fbb4 f4f2 	udiv	r4, r4, r2
  40675c:	4a11      	ldr	r2, [pc, #68]	; (4067a4 <sys_init_timing+0x80>)
  40675e:	fba2 3204 	umull	r3, r2, r2, r4
  406762:	0992      	lsrs	r2, r2, #6
  406764:	4629      	mov	r1, r5
  406766:	4630      	mov	r0, r6
  406768:	4b0f      	ldr	r3, [pc, #60]	; (4067a8 <sys_init_timing+0x84>)
  40676a:	4798      	blx	r3
  40676c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  406770:	4b0e      	ldr	r3, [pc, #56]	; (4067ac <sys_init_timing+0x88>)
  406772:	601a      	str	r2, [r3, #0]

	/* Configure and enable interrupt on RC compare. */
	NVIC_EnableIRQ((IRQn_Type)ID_TC0);
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  406774:	2210      	movs	r2, #16
  406776:	4629      	mov	r1, r5
  406778:	4630      	mov	r0, r6
  40677a:	4b0d      	ldr	r3, [pc, #52]	; (4067b0 <sys_init_timing+0x8c>)
  40677c:	4798      	blx	r3

	/* Start timer. */
	tc_start(TC0, 0);
  40677e:	4629      	mov	r1, r5
  406780:	4630      	mov	r0, r6
  406782:	4b0c      	ldr	r3, [pc, #48]	; (4067b4 <sys_init_timing+0x90>)
  406784:	4798      	blx	r3
}
  406786:	b004      	add	sp, #16
  406788:	bd70      	pop	{r4, r5, r6, pc}
  40678a:	bf00      	nop
  40678c:	204038e8 	.word	0x204038e8
  406790:	00400ce9 	.word	0x00400ce9
  406794:	11e1a300 	.word	0x11e1a300
  406798:	00400d3b 	.word	0x00400d3b
  40679c:	4000c000 	.word	0x4000c000
  4067a0:	00400d09 	.word	0x00400d09
  4067a4:	10624dd3 	.word	0x10624dd3
  4067a8:	00400d2b 	.word	0x00400d2b
  4067ac:	e000e100 	.word	0xe000e100
  4067b0:	00400d33 	.word	0x00400d33
  4067b4:	00400d23 	.word	0x00400d23

004067b8 <sys_get_ms>:
/**
 * \brief Return the number of timer ticks (ms).
 */
uint32_t sys_get_ms(void)
{
	return gs_ul_clk_tick;
  4067b8:	4b01      	ldr	r3, [pc, #4]	; (4067c0 <sys_get_ms+0x8>)
  4067ba:	6818      	ldr	r0, [r3, #0]
}
  4067bc:	4770      	bx	lr
  4067be:	bf00      	nop
  4067c0:	204038e8 	.word	0x204038e8

004067c4 <sys_now>:
	return gs_ul_clk_tick;
  4067c4:	4b01      	ldr	r3, [pc, #4]	; (4067cc <sys_now+0x8>)
  4067c6:	6818      	ldr	r0, [r3, #0]

#if ((LWIP_VERSION) != ((1U << 24) | (3U << 16) | (2U << 8) | (LWIP_VERSION_RC)))
u32_t sys_now(void)
{
	return (sys_get_ms());
}
  4067c8:	4770      	bx	lr
  4067ca:	bf00      	nop
  4067cc:	204038e8 	.word	0x204038e8

004067d0 <ioport_set_pin_mode>:
	return 1U << (pin & 0x1F);
  4067d0:	f000 031f 	and.w	r3, r0, #31
  4067d4:	2201      	movs	r2, #1
  4067d6:	409a      	lsls	r2, r3
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4067d8:	4b1a      	ldr	r3, [pc, #104]	; (406844 <ioport_set_pin_mode+0x74>)
  4067da:	eb03 1050 	add.w	r0, r3, r0, lsr #5
  4067de:	0240      	lsls	r0, r0, #9
	if (mode & IOPORT_MODE_PULLUP) {
  4067e0:	f011 0f08 	tst.w	r1, #8
  4067e4:	d022      	beq.n	40682c <ioport_set_pin_mode+0x5c>
		base->PIO_PUER = mask;
  4067e6:	6642      	str	r2, [r0, #100]	; 0x64
	if (mode & IOPORT_MODE_PULLDOWN) {
  4067e8:	f011 0f10 	tst.w	r1, #16
  4067ec:	d020      	beq.n	406830 <ioport_set_pin_mode+0x60>
		base->PIO_PPDER = mask;
  4067ee:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4067f2:	f011 0f20 	tst.w	r1, #32
  4067f6:	d01e      	beq.n	406836 <ioport_set_pin_mode+0x66>
		base->PIO_MDER = mask;
  4067f8:	6502      	str	r2, [r0, #80]	; 0x50
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  4067fa:	f011 0fc0 	tst.w	r1, #192	; 0xc0
  4067fe:	d01c      	beq.n	40683a <ioport_set_pin_mode+0x6a>
		base->PIO_IFER = mask;
  406800:	6202      	str	r2, [r0, #32]
	if (mode & IOPORT_MODE_DEBOUNCE) {
  406802:	f011 0f80 	tst.w	r1, #128	; 0x80
  406806:	d01a      	beq.n	40683e <ioport_set_pin_mode+0x6e>
		base->PIO_IFSCER = mask;
  406808:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
	if (mode & IOPORT_MODE_MUX_BIT0) {
  40680c:	f011 0f01 	tst.w	r1, #1
		base->PIO_ABCDSR[0] |= mask;
  406810:	6f03      	ldr	r3, [r0, #112]	; 0x70
  406812:	bf14      	ite	ne
  406814:	4313      	orrne	r3, r2
		base->PIO_ABCDSR[0] &= ~mask;
  406816:	4393      	biceq	r3, r2
  406818:	6703      	str	r3, [r0, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
  40681a:	f011 0f02 	tst.w	r1, #2
		base->PIO_ABCDSR[1] |= mask;
  40681e:	6f43      	ldr	r3, [r0, #116]	; 0x74
  406820:	bf14      	ite	ne
  406822:	431a      	orrne	r2, r3
		base->PIO_ABCDSR[1] &= ~mask;
  406824:	ea23 0202 	biceq.w	r2, r3, r2
  406828:	6742      	str	r2, [r0, #116]	; 0x74
  40682a:	4770      	bx	lr
		base->PIO_PUDR = mask;
  40682c:	6602      	str	r2, [r0, #96]	; 0x60
  40682e:	e7db      	b.n	4067e8 <ioport_set_pin_mode+0x18>
		base->PIO_PPDDR = mask;
  406830:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  406834:	e7dd      	b.n	4067f2 <ioport_set_pin_mode+0x22>
		base->PIO_MDDR = mask;
  406836:	6542      	str	r2, [r0, #84]	; 0x54
  406838:	e7df      	b.n	4067fa <ioport_set_pin_mode+0x2a>
		base->PIO_IFDR = mask;
  40683a:	6242      	str	r2, [r0, #36]	; 0x24
  40683c:	e7e1      	b.n	406802 <ioport_set_pin_mode+0x32>
		base->PIO_IFSCDR = mask;
  40683e:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  406842:	e7e3      	b.n	40680c <ioport_set_pin_mode+0x3c>
  406844:	00200707 	.word	0x00200707

00406848 <waitCount>:
	ul_cur_ticks = g_ul_ms_ticks;
	while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
}

static void waitCount(uint32_t ticks)
{
  406848:	b082      	sub	sp, #8
	for(uint32_t volatile i = ticks; i>0; i--)
  40684a:	9001      	str	r0, [sp, #4]
  40684c:	9b01      	ldr	r3, [sp, #4]
  40684e:	b12b      	cbz	r3, 40685c <waitCount+0x14>
  406850:	9b01      	ldr	r3, [sp, #4]
  406852:	3b01      	subs	r3, #1
  406854:	9301      	str	r3, [sp, #4]
  406856:	9b01      	ldr	r3, [sp, #4]
  406858:	2b00      	cmp	r3, #0
  40685a:	d1f9      	bne.n	406850 <waitCount+0x8>
	{
	}
}
  40685c:	b002      	add	sp, #8
  40685e:	4770      	bx	lr

00406860 <CountReady_Handler>:
}

static void CountReady_Handler(uint32_t id, uint32_t mask)
{
#if READ_MODE
	if(ID_PIOA == id){
  406860:	280a      	cmp	r0, #10
  406862:	d013      	beq.n	40688c <CountReady_Handler+0x2c>
			}
		}
		
	}

	if(ID_PIOC ==id){
  406864:	280c      	cmp	r0, #12
  406866:	d110      	bne.n	40688a <CountReady_Handler+0x2a>
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  406868:	4b14      	ldr	r3, [pc, #80]	; (4068bc <CountReady_Handler+0x5c>)
  40686a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		if(SIGNAL1B_READY_MASK |SIGNAL2B_READY_MASK == mask){
			if(ioport_get_pin_level(SIGNAL1B_READY_PIN)){
  40686c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
				sig1B_flag = true;
  406870:	bf14      	ite	ne
  406872:	2201      	movne	r2, #1
			}
			else{
				sig1B_flag = false;
  406874:	2200      	moveq	r2, #0
  406876:	4b12      	ldr	r3, [pc, #72]	; (4068c0 <CountReady_Handler+0x60>)
  406878:	701a      	strb	r2, [r3, #0]
  40687a:	4b10      	ldr	r3, [pc, #64]	; (4068bc <CountReady_Handler+0x5c>)
  40687c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
			}
			if(ioport_get_pin_level(SIGNAL2B_READY_PIN)){
  40687e:	f413 7f00 	tst.w	r3, #512	; 0x200
  406882:	d116      	bne.n	4068b2 <CountReady_Handler+0x52>
				sig2B_flag = true;
			}
			else{
				sig2B_flag = false;
  406884:	2200      	movs	r2, #0
  406886:	4b0f      	ldr	r3, [pc, #60]	; (4068c4 <CountReady_Handler+0x64>)
  406888:	701a      	strb	r2, [r3, #0]
  40688a:	4770      	bx	lr
  40688c:	4b0e      	ldr	r3, [pc, #56]	; (4068c8 <CountReady_Handler+0x68>)
  40688e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
			if(ioport_get_pin_level(SIGNAL1A_READY_PIN)){
  406890:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
				sig1A_flag = true;
  406894:	bf14      	ite	ne
  406896:	2201      	movne	r2, #1
				sig1A_flag = false;
  406898:	2200      	moveq	r2, #0
  40689a:	4b0c      	ldr	r3, [pc, #48]	; (4068cc <CountReady_Handler+0x6c>)
  40689c:	701a      	strb	r2, [r3, #0]
  40689e:	4b0a      	ldr	r3, [pc, #40]	; (4068c8 <CountReady_Handler+0x68>)
  4068a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
			if(ioport_get_pin_level(SIGNAL2A_READY_PIN)){
  4068a2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
				sig2A_flag = true;
  4068a6:	bf14      	ite	ne
  4068a8:	2201      	movne	r2, #1
				sig2A_flag = false;
  4068aa:	2200      	moveq	r2, #0
  4068ac:	4b08      	ldr	r3, [pc, #32]	; (4068d0 <CountReady_Handler+0x70>)
  4068ae:	701a      	strb	r2, [r3, #0]
  4068b0:	4770      	bx	lr
				sig2B_flag = true;
  4068b2:	2201      	movs	r2, #1
  4068b4:	4b03      	ldr	r3, [pc, #12]	; (4068c4 <CountReady_Handler+0x64>)
  4068b6:	701a      	strb	r2, [r3, #0]
  4068b8:	4770      	bx	lr
  4068ba:	bf00      	nop
  4068bc:	400e1200 	.word	0x400e1200
  4068c0:	204049bb 	.word	0x204049bb
  4068c4:	204049b9 	.word	0x204049b9
  4068c8:	400e0e00 	.word	0x400e0e00
  4068cc:	204049b8 	.word	0x204049b8
  4068d0:	204049ba 	.word	0x204049ba

004068d4 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4068d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4068d6:	b083      	sub	sp, #12
  4068d8:	4605      	mov	r5, r0
  4068da:	460c      	mov	r4, r1
	uint32_t val = 0;
  4068dc:	2300      	movs	r3, #0
  4068de:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4068e0:	4b2a      	ldr	r3, [pc, #168]	; (40698c <usart_serial_getchar+0xb8>)
  4068e2:	4298      	cmp	r0, r3
  4068e4:	d013      	beq.n	40690e <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4068e6:	4b2a      	ldr	r3, [pc, #168]	; (406990 <usart_serial_getchar+0xbc>)
  4068e8:	4298      	cmp	r0, r3
  4068ea:	d018      	beq.n	40691e <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4068ec:	4b29      	ldr	r3, [pc, #164]	; (406994 <usart_serial_getchar+0xc0>)
  4068ee:	4298      	cmp	r0, r3
  4068f0:	d01d      	beq.n	40692e <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4068f2:	4b29      	ldr	r3, [pc, #164]	; (406998 <usart_serial_getchar+0xc4>)
  4068f4:	429d      	cmp	r5, r3
  4068f6:	d022      	beq.n	40693e <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4068f8:	4b28      	ldr	r3, [pc, #160]	; (40699c <usart_serial_getchar+0xc8>)
  4068fa:	429d      	cmp	r5, r3
  4068fc:	d027      	beq.n	40694e <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4068fe:	4b28      	ldr	r3, [pc, #160]	; (4069a0 <usart_serial_getchar+0xcc>)
  406900:	429d      	cmp	r5, r3
  406902:	d02e      	beq.n	406962 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  406904:	4b27      	ldr	r3, [pc, #156]	; (4069a4 <usart_serial_getchar+0xd0>)
  406906:	429d      	cmp	r5, r3
  406908:	d035      	beq.n	406976 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40690a:	b003      	add	sp, #12
  40690c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  40690e:	461f      	mov	r7, r3
  406910:	4e25      	ldr	r6, [pc, #148]	; (4069a8 <usart_serial_getchar+0xd4>)
  406912:	4621      	mov	r1, r4
  406914:	4638      	mov	r0, r7
  406916:	47b0      	blx	r6
  406918:	2800      	cmp	r0, #0
  40691a:	d1fa      	bne.n	406912 <usart_serial_getchar+0x3e>
  40691c:	e7e9      	b.n	4068f2 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  40691e:	461f      	mov	r7, r3
  406920:	4e21      	ldr	r6, [pc, #132]	; (4069a8 <usart_serial_getchar+0xd4>)
  406922:	4621      	mov	r1, r4
  406924:	4638      	mov	r0, r7
  406926:	47b0      	blx	r6
  406928:	2800      	cmp	r0, #0
  40692a:	d1fa      	bne.n	406922 <usart_serial_getchar+0x4e>
  40692c:	e7e4      	b.n	4068f8 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  40692e:	461f      	mov	r7, r3
  406930:	4e1d      	ldr	r6, [pc, #116]	; (4069a8 <usart_serial_getchar+0xd4>)
  406932:	4621      	mov	r1, r4
  406934:	4638      	mov	r0, r7
  406936:	47b0      	blx	r6
  406938:	2800      	cmp	r0, #0
  40693a:	d1fa      	bne.n	406932 <usart_serial_getchar+0x5e>
  40693c:	e7df      	b.n	4068fe <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  40693e:	461f      	mov	r7, r3
  406940:	4e19      	ldr	r6, [pc, #100]	; (4069a8 <usart_serial_getchar+0xd4>)
  406942:	4621      	mov	r1, r4
  406944:	4638      	mov	r0, r7
  406946:	47b0      	blx	r6
  406948:	2800      	cmp	r0, #0
  40694a:	d1fa      	bne.n	406942 <usart_serial_getchar+0x6e>
  40694c:	e7da      	b.n	406904 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  40694e:	461e      	mov	r6, r3
  406950:	4d16      	ldr	r5, [pc, #88]	; (4069ac <usart_serial_getchar+0xd8>)
  406952:	a901      	add	r1, sp, #4
  406954:	4630      	mov	r0, r6
  406956:	47a8      	blx	r5
  406958:	2800      	cmp	r0, #0
  40695a:	d1fa      	bne.n	406952 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  40695c:	9b01      	ldr	r3, [sp, #4]
  40695e:	7023      	strb	r3, [r4, #0]
  406960:	e7d3      	b.n	40690a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  406962:	461e      	mov	r6, r3
  406964:	4d11      	ldr	r5, [pc, #68]	; (4069ac <usart_serial_getchar+0xd8>)
  406966:	a901      	add	r1, sp, #4
  406968:	4630      	mov	r0, r6
  40696a:	47a8      	blx	r5
  40696c:	2800      	cmp	r0, #0
  40696e:	d1fa      	bne.n	406966 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  406970:	9b01      	ldr	r3, [sp, #4]
  406972:	7023      	strb	r3, [r4, #0]
  406974:	e7c9      	b.n	40690a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  406976:	461e      	mov	r6, r3
  406978:	4d0c      	ldr	r5, [pc, #48]	; (4069ac <usart_serial_getchar+0xd8>)
  40697a:	a901      	add	r1, sp, #4
  40697c:	4630      	mov	r0, r6
  40697e:	47a8      	blx	r5
  406980:	2800      	cmp	r0, #0
  406982:	d1fa      	bne.n	40697a <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  406984:	9b01      	ldr	r3, [sp, #4]
  406986:	7023      	strb	r3, [r4, #0]
}
  406988:	e7bf      	b.n	40690a <usart_serial_getchar+0x36>
  40698a:	bf00      	nop
  40698c:	400e0800 	.word	0x400e0800
  406990:	400e0a00 	.word	0x400e0a00
  406994:	400e1a00 	.word	0x400e1a00
  406998:	400e1c00 	.word	0x400e1c00
  40699c:	40024000 	.word	0x40024000
  4069a0:	40028000 	.word	0x40028000
  4069a4:	4002c000 	.word	0x4002c000
  4069a8:	00400dbd 	.word	0x00400dbd
  4069ac:	00400ecb 	.word	0x00400ecb

004069b0 <usart_serial_putchar>:
{
  4069b0:	b570      	push	{r4, r5, r6, lr}
  4069b2:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  4069b4:	4b2a      	ldr	r3, [pc, #168]	; (406a60 <usart_serial_putchar+0xb0>)
  4069b6:	4298      	cmp	r0, r3
  4069b8:	d013      	beq.n	4069e2 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  4069ba:	4b2a      	ldr	r3, [pc, #168]	; (406a64 <usart_serial_putchar+0xb4>)
  4069bc:	4298      	cmp	r0, r3
  4069be:	d019      	beq.n	4069f4 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  4069c0:	4b29      	ldr	r3, [pc, #164]	; (406a68 <usart_serial_putchar+0xb8>)
  4069c2:	4298      	cmp	r0, r3
  4069c4:	d01f      	beq.n	406a06 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  4069c6:	4b29      	ldr	r3, [pc, #164]	; (406a6c <usart_serial_putchar+0xbc>)
  4069c8:	4298      	cmp	r0, r3
  4069ca:	d025      	beq.n	406a18 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  4069cc:	4b28      	ldr	r3, [pc, #160]	; (406a70 <usart_serial_putchar+0xc0>)
  4069ce:	4298      	cmp	r0, r3
  4069d0:	d02b      	beq.n	406a2a <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  4069d2:	4b28      	ldr	r3, [pc, #160]	; (406a74 <usart_serial_putchar+0xc4>)
  4069d4:	4298      	cmp	r0, r3
  4069d6:	d031      	beq.n	406a3c <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  4069d8:	4b27      	ldr	r3, [pc, #156]	; (406a78 <usart_serial_putchar+0xc8>)
  4069da:	4298      	cmp	r0, r3
  4069dc:	d037      	beq.n	406a4e <usart_serial_putchar+0x9e>
	return 0;
  4069de:	2000      	movs	r0, #0
}
  4069e0:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4069e2:	461e      	mov	r6, r3
  4069e4:	4d25      	ldr	r5, [pc, #148]	; (406a7c <usart_serial_putchar+0xcc>)
  4069e6:	4621      	mov	r1, r4
  4069e8:	4630      	mov	r0, r6
  4069ea:	47a8      	blx	r5
  4069ec:	2800      	cmp	r0, #0
  4069ee:	d1fa      	bne.n	4069e6 <usart_serial_putchar+0x36>
		return 1;
  4069f0:	2001      	movs	r0, #1
  4069f2:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4069f4:	461e      	mov	r6, r3
  4069f6:	4d21      	ldr	r5, [pc, #132]	; (406a7c <usart_serial_putchar+0xcc>)
  4069f8:	4621      	mov	r1, r4
  4069fa:	4630      	mov	r0, r6
  4069fc:	47a8      	blx	r5
  4069fe:	2800      	cmp	r0, #0
  406a00:	d1fa      	bne.n	4069f8 <usart_serial_putchar+0x48>
		return 1;
  406a02:	2001      	movs	r0, #1
  406a04:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  406a06:	461e      	mov	r6, r3
  406a08:	4d1c      	ldr	r5, [pc, #112]	; (406a7c <usart_serial_putchar+0xcc>)
  406a0a:	4621      	mov	r1, r4
  406a0c:	4630      	mov	r0, r6
  406a0e:	47a8      	blx	r5
  406a10:	2800      	cmp	r0, #0
  406a12:	d1fa      	bne.n	406a0a <usart_serial_putchar+0x5a>
		return 1;
  406a14:	2001      	movs	r0, #1
  406a16:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  406a18:	461e      	mov	r6, r3
  406a1a:	4d18      	ldr	r5, [pc, #96]	; (406a7c <usart_serial_putchar+0xcc>)
  406a1c:	4621      	mov	r1, r4
  406a1e:	4630      	mov	r0, r6
  406a20:	47a8      	blx	r5
  406a22:	2800      	cmp	r0, #0
  406a24:	d1fa      	bne.n	406a1c <usart_serial_putchar+0x6c>
		return 1;
  406a26:	2001      	movs	r0, #1
  406a28:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  406a2a:	461e      	mov	r6, r3
  406a2c:	4d14      	ldr	r5, [pc, #80]	; (406a80 <usart_serial_putchar+0xd0>)
  406a2e:	4621      	mov	r1, r4
  406a30:	4630      	mov	r0, r6
  406a32:	47a8      	blx	r5
  406a34:	2800      	cmp	r0, #0
  406a36:	d1fa      	bne.n	406a2e <usart_serial_putchar+0x7e>
		return 1;
  406a38:	2001      	movs	r0, #1
  406a3a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  406a3c:	461e      	mov	r6, r3
  406a3e:	4d10      	ldr	r5, [pc, #64]	; (406a80 <usart_serial_putchar+0xd0>)
  406a40:	4621      	mov	r1, r4
  406a42:	4630      	mov	r0, r6
  406a44:	47a8      	blx	r5
  406a46:	2800      	cmp	r0, #0
  406a48:	d1fa      	bne.n	406a40 <usart_serial_putchar+0x90>
		return 1;
  406a4a:	2001      	movs	r0, #1
  406a4c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  406a4e:	461e      	mov	r6, r3
  406a50:	4d0b      	ldr	r5, [pc, #44]	; (406a80 <usart_serial_putchar+0xd0>)
  406a52:	4621      	mov	r1, r4
  406a54:	4630      	mov	r0, r6
  406a56:	47a8      	blx	r5
  406a58:	2800      	cmp	r0, #0
  406a5a:	d1fa      	bne.n	406a52 <usart_serial_putchar+0xa2>
		return 1;
  406a5c:	2001      	movs	r0, #1
  406a5e:	bd70      	pop	{r4, r5, r6, pc}
  406a60:	400e0800 	.word	0x400e0800
  406a64:	400e0a00 	.word	0x400e0a00
  406a68:	400e1a00 	.word	0x400e1a00
  406a6c:	400e1c00 	.word	0x400e1c00
  406a70:	40024000 	.word	0x40024000
  406a74:	40028000 	.word	0x40028000
  406a78:	4002c000 	.word	0x4002c000
  406a7c:	00400dab 	.word	0x00400dab
  406a80:	00400eb5 	.word	0x00400eb5

00406a84 <readCounterByte>:
{
  406a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406a88:	b087      	sub	sp, #28
  406a8a:	4606      	mov	r6, r0
  406a8c:	468b      	mov	fp, r1
  406a8e:	9301      	str	r3, [sp, #4]
	uint8_t volatile readByte = 0;
  406a90:	2300      	movs	r3, #0
  406a92:	f88d 3017 	strb.w	r3, [sp, #23]
	uint8_t volatile bit = 0;
  406a96:	f88d 3016 	strb.w	r3, [sp, #22]
  406a9a:	468e      	mov	lr, r1
  406a9c:	1d0f      	adds	r7, r1, #4
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406a9e:	4d44      	ldr	r5, [pc, #272]	; (406bb0 <readCounterByte+0x12c>)
	return 1U << (pin & 0x1F);
  406aa0:	2401      	movs	r4, #1
		if(i==byte){
  406aa2:	eba1 030e 	sub.w	r3, r1, lr
  406aa6:	b2db      	uxtb	r3, r3
  406aa8:	429a      	cmp	r2, r3
  406aaa:	d076      	beq.n	406b9a <readCounterByte+0x116>
			ioport_set_pin_level(selectPins[i], HIGH);
  406aac:	780b      	ldrb	r3, [r1, #0]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406aae:	eb05 1053 	add.w	r0, r5, r3, lsr #5
  406ab2:	0240      	lsls	r0, r0, #9
	return 1U << (pin & 0x1F);
  406ab4:	f003 031f 	and.w	r3, r3, #31
  406ab8:	fa04 f303 	lsl.w	r3, r4, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  406abc:	6303      	str	r3, [r0, #48]	; 0x30
  406abe:	3101      	adds	r1, #1
	for (uint8_t i = 0; i<4; i++)
  406ac0:	42b9      	cmp	r1, r7
  406ac2:	d1ee      	bne.n	406aa2 <readCounterByte+0x1e>
	waitCount(10000);
  406ac4:	f242 7010 	movw	r0, #10000	; 0x2710
  406ac8:	4b3a      	ldr	r3, [pc, #232]	; (406bb4 <readCounterByte+0x130>)
  406aca:	4798      	blx	r3
  406acc:	1e74      	subs	r4, r6, #1
  406ace:	f10d 0513 	add.w	r5, sp, #19
  406ad2:	f106 0a07 	add.w	sl, r6, #7
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406ad6:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 406bb0 <readCounterByte+0x12c>
		sprintf(tempString, "%u", bit);
  406ada:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 406bc0 <readCounterByte+0x13c>
  406ade:	4f36      	ldr	r7, [pc, #216]	; (406bb8 <readCounterByte+0x134>)
		bit = ioport_get_pin_level(outputPins[i]);
  406ae0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  406ae4:	eb09 1253 	add.w	r2, r9, r3, lsr #5
  406ae8:	0252      	lsls	r2, r2, #9
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  406aea:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  406aec:	f003 031f 	and.w	r3, r3, #31
  406af0:	2201      	movs	r2, #1
  406af2:	fa02 f303 	lsl.w	r3, r2, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  406af6:	420b      	tst	r3, r1
  406af8:	bf14      	ite	ne
  406afa:	4613      	movne	r3, r2
  406afc:	2300      	moveq	r3, #0
  406afe:	f88d 3016 	strb.w	r3, [sp, #22]
		readByte = readByte | (bit<<i);
  406b02:	f89d 2016 	ldrb.w	r2, [sp, #22]
  406b06:	b2d2      	uxtb	r2, r2
  406b08:	f89d 3017 	ldrb.w	r3, [sp, #23]
  406b0c:	1ba1      	subs	r1, r4, r6
  406b0e:	408a      	lsls	r2, r1
  406b10:	4313      	orrs	r3, r2
  406b12:	b2db      	uxtb	r3, r3
  406b14:	f88d 3017 	strb.w	r3, [sp, #23]
		sprintf(tempString, "%u", bit);
  406b18:	f89d 2016 	ldrb.w	r2, [sp, #22]
  406b1c:	4641      	mov	r1, r8
  406b1e:	a802      	add	r0, sp, #8
  406b20:	47b8      	blx	r7
		bitString[7-i]= tempString[0];
  406b22:	f89d 3008 	ldrb.w	r3, [sp, #8]
  406b26:	f805 3901 	strb.w	r3, [r5], #-1
	for (uint8_t i=0; i<8; i++)
  406b2a:	4554      	cmp	r4, sl
  406b2c:	d1d8      	bne.n	406ae0 <readCounterByte+0x5c>
	bitString[8]='\0';
  406b2e:	2300      	movs	r3, #0
  406b30:	f88d 3014 	strb.w	r3, [sp, #20]
	ioport_set_pin_level(selectPins[0],HIGH);
  406b34:	f89b 2000 	ldrb.w	r2, [fp]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406b38:	4b1d      	ldr	r3, [pc, #116]	; (406bb0 <readCounterByte+0x12c>)
  406b3a:	eb03 1052 	add.w	r0, r3, r2, lsr #5
  406b3e:	0240      	lsls	r0, r0, #9
	return 1U << (pin & 0x1F);
  406b40:	f002 011f 	and.w	r1, r2, #31
  406b44:	2201      	movs	r2, #1
  406b46:	fa02 f101 	lsl.w	r1, r2, r1
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  406b4a:	6301      	str	r1, [r0, #48]	; 0x30
	ioport_set_pin_level(selectPins[1],HIGH);
  406b4c:	f89b 1001 	ldrb.w	r1, [fp, #1]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406b50:	eb03 1051 	add.w	r0, r3, r1, lsr #5
  406b54:	0240      	lsls	r0, r0, #9
	return 1U << (pin & 0x1F);
  406b56:	f001 011f 	and.w	r1, r1, #31
  406b5a:	fa02 f101 	lsl.w	r1, r2, r1
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  406b5e:	6301      	str	r1, [r0, #48]	; 0x30
	ioport_set_pin_level(selectPins[2],HIGH);
  406b60:	f89b 1002 	ldrb.w	r1, [fp, #2]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406b64:	eb03 1051 	add.w	r0, r3, r1, lsr #5
  406b68:	0240      	lsls	r0, r0, #9
	return 1U << (pin & 0x1F);
  406b6a:	f001 011f 	and.w	r1, r1, #31
  406b6e:	fa02 f101 	lsl.w	r1, r2, r1
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  406b72:	6301      	str	r1, [r0, #48]	; 0x30
	ioport_set_pin_level(selectPins[3],HIGH);
  406b74:	f89b 1003 	ldrb.w	r1, [fp, #3]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406b78:	eb03 1351 	add.w	r3, r3, r1, lsr #5
  406b7c:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
  406b7e:	f001 011f 	and.w	r1, r1, #31
  406b82:	408a      	lsls	r2, r1
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  406b84:	631a      	str	r2, [r3, #48]	; 0x30
	strncpy(p_binaryString, bitString, 9);
  406b86:	2209      	movs	r2, #9
  406b88:	a903      	add	r1, sp, #12
  406b8a:	9801      	ldr	r0, [sp, #4]
  406b8c:	4b0b      	ldr	r3, [pc, #44]	; (406bbc <readCounterByte+0x138>)
  406b8e:	4798      	blx	r3
	return readByte;
  406b90:	f89d 0017 	ldrb.w	r0, [sp, #23]
}
  406b94:	b007      	add	sp, #28
  406b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ioport_set_pin_level(selectPins[i], LOW);
  406b9a:	780b      	ldrb	r3, [r1, #0]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406b9c:	eb05 1053 	add.w	r0, r5, r3, lsr #5
  406ba0:	0240      	lsls	r0, r0, #9
	return 1U << (pin & 0x1F);
  406ba2:	f003 031f 	and.w	r3, r3, #31
  406ba6:	fa04 f303 	lsl.w	r3, r4, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  406baa:	6343      	str	r3, [r0, #52]	; 0x34
  406bac:	e787      	b.n	406abe <readCounterByte+0x3a>
  406bae:	bf00      	nop
  406bb0:	00200707 	.word	0x00200707
  406bb4:	00406849 	.word	0x00406849
  406bb8:	00407605 	.word	0x00407605
  406bbc:	0040785d 	.word	0x0040785d
  406bc0:	0040db04 	.word	0x0040db04

00406bc4 <printCountValue>:
static void printCountValue(struct counter cntr){
  406bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406bc8:	b08a      	sub	sp, #40	; 0x28
  406bca:	ac02      	add	r4, sp, #8
  406bcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char bitString[9] = "";
  406bd0:	2500      	movs	r5, #0
  406bd2:	9507      	str	r5, [sp, #28]
  406bd4:	9508      	str	r5, [sp, #32]
  406bd6:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
	counterio_pulse_pin(cntr.registerClkPin, HIGH, 10000);
  406bda:	f89d 6014 	ldrb.w	r6, [sp, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406bde:	4c26      	ldr	r4, [pc, #152]	; (406c78 <printCountValue+0xb4>)
  406be0:	eb04 1456 	add.w	r4, r4, r6, lsr #5
  406be4:	0264      	lsls	r4, r4, #9
	return 1U << (pin & 0x1F);
  406be6:	f006 031f 	and.w	r3, r6, #31
  406bea:	2601      	movs	r6, #1
  406bec:	409e      	lsls	r6, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  406bee:	6326      	str	r6, [r4, #48]	; 0x30
	waitCount(wait);
  406bf0:	f242 7010 	movw	r0, #10000	; 0x2710
  406bf4:	4f21      	ldr	r7, [pc, #132]	; (406c7c <printCountValue+0xb8>)
  406bf6:	47b8      	blx	r7
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  406bf8:	6366      	str	r6, [r4, #52]	; 0x34
	waitCount(10000);
  406bfa:	f242 7010 	movw	r0, #10000	; 0x2710
  406bfe:	47b8      	blx	r7
  406c00:	462c      	mov	r4, r5
		readByte = readCounterByte(cntr.outputPins, cntr.selectPins, byteIndex, p_bitString);
  406c02:	4f1f      	ldr	r7, [pc, #124]	; (406c80 <printCountValue+0xbc>)
		printf("[%c%d]%s : %u\r\n", cntr.label, byteIndex, bitString, readByte);
  406c04:	f8df 808c 	ldr.w	r8, [pc, #140]	; 406c94 <printCountValue+0xd0>
  406c08:	4e1e      	ldr	r6, [pc, #120]	; (406c84 <printCountValue+0xc0>)
		readByte = readCounterByte(cntr.outputPins, cntr.selectPins, byteIndex, p_bitString);
  406c0a:	ab07      	add	r3, sp, #28
  406c0c:	b2e2      	uxtb	r2, r4
  406c0e:	a902      	add	r1, sp, #8
  406c10:	a803      	add	r0, sp, #12
  406c12:	47b8      	blx	r7
		readCount += ((uint32_t) readByte) << (8*byteIndex);
  406c14:	00e3      	lsls	r3, r4, #3
  406c16:	fa00 f303 	lsl.w	r3, r0, r3
  406c1a:	441d      	add	r5, r3
		printf("[%c%d]%s : %u\r\n", cntr.label, byteIndex, bitString, readByte);
  406c1c:	f89d 1016 	ldrb.w	r1, [sp, #22]
  406c20:	9000      	str	r0, [sp, #0]
  406c22:	ab07      	add	r3, sp, #28
  406c24:	4622      	mov	r2, r4
  406c26:	4640      	mov	r0, r8
  406c28:	47b0      	blx	r6
		waitCount(10000);
  406c2a:	f242 7010 	movw	r0, #10000	; 0x2710
  406c2e:	4b13      	ldr	r3, [pc, #76]	; (406c7c <printCountValue+0xb8>)
  406c30:	4798      	blx	r3
  406c32:	3401      	adds	r4, #1
	for(uint8_t byteIndex = 0; byteIndex<4; byteIndex++)
  406c34:	2c04      	cmp	r4, #4
  406c36:	d1e8      	bne.n	406c0a <printCountValue+0x46>
	counterio_pulse_pin(cntr.clearPin, LOW, 10000);
  406c38:	f89d 6015 	ldrb.w	r6, [sp, #21]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406c3c:	4c0e      	ldr	r4, [pc, #56]	; (406c78 <printCountValue+0xb4>)
  406c3e:	eb04 1456 	add.w	r4, r4, r6, lsr #5
  406c42:	0264      	lsls	r4, r4, #9
	return 1U << (pin & 0x1F);
  406c44:	f006 031f 	and.w	r3, r6, #31
  406c48:	2601      	movs	r6, #1
  406c4a:	409e      	lsls	r6, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  406c4c:	6366      	str	r6, [r4, #52]	; 0x34
	waitCount(wait);
  406c4e:	f242 7010 	movw	r0, #10000	; 0x2710
  406c52:	4b0a      	ldr	r3, [pc, #40]	; (406c7c <printCountValue+0xb8>)
  406c54:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  406c56:	6326      	str	r6, [r4, #48]	; 0x30
	printf("Count: %u\r\n", readCount);
  406c58:	4629      	mov	r1, r5
  406c5a:	480b      	ldr	r0, [pc, #44]	; (406c88 <printCountValue+0xc4>)
  406c5c:	4c09      	ldr	r4, [pc, #36]	; (406c84 <printCountValue+0xc0>)
  406c5e:	47a0      	blx	r4
	printf("delta-t: %uns\r\n", readCount * OSCILLATOR_PERIOD);
  406c60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  406c64:	fb01 f105 	mul.w	r1, r1, r5
  406c68:	4808      	ldr	r0, [pc, #32]	; (406c8c <printCountValue+0xc8>)
  406c6a:	47a0      	blx	r4
	printf("\r\n");
  406c6c:	4808      	ldr	r0, [pc, #32]	; (406c90 <printCountValue+0xcc>)
  406c6e:	47a0      	blx	r4
}
  406c70:	b00a      	add	sp, #40	; 0x28
  406c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406c76:	bf00      	nop
  406c78:	00200707 	.word	0x00200707
  406c7c:	00406849 	.word	0x00406849
  406c80:	00406a85 	.word	0x00406a85
  406c84:	0040720d 	.word	0x0040720d
  406c88:	0040dae8 	.word	0x0040dae8
  406c8c:	0040daf4 	.word	0x0040daf4
  406c90:	0040dad4 	.word	0x0040dad4
  406c94:	0040dad8 	.word	0x0040dad8

00406c98 <SysTick_Handler>:
 *  Increments the g_ul_ms_ticks counter.
 */
// [main_systick_handler]
void SysTick_Handler(void)
{
	g_ul_ms_ticks++;
  406c98:	4a02      	ldr	r2, [pc, #8]	; (406ca4 <SysTick_Handler+0xc>)
  406c9a:	6813      	ldr	r3, [r2, #0]
  406c9c:	3301      	adds	r3, #1
  406c9e:	6013      	str	r3, [r2, #0]
  406ca0:	4770      	bx	lr
  406ca2:	bf00      	nop
  406ca4:	204038ec 	.word	0x204038ec

00406ca8 <main>:
/**
 * \brief Main program function. Configure the hardware, initialize lwIP
 * TCP/IP stack, and start HTTP service.
 */
int main(void)
{
  406ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406cac:	b089      	sub	sp, #36	; 0x24
	/* Initialize the SAM system. */
	sysclk_init();
  406cae:	4bc9      	ldr	r3, [pc, #804]	; (406fd4 <main+0x32c>)
  406cb0:	4798      	blx	r3
	board_init();
  406cb2:	4bc9      	ldr	r3, [pc, #804]	; (406fd8 <main+0x330>)
  406cb4:	4798      	blx	r3
  406cb6:	200e      	movs	r0, #14
  406cb8:	4ec8      	ldr	r6, [pc, #800]	; (406fdc <main+0x334>)
  406cba:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  406cbc:	4dc8      	ldr	r5, [pc, #800]	; (406fe0 <main+0x338>)
  406cbe:	4bc9      	ldr	r3, [pc, #804]	; (406fe4 <main+0x33c>)
  406cc0:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  406cc2:	4ac9      	ldr	r2, [pc, #804]	; (406fe8 <main+0x340>)
  406cc4:	4bc9      	ldr	r3, [pc, #804]	; (406fec <main+0x344>)
  406cc6:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  406cc8:	4ac9      	ldr	r2, [pc, #804]	; (406ff0 <main+0x348>)
  406cca:	4bca      	ldr	r3, [pc, #808]	; (406ff4 <main+0x34c>)
  406ccc:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  406cce:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  406cd2:	9302      	str	r3, [sp, #8]
	usart_settings.char_length = opt->charlength;
  406cd4:	23c0      	movs	r3, #192	; 0xc0
  406cd6:	9303      	str	r3, [sp, #12]
	usart_settings.parity_type = opt->paritytype;
  406cd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  406cdc:	9304      	str	r3, [sp, #16]
	usart_settings.stop_bits= opt->stopbits;
  406cde:	2400      	movs	r4, #0
  406ce0:	9405      	str	r4, [sp, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  406ce2:	9406      	str	r4, [sp, #24]
  406ce4:	200e      	movs	r0, #14
  406ce6:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  406ce8:	4ac3      	ldr	r2, [pc, #780]	; (406ff8 <main+0x350>)
  406cea:	a902      	add	r1, sp, #8
  406cec:	4628      	mov	r0, r5
  406cee:	4bc3      	ldr	r3, [pc, #780]	; (406ffc <main+0x354>)
  406cf0:	4798      	blx	r3
		usart_enable_tx(p_usart);
  406cf2:	4628      	mov	r0, r5
  406cf4:	4bc2      	ldr	r3, [pc, #776]	; (407000 <main+0x358>)
  406cf6:	4798      	blx	r3
		usart_enable_rx(p_usart);
  406cf8:	4628      	mov	r0, r5
  406cfa:	4bc2      	ldr	r3, [pc, #776]	; (407004 <main+0x35c>)
  406cfc:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  406cfe:	4ec2      	ldr	r6, [pc, #776]	; (407008 <main+0x360>)
  406d00:	6833      	ldr	r3, [r6, #0]
  406d02:	4621      	mov	r1, r4
  406d04:	6898      	ldr	r0, [r3, #8]
  406d06:	4dc1      	ldr	r5, [pc, #772]	; (40700c <main+0x364>)
  406d08:	47a8      	blx	r5
	setbuf(stdin, NULL);
  406d0a:	6833      	ldr	r3, [r6, #0]
  406d0c:	4621      	mov	r1, r4
  406d0e:	6858      	ldr	r0, [r3, #4]
  406d10:	47a8      	blx	r5
	setbuf(stdout, NULL);
  406d12:	6833      	ldr	r3, [r6, #0]
  406d14:	4621      	mov	r1, r4
  406d16:	6898      	ldr	r0, [r3, #8]
  406d18:	47a8      	blx	r5

	/* Configure debug UART */
	configure_console();

	printf("--- Console configured\r\n");
  406d1a:	48bd      	ldr	r0, [pc, #756]	; (407010 <main+0x368>)
  406d1c:	4cbd      	ldr	r4, [pc, #756]	; (407014 <main+0x36c>)
  406d1e:	47a0      	blx	r4
	printf("--- READ_MODE: %u", READ_MODE);
  406d20:	2101      	movs	r1, #1
  406d22:	48bd      	ldr	r0, [pc, #756]	; (407018 <main+0x370>)
  406d24:	47a0      	blx	r4

	/* Bring up the ethernet interface & initialize timer0, channel0. */
	init_ethernet();
  406d26:	4bbd      	ldr	r3, [pc, #756]	; (40701c <main+0x374>)
  406d28:	4798      	blx	r3
	
	printf("--- Ethernet initialized\r\n");
  406d2a:	48bd      	ldr	r0, [pc, #756]	; (407020 <main+0x378>)
  406d2c:	47a0      	blx	r4

	/* Bring up the web server. */
	//httpd_init();
	echo_init();
  406d2e:	4bbd      	ldr	r3, [pc, #756]	; (407024 <main+0x37c>)
  406d30:	4798      	blx	r3
	printf("--- HTTP initialized\r\n");
  406d32:	48bd      	ldr	r0, [pc, #756]	; (407028 <main+0x380>)
  406d34:	47a0      	blx	r4
  406d36:	4dbd      	ldr	r5, [pc, #756]	; (40702c <main+0x384>)
  406d38:	1d2c      	adds	r4, r5, #4
  406d3a:	f8df 8324 	ldr.w	r8, [pc, #804]	; 407060 <main+0x3b8>
  406d3e:	f8df c324 	ldr.w	ip, [pc, #804]	; 407064 <main+0x3bc>
  406d42:	350c      	adds	r5, #12
  406d44:	46a6      	mov	lr, r4
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406d46:	4fba      	ldr	r7, [pc, #744]	; (407030 <main+0x388>)
	return 1U << (pin & 0x1F);
  406d48:	2601      	movs	r6, #1
	
	
	// ---- IO SETUP ----
	for(uint8_t i = 0; i < 8 ; i++){
		ioport_set_pin_dir(counterA.outputPins[i], IOPORT_DIR_INPUT);
  406d4a:	f81e 3b01 	ldrb.w	r3, [lr], #1
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406d4e:	eb07 1a53 	add.w	sl, r7, r3, lsr #5
  406d52:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
	return 1U << (pin & 0x1F);
  406d56:	f003 031f 	and.w	r3, r3, #31
  406d5a:	fa06 f103 	lsl.w	r1, r6, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406d5e:	f8ca 1014 	str.w	r1, [sl, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406d62:	f8ca 10a0 	str.w	r1, [sl, #160]	; 0xa0
		ioport_set_pin_dir(counterB.outputPins[i], IOPORT_DIR_INPUT);
  406d66:	f818 3b01 	ldrb.w	r3, [r8], #1
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406d6a:	eb07 1953 	add.w	r9, r7, r3, lsr #5
  406d6e:	ea4f 2949 	mov.w	r9, r9, lsl #9
	return 1U << (pin & 0x1F);
  406d72:	f003 031f 	and.w	r3, r3, #31
  406d76:	fa06 f203 	lsl.w	r2, r6, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406d7a:	f8c9 2014 	str.w	r2, [r9, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406d7e:	f8c9 20a0 	str.w	r2, [r9, #160]	; 0xa0
		ioport_set_pin_dir(counterC.outputPins[i], IOPORT_DIR_INPUT);
  406d82:	f81c 3b01 	ldrb.w	r3, [ip], #1
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406d86:	eb07 1053 	add.w	r0, r7, r3, lsr #5
  406d8a:	0240      	lsls	r0, r0, #9
	return 1U << (pin & 0x1F);
  406d8c:	f003 031f 	and.w	r3, r3, #31
  406d90:	fa06 f303 	lsl.w	r3, r6, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406d94:	6143      	str	r3, [r0, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406d96:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
		base->PIO_PUDR = mask;
  406d9a:	f8ca 1060 	str.w	r1, [sl, #96]	; 0x60
		base->PIO_PPDER = mask;
  406d9e:	f8ca 1094 	str.w	r1, [sl, #148]	; 0x94
		base->PIO_MDDR = mask;
  406da2:	f8ca 1054 	str.w	r1, [sl, #84]	; 0x54
		base->PIO_IFDR = mask;
  406da6:	f8ca 1024 	str.w	r1, [sl, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406daa:	f8ca 1080 	str.w	r1, [sl, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406dae:	f8da b070 	ldr.w	fp, [sl, #112]	; 0x70
  406db2:	43c9      	mvns	r1, r1
  406db4:	ea0b 0b01 	and.w	fp, fp, r1
  406db8:	f8ca b070 	str.w	fp, [sl, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406dbc:	f8da b074 	ldr.w	fp, [sl, #116]	; 0x74
  406dc0:	ea01 010b 	and.w	r1, r1, fp
  406dc4:	f8ca 1074 	str.w	r1, [sl, #116]	; 0x74
		base->PIO_PUDR = mask;
  406dc8:	f8c9 2060 	str.w	r2, [r9, #96]	; 0x60
		base->PIO_PPDER = mask;
  406dcc:	f8c9 2094 	str.w	r2, [r9, #148]	; 0x94
		base->PIO_MDDR = mask;
  406dd0:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
		base->PIO_IFDR = mask;
  406dd4:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406dd8:	f8c9 2080 	str.w	r2, [r9, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406ddc:	f8d9 1070 	ldr.w	r1, [r9, #112]	; 0x70
  406de0:	43d2      	mvns	r2, r2
  406de2:	4011      	ands	r1, r2
  406de4:	f8c9 1070 	str.w	r1, [r9, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406de8:	f8d9 1074 	ldr.w	r1, [r9, #116]	; 0x74
  406dec:	400a      	ands	r2, r1
  406dee:	f8c9 2074 	str.w	r2, [r9, #116]	; 0x74
		base->PIO_PUDR = mask;
  406df2:	6603      	str	r3, [r0, #96]	; 0x60
		base->PIO_PPDER = mask;
  406df4:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
		base->PIO_MDDR = mask;
  406df8:	6543      	str	r3, [r0, #84]	; 0x54
		base->PIO_IFDR = mask;
  406dfa:	6243      	str	r3, [r0, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406dfc:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406e00:	6f02      	ldr	r2, [r0, #112]	; 0x70
  406e02:	43db      	mvns	r3, r3
  406e04:	401a      	ands	r2, r3
  406e06:	6702      	str	r2, [r0, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406e08:	6f42      	ldr	r2, [r0, #116]	; 0x74
  406e0a:	4013      	ands	r3, r2
  406e0c:	6743      	str	r3, [r0, #116]	; 0x74
	for(uint8_t i = 0; i < 8 ; i++){
  406e0e:	45ae      	cmp	lr, r5
  406e10:	d19b      	bne.n	406d4a <main+0xa2>
		ioport_set_pin_mode(counterA.outputPins[i], IOPORT_MODE_PULLDOWN);
		ioport_set_pin_mode(counterB.outputPins[i], IOPORT_MODE_PULLDOWN);
		ioport_set_pin_mode(counterC.outputPins[i], IOPORT_MODE_PULLDOWN);
	}
	
	printf("--- Counter data pins configured\r\n");
  406e12:	4888      	ldr	r0, [pc, #544]	; (407034 <main+0x38c>)
  406e14:	4b7f      	ldr	r3, [pc, #508]	; (407014 <main+0x36c>)
  406e16:	4798      	blx	r3
  406e18:	4884      	ldr	r0, [pc, #528]	; (40702c <main+0x384>)
  406e1a:	4e87      	ldr	r6, [pc, #540]	; (407038 <main+0x390>)
  406e1c:	4d87      	ldr	r5, [pc, #540]	; (40703c <main+0x394>)
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406e1e:	4984      	ldr	r1, [pc, #528]	; (407030 <main+0x388>)
	return 1U << (pin & 0x1F);
  406e20:	2201      	movs	r2, #1
	
	for(uint8_t i = 0; i < 4 ; i++){
		ioport_set_pin_dir(counterA.selectPins[i], IOPORT_DIR_OUTPUT);
  406e22:	f810 3b01 	ldrb.w	r3, [r0], #1
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406e26:	eb01 1753 	add.w	r7, r1, r3, lsr #5
  406e2a:	027f      	lsls	r7, r7, #9
	return 1U << (pin & 0x1F);
  406e2c:	f003 031f 	and.w	r3, r3, #31
  406e30:	fa02 f303 	lsl.w	r3, r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  406e34:	613b      	str	r3, [r7, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406e36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		ioport_set_pin_dir(counterB.selectPins[i], IOPORT_DIR_OUTPUT);
  406e3a:	f816 3b01 	ldrb.w	r3, [r6], #1
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406e3e:	eb01 1753 	add.w	r7, r1, r3, lsr #5
  406e42:	027f      	lsls	r7, r7, #9
	return 1U << (pin & 0x1F);
  406e44:	f003 031f 	and.w	r3, r3, #31
  406e48:	fa02 f303 	lsl.w	r3, r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  406e4c:	613b      	str	r3, [r7, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		ioport_set_pin_dir(counterC.selectPins[i], IOPORT_DIR_OUTPUT);
  406e52:	f815 3b01 	ldrb.w	r3, [r5], #1
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406e56:	eb01 1753 	add.w	r7, r1, r3, lsr #5
  406e5a:	027f      	lsls	r7, r7, #9
	return 1U << (pin & 0x1F);
  406e5c:	f003 031f 	and.w	r3, r3, #31
  406e60:	fa02 f303 	lsl.w	r3, r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  406e64:	613b      	str	r3, [r7, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406e66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	for(uint8_t i = 0; i < 4 ; i++){
  406e6a:	4284      	cmp	r4, r0
  406e6c:	d1d9      	bne.n	406e22 <main+0x17a>
	}
	
	printf("--- Counter select pins configured\r\n");
  406e6e:	4874      	ldr	r0, [pc, #464]	; (407040 <main+0x398>)
  406e70:	4e68      	ldr	r6, [pc, #416]	; (407014 <main+0x36c>)
  406e72:	47b0      	blx	r6
	
	ioport_set_pin_dir(counterA.registerClkPin, IOPORT_DIR_OUTPUT);
  406e74:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 40702c <main+0x384>
  406e78:	f89a 300c 	ldrb.w	r3, [sl, #12]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406e7c:	4c6c      	ldr	r4, [pc, #432]	; (407030 <main+0x388>)
  406e7e:	eb04 1253 	add.w	r2, r4, r3, lsr #5
  406e82:	0252      	lsls	r2, r2, #9
	return 1U << (pin & 0x1F);
  406e84:	f003 031f 	and.w	r3, r3, #31
  406e88:	2501      	movs	r5, #1
  406e8a:	fa05 f303 	lsl.w	r3, r5, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  406e8e:	6113      	str	r3, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406e90:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	ioport_set_pin_dir(counterB.registerClkPin, IOPORT_DIR_OUTPUT);
  406e94:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 407038 <main+0x390>
  406e98:	f899 300c 	ldrb.w	r3, [r9, #12]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406e9c:	eb04 1253 	add.w	r2, r4, r3, lsr #5
  406ea0:	0252      	lsls	r2, r2, #9
	return 1U << (pin & 0x1F);
  406ea2:	f003 031f 	and.w	r3, r3, #31
  406ea6:	fa05 f303 	lsl.w	r3, r5, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  406eaa:	6113      	str	r3, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406eac:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	ioport_set_pin_dir(counterC.registerClkPin, IOPORT_DIR_OUTPUT);
  406eb0:	f8df 8188 	ldr.w	r8, [pc, #392]	; 40703c <main+0x394>
  406eb4:	f898 300c 	ldrb.w	r3, [r8, #12]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406eb8:	eb04 1253 	add.w	r2, r4, r3, lsr #5
  406ebc:	0252      	lsls	r2, r2, #9
	return 1U << (pin & 0x1F);
  406ebe:	f003 031f 	and.w	r3, r3, #31
  406ec2:	fa05 f303 	lsl.w	r3, r5, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  406ec6:	6113      	str	r3, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406ec8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	
	printf("--- Counter register clock pins configured\r\n");
  406ecc:	485d      	ldr	r0, [pc, #372]	; (407044 <main+0x39c>)
  406ece:	47b0      	blx	r6
	
	ioport_set_pin_dir(counterA.clearPin, IOPORT_DIR_OUTPUT);
  406ed0:	f89a 000d 	ldrb.w	r0, [sl, #13]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406ed4:	eb04 1350 	add.w	r3, r4, r0, lsr #5
  406ed8:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
  406eda:	f000 021f 	and.w	r2, r0, #31
  406ede:	fa05 f202 	lsl.w	r2, r5, r2
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  406ee2:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406ee4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_mode(counterA.clearPin, IOPORT_MODE_PULLDOWN);
  406ee8:	2110      	movs	r1, #16
  406eea:	4f57      	ldr	r7, [pc, #348]	; (407048 <main+0x3a0>)
  406eec:	47b8      	blx	r7
	ioport_set_pin_dir(counterB.clearPin, IOPORT_DIR_OUTPUT);
  406eee:	f899 000d 	ldrb.w	r0, [r9, #13]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406ef2:	eb04 1350 	add.w	r3, r4, r0, lsr #5
  406ef6:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
  406ef8:	f000 021f 	and.w	r2, r0, #31
  406efc:	fa05 f202 	lsl.w	r2, r5, r2
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  406f00:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406f02:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_mode(counterB.clearPin, IOPORT_MODE_PULLDOWN);
  406f06:	2110      	movs	r1, #16
  406f08:	47b8      	blx	r7
	ioport_set_pin_dir(counterC.clearPin, IOPORT_DIR_OUTPUT);
  406f0a:	f898 000d 	ldrb.w	r0, [r8, #13]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406f0e:	eb04 1350 	add.w	r3, r4, r0, lsr #5
  406f12:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
  406f14:	f000 021f 	and.w	r2, r0, #31
  406f18:	fa05 f202 	lsl.w	r2, r5, r2
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  406f1c:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406f1e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_mode(counterC.clearPin, IOPORT_MODE_PULLDOWN);
  406f22:	2110      	movs	r1, #16
  406f24:	47b8      	blx	r7
	
	ioport_set_pin_level(counterA.clearPin, HIGH);
  406f26:	f89a 300d 	ldrb.w	r3, [sl, #13]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406f2a:	eb04 1253 	add.w	r2, r4, r3, lsr #5
  406f2e:	0252      	lsls	r2, r2, #9
	return 1U << (pin & 0x1F);
  406f30:	f003 031f 	and.w	r3, r3, #31
  406f34:	fa05 f303 	lsl.w	r3, r5, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  406f38:	6313      	str	r3, [r2, #48]	; 0x30
	ioport_set_pin_level(counterB.clearPin, HIGH);
  406f3a:	f899 300d 	ldrb.w	r3, [r9, #13]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406f3e:	eb04 1253 	add.w	r2, r4, r3, lsr #5
  406f42:	0252      	lsls	r2, r2, #9
	return 1U << (pin & 0x1F);
  406f44:	f003 031f 	and.w	r3, r3, #31
  406f48:	fa05 f303 	lsl.w	r3, r5, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  406f4c:	6313      	str	r3, [r2, #48]	; 0x30
	ioport_set_pin_level(counterC.clearPin, HIGH);
  406f4e:	f898 200d 	ldrb.w	r2, [r8, #13]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406f52:	eb04 1352 	add.w	r3, r4, r2, lsr #5
  406f56:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
  406f58:	f002 021f 	and.w	r2, r2, #31
  406f5c:	4095      	lsls	r5, r2
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  406f5e:	631d      	str	r5, [r3, #48]	; 0x30
	
	printf("--- Counter clear pins configured\r\n");
  406f60:	483a      	ldr	r0, [pc, #232]	; (40704c <main+0x3a4>)
  406f62:	47b0      	blx	r6
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406f64:	4d3a      	ldr	r5, [pc, #232]	; (407050 <main+0x3a8>)
  406f66:	f44f 0b80 	mov.w	fp, #4194304	; 0x400000
  406f6a:	f8c5 b014 	str.w	fp, [r5, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406f6e:	f8c5 b0a0 	str.w	fp, [r5, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406f72:	f44f 2a80 	mov.w	sl, #262144	; 0x40000
  406f76:	f8c5 a014 	str.w	sl, [r5, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406f7a:	f8c5 a0a0 	str.w	sl, [r5, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406f7e:	4c35      	ldr	r4, [pc, #212]	; (407054 <main+0x3ac>)
  406f80:	f44f 4980 	mov.w	r9, #16384	; 0x4000
  406f84:	f8c4 9014 	str.w	r9, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406f88:	f8c4 90a0 	str.w	r9, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406f8c:	f44f 7800 	mov.w	r8, #512	; 0x200
  406f90:	f8c4 8014 	str.w	r8, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406f94:	f8c4 80a0 	str.w	r8, [r4, #160]	; 0xa0
	ioport_set_pin_dir(SIGNAL1A_READY_PIN, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(SIGNAL2A_READY_PIN, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(SIGNAL1B_READY_PIN, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(SIGNAL2B_READY_PIN, IOPORT_DIR_INPUT);
	
	printf("--- Set signal ready pin direction\r\n");
  406f98:	482f      	ldr	r0, [pc, #188]	; (407058 <main+0x3b0>)
  406f9a:	47b0      	blx	r6
	
	ioport_set_pin_mode(SIGNAL1A_READY_PIN, (IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE) );
  406f9c:	2188      	movs	r1, #136	; 0x88
  406f9e:	2016      	movs	r0, #22
  406fa0:	47b8      	blx	r7
	ioport_set_pin_mode(SIGNAL2A_READY_PIN, (IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE) );
  406fa2:	2188      	movs	r1, #136	; 0x88
  406fa4:	2012      	movs	r0, #18
  406fa6:	47b8      	blx	r7
	ioport_set_pin_mode(SIGNAL1B_READY_PIN, (IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE) );
  406fa8:	2188      	movs	r1, #136	; 0x88
  406faa:	204e      	movs	r0, #78	; 0x4e
  406fac:	47b8      	blx	r7
	ioport_set_pin_mode(SIGNAL2B_READY_PIN, (IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE) );
  406fae:	2188      	movs	r1, #136	; 0x88
  406fb0:	2049      	movs	r0, #73	; 0x49
  406fb2:	47b8      	blx	r7
	
	printf("--- Set signal ready pin mode\r\n");
  406fb4:	4829      	ldr	r0, [pc, #164]	; (40705c <main+0x3b4>)
  406fb6:	47b0      	blx	r6
		base->PIO_ESR = mask;
  406fb8:	f8c5 b0c0 	str.w	fp, [r5, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  406fbc:	f8c5 b0d4 	str.w	fp, [r5, #212]	; 0xd4
	base->PIO_AIMER = mask;
  406fc0:	f8c5 b0b0 	str.w	fp, [r5, #176]	; 0xb0
		base->PIO_ESR = mask;
  406fc4:	f8c5 a0c0 	str.w	sl, [r5, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  406fc8:	f8c5 a0d4 	str.w	sl, [r5, #212]	; 0xd4
	base->PIO_AIMER = mask;
  406fcc:	f8c5 a0b0 	str.w	sl, [r5, #176]	; 0xb0
  406fd0:	e04a      	b.n	407068 <main+0x3c0>
  406fd2:	bf00      	nop
  406fd4:	004001d5 	.word	0x004001d5
  406fd8:	004002d5 	.word	0x004002d5
  406fdc:	00400ce9 	.word	0x00400ce9
  406fe0:	40028000 	.word	0x40028000
  406fe4:	2040392c 	.word	0x2040392c
  406fe8:	004069b1 	.word	0x004069b1
  406fec:	20403928 	.word	0x20403928
  406ff0:	004068d5 	.word	0x004068d5
  406ff4:	20403924 	.word	0x20403924
  406ff8:	047868c0 	.word	0x047868c0
  406ffc:	00400e55 	.word	0x00400e55
  407000:	00400ea9 	.word	0x00400ea9
  407004:	00400eaf 	.word	0x00400eaf
  407008:	20400064 	.word	0x20400064
  40700c:	00407465 	.word	0x00407465
  407010:	0040d8e0 	.word	0x0040d8e0
  407014:	0040720d 	.word	0x0040720d
  407018:	0040d8fc 	.word	0x0040d8fc
  40701c:	004062e9 	.word	0x004062e9
  407020:	0040d910 	.word	0x0040d910
  407024:	0040646d 	.word	0x0040646d
  407028:	0040d92c 	.word	0x0040d92c
  40702c:	20400034 	.word	0x20400034
  407030:	00200707 	.word	0x00200707
  407034:	0040d944 	.word	0x0040d944
  407038:	20400044 	.word	0x20400044
  40703c:	20400054 	.word	0x20400054
  407040:	0040d968 	.word	0x0040d968
  407044:	0040d990 	.word	0x0040d990
  407048:	004067d1 	.word	0x004067d1
  40704c:	0040d9c0 	.word	0x0040d9c0
  407050:	400e0e00 	.word	0x400e0e00
  407054:	400e1200 	.word	0x400e1200
  407058:	0040d9e4 	.word	0x0040d9e4
  40705c:	0040da0c 	.word	0x0040da0c
  407060:	20400048 	.word	0x20400048
  407064:	20400058 	.word	0x20400058
		base->PIO_ESR = mask;
  407068:	f8c4 90c0 	str.w	r9, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40706c:	f8c4 90d4 	str.w	r9, [r4, #212]	; 0xd4
	base->PIO_AIMER = mask;
  407070:	f8c4 90b0 	str.w	r9, [r4, #176]	; 0xb0
		base->PIO_ESR = mask;
  407074:	f8c4 80c0 	str.w	r8, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  407078:	f8c4 80d4 	str.w	r8, [r4, #212]	; 0xd4
	base->PIO_AIMER = mask;
  40707c:	f8c4 80b0 	str.w	r8, [r4, #176]	; 0xb0
	ioport_set_pin_sense_mode(SIGNAL1A_READY_PIN, (IOPORT_SENSE_RISING));
	ioport_set_pin_sense_mode(SIGNAL2A_READY_PIN, (IOPORT_SENSE_RISING));
	ioport_set_pin_sense_mode(SIGNAL1B_READY_PIN, (IOPORT_SENSE_RISING));
	ioport_set_pin_sense_mode(SIGNAL2B_READY_PIN, (IOPORT_SENSE_RISING));
	
	printf("--- Set signal ready pin sense\r\n");
  407080:	4838      	ldr	r0, [pc, #224]	; (407164 <main+0x4bc>)
  407082:	47b0      	blx	r6
	
	pio_handler_set(PIOA, ID_PIOA, (SIGNAL1A_READY_MASK | SIGNAL2A_READY_MASK), (PIO_PULLUP | PIO_DEBOUNCE | PIO_IT_RISE_EDGE), CountReady_Handler);
  407084:	f8df 8130 	ldr.w	r8, [pc, #304]	; 4071b8 <main+0x510>
  407088:	f8cd 8000 	str.w	r8, [sp]
  40708c:	2379      	movs	r3, #121	; 0x79
  40708e:	f44f 0288 	mov.w	r2, #4456448	; 0x440000
  407092:	210a      	movs	r1, #10
  407094:	4628      	mov	r0, r5
  407096:	4f34      	ldr	r7, [pc, #208]	; (407168 <main+0x4c0>)
  407098:	47b8      	blx	r7
	pio_handler_set(PIOC, ID_PIOC, (SIGNAL1B_READY_MASK | SIGNAL2B_READY_MASK), (PIO_PULLUP | PIO_DEBOUNCE | PIO_IT_RISE_EDGE), CountReady_Handler);
  40709a:	f8cd 8000 	str.w	r8, [sp]
  40709e:	2379      	movs	r3, #121	; 0x79
  4070a0:	f44f 4284 	mov.w	r2, #16896	; 0x4200
  4070a4:	210c      	movs	r1, #12
  4070a6:	4620      	mov	r0, r4
  4070a8:	47b8      	blx	r7
	
	printf("--- Set signal ready handler\r\n");
  4070aa:	4830      	ldr	r0, [pc, #192]	; (40716c <main+0x4c4>)
  4070ac:	47b0      	blx	r6
  4070ae:	4b30      	ldr	r3, [pc, #192]	; (407170 <main+0x4c8>)
  4070b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4070b4:	601a      	str	r2, [r3, #0]
  4070b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4070ba:	601a      	str	r2, [r3, #0]
	
	NVIC_EnableIRQ((IRQn_Type) ID_PIOA);
	NVIC_EnableIRQ((IRQn_Type) ID_PIOC);
	
	printf("--- Enabled IRQ\r\n");
  4070bc:	482d      	ldr	r0, [pc, #180]	; (407174 <main+0x4cc>)
  4070be:	47b0      	blx	r6
	
	pio_handler_set_priority(PIOA, (IRQn_Type) ID_PIOA, IRQ_PRIOR_PIO);
  4070c0:	2200      	movs	r2, #0
  4070c2:	210a      	movs	r1, #10
  4070c4:	4628      	mov	r0, r5
  4070c6:	4f2c      	ldr	r7, [pc, #176]	; (407178 <main+0x4d0>)
  4070c8:	47b8      	blx	r7
	pio_handler_set_priority(PIOC, (IRQn_Type) ID_PIOB, IRQ_PRIOR_PIO);
  4070ca:	2200      	movs	r2, #0
  4070cc:	210b      	movs	r1, #11
  4070ce:	4620      	mov	r0, r4
  4070d0:	47b8      	blx	r7
	
	printf("--- Set handler priority\r\n");
  4070d2:	482a      	ldr	r0, [pc, #168]	; (40717c <main+0x4d4>)
  4070d4:	47b0      	blx	r6
	
	pio_enable_interrupt(PIOA, (SIGNAL1A_READY_MASK | SIGNAL2A_READY_MASK));
  4070d6:	f44f 0188 	mov.w	r1, #4456448	; 0x440000
  4070da:	4628      	mov	r0, r5
  4070dc:	4d28      	ldr	r5, [pc, #160]	; (407180 <main+0x4d8>)
  4070de:	47a8      	blx	r5
	pio_enable_interrupt(PIOC, (SIGNAL1B_READY_MASK | SIGNAL2B_READY_MASK));
  4070e0:	f44f 4184 	mov.w	r1, #16896	; 0x4200
  4070e4:	4620      	mov	r0, r4
  4070e6:	47a8      	blx	r5
	
	printf("--- Enabled interrupt\r\n");
  4070e8:	4826      	ldr	r0, [pc, #152]	; (407184 <main+0x4dc>)
  4070ea:	47b0      	blx	r6
	printf("--- Enabled interrupt\r\n");
#endif


	// ---- Signal Flags ----
	sig1A_flag = false;
  4070ec:	2300      	movs	r3, #0
  4070ee:	4a26      	ldr	r2, [pc, #152]	; (407188 <main+0x4e0>)
  4070f0:	7013      	strb	r3, [r2, #0]
	sig2A_flag = false;
  4070f2:	4a26      	ldr	r2, [pc, #152]	; (40718c <main+0x4e4>)
  4070f4:	7013      	strb	r3, [r2, #0]
	sig1B_flag = false;
  4070f6:	4a26      	ldr	r2, [pc, #152]	; (407190 <main+0x4e8>)
  4070f8:	7013      	strb	r3, [r2, #0]
	sig2B_flag = false;
  4070fa:	4a26      	ldr	r2, [pc, #152]	; (407194 <main+0x4ec>)
  4070fc:	7013      	strb	r3, [r2, #0]
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  4070fe:	4a26      	ldr	r2, [pc, #152]	; (407198 <main+0x4f0>)
  407100:	4926      	ldr	r1, [pc, #152]	; (40719c <main+0x4f4>)
  407102:	6051      	str	r1, [r2, #4]
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  407104:	20e0      	movs	r0, #224	; 0xe0
  407106:	4926      	ldr	r1, [pc, #152]	; (4071a0 <main+0x4f8>)
  407108:	f881 0023 	strb.w	r0, [r1, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  40710c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  40710e:	2307      	movs	r3, #7
  407110:	6013      	str	r3, [r2, #0]
	if (SysTick_Config(sysclk_get_cpu_hz() / 1000)) {
		printf("!F! Systick configuration error\r\n\r\n");
		while (1);
	}

	printf("--- Starting Main Loop ---\r\n\r\n");
  407112:	4824      	ldr	r0, [pc, #144]	; (4071a4 <main+0x4fc>)
  407114:	47b0      	blx	r6
	
	while (true){
	#if (READ_MODE)
		if(sig1A_flag && sig2A_flag){
  407116:	4c1c      	ldr	r4, [pc, #112]	; (407188 <main+0x4e0>)
  407118:	4e1c      	ldr	r6, [pc, #112]	; (40718c <main+0x4e4>)
			sig1A_flag = false;
			sig2A_flag = false;
			sig1B_flag = false;
  40711a:	4d1d      	ldr	r5, [pc, #116]	; (407190 <main+0x4e8>)
  40711c:	e00c      	b.n	407138 <main+0x490>
			sig1A_flag = false;
  40711e:	2300      	movs	r3, #0
  407120:	7023      	strb	r3, [r4, #0]
			sig2A_flag = false;
  407122:	7033      	strb	r3, [r6, #0]
			sig1B_flag = false;
  407124:	702b      	strb	r3, [r5, #0]
			sig2B_flag = false;
  407126:	4a1b      	ldr	r2, [pc, #108]	; (407194 <main+0x4ec>)
  407128:	7013      	strb	r3, [r2, #0]
			printCountValue(counterA);
  40712a:	4b1f      	ldr	r3, [pc, #124]	; (4071a8 <main+0x500>)
  40712c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40712e:	4f1f      	ldr	r7, [pc, #124]	; (4071ac <main+0x504>)
  407130:	47b8      	blx	r7
  407132:	e006      	b.n	407142 <main+0x49a>
				printCountValue(counterB);
			}
		}
		last_flag = sig1A_flag;
	#endif
		ethernet_task();
  407134:	4b1e      	ldr	r3, [pc, #120]	; (4071b0 <main+0x508>)
  407136:	4798      	blx	r3
		if(sig1A_flag && sig2A_flag){
  407138:	7823      	ldrb	r3, [r4, #0]
  40713a:	b113      	cbz	r3, 407142 <main+0x49a>
  40713c:	7833      	ldrb	r3, [r6, #0]
  40713e:	2b00      	cmp	r3, #0
  407140:	d1ed      	bne.n	40711e <main+0x476>
		if(sig1B_flag && sig2B_flag){
  407142:	782b      	ldrb	r3, [r5, #0]
  407144:	2b00      	cmp	r3, #0
  407146:	d0f5      	beq.n	407134 <main+0x48c>
  407148:	4b12      	ldr	r3, [pc, #72]	; (407194 <main+0x4ec>)
  40714a:	781b      	ldrb	r3, [r3, #0]
  40714c:	2b00      	cmp	r3, #0
  40714e:	d0f1      	beq.n	407134 <main+0x48c>
			sig1A_flag = false;
  407150:	2300      	movs	r3, #0
  407152:	7023      	strb	r3, [r4, #0]
			sig2A_flag = false;
  407154:	7033      	strb	r3, [r6, #0]
			sig2B_flag = false;
  407156:	4a0f      	ldr	r2, [pc, #60]	; (407194 <main+0x4ec>)
  407158:	7013      	strb	r3, [r2, #0]
			printCountValue(counterB);
  40715a:	4b16      	ldr	r3, [pc, #88]	; (4071b4 <main+0x50c>)
  40715c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40715e:	4f13      	ldr	r7, [pc, #76]	; (4071ac <main+0x504>)
  407160:	47b8      	blx	r7
  407162:	e7e7      	b.n	407134 <main+0x48c>
  407164:	0040da2c 	.word	0x0040da2c
  407168:	00400a71 	.word	0x00400a71
  40716c:	0040da50 	.word	0x0040da50
  407170:	e000e100 	.word	0xe000e100
  407174:	0040da70 	.word	0x0040da70
  407178:	00400b45 	.word	0x00400b45
  40717c:	0040da84 	.word	0x0040da84
  407180:	00400a0f 	.word	0x00400a0f
  407184:	0040daa0 	.word	0x0040daa0
  407188:	204049b8 	.word	0x204049b8
  40718c:	204049ba 	.word	0x204049ba
  407190:	204049bb 	.word	0x204049bb
  407194:	204049b9 	.word	0x204049b9
  407198:	e000e010 	.word	0xe000e010
  40719c:	000249ef 	.word	0x000249ef
  4071a0:	e000ed00 	.word	0xe000ed00
  4071a4:	0040dab8 	.word	0x0040dab8
  4071a8:	20400034 	.word	0x20400034
  4071ac:	00406bc5 	.word	0x00406bc5
  4071b0:	00406385 	.word	0x00406385
  4071b4:	20400044 	.word	0x20400044
  4071b8:	00406861 	.word	0x00406861

004071bc <__libc_init_array>:
  4071bc:	b570      	push	{r4, r5, r6, lr}
  4071be:	4e0f      	ldr	r6, [pc, #60]	; (4071fc <__libc_init_array+0x40>)
  4071c0:	4d0f      	ldr	r5, [pc, #60]	; (407200 <__libc_init_array+0x44>)
  4071c2:	1b76      	subs	r6, r6, r5
  4071c4:	10b6      	asrs	r6, r6, #2
  4071c6:	bf18      	it	ne
  4071c8:	2400      	movne	r4, #0
  4071ca:	d005      	beq.n	4071d8 <__libc_init_array+0x1c>
  4071cc:	3401      	adds	r4, #1
  4071ce:	f855 3b04 	ldr.w	r3, [r5], #4
  4071d2:	4798      	blx	r3
  4071d4:	42a6      	cmp	r6, r4
  4071d6:	d1f9      	bne.n	4071cc <__libc_init_array+0x10>
  4071d8:	4e0a      	ldr	r6, [pc, #40]	; (407204 <__libc_init_array+0x48>)
  4071da:	4d0b      	ldr	r5, [pc, #44]	; (407208 <__libc_init_array+0x4c>)
  4071dc:	1b76      	subs	r6, r6, r5
  4071de:	f006 fde7 	bl	40ddb0 <_init>
  4071e2:	10b6      	asrs	r6, r6, #2
  4071e4:	bf18      	it	ne
  4071e6:	2400      	movne	r4, #0
  4071e8:	d006      	beq.n	4071f8 <__libc_init_array+0x3c>
  4071ea:	3401      	adds	r4, #1
  4071ec:	f855 3b04 	ldr.w	r3, [r5], #4
  4071f0:	4798      	blx	r3
  4071f2:	42a6      	cmp	r6, r4
  4071f4:	d1f9      	bne.n	4071ea <__libc_init_array+0x2e>
  4071f6:	bd70      	pop	{r4, r5, r6, pc}
  4071f8:	bd70      	pop	{r4, r5, r6, pc}
  4071fa:	bf00      	nop
  4071fc:	0040ddbc 	.word	0x0040ddbc
  407200:	0040ddbc 	.word	0x0040ddbc
  407204:	0040ddc4 	.word	0x0040ddc4
  407208:	0040ddbc 	.word	0x0040ddbc

0040720c <iprintf>:
  40720c:	b40f      	push	{r0, r1, r2, r3}
  40720e:	b500      	push	{lr}
  407210:	4907      	ldr	r1, [pc, #28]	; (407230 <iprintf+0x24>)
  407212:	b083      	sub	sp, #12
  407214:	ab04      	add	r3, sp, #16
  407216:	6808      	ldr	r0, [r1, #0]
  407218:	f853 2b04 	ldr.w	r2, [r3], #4
  40721c:	6881      	ldr	r1, [r0, #8]
  40721e:	9301      	str	r3, [sp, #4]
  407220:	f001 fdbc 	bl	408d9c <_vfiprintf_r>
  407224:	b003      	add	sp, #12
  407226:	f85d eb04 	ldr.w	lr, [sp], #4
  40722a:	b004      	add	sp, #16
  40722c:	4770      	bx	lr
  40722e:	bf00      	nop
  407230:	20400064 	.word	0x20400064

00407234 <memcmp>:
  407234:	2a03      	cmp	r2, #3
  407236:	b470      	push	{r4, r5, r6}
  407238:	d922      	bls.n	407280 <memcmp+0x4c>
  40723a:	ea40 0301 	orr.w	r3, r0, r1
  40723e:	079b      	lsls	r3, r3, #30
  407240:	d011      	beq.n	407266 <memcmp+0x32>
  407242:	7803      	ldrb	r3, [r0, #0]
  407244:	780c      	ldrb	r4, [r1, #0]
  407246:	42a3      	cmp	r3, r4
  407248:	d11d      	bne.n	407286 <memcmp+0x52>
  40724a:	440a      	add	r2, r1
  40724c:	3101      	adds	r1, #1
  40724e:	e005      	b.n	40725c <memcmp+0x28>
  407250:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  407254:	f811 4b01 	ldrb.w	r4, [r1], #1
  407258:	42a3      	cmp	r3, r4
  40725a:	d114      	bne.n	407286 <memcmp+0x52>
  40725c:	4291      	cmp	r1, r2
  40725e:	d1f7      	bne.n	407250 <memcmp+0x1c>
  407260:	2000      	movs	r0, #0
  407262:	bc70      	pop	{r4, r5, r6}
  407264:	4770      	bx	lr
  407266:	680d      	ldr	r5, [r1, #0]
  407268:	6806      	ldr	r6, [r0, #0]
  40726a:	42ae      	cmp	r6, r5
  40726c:	460c      	mov	r4, r1
  40726e:	4603      	mov	r3, r0
  407270:	f101 0104 	add.w	r1, r1, #4
  407274:	f100 0004 	add.w	r0, r0, #4
  407278:	d108      	bne.n	40728c <memcmp+0x58>
  40727a:	3a04      	subs	r2, #4
  40727c:	2a03      	cmp	r2, #3
  40727e:	d8f2      	bhi.n	407266 <memcmp+0x32>
  407280:	2a00      	cmp	r2, #0
  407282:	d1de      	bne.n	407242 <memcmp+0xe>
  407284:	e7ec      	b.n	407260 <memcmp+0x2c>
  407286:	1b18      	subs	r0, r3, r4
  407288:	bc70      	pop	{r4, r5, r6}
  40728a:	4770      	bx	lr
  40728c:	4621      	mov	r1, r4
  40728e:	4618      	mov	r0, r3
  407290:	e7d7      	b.n	407242 <memcmp+0xe>
  407292:	bf00      	nop

00407294 <memcpy>:
  407294:	4684      	mov	ip, r0
  407296:	ea41 0300 	orr.w	r3, r1, r0
  40729a:	f013 0303 	ands.w	r3, r3, #3
  40729e:	d16d      	bne.n	40737c <memcpy+0xe8>
  4072a0:	3a40      	subs	r2, #64	; 0x40
  4072a2:	d341      	bcc.n	407328 <memcpy+0x94>
  4072a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4072a8:	f840 3b04 	str.w	r3, [r0], #4
  4072ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4072b0:	f840 3b04 	str.w	r3, [r0], #4
  4072b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4072b8:	f840 3b04 	str.w	r3, [r0], #4
  4072bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4072c0:	f840 3b04 	str.w	r3, [r0], #4
  4072c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4072c8:	f840 3b04 	str.w	r3, [r0], #4
  4072cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4072d0:	f840 3b04 	str.w	r3, [r0], #4
  4072d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4072d8:	f840 3b04 	str.w	r3, [r0], #4
  4072dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4072e0:	f840 3b04 	str.w	r3, [r0], #4
  4072e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4072e8:	f840 3b04 	str.w	r3, [r0], #4
  4072ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4072f0:	f840 3b04 	str.w	r3, [r0], #4
  4072f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4072f8:	f840 3b04 	str.w	r3, [r0], #4
  4072fc:	f851 3b04 	ldr.w	r3, [r1], #4
  407300:	f840 3b04 	str.w	r3, [r0], #4
  407304:	f851 3b04 	ldr.w	r3, [r1], #4
  407308:	f840 3b04 	str.w	r3, [r0], #4
  40730c:	f851 3b04 	ldr.w	r3, [r1], #4
  407310:	f840 3b04 	str.w	r3, [r0], #4
  407314:	f851 3b04 	ldr.w	r3, [r1], #4
  407318:	f840 3b04 	str.w	r3, [r0], #4
  40731c:	f851 3b04 	ldr.w	r3, [r1], #4
  407320:	f840 3b04 	str.w	r3, [r0], #4
  407324:	3a40      	subs	r2, #64	; 0x40
  407326:	d2bd      	bcs.n	4072a4 <memcpy+0x10>
  407328:	3230      	adds	r2, #48	; 0x30
  40732a:	d311      	bcc.n	407350 <memcpy+0xbc>
  40732c:	f851 3b04 	ldr.w	r3, [r1], #4
  407330:	f840 3b04 	str.w	r3, [r0], #4
  407334:	f851 3b04 	ldr.w	r3, [r1], #4
  407338:	f840 3b04 	str.w	r3, [r0], #4
  40733c:	f851 3b04 	ldr.w	r3, [r1], #4
  407340:	f840 3b04 	str.w	r3, [r0], #4
  407344:	f851 3b04 	ldr.w	r3, [r1], #4
  407348:	f840 3b04 	str.w	r3, [r0], #4
  40734c:	3a10      	subs	r2, #16
  40734e:	d2ed      	bcs.n	40732c <memcpy+0x98>
  407350:	320c      	adds	r2, #12
  407352:	d305      	bcc.n	407360 <memcpy+0xcc>
  407354:	f851 3b04 	ldr.w	r3, [r1], #4
  407358:	f840 3b04 	str.w	r3, [r0], #4
  40735c:	3a04      	subs	r2, #4
  40735e:	d2f9      	bcs.n	407354 <memcpy+0xc0>
  407360:	3204      	adds	r2, #4
  407362:	d008      	beq.n	407376 <memcpy+0xe2>
  407364:	07d2      	lsls	r2, r2, #31
  407366:	bf1c      	itt	ne
  407368:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40736c:	f800 3b01 	strbne.w	r3, [r0], #1
  407370:	d301      	bcc.n	407376 <memcpy+0xe2>
  407372:	880b      	ldrh	r3, [r1, #0]
  407374:	8003      	strh	r3, [r0, #0]
  407376:	4660      	mov	r0, ip
  407378:	4770      	bx	lr
  40737a:	bf00      	nop
  40737c:	2a08      	cmp	r2, #8
  40737e:	d313      	bcc.n	4073a8 <memcpy+0x114>
  407380:	078b      	lsls	r3, r1, #30
  407382:	d08d      	beq.n	4072a0 <memcpy+0xc>
  407384:	f010 0303 	ands.w	r3, r0, #3
  407388:	d08a      	beq.n	4072a0 <memcpy+0xc>
  40738a:	f1c3 0304 	rsb	r3, r3, #4
  40738e:	1ad2      	subs	r2, r2, r3
  407390:	07db      	lsls	r3, r3, #31
  407392:	bf1c      	itt	ne
  407394:	f811 3b01 	ldrbne.w	r3, [r1], #1
  407398:	f800 3b01 	strbne.w	r3, [r0], #1
  40739c:	d380      	bcc.n	4072a0 <memcpy+0xc>
  40739e:	f831 3b02 	ldrh.w	r3, [r1], #2
  4073a2:	f820 3b02 	strh.w	r3, [r0], #2
  4073a6:	e77b      	b.n	4072a0 <memcpy+0xc>
  4073a8:	3a04      	subs	r2, #4
  4073aa:	d3d9      	bcc.n	407360 <memcpy+0xcc>
  4073ac:	3a01      	subs	r2, #1
  4073ae:	f811 3b01 	ldrb.w	r3, [r1], #1
  4073b2:	f800 3b01 	strb.w	r3, [r0], #1
  4073b6:	d2f9      	bcs.n	4073ac <memcpy+0x118>
  4073b8:	780b      	ldrb	r3, [r1, #0]
  4073ba:	7003      	strb	r3, [r0, #0]
  4073bc:	784b      	ldrb	r3, [r1, #1]
  4073be:	7043      	strb	r3, [r0, #1]
  4073c0:	788b      	ldrb	r3, [r1, #2]
  4073c2:	7083      	strb	r3, [r0, #2]
  4073c4:	4660      	mov	r0, ip
  4073c6:	4770      	bx	lr

004073c8 <memset>:
  4073c8:	b470      	push	{r4, r5, r6}
  4073ca:	0786      	lsls	r6, r0, #30
  4073cc:	d046      	beq.n	40745c <memset+0x94>
  4073ce:	1e54      	subs	r4, r2, #1
  4073d0:	2a00      	cmp	r2, #0
  4073d2:	d041      	beq.n	407458 <memset+0x90>
  4073d4:	b2ca      	uxtb	r2, r1
  4073d6:	4603      	mov	r3, r0
  4073d8:	e002      	b.n	4073e0 <memset+0x18>
  4073da:	f114 34ff 	adds.w	r4, r4, #4294967295
  4073de:	d33b      	bcc.n	407458 <memset+0x90>
  4073e0:	f803 2b01 	strb.w	r2, [r3], #1
  4073e4:	079d      	lsls	r5, r3, #30
  4073e6:	d1f8      	bne.n	4073da <memset+0x12>
  4073e8:	2c03      	cmp	r4, #3
  4073ea:	d92e      	bls.n	40744a <memset+0x82>
  4073ec:	b2cd      	uxtb	r5, r1
  4073ee:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4073f2:	2c0f      	cmp	r4, #15
  4073f4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4073f8:	d919      	bls.n	40742e <memset+0x66>
  4073fa:	f103 0210 	add.w	r2, r3, #16
  4073fe:	4626      	mov	r6, r4
  407400:	3e10      	subs	r6, #16
  407402:	2e0f      	cmp	r6, #15
  407404:	f842 5c10 	str.w	r5, [r2, #-16]
  407408:	f842 5c0c 	str.w	r5, [r2, #-12]
  40740c:	f842 5c08 	str.w	r5, [r2, #-8]
  407410:	f842 5c04 	str.w	r5, [r2, #-4]
  407414:	f102 0210 	add.w	r2, r2, #16
  407418:	d8f2      	bhi.n	407400 <memset+0x38>
  40741a:	f1a4 0210 	sub.w	r2, r4, #16
  40741e:	f022 020f 	bic.w	r2, r2, #15
  407422:	f004 040f 	and.w	r4, r4, #15
  407426:	3210      	adds	r2, #16
  407428:	2c03      	cmp	r4, #3
  40742a:	4413      	add	r3, r2
  40742c:	d90d      	bls.n	40744a <memset+0x82>
  40742e:	461e      	mov	r6, r3
  407430:	4622      	mov	r2, r4
  407432:	3a04      	subs	r2, #4
  407434:	2a03      	cmp	r2, #3
  407436:	f846 5b04 	str.w	r5, [r6], #4
  40743a:	d8fa      	bhi.n	407432 <memset+0x6a>
  40743c:	1f22      	subs	r2, r4, #4
  40743e:	f022 0203 	bic.w	r2, r2, #3
  407442:	3204      	adds	r2, #4
  407444:	4413      	add	r3, r2
  407446:	f004 0403 	and.w	r4, r4, #3
  40744a:	b12c      	cbz	r4, 407458 <memset+0x90>
  40744c:	b2c9      	uxtb	r1, r1
  40744e:	441c      	add	r4, r3
  407450:	f803 1b01 	strb.w	r1, [r3], #1
  407454:	429c      	cmp	r4, r3
  407456:	d1fb      	bne.n	407450 <memset+0x88>
  407458:	bc70      	pop	{r4, r5, r6}
  40745a:	4770      	bx	lr
  40745c:	4614      	mov	r4, r2
  40745e:	4603      	mov	r3, r0
  407460:	e7c2      	b.n	4073e8 <memset+0x20>
  407462:	bf00      	nop

00407464 <setbuf>:
  407464:	2900      	cmp	r1, #0
  407466:	bf0c      	ite	eq
  407468:	2202      	moveq	r2, #2
  40746a:	2200      	movne	r2, #0
  40746c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407470:	f000 b800 	b.w	407474 <setvbuf>

00407474 <setvbuf>:
  407474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  407478:	4c61      	ldr	r4, [pc, #388]	; (407600 <setvbuf+0x18c>)
  40747a:	6825      	ldr	r5, [r4, #0]
  40747c:	b083      	sub	sp, #12
  40747e:	4604      	mov	r4, r0
  407480:	460f      	mov	r7, r1
  407482:	4690      	mov	r8, r2
  407484:	461e      	mov	r6, r3
  407486:	b115      	cbz	r5, 40748e <setvbuf+0x1a>
  407488:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40748a:	2b00      	cmp	r3, #0
  40748c:	d064      	beq.n	407558 <setvbuf+0xe4>
  40748e:	f1b8 0f02 	cmp.w	r8, #2
  407492:	d006      	beq.n	4074a2 <setvbuf+0x2e>
  407494:	f1b8 0f01 	cmp.w	r8, #1
  407498:	f200 809f 	bhi.w	4075da <setvbuf+0x166>
  40749c:	2e00      	cmp	r6, #0
  40749e:	f2c0 809c 	blt.w	4075da <setvbuf+0x166>
  4074a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4074a4:	07d8      	lsls	r0, r3, #31
  4074a6:	d534      	bpl.n	407512 <setvbuf+0x9e>
  4074a8:	4621      	mov	r1, r4
  4074aa:	4628      	mov	r0, r5
  4074ac:	f003 fbd2 	bl	40ac54 <_fflush_r>
  4074b0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4074b2:	b141      	cbz	r1, 4074c6 <setvbuf+0x52>
  4074b4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4074b8:	4299      	cmp	r1, r3
  4074ba:	d002      	beq.n	4074c2 <setvbuf+0x4e>
  4074bc:	4628      	mov	r0, r5
  4074be:	f003 fd47 	bl	40af50 <_free_r>
  4074c2:	2300      	movs	r3, #0
  4074c4:	6323      	str	r3, [r4, #48]	; 0x30
  4074c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4074ca:	2200      	movs	r2, #0
  4074cc:	61a2      	str	r2, [r4, #24]
  4074ce:	6062      	str	r2, [r4, #4]
  4074d0:	061a      	lsls	r2, r3, #24
  4074d2:	d43a      	bmi.n	40754a <setvbuf+0xd6>
  4074d4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4074d8:	f023 0303 	bic.w	r3, r3, #3
  4074dc:	f1b8 0f02 	cmp.w	r8, #2
  4074e0:	81a3      	strh	r3, [r4, #12]
  4074e2:	d01d      	beq.n	407520 <setvbuf+0xac>
  4074e4:	ab01      	add	r3, sp, #4
  4074e6:	466a      	mov	r2, sp
  4074e8:	4621      	mov	r1, r4
  4074ea:	4628      	mov	r0, r5
  4074ec:	f003 ffdc 	bl	40b4a8 <__swhatbuf_r>
  4074f0:	89a3      	ldrh	r3, [r4, #12]
  4074f2:	4318      	orrs	r0, r3
  4074f4:	81a0      	strh	r0, [r4, #12]
  4074f6:	2e00      	cmp	r6, #0
  4074f8:	d132      	bne.n	407560 <setvbuf+0xec>
  4074fa:	9e00      	ldr	r6, [sp, #0]
  4074fc:	4630      	mov	r0, r6
  4074fe:	f004 f84b 	bl	40b598 <malloc>
  407502:	4607      	mov	r7, r0
  407504:	2800      	cmp	r0, #0
  407506:	d06b      	beq.n	4075e0 <setvbuf+0x16c>
  407508:	89a3      	ldrh	r3, [r4, #12]
  40750a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40750e:	81a3      	strh	r3, [r4, #12]
  407510:	e028      	b.n	407564 <setvbuf+0xf0>
  407512:	89a3      	ldrh	r3, [r4, #12]
  407514:	0599      	lsls	r1, r3, #22
  407516:	d4c7      	bmi.n	4074a8 <setvbuf+0x34>
  407518:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40751a:	f003 ffc1 	bl	40b4a0 <__retarget_lock_acquire_recursive>
  40751e:	e7c3      	b.n	4074a8 <setvbuf+0x34>
  407520:	2500      	movs	r5, #0
  407522:	6e61      	ldr	r1, [r4, #100]	; 0x64
  407524:	2600      	movs	r6, #0
  407526:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40752a:	f043 0302 	orr.w	r3, r3, #2
  40752e:	2001      	movs	r0, #1
  407530:	60a6      	str	r6, [r4, #8]
  407532:	07ce      	lsls	r6, r1, #31
  407534:	81a3      	strh	r3, [r4, #12]
  407536:	6022      	str	r2, [r4, #0]
  407538:	6122      	str	r2, [r4, #16]
  40753a:	6160      	str	r0, [r4, #20]
  40753c:	d401      	bmi.n	407542 <setvbuf+0xce>
  40753e:	0598      	lsls	r0, r3, #22
  407540:	d53e      	bpl.n	4075c0 <setvbuf+0x14c>
  407542:	4628      	mov	r0, r5
  407544:	b003      	add	sp, #12
  407546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40754a:	6921      	ldr	r1, [r4, #16]
  40754c:	4628      	mov	r0, r5
  40754e:	f003 fcff 	bl	40af50 <_free_r>
  407552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407556:	e7bd      	b.n	4074d4 <setvbuf+0x60>
  407558:	4628      	mov	r0, r5
  40755a:	f003 fbd3 	bl	40ad04 <__sinit>
  40755e:	e796      	b.n	40748e <setvbuf+0x1a>
  407560:	2f00      	cmp	r7, #0
  407562:	d0cb      	beq.n	4074fc <setvbuf+0x88>
  407564:	6bab      	ldr	r3, [r5, #56]	; 0x38
  407566:	2b00      	cmp	r3, #0
  407568:	d033      	beq.n	4075d2 <setvbuf+0x15e>
  40756a:	9b00      	ldr	r3, [sp, #0]
  40756c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407570:	6027      	str	r7, [r4, #0]
  407572:	429e      	cmp	r6, r3
  407574:	bf1c      	itt	ne
  407576:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  40757a:	81a2      	strhne	r2, [r4, #12]
  40757c:	f1b8 0f01 	cmp.w	r8, #1
  407580:	bf04      	itt	eq
  407582:	f042 0201 	orreq.w	r2, r2, #1
  407586:	81a2      	strheq	r2, [r4, #12]
  407588:	b292      	uxth	r2, r2
  40758a:	f012 0308 	ands.w	r3, r2, #8
  40758e:	6127      	str	r7, [r4, #16]
  407590:	6166      	str	r6, [r4, #20]
  407592:	d00e      	beq.n	4075b2 <setvbuf+0x13e>
  407594:	07d1      	lsls	r1, r2, #31
  407596:	d51a      	bpl.n	4075ce <setvbuf+0x15a>
  407598:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40759a:	4276      	negs	r6, r6
  40759c:	2300      	movs	r3, #0
  40759e:	f015 0501 	ands.w	r5, r5, #1
  4075a2:	61a6      	str	r6, [r4, #24]
  4075a4:	60a3      	str	r3, [r4, #8]
  4075a6:	d009      	beq.n	4075bc <setvbuf+0x148>
  4075a8:	2500      	movs	r5, #0
  4075aa:	4628      	mov	r0, r5
  4075ac:	b003      	add	sp, #12
  4075ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4075b2:	60a3      	str	r3, [r4, #8]
  4075b4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4075b6:	f015 0501 	ands.w	r5, r5, #1
  4075ba:	d1f5      	bne.n	4075a8 <setvbuf+0x134>
  4075bc:	0593      	lsls	r3, r2, #22
  4075be:	d4c0      	bmi.n	407542 <setvbuf+0xce>
  4075c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4075c2:	f003 ff6f 	bl	40b4a4 <__retarget_lock_release_recursive>
  4075c6:	4628      	mov	r0, r5
  4075c8:	b003      	add	sp, #12
  4075ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4075ce:	60a6      	str	r6, [r4, #8]
  4075d0:	e7f0      	b.n	4075b4 <setvbuf+0x140>
  4075d2:	4628      	mov	r0, r5
  4075d4:	f003 fb96 	bl	40ad04 <__sinit>
  4075d8:	e7c7      	b.n	40756a <setvbuf+0xf6>
  4075da:	f04f 35ff 	mov.w	r5, #4294967295
  4075de:	e7b0      	b.n	407542 <setvbuf+0xce>
  4075e0:	f8dd 9000 	ldr.w	r9, [sp]
  4075e4:	45b1      	cmp	r9, r6
  4075e6:	d004      	beq.n	4075f2 <setvbuf+0x17e>
  4075e8:	4648      	mov	r0, r9
  4075ea:	f003 ffd5 	bl	40b598 <malloc>
  4075ee:	4607      	mov	r7, r0
  4075f0:	b920      	cbnz	r0, 4075fc <setvbuf+0x188>
  4075f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4075f6:	f04f 35ff 	mov.w	r5, #4294967295
  4075fa:	e792      	b.n	407522 <setvbuf+0xae>
  4075fc:	464e      	mov	r6, r9
  4075fe:	e783      	b.n	407508 <setvbuf+0x94>
  407600:	20400064 	.word	0x20400064

00407604 <sprintf>:
  407604:	b40e      	push	{r1, r2, r3}
  407606:	b5f0      	push	{r4, r5, r6, r7, lr}
  407608:	b09c      	sub	sp, #112	; 0x70
  40760a:	ab21      	add	r3, sp, #132	; 0x84
  40760c:	490f      	ldr	r1, [pc, #60]	; (40764c <sprintf+0x48>)
  40760e:	f853 2b04 	ldr.w	r2, [r3], #4
  407612:	9301      	str	r3, [sp, #4]
  407614:	4605      	mov	r5, r0
  407616:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40761a:	6808      	ldr	r0, [r1, #0]
  40761c:	9502      	str	r5, [sp, #8]
  40761e:	f44f 7702 	mov.w	r7, #520	; 0x208
  407622:	f64f 76ff 	movw	r6, #65535	; 0xffff
  407626:	a902      	add	r1, sp, #8
  407628:	9506      	str	r5, [sp, #24]
  40762a:	f8ad 7014 	strh.w	r7, [sp, #20]
  40762e:	9404      	str	r4, [sp, #16]
  407630:	9407      	str	r4, [sp, #28]
  407632:	f8ad 6016 	strh.w	r6, [sp, #22]
  407636:	f000 f943 	bl	4078c0 <_svfprintf_r>
  40763a:	9b02      	ldr	r3, [sp, #8]
  40763c:	2200      	movs	r2, #0
  40763e:	701a      	strb	r2, [r3, #0]
  407640:	b01c      	add	sp, #112	; 0x70
  407642:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  407646:	b003      	add	sp, #12
  407648:	4770      	bx	lr
  40764a:	bf00      	nop
  40764c:	20400064 	.word	0x20400064

00407650 <strcat>:
  407650:	0783      	lsls	r3, r0, #30
  407652:	b510      	push	{r4, lr}
  407654:	4604      	mov	r4, r0
  407656:	d110      	bne.n	40767a <strcat+0x2a>
  407658:	6802      	ldr	r2, [r0, #0]
  40765a:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  40765e:	ea23 0302 	bic.w	r3, r3, r2
  407662:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  407666:	d108      	bne.n	40767a <strcat+0x2a>
  407668:	f850 2f04 	ldr.w	r2, [r0, #4]!
  40766c:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  407670:	ea23 0302 	bic.w	r3, r3, r2
  407674:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  407678:	d0f6      	beq.n	407668 <strcat+0x18>
  40767a:	7803      	ldrb	r3, [r0, #0]
  40767c:	b11b      	cbz	r3, 407686 <strcat+0x36>
  40767e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  407682:	2b00      	cmp	r3, #0
  407684:	d1fb      	bne.n	40767e <strcat+0x2e>
  407686:	f000 f803 	bl	407690 <strcpy>
  40768a:	4620      	mov	r0, r4
  40768c:	bd10      	pop	{r4, pc}
  40768e:	bf00      	nop

00407690 <strcpy>:
  407690:	ea80 0201 	eor.w	r2, r0, r1
  407694:	4684      	mov	ip, r0
  407696:	f012 0f03 	tst.w	r2, #3
  40769a:	d14f      	bne.n	40773c <strcpy+0xac>
  40769c:	f011 0f03 	tst.w	r1, #3
  4076a0:	d132      	bne.n	407708 <strcpy+0x78>
  4076a2:	f84d 4d04 	str.w	r4, [sp, #-4]!
  4076a6:	f011 0f04 	tst.w	r1, #4
  4076aa:	f851 3b04 	ldr.w	r3, [r1], #4
  4076ae:	d00b      	beq.n	4076c8 <strcpy+0x38>
  4076b0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  4076b4:	439a      	bics	r2, r3
  4076b6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4076ba:	bf04      	itt	eq
  4076bc:	f84c 3b04 	streq.w	r3, [ip], #4
  4076c0:	f851 3b04 	ldreq.w	r3, [r1], #4
  4076c4:	d116      	bne.n	4076f4 <strcpy+0x64>
  4076c6:	bf00      	nop
  4076c8:	f851 4b04 	ldr.w	r4, [r1], #4
  4076cc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  4076d0:	439a      	bics	r2, r3
  4076d2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4076d6:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  4076da:	d10b      	bne.n	4076f4 <strcpy+0x64>
  4076dc:	f84c 3b04 	str.w	r3, [ip], #4
  4076e0:	43a2      	bics	r2, r4
  4076e2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4076e6:	bf04      	itt	eq
  4076e8:	f851 3b04 	ldreq.w	r3, [r1], #4
  4076ec:	f84c 4b04 	streq.w	r4, [ip], #4
  4076f0:	d0ea      	beq.n	4076c8 <strcpy+0x38>
  4076f2:	4623      	mov	r3, r4
  4076f4:	f80c 3b01 	strb.w	r3, [ip], #1
  4076f8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4076fc:	ea4f 2333 	mov.w	r3, r3, ror #8
  407700:	d1f8      	bne.n	4076f4 <strcpy+0x64>
  407702:	f85d 4b04 	ldr.w	r4, [sp], #4
  407706:	4770      	bx	lr
  407708:	f011 0f01 	tst.w	r1, #1
  40770c:	d006      	beq.n	40771c <strcpy+0x8c>
  40770e:	f811 2b01 	ldrb.w	r2, [r1], #1
  407712:	f80c 2b01 	strb.w	r2, [ip], #1
  407716:	2a00      	cmp	r2, #0
  407718:	bf08      	it	eq
  40771a:	4770      	bxeq	lr
  40771c:	f011 0f02 	tst.w	r1, #2
  407720:	d0bf      	beq.n	4076a2 <strcpy+0x12>
  407722:	f831 2b02 	ldrh.w	r2, [r1], #2
  407726:	f012 0fff 	tst.w	r2, #255	; 0xff
  40772a:	bf16      	itet	ne
  40772c:	f82c 2b02 	strhne.w	r2, [ip], #2
  407730:	f88c 2000 	strbeq.w	r2, [ip]
  407734:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  407738:	d1b3      	bne.n	4076a2 <strcpy+0x12>
  40773a:	4770      	bx	lr
  40773c:	f811 2b01 	ldrb.w	r2, [r1], #1
  407740:	f80c 2b01 	strb.w	r2, [ip], #1
  407744:	2a00      	cmp	r2, #0
  407746:	d1f9      	bne.n	40773c <strcpy+0xac>
  407748:	4770      	bx	lr
  40774a:	bf00      	nop
	...

00407780 <strlen>:
  407780:	f890 f000 	pld	[r0]
  407784:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  407788:	f020 0107 	bic.w	r1, r0, #7
  40778c:	f06f 0c00 	mvn.w	ip, #0
  407790:	f010 0407 	ands.w	r4, r0, #7
  407794:	f891 f020 	pld	[r1, #32]
  407798:	f040 8049 	bne.w	40782e <strlen+0xae>
  40779c:	f04f 0400 	mov.w	r4, #0
  4077a0:	f06f 0007 	mvn.w	r0, #7
  4077a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4077a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4077ac:	f100 0008 	add.w	r0, r0, #8
  4077b0:	fa82 f24c 	uadd8	r2, r2, ip
  4077b4:	faa4 f28c 	sel	r2, r4, ip
  4077b8:	fa83 f34c 	uadd8	r3, r3, ip
  4077bc:	faa2 f38c 	sel	r3, r2, ip
  4077c0:	bb4b      	cbnz	r3, 407816 <strlen+0x96>
  4077c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4077c6:	fa82 f24c 	uadd8	r2, r2, ip
  4077ca:	f100 0008 	add.w	r0, r0, #8
  4077ce:	faa4 f28c 	sel	r2, r4, ip
  4077d2:	fa83 f34c 	uadd8	r3, r3, ip
  4077d6:	faa2 f38c 	sel	r3, r2, ip
  4077da:	b9e3      	cbnz	r3, 407816 <strlen+0x96>
  4077dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4077e0:	fa82 f24c 	uadd8	r2, r2, ip
  4077e4:	f100 0008 	add.w	r0, r0, #8
  4077e8:	faa4 f28c 	sel	r2, r4, ip
  4077ec:	fa83 f34c 	uadd8	r3, r3, ip
  4077f0:	faa2 f38c 	sel	r3, r2, ip
  4077f4:	b97b      	cbnz	r3, 407816 <strlen+0x96>
  4077f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4077fa:	f101 0120 	add.w	r1, r1, #32
  4077fe:	fa82 f24c 	uadd8	r2, r2, ip
  407802:	f100 0008 	add.w	r0, r0, #8
  407806:	faa4 f28c 	sel	r2, r4, ip
  40780a:	fa83 f34c 	uadd8	r3, r3, ip
  40780e:	faa2 f38c 	sel	r3, r2, ip
  407812:	2b00      	cmp	r3, #0
  407814:	d0c6      	beq.n	4077a4 <strlen+0x24>
  407816:	2a00      	cmp	r2, #0
  407818:	bf04      	itt	eq
  40781a:	3004      	addeq	r0, #4
  40781c:	461a      	moveq	r2, r3
  40781e:	ba12      	rev	r2, r2
  407820:	fab2 f282 	clz	r2, r2
  407824:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  407828:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40782c:	4770      	bx	lr
  40782e:	e9d1 2300 	ldrd	r2, r3, [r1]
  407832:	f004 0503 	and.w	r5, r4, #3
  407836:	f1c4 0000 	rsb	r0, r4, #0
  40783a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40783e:	f014 0f04 	tst.w	r4, #4
  407842:	f891 f040 	pld	[r1, #64]	; 0x40
  407846:	fa0c f505 	lsl.w	r5, ip, r5
  40784a:	ea62 0205 	orn	r2, r2, r5
  40784e:	bf1c      	itt	ne
  407850:	ea63 0305 	ornne	r3, r3, r5
  407854:	4662      	movne	r2, ip
  407856:	f04f 0400 	mov.w	r4, #0
  40785a:	e7a9      	b.n	4077b0 <strlen+0x30>

0040785c <strncpy>:
  40785c:	ea40 0301 	orr.w	r3, r0, r1
  407860:	f013 0f03 	tst.w	r3, #3
  407864:	b470      	push	{r4, r5, r6}
  407866:	4603      	mov	r3, r0
  407868:	d024      	beq.n	4078b4 <strncpy+0x58>
  40786a:	b1a2      	cbz	r2, 407896 <strncpy+0x3a>
  40786c:	780c      	ldrb	r4, [r1, #0]
  40786e:	701c      	strb	r4, [r3, #0]
  407870:	3a01      	subs	r2, #1
  407872:	3301      	adds	r3, #1
  407874:	3101      	adds	r1, #1
  407876:	b13c      	cbz	r4, 407888 <strncpy+0x2c>
  407878:	b16a      	cbz	r2, 407896 <strncpy+0x3a>
  40787a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40787e:	f803 4b01 	strb.w	r4, [r3], #1
  407882:	3a01      	subs	r2, #1
  407884:	2c00      	cmp	r4, #0
  407886:	d1f7      	bne.n	407878 <strncpy+0x1c>
  407888:	b12a      	cbz	r2, 407896 <strncpy+0x3a>
  40788a:	441a      	add	r2, r3
  40788c:	2100      	movs	r1, #0
  40788e:	f803 1b01 	strb.w	r1, [r3], #1
  407892:	429a      	cmp	r2, r3
  407894:	d1fb      	bne.n	40788e <strncpy+0x32>
  407896:	bc70      	pop	{r4, r5, r6}
  407898:	4770      	bx	lr
  40789a:	460e      	mov	r6, r1
  40789c:	f851 5b04 	ldr.w	r5, [r1], #4
  4078a0:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
  4078a4:	ea24 0405 	bic.w	r4, r4, r5
  4078a8:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  4078ac:	d105      	bne.n	4078ba <strncpy+0x5e>
  4078ae:	f843 5b04 	str.w	r5, [r3], #4
  4078b2:	3a04      	subs	r2, #4
  4078b4:	2a03      	cmp	r2, #3
  4078b6:	d8f0      	bhi.n	40789a <strncpy+0x3e>
  4078b8:	e7d7      	b.n	40786a <strncpy+0xe>
  4078ba:	4631      	mov	r1, r6
  4078bc:	e7d6      	b.n	40786c <strncpy+0x10>
  4078be:	bf00      	nop

004078c0 <_svfprintf_r>:
  4078c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4078c4:	b0c3      	sub	sp, #268	; 0x10c
  4078c6:	460c      	mov	r4, r1
  4078c8:	910b      	str	r1, [sp, #44]	; 0x2c
  4078ca:	4692      	mov	sl, r2
  4078cc:	930f      	str	r3, [sp, #60]	; 0x3c
  4078ce:	900c      	str	r0, [sp, #48]	; 0x30
  4078d0:	f003 fdd4 	bl	40b47c <_localeconv_r>
  4078d4:	6803      	ldr	r3, [r0, #0]
  4078d6:	931a      	str	r3, [sp, #104]	; 0x68
  4078d8:	4618      	mov	r0, r3
  4078da:	f7ff ff51 	bl	407780 <strlen>
  4078de:	89a3      	ldrh	r3, [r4, #12]
  4078e0:	9019      	str	r0, [sp, #100]	; 0x64
  4078e2:	0619      	lsls	r1, r3, #24
  4078e4:	d503      	bpl.n	4078ee <_svfprintf_r+0x2e>
  4078e6:	6923      	ldr	r3, [r4, #16]
  4078e8:	2b00      	cmp	r3, #0
  4078ea:	f001 8003 	beq.w	4088f4 <_svfprintf_r+0x1034>
  4078ee:	2300      	movs	r3, #0
  4078f0:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  4078f4:	9313      	str	r3, [sp, #76]	; 0x4c
  4078f6:	9315      	str	r3, [sp, #84]	; 0x54
  4078f8:	9314      	str	r3, [sp, #80]	; 0x50
  4078fa:	9327      	str	r3, [sp, #156]	; 0x9c
  4078fc:	9326      	str	r3, [sp, #152]	; 0x98
  4078fe:	9318      	str	r3, [sp, #96]	; 0x60
  407900:	931b      	str	r3, [sp, #108]	; 0x6c
  407902:	9309      	str	r3, [sp, #36]	; 0x24
  407904:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  407908:	46c8      	mov	r8, r9
  40790a:	9316      	str	r3, [sp, #88]	; 0x58
  40790c:	9317      	str	r3, [sp, #92]	; 0x5c
  40790e:	f89a 3000 	ldrb.w	r3, [sl]
  407912:	4654      	mov	r4, sl
  407914:	b1e3      	cbz	r3, 407950 <_svfprintf_r+0x90>
  407916:	2b25      	cmp	r3, #37	; 0x25
  407918:	d102      	bne.n	407920 <_svfprintf_r+0x60>
  40791a:	e019      	b.n	407950 <_svfprintf_r+0x90>
  40791c:	2b25      	cmp	r3, #37	; 0x25
  40791e:	d003      	beq.n	407928 <_svfprintf_r+0x68>
  407920:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  407924:	2b00      	cmp	r3, #0
  407926:	d1f9      	bne.n	40791c <_svfprintf_r+0x5c>
  407928:	eba4 050a 	sub.w	r5, r4, sl
  40792c:	b185      	cbz	r5, 407950 <_svfprintf_r+0x90>
  40792e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407930:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407932:	f8c8 a000 	str.w	sl, [r8]
  407936:	3301      	adds	r3, #1
  407938:	442a      	add	r2, r5
  40793a:	2b07      	cmp	r3, #7
  40793c:	f8c8 5004 	str.w	r5, [r8, #4]
  407940:	9227      	str	r2, [sp, #156]	; 0x9c
  407942:	9326      	str	r3, [sp, #152]	; 0x98
  407944:	dc7f      	bgt.n	407a46 <_svfprintf_r+0x186>
  407946:	f108 0808 	add.w	r8, r8, #8
  40794a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40794c:	442b      	add	r3, r5
  40794e:	9309      	str	r3, [sp, #36]	; 0x24
  407950:	7823      	ldrb	r3, [r4, #0]
  407952:	2b00      	cmp	r3, #0
  407954:	d07f      	beq.n	407a56 <_svfprintf_r+0x196>
  407956:	2300      	movs	r3, #0
  407958:	461a      	mov	r2, r3
  40795a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40795e:	4619      	mov	r1, r3
  407960:	930d      	str	r3, [sp, #52]	; 0x34
  407962:	469b      	mov	fp, r3
  407964:	f04f 30ff 	mov.w	r0, #4294967295
  407968:	7863      	ldrb	r3, [r4, #1]
  40796a:	900a      	str	r0, [sp, #40]	; 0x28
  40796c:	f104 0a01 	add.w	sl, r4, #1
  407970:	f10a 0a01 	add.w	sl, sl, #1
  407974:	f1a3 0020 	sub.w	r0, r3, #32
  407978:	2858      	cmp	r0, #88	; 0x58
  40797a:	f200 83c1 	bhi.w	408100 <_svfprintf_r+0x840>
  40797e:	e8df f010 	tbh	[pc, r0, lsl #1]
  407982:	0238      	.short	0x0238
  407984:	03bf03bf 	.word	0x03bf03bf
  407988:	03bf0240 	.word	0x03bf0240
  40798c:	03bf03bf 	.word	0x03bf03bf
  407990:	03bf03bf 	.word	0x03bf03bf
  407994:	024503bf 	.word	0x024503bf
  407998:	03bf0203 	.word	0x03bf0203
  40799c:	026b005d 	.word	0x026b005d
  4079a0:	028603bf 	.word	0x028603bf
  4079a4:	039d039d 	.word	0x039d039d
  4079a8:	039d039d 	.word	0x039d039d
  4079ac:	039d039d 	.word	0x039d039d
  4079b0:	039d039d 	.word	0x039d039d
  4079b4:	03bf039d 	.word	0x03bf039d
  4079b8:	03bf03bf 	.word	0x03bf03bf
  4079bc:	03bf03bf 	.word	0x03bf03bf
  4079c0:	03bf03bf 	.word	0x03bf03bf
  4079c4:	03bf03bf 	.word	0x03bf03bf
  4079c8:	033703bf 	.word	0x033703bf
  4079cc:	03bf0357 	.word	0x03bf0357
  4079d0:	03bf0357 	.word	0x03bf0357
  4079d4:	03bf03bf 	.word	0x03bf03bf
  4079d8:	039803bf 	.word	0x039803bf
  4079dc:	03bf03bf 	.word	0x03bf03bf
  4079e0:	03bf03ad 	.word	0x03bf03ad
  4079e4:	03bf03bf 	.word	0x03bf03bf
  4079e8:	03bf03bf 	.word	0x03bf03bf
  4079ec:	03bf0259 	.word	0x03bf0259
  4079f0:	031e03bf 	.word	0x031e03bf
  4079f4:	03bf03bf 	.word	0x03bf03bf
  4079f8:	03bf03bf 	.word	0x03bf03bf
  4079fc:	03bf03bf 	.word	0x03bf03bf
  407a00:	03bf03bf 	.word	0x03bf03bf
  407a04:	03bf03bf 	.word	0x03bf03bf
  407a08:	02db02c6 	.word	0x02db02c6
  407a0c:	03570357 	.word	0x03570357
  407a10:	028b0357 	.word	0x028b0357
  407a14:	03bf02db 	.word	0x03bf02db
  407a18:	029003bf 	.word	0x029003bf
  407a1c:	029d03bf 	.word	0x029d03bf
  407a20:	02b401cc 	.word	0x02b401cc
  407a24:	03bf0208 	.word	0x03bf0208
  407a28:	03bf01e1 	.word	0x03bf01e1
  407a2c:	03bf007e 	.word	0x03bf007e
  407a30:	020d03bf 	.word	0x020d03bf
  407a34:	980d      	ldr	r0, [sp, #52]	; 0x34
  407a36:	930f      	str	r3, [sp, #60]	; 0x3c
  407a38:	4240      	negs	r0, r0
  407a3a:	900d      	str	r0, [sp, #52]	; 0x34
  407a3c:	f04b 0b04 	orr.w	fp, fp, #4
  407a40:	f89a 3000 	ldrb.w	r3, [sl]
  407a44:	e794      	b.n	407970 <_svfprintf_r+0xb0>
  407a46:	aa25      	add	r2, sp, #148	; 0x94
  407a48:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407a4a:	980c      	ldr	r0, [sp, #48]	; 0x30
  407a4c:	f004 fe2e 	bl	40c6ac <__ssprint_r>
  407a50:	b940      	cbnz	r0, 407a64 <_svfprintf_r+0x1a4>
  407a52:	46c8      	mov	r8, r9
  407a54:	e779      	b.n	40794a <_svfprintf_r+0x8a>
  407a56:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  407a58:	b123      	cbz	r3, 407a64 <_svfprintf_r+0x1a4>
  407a5a:	980c      	ldr	r0, [sp, #48]	; 0x30
  407a5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407a5e:	aa25      	add	r2, sp, #148	; 0x94
  407a60:	f004 fe24 	bl	40c6ac <__ssprint_r>
  407a64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407a66:	899b      	ldrh	r3, [r3, #12]
  407a68:	f013 0f40 	tst.w	r3, #64	; 0x40
  407a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407a6e:	bf18      	it	ne
  407a70:	f04f 33ff 	movne.w	r3, #4294967295
  407a74:	9309      	str	r3, [sp, #36]	; 0x24
  407a76:	9809      	ldr	r0, [sp, #36]	; 0x24
  407a78:	b043      	add	sp, #268	; 0x10c
  407a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407a7e:	f01b 0f20 	tst.w	fp, #32
  407a82:	9311      	str	r3, [sp, #68]	; 0x44
  407a84:	f040 81dd 	bne.w	407e42 <_svfprintf_r+0x582>
  407a88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407a8a:	f01b 0f10 	tst.w	fp, #16
  407a8e:	4613      	mov	r3, r2
  407a90:	f040 856e 	bne.w	408570 <_svfprintf_r+0xcb0>
  407a94:	f01b 0f40 	tst.w	fp, #64	; 0x40
  407a98:	f000 856a 	beq.w	408570 <_svfprintf_r+0xcb0>
  407a9c:	8814      	ldrh	r4, [r2, #0]
  407a9e:	3204      	adds	r2, #4
  407aa0:	2500      	movs	r5, #0
  407aa2:	2301      	movs	r3, #1
  407aa4:	920f      	str	r2, [sp, #60]	; 0x3c
  407aa6:	2700      	movs	r7, #0
  407aa8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  407aac:	990a      	ldr	r1, [sp, #40]	; 0x28
  407aae:	1c4a      	adds	r2, r1, #1
  407ab0:	f000 8265 	beq.w	407f7e <_svfprintf_r+0x6be>
  407ab4:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  407ab8:	9207      	str	r2, [sp, #28]
  407aba:	ea54 0205 	orrs.w	r2, r4, r5
  407abe:	f040 8264 	bne.w	407f8a <_svfprintf_r+0x6ca>
  407ac2:	2900      	cmp	r1, #0
  407ac4:	f040 843c 	bne.w	408340 <_svfprintf_r+0xa80>
  407ac8:	2b00      	cmp	r3, #0
  407aca:	f040 84d7 	bne.w	40847c <_svfprintf_r+0xbbc>
  407ace:	f01b 0301 	ands.w	r3, fp, #1
  407ad2:	930e      	str	r3, [sp, #56]	; 0x38
  407ad4:	f000 8604 	beq.w	4086e0 <_svfprintf_r+0xe20>
  407ad8:	ae42      	add	r6, sp, #264	; 0x108
  407ada:	2330      	movs	r3, #48	; 0x30
  407adc:	f806 3d41 	strb.w	r3, [r6, #-65]!
  407ae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407ae2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407ae4:	4293      	cmp	r3, r2
  407ae6:	bfb8      	it	lt
  407ae8:	4613      	movlt	r3, r2
  407aea:	9308      	str	r3, [sp, #32]
  407aec:	2300      	movs	r3, #0
  407aee:	9312      	str	r3, [sp, #72]	; 0x48
  407af0:	b117      	cbz	r7, 407af8 <_svfprintf_r+0x238>
  407af2:	9b08      	ldr	r3, [sp, #32]
  407af4:	3301      	adds	r3, #1
  407af6:	9308      	str	r3, [sp, #32]
  407af8:	9b07      	ldr	r3, [sp, #28]
  407afa:	f013 0302 	ands.w	r3, r3, #2
  407afe:	9310      	str	r3, [sp, #64]	; 0x40
  407b00:	d002      	beq.n	407b08 <_svfprintf_r+0x248>
  407b02:	9b08      	ldr	r3, [sp, #32]
  407b04:	3302      	adds	r3, #2
  407b06:	9308      	str	r3, [sp, #32]
  407b08:	9b07      	ldr	r3, [sp, #28]
  407b0a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  407b0e:	f040 830e 	bne.w	40812e <_svfprintf_r+0x86e>
  407b12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407b14:	9a08      	ldr	r2, [sp, #32]
  407b16:	eba3 0b02 	sub.w	fp, r3, r2
  407b1a:	f1bb 0f00 	cmp.w	fp, #0
  407b1e:	f340 8306 	ble.w	40812e <_svfprintf_r+0x86e>
  407b22:	f1bb 0f10 	cmp.w	fp, #16
  407b26:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407b28:	9a26      	ldr	r2, [sp, #152]	; 0x98
  407b2a:	dd29      	ble.n	407b80 <_svfprintf_r+0x2c0>
  407b2c:	4643      	mov	r3, r8
  407b2e:	4621      	mov	r1, r4
  407b30:	46a8      	mov	r8, r5
  407b32:	2710      	movs	r7, #16
  407b34:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407b36:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  407b38:	e006      	b.n	407b48 <_svfprintf_r+0x288>
  407b3a:	f1ab 0b10 	sub.w	fp, fp, #16
  407b3e:	f1bb 0f10 	cmp.w	fp, #16
  407b42:	f103 0308 	add.w	r3, r3, #8
  407b46:	dd18      	ble.n	407b7a <_svfprintf_r+0x2ba>
  407b48:	3201      	adds	r2, #1
  407b4a:	48b7      	ldr	r0, [pc, #732]	; (407e28 <_svfprintf_r+0x568>)
  407b4c:	9226      	str	r2, [sp, #152]	; 0x98
  407b4e:	3110      	adds	r1, #16
  407b50:	2a07      	cmp	r2, #7
  407b52:	9127      	str	r1, [sp, #156]	; 0x9c
  407b54:	e883 0081 	stmia.w	r3, {r0, r7}
  407b58:	ddef      	ble.n	407b3a <_svfprintf_r+0x27a>
  407b5a:	aa25      	add	r2, sp, #148	; 0x94
  407b5c:	4629      	mov	r1, r5
  407b5e:	4620      	mov	r0, r4
  407b60:	f004 fda4 	bl	40c6ac <__ssprint_r>
  407b64:	2800      	cmp	r0, #0
  407b66:	f47f af7d 	bne.w	407a64 <_svfprintf_r+0x1a4>
  407b6a:	f1ab 0b10 	sub.w	fp, fp, #16
  407b6e:	f1bb 0f10 	cmp.w	fp, #16
  407b72:	9927      	ldr	r1, [sp, #156]	; 0x9c
  407b74:	9a26      	ldr	r2, [sp, #152]	; 0x98
  407b76:	464b      	mov	r3, r9
  407b78:	dce6      	bgt.n	407b48 <_svfprintf_r+0x288>
  407b7a:	4645      	mov	r5, r8
  407b7c:	460c      	mov	r4, r1
  407b7e:	4698      	mov	r8, r3
  407b80:	3201      	adds	r2, #1
  407b82:	4ba9      	ldr	r3, [pc, #676]	; (407e28 <_svfprintf_r+0x568>)
  407b84:	9226      	str	r2, [sp, #152]	; 0x98
  407b86:	445c      	add	r4, fp
  407b88:	2a07      	cmp	r2, #7
  407b8a:	9427      	str	r4, [sp, #156]	; 0x9c
  407b8c:	e888 0808 	stmia.w	r8, {r3, fp}
  407b90:	f300 8498 	bgt.w	4084c4 <_svfprintf_r+0xc04>
  407b94:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407b98:	f108 0808 	add.w	r8, r8, #8
  407b9c:	b177      	cbz	r7, 407bbc <_svfprintf_r+0x2fc>
  407b9e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407ba0:	3301      	adds	r3, #1
  407ba2:	3401      	adds	r4, #1
  407ba4:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  407ba8:	2201      	movs	r2, #1
  407baa:	2b07      	cmp	r3, #7
  407bac:	9427      	str	r4, [sp, #156]	; 0x9c
  407bae:	9326      	str	r3, [sp, #152]	; 0x98
  407bb0:	e888 0006 	stmia.w	r8, {r1, r2}
  407bb4:	f300 83db 	bgt.w	40836e <_svfprintf_r+0xaae>
  407bb8:	f108 0808 	add.w	r8, r8, #8
  407bbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407bbe:	b16b      	cbz	r3, 407bdc <_svfprintf_r+0x31c>
  407bc0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407bc2:	3301      	adds	r3, #1
  407bc4:	3402      	adds	r4, #2
  407bc6:	a91e      	add	r1, sp, #120	; 0x78
  407bc8:	2202      	movs	r2, #2
  407bca:	2b07      	cmp	r3, #7
  407bcc:	9427      	str	r4, [sp, #156]	; 0x9c
  407bce:	9326      	str	r3, [sp, #152]	; 0x98
  407bd0:	e888 0006 	stmia.w	r8, {r1, r2}
  407bd4:	f300 83d6 	bgt.w	408384 <_svfprintf_r+0xac4>
  407bd8:	f108 0808 	add.w	r8, r8, #8
  407bdc:	2d80      	cmp	r5, #128	; 0x80
  407bde:	f000 8315 	beq.w	40820c <_svfprintf_r+0x94c>
  407be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407be4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407be6:	1a9f      	subs	r7, r3, r2
  407be8:	2f00      	cmp	r7, #0
  407bea:	dd36      	ble.n	407c5a <_svfprintf_r+0x39a>
  407bec:	2f10      	cmp	r7, #16
  407bee:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407bf0:	4d8e      	ldr	r5, [pc, #568]	; (407e2c <_svfprintf_r+0x56c>)
  407bf2:	dd27      	ble.n	407c44 <_svfprintf_r+0x384>
  407bf4:	4642      	mov	r2, r8
  407bf6:	4621      	mov	r1, r4
  407bf8:	46b0      	mov	r8, r6
  407bfa:	f04f 0b10 	mov.w	fp, #16
  407bfe:	462e      	mov	r6, r5
  407c00:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407c02:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  407c04:	e004      	b.n	407c10 <_svfprintf_r+0x350>
  407c06:	3f10      	subs	r7, #16
  407c08:	2f10      	cmp	r7, #16
  407c0a:	f102 0208 	add.w	r2, r2, #8
  407c0e:	dd15      	ble.n	407c3c <_svfprintf_r+0x37c>
  407c10:	3301      	adds	r3, #1
  407c12:	3110      	adds	r1, #16
  407c14:	2b07      	cmp	r3, #7
  407c16:	9127      	str	r1, [sp, #156]	; 0x9c
  407c18:	9326      	str	r3, [sp, #152]	; 0x98
  407c1a:	e882 0840 	stmia.w	r2, {r6, fp}
  407c1e:	ddf2      	ble.n	407c06 <_svfprintf_r+0x346>
  407c20:	aa25      	add	r2, sp, #148	; 0x94
  407c22:	4629      	mov	r1, r5
  407c24:	4620      	mov	r0, r4
  407c26:	f004 fd41 	bl	40c6ac <__ssprint_r>
  407c2a:	2800      	cmp	r0, #0
  407c2c:	f47f af1a 	bne.w	407a64 <_svfprintf_r+0x1a4>
  407c30:	3f10      	subs	r7, #16
  407c32:	2f10      	cmp	r7, #16
  407c34:	9927      	ldr	r1, [sp, #156]	; 0x9c
  407c36:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407c38:	464a      	mov	r2, r9
  407c3a:	dce9      	bgt.n	407c10 <_svfprintf_r+0x350>
  407c3c:	4635      	mov	r5, r6
  407c3e:	460c      	mov	r4, r1
  407c40:	4646      	mov	r6, r8
  407c42:	4690      	mov	r8, r2
  407c44:	3301      	adds	r3, #1
  407c46:	443c      	add	r4, r7
  407c48:	2b07      	cmp	r3, #7
  407c4a:	9427      	str	r4, [sp, #156]	; 0x9c
  407c4c:	9326      	str	r3, [sp, #152]	; 0x98
  407c4e:	e888 00a0 	stmia.w	r8, {r5, r7}
  407c52:	f300 8381 	bgt.w	408358 <_svfprintf_r+0xa98>
  407c56:	f108 0808 	add.w	r8, r8, #8
  407c5a:	9b07      	ldr	r3, [sp, #28]
  407c5c:	05df      	lsls	r7, r3, #23
  407c5e:	f100 8268 	bmi.w	408132 <_svfprintf_r+0x872>
  407c62:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407c64:	990e      	ldr	r1, [sp, #56]	; 0x38
  407c66:	f8c8 6000 	str.w	r6, [r8]
  407c6a:	3301      	adds	r3, #1
  407c6c:	440c      	add	r4, r1
  407c6e:	2b07      	cmp	r3, #7
  407c70:	9427      	str	r4, [sp, #156]	; 0x9c
  407c72:	f8c8 1004 	str.w	r1, [r8, #4]
  407c76:	9326      	str	r3, [sp, #152]	; 0x98
  407c78:	f300 834d 	bgt.w	408316 <_svfprintf_r+0xa56>
  407c7c:	f108 0808 	add.w	r8, r8, #8
  407c80:	9b07      	ldr	r3, [sp, #28]
  407c82:	075b      	lsls	r3, r3, #29
  407c84:	d53a      	bpl.n	407cfc <_svfprintf_r+0x43c>
  407c86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407c88:	9a08      	ldr	r2, [sp, #32]
  407c8a:	1a9d      	subs	r5, r3, r2
  407c8c:	2d00      	cmp	r5, #0
  407c8e:	dd35      	ble.n	407cfc <_svfprintf_r+0x43c>
  407c90:	2d10      	cmp	r5, #16
  407c92:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407c94:	dd20      	ble.n	407cd8 <_svfprintf_r+0x418>
  407c96:	2610      	movs	r6, #16
  407c98:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407c9a:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  407c9e:	e004      	b.n	407caa <_svfprintf_r+0x3ea>
  407ca0:	3d10      	subs	r5, #16
  407ca2:	2d10      	cmp	r5, #16
  407ca4:	f108 0808 	add.w	r8, r8, #8
  407ca8:	dd16      	ble.n	407cd8 <_svfprintf_r+0x418>
  407caa:	3301      	adds	r3, #1
  407cac:	4a5e      	ldr	r2, [pc, #376]	; (407e28 <_svfprintf_r+0x568>)
  407cae:	9326      	str	r3, [sp, #152]	; 0x98
  407cb0:	3410      	adds	r4, #16
  407cb2:	2b07      	cmp	r3, #7
  407cb4:	9427      	str	r4, [sp, #156]	; 0x9c
  407cb6:	e888 0044 	stmia.w	r8, {r2, r6}
  407cba:	ddf1      	ble.n	407ca0 <_svfprintf_r+0x3e0>
  407cbc:	aa25      	add	r2, sp, #148	; 0x94
  407cbe:	4659      	mov	r1, fp
  407cc0:	4638      	mov	r0, r7
  407cc2:	f004 fcf3 	bl	40c6ac <__ssprint_r>
  407cc6:	2800      	cmp	r0, #0
  407cc8:	f47f aecc 	bne.w	407a64 <_svfprintf_r+0x1a4>
  407ccc:	3d10      	subs	r5, #16
  407cce:	2d10      	cmp	r5, #16
  407cd0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407cd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407cd4:	46c8      	mov	r8, r9
  407cd6:	dce8      	bgt.n	407caa <_svfprintf_r+0x3ea>
  407cd8:	3301      	adds	r3, #1
  407cda:	4a53      	ldr	r2, [pc, #332]	; (407e28 <_svfprintf_r+0x568>)
  407cdc:	9326      	str	r3, [sp, #152]	; 0x98
  407cde:	442c      	add	r4, r5
  407ce0:	2b07      	cmp	r3, #7
  407ce2:	9427      	str	r4, [sp, #156]	; 0x9c
  407ce4:	e888 0024 	stmia.w	r8, {r2, r5}
  407ce8:	dd08      	ble.n	407cfc <_svfprintf_r+0x43c>
  407cea:	aa25      	add	r2, sp, #148	; 0x94
  407cec:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407cee:	980c      	ldr	r0, [sp, #48]	; 0x30
  407cf0:	f004 fcdc 	bl	40c6ac <__ssprint_r>
  407cf4:	2800      	cmp	r0, #0
  407cf6:	f47f aeb5 	bne.w	407a64 <_svfprintf_r+0x1a4>
  407cfa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407cfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  407d00:	9908      	ldr	r1, [sp, #32]
  407d02:	428a      	cmp	r2, r1
  407d04:	bfac      	ite	ge
  407d06:	189b      	addge	r3, r3, r2
  407d08:	185b      	addlt	r3, r3, r1
  407d0a:	9309      	str	r3, [sp, #36]	; 0x24
  407d0c:	2c00      	cmp	r4, #0
  407d0e:	f040 830d 	bne.w	40832c <_svfprintf_r+0xa6c>
  407d12:	2300      	movs	r3, #0
  407d14:	9326      	str	r3, [sp, #152]	; 0x98
  407d16:	46c8      	mov	r8, r9
  407d18:	e5f9      	b.n	40790e <_svfprintf_r+0x4e>
  407d1a:	9311      	str	r3, [sp, #68]	; 0x44
  407d1c:	f01b 0320 	ands.w	r3, fp, #32
  407d20:	f040 81e3 	bne.w	4080ea <_svfprintf_r+0x82a>
  407d24:	f01b 0210 	ands.w	r2, fp, #16
  407d28:	f040 842e 	bne.w	408588 <_svfprintf_r+0xcc8>
  407d2c:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  407d30:	f000 842a 	beq.w	408588 <_svfprintf_r+0xcc8>
  407d34:	990f      	ldr	r1, [sp, #60]	; 0x3c
  407d36:	4613      	mov	r3, r2
  407d38:	460a      	mov	r2, r1
  407d3a:	3204      	adds	r2, #4
  407d3c:	880c      	ldrh	r4, [r1, #0]
  407d3e:	920f      	str	r2, [sp, #60]	; 0x3c
  407d40:	2500      	movs	r5, #0
  407d42:	e6b0      	b.n	407aa6 <_svfprintf_r+0x1e6>
  407d44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407d46:	9311      	str	r3, [sp, #68]	; 0x44
  407d48:	6816      	ldr	r6, [r2, #0]
  407d4a:	2400      	movs	r4, #0
  407d4c:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  407d50:	1d15      	adds	r5, r2, #4
  407d52:	2e00      	cmp	r6, #0
  407d54:	f000 86a7 	beq.w	408aa6 <_svfprintf_r+0x11e6>
  407d58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407d5a:	1c53      	adds	r3, r2, #1
  407d5c:	f000 8609 	beq.w	408972 <_svfprintf_r+0x10b2>
  407d60:	4621      	mov	r1, r4
  407d62:	4630      	mov	r0, r6
  407d64:	f003 feec 	bl	40bb40 <memchr>
  407d68:	2800      	cmp	r0, #0
  407d6a:	f000 86e1 	beq.w	408b30 <_svfprintf_r+0x1270>
  407d6e:	1b83      	subs	r3, r0, r6
  407d70:	930e      	str	r3, [sp, #56]	; 0x38
  407d72:	940a      	str	r4, [sp, #40]	; 0x28
  407d74:	950f      	str	r5, [sp, #60]	; 0x3c
  407d76:	f8cd b01c 	str.w	fp, [sp, #28]
  407d7a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407d7e:	9308      	str	r3, [sp, #32]
  407d80:	9412      	str	r4, [sp, #72]	; 0x48
  407d82:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407d86:	e6b3      	b.n	407af0 <_svfprintf_r+0x230>
  407d88:	f89a 3000 	ldrb.w	r3, [sl]
  407d8c:	2201      	movs	r2, #1
  407d8e:	212b      	movs	r1, #43	; 0x2b
  407d90:	e5ee      	b.n	407970 <_svfprintf_r+0xb0>
  407d92:	f04b 0b20 	orr.w	fp, fp, #32
  407d96:	f89a 3000 	ldrb.w	r3, [sl]
  407d9a:	e5e9      	b.n	407970 <_svfprintf_r+0xb0>
  407d9c:	9311      	str	r3, [sp, #68]	; 0x44
  407d9e:	2a00      	cmp	r2, #0
  407da0:	f040 8795 	bne.w	408cce <_svfprintf_r+0x140e>
  407da4:	4b22      	ldr	r3, [pc, #136]	; (407e30 <_svfprintf_r+0x570>)
  407da6:	9318      	str	r3, [sp, #96]	; 0x60
  407da8:	f01b 0f20 	tst.w	fp, #32
  407dac:	f040 8111 	bne.w	407fd2 <_svfprintf_r+0x712>
  407db0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407db2:	f01b 0f10 	tst.w	fp, #16
  407db6:	4613      	mov	r3, r2
  407db8:	f040 83e1 	bne.w	40857e <_svfprintf_r+0xcbe>
  407dbc:	f01b 0f40 	tst.w	fp, #64	; 0x40
  407dc0:	f000 83dd 	beq.w	40857e <_svfprintf_r+0xcbe>
  407dc4:	3304      	adds	r3, #4
  407dc6:	8814      	ldrh	r4, [r2, #0]
  407dc8:	930f      	str	r3, [sp, #60]	; 0x3c
  407dca:	2500      	movs	r5, #0
  407dcc:	f01b 0f01 	tst.w	fp, #1
  407dd0:	f000 810c 	beq.w	407fec <_svfprintf_r+0x72c>
  407dd4:	ea54 0305 	orrs.w	r3, r4, r5
  407dd8:	f000 8108 	beq.w	407fec <_svfprintf_r+0x72c>
  407ddc:	2330      	movs	r3, #48	; 0x30
  407dde:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  407de2:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  407de6:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  407dea:	f04b 0b02 	orr.w	fp, fp, #2
  407dee:	2302      	movs	r3, #2
  407df0:	e659      	b.n	407aa6 <_svfprintf_r+0x1e6>
  407df2:	f89a 3000 	ldrb.w	r3, [sl]
  407df6:	2900      	cmp	r1, #0
  407df8:	f47f adba 	bne.w	407970 <_svfprintf_r+0xb0>
  407dfc:	2201      	movs	r2, #1
  407dfe:	2120      	movs	r1, #32
  407e00:	e5b6      	b.n	407970 <_svfprintf_r+0xb0>
  407e02:	f04b 0b01 	orr.w	fp, fp, #1
  407e06:	f89a 3000 	ldrb.w	r3, [sl]
  407e0a:	e5b1      	b.n	407970 <_svfprintf_r+0xb0>
  407e0c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  407e0e:	6823      	ldr	r3, [r4, #0]
  407e10:	930d      	str	r3, [sp, #52]	; 0x34
  407e12:	4618      	mov	r0, r3
  407e14:	2800      	cmp	r0, #0
  407e16:	4623      	mov	r3, r4
  407e18:	f103 0304 	add.w	r3, r3, #4
  407e1c:	f6ff ae0a 	blt.w	407a34 <_svfprintf_r+0x174>
  407e20:	930f      	str	r3, [sp, #60]	; 0x3c
  407e22:	f89a 3000 	ldrb.w	r3, [sl]
  407e26:	e5a3      	b.n	407970 <_svfprintf_r+0xb0>
  407e28:	0040db50 	.word	0x0040db50
  407e2c:	0040db60 	.word	0x0040db60
  407e30:	0040db30 	.word	0x0040db30
  407e34:	f04b 0b10 	orr.w	fp, fp, #16
  407e38:	f01b 0f20 	tst.w	fp, #32
  407e3c:	9311      	str	r3, [sp, #68]	; 0x44
  407e3e:	f43f ae23 	beq.w	407a88 <_svfprintf_r+0x1c8>
  407e42:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407e44:	3507      	adds	r5, #7
  407e46:	f025 0307 	bic.w	r3, r5, #7
  407e4a:	f103 0208 	add.w	r2, r3, #8
  407e4e:	e9d3 4500 	ldrd	r4, r5, [r3]
  407e52:	920f      	str	r2, [sp, #60]	; 0x3c
  407e54:	2301      	movs	r3, #1
  407e56:	e626      	b.n	407aa6 <_svfprintf_r+0x1e6>
  407e58:	f89a 3000 	ldrb.w	r3, [sl]
  407e5c:	2b2a      	cmp	r3, #42	; 0x2a
  407e5e:	f10a 0401 	add.w	r4, sl, #1
  407e62:	f000 8727 	beq.w	408cb4 <_svfprintf_r+0x13f4>
  407e66:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  407e6a:	2809      	cmp	r0, #9
  407e6c:	46a2      	mov	sl, r4
  407e6e:	f200 86ad 	bhi.w	408bcc <_svfprintf_r+0x130c>
  407e72:	2300      	movs	r3, #0
  407e74:	461c      	mov	r4, r3
  407e76:	f81a 3b01 	ldrb.w	r3, [sl], #1
  407e7a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  407e7e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  407e82:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  407e86:	2809      	cmp	r0, #9
  407e88:	d9f5      	bls.n	407e76 <_svfprintf_r+0x5b6>
  407e8a:	940a      	str	r4, [sp, #40]	; 0x28
  407e8c:	e572      	b.n	407974 <_svfprintf_r+0xb4>
  407e8e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  407e92:	f89a 3000 	ldrb.w	r3, [sl]
  407e96:	e56b      	b.n	407970 <_svfprintf_r+0xb0>
  407e98:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  407e9c:	f89a 3000 	ldrb.w	r3, [sl]
  407ea0:	e566      	b.n	407970 <_svfprintf_r+0xb0>
  407ea2:	f89a 3000 	ldrb.w	r3, [sl]
  407ea6:	2b6c      	cmp	r3, #108	; 0x6c
  407ea8:	bf03      	ittte	eq
  407eaa:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  407eae:	f04b 0b20 	orreq.w	fp, fp, #32
  407eb2:	f10a 0a01 	addeq.w	sl, sl, #1
  407eb6:	f04b 0b10 	orrne.w	fp, fp, #16
  407eba:	e559      	b.n	407970 <_svfprintf_r+0xb0>
  407ebc:	2a00      	cmp	r2, #0
  407ebe:	f040 8711 	bne.w	408ce4 <_svfprintf_r+0x1424>
  407ec2:	f01b 0f20 	tst.w	fp, #32
  407ec6:	f040 84f9 	bne.w	4088bc <_svfprintf_r+0xffc>
  407eca:	f01b 0f10 	tst.w	fp, #16
  407ece:	f040 84ac 	bne.w	40882a <_svfprintf_r+0xf6a>
  407ed2:	f01b 0f40 	tst.w	fp, #64	; 0x40
  407ed6:	f000 84a8 	beq.w	40882a <_svfprintf_r+0xf6a>
  407eda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407edc:	6813      	ldr	r3, [r2, #0]
  407ede:	3204      	adds	r2, #4
  407ee0:	920f      	str	r2, [sp, #60]	; 0x3c
  407ee2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  407ee6:	801a      	strh	r2, [r3, #0]
  407ee8:	e511      	b.n	40790e <_svfprintf_r+0x4e>
  407eea:	990f      	ldr	r1, [sp, #60]	; 0x3c
  407eec:	4bb3      	ldr	r3, [pc, #716]	; (4081bc <_svfprintf_r+0x8fc>)
  407eee:	680c      	ldr	r4, [r1, #0]
  407ef0:	9318      	str	r3, [sp, #96]	; 0x60
  407ef2:	2230      	movs	r2, #48	; 0x30
  407ef4:	2378      	movs	r3, #120	; 0x78
  407ef6:	3104      	adds	r1, #4
  407ef8:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  407efc:	9311      	str	r3, [sp, #68]	; 0x44
  407efe:	f04b 0b02 	orr.w	fp, fp, #2
  407f02:	910f      	str	r1, [sp, #60]	; 0x3c
  407f04:	2500      	movs	r5, #0
  407f06:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  407f0a:	2302      	movs	r3, #2
  407f0c:	e5cb      	b.n	407aa6 <_svfprintf_r+0x1e6>
  407f0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  407f10:	9311      	str	r3, [sp, #68]	; 0x44
  407f12:	680a      	ldr	r2, [r1, #0]
  407f14:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  407f18:	2300      	movs	r3, #0
  407f1a:	460a      	mov	r2, r1
  407f1c:	461f      	mov	r7, r3
  407f1e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  407f22:	3204      	adds	r2, #4
  407f24:	2301      	movs	r3, #1
  407f26:	9308      	str	r3, [sp, #32]
  407f28:	f8cd b01c 	str.w	fp, [sp, #28]
  407f2c:	970a      	str	r7, [sp, #40]	; 0x28
  407f2e:	9712      	str	r7, [sp, #72]	; 0x48
  407f30:	920f      	str	r2, [sp, #60]	; 0x3c
  407f32:	930e      	str	r3, [sp, #56]	; 0x38
  407f34:	ae28      	add	r6, sp, #160	; 0xa0
  407f36:	e5df      	b.n	407af8 <_svfprintf_r+0x238>
  407f38:	9311      	str	r3, [sp, #68]	; 0x44
  407f3a:	2a00      	cmp	r2, #0
  407f3c:	f040 86ea 	bne.w	408d14 <_svfprintf_r+0x1454>
  407f40:	f01b 0f20 	tst.w	fp, #32
  407f44:	d15d      	bne.n	408002 <_svfprintf_r+0x742>
  407f46:	f01b 0f10 	tst.w	fp, #16
  407f4a:	f040 8308 	bne.w	40855e <_svfprintf_r+0xc9e>
  407f4e:	f01b 0f40 	tst.w	fp, #64	; 0x40
  407f52:	f000 8304 	beq.w	40855e <_svfprintf_r+0xc9e>
  407f56:	990f      	ldr	r1, [sp, #60]	; 0x3c
  407f58:	f9b1 4000 	ldrsh.w	r4, [r1]
  407f5c:	3104      	adds	r1, #4
  407f5e:	17e5      	asrs	r5, r4, #31
  407f60:	4622      	mov	r2, r4
  407f62:	462b      	mov	r3, r5
  407f64:	910f      	str	r1, [sp, #60]	; 0x3c
  407f66:	2a00      	cmp	r2, #0
  407f68:	f173 0300 	sbcs.w	r3, r3, #0
  407f6c:	db58      	blt.n	408020 <_svfprintf_r+0x760>
  407f6e:	990a      	ldr	r1, [sp, #40]	; 0x28
  407f70:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407f74:	1c4a      	adds	r2, r1, #1
  407f76:	f04f 0301 	mov.w	r3, #1
  407f7a:	f47f ad9b 	bne.w	407ab4 <_svfprintf_r+0x1f4>
  407f7e:	ea54 0205 	orrs.w	r2, r4, r5
  407f82:	f000 81df 	beq.w	408344 <_svfprintf_r+0xa84>
  407f86:	f8cd b01c 	str.w	fp, [sp, #28]
  407f8a:	2b01      	cmp	r3, #1
  407f8c:	f000 827b 	beq.w	408486 <_svfprintf_r+0xbc6>
  407f90:	2b02      	cmp	r3, #2
  407f92:	f040 8206 	bne.w	4083a2 <_svfprintf_r+0xae2>
  407f96:	9818      	ldr	r0, [sp, #96]	; 0x60
  407f98:	464e      	mov	r6, r9
  407f9a:	0923      	lsrs	r3, r4, #4
  407f9c:	f004 010f 	and.w	r1, r4, #15
  407fa0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  407fa4:	092a      	lsrs	r2, r5, #4
  407fa6:	461c      	mov	r4, r3
  407fa8:	4615      	mov	r5, r2
  407faa:	5c43      	ldrb	r3, [r0, r1]
  407fac:	f806 3d01 	strb.w	r3, [r6, #-1]!
  407fb0:	ea54 0305 	orrs.w	r3, r4, r5
  407fb4:	d1f1      	bne.n	407f9a <_svfprintf_r+0x6da>
  407fb6:	eba9 0306 	sub.w	r3, r9, r6
  407fba:	930e      	str	r3, [sp, #56]	; 0x38
  407fbc:	e590      	b.n	407ae0 <_svfprintf_r+0x220>
  407fbe:	9311      	str	r3, [sp, #68]	; 0x44
  407fc0:	2a00      	cmp	r2, #0
  407fc2:	f040 86a3 	bne.w	408d0c <_svfprintf_r+0x144c>
  407fc6:	4b7e      	ldr	r3, [pc, #504]	; (4081c0 <_svfprintf_r+0x900>)
  407fc8:	9318      	str	r3, [sp, #96]	; 0x60
  407fca:	f01b 0f20 	tst.w	fp, #32
  407fce:	f43f aeef 	beq.w	407db0 <_svfprintf_r+0x4f0>
  407fd2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407fd4:	3507      	adds	r5, #7
  407fd6:	f025 0307 	bic.w	r3, r5, #7
  407fda:	f103 0208 	add.w	r2, r3, #8
  407fde:	f01b 0f01 	tst.w	fp, #1
  407fe2:	920f      	str	r2, [sp, #60]	; 0x3c
  407fe4:	e9d3 4500 	ldrd	r4, r5, [r3]
  407fe8:	f47f aef4 	bne.w	407dd4 <_svfprintf_r+0x514>
  407fec:	2302      	movs	r3, #2
  407fee:	e55a      	b.n	407aa6 <_svfprintf_r+0x1e6>
  407ff0:	9311      	str	r3, [sp, #68]	; 0x44
  407ff2:	2a00      	cmp	r2, #0
  407ff4:	f040 8686 	bne.w	408d04 <_svfprintf_r+0x1444>
  407ff8:	f04b 0b10 	orr.w	fp, fp, #16
  407ffc:	f01b 0f20 	tst.w	fp, #32
  408000:	d0a1      	beq.n	407f46 <_svfprintf_r+0x686>
  408002:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  408004:	3507      	adds	r5, #7
  408006:	f025 0507 	bic.w	r5, r5, #7
  40800a:	e9d5 2300 	ldrd	r2, r3, [r5]
  40800e:	2a00      	cmp	r2, #0
  408010:	f105 0108 	add.w	r1, r5, #8
  408014:	461d      	mov	r5, r3
  408016:	f173 0300 	sbcs.w	r3, r3, #0
  40801a:	910f      	str	r1, [sp, #60]	; 0x3c
  40801c:	4614      	mov	r4, r2
  40801e:	daa6      	bge.n	407f6e <_svfprintf_r+0x6ae>
  408020:	272d      	movs	r7, #45	; 0x2d
  408022:	4264      	negs	r4, r4
  408024:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  408028:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40802c:	2301      	movs	r3, #1
  40802e:	e53d      	b.n	407aac <_svfprintf_r+0x1ec>
  408030:	9311      	str	r3, [sp, #68]	; 0x44
  408032:	2a00      	cmp	r2, #0
  408034:	f040 8662 	bne.w	408cfc <_svfprintf_r+0x143c>
  408038:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40803a:	3507      	adds	r5, #7
  40803c:	f025 0307 	bic.w	r3, r5, #7
  408040:	f103 0208 	add.w	r2, r3, #8
  408044:	920f      	str	r2, [sp, #60]	; 0x3c
  408046:	681a      	ldr	r2, [r3, #0]
  408048:	9215      	str	r2, [sp, #84]	; 0x54
  40804a:	685b      	ldr	r3, [r3, #4]
  40804c:	9314      	str	r3, [sp, #80]	; 0x50
  40804e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  408050:	9d15      	ldr	r5, [sp, #84]	; 0x54
  408052:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  408056:	4628      	mov	r0, r5
  408058:	4621      	mov	r1, r4
  40805a:	f04f 32ff 	mov.w	r2, #4294967295
  40805e:	4b59      	ldr	r3, [pc, #356]	; (4081c4 <_svfprintf_r+0x904>)
  408060:	f005 f9f2 	bl	40d448 <__aeabi_dcmpun>
  408064:	2800      	cmp	r0, #0
  408066:	f040 834a 	bne.w	4086fe <_svfprintf_r+0xe3e>
  40806a:	4628      	mov	r0, r5
  40806c:	4621      	mov	r1, r4
  40806e:	f04f 32ff 	mov.w	r2, #4294967295
  408072:	4b54      	ldr	r3, [pc, #336]	; (4081c4 <_svfprintf_r+0x904>)
  408074:	f005 f9ca 	bl	40d40c <__aeabi_dcmple>
  408078:	2800      	cmp	r0, #0
  40807a:	f040 8340 	bne.w	4086fe <_svfprintf_r+0xe3e>
  40807e:	a815      	add	r0, sp, #84	; 0x54
  408080:	c80d      	ldmia	r0, {r0, r2, r3}
  408082:	9914      	ldr	r1, [sp, #80]	; 0x50
  408084:	f005 f9b8 	bl	40d3f8 <__aeabi_dcmplt>
  408088:	2800      	cmp	r0, #0
  40808a:	f040 8530 	bne.w	408aee <_svfprintf_r+0x122e>
  40808e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  408092:	4e4d      	ldr	r6, [pc, #308]	; (4081c8 <_svfprintf_r+0x908>)
  408094:	4b4d      	ldr	r3, [pc, #308]	; (4081cc <_svfprintf_r+0x90c>)
  408096:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  40809a:	9007      	str	r0, [sp, #28]
  40809c:	9811      	ldr	r0, [sp, #68]	; 0x44
  40809e:	2203      	movs	r2, #3
  4080a0:	2100      	movs	r1, #0
  4080a2:	9208      	str	r2, [sp, #32]
  4080a4:	910a      	str	r1, [sp, #40]	; 0x28
  4080a6:	2847      	cmp	r0, #71	; 0x47
  4080a8:	bfd8      	it	le
  4080aa:	461e      	movle	r6, r3
  4080ac:	920e      	str	r2, [sp, #56]	; 0x38
  4080ae:	9112      	str	r1, [sp, #72]	; 0x48
  4080b0:	e51e      	b.n	407af0 <_svfprintf_r+0x230>
  4080b2:	f04b 0b08 	orr.w	fp, fp, #8
  4080b6:	f89a 3000 	ldrb.w	r3, [sl]
  4080ba:	e459      	b.n	407970 <_svfprintf_r+0xb0>
  4080bc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4080c0:	2300      	movs	r3, #0
  4080c2:	461c      	mov	r4, r3
  4080c4:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4080c8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4080cc:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4080d0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4080d4:	2809      	cmp	r0, #9
  4080d6:	d9f5      	bls.n	4080c4 <_svfprintf_r+0x804>
  4080d8:	940d      	str	r4, [sp, #52]	; 0x34
  4080da:	e44b      	b.n	407974 <_svfprintf_r+0xb4>
  4080dc:	f04b 0b10 	orr.w	fp, fp, #16
  4080e0:	9311      	str	r3, [sp, #68]	; 0x44
  4080e2:	f01b 0320 	ands.w	r3, fp, #32
  4080e6:	f43f ae1d 	beq.w	407d24 <_svfprintf_r+0x464>
  4080ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4080ec:	3507      	adds	r5, #7
  4080ee:	f025 0307 	bic.w	r3, r5, #7
  4080f2:	f103 0208 	add.w	r2, r3, #8
  4080f6:	e9d3 4500 	ldrd	r4, r5, [r3]
  4080fa:	920f      	str	r2, [sp, #60]	; 0x3c
  4080fc:	2300      	movs	r3, #0
  4080fe:	e4d2      	b.n	407aa6 <_svfprintf_r+0x1e6>
  408100:	9311      	str	r3, [sp, #68]	; 0x44
  408102:	2a00      	cmp	r2, #0
  408104:	f040 85e7 	bne.w	408cd6 <_svfprintf_r+0x1416>
  408108:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40810a:	2a00      	cmp	r2, #0
  40810c:	f43f aca3 	beq.w	407a56 <_svfprintf_r+0x196>
  408110:	2300      	movs	r3, #0
  408112:	2101      	movs	r1, #1
  408114:	461f      	mov	r7, r3
  408116:	9108      	str	r1, [sp, #32]
  408118:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  40811c:	f8cd b01c 	str.w	fp, [sp, #28]
  408120:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  408124:	930a      	str	r3, [sp, #40]	; 0x28
  408126:	9312      	str	r3, [sp, #72]	; 0x48
  408128:	910e      	str	r1, [sp, #56]	; 0x38
  40812a:	ae28      	add	r6, sp, #160	; 0xa0
  40812c:	e4e4      	b.n	407af8 <_svfprintf_r+0x238>
  40812e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408130:	e534      	b.n	407b9c <_svfprintf_r+0x2dc>
  408132:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408134:	2b65      	cmp	r3, #101	; 0x65
  408136:	f340 80a7 	ble.w	408288 <_svfprintf_r+0x9c8>
  40813a:	a815      	add	r0, sp, #84	; 0x54
  40813c:	c80d      	ldmia	r0, {r0, r2, r3}
  40813e:	9914      	ldr	r1, [sp, #80]	; 0x50
  408140:	f005 f950 	bl	40d3e4 <__aeabi_dcmpeq>
  408144:	2800      	cmp	r0, #0
  408146:	f000 8150 	beq.w	4083ea <_svfprintf_r+0xb2a>
  40814a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40814c:	4a20      	ldr	r2, [pc, #128]	; (4081d0 <_svfprintf_r+0x910>)
  40814e:	f8c8 2000 	str.w	r2, [r8]
  408152:	3301      	adds	r3, #1
  408154:	3401      	adds	r4, #1
  408156:	2201      	movs	r2, #1
  408158:	2b07      	cmp	r3, #7
  40815a:	9427      	str	r4, [sp, #156]	; 0x9c
  40815c:	9326      	str	r3, [sp, #152]	; 0x98
  40815e:	f8c8 2004 	str.w	r2, [r8, #4]
  408162:	f300 836a 	bgt.w	40883a <_svfprintf_r+0xf7a>
  408166:	f108 0808 	add.w	r8, r8, #8
  40816a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40816c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40816e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408170:	4293      	cmp	r3, r2
  408172:	db03      	blt.n	40817c <_svfprintf_r+0x8bc>
  408174:	9b07      	ldr	r3, [sp, #28]
  408176:	07dd      	lsls	r5, r3, #31
  408178:	f57f ad82 	bpl.w	407c80 <_svfprintf_r+0x3c0>
  40817c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40817e:	9919      	ldr	r1, [sp, #100]	; 0x64
  408180:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  408182:	f8c8 2000 	str.w	r2, [r8]
  408186:	3301      	adds	r3, #1
  408188:	440c      	add	r4, r1
  40818a:	2b07      	cmp	r3, #7
  40818c:	f8c8 1004 	str.w	r1, [r8, #4]
  408190:	9427      	str	r4, [sp, #156]	; 0x9c
  408192:	9326      	str	r3, [sp, #152]	; 0x98
  408194:	f300 839e 	bgt.w	4088d4 <_svfprintf_r+0x1014>
  408198:	f108 0808 	add.w	r8, r8, #8
  40819c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40819e:	1e5e      	subs	r6, r3, #1
  4081a0:	2e00      	cmp	r6, #0
  4081a2:	f77f ad6d 	ble.w	407c80 <_svfprintf_r+0x3c0>
  4081a6:	2e10      	cmp	r6, #16
  4081a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4081aa:	4d0a      	ldr	r5, [pc, #40]	; (4081d4 <_svfprintf_r+0x914>)
  4081ac:	f340 81f5 	ble.w	40859a <_svfprintf_r+0xcda>
  4081b0:	4622      	mov	r2, r4
  4081b2:	2710      	movs	r7, #16
  4081b4:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4081b8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4081ba:	e013      	b.n	4081e4 <_svfprintf_r+0x924>
  4081bc:	0040db30 	.word	0x0040db30
  4081c0:	0040db1c 	.word	0x0040db1c
  4081c4:	7fefffff 	.word	0x7fefffff
  4081c8:	0040db10 	.word	0x0040db10
  4081cc:	0040db0c 	.word	0x0040db0c
  4081d0:	0040db4c 	.word	0x0040db4c
  4081d4:	0040db60 	.word	0x0040db60
  4081d8:	f108 0808 	add.w	r8, r8, #8
  4081dc:	3e10      	subs	r6, #16
  4081de:	2e10      	cmp	r6, #16
  4081e0:	f340 81da 	ble.w	408598 <_svfprintf_r+0xcd8>
  4081e4:	3301      	adds	r3, #1
  4081e6:	3210      	adds	r2, #16
  4081e8:	2b07      	cmp	r3, #7
  4081ea:	9227      	str	r2, [sp, #156]	; 0x9c
  4081ec:	9326      	str	r3, [sp, #152]	; 0x98
  4081ee:	e888 00a0 	stmia.w	r8, {r5, r7}
  4081f2:	ddf1      	ble.n	4081d8 <_svfprintf_r+0x918>
  4081f4:	aa25      	add	r2, sp, #148	; 0x94
  4081f6:	4621      	mov	r1, r4
  4081f8:	4658      	mov	r0, fp
  4081fa:	f004 fa57 	bl	40c6ac <__ssprint_r>
  4081fe:	2800      	cmp	r0, #0
  408200:	f47f ac30 	bne.w	407a64 <_svfprintf_r+0x1a4>
  408204:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  408206:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408208:	46c8      	mov	r8, r9
  40820a:	e7e7      	b.n	4081dc <_svfprintf_r+0x91c>
  40820c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40820e:	9a08      	ldr	r2, [sp, #32]
  408210:	1a9f      	subs	r7, r3, r2
  408212:	2f00      	cmp	r7, #0
  408214:	f77f ace5 	ble.w	407be2 <_svfprintf_r+0x322>
  408218:	2f10      	cmp	r7, #16
  40821a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40821c:	4db6      	ldr	r5, [pc, #728]	; (4084f8 <_svfprintf_r+0xc38>)
  40821e:	dd27      	ble.n	408270 <_svfprintf_r+0x9b0>
  408220:	4642      	mov	r2, r8
  408222:	4621      	mov	r1, r4
  408224:	46b0      	mov	r8, r6
  408226:	f04f 0b10 	mov.w	fp, #16
  40822a:	462e      	mov	r6, r5
  40822c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40822e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  408230:	e004      	b.n	40823c <_svfprintf_r+0x97c>
  408232:	3f10      	subs	r7, #16
  408234:	2f10      	cmp	r7, #16
  408236:	f102 0208 	add.w	r2, r2, #8
  40823a:	dd15      	ble.n	408268 <_svfprintf_r+0x9a8>
  40823c:	3301      	adds	r3, #1
  40823e:	3110      	adds	r1, #16
  408240:	2b07      	cmp	r3, #7
  408242:	9127      	str	r1, [sp, #156]	; 0x9c
  408244:	9326      	str	r3, [sp, #152]	; 0x98
  408246:	e882 0840 	stmia.w	r2, {r6, fp}
  40824a:	ddf2      	ble.n	408232 <_svfprintf_r+0x972>
  40824c:	aa25      	add	r2, sp, #148	; 0x94
  40824e:	4629      	mov	r1, r5
  408250:	4620      	mov	r0, r4
  408252:	f004 fa2b 	bl	40c6ac <__ssprint_r>
  408256:	2800      	cmp	r0, #0
  408258:	f47f ac04 	bne.w	407a64 <_svfprintf_r+0x1a4>
  40825c:	3f10      	subs	r7, #16
  40825e:	2f10      	cmp	r7, #16
  408260:	9927      	ldr	r1, [sp, #156]	; 0x9c
  408262:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408264:	464a      	mov	r2, r9
  408266:	dce9      	bgt.n	40823c <_svfprintf_r+0x97c>
  408268:	4635      	mov	r5, r6
  40826a:	460c      	mov	r4, r1
  40826c:	4646      	mov	r6, r8
  40826e:	4690      	mov	r8, r2
  408270:	3301      	adds	r3, #1
  408272:	443c      	add	r4, r7
  408274:	2b07      	cmp	r3, #7
  408276:	9427      	str	r4, [sp, #156]	; 0x9c
  408278:	9326      	str	r3, [sp, #152]	; 0x98
  40827a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40827e:	f300 8232 	bgt.w	4086e6 <_svfprintf_r+0xe26>
  408282:	f108 0808 	add.w	r8, r8, #8
  408286:	e4ac      	b.n	407be2 <_svfprintf_r+0x322>
  408288:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40828a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40828c:	2b01      	cmp	r3, #1
  40828e:	f340 81fe 	ble.w	40868e <_svfprintf_r+0xdce>
  408292:	3701      	adds	r7, #1
  408294:	3401      	adds	r4, #1
  408296:	2301      	movs	r3, #1
  408298:	2f07      	cmp	r7, #7
  40829a:	9427      	str	r4, [sp, #156]	; 0x9c
  40829c:	9726      	str	r7, [sp, #152]	; 0x98
  40829e:	f8c8 6000 	str.w	r6, [r8]
  4082a2:	f8c8 3004 	str.w	r3, [r8, #4]
  4082a6:	f300 8203 	bgt.w	4086b0 <_svfprintf_r+0xdf0>
  4082aa:	f108 0808 	add.w	r8, r8, #8
  4082ae:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4082b0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  4082b2:	f8c8 3000 	str.w	r3, [r8]
  4082b6:	3701      	adds	r7, #1
  4082b8:	4414      	add	r4, r2
  4082ba:	2f07      	cmp	r7, #7
  4082bc:	9427      	str	r4, [sp, #156]	; 0x9c
  4082be:	9726      	str	r7, [sp, #152]	; 0x98
  4082c0:	f8c8 2004 	str.w	r2, [r8, #4]
  4082c4:	f300 8200 	bgt.w	4086c8 <_svfprintf_r+0xe08>
  4082c8:	f108 0808 	add.w	r8, r8, #8
  4082cc:	a815      	add	r0, sp, #84	; 0x54
  4082ce:	c80d      	ldmia	r0, {r0, r2, r3}
  4082d0:	9914      	ldr	r1, [sp, #80]	; 0x50
  4082d2:	f005 f887 	bl	40d3e4 <__aeabi_dcmpeq>
  4082d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4082d8:	2800      	cmp	r0, #0
  4082da:	f040 8101 	bne.w	4084e0 <_svfprintf_r+0xc20>
  4082de:	3b01      	subs	r3, #1
  4082e0:	3701      	adds	r7, #1
  4082e2:	3601      	adds	r6, #1
  4082e4:	441c      	add	r4, r3
  4082e6:	2f07      	cmp	r7, #7
  4082e8:	9726      	str	r7, [sp, #152]	; 0x98
  4082ea:	9427      	str	r4, [sp, #156]	; 0x9c
  4082ec:	f8c8 6000 	str.w	r6, [r8]
  4082f0:	f8c8 3004 	str.w	r3, [r8, #4]
  4082f4:	f300 8127 	bgt.w	408546 <_svfprintf_r+0xc86>
  4082f8:	f108 0808 	add.w	r8, r8, #8
  4082fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  4082fe:	f8c8 2004 	str.w	r2, [r8, #4]
  408302:	3701      	adds	r7, #1
  408304:	4414      	add	r4, r2
  408306:	ab21      	add	r3, sp, #132	; 0x84
  408308:	2f07      	cmp	r7, #7
  40830a:	9427      	str	r4, [sp, #156]	; 0x9c
  40830c:	9726      	str	r7, [sp, #152]	; 0x98
  40830e:	f8c8 3000 	str.w	r3, [r8]
  408312:	f77f acb3 	ble.w	407c7c <_svfprintf_r+0x3bc>
  408316:	aa25      	add	r2, sp, #148	; 0x94
  408318:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40831a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40831c:	f004 f9c6 	bl	40c6ac <__ssprint_r>
  408320:	2800      	cmp	r0, #0
  408322:	f47f ab9f 	bne.w	407a64 <_svfprintf_r+0x1a4>
  408326:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408328:	46c8      	mov	r8, r9
  40832a:	e4a9      	b.n	407c80 <_svfprintf_r+0x3c0>
  40832c:	aa25      	add	r2, sp, #148	; 0x94
  40832e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408330:	980c      	ldr	r0, [sp, #48]	; 0x30
  408332:	f004 f9bb 	bl	40c6ac <__ssprint_r>
  408336:	2800      	cmp	r0, #0
  408338:	f43f aceb 	beq.w	407d12 <_svfprintf_r+0x452>
  40833c:	f7ff bb92 	b.w	407a64 <_svfprintf_r+0x1a4>
  408340:	f8dd b01c 	ldr.w	fp, [sp, #28]
  408344:	2b01      	cmp	r3, #1
  408346:	f000 8134 	beq.w	4085b2 <_svfprintf_r+0xcf2>
  40834a:	2b02      	cmp	r3, #2
  40834c:	d125      	bne.n	40839a <_svfprintf_r+0xada>
  40834e:	f8cd b01c 	str.w	fp, [sp, #28]
  408352:	2400      	movs	r4, #0
  408354:	2500      	movs	r5, #0
  408356:	e61e      	b.n	407f96 <_svfprintf_r+0x6d6>
  408358:	aa25      	add	r2, sp, #148	; 0x94
  40835a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40835c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40835e:	f004 f9a5 	bl	40c6ac <__ssprint_r>
  408362:	2800      	cmp	r0, #0
  408364:	f47f ab7e 	bne.w	407a64 <_svfprintf_r+0x1a4>
  408368:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40836a:	46c8      	mov	r8, r9
  40836c:	e475      	b.n	407c5a <_svfprintf_r+0x39a>
  40836e:	aa25      	add	r2, sp, #148	; 0x94
  408370:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408372:	980c      	ldr	r0, [sp, #48]	; 0x30
  408374:	f004 f99a 	bl	40c6ac <__ssprint_r>
  408378:	2800      	cmp	r0, #0
  40837a:	f47f ab73 	bne.w	407a64 <_svfprintf_r+0x1a4>
  40837e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408380:	46c8      	mov	r8, r9
  408382:	e41b      	b.n	407bbc <_svfprintf_r+0x2fc>
  408384:	aa25      	add	r2, sp, #148	; 0x94
  408386:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408388:	980c      	ldr	r0, [sp, #48]	; 0x30
  40838a:	f004 f98f 	bl	40c6ac <__ssprint_r>
  40838e:	2800      	cmp	r0, #0
  408390:	f47f ab68 	bne.w	407a64 <_svfprintf_r+0x1a4>
  408394:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408396:	46c8      	mov	r8, r9
  408398:	e420      	b.n	407bdc <_svfprintf_r+0x31c>
  40839a:	f8cd b01c 	str.w	fp, [sp, #28]
  40839e:	2400      	movs	r4, #0
  4083a0:	2500      	movs	r5, #0
  4083a2:	4649      	mov	r1, r9
  4083a4:	e000      	b.n	4083a8 <_svfprintf_r+0xae8>
  4083a6:	4631      	mov	r1, r6
  4083a8:	08e2      	lsrs	r2, r4, #3
  4083aa:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  4083ae:	08e8      	lsrs	r0, r5, #3
  4083b0:	f004 0307 	and.w	r3, r4, #7
  4083b4:	4605      	mov	r5, r0
  4083b6:	4614      	mov	r4, r2
  4083b8:	3330      	adds	r3, #48	; 0x30
  4083ba:	ea54 0205 	orrs.w	r2, r4, r5
  4083be:	f801 3c01 	strb.w	r3, [r1, #-1]
  4083c2:	f101 36ff 	add.w	r6, r1, #4294967295
  4083c6:	d1ee      	bne.n	4083a6 <_svfprintf_r+0xae6>
  4083c8:	9a07      	ldr	r2, [sp, #28]
  4083ca:	07d2      	lsls	r2, r2, #31
  4083cc:	f57f adf3 	bpl.w	407fb6 <_svfprintf_r+0x6f6>
  4083d0:	2b30      	cmp	r3, #48	; 0x30
  4083d2:	f43f adf0 	beq.w	407fb6 <_svfprintf_r+0x6f6>
  4083d6:	3902      	subs	r1, #2
  4083d8:	2330      	movs	r3, #48	; 0x30
  4083da:	f806 3c01 	strb.w	r3, [r6, #-1]
  4083de:	eba9 0301 	sub.w	r3, r9, r1
  4083e2:	930e      	str	r3, [sp, #56]	; 0x38
  4083e4:	460e      	mov	r6, r1
  4083e6:	f7ff bb7b 	b.w	407ae0 <_svfprintf_r+0x220>
  4083ea:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4083ec:	2900      	cmp	r1, #0
  4083ee:	f340 822e 	ble.w	40884e <_svfprintf_r+0xf8e>
  4083f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4083f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4083f6:	4293      	cmp	r3, r2
  4083f8:	bfa8      	it	ge
  4083fa:	4613      	movge	r3, r2
  4083fc:	2b00      	cmp	r3, #0
  4083fe:	461f      	mov	r7, r3
  408400:	dd0d      	ble.n	40841e <_svfprintf_r+0xb5e>
  408402:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408404:	f8c8 6000 	str.w	r6, [r8]
  408408:	3301      	adds	r3, #1
  40840a:	443c      	add	r4, r7
  40840c:	2b07      	cmp	r3, #7
  40840e:	9427      	str	r4, [sp, #156]	; 0x9c
  408410:	f8c8 7004 	str.w	r7, [r8, #4]
  408414:	9326      	str	r3, [sp, #152]	; 0x98
  408416:	f300 831f 	bgt.w	408a58 <_svfprintf_r+0x1198>
  40841a:	f108 0808 	add.w	r8, r8, #8
  40841e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408420:	2f00      	cmp	r7, #0
  408422:	bfa8      	it	ge
  408424:	1bdb      	subge	r3, r3, r7
  408426:	2b00      	cmp	r3, #0
  408428:	461f      	mov	r7, r3
  40842a:	f340 80d6 	ble.w	4085da <_svfprintf_r+0xd1a>
  40842e:	2f10      	cmp	r7, #16
  408430:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408432:	4d31      	ldr	r5, [pc, #196]	; (4084f8 <_svfprintf_r+0xc38>)
  408434:	f340 81ed 	ble.w	408812 <_svfprintf_r+0xf52>
  408438:	4642      	mov	r2, r8
  40843a:	4621      	mov	r1, r4
  40843c:	46b0      	mov	r8, r6
  40843e:	f04f 0b10 	mov.w	fp, #16
  408442:	462e      	mov	r6, r5
  408444:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  408446:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  408448:	e004      	b.n	408454 <_svfprintf_r+0xb94>
  40844a:	3208      	adds	r2, #8
  40844c:	3f10      	subs	r7, #16
  40844e:	2f10      	cmp	r7, #16
  408450:	f340 81db 	ble.w	40880a <_svfprintf_r+0xf4a>
  408454:	3301      	adds	r3, #1
  408456:	3110      	adds	r1, #16
  408458:	2b07      	cmp	r3, #7
  40845a:	9127      	str	r1, [sp, #156]	; 0x9c
  40845c:	9326      	str	r3, [sp, #152]	; 0x98
  40845e:	e882 0840 	stmia.w	r2, {r6, fp}
  408462:	ddf2      	ble.n	40844a <_svfprintf_r+0xb8a>
  408464:	aa25      	add	r2, sp, #148	; 0x94
  408466:	4629      	mov	r1, r5
  408468:	4620      	mov	r0, r4
  40846a:	f004 f91f 	bl	40c6ac <__ssprint_r>
  40846e:	2800      	cmp	r0, #0
  408470:	f47f aaf8 	bne.w	407a64 <_svfprintf_r+0x1a4>
  408474:	9927      	ldr	r1, [sp, #156]	; 0x9c
  408476:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408478:	464a      	mov	r2, r9
  40847a:	e7e7      	b.n	40844c <_svfprintf_r+0xb8c>
  40847c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40847e:	930e      	str	r3, [sp, #56]	; 0x38
  408480:	464e      	mov	r6, r9
  408482:	f7ff bb2d 	b.w	407ae0 <_svfprintf_r+0x220>
  408486:	2d00      	cmp	r5, #0
  408488:	bf08      	it	eq
  40848a:	2c0a      	cmpeq	r4, #10
  40848c:	f0c0 808f 	bcc.w	4085ae <_svfprintf_r+0xcee>
  408490:	464e      	mov	r6, r9
  408492:	4620      	mov	r0, r4
  408494:	4629      	mov	r1, r5
  408496:	220a      	movs	r2, #10
  408498:	2300      	movs	r3, #0
  40849a:	f005 f813 	bl	40d4c4 <__aeabi_uldivmod>
  40849e:	3230      	adds	r2, #48	; 0x30
  4084a0:	f806 2d01 	strb.w	r2, [r6, #-1]!
  4084a4:	4620      	mov	r0, r4
  4084a6:	4629      	mov	r1, r5
  4084a8:	2300      	movs	r3, #0
  4084aa:	220a      	movs	r2, #10
  4084ac:	f005 f80a 	bl	40d4c4 <__aeabi_uldivmod>
  4084b0:	4604      	mov	r4, r0
  4084b2:	460d      	mov	r5, r1
  4084b4:	ea54 0305 	orrs.w	r3, r4, r5
  4084b8:	d1eb      	bne.n	408492 <_svfprintf_r+0xbd2>
  4084ba:	eba9 0306 	sub.w	r3, r9, r6
  4084be:	930e      	str	r3, [sp, #56]	; 0x38
  4084c0:	f7ff bb0e 	b.w	407ae0 <_svfprintf_r+0x220>
  4084c4:	aa25      	add	r2, sp, #148	; 0x94
  4084c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4084c8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4084ca:	f004 f8ef 	bl	40c6ac <__ssprint_r>
  4084ce:	2800      	cmp	r0, #0
  4084d0:	f47f aac8 	bne.w	407a64 <_svfprintf_r+0x1a4>
  4084d4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4084d8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4084da:	46c8      	mov	r8, r9
  4084dc:	f7ff bb5e 	b.w	407b9c <_svfprintf_r+0x2dc>
  4084e0:	1e5e      	subs	r6, r3, #1
  4084e2:	2e00      	cmp	r6, #0
  4084e4:	f77f af0a 	ble.w	4082fc <_svfprintf_r+0xa3c>
  4084e8:	2e10      	cmp	r6, #16
  4084ea:	4d03      	ldr	r5, [pc, #12]	; (4084f8 <_svfprintf_r+0xc38>)
  4084ec:	dd22      	ble.n	408534 <_svfprintf_r+0xc74>
  4084ee:	4622      	mov	r2, r4
  4084f0:	f04f 0b10 	mov.w	fp, #16
  4084f4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4084f6:	e006      	b.n	408506 <_svfprintf_r+0xc46>
  4084f8:	0040db60 	.word	0x0040db60
  4084fc:	3e10      	subs	r6, #16
  4084fe:	2e10      	cmp	r6, #16
  408500:	f108 0808 	add.w	r8, r8, #8
  408504:	dd15      	ble.n	408532 <_svfprintf_r+0xc72>
  408506:	3701      	adds	r7, #1
  408508:	3210      	adds	r2, #16
  40850a:	2f07      	cmp	r7, #7
  40850c:	9227      	str	r2, [sp, #156]	; 0x9c
  40850e:	9726      	str	r7, [sp, #152]	; 0x98
  408510:	e888 0820 	stmia.w	r8, {r5, fp}
  408514:	ddf2      	ble.n	4084fc <_svfprintf_r+0xc3c>
  408516:	aa25      	add	r2, sp, #148	; 0x94
  408518:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40851a:	4620      	mov	r0, r4
  40851c:	f004 f8c6 	bl	40c6ac <__ssprint_r>
  408520:	2800      	cmp	r0, #0
  408522:	f47f aa9f 	bne.w	407a64 <_svfprintf_r+0x1a4>
  408526:	3e10      	subs	r6, #16
  408528:	2e10      	cmp	r6, #16
  40852a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40852c:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40852e:	46c8      	mov	r8, r9
  408530:	dce9      	bgt.n	408506 <_svfprintf_r+0xc46>
  408532:	4614      	mov	r4, r2
  408534:	3701      	adds	r7, #1
  408536:	4434      	add	r4, r6
  408538:	2f07      	cmp	r7, #7
  40853a:	9427      	str	r4, [sp, #156]	; 0x9c
  40853c:	9726      	str	r7, [sp, #152]	; 0x98
  40853e:	e888 0060 	stmia.w	r8, {r5, r6}
  408542:	f77f aed9 	ble.w	4082f8 <_svfprintf_r+0xa38>
  408546:	aa25      	add	r2, sp, #148	; 0x94
  408548:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40854a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40854c:	f004 f8ae 	bl	40c6ac <__ssprint_r>
  408550:	2800      	cmp	r0, #0
  408552:	f47f aa87 	bne.w	407a64 <_svfprintf_r+0x1a4>
  408556:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408558:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40855a:	46c8      	mov	r8, r9
  40855c:	e6ce      	b.n	4082fc <_svfprintf_r+0xa3c>
  40855e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408560:	6814      	ldr	r4, [r2, #0]
  408562:	4613      	mov	r3, r2
  408564:	3304      	adds	r3, #4
  408566:	17e5      	asrs	r5, r4, #31
  408568:	930f      	str	r3, [sp, #60]	; 0x3c
  40856a:	4622      	mov	r2, r4
  40856c:	462b      	mov	r3, r5
  40856e:	e4fa      	b.n	407f66 <_svfprintf_r+0x6a6>
  408570:	3204      	adds	r2, #4
  408572:	681c      	ldr	r4, [r3, #0]
  408574:	920f      	str	r2, [sp, #60]	; 0x3c
  408576:	2301      	movs	r3, #1
  408578:	2500      	movs	r5, #0
  40857a:	f7ff ba94 	b.w	407aa6 <_svfprintf_r+0x1e6>
  40857e:	681c      	ldr	r4, [r3, #0]
  408580:	3304      	adds	r3, #4
  408582:	930f      	str	r3, [sp, #60]	; 0x3c
  408584:	2500      	movs	r5, #0
  408586:	e421      	b.n	407dcc <_svfprintf_r+0x50c>
  408588:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40858a:	460a      	mov	r2, r1
  40858c:	3204      	adds	r2, #4
  40858e:	680c      	ldr	r4, [r1, #0]
  408590:	920f      	str	r2, [sp, #60]	; 0x3c
  408592:	2500      	movs	r5, #0
  408594:	f7ff ba87 	b.w	407aa6 <_svfprintf_r+0x1e6>
  408598:	4614      	mov	r4, r2
  40859a:	3301      	adds	r3, #1
  40859c:	4434      	add	r4, r6
  40859e:	2b07      	cmp	r3, #7
  4085a0:	9427      	str	r4, [sp, #156]	; 0x9c
  4085a2:	9326      	str	r3, [sp, #152]	; 0x98
  4085a4:	e888 0060 	stmia.w	r8, {r5, r6}
  4085a8:	f77f ab68 	ble.w	407c7c <_svfprintf_r+0x3bc>
  4085ac:	e6b3      	b.n	408316 <_svfprintf_r+0xa56>
  4085ae:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4085b2:	f8cd b01c 	str.w	fp, [sp, #28]
  4085b6:	ae42      	add	r6, sp, #264	; 0x108
  4085b8:	3430      	adds	r4, #48	; 0x30
  4085ba:	2301      	movs	r3, #1
  4085bc:	f806 4d41 	strb.w	r4, [r6, #-65]!
  4085c0:	930e      	str	r3, [sp, #56]	; 0x38
  4085c2:	f7ff ba8d 	b.w	407ae0 <_svfprintf_r+0x220>
  4085c6:	aa25      	add	r2, sp, #148	; 0x94
  4085c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4085ca:	980c      	ldr	r0, [sp, #48]	; 0x30
  4085cc:	f004 f86e 	bl	40c6ac <__ssprint_r>
  4085d0:	2800      	cmp	r0, #0
  4085d2:	f47f aa47 	bne.w	407a64 <_svfprintf_r+0x1a4>
  4085d6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4085d8:	46c8      	mov	r8, r9
  4085da:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4085dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4085de:	429a      	cmp	r2, r3
  4085e0:	db44      	blt.n	40866c <_svfprintf_r+0xdac>
  4085e2:	9b07      	ldr	r3, [sp, #28]
  4085e4:	07d9      	lsls	r1, r3, #31
  4085e6:	d441      	bmi.n	40866c <_svfprintf_r+0xdac>
  4085e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4085ea:	9812      	ldr	r0, [sp, #72]	; 0x48
  4085ec:	1a9a      	subs	r2, r3, r2
  4085ee:	1a1d      	subs	r5, r3, r0
  4085f0:	4295      	cmp	r5, r2
  4085f2:	bfa8      	it	ge
  4085f4:	4615      	movge	r5, r2
  4085f6:	2d00      	cmp	r5, #0
  4085f8:	dd0e      	ble.n	408618 <_svfprintf_r+0xd58>
  4085fa:	9926      	ldr	r1, [sp, #152]	; 0x98
  4085fc:	f8c8 5004 	str.w	r5, [r8, #4]
  408600:	3101      	adds	r1, #1
  408602:	4406      	add	r6, r0
  408604:	442c      	add	r4, r5
  408606:	2907      	cmp	r1, #7
  408608:	f8c8 6000 	str.w	r6, [r8]
  40860c:	9427      	str	r4, [sp, #156]	; 0x9c
  40860e:	9126      	str	r1, [sp, #152]	; 0x98
  408610:	f300 823b 	bgt.w	408a8a <_svfprintf_r+0x11ca>
  408614:	f108 0808 	add.w	r8, r8, #8
  408618:	2d00      	cmp	r5, #0
  40861a:	bfac      	ite	ge
  40861c:	1b56      	subge	r6, r2, r5
  40861e:	4616      	movlt	r6, r2
  408620:	2e00      	cmp	r6, #0
  408622:	f77f ab2d 	ble.w	407c80 <_svfprintf_r+0x3c0>
  408626:	2e10      	cmp	r6, #16
  408628:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40862a:	4db0      	ldr	r5, [pc, #704]	; (4088ec <_svfprintf_r+0x102c>)
  40862c:	ddb5      	ble.n	40859a <_svfprintf_r+0xcda>
  40862e:	4622      	mov	r2, r4
  408630:	2710      	movs	r7, #16
  408632:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  408636:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  408638:	e004      	b.n	408644 <_svfprintf_r+0xd84>
  40863a:	f108 0808 	add.w	r8, r8, #8
  40863e:	3e10      	subs	r6, #16
  408640:	2e10      	cmp	r6, #16
  408642:	dda9      	ble.n	408598 <_svfprintf_r+0xcd8>
  408644:	3301      	adds	r3, #1
  408646:	3210      	adds	r2, #16
  408648:	2b07      	cmp	r3, #7
  40864a:	9227      	str	r2, [sp, #156]	; 0x9c
  40864c:	9326      	str	r3, [sp, #152]	; 0x98
  40864e:	e888 00a0 	stmia.w	r8, {r5, r7}
  408652:	ddf2      	ble.n	40863a <_svfprintf_r+0xd7a>
  408654:	aa25      	add	r2, sp, #148	; 0x94
  408656:	4621      	mov	r1, r4
  408658:	4658      	mov	r0, fp
  40865a:	f004 f827 	bl	40c6ac <__ssprint_r>
  40865e:	2800      	cmp	r0, #0
  408660:	f47f aa00 	bne.w	407a64 <_svfprintf_r+0x1a4>
  408664:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  408666:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408668:	46c8      	mov	r8, r9
  40866a:	e7e8      	b.n	40863e <_svfprintf_r+0xd7e>
  40866c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40866e:	9819      	ldr	r0, [sp, #100]	; 0x64
  408670:	991a      	ldr	r1, [sp, #104]	; 0x68
  408672:	f8c8 1000 	str.w	r1, [r8]
  408676:	3301      	adds	r3, #1
  408678:	4404      	add	r4, r0
  40867a:	2b07      	cmp	r3, #7
  40867c:	9427      	str	r4, [sp, #156]	; 0x9c
  40867e:	f8c8 0004 	str.w	r0, [r8, #4]
  408682:	9326      	str	r3, [sp, #152]	; 0x98
  408684:	f300 81f5 	bgt.w	408a72 <_svfprintf_r+0x11b2>
  408688:	f108 0808 	add.w	r8, r8, #8
  40868c:	e7ac      	b.n	4085e8 <_svfprintf_r+0xd28>
  40868e:	9b07      	ldr	r3, [sp, #28]
  408690:	07da      	lsls	r2, r3, #31
  408692:	f53f adfe 	bmi.w	408292 <_svfprintf_r+0x9d2>
  408696:	3701      	adds	r7, #1
  408698:	3401      	adds	r4, #1
  40869a:	2301      	movs	r3, #1
  40869c:	2f07      	cmp	r7, #7
  40869e:	9427      	str	r4, [sp, #156]	; 0x9c
  4086a0:	9726      	str	r7, [sp, #152]	; 0x98
  4086a2:	f8c8 6000 	str.w	r6, [r8]
  4086a6:	f8c8 3004 	str.w	r3, [r8, #4]
  4086aa:	f77f ae25 	ble.w	4082f8 <_svfprintf_r+0xa38>
  4086ae:	e74a      	b.n	408546 <_svfprintf_r+0xc86>
  4086b0:	aa25      	add	r2, sp, #148	; 0x94
  4086b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4086b4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4086b6:	f003 fff9 	bl	40c6ac <__ssprint_r>
  4086ba:	2800      	cmp	r0, #0
  4086bc:	f47f a9d2 	bne.w	407a64 <_svfprintf_r+0x1a4>
  4086c0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4086c2:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4086c4:	46c8      	mov	r8, r9
  4086c6:	e5f2      	b.n	4082ae <_svfprintf_r+0x9ee>
  4086c8:	aa25      	add	r2, sp, #148	; 0x94
  4086ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4086cc:	980c      	ldr	r0, [sp, #48]	; 0x30
  4086ce:	f003 ffed 	bl	40c6ac <__ssprint_r>
  4086d2:	2800      	cmp	r0, #0
  4086d4:	f47f a9c6 	bne.w	407a64 <_svfprintf_r+0x1a4>
  4086d8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4086da:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4086dc:	46c8      	mov	r8, r9
  4086de:	e5f5      	b.n	4082cc <_svfprintf_r+0xa0c>
  4086e0:	464e      	mov	r6, r9
  4086e2:	f7ff b9fd 	b.w	407ae0 <_svfprintf_r+0x220>
  4086e6:	aa25      	add	r2, sp, #148	; 0x94
  4086e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4086ea:	980c      	ldr	r0, [sp, #48]	; 0x30
  4086ec:	f003 ffde 	bl	40c6ac <__ssprint_r>
  4086f0:	2800      	cmp	r0, #0
  4086f2:	f47f a9b7 	bne.w	407a64 <_svfprintf_r+0x1a4>
  4086f6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4086f8:	46c8      	mov	r8, r9
  4086fa:	f7ff ba72 	b.w	407be2 <_svfprintf_r+0x322>
  4086fe:	9c15      	ldr	r4, [sp, #84]	; 0x54
  408700:	4622      	mov	r2, r4
  408702:	4620      	mov	r0, r4
  408704:	9c14      	ldr	r4, [sp, #80]	; 0x50
  408706:	4623      	mov	r3, r4
  408708:	4621      	mov	r1, r4
  40870a:	f004 fe9d 	bl	40d448 <__aeabi_dcmpun>
  40870e:	2800      	cmp	r0, #0
  408710:	f040 8286 	bne.w	408c20 <_svfprintf_r+0x1360>
  408714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408716:	3301      	adds	r3, #1
  408718:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40871a:	f023 0320 	bic.w	r3, r3, #32
  40871e:	930e      	str	r3, [sp, #56]	; 0x38
  408720:	f000 81e2 	beq.w	408ae8 <_svfprintf_r+0x1228>
  408724:	2b47      	cmp	r3, #71	; 0x47
  408726:	f000 811e 	beq.w	408966 <_svfprintf_r+0x10a6>
  40872a:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  40872e:	9307      	str	r3, [sp, #28]
  408730:	9b14      	ldr	r3, [sp, #80]	; 0x50
  408732:	1e1f      	subs	r7, r3, #0
  408734:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408736:	9308      	str	r3, [sp, #32]
  408738:	bfbb      	ittet	lt
  40873a:	463b      	movlt	r3, r7
  40873c:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  408740:	2300      	movge	r3, #0
  408742:	232d      	movlt	r3, #45	; 0x2d
  408744:	9310      	str	r3, [sp, #64]	; 0x40
  408746:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408748:	2b66      	cmp	r3, #102	; 0x66
  40874a:	f000 81bb 	beq.w	408ac4 <_svfprintf_r+0x1204>
  40874e:	2b46      	cmp	r3, #70	; 0x46
  408750:	f000 80df 	beq.w	408912 <_svfprintf_r+0x1052>
  408754:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408756:	9a08      	ldr	r2, [sp, #32]
  408758:	2b45      	cmp	r3, #69	; 0x45
  40875a:	bf0c      	ite	eq
  40875c:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  40875e:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  408760:	a823      	add	r0, sp, #140	; 0x8c
  408762:	a920      	add	r1, sp, #128	; 0x80
  408764:	bf08      	it	eq
  408766:	1c5d      	addeq	r5, r3, #1
  408768:	9004      	str	r0, [sp, #16]
  40876a:	9103      	str	r1, [sp, #12]
  40876c:	a81f      	add	r0, sp, #124	; 0x7c
  40876e:	2102      	movs	r1, #2
  408770:	463b      	mov	r3, r7
  408772:	9002      	str	r0, [sp, #8]
  408774:	9501      	str	r5, [sp, #4]
  408776:	9100      	str	r1, [sp, #0]
  408778:	980c      	ldr	r0, [sp, #48]	; 0x30
  40877a:	f001 faa1 	bl	409cc0 <_dtoa_r>
  40877e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408780:	2b67      	cmp	r3, #103	; 0x67
  408782:	4606      	mov	r6, r0
  408784:	f040 81e0 	bne.w	408b48 <_svfprintf_r+0x1288>
  408788:	f01b 0f01 	tst.w	fp, #1
  40878c:	f000 8246 	beq.w	408c1c <_svfprintf_r+0x135c>
  408790:	1974      	adds	r4, r6, r5
  408792:	9a16      	ldr	r2, [sp, #88]	; 0x58
  408794:	9808      	ldr	r0, [sp, #32]
  408796:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  408798:	4639      	mov	r1, r7
  40879a:	f004 fe23 	bl	40d3e4 <__aeabi_dcmpeq>
  40879e:	2800      	cmp	r0, #0
  4087a0:	f040 8165 	bne.w	408a6e <_svfprintf_r+0x11ae>
  4087a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4087a6:	42a3      	cmp	r3, r4
  4087a8:	d206      	bcs.n	4087b8 <_svfprintf_r+0xef8>
  4087aa:	2130      	movs	r1, #48	; 0x30
  4087ac:	1c5a      	adds	r2, r3, #1
  4087ae:	9223      	str	r2, [sp, #140]	; 0x8c
  4087b0:	7019      	strb	r1, [r3, #0]
  4087b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4087b4:	429c      	cmp	r4, r3
  4087b6:	d8f9      	bhi.n	4087ac <_svfprintf_r+0xeec>
  4087b8:	1b9b      	subs	r3, r3, r6
  4087ba:	9313      	str	r3, [sp, #76]	; 0x4c
  4087bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4087be:	2b47      	cmp	r3, #71	; 0x47
  4087c0:	f000 80e9 	beq.w	408996 <_svfprintf_r+0x10d6>
  4087c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4087c6:	2b65      	cmp	r3, #101	; 0x65
  4087c8:	f340 81cd 	ble.w	408b66 <_svfprintf_r+0x12a6>
  4087cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4087ce:	2b66      	cmp	r3, #102	; 0x66
  4087d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4087d2:	9312      	str	r3, [sp, #72]	; 0x48
  4087d4:	f000 819e 	beq.w	408b14 <_svfprintf_r+0x1254>
  4087d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4087da:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4087dc:	4619      	mov	r1, r3
  4087de:	4291      	cmp	r1, r2
  4087e0:	f300 818a 	bgt.w	408af8 <_svfprintf_r+0x1238>
  4087e4:	f01b 0f01 	tst.w	fp, #1
  4087e8:	f040 8213 	bne.w	408c12 <_svfprintf_r+0x1352>
  4087ec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4087f0:	9308      	str	r3, [sp, #32]
  4087f2:	2367      	movs	r3, #103	; 0x67
  4087f4:	920e      	str	r2, [sp, #56]	; 0x38
  4087f6:	9311      	str	r3, [sp, #68]	; 0x44
  4087f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4087fa:	2b00      	cmp	r3, #0
  4087fc:	f040 80c4 	bne.w	408988 <_svfprintf_r+0x10c8>
  408800:	930a      	str	r3, [sp, #40]	; 0x28
  408802:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  408806:	f7ff b973 	b.w	407af0 <_svfprintf_r+0x230>
  40880a:	4635      	mov	r5, r6
  40880c:	460c      	mov	r4, r1
  40880e:	4646      	mov	r6, r8
  408810:	4690      	mov	r8, r2
  408812:	3301      	adds	r3, #1
  408814:	443c      	add	r4, r7
  408816:	2b07      	cmp	r3, #7
  408818:	9427      	str	r4, [sp, #156]	; 0x9c
  40881a:	9326      	str	r3, [sp, #152]	; 0x98
  40881c:	e888 00a0 	stmia.w	r8, {r5, r7}
  408820:	f73f aed1 	bgt.w	4085c6 <_svfprintf_r+0xd06>
  408824:	f108 0808 	add.w	r8, r8, #8
  408828:	e6d7      	b.n	4085da <_svfprintf_r+0xd1a>
  40882a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40882c:	6813      	ldr	r3, [r2, #0]
  40882e:	3204      	adds	r2, #4
  408830:	920f      	str	r2, [sp, #60]	; 0x3c
  408832:	9a09      	ldr	r2, [sp, #36]	; 0x24
  408834:	601a      	str	r2, [r3, #0]
  408836:	f7ff b86a 	b.w	40790e <_svfprintf_r+0x4e>
  40883a:	aa25      	add	r2, sp, #148	; 0x94
  40883c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40883e:	980c      	ldr	r0, [sp, #48]	; 0x30
  408840:	f003 ff34 	bl	40c6ac <__ssprint_r>
  408844:	2800      	cmp	r0, #0
  408846:	f47f a90d 	bne.w	407a64 <_svfprintf_r+0x1a4>
  40884a:	46c8      	mov	r8, r9
  40884c:	e48d      	b.n	40816a <_svfprintf_r+0x8aa>
  40884e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408850:	4a27      	ldr	r2, [pc, #156]	; (4088f0 <_svfprintf_r+0x1030>)
  408852:	f8c8 2000 	str.w	r2, [r8]
  408856:	3301      	adds	r3, #1
  408858:	3401      	adds	r4, #1
  40885a:	2201      	movs	r2, #1
  40885c:	2b07      	cmp	r3, #7
  40885e:	9427      	str	r4, [sp, #156]	; 0x9c
  408860:	9326      	str	r3, [sp, #152]	; 0x98
  408862:	f8c8 2004 	str.w	r2, [r8, #4]
  408866:	dc72      	bgt.n	40894e <_svfprintf_r+0x108e>
  408868:	f108 0808 	add.w	r8, r8, #8
  40886c:	b929      	cbnz	r1, 40887a <_svfprintf_r+0xfba>
  40886e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  408870:	b91b      	cbnz	r3, 40887a <_svfprintf_r+0xfba>
  408872:	9b07      	ldr	r3, [sp, #28]
  408874:	07d8      	lsls	r0, r3, #31
  408876:	f57f aa03 	bpl.w	407c80 <_svfprintf_r+0x3c0>
  40887a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40887c:	9819      	ldr	r0, [sp, #100]	; 0x64
  40887e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  408880:	f8c8 2000 	str.w	r2, [r8]
  408884:	3301      	adds	r3, #1
  408886:	4602      	mov	r2, r0
  408888:	4422      	add	r2, r4
  40888a:	2b07      	cmp	r3, #7
  40888c:	9227      	str	r2, [sp, #156]	; 0x9c
  40888e:	f8c8 0004 	str.w	r0, [r8, #4]
  408892:	9326      	str	r3, [sp, #152]	; 0x98
  408894:	f300 818d 	bgt.w	408bb2 <_svfprintf_r+0x12f2>
  408898:	f108 0808 	add.w	r8, r8, #8
  40889c:	2900      	cmp	r1, #0
  40889e:	f2c0 8165 	blt.w	408b6c <_svfprintf_r+0x12ac>
  4088a2:	9913      	ldr	r1, [sp, #76]	; 0x4c
  4088a4:	f8c8 6000 	str.w	r6, [r8]
  4088a8:	3301      	adds	r3, #1
  4088aa:	188c      	adds	r4, r1, r2
  4088ac:	2b07      	cmp	r3, #7
  4088ae:	9427      	str	r4, [sp, #156]	; 0x9c
  4088b0:	9326      	str	r3, [sp, #152]	; 0x98
  4088b2:	f8c8 1004 	str.w	r1, [r8, #4]
  4088b6:	f77f a9e1 	ble.w	407c7c <_svfprintf_r+0x3bc>
  4088ba:	e52c      	b.n	408316 <_svfprintf_r+0xa56>
  4088bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4088be:	9909      	ldr	r1, [sp, #36]	; 0x24
  4088c0:	6813      	ldr	r3, [r2, #0]
  4088c2:	17cd      	asrs	r5, r1, #31
  4088c4:	4608      	mov	r0, r1
  4088c6:	3204      	adds	r2, #4
  4088c8:	4629      	mov	r1, r5
  4088ca:	920f      	str	r2, [sp, #60]	; 0x3c
  4088cc:	e9c3 0100 	strd	r0, r1, [r3]
  4088d0:	f7ff b81d 	b.w	40790e <_svfprintf_r+0x4e>
  4088d4:	aa25      	add	r2, sp, #148	; 0x94
  4088d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4088d8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4088da:	f003 fee7 	bl	40c6ac <__ssprint_r>
  4088de:	2800      	cmp	r0, #0
  4088e0:	f47f a8c0 	bne.w	407a64 <_svfprintf_r+0x1a4>
  4088e4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4088e6:	46c8      	mov	r8, r9
  4088e8:	e458      	b.n	40819c <_svfprintf_r+0x8dc>
  4088ea:	bf00      	nop
  4088ec:	0040db60 	.word	0x0040db60
  4088f0:	0040db4c 	.word	0x0040db4c
  4088f4:	2140      	movs	r1, #64	; 0x40
  4088f6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4088f8:	f002 fe56 	bl	40b5a8 <_malloc_r>
  4088fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4088fe:	6010      	str	r0, [r2, #0]
  408900:	6110      	str	r0, [r2, #16]
  408902:	2800      	cmp	r0, #0
  408904:	f000 81f2 	beq.w	408cec <_svfprintf_r+0x142c>
  408908:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40890a:	2340      	movs	r3, #64	; 0x40
  40890c:	6153      	str	r3, [r2, #20]
  40890e:	f7fe bfee 	b.w	4078ee <_svfprintf_r+0x2e>
  408912:	a823      	add	r0, sp, #140	; 0x8c
  408914:	a920      	add	r1, sp, #128	; 0x80
  408916:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  408918:	9004      	str	r0, [sp, #16]
  40891a:	9103      	str	r1, [sp, #12]
  40891c:	a81f      	add	r0, sp, #124	; 0x7c
  40891e:	2103      	movs	r1, #3
  408920:	9002      	str	r0, [sp, #8]
  408922:	9a08      	ldr	r2, [sp, #32]
  408924:	9401      	str	r4, [sp, #4]
  408926:	463b      	mov	r3, r7
  408928:	9100      	str	r1, [sp, #0]
  40892a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40892c:	f001 f9c8 	bl	409cc0 <_dtoa_r>
  408930:	4625      	mov	r5, r4
  408932:	4606      	mov	r6, r0
  408934:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408936:	2b46      	cmp	r3, #70	; 0x46
  408938:	eb06 0405 	add.w	r4, r6, r5
  40893c:	f47f af29 	bne.w	408792 <_svfprintf_r+0xed2>
  408940:	7833      	ldrb	r3, [r6, #0]
  408942:	2b30      	cmp	r3, #48	; 0x30
  408944:	f000 8178 	beq.w	408c38 <_svfprintf_r+0x1378>
  408948:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  40894a:	442c      	add	r4, r5
  40894c:	e721      	b.n	408792 <_svfprintf_r+0xed2>
  40894e:	aa25      	add	r2, sp, #148	; 0x94
  408950:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408952:	980c      	ldr	r0, [sp, #48]	; 0x30
  408954:	f003 feaa 	bl	40c6ac <__ssprint_r>
  408958:	2800      	cmp	r0, #0
  40895a:	f47f a883 	bne.w	407a64 <_svfprintf_r+0x1a4>
  40895e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  408960:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408962:	46c8      	mov	r8, r9
  408964:	e782      	b.n	40886c <_svfprintf_r+0xfac>
  408966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408968:	2b00      	cmp	r3, #0
  40896a:	bf08      	it	eq
  40896c:	2301      	moveq	r3, #1
  40896e:	930a      	str	r3, [sp, #40]	; 0x28
  408970:	e6db      	b.n	40872a <_svfprintf_r+0xe6a>
  408972:	4630      	mov	r0, r6
  408974:	940a      	str	r4, [sp, #40]	; 0x28
  408976:	f7fe ff03 	bl	407780 <strlen>
  40897a:	950f      	str	r5, [sp, #60]	; 0x3c
  40897c:	900e      	str	r0, [sp, #56]	; 0x38
  40897e:	f8cd b01c 	str.w	fp, [sp, #28]
  408982:	4603      	mov	r3, r0
  408984:	f7ff b9f9 	b.w	407d7a <_svfprintf_r+0x4ba>
  408988:	272d      	movs	r7, #45	; 0x2d
  40898a:	2300      	movs	r3, #0
  40898c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  408990:	930a      	str	r3, [sp, #40]	; 0x28
  408992:	f7ff b8ae 	b.w	407af2 <_svfprintf_r+0x232>
  408996:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  408998:	9312      	str	r3, [sp, #72]	; 0x48
  40899a:	461a      	mov	r2, r3
  40899c:	3303      	adds	r3, #3
  40899e:	db04      	blt.n	4089aa <_svfprintf_r+0x10ea>
  4089a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4089a2:	4619      	mov	r1, r3
  4089a4:	4291      	cmp	r1, r2
  4089a6:	f6bf af17 	bge.w	4087d8 <_svfprintf_r+0xf18>
  4089aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4089ac:	3b02      	subs	r3, #2
  4089ae:	9311      	str	r3, [sp, #68]	; 0x44
  4089b0:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  4089b4:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  4089b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4089ba:	3b01      	subs	r3, #1
  4089bc:	2b00      	cmp	r3, #0
  4089be:	931f      	str	r3, [sp, #124]	; 0x7c
  4089c0:	bfbd      	ittte	lt
  4089c2:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  4089c4:	f1c3 0301 	rsblt	r3, r3, #1
  4089c8:	222d      	movlt	r2, #45	; 0x2d
  4089ca:	222b      	movge	r2, #43	; 0x2b
  4089cc:	2b09      	cmp	r3, #9
  4089ce:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  4089d2:	f340 8116 	ble.w	408c02 <_svfprintf_r+0x1342>
  4089d6:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  4089da:	4620      	mov	r0, r4
  4089dc:	4dab      	ldr	r5, [pc, #684]	; (408c8c <_svfprintf_r+0x13cc>)
  4089de:	e000      	b.n	4089e2 <_svfprintf_r+0x1122>
  4089e0:	4610      	mov	r0, r2
  4089e2:	fb85 1203 	smull	r1, r2, r5, r3
  4089e6:	17d9      	asrs	r1, r3, #31
  4089e8:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  4089ec:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4089f0:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  4089f4:	3230      	adds	r2, #48	; 0x30
  4089f6:	2909      	cmp	r1, #9
  4089f8:	f800 2c01 	strb.w	r2, [r0, #-1]
  4089fc:	460b      	mov	r3, r1
  4089fe:	f100 32ff 	add.w	r2, r0, #4294967295
  408a02:	dced      	bgt.n	4089e0 <_svfprintf_r+0x1120>
  408a04:	3330      	adds	r3, #48	; 0x30
  408a06:	3802      	subs	r0, #2
  408a08:	b2d9      	uxtb	r1, r3
  408a0a:	4284      	cmp	r4, r0
  408a0c:	f802 1c01 	strb.w	r1, [r2, #-1]
  408a10:	f240 8165 	bls.w	408cde <_svfprintf_r+0x141e>
  408a14:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  408a18:	4613      	mov	r3, r2
  408a1a:	e001      	b.n	408a20 <_svfprintf_r+0x1160>
  408a1c:	f813 1b01 	ldrb.w	r1, [r3], #1
  408a20:	f800 1b01 	strb.w	r1, [r0], #1
  408a24:	42a3      	cmp	r3, r4
  408a26:	d1f9      	bne.n	408a1c <_svfprintf_r+0x115c>
  408a28:	3301      	adds	r3, #1
  408a2a:	1a9b      	subs	r3, r3, r2
  408a2c:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  408a30:	4413      	add	r3, r2
  408a32:	aa21      	add	r2, sp, #132	; 0x84
  408a34:	1a9b      	subs	r3, r3, r2
  408a36:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  408a38:	931b      	str	r3, [sp, #108]	; 0x6c
  408a3a:	2a01      	cmp	r2, #1
  408a3c:	4413      	add	r3, r2
  408a3e:	930e      	str	r3, [sp, #56]	; 0x38
  408a40:	f340 8119 	ble.w	408c76 <_svfprintf_r+0x13b6>
  408a44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408a46:	9a19      	ldr	r2, [sp, #100]	; 0x64
  408a48:	4413      	add	r3, r2
  408a4a:	930e      	str	r3, [sp, #56]	; 0x38
  408a4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408a50:	9308      	str	r3, [sp, #32]
  408a52:	2300      	movs	r3, #0
  408a54:	9312      	str	r3, [sp, #72]	; 0x48
  408a56:	e6cf      	b.n	4087f8 <_svfprintf_r+0xf38>
  408a58:	aa25      	add	r2, sp, #148	; 0x94
  408a5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408a5c:	980c      	ldr	r0, [sp, #48]	; 0x30
  408a5e:	f003 fe25 	bl	40c6ac <__ssprint_r>
  408a62:	2800      	cmp	r0, #0
  408a64:	f47e affe 	bne.w	407a64 <_svfprintf_r+0x1a4>
  408a68:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408a6a:	46c8      	mov	r8, r9
  408a6c:	e4d7      	b.n	40841e <_svfprintf_r+0xb5e>
  408a6e:	4623      	mov	r3, r4
  408a70:	e6a2      	b.n	4087b8 <_svfprintf_r+0xef8>
  408a72:	aa25      	add	r2, sp, #148	; 0x94
  408a74:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408a76:	980c      	ldr	r0, [sp, #48]	; 0x30
  408a78:	f003 fe18 	bl	40c6ac <__ssprint_r>
  408a7c:	2800      	cmp	r0, #0
  408a7e:	f47e aff1 	bne.w	407a64 <_svfprintf_r+0x1a4>
  408a82:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  408a84:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408a86:	46c8      	mov	r8, r9
  408a88:	e5ae      	b.n	4085e8 <_svfprintf_r+0xd28>
  408a8a:	aa25      	add	r2, sp, #148	; 0x94
  408a8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408a8e:	980c      	ldr	r0, [sp, #48]	; 0x30
  408a90:	f003 fe0c 	bl	40c6ac <__ssprint_r>
  408a94:	2800      	cmp	r0, #0
  408a96:	f47e afe5 	bne.w	407a64 <_svfprintf_r+0x1a4>
  408a9a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  408a9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  408a9e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408aa0:	1a9a      	subs	r2, r3, r2
  408aa2:	46c8      	mov	r8, r9
  408aa4:	e5b8      	b.n	408618 <_svfprintf_r+0xd58>
  408aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408aa8:	9612      	str	r6, [sp, #72]	; 0x48
  408aaa:	2b06      	cmp	r3, #6
  408aac:	bf28      	it	cs
  408aae:	2306      	movcs	r3, #6
  408ab0:	960a      	str	r6, [sp, #40]	; 0x28
  408ab2:	4637      	mov	r7, r6
  408ab4:	9308      	str	r3, [sp, #32]
  408ab6:	950f      	str	r5, [sp, #60]	; 0x3c
  408ab8:	f8cd b01c 	str.w	fp, [sp, #28]
  408abc:	930e      	str	r3, [sp, #56]	; 0x38
  408abe:	4e74      	ldr	r6, [pc, #464]	; (408c90 <_svfprintf_r+0x13d0>)
  408ac0:	f7ff b816 	b.w	407af0 <_svfprintf_r+0x230>
  408ac4:	a823      	add	r0, sp, #140	; 0x8c
  408ac6:	a920      	add	r1, sp, #128	; 0x80
  408ac8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  408aca:	9004      	str	r0, [sp, #16]
  408acc:	9103      	str	r1, [sp, #12]
  408ace:	a81f      	add	r0, sp, #124	; 0x7c
  408ad0:	2103      	movs	r1, #3
  408ad2:	9002      	str	r0, [sp, #8]
  408ad4:	9a08      	ldr	r2, [sp, #32]
  408ad6:	9501      	str	r5, [sp, #4]
  408ad8:	463b      	mov	r3, r7
  408ada:	9100      	str	r1, [sp, #0]
  408adc:	980c      	ldr	r0, [sp, #48]	; 0x30
  408ade:	f001 f8ef 	bl	409cc0 <_dtoa_r>
  408ae2:	4606      	mov	r6, r0
  408ae4:	1944      	adds	r4, r0, r5
  408ae6:	e72b      	b.n	408940 <_svfprintf_r+0x1080>
  408ae8:	2306      	movs	r3, #6
  408aea:	930a      	str	r3, [sp, #40]	; 0x28
  408aec:	e61d      	b.n	40872a <_svfprintf_r+0xe6a>
  408aee:	272d      	movs	r7, #45	; 0x2d
  408af0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  408af4:	f7ff bacd 	b.w	408092 <_svfprintf_r+0x7d2>
  408af8:	9a19      	ldr	r2, [sp, #100]	; 0x64
  408afa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  408afc:	4413      	add	r3, r2
  408afe:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408b00:	930e      	str	r3, [sp, #56]	; 0x38
  408b02:	2a00      	cmp	r2, #0
  408b04:	f340 80b0 	ble.w	408c68 <_svfprintf_r+0x13a8>
  408b08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408b0c:	9308      	str	r3, [sp, #32]
  408b0e:	2367      	movs	r3, #103	; 0x67
  408b10:	9311      	str	r3, [sp, #68]	; 0x44
  408b12:	e671      	b.n	4087f8 <_svfprintf_r+0xf38>
  408b14:	2b00      	cmp	r3, #0
  408b16:	f340 80c3 	ble.w	408ca0 <_svfprintf_r+0x13e0>
  408b1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  408b1c:	2a00      	cmp	r2, #0
  408b1e:	f040 8099 	bne.w	408c54 <_svfprintf_r+0x1394>
  408b22:	f01b 0f01 	tst.w	fp, #1
  408b26:	f040 8095 	bne.w	408c54 <_svfprintf_r+0x1394>
  408b2a:	9308      	str	r3, [sp, #32]
  408b2c:	930e      	str	r3, [sp, #56]	; 0x38
  408b2e:	e663      	b.n	4087f8 <_svfprintf_r+0xf38>
  408b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408b32:	9308      	str	r3, [sp, #32]
  408b34:	930e      	str	r3, [sp, #56]	; 0x38
  408b36:	900a      	str	r0, [sp, #40]	; 0x28
  408b38:	950f      	str	r5, [sp, #60]	; 0x3c
  408b3a:	f8cd b01c 	str.w	fp, [sp, #28]
  408b3e:	9012      	str	r0, [sp, #72]	; 0x48
  408b40:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  408b44:	f7fe bfd4 	b.w	407af0 <_svfprintf_r+0x230>
  408b48:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408b4a:	2b47      	cmp	r3, #71	; 0x47
  408b4c:	f47f ae20 	bne.w	408790 <_svfprintf_r+0xed0>
  408b50:	f01b 0f01 	tst.w	fp, #1
  408b54:	f47f aeee 	bne.w	408934 <_svfprintf_r+0x1074>
  408b58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  408b5a:	1b9b      	subs	r3, r3, r6
  408b5c:	9313      	str	r3, [sp, #76]	; 0x4c
  408b5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408b60:	2b47      	cmp	r3, #71	; 0x47
  408b62:	f43f af18 	beq.w	408996 <_svfprintf_r+0x10d6>
  408b66:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  408b68:	9312      	str	r3, [sp, #72]	; 0x48
  408b6a:	e721      	b.n	4089b0 <_svfprintf_r+0x10f0>
  408b6c:	424f      	negs	r7, r1
  408b6e:	3110      	adds	r1, #16
  408b70:	4d48      	ldr	r5, [pc, #288]	; (408c94 <_svfprintf_r+0x13d4>)
  408b72:	da2f      	bge.n	408bd4 <_svfprintf_r+0x1314>
  408b74:	2410      	movs	r4, #16
  408b76:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  408b7a:	e004      	b.n	408b86 <_svfprintf_r+0x12c6>
  408b7c:	f108 0808 	add.w	r8, r8, #8
  408b80:	3f10      	subs	r7, #16
  408b82:	2f10      	cmp	r7, #16
  408b84:	dd26      	ble.n	408bd4 <_svfprintf_r+0x1314>
  408b86:	3301      	adds	r3, #1
  408b88:	3210      	adds	r2, #16
  408b8a:	2b07      	cmp	r3, #7
  408b8c:	9227      	str	r2, [sp, #156]	; 0x9c
  408b8e:	9326      	str	r3, [sp, #152]	; 0x98
  408b90:	f8c8 5000 	str.w	r5, [r8]
  408b94:	f8c8 4004 	str.w	r4, [r8, #4]
  408b98:	ddf0      	ble.n	408b7c <_svfprintf_r+0x12bc>
  408b9a:	aa25      	add	r2, sp, #148	; 0x94
  408b9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408b9e:	4658      	mov	r0, fp
  408ba0:	f003 fd84 	bl	40c6ac <__ssprint_r>
  408ba4:	2800      	cmp	r0, #0
  408ba6:	f47e af5d 	bne.w	407a64 <_svfprintf_r+0x1a4>
  408baa:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  408bac:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408bae:	46c8      	mov	r8, r9
  408bb0:	e7e6      	b.n	408b80 <_svfprintf_r+0x12c0>
  408bb2:	aa25      	add	r2, sp, #148	; 0x94
  408bb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408bb6:	980c      	ldr	r0, [sp, #48]	; 0x30
  408bb8:	f003 fd78 	bl	40c6ac <__ssprint_r>
  408bbc:	2800      	cmp	r0, #0
  408bbe:	f47e af51 	bne.w	407a64 <_svfprintf_r+0x1a4>
  408bc2:	991f      	ldr	r1, [sp, #124]	; 0x7c
  408bc4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  408bc6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408bc8:	46c8      	mov	r8, r9
  408bca:	e667      	b.n	40889c <_svfprintf_r+0xfdc>
  408bcc:	2000      	movs	r0, #0
  408bce:	900a      	str	r0, [sp, #40]	; 0x28
  408bd0:	f7fe bed0 	b.w	407974 <_svfprintf_r+0xb4>
  408bd4:	3301      	adds	r3, #1
  408bd6:	443a      	add	r2, r7
  408bd8:	2b07      	cmp	r3, #7
  408bda:	e888 00a0 	stmia.w	r8, {r5, r7}
  408bde:	9227      	str	r2, [sp, #156]	; 0x9c
  408be0:	9326      	str	r3, [sp, #152]	; 0x98
  408be2:	f108 0808 	add.w	r8, r8, #8
  408be6:	f77f ae5c 	ble.w	4088a2 <_svfprintf_r+0xfe2>
  408bea:	aa25      	add	r2, sp, #148	; 0x94
  408bec:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408bee:	980c      	ldr	r0, [sp, #48]	; 0x30
  408bf0:	f003 fd5c 	bl	40c6ac <__ssprint_r>
  408bf4:	2800      	cmp	r0, #0
  408bf6:	f47e af35 	bne.w	407a64 <_svfprintf_r+0x1a4>
  408bfa:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  408bfc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408bfe:	46c8      	mov	r8, r9
  408c00:	e64f      	b.n	4088a2 <_svfprintf_r+0xfe2>
  408c02:	3330      	adds	r3, #48	; 0x30
  408c04:	2230      	movs	r2, #48	; 0x30
  408c06:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  408c0a:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  408c0e:	ab22      	add	r3, sp, #136	; 0x88
  408c10:	e70f      	b.n	408a32 <_svfprintf_r+0x1172>
  408c12:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408c14:	9a19      	ldr	r2, [sp, #100]	; 0x64
  408c16:	4413      	add	r3, r2
  408c18:	930e      	str	r3, [sp, #56]	; 0x38
  408c1a:	e775      	b.n	408b08 <_svfprintf_r+0x1248>
  408c1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  408c1e:	e5cb      	b.n	4087b8 <_svfprintf_r+0xef8>
  408c20:	9b14      	ldr	r3, [sp, #80]	; 0x50
  408c22:	4e1d      	ldr	r6, [pc, #116]	; (408c98 <_svfprintf_r+0x13d8>)
  408c24:	2b00      	cmp	r3, #0
  408c26:	bfb6      	itet	lt
  408c28:	272d      	movlt	r7, #45	; 0x2d
  408c2a:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  408c2e:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  408c32:	4b1a      	ldr	r3, [pc, #104]	; (408c9c <_svfprintf_r+0x13dc>)
  408c34:	f7ff ba2f 	b.w	408096 <_svfprintf_r+0x7d6>
  408c38:	9a16      	ldr	r2, [sp, #88]	; 0x58
  408c3a:	9808      	ldr	r0, [sp, #32]
  408c3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  408c3e:	4639      	mov	r1, r7
  408c40:	f004 fbd0 	bl	40d3e4 <__aeabi_dcmpeq>
  408c44:	2800      	cmp	r0, #0
  408c46:	f47f ae7f 	bne.w	408948 <_svfprintf_r+0x1088>
  408c4a:	f1c5 0501 	rsb	r5, r5, #1
  408c4e:	951f      	str	r5, [sp, #124]	; 0x7c
  408c50:	442c      	add	r4, r5
  408c52:	e59e      	b.n	408792 <_svfprintf_r+0xed2>
  408c54:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408c56:	9a19      	ldr	r2, [sp, #100]	; 0x64
  408c58:	4413      	add	r3, r2
  408c5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  408c5c:	441a      	add	r2, r3
  408c5e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  408c62:	920e      	str	r2, [sp, #56]	; 0x38
  408c64:	9308      	str	r3, [sp, #32]
  408c66:	e5c7      	b.n	4087f8 <_svfprintf_r+0xf38>
  408c68:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408c6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408c6c:	f1c3 0301 	rsb	r3, r3, #1
  408c70:	441a      	add	r2, r3
  408c72:	4613      	mov	r3, r2
  408c74:	e7d0      	b.n	408c18 <_svfprintf_r+0x1358>
  408c76:	f01b 0301 	ands.w	r3, fp, #1
  408c7a:	9312      	str	r3, [sp, #72]	; 0x48
  408c7c:	f47f aee2 	bne.w	408a44 <_svfprintf_r+0x1184>
  408c80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408c82:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408c86:	9308      	str	r3, [sp, #32]
  408c88:	e5b6      	b.n	4087f8 <_svfprintf_r+0xf38>
  408c8a:	bf00      	nop
  408c8c:	66666667 	.word	0x66666667
  408c90:	0040db44 	.word	0x0040db44
  408c94:	0040db60 	.word	0x0040db60
  408c98:	0040db18 	.word	0x0040db18
  408c9c:	0040db14 	.word	0x0040db14
  408ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408ca2:	b913      	cbnz	r3, 408caa <_svfprintf_r+0x13ea>
  408ca4:	f01b 0f01 	tst.w	fp, #1
  408ca8:	d002      	beq.n	408cb0 <_svfprintf_r+0x13f0>
  408caa:	9b19      	ldr	r3, [sp, #100]	; 0x64
  408cac:	3301      	adds	r3, #1
  408cae:	e7d4      	b.n	408c5a <_svfprintf_r+0x139a>
  408cb0:	2301      	movs	r3, #1
  408cb2:	e73a      	b.n	408b2a <_svfprintf_r+0x126a>
  408cb4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  408cb6:	f89a 3001 	ldrb.w	r3, [sl, #1]
  408cba:	6828      	ldr	r0, [r5, #0]
  408cbc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  408cc0:	900a      	str	r0, [sp, #40]	; 0x28
  408cc2:	4628      	mov	r0, r5
  408cc4:	3004      	adds	r0, #4
  408cc6:	46a2      	mov	sl, r4
  408cc8:	900f      	str	r0, [sp, #60]	; 0x3c
  408cca:	f7fe be51 	b.w	407970 <_svfprintf_r+0xb0>
  408cce:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  408cd2:	f7ff b867 	b.w	407da4 <_svfprintf_r+0x4e4>
  408cd6:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  408cda:	f7ff ba15 	b.w	408108 <_svfprintf_r+0x848>
  408cde:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  408ce2:	e6a6      	b.n	408a32 <_svfprintf_r+0x1172>
  408ce4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  408ce8:	f7ff b8eb 	b.w	407ec2 <_svfprintf_r+0x602>
  408cec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408cee:	230c      	movs	r3, #12
  408cf0:	6013      	str	r3, [r2, #0]
  408cf2:	f04f 33ff 	mov.w	r3, #4294967295
  408cf6:	9309      	str	r3, [sp, #36]	; 0x24
  408cf8:	f7fe bebd 	b.w	407a76 <_svfprintf_r+0x1b6>
  408cfc:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  408d00:	f7ff b99a 	b.w	408038 <_svfprintf_r+0x778>
  408d04:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  408d08:	f7ff b976 	b.w	407ff8 <_svfprintf_r+0x738>
  408d0c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  408d10:	f7ff b959 	b.w	407fc6 <_svfprintf_r+0x706>
  408d14:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  408d18:	f7ff b912 	b.w	407f40 <_svfprintf_r+0x680>

00408d1c <__sprint_r.part.0>:
  408d1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408d20:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  408d22:	049c      	lsls	r4, r3, #18
  408d24:	4693      	mov	fp, r2
  408d26:	d52f      	bpl.n	408d88 <__sprint_r.part.0+0x6c>
  408d28:	6893      	ldr	r3, [r2, #8]
  408d2a:	6812      	ldr	r2, [r2, #0]
  408d2c:	b353      	cbz	r3, 408d84 <__sprint_r.part.0+0x68>
  408d2e:	460e      	mov	r6, r1
  408d30:	4607      	mov	r7, r0
  408d32:	f102 0908 	add.w	r9, r2, #8
  408d36:	e919 0420 	ldmdb	r9, {r5, sl}
  408d3a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  408d3e:	d017      	beq.n	408d70 <__sprint_r.part.0+0x54>
  408d40:	3d04      	subs	r5, #4
  408d42:	2400      	movs	r4, #0
  408d44:	e001      	b.n	408d4a <__sprint_r.part.0+0x2e>
  408d46:	45a0      	cmp	r8, r4
  408d48:	d010      	beq.n	408d6c <__sprint_r.part.0+0x50>
  408d4a:	4632      	mov	r2, r6
  408d4c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  408d50:	4638      	mov	r0, r7
  408d52:	f002 f879 	bl	40ae48 <_fputwc_r>
  408d56:	1c43      	adds	r3, r0, #1
  408d58:	f104 0401 	add.w	r4, r4, #1
  408d5c:	d1f3      	bne.n	408d46 <__sprint_r.part.0+0x2a>
  408d5e:	2300      	movs	r3, #0
  408d60:	f8cb 3008 	str.w	r3, [fp, #8]
  408d64:	f8cb 3004 	str.w	r3, [fp, #4]
  408d68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408d6c:	f8db 3008 	ldr.w	r3, [fp, #8]
  408d70:	f02a 0a03 	bic.w	sl, sl, #3
  408d74:	eba3 030a 	sub.w	r3, r3, sl
  408d78:	f8cb 3008 	str.w	r3, [fp, #8]
  408d7c:	f109 0908 	add.w	r9, r9, #8
  408d80:	2b00      	cmp	r3, #0
  408d82:	d1d8      	bne.n	408d36 <__sprint_r.part.0+0x1a>
  408d84:	2000      	movs	r0, #0
  408d86:	e7ea      	b.n	408d5e <__sprint_r.part.0+0x42>
  408d88:	f002 f9c8 	bl	40b11c <__sfvwrite_r>
  408d8c:	2300      	movs	r3, #0
  408d8e:	f8cb 3008 	str.w	r3, [fp, #8]
  408d92:	f8cb 3004 	str.w	r3, [fp, #4]
  408d96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408d9a:	bf00      	nop

00408d9c <_vfiprintf_r>:
  408d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408da0:	b0ad      	sub	sp, #180	; 0xb4
  408da2:	461d      	mov	r5, r3
  408da4:	468b      	mov	fp, r1
  408da6:	4690      	mov	r8, r2
  408da8:	9307      	str	r3, [sp, #28]
  408daa:	9006      	str	r0, [sp, #24]
  408dac:	b118      	cbz	r0, 408db6 <_vfiprintf_r+0x1a>
  408dae:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408db0:	2b00      	cmp	r3, #0
  408db2:	f000 80f3 	beq.w	408f9c <_vfiprintf_r+0x200>
  408db6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  408dba:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  408dbe:	07df      	lsls	r7, r3, #31
  408dc0:	b281      	uxth	r1, r0
  408dc2:	d402      	bmi.n	408dca <_vfiprintf_r+0x2e>
  408dc4:	058e      	lsls	r6, r1, #22
  408dc6:	f140 80fc 	bpl.w	408fc2 <_vfiprintf_r+0x226>
  408dca:	048c      	lsls	r4, r1, #18
  408dcc:	d40a      	bmi.n	408de4 <_vfiprintf_r+0x48>
  408dce:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  408dd2:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  408dd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  408dda:	f8ab 100c 	strh.w	r1, [fp, #12]
  408dde:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  408de2:	b289      	uxth	r1, r1
  408de4:	0708      	lsls	r0, r1, #28
  408de6:	f140 80b3 	bpl.w	408f50 <_vfiprintf_r+0x1b4>
  408dea:	f8db 3010 	ldr.w	r3, [fp, #16]
  408dee:	2b00      	cmp	r3, #0
  408df0:	f000 80ae 	beq.w	408f50 <_vfiprintf_r+0x1b4>
  408df4:	f001 031a 	and.w	r3, r1, #26
  408df8:	2b0a      	cmp	r3, #10
  408dfa:	f000 80b5 	beq.w	408f68 <_vfiprintf_r+0x1cc>
  408dfe:	2300      	movs	r3, #0
  408e00:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  408e04:	930b      	str	r3, [sp, #44]	; 0x2c
  408e06:	9311      	str	r3, [sp, #68]	; 0x44
  408e08:	9310      	str	r3, [sp, #64]	; 0x40
  408e0a:	9303      	str	r3, [sp, #12]
  408e0c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  408e10:	46ca      	mov	sl, r9
  408e12:	f8cd b010 	str.w	fp, [sp, #16]
  408e16:	f898 3000 	ldrb.w	r3, [r8]
  408e1a:	4644      	mov	r4, r8
  408e1c:	b1fb      	cbz	r3, 408e5e <_vfiprintf_r+0xc2>
  408e1e:	2b25      	cmp	r3, #37	; 0x25
  408e20:	d102      	bne.n	408e28 <_vfiprintf_r+0x8c>
  408e22:	e01c      	b.n	408e5e <_vfiprintf_r+0xc2>
  408e24:	2b25      	cmp	r3, #37	; 0x25
  408e26:	d003      	beq.n	408e30 <_vfiprintf_r+0x94>
  408e28:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  408e2c:	2b00      	cmp	r3, #0
  408e2e:	d1f9      	bne.n	408e24 <_vfiprintf_r+0x88>
  408e30:	eba4 0508 	sub.w	r5, r4, r8
  408e34:	b19d      	cbz	r5, 408e5e <_vfiprintf_r+0xc2>
  408e36:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408e38:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408e3a:	f8ca 8000 	str.w	r8, [sl]
  408e3e:	3301      	adds	r3, #1
  408e40:	442a      	add	r2, r5
  408e42:	2b07      	cmp	r3, #7
  408e44:	f8ca 5004 	str.w	r5, [sl, #4]
  408e48:	9211      	str	r2, [sp, #68]	; 0x44
  408e4a:	9310      	str	r3, [sp, #64]	; 0x40
  408e4c:	dd7a      	ble.n	408f44 <_vfiprintf_r+0x1a8>
  408e4e:	2a00      	cmp	r2, #0
  408e50:	f040 84b0 	bne.w	4097b4 <_vfiprintf_r+0xa18>
  408e54:	9b03      	ldr	r3, [sp, #12]
  408e56:	9210      	str	r2, [sp, #64]	; 0x40
  408e58:	442b      	add	r3, r5
  408e5a:	46ca      	mov	sl, r9
  408e5c:	9303      	str	r3, [sp, #12]
  408e5e:	7823      	ldrb	r3, [r4, #0]
  408e60:	2b00      	cmp	r3, #0
  408e62:	f000 83e0 	beq.w	409626 <_vfiprintf_r+0x88a>
  408e66:	2000      	movs	r0, #0
  408e68:	f04f 0300 	mov.w	r3, #0
  408e6c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  408e70:	f104 0801 	add.w	r8, r4, #1
  408e74:	7862      	ldrb	r2, [r4, #1]
  408e76:	4605      	mov	r5, r0
  408e78:	4606      	mov	r6, r0
  408e7a:	4603      	mov	r3, r0
  408e7c:	f04f 34ff 	mov.w	r4, #4294967295
  408e80:	f108 0801 	add.w	r8, r8, #1
  408e84:	f1a2 0120 	sub.w	r1, r2, #32
  408e88:	2958      	cmp	r1, #88	; 0x58
  408e8a:	f200 82de 	bhi.w	40944a <_vfiprintf_r+0x6ae>
  408e8e:	e8df f011 	tbh	[pc, r1, lsl #1]
  408e92:	0221      	.short	0x0221
  408e94:	02dc02dc 	.word	0x02dc02dc
  408e98:	02dc0229 	.word	0x02dc0229
  408e9c:	02dc02dc 	.word	0x02dc02dc
  408ea0:	02dc02dc 	.word	0x02dc02dc
  408ea4:	028902dc 	.word	0x028902dc
  408ea8:	02dc0295 	.word	0x02dc0295
  408eac:	02bd00a2 	.word	0x02bd00a2
  408eb0:	019f02dc 	.word	0x019f02dc
  408eb4:	01a401a4 	.word	0x01a401a4
  408eb8:	01a401a4 	.word	0x01a401a4
  408ebc:	01a401a4 	.word	0x01a401a4
  408ec0:	01a401a4 	.word	0x01a401a4
  408ec4:	02dc01a4 	.word	0x02dc01a4
  408ec8:	02dc02dc 	.word	0x02dc02dc
  408ecc:	02dc02dc 	.word	0x02dc02dc
  408ed0:	02dc02dc 	.word	0x02dc02dc
  408ed4:	02dc02dc 	.word	0x02dc02dc
  408ed8:	01b202dc 	.word	0x01b202dc
  408edc:	02dc02dc 	.word	0x02dc02dc
  408ee0:	02dc02dc 	.word	0x02dc02dc
  408ee4:	02dc02dc 	.word	0x02dc02dc
  408ee8:	02dc02dc 	.word	0x02dc02dc
  408eec:	02dc02dc 	.word	0x02dc02dc
  408ef0:	02dc0197 	.word	0x02dc0197
  408ef4:	02dc02dc 	.word	0x02dc02dc
  408ef8:	02dc02dc 	.word	0x02dc02dc
  408efc:	02dc019b 	.word	0x02dc019b
  408f00:	025302dc 	.word	0x025302dc
  408f04:	02dc02dc 	.word	0x02dc02dc
  408f08:	02dc02dc 	.word	0x02dc02dc
  408f0c:	02dc02dc 	.word	0x02dc02dc
  408f10:	02dc02dc 	.word	0x02dc02dc
  408f14:	02dc02dc 	.word	0x02dc02dc
  408f18:	021b025a 	.word	0x021b025a
  408f1c:	02dc02dc 	.word	0x02dc02dc
  408f20:	026e02dc 	.word	0x026e02dc
  408f24:	02dc021b 	.word	0x02dc021b
  408f28:	027302dc 	.word	0x027302dc
  408f2c:	01f502dc 	.word	0x01f502dc
  408f30:	02090182 	.word	0x02090182
  408f34:	02dc02d7 	.word	0x02dc02d7
  408f38:	02dc029a 	.word	0x02dc029a
  408f3c:	02dc00a7 	.word	0x02dc00a7
  408f40:	022e02dc 	.word	0x022e02dc
  408f44:	f10a 0a08 	add.w	sl, sl, #8
  408f48:	9b03      	ldr	r3, [sp, #12]
  408f4a:	442b      	add	r3, r5
  408f4c:	9303      	str	r3, [sp, #12]
  408f4e:	e786      	b.n	408e5e <_vfiprintf_r+0xc2>
  408f50:	4659      	mov	r1, fp
  408f52:	9806      	ldr	r0, [sp, #24]
  408f54:	f000 fdac 	bl	409ab0 <__swsetup_r>
  408f58:	bb18      	cbnz	r0, 408fa2 <_vfiprintf_r+0x206>
  408f5a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  408f5e:	f001 031a 	and.w	r3, r1, #26
  408f62:	2b0a      	cmp	r3, #10
  408f64:	f47f af4b 	bne.w	408dfe <_vfiprintf_r+0x62>
  408f68:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  408f6c:	2b00      	cmp	r3, #0
  408f6e:	f6ff af46 	blt.w	408dfe <_vfiprintf_r+0x62>
  408f72:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  408f76:	07db      	lsls	r3, r3, #31
  408f78:	d405      	bmi.n	408f86 <_vfiprintf_r+0x1ea>
  408f7a:	058f      	lsls	r7, r1, #22
  408f7c:	d403      	bmi.n	408f86 <_vfiprintf_r+0x1ea>
  408f7e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  408f82:	f002 fa8f 	bl	40b4a4 <__retarget_lock_release_recursive>
  408f86:	462b      	mov	r3, r5
  408f88:	4642      	mov	r2, r8
  408f8a:	4659      	mov	r1, fp
  408f8c:	9806      	ldr	r0, [sp, #24]
  408f8e:	f000 fd4d 	bl	409a2c <__sbprintf>
  408f92:	9003      	str	r0, [sp, #12]
  408f94:	9803      	ldr	r0, [sp, #12]
  408f96:	b02d      	add	sp, #180	; 0xb4
  408f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408f9c:	f001 feb2 	bl	40ad04 <__sinit>
  408fa0:	e709      	b.n	408db6 <_vfiprintf_r+0x1a>
  408fa2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  408fa6:	07d9      	lsls	r1, r3, #31
  408fa8:	d404      	bmi.n	408fb4 <_vfiprintf_r+0x218>
  408faa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  408fae:	059a      	lsls	r2, r3, #22
  408fb0:	f140 84aa 	bpl.w	409908 <_vfiprintf_r+0xb6c>
  408fb4:	f04f 33ff 	mov.w	r3, #4294967295
  408fb8:	9303      	str	r3, [sp, #12]
  408fba:	9803      	ldr	r0, [sp, #12]
  408fbc:	b02d      	add	sp, #180	; 0xb4
  408fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408fc2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  408fc6:	f002 fa6b 	bl	40b4a0 <__retarget_lock_acquire_recursive>
  408fca:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  408fce:	b281      	uxth	r1, r0
  408fd0:	e6fb      	b.n	408dca <_vfiprintf_r+0x2e>
  408fd2:	4276      	negs	r6, r6
  408fd4:	9207      	str	r2, [sp, #28]
  408fd6:	f043 0304 	orr.w	r3, r3, #4
  408fda:	f898 2000 	ldrb.w	r2, [r8]
  408fde:	e74f      	b.n	408e80 <_vfiprintf_r+0xe4>
  408fe0:	9608      	str	r6, [sp, #32]
  408fe2:	069e      	lsls	r6, r3, #26
  408fe4:	f100 8450 	bmi.w	409888 <_vfiprintf_r+0xaec>
  408fe8:	9907      	ldr	r1, [sp, #28]
  408fea:	06dd      	lsls	r5, r3, #27
  408fec:	460a      	mov	r2, r1
  408fee:	f100 83ef 	bmi.w	4097d0 <_vfiprintf_r+0xa34>
  408ff2:	0658      	lsls	r0, r3, #25
  408ff4:	f140 83ec 	bpl.w	4097d0 <_vfiprintf_r+0xa34>
  408ff8:	880e      	ldrh	r6, [r1, #0]
  408ffa:	3104      	adds	r1, #4
  408ffc:	2700      	movs	r7, #0
  408ffe:	2201      	movs	r2, #1
  409000:	9107      	str	r1, [sp, #28]
  409002:	f04f 0100 	mov.w	r1, #0
  409006:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40900a:	2500      	movs	r5, #0
  40900c:	1c61      	adds	r1, r4, #1
  40900e:	f000 8116 	beq.w	40923e <_vfiprintf_r+0x4a2>
  409012:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  409016:	9102      	str	r1, [sp, #8]
  409018:	ea56 0107 	orrs.w	r1, r6, r7
  40901c:	f040 8114 	bne.w	409248 <_vfiprintf_r+0x4ac>
  409020:	2c00      	cmp	r4, #0
  409022:	f040 835c 	bne.w	4096de <_vfiprintf_r+0x942>
  409026:	2a00      	cmp	r2, #0
  409028:	f040 83b7 	bne.w	40979a <_vfiprintf_r+0x9fe>
  40902c:	f013 0301 	ands.w	r3, r3, #1
  409030:	9305      	str	r3, [sp, #20]
  409032:	f000 8457 	beq.w	4098e4 <_vfiprintf_r+0xb48>
  409036:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40903a:	2330      	movs	r3, #48	; 0x30
  40903c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  409040:	9b05      	ldr	r3, [sp, #20]
  409042:	42a3      	cmp	r3, r4
  409044:	bfb8      	it	lt
  409046:	4623      	movlt	r3, r4
  409048:	9301      	str	r3, [sp, #4]
  40904a:	b10d      	cbz	r5, 409050 <_vfiprintf_r+0x2b4>
  40904c:	3301      	adds	r3, #1
  40904e:	9301      	str	r3, [sp, #4]
  409050:	9b02      	ldr	r3, [sp, #8]
  409052:	f013 0302 	ands.w	r3, r3, #2
  409056:	9309      	str	r3, [sp, #36]	; 0x24
  409058:	d002      	beq.n	409060 <_vfiprintf_r+0x2c4>
  40905a:	9b01      	ldr	r3, [sp, #4]
  40905c:	3302      	adds	r3, #2
  40905e:	9301      	str	r3, [sp, #4]
  409060:	9b02      	ldr	r3, [sp, #8]
  409062:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  409066:	930a      	str	r3, [sp, #40]	; 0x28
  409068:	f040 8217 	bne.w	40949a <_vfiprintf_r+0x6fe>
  40906c:	9b08      	ldr	r3, [sp, #32]
  40906e:	9a01      	ldr	r2, [sp, #4]
  409070:	1a9d      	subs	r5, r3, r2
  409072:	2d00      	cmp	r5, #0
  409074:	f340 8211 	ble.w	40949a <_vfiprintf_r+0x6fe>
  409078:	2d10      	cmp	r5, #16
  40907a:	f340 8490 	ble.w	40999e <_vfiprintf_r+0xc02>
  40907e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  409080:	9a11      	ldr	r2, [sp, #68]	; 0x44
  409082:	4ec4      	ldr	r6, [pc, #784]	; (409394 <_vfiprintf_r+0x5f8>)
  409084:	46d6      	mov	lr, sl
  409086:	2710      	movs	r7, #16
  409088:	46a2      	mov	sl, r4
  40908a:	4619      	mov	r1, r3
  40908c:	9c06      	ldr	r4, [sp, #24]
  40908e:	e007      	b.n	4090a0 <_vfiprintf_r+0x304>
  409090:	f101 0c02 	add.w	ip, r1, #2
  409094:	f10e 0e08 	add.w	lr, lr, #8
  409098:	4601      	mov	r1, r0
  40909a:	3d10      	subs	r5, #16
  40909c:	2d10      	cmp	r5, #16
  40909e:	dd11      	ble.n	4090c4 <_vfiprintf_r+0x328>
  4090a0:	1c48      	adds	r0, r1, #1
  4090a2:	3210      	adds	r2, #16
  4090a4:	2807      	cmp	r0, #7
  4090a6:	9211      	str	r2, [sp, #68]	; 0x44
  4090a8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4090ac:	9010      	str	r0, [sp, #64]	; 0x40
  4090ae:	ddef      	ble.n	409090 <_vfiprintf_r+0x2f4>
  4090b0:	2a00      	cmp	r2, #0
  4090b2:	f040 81e4 	bne.w	40947e <_vfiprintf_r+0x6e2>
  4090b6:	3d10      	subs	r5, #16
  4090b8:	2d10      	cmp	r5, #16
  4090ba:	4611      	mov	r1, r2
  4090bc:	f04f 0c01 	mov.w	ip, #1
  4090c0:	46ce      	mov	lr, r9
  4090c2:	dced      	bgt.n	4090a0 <_vfiprintf_r+0x304>
  4090c4:	4654      	mov	r4, sl
  4090c6:	4661      	mov	r1, ip
  4090c8:	46f2      	mov	sl, lr
  4090ca:	442a      	add	r2, r5
  4090cc:	2907      	cmp	r1, #7
  4090ce:	9211      	str	r2, [sp, #68]	; 0x44
  4090d0:	f8ca 6000 	str.w	r6, [sl]
  4090d4:	f8ca 5004 	str.w	r5, [sl, #4]
  4090d8:	9110      	str	r1, [sp, #64]	; 0x40
  4090da:	f300 82ec 	bgt.w	4096b6 <_vfiprintf_r+0x91a>
  4090de:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4090e2:	f10a 0a08 	add.w	sl, sl, #8
  4090e6:	1c48      	adds	r0, r1, #1
  4090e8:	2d00      	cmp	r5, #0
  4090ea:	f040 81de 	bne.w	4094aa <_vfiprintf_r+0x70e>
  4090ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4090f0:	2b00      	cmp	r3, #0
  4090f2:	f000 81f8 	beq.w	4094e6 <_vfiprintf_r+0x74a>
  4090f6:	3202      	adds	r2, #2
  4090f8:	a90e      	add	r1, sp, #56	; 0x38
  4090fa:	2302      	movs	r3, #2
  4090fc:	2807      	cmp	r0, #7
  4090fe:	9211      	str	r2, [sp, #68]	; 0x44
  409100:	9010      	str	r0, [sp, #64]	; 0x40
  409102:	e88a 000a 	stmia.w	sl, {r1, r3}
  409106:	f340 81ea 	ble.w	4094de <_vfiprintf_r+0x742>
  40910a:	2a00      	cmp	r2, #0
  40910c:	f040 838c 	bne.w	409828 <_vfiprintf_r+0xa8c>
  409110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409112:	2b80      	cmp	r3, #128	; 0x80
  409114:	f04f 0001 	mov.w	r0, #1
  409118:	4611      	mov	r1, r2
  40911a:	46ca      	mov	sl, r9
  40911c:	f040 81e7 	bne.w	4094ee <_vfiprintf_r+0x752>
  409120:	9b08      	ldr	r3, [sp, #32]
  409122:	9d01      	ldr	r5, [sp, #4]
  409124:	1b5e      	subs	r6, r3, r5
  409126:	2e00      	cmp	r6, #0
  409128:	f340 81e1 	ble.w	4094ee <_vfiprintf_r+0x752>
  40912c:	2e10      	cmp	r6, #16
  40912e:	4d9a      	ldr	r5, [pc, #616]	; (409398 <_vfiprintf_r+0x5fc>)
  409130:	f340 8450 	ble.w	4099d4 <_vfiprintf_r+0xc38>
  409134:	46d4      	mov	ip, sl
  409136:	2710      	movs	r7, #16
  409138:	46a2      	mov	sl, r4
  40913a:	9c06      	ldr	r4, [sp, #24]
  40913c:	e007      	b.n	40914e <_vfiprintf_r+0x3b2>
  40913e:	f101 0e02 	add.w	lr, r1, #2
  409142:	f10c 0c08 	add.w	ip, ip, #8
  409146:	4601      	mov	r1, r0
  409148:	3e10      	subs	r6, #16
  40914a:	2e10      	cmp	r6, #16
  40914c:	dd11      	ble.n	409172 <_vfiprintf_r+0x3d6>
  40914e:	1c48      	adds	r0, r1, #1
  409150:	3210      	adds	r2, #16
  409152:	2807      	cmp	r0, #7
  409154:	9211      	str	r2, [sp, #68]	; 0x44
  409156:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40915a:	9010      	str	r0, [sp, #64]	; 0x40
  40915c:	ddef      	ble.n	40913e <_vfiprintf_r+0x3a2>
  40915e:	2a00      	cmp	r2, #0
  409160:	f040 829d 	bne.w	40969e <_vfiprintf_r+0x902>
  409164:	3e10      	subs	r6, #16
  409166:	2e10      	cmp	r6, #16
  409168:	f04f 0e01 	mov.w	lr, #1
  40916c:	4611      	mov	r1, r2
  40916e:	46cc      	mov	ip, r9
  409170:	dced      	bgt.n	40914e <_vfiprintf_r+0x3b2>
  409172:	4654      	mov	r4, sl
  409174:	46e2      	mov	sl, ip
  409176:	4432      	add	r2, r6
  409178:	f1be 0f07 	cmp.w	lr, #7
  40917c:	9211      	str	r2, [sp, #68]	; 0x44
  40917e:	e88a 0060 	stmia.w	sl, {r5, r6}
  409182:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  409186:	f300 8369 	bgt.w	40985c <_vfiprintf_r+0xac0>
  40918a:	f10a 0a08 	add.w	sl, sl, #8
  40918e:	f10e 0001 	add.w	r0, lr, #1
  409192:	4671      	mov	r1, lr
  409194:	e1ab      	b.n	4094ee <_vfiprintf_r+0x752>
  409196:	9608      	str	r6, [sp, #32]
  409198:	f013 0220 	ands.w	r2, r3, #32
  40919c:	f040 838c 	bne.w	4098b8 <_vfiprintf_r+0xb1c>
  4091a0:	f013 0110 	ands.w	r1, r3, #16
  4091a4:	f040 831a 	bne.w	4097dc <_vfiprintf_r+0xa40>
  4091a8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4091ac:	f000 8316 	beq.w	4097dc <_vfiprintf_r+0xa40>
  4091b0:	9807      	ldr	r0, [sp, #28]
  4091b2:	460a      	mov	r2, r1
  4091b4:	4601      	mov	r1, r0
  4091b6:	3104      	adds	r1, #4
  4091b8:	8806      	ldrh	r6, [r0, #0]
  4091ba:	9107      	str	r1, [sp, #28]
  4091bc:	2700      	movs	r7, #0
  4091be:	e720      	b.n	409002 <_vfiprintf_r+0x266>
  4091c0:	9608      	str	r6, [sp, #32]
  4091c2:	f043 0310 	orr.w	r3, r3, #16
  4091c6:	e7e7      	b.n	409198 <_vfiprintf_r+0x3fc>
  4091c8:	9608      	str	r6, [sp, #32]
  4091ca:	f043 0310 	orr.w	r3, r3, #16
  4091ce:	e708      	b.n	408fe2 <_vfiprintf_r+0x246>
  4091d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4091d4:	f898 2000 	ldrb.w	r2, [r8]
  4091d8:	e652      	b.n	408e80 <_vfiprintf_r+0xe4>
  4091da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4091de:	2600      	movs	r6, #0
  4091e0:	f818 2b01 	ldrb.w	r2, [r8], #1
  4091e4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4091e8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4091ec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4091f0:	2909      	cmp	r1, #9
  4091f2:	d9f5      	bls.n	4091e0 <_vfiprintf_r+0x444>
  4091f4:	e646      	b.n	408e84 <_vfiprintf_r+0xe8>
  4091f6:	9608      	str	r6, [sp, #32]
  4091f8:	2800      	cmp	r0, #0
  4091fa:	f040 8408 	bne.w	409a0e <_vfiprintf_r+0xc72>
  4091fe:	f043 0310 	orr.w	r3, r3, #16
  409202:	069e      	lsls	r6, r3, #26
  409204:	f100 834c 	bmi.w	4098a0 <_vfiprintf_r+0xb04>
  409208:	06dd      	lsls	r5, r3, #27
  40920a:	f100 82f3 	bmi.w	4097f4 <_vfiprintf_r+0xa58>
  40920e:	0658      	lsls	r0, r3, #25
  409210:	f140 82f0 	bpl.w	4097f4 <_vfiprintf_r+0xa58>
  409214:	9d07      	ldr	r5, [sp, #28]
  409216:	f9b5 6000 	ldrsh.w	r6, [r5]
  40921a:	462a      	mov	r2, r5
  40921c:	17f7      	asrs	r7, r6, #31
  40921e:	3204      	adds	r2, #4
  409220:	4630      	mov	r0, r6
  409222:	4639      	mov	r1, r7
  409224:	9207      	str	r2, [sp, #28]
  409226:	2800      	cmp	r0, #0
  409228:	f171 0200 	sbcs.w	r2, r1, #0
  40922c:	f2c0 835d 	blt.w	4098ea <_vfiprintf_r+0xb4e>
  409230:	1c61      	adds	r1, r4, #1
  409232:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  409236:	f04f 0201 	mov.w	r2, #1
  40923a:	f47f aeea 	bne.w	409012 <_vfiprintf_r+0x276>
  40923e:	ea56 0107 	orrs.w	r1, r6, r7
  409242:	f000 824d 	beq.w	4096e0 <_vfiprintf_r+0x944>
  409246:	9302      	str	r3, [sp, #8]
  409248:	2a01      	cmp	r2, #1
  40924a:	f000 828c 	beq.w	409766 <_vfiprintf_r+0x9ca>
  40924e:	2a02      	cmp	r2, #2
  409250:	f040 825c 	bne.w	40970c <_vfiprintf_r+0x970>
  409254:	980b      	ldr	r0, [sp, #44]	; 0x2c
  409256:	46cb      	mov	fp, r9
  409258:	0933      	lsrs	r3, r6, #4
  40925a:	f006 010f 	and.w	r1, r6, #15
  40925e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  409262:	093a      	lsrs	r2, r7, #4
  409264:	461e      	mov	r6, r3
  409266:	4617      	mov	r7, r2
  409268:	5c43      	ldrb	r3, [r0, r1]
  40926a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40926e:	ea56 0307 	orrs.w	r3, r6, r7
  409272:	d1f1      	bne.n	409258 <_vfiprintf_r+0x4bc>
  409274:	eba9 030b 	sub.w	r3, r9, fp
  409278:	9305      	str	r3, [sp, #20]
  40927a:	e6e1      	b.n	409040 <_vfiprintf_r+0x2a4>
  40927c:	2800      	cmp	r0, #0
  40927e:	f040 83c0 	bne.w	409a02 <_vfiprintf_r+0xc66>
  409282:	0699      	lsls	r1, r3, #26
  409284:	f100 8367 	bmi.w	409956 <_vfiprintf_r+0xbba>
  409288:	06da      	lsls	r2, r3, #27
  40928a:	f100 80f1 	bmi.w	409470 <_vfiprintf_r+0x6d4>
  40928e:	065b      	lsls	r3, r3, #25
  409290:	f140 80ee 	bpl.w	409470 <_vfiprintf_r+0x6d4>
  409294:	9a07      	ldr	r2, [sp, #28]
  409296:	6813      	ldr	r3, [r2, #0]
  409298:	3204      	adds	r2, #4
  40929a:	9207      	str	r2, [sp, #28]
  40929c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4092a0:	801a      	strh	r2, [r3, #0]
  4092a2:	e5b8      	b.n	408e16 <_vfiprintf_r+0x7a>
  4092a4:	9807      	ldr	r0, [sp, #28]
  4092a6:	4a3d      	ldr	r2, [pc, #244]	; (40939c <_vfiprintf_r+0x600>)
  4092a8:	9608      	str	r6, [sp, #32]
  4092aa:	920b      	str	r2, [sp, #44]	; 0x2c
  4092ac:	6806      	ldr	r6, [r0, #0]
  4092ae:	2278      	movs	r2, #120	; 0x78
  4092b0:	2130      	movs	r1, #48	; 0x30
  4092b2:	3004      	adds	r0, #4
  4092b4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4092b8:	f043 0302 	orr.w	r3, r3, #2
  4092bc:	9007      	str	r0, [sp, #28]
  4092be:	2700      	movs	r7, #0
  4092c0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4092c4:	2202      	movs	r2, #2
  4092c6:	e69c      	b.n	409002 <_vfiprintf_r+0x266>
  4092c8:	9608      	str	r6, [sp, #32]
  4092ca:	2800      	cmp	r0, #0
  4092cc:	d099      	beq.n	409202 <_vfiprintf_r+0x466>
  4092ce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4092d2:	e796      	b.n	409202 <_vfiprintf_r+0x466>
  4092d4:	f898 2000 	ldrb.w	r2, [r8]
  4092d8:	2d00      	cmp	r5, #0
  4092da:	f47f add1 	bne.w	408e80 <_vfiprintf_r+0xe4>
  4092de:	2001      	movs	r0, #1
  4092e0:	2520      	movs	r5, #32
  4092e2:	e5cd      	b.n	408e80 <_vfiprintf_r+0xe4>
  4092e4:	f043 0301 	orr.w	r3, r3, #1
  4092e8:	f898 2000 	ldrb.w	r2, [r8]
  4092ec:	e5c8      	b.n	408e80 <_vfiprintf_r+0xe4>
  4092ee:	9608      	str	r6, [sp, #32]
  4092f0:	2800      	cmp	r0, #0
  4092f2:	f040 8393 	bne.w	409a1c <_vfiprintf_r+0xc80>
  4092f6:	4929      	ldr	r1, [pc, #164]	; (40939c <_vfiprintf_r+0x600>)
  4092f8:	910b      	str	r1, [sp, #44]	; 0x2c
  4092fa:	069f      	lsls	r7, r3, #26
  4092fc:	f100 82e8 	bmi.w	4098d0 <_vfiprintf_r+0xb34>
  409300:	9807      	ldr	r0, [sp, #28]
  409302:	06de      	lsls	r6, r3, #27
  409304:	4601      	mov	r1, r0
  409306:	f100 8270 	bmi.w	4097ea <_vfiprintf_r+0xa4e>
  40930a:	065d      	lsls	r5, r3, #25
  40930c:	f140 826d 	bpl.w	4097ea <_vfiprintf_r+0xa4e>
  409310:	3104      	adds	r1, #4
  409312:	8806      	ldrh	r6, [r0, #0]
  409314:	9107      	str	r1, [sp, #28]
  409316:	2700      	movs	r7, #0
  409318:	07d8      	lsls	r0, r3, #31
  40931a:	f140 8222 	bpl.w	409762 <_vfiprintf_r+0x9c6>
  40931e:	ea56 0107 	orrs.w	r1, r6, r7
  409322:	f000 821e 	beq.w	409762 <_vfiprintf_r+0x9c6>
  409326:	2130      	movs	r1, #48	; 0x30
  409328:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40932c:	f043 0302 	orr.w	r3, r3, #2
  409330:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  409334:	2202      	movs	r2, #2
  409336:	e664      	b.n	409002 <_vfiprintf_r+0x266>
  409338:	9608      	str	r6, [sp, #32]
  40933a:	2800      	cmp	r0, #0
  40933c:	f040 836b 	bne.w	409a16 <_vfiprintf_r+0xc7a>
  409340:	4917      	ldr	r1, [pc, #92]	; (4093a0 <_vfiprintf_r+0x604>)
  409342:	910b      	str	r1, [sp, #44]	; 0x2c
  409344:	e7d9      	b.n	4092fa <_vfiprintf_r+0x55e>
  409346:	9907      	ldr	r1, [sp, #28]
  409348:	9608      	str	r6, [sp, #32]
  40934a:	680a      	ldr	r2, [r1, #0]
  40934c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  409350:	f04f 0000 	mov.w	r0, #0
  409354:	460a      	mov	r2, r1
  409356:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40935a:	3204      	adds	r2, #4
  40935c:	2001      	movs	r0, #1
  40935e:	9001      	str	r0, [sp, #4]
  409360:	9207      	str	r2, [sp, #28]
  409362:	9005      	str	r0, [sp, #20]
  409364:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  409368:	9302      	str	r3, [sp, #8]
  40936a:	2400      	movs	r4, #0
  40936c:	e670      	b.n	409050 <_vfiprintf_r+0x2b4>
  40936e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409372:	f898 2000 	ldrb.w	r2, [r8]
  409376:	e583      	b.n	408e80 <_vfiprintf_r+0xe4>
  409378:	f898 2000 	ldrb.w	r2, [r8]
  40937c:	2a6c      	cmp	r2, #108	; 0x6c
  40937e:	bf03      	ittte	eq
  409380:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  409384:	f043 0320 	orreq.w	r3, r3, #32
  409388:	f108 0801 	addeq.w	r8, r8, #1
  40938c:	f043 0310 	orrne.w	r3, r3, #16
  409390:	e576      	b.n	408e80 <_vfiprintf_r+0xe4>
  409392:	bf00      	nop
  409394:	0040db70 	.word	0x0040db70
  409398:	0040db80 	.word	0x0040db80
  40939c:	0040db30 	.word	0x0040db30
  4093a0:	0040db1c 	.word	0x0040db1c
  4093a4:	9907      	ldr	r1, [sp, #28]
  4093a6:	680e      	ldr	r6, [r1, #0]
  4093a8:	460a      	mov	r2, r1
  4093aa:	2e00      	cmp	r6, #0
  4093ac:	f102 0204 	add.w	r2, r2, #4
  4093b0:	f6ff ae0f 	blt.w	408fd2 <_vfiprintf_r+0x236>
  4093b4:	9207      	str	r2, [sp, #28]
  4093b6:	f898 2000 	ldrb.w	r2, [r8]
  4093ba:	e561      	b.n	408e80 <_vfiprintf_r+0xe4>
  4093bc:	f898 2000 	ldrb.w	r2, [r8]
  4093c0:	2001      	movs	r0, #1
  4093c2:	252b      	movs	r5, #43	; 0x2b
  4093c4:	e55c      	b.n	408e80 <_vfiprintf_r+0xe4>
  4093c6:	9907      	ldr	r1, [sp, #28]
  4093c8:	9608      	str	r6, [sp, #32]
  4093ca:	f8d1 b000 	ldr.w	fp, [r1]
  4093ce:	f04f 0200 	mov.w	r2, #0
  4093d2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4093d6:	1d0e      	adds	r6, r1, #4
  4093d8:	f1bb 0f00 	cmp.w	fp, #0
  4093dc:	f000 82e5 	beq.w	4099aa <_vfiprintf_r+0xc0e>
  4093e0:	1c67      	adds	r7, r4, #1
  4093e2:	f000 82c4 	beq.w	40996e <_vfiprintf_r+0xbd2>
  4093e6:	4622      	mov	r2, r4
  4093e8:	2100      	movs	r1, #0
  4093ea:	4658      	mov	r0, fp
  4093ec:	9301      	str	r3, [sp, #4]
  4093ee:	f002 fba7 	bl	40bb40 <memchr>
  4093f2:	9b01      	ldr	r3, [sp, #4]
  4093f4:	2800      	cmp	r0, #0
  4093f6:	f000 82e5 	beq.w	4099c4 <_vfiprintf_r+0xc28>
  4093fa:	eba0 020b 	sub.w	r2, r0, fp
  4093fe:	9205      	str	r2, [sp, #20]
  409400:	9607      	str	r6, [sp, #28]
  409402:	9302      	str	r3, [sp, #8]
  409404:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  409408:	2400      	movs	r4, #0
  40940a:	e619      	b.n	409040 <_vfiprintf_r+0x2a4>
  40940c:	f898 2000 	ldrb.w	r2, [r8]
  409410:	2a2a      	cmp	r2, #42	; 0x2a
  409412:	f108 0701 	add.w	r7, r8, #1
  409416:	f000 82e9 	beq.w	4099ec <_vfiprintf_r+0xc50>
  40941a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40941e:	2909      	cmp	r1, #9
  409420:	46b8      	mov	r8, r7
  409422:	f04f 0400 	mov.w	r4, #0
  409426:	f63f ad2d 	bhi.w	408e84 <_vfiprintf_r+0xe8>
  40942a:	f818 2b01 	ldrb.w	r2, [r8], #1
  40942e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  409432:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  409436:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40943a:	2909      	cmp	r1, #9
  40943c:	d9f5      	bls.n	40942a <_vfiprintf_r+0x68e>
  40943e:	e521      	b.n	408e84 <_vfiprintf_r+0xe8>
  409440:	f043 0320 	orr.w	r3, r3, #32
  409444:	f898 2000 	ldrb.w	r2, [r8]
  409448:	e51a      	b.n	408e80 <_vfiprintf_r+0xe4>
  40944a:	9608      	str	r6, [sp, #32]
  40944c:	2800      	cmp	r0, #0
  40944e:	f040 82db 	bne.w	409a08 <_vfiprintf_r+0xc6c>
  409452:	2a00      	cmp	r2, #0
  409454:	f000 80e7 	beq.w	409626 <_vfiprintf_r+0x88a>
  409458:	2101      	movs	r1, #1
  40945a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40945e:	f04f 0200 	mov.w	r2, #0
  409462:	9101      	str	r1, [sp, #4]
  409464:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  409468:	9105      	str	r1, [sp, #20]
  40946a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40946e:	e77b      	b.n	409368 <_vfiprintf_r+0x5cc>
  409470:	9a07      	ldr	r2, [sp, #28]
  409472:	6813      	ldr	r3, [r2, #0]
  409474:	3204      	adds	r2, #4
  409476:	9207      	str	r2, [sp, #28]
  409478:	9a03      	ldr	r2, [sp, #12]
  40947a:	601a      	str	r2, [r3, #0]
  40947c:	e4cb      	b.n	408e16 <_vfiprintf_r+0x7a>
  40947e:	aa0f      	add	r2, sp, #60	; 0x3c
  409480:	9904      	ldr	r1, [sp, #16]
  409482:	4620      	mov	r0, r4
  409484:	f7ff fc4a 	bl	408d1c <__sprint_r.part.0>
  409488:	2800      	cmp	r0, #0
  40948a:	f040 8139 	bne.w	409700 <_vfiprintf_r+0x964>
  40948e:	9910      	ldr	r1, [sp, #64]	; 0x40
  409490:	9a11      	ldr	r2, [sp, #68]	; 0x44
  409492:	f101 0c01 	add.w	ip, r1, #1
  409496:	46ce      	mov	lr, r9
  409498:	e5ff      	b.n	40909a <_vfiprintf_r+0x2fe>
  40949a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40949c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40949e:	1c48      	adds	r0, r1, #1
  4094a0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4094a4:	2d00      	cmp	r5, #0
  4094a6:	f43f ae22 	beq.w	4090ee <_vfiprintf_r+0x352>
  4094aa:	3201      	adds	r2, #1
  4094ac:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4094b0:	2101      	movs	r1, #1
  4094b2:	2807      	cmp	r0, #7
  4094b4:	9211      	str	r2, [sp, #68]	; 0x44
  4094b6:	9010      	str	r0, [sp, #64]	; 0x40
  4094b8:	f8ca 5000 	str.w	r5, [sl]
  4094bc:	f8ca 1004 	str.w	r1, [sl, #4]
  4094c0:	f340 8108 	ble.w	4096d4 <_vfiprintf_r+0x938>
  4094c4:	2a00      	cmp	r2, #0
  4094c6:	f040 81bc 	bne.w	409842 <_vfiprintf_r+0xaa6>
  4094ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4094cc:	2b00      	cmp	r3, #0
  4094ce:	f43f ae1f 	beq.w	409110 <_vfiprintf_r+0x374>
  4094d2:	ab0e      	add	r3, sp, #56	; 0x38
  4094d4:	2202      	movs	r2, #2
  4094d6:	4608      	mov	r0, r1
  4094d8:	931c      	str	r3, [sp, #112]	; 0x70
  4094da:	921d      	str	r2, [sp, #116]	; 0x74
  4094dc:	46ca      	mov	sl, r9
  4094de:	4601      	mov	r1, r0
  4094e0:	f10a 0a08 	add.w	sl, sl, #8
  4094e4:	3001      	adds	r0, #1
  4094e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4094e8:	2b80      	cmp	r3, #128	; 0x80
  4094ea:	f43f ae19 	beq.w	409120 <_vfiprintf_r+0x384>
  4094ee:	9b05      	ldr	r3, [sp, #20]
  4094f0:	1ae4      	subs	r4, r4, r3
  4094f2:	2c00      	cmp	r4, #0
  4094f4:	dd2e      	ble.n	409554 <_vfiprintf_r+0x7b8>
  4094f6:	2c10      	cmp	r4, #16
  4094f8:	4db3      	ldr	r5, [pc, #716]	; (4097c8 <_vfiprintf_r+0xa2c>)
  4094fa:	dd1e      	ble.n	40953a <_vfiprintf_r+0x79e>
  4094fc:	46d6      	mov	lr, sl
  4094fe:	2610      	movs	r6, #16
  409500:	9f06      	ldr	r7, [sp, #24]
  409502:	f8dd a010 	ldr.w	sl, [sp, #16]
  409506:	e006      	b.n	409516 <_vfiprintf_r+0x77a>
  409508:	1c88      	adds	r0, r1, #2
  40950a:	f10e 0e08 	add.w	lr, lr, #8
  40950e:	4619      	mov	r1, r3
  409510:	3c10      	subs	r4, #16
  409512:	2c10      	cmp	r4, #16
  409514:	dd10      	ble.n	409538 <_vfiprintf_r+0x79c>
  409516:	1c4b      	adds	r3, r1, #1
  409518:	3210      	adds	r2, #16
  40951a:	2b07      	cmp	r3, #7
  40951c:	9211      	str	r2, [sp, #68]	; 0x44
  40951e:	e88e 0060 	stmia.w	lr, {r5, r6}
  409522:	9310      	str	r3, [sp, #64]	; 0x40
  409524:	ddf0      	ble.n	409508 <_vfiprintf_r+0x76c>
  409526:	2a00      	cmp	r2, #0
  409528:	d165      	bne.n	4095f6 <_vfiprintf_r+0x85a>
  40952a:	3c10      	subs	r4, #16
  40952c:	2c10      	cmp	r4, #16
  40952e:	f04f 0001 	mov.w	r0, #1
  409532:	4611      	mov	r1, r2
  409534:	46ce      	mov	lr, r9
  409536:	dcee      	bgt.n	409516 <_vfiprintf_r+0x77a>
  409538:	46f2      	mov	sl, lr
  40953a:	4422      	add	r2, r4
  40953c:	2807      	cmp	r0, #7
  40953e:	9211      	str	r2, [sp, #68]	; 0x44
  409540:	f8ca 5000 	str.w	r5, [sl]
  409544:	f8ca 4004 	str.w	r4, [sl, #4]
  409548:	9010      	str	r0, [sp, #64]	; 0x40
  40954a:	f300 8085 	bgt.w	409658 <_vfiprintf_r+0x8bc>
  40954e:	f10a 0a08 	add.w	sl, sl, #8
  409552:	3001      	adds	r0, #1
  409554:	9905      	ldr	r1, [sp, #20]
  409556:	f8ca b000 	str.w	fp, [sl]
  40955a:	440a      	add	r2, r1
  40955c:	2807      	cmp	r0, #7
  40955e:	9211      	str	r2, [sp, #68]	; 0x44
  409560:	f8ca 1004 	str.w	r1, [sl, #4]
  409564:	9010      	str	r0, [sp, #64]	; 0x40
  409566:	f340 8082 	ble.w	40966e <_vfiprintf_r+0x8d2>
  40956a:	2a00      	cmp	r2, #0
  40956c:	f040 8118 	bne.w	4097a0 <_vfiprintf_r+0xa04>
  409570:	9b02      	ldr	r3, [sp, #8]
  409572:	9210      	str	r2, [sp, #64]	; 0x40
  409574:	0758      	lsls	r0, r3, #29
  409576:	d535      	bpl.n	4095e4 <_vfiprintf_r+0x848>
  409578:	9b08      	ldr	r3, [sp, #32]
  40957a:	9901      	ldr	r1, [sp, #4]
  40957c:	1a5c      	subs	r4, r3, r1
  40957e:	2c00      	cmp	r4, #0
  409580:	f340 80e7 	ble.w	409752 <_vfiprintf_r+0x9b6>
  409584:	46ca      	mov	sl, r9
  409586:	2c10      	cmp	r4, #16
  409588:	f340 8218 	ble.w	4099bc <_vfiprintf_r+0xc20>
  40958c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40958e:	4e8f      	ldr	r6, [pc, #572]	; (4097cc <_vfiprintf_r+0xa30>)
  409590:	9f06      	ldr	r7, [sp, #24]
  409592:	f8dd b010 	ldr.w	fp, [sp, #16]
  409596:	2510      	movs	r5, #16
  409598:	e006      	b.n	4095a8 <_vfiprintf_r+0x80c>
  40959a:	1c88      	adds	r0, r1, #2
  40959c:	f10a 0a08 	add.w	sl, sl, #8
  4095a0:	4619      	mov	r1, r3
  4095a2:	3c10      	subs	r4, #16
  4095a4:	2c10      	cmp	r4, #16
  4095a6:	dd11      	ble.n	4095cc <_vfiprintf_r+0x830>
  4095a8:	1c4b      	adds	r3, r1, #1
  4095aa:	3210      	adds	r2, #16
  4095ac:	2b07      	cmp	r3, #7
  4095ae:	9211      	str	r2, [sp, #68]	; 0x44
  4095b0:	f8ca 6000 	str.w	r6, [sl]
  4095b4:	f8ca 5004 	str.w	r5, [sl, #4]
  4095b8:	9310      	str	r3, [sp, #64]	; 0x40
  4095ba:	ddee      	ble.n	40959a <_vfiprintf_r+0x7fe>
  4095bc:	bb42      	cbnz	r2, 409610 <_vfiprintf_r+0x874>
  4095be:	3c10      	subs	r4, #16
  4095c0:	2c10      	cmp	r4, #16
  4095c2:	f04f 0001 	mov.w	r0, #1
  4095c6:	4611      	mov	r1, r2
  4095c8:	46ca      	mov	sl, r9
  4095ca:	dced      	bgt.n	4095a8 <_vfiprintf_r+0x80c>
  4095cc:	4422      	add	r2, r4
  4095ce:	2807      	cmp	r0, #7
  4095d0:	9211      	str	r2, [sp, #68]	; 0x44
  4095d2:	f8ca 6000 	str.w	r6, [sl]
  4095d6:	f8ca 4004 	str.w	r4, [sl, #4]
  4095da:	9010      	str	r0, [sp, #64]	; 0x40
  4095dc:	dd51      	ble.n	409682 <_vfiprintf_r+0x8e6>
  4095de:	2a00      	cmp	r2, #0
  4095e0:	f040 819b 	bne.w	40991a <_vfiprintf_r+0xb7e>
  4095e4:	9b03      	ldr	r3, [sp, #12]
  4095e6:	9a08      	ldr	r2, [sp, #32]
  4095e8:	9901      	ldr	r1, [sp, #4]
  4095ea:	428a      	cmp	r2, r1
  4095ec:	bfac      	ite	ge
  4095ee:	189b      	addge	r3, r3, r2
  4095f0:	185b      	addlt	r3, r3, r1
  4095f2:	9303      	str	r3, [sp, #12]
  4095f4:	e04e      	b.n	409694 <_vfiprintf_r+0x8f8>
  4095f6:	aa0f      	add	r2, sp, #60	; 0x3c
  4095f8:	4651      	mov	r1, sl
  4095fa:	4638      	mov	r0, r7
  4095fc:	f7ff fb8e 	bl	408d1c <__sprint_r.part.0>
  409600:	2800      	cmp	r0, #0
  409602:	f040 813f 	bne.w	409884 <_vfiprintf_r+0xae8>
  409606:	9910      	ldr	r1, [sp, #64]	; 0x40
  409608:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40960a:	1c48      	adds	r0, r1, #1
  40960c:	46ce      	mov	lr, r9
  40960e:	e77f      	b.n	409510 <_vfiprintf_r+0x774>
  409610:	aa0f      	add	r2, sp, #60	; 0x3c
  409612:	4659      	mov	r1, fp
  409614:	4638      	mov	r0, r7
  409616:	f7ff fb81 	bl	408d1c <__sprint_r.part.0>
  40961a:	b960      	cbnz	r0, 409636 <_vfiprintf_r+0x89a>
  40961c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40961e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  409620:	1c48      	adds	r0, r1, #1
  409622:	46ca      	mov	sl, r9
  409624:	e7bd      	b.n	4095a2 <_vfiprintf_r+0x806>
  409626:	9b11      	ldr	r3, [sp, #68]	; 0x44
  409628:	f8dd b010 	ldr.w	fp, [sp, #16]
  40962c:	2b00      	cmp	r3, #0
  40962e:	f040 81d4 	bne.w	4099da <_vfiprintf_r+0xc3e>
  409632:	2300      	movs	r3, #0
  409634:	9310      	str	r3, [sp, #64]	; 0x40
  409636:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40963a:	f013 0f01 	tst.w	r3, #1
  40963e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  409642:	d102      	bne.n	40964a <_vfiprintf_r+0x8ae>
  409644:	059a      	lsls	r2, r3, #22
  409646:	f140 80de 	bpl.w	409806 <_vfiprintf_r+0xa6a>
  40964a:	065b      	lsls	r3, r3, #25
  40964c:	f53f acb2 	bmi.w	408fb4 <_vfiprintf_r+0x218>
  409650:	9803      	ldr	r0, [sp, #12]
  409652:	b02d      	add	sp, #180	; 0xb4
  409654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409658:	2a00      	cmp	r2, #0
  40965a:	f040 8106 	bne.w	40986a <_vfiprintf_r+0xace>
  40965e:	9a05      	ldr	r2, [sp, #20]
  409660:	921d      	str	r2, [sp, #116]	; 0x74
  409662:	2301      	movs	r3, #1
  409664:	9211      	str	r2, [sp, #68]	; 0x44
  409666:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40966a:	9310      	str	r3, [sp, #64]	; 0x40
  40966c:	46ca      	mov	sl, r9
  40966e:	f10a 0a08 	add.w	sl, sl, #8
  409672:	9b02      	ldr	r3, [sp, #8]
  409674:	0759      	lsls	r1, r3, #29
  409676:	d504      	bpl.n	409682 <_vfiprintf_r+0x8e6>
  409678:	9b08      	ldr	r3, [sp, #32]
  40967a:	9901      	ldr	r1, [sp, #4]
  40967c:	1a5c      	subs	r4, r3, r1
  40967e:	2c00      	cmp	r4, #0
  409680:	dc81      	bgt.n	409586 <_vfiprintf_r+0x7ea>
  409682:	9b03      	ldr	r3, [sp, #12]
  409684:	9908      	ldr	r1, [sp, #32]
  409686:	9801      	ldr	r0, [sp, #4]
  409688:	4281      	cmp	r1, r0
  40968a:	bfac      	ite	ge
  40968c:	185b      	addge	r3, r3, r1
  40968e:	181b      	addlt	r3, r3, r0
  409690:	9303      	str	r3, [sp, #12]
  409692:	bb72      	cbnz	r2, 4096f2 <_vfiprintf_r+0x956>
  409694:	2300      	movs	r3, #0
  409696:	9310      	str	r3, [sp, #64]	; 0x40
  409698:	46ca      	mov	sl, r9
  40969a:	f7ff bbbc 	b.w	408e16 <_vfiprintf_r+0x7a>
  40969e:	aa0f      	add	r2, sp, #60	; 0x3c
  4096a0:	9904      	ldr	r1, [sp, #16]
  4096a2:	4620      	mov	r0, r4
  4096a4:	f7ff fb3a 	bl	408d1c <__sprint_r.part.0>
  4096a8:	bb50      	cbnz	r0, 409700 <_vfiprintf_r+0x964>
  4096aa:	9910      	ldr	r1, [sp, #64]	; 0x40
  4096ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4096ae:	f101 0e01 	add.w	lr, r1, #1
  4096b2:	46cc      	mov	ip, r9
  4096b4:	e548      	b.n	409148 <_vfiprintf_r+0x3ac>
  4096b6:	2a00      	cmp	r2, #0
  4096b8:	f040 8140 	bne.w	40993c <_vfiprintf_r+0xba0>
  4096bc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  4096c0:	2900      	cmp	r1, #0
  4096c2:	f000 811b 	beq.w	4098fc <_vfiprintf_r+0xb60>
  4096c6:	2201      	movs	r2, #1
  4096c8:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4096cc:	4610      	mov	r0, r2
  4096ce:	921d      	str	r2, [sp, #116]	; 0x74
  4096d0:	911c      	str	r1, [sp, #112]	; 0x70
  4096d2:	46ca      	mov	sl, r9
  4096d4:	4601      	mov	r1, r0
  4096d6:	f10a 0a08 	add.w	sl, sl, #8
  4096da:	3001      	adds	r0, #1
  4096dc:	e507      	b.n	4090ee <_vfiprintf_r+0x352>
  4096de:	9b02      	ldr	r3, [sp, #8]
  4096e0:	2a01      	cmp	r2, #1
  4096e2:	f000 8098 	beq.w	409816 <_vfiprintf_r+0xa7a>
  4096e6:	2a02      	cmp	r2, #2
  4096e8:	d10d      	bne.n	409706 <_vfiprintf_r+0x96a>
  4096ea:	9302      	str	r3, [sp, #8]
  4096ec:	2600      	movs	r6, #0
  4096ee:	2700      	movs	r7, #0
  4096f0:	e5b0      	b.n	409254 <_vfiprintf_r+0x4b8>
  4096f2:	aa0f      	add	r2, sp, #60	; 0x3c
  4096f4:	9904      	ldr	r1, [sp, #16]
  4096f6:	9806      	ldr	r0, [sp, #24]
  4096f8:	f7ff fb10 	bl	408d1c <__sprint_r.part.0>
  4096fc:	2800      	cmp	r0, #0
  4096fe:	d0c9      	beq.n	409694 <_vfiprintf_r+0x8f8>
  409700:	f8dd b010 	ldr.w	fp, [sp, #16]
  409704:	e797      	b.n	409636 <_vfiprintf_r+0x89a>
  409706:	9302      	str	r3, [sp, #8]
  409708:	2600      	movs	r6, #0
  40970a:	2700      	movs	r7, #0
  40970c:	4649      	mov	r1, r9
  40970e:	e000      	b.n	409712 <_vfiprintf_r+0x976>
  409710:	4659      	mov	r1, fp
  409712:	08f2      	lsrs	r2, r6, #3
  409714:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  409718:	08f8      	lsrs	r0, r7, #3
  40971a:	f006 0307 	and.w	r3, r6, #7
  40971e:	4607      	mov	r7, r0
  409720:	4616      	mov	r6, r2
  409722:	3330      	adds	r3, #48	; 0x30
  409724:	ea56 0207 	orrs.w	r2, r6, r7
  409728:	f801 3c01 	strb.w	r3, [r1, #-1]
  40972c:	f101 3bff 	add.w	fp, r1, #4294967295
  409730:	d1ee      	bne.n	409710 <_vfiprintf_r+0x974>
  409732:	9a02      	ldr	r2, [sp, #8]
  409734:	07d6      	lsls	r6, r2, #31
  409736:	f57f ad9d 	bpl.w	409274 <_vfiprintf_r+0x4d8>
  40973a:	2b30      	cmp	r3, #48	; 0x30
  40973c:	f43f ad9a 	beq.w	409274 <_vfiprintf_r+0x4d8>
  409740:	3902      	subs	r1, #2
  409742:	2330      	movs	r3, #48	; 0x30
  409744:	f80b 3c01 	strb.w	r3, [fp, #-1]
  409748:	eba9 0301 	sub.w	r3, r9, r1
  40974c:	9305      	str	r3, [sp, #20]
  40974e:	468b      	mov	fp, r1
  409750:	e476      	b.n	409040 <_vfiprintf_r+0x2a4>
  409752:	9b03      	ldr	r3, [sp, #12]
  409754:	9a08      	ldr	r2, [sp, #32]
  409756:	428a      	cmp	r2, r1
  409758:	bfac      	ite	ge
  40975a:	189b      	addge	r3, r3, r2
  40975c:	185b      	addlt	r3, r3, r1
  40975e:	9303      	str	r3, [sp, #12]
  409760:	e798      	b.n	409694 <_vfiprintf_r+0x8f8>
  409762:	2202      	movs	r2, #2
  409764:	e44d      	b.n	409002 <_vfiprintf_r+0x266>
  409766:	2f00      	cmp	r7, #0
  409768:	bf08      	it	eq
  40976a:	2e0a      	cmpeq	r6, #10
  40976c:	d352      	bcc.n	409814 <_vfiprintf_r+0xa78>
  40976e:	46cb      	mov	fp, r9
  409770:	4630      	mov	r0, r6
  409772:	4639      	mov	r1, r7
  409774:	220a      	movs	r2, #10
  409776:	2300      	movs	r3, #0
  409778:	f003 fea4 	bl	40d4c4 <__aeabi_uldivmod>
  40977c:	3230      	adds	r2, #48	; 0x30
  40977e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  409782:	4630      	mov	r0, r6
  409784:	4639      	mov	r1, r7
  409786:	2300      	movs	r3, #0
  409788:	220a      	movs	r2, #10
  40978a:	f003 fe9b 	bl	40d4c4 <__aeabi_uldivmod>
  40978e:	4606      	mov	r6, r0
  409790:	460f      	mov	r7, r1
  409792:	ea56 0307 	orrs.w	r3, r6, r7
  409796:	d1eb      	bne.n	409770 <_vfiprintf_r+0x9d4>
  409798:	e56c      	b.n	409274 <_vfiprintf_r+0x4d8>
  40979a:	9405      	str	r4, [sp, #20]
  40979c:	46cb      	mov	fp, r9
  40979e:	e44f      	b.n	409040 <_vfiprintf_r+0x2a4>
  4097a0:	aa0f      	add	r2, sp, #60	; 0x3c
  4097a2:	9904      	ldr	r1, [sp, #16]
  4097a4:	9806      	ldr	r0, [sp, #24]
  4097a6:	f7ff fab9 	bl	408d1c <__sprint_r.part.0>
  4097aa:	2800      	cmp	r0, #0
  4097ac:	d1a8      	bne.n	409700 <_vfiprintf_r+0x964>
  4097ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4097b0:	46ca      	mov	sl, r9
  4097b2:	e75e      	b.n	409672 <_vfiprintf_r+0x8d6>
  4097b4:	aa0f      	add	r2, sp, #60	; 0x3c
  4097b6:	9904      	ldr	r1, [sp, #16]
  4097b8:	9806      	ldr	r0, [sp, #24]
  4097ba:	f7ff faaf 	bl	408d1c <__sprint_r.part.0>
  4097be:	2800      	cmp	r0, #0
  4097c0:	d19e      	bne.n	409700 <_vfiprintf_r+0x964>
  4097c2:	46ca      	mov	sl, r9
  4097c4:	f7ff bbc0 	b.w	408f48 <_vfiprintf_r+0x1ac>
  4097c8:	0040db80 	.word	0x0040db80
  4097cc:	0040db70 	.word	0x0040db70
  4097d0:	3104      	adds	r1, #4
  4097d2:	6816      	ldr	r6, [r2, #0]
  4097d4:	9107      	str	r1, [sp, #28]
  4097d6:	2201      	movs	r2, #1
  4097d8:	2700      	movs	r7, #0
  4097da:	e412      	b.n	409002 <_vfiprintf_r+0x266>
  4097dc:	9807      	ldr	r0, [sp, #28]
  4097de:	4601      	mov	r1, r0
  4097e0:	3104      	adds	r1, #4
  4097e2:	6806      	ldr	r6, [r0, #0]
  4097e4:	9107      	str	r1, [sp, #28]
  4097e6:	2700      	movs	r7, #0
  4097e8:	e40b      	b.n	409002 <_vfiprintf_r+0x266>
  4097ea:	680e      	ldr	r6, [r1, #0]
  4097ec:	3104      	adds	r1, #4
  4097ee:	9107      	str	r1, [sp, #28]
  4097f0:	2700      	movs	r7, #0
  4097f2:	e591      	b.n	409318 <_vfiprintf_r+0x57c>
  4097f4:	9907      	ldr	r1, [sp, #28]
  4097f6:	680e      	ldr	r6, [r1, #0]
  4097f8:	460a      	mov	r2, r1
  4097fa:	17f7      	asrs	r7, r6, #31
  4097fc:	3204      	adds	r2, #4
  4097fe:	9207      	str	r2, [sp, #28]
  409800:	4630      	mov	r0, r6
  409802:	4639      	mov	r1, r7
  409804:	e50f      	b.n	409226 <_vfiprintf_r+0x48a>
  409806:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40980a:	f001 fe4b 	bl	40b4a4 <__retarget_lock_release_recursive>
  40980e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  409812:	e71a      	b.n	40964a <_vfiprintf_r+0x8ae>
  409814:	9b02      	ldr	r3, [sp, #8]
  409816:	9302      	str	r3, [sp, #8]
  409818:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40981c:	3630      	adds	r6, #48	; 0x30
  40981e:	2301      	movs	r3, #1
  409820:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  409824:	9305      	str	r3, [sp, #20]
  409826:	e40b      	b.n	409040 <_vfiprintf_r+0x2a4>
  409828:	aa0f      	add	r2, sp, #60	; 0x3c
  40982a:	9904      	ldr	r1, [sp, #16]
  40982c:	9806      	ldr	r0, [sp, #24]
  40982e:	f7ff fa75 	bl	408d1c <__sprint_r.part.0>
  409832:	2800      	cmp	r0, #0
  409834:	f47f af64 	bne.w	409700 <_vfiprintf_r+0x964>
  409838:	9910      	ldr	r1, [sp, #64]	; 0x40
  40983a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40983c:	1c48      	adds	r0, r1, #1
  40983e:	46ca      	mov	sl, r9
  409840:	e651      	b.n	4094e6 <_vfiprintf_r+0x74a>
  409842:	aa0f      	add	r2, sp, #60	; 0x3c
  409844:	9904      	ldr	r1, [sp, #16]
  409846:	9806      	ldr	r0, [sp, #24]
  409848:	f7ff fa68 	bl	408d1c <__sprint_r.part.0>
  40984c:	2800      	cmp	r0, #0
  40984e:	f47f af57 	bne.w	409700 <_vfiprintf_r+0x964>
  409852:	9910      	ldr	r1, [sp, #64]	; 0x40
  409854:	9a11      	ldr	r2, [sp, #68]	; 0x44
  409856:	1c48      	adds	r0, r1, #1
  409858:	46ca      	mov	sl, r9
  40985a:	e448      	b.n	4090ee <_vfiprintf_r+0x352>
  40985c:	2a00      	cmp	r2, #0
  40985e:	f040 8091 	bne.w	409984 <_vfiprintf_r+0xbe8>
  409862:	2001      	movs	r0, #1
  409864:	4611      	mov	r1, r2
  409866:	46ca      	mov	sl, r9
  409868:	e641      	b.n	4094ee <_vfiprintf_r+0x752>
  40986a:	aa0f      	add	r2, sp, #60	; 0x3c
  40986c:	9904      	ldr	r1, [sp, #16]
  40986e:	9806      	ldr	r0, [sp, #24]
  409870:	f7ff fa54 	bl	408d1c <__sprint_r.part.0>
  409874:	2800      	cmp	r0, #0
  409876:	f47f af43 	bne.w	409700 <_vfiprintf_r+0x964>
  40987a:	9810      	ldr	r0, [sp, #64]	; 0x40
  40987c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40987e:	3001      	adds	r0, #1
  409880:	46ca      	mov	sl, r9
  409882:	e667      	b.n	409554 <_vfiprintf_r+0x7b8>
  409884:	46d3      	mov	fp, sl
  409886:	e6d6      	b.n	409636 <_vfiprintf_r+0x89a>
  409888:	9e07      	ldr	r6, [sp, #28]
  40988a:	3607      	adds	r6, #7
  40988c:	f026 0207 	bic.w	r2, r6, #7
  409890:	f102 0108 	add.w	r1, r2, #8
  409894:	e9d2 6700 	ldrd	r6, r7, [r2]
  409898:	9107      	str	r1, [sp, #28]
  40989a:	2201      	movs	r2, #1
  40989c:	f7ff bbb1 	b.w	409002 <_vfiprintf_r+0x266>
  4098a0:	9e07      	ldr	r6, [sp, #28]
  4098a2:	3607      	adds	r6, #7
  4098a4:	f026 0607 	bic.w	r6, r6, #7
  4098a8:	e9d6 0100 	ldrd	r0, r1, [r6]
  4098ac:	f106 0208 	add.w	r2, r6, #8
  4098b0:	9207      	str	r2, [sp, #28]
  4098b2:	4606      	mov	r6, r0
  4098b4:	460f      	mov	r7, r1
  4098b6:	e4b6      	b.n	409226 <_vfiprintf_r+0x48a>
  4098b8:	9e07      	ldr	r6, [sp, #28]
  4098ba:	3607      	adds	r6, #7
  4098bc:	f026 0207 	bic.w	r2, r6, #7
  4098c0:	f102 0108 	add.w	r1, r2, #8
  4098c4:	e9d2 6700 	ldrd	r6, r7, [r2]
  4098c8:	9107      	str	r1, [sp, #28]
  4098ca:	2200      	movs	r2, #0
  4098cc:	f7ff bb99 	b.w	409002 <_vfiprintf_r+0x266>
  4098d0:	9e07      	ldr	r6, [sp, #28]
  4098d2:	3607      	adds	r6, #7
  4098d4:	f026 0107 	bic.w	r1, r6, #7
  4098d8:	f101 0008 	add.w	r0, r1, #8
  4098dc:	9007      	str	r0, [sp, #28]
  4098de:	e9d1 6700 	ldrd	r6, r7, [r1]
  4098e2:	e519      	b.n	409318 <_vfiprintf_r+0x57c>
  4098e4:	46cb      	mov	fp, r9
  4098e6:	f7ff bbab 	b.w	409040 <_vfiprintf_r+0x2a4>
  4098ea:	252d      	movs	r5, #45	; 0x2d
  4098ec:	4276      	negs	r6, r6
  4098ee:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4098f2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4098f6:	2201      	movs	r2, #1
  4098f8:	f7ff bb88 	b.w	40900c <_vfiprintf_r+0x270>
  4098fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4098fe:	b9b3      	cbnz	r3, 40992e <_vfiprintf_r+0xb92>
  409900:	4611      	mov	r1, r2
  409902:	2001      	movs	r0, #1
  409904:	46ca      	mov	sl, r9
  409906:	e5f2      	b.n	4094ee <_vfiprintf_r+0x752>
  409908:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40990c:	f001 fdca 	bl	40b4a4 <__retarget_lock_release_recursive>
  409910:	f04f 33ff 	mov.w	r3, #4294967295
  409914:	9303      	str	r3, [sp, #12]
  409916:	f7ff bb50 	b.w	408fba <_vfiprintf_r+0x21e>
  40991a:	aa0f      	add	r2, sp, #60	; 0x3c
  40991c:	9904      	ldr	r1, [sp, #16]
  40991e:	9806      	ldr	r0, [sp, #24]
  409920:	f7ff f9fc 	bl	408d1c <__sprint_r.part.0>
  409924:	2800      	cmp	r0, #0
  409926:	f47f aeeb 	bne.w	409700 <_vfiprintf_r+0x964>
  40992a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40992c:	e6a9      	b.n	409682 <_vfiprintf_r+0x8e6>
  40992e:	ab0e      	add	r3, sp, #56	; 0x38
  409930:	2202      	movs	r2, #2
  409932:	931c      	str	r3, [sp, #112]	; 0x70
  409934:	921d      	str	r2, [sp, #116]	; 0x74
  409936:	2001      	movs	r0, #1
  409938:	46ca      	mov	sl, r9
  40993a:	e5d0      	b.n	4094de <_vfiprintf_r+0x742>
  40993c:	aa0f      	add	r2, sp, #60	; 0x3c
  40993e:	9904      	ldr	r1, [sp, #16]
  409940:	9806      	ldr	r0, [sp, #24]
  409942:	f7ff f9eb 	bl	408d1c <__sprint_r.part.0>
  409946:	2800      	cmp	r0, #0
  409948:	f47f aeda 	bne.w	409700 <_vfiprintf_r+0x964>
  40994c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40994e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  409950:	1c48      	adds	r0, r1, #1
  409952:	46ca      	mov	sl, r9
  409954:	e5a4      	b.n	4094a0 <_vfiprintf_r+0x704>
  409956:	9a07      	ldr	r2, [sp, #28]
  409958:	9903      	ldr	r1, [sp, #12]
  40995a:	6813      	ldr	r3, [r2, #0]
  40995c:	17cd      	asrs	r5, r1, #31
  40995e:	4608      	mov	r0, r1
  409960:	3204      	adds	r2, #4
  409962:	4629      	mov	r1, r5
  409964:	9207      	str	r2, [sp, #28]
  409966:	e9c3 0100 	strd	r0, r1, [r3]
  40996a:	f7ff ba54 	b.w	408e16 <_vfiprintf_r+0x7a>
  40996e:	4658      	mov	r0, fp
  409970:	9607      	str	r6, [sp, #28]
  409972:	9302      	str	r3, [sp, #8]
  409974:	f7fd ff04 	bl	407780 <strlen>
  409978:	2400      	movs	r4, #0
  40997a:	9005      	str	r0, [sp, #20]
  40997c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  409980:	f7ff bb5e 	b.w	409040 <_vfiprintf_r+0x2a4>
  409984:	aa0f      	add	r2, sp, #60	; 0x3c
  409986:	9904      	ldr	r1, [sp, #16]
  409988:	9806      	ldr	r0, [sp, #24]
  40998a:	f7ff f9c7 	bl	408d1c <__sprint_r.part.0>
  40998e:	2800      	cmp	r0, #0
  409990:	f47f aeb6 	bne.w	409700 <_vfiprintf_r+0x964>
  409994:	9910      	ldr	r1, [sp, #64]	; 0x40
  409996:	9a11      	ldr	r2, [sp, #68]	; 0x44
  409998:	1c48      	adds	r0, r1, #1
  40999a:	46ca      	mov	sl, r9
  40999c:	e5a7      	b.n	4094ee <_vfiprintf_r+0x752>
  40999e:	9910      	ldr	r1, [sp, #64]	; 0x40
  4099a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4099a2:	4e20      	ldr	r6, [pc, #128]	; (409a24 <_vfiprintf_r+0xc88>)
  4099a4:	3101      	adds	r1, #1
  4099a6:	f7ff bb90 	b.w	4090ca <_vfiprintf_r+0x32e>
  4099aa:	2c06      	cmp	r4, #6
  4099ac:	bf28      	it	cs
  4099ae:	2406      	movcs	r4, #6
  4099b0:	9405      	str	r4, [sp, #20]
  4099b2:	9607      	str	r6, [sp, #28]
  4099b4:	9401      	str	r4, [sp, #4]
  4099b6:	f8df b070 	ldr.w	fp, [pc, #112]	; 409a28 <_vfiprintf_r+0xc8c>
  4099ba:	e4d5      	b.n	409368 <_vfiprintf_r+0x5cc>
  4099bc:	9810      	ldr	r0, [sp, #64]	; 0x40
  4099be:	4e19      	ldr	r6, [pc, #100]	; (409a24 <_vfiprintf_r+0xc88>)
  4099c0:	3001      	adds	r0, #1
  4099c2:	e603      	b.n	4095cc <_vfiprintf_r+0x830>
  4099c4:	9405      	str	r4, [sp, #20]
  4099c6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4099ca:	9607      	str	r6, [sp, #28]
  4099cc:	9302      	str	r3, [sp, #8]
  4099ce:	4604      	mov	r4, r0
  4099d0:	f7ff bb36 	b.w	409040 <_vfiprintf_r+0x2a4>
  4099d4:	4686      	mov	lr, r0
  4099d6:	f7ff bbce 	b.w	409176 <_vfiprintf_r+0x3da>
  4099da:	9806      	ldr	r0, [sp, #24]
  4099dc:	aa0f      	add	r2, sp, #60	; 0x3c
  4099de:	4659      	mov	r1, fp
  4099e0:	f7ff f99c 	bl	408d1c <__sprint_r.part.0>
  4099e4:	2800      	cmp	r0, #0
  4099e6:	f43f ae24 	beq.w	409632 <_vfiprintf_r+0x896>
  4099ea:	e624      	b.n	409636 <_vfiprintf_r+0x89a>
  4099ec:	9907      	ldr	r1, [sp, #28]
  4099ee:	f898 2001 	ldrb.w	r2, [r8, #1]
  4099f2:	680c      	ldr	r4, [r1, #0]
  4099f4:	3104      	adds	r1, #4
  4099f6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4099fa:	46b8      	mov	r8, r7
  4099fc:	9107      	str	r1, [sp, #28]
  4099fe:	f7ff ba3f 	b.w	408e80 <_vfiprintf_r+0xe4>
  409a02:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  409a06:	e43c      	b.n	409282 <_vfiprintf_r+0x4e6>
  409a08:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  409a0c:	e521      	b.n	409452 <_vfiprintf_r+0x6b6>
  409a0e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  409a12:	f7ff bbf4 	b.w	4091fe <_vfiprintf_r+0x462>
  409a16:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  409a1a:	e491      	b.n	409340 <_vfiprintf_r+0x5a4>
  409a1c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  409a20:	e469      	b.n	4092f6 <_vfiprintf_r+0x55a>
  409a22:	bf00      	nop
  409a24:	0040db70 	.word	0x0040db70
  409a28:	0040db44 	.word	0x0040db44

00409a2c <__sbprintf>:
  409a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409a30:	460c      	mov	r4, r1
  409a32:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  409a36:	8989      	ldrh	r1, [r1, #12]
  409a38:	6e66      	ldr	r6, [r4, #100]	; 0x64
  409a3a:	89e5      	ldrh	r5, [r4, #14]
  409a3c:	9619      	str	r6, [sp, #100]	; 0x64
  409a3e:	f021 0102 	bic.w	r1, r1, #2
  409a42:	4606      	mov	r6, r0
  409a44:	69e0      	ldr	r0, [r4, #28]
  409a46:	f8ad 100c 	strh.w	r1, [sp, #12]
  409a4a:	4617      	mov	r7, r2
  409a4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  409a50:	6a62      	ldr	r2, [r4, #36]	; 0x24
  409a52:	f8ad 500e 	strh.w	r5, [sp, #14]
  409a56:	4698      	mov	r8, r3
  409a58:	ad1a      	add	r5, sp, #104	; 0x68
  409a5a:	2300      	movs	r3, #0
  409a5c:	9007      	str	r0, [sp, #28]
  409a5e:	a816      	add	r0, sp, #88	; 0x58
  409a60:	9209      	str	r2, [sp, #36]	; 0x24
  409a62:	9306      	str	r3, [sp, #24]
  409a64:	9500      	str	r5, [sp, #0]
  409a66:	9504      	str	r5, [sp, #16]
  409a68:	9102      	str	r1, [sp, #8]
  409a6a:	9105      	str	r1, [sp, #20]
  409a6c:	f001 fd14 	bl	40b498 <__retarget_lock_init_recursive>
  409a70:	4643      	mov	r3, r8
  409a72:	463a      	mov	r2, r7
  409a74:	4669      	mov	r1, sp
  409a76:	4630      	mov	r0, r6
  409a78:	f7ff f990 	bl	408d9c <_vfiprintf_r>
  409a7c:	1e05      	subs	r5, r0, #0
  409a7e:	db07      	blt.n	409a90 <__sbprintf+0x64>
  409a80:	4630      	mov	r0, r6
  409a82:	4669      	mov	r1, sp
  409a84:	f001 f8e6 	bl	40ac54 <_fflush_r>
  409a88:	2800      	cmp	r0, #0
  409a8a:	bf18      	it	ne
  409a8c:	f04f 35ff 	movne.w	r5, #4294967295
  409a90:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  409a94:	065b      	lsls	r3, r3, #25
  409a96:	d503      	bpl.n	409aa0 <__sbprintf+0x74>
  409a98:	89a3      	ldrh	r3, [r4, #12]
  409a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409a9e:	81a3      	strh	r3, [r4, #12]
  409aa0:	9816      	ldr	r0, [sp, #88]	; 0x58
  409aa2:	f001 fcfb 	bl	40b49c <__retarget_lock_close_recursive>
  409aa6:	4628      	mov	r0, r5
  409aa8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  409aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00409ab0 <__swsetup_r>:
  409ab0:	b538      	push	{r3, r4, r5, lr}
  409ab2:	4b30      	ldr	r3, [pc, #192]	; (409b74 <__swsetup_r+0xc4>)
  409ab4:	681b      	ldr	r3, [r3, #0]
  409ab6:	4605      	mov	r5, r0
  409ab8:	460c      	mov	r4, r1
  409aba:	b113      	cbz	r3, 409ac2 <__swsetup_r+0x12>
  409abc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  409abe:	2a00      	cmp	r2, #0
  409ac0:	d038      	beq.n	409b34 <__swsetup_r+0x84>
  409ac2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  409ac6:	b293      	uxth	r3, r2
  409ac8:	0718      	lsls	r0, r3, #28
  409aca:	d50c      	bpl.n	409ae6 <__swsetup_r+0x36>
  409acc:	6920      	ldr	r0, [r4, #16]
  409ace:	b1a8      	cbz	r0, 409afc <__swsetup_r+0x4c>
  409ad0:	f013 0201 	ands.w	r2, r3, #1
  409ad4:	d01e      	beq.n	409b14 <__swsetup_r+0x64>
  409ad6:	6963      	ldr	r3, [r4, #20]
  409ad8:	2200      	movs	r2, #0
  409ada:	425b      	negs	r3, r3
  409adc:	61a3      	str	r3, [r4, #24]
  409ade:	60a2      	str	r2, [r4, #8]
  409ae0:	b1f0      	cbz	r0, 409b20 <__swsetup_r+0x70>
  409ae2:	2000      	movs	r0, #0
  409ae4:	bd38      	pop	{r3, r4, r5, pc}
  409ae6:	06d9      	lsls	r1, r3, #27
  409ae8:	d53c      	bpl.n	409b64 <__swsetup_r+0xb4>
  409aea:	0758      	lsls	r0, r3, #29
  409aec:	d426      	bmi.n	409b3c <__swsetup_r+0x8c>
  409aee:	6920      	ldr	r0, [r4, #16]
  409af0:	f042 0308 	orr.w	r3, r2, #8
  409af4:	81a3      	strh	r3, [r4, #12]
  409af6:	b29b      	uxth	r3, r3
  409af8:	2800      	cmp	r0, #0
  409afa:	d1e9      	bne.n	409ad0 <__swsetup_r+0x20>
  409afc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  409b00:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  409b04:	d0e4      	beq.n	409ad0 <__swsetup_r+0x20>
  409b06:	4628      	mov	r0, r5
  409b08:	4621      	mov	r1, r4
  409b0a:	f001 fcfb 	bl	40b504 <__smakebuf_r>
  409b0e:	89a3      	ldrh	r3, [r4, #12]
  409b10:	6920      	ldr	r0, [r4, #16]
  409b12:	e7dd      	b.n	409ad0 <__swsetup_r+0x20>
  409b14:	0799      	lsls	r1, r3, #30
  409b16:	bf58      	it	pl
  409b18:	6962      	ldrpl	r2, [r4, #20]
  409b1a:	60a2      	str	r2, [r4, #8]
  409b1c:	2800      	cmp	r0, #0
  409b1e:	d1e0      	bne.n	409ae2 <__swsetup_r+0x32>
  409b20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409b24:	061a      	lsls	r2, r3, #24
  409b26:	d5dd      	bpl.n	409ae4 <__swsetup_r+0x34>
  409b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409b2c:	81a3      	strh	r3, [r4, #12]
  409b2e:	f04f 30ff 	mov.w	r0, #4294967295
  409b32:	bd38      	pop	{r3, r4, r5, pc}
  409b34:	4618      	mov	r0, r3
  409b36:	f001 f8e5 	bl	40ad04 <__sinit>
  409b3a:	e7c2      	b.n	409ac2 <__swsetup_r+0x12>
  409b3c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  409b3e:	b151      	cbz	r1, 409b56 <__swsetup_r+0xa6>
  409b40:	f104 0340 	add.w	r3, r4, #64	; 0x40
  409b44:	4299      	cmp	r1, r3
  409b46:	d004      	beq.n	409b52 <__swsetup_r+0xa2>
  409b48:	4628      	mov	r0, r5
  409b4a:	f001 fa01 	bl	40af50 <_free_r>
  409b4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  409b52:	2300      	movs	r3, #0
  409b54:	6323      	str	r3, [r4, #48]	; 0x30
  409b56:	2300      	movs	r3, #0
  409b58:	6920      	ldr	r0, [r4, #16]
  409b5a:	6063      	str	r3, [r4, #4]
  409b5c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  409b60:	6020      	str	r0, [r4, #0]
  409b62:	e7c5      	b.n	409af0 <__swsetup_r+0x40>
  409b64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  409b68:	2309      	movs	r3, #9
  409b6a:	602b      	str	r3, [r5, #0]
  409b6c:	f04f 30ff 	mov.w	r0, #4294967295
  409b70:	81a2      	strh	r2, [r4, #12]
  409b72:	bd38      	pop	{r3, r4, r5, pc}
  409b74:	20400064 	.word	0x20400064

00409b78 <register_fini>:
  409b78:	4b02      	ldr	r3, [pc, #8]	; (409b84 <register_fini+0xc>)
  409b7a:	b113      	cbz	r3, 409b82 <register_fini+0xa>
  409b7c:	4802      	ldr	r0, [pc, #8]	; (409b88 <register_fini+0x10>)
  409b7e:	f000 b805 	b.w	409b8c <atexit>
  409b82:	4770      	bx	lr
  409b84:	00000000 	.word	0x00000000
  409b88:	0040ad75 	.word	0x0040ad75

00409b8c <atexit>:
  409b8c:	2300      	movs	r3, #0
  409b8e:	4601      	mov	r1, r0
  409b90:	461a      	mov	r2, r3
  409b92:	4618      	mov	r0, r3
  409b94:	f002 beae 	b.w	40c8f4 <__register_exitproc>

00409b98 <quorem>:
  409b98:	6902      	ldr	r2, [r0, #16]
  409b9a:	690b      	ldr	r3, [r1, #16]
  409b9c:	4293      	cmp	r3, r2
  409b9e:	f300 808d 	bgt.w	409cbc <quorem+0x124>
  409ba2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409ba6:	f103 38ff 	add.w	r8, r3, #4294967295
  409baa:	f101 0714 	add.w	r7, r1, #20
  409bae:	f100 0b14 	add.w	fp, r0, #20
  409bb2:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  409bb6:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  409bba:	ea4f 0488 	mov.w	r4, r8, lsl #2
  409bbe:	b083      	sub	sp, #12
  409bc0:	3201      	adds	r2, #1
  409bc2:	fbb3 f9f2 	udiv	r9, r3, r2
  409bc6:	eb0b 0304 	add.w	r3, fp, r4
  409bca:	9400      	str	r4, [sp, #0]
  409bcc:	eb07 0a04 	add.w	sl, r7, r4
  409bd0:	9301      	str	r3, [sp, #4]
  409bd2:	f1b9 0f00 	cmp.w	r9, #0
  409bd6:	d039      	beq.n	409c4c <quorem+0xb4>
  409bd8:	2500      	movs	r5, #0
  409bda:	462e      	mov	r6, r5
  409bdc:	46bc      	mov	ip, r7
  409bde:	46de      	mov	lr, fp
  409be0:	f85c 4b04 	ldr.w	r4, [ip], #4
  409be4:	f8de 3000 	ldr.w	r3, [lr]
  409be8:	b2a2      	uxth	r2, r4
  409bea:	fb09 5502 	mla	r5, r9, r2, r5
  409bee:	0c22      	lsrs	r2, r4, #16
  409bf0:	0c2c      	lsrs	r4, r5, #16
  409bf2:	fb09 4202 	mla	r2, r9, r2, r4
  409bf6:	b2ad      	uxth	r5, r5
  409bf8:	1b75      	subs	r5, r6, r5
  409bfa:	b296      	uxth	r6, r2
  409bfc:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  409c00:	fa15 f383 	uxtah	r3, r5, r3
  409c04:	eb06 4623 	add.w	r6, r6, r3, asr #16
  409c08:	b29b      	uxth	r3, r3
  409c0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  409c0e:	45e2      	cmp	sl, ip
  409c10:	ea4f 4512 	mov.w	r5, r2, lsr #16
  409c14:	f84e 3b04 	str.w	r3, [lr], #4
  409c18:	ea4f 4626 	mov.w	r6, r6, asr #16
  409c1c:	d2e0      	bcs.n	409be0 <quorem+0x48>
  409c1e:	9b00      	ldr	r3, [sp, #0]
  409c20:	f85b 3003 	ldr.w	r3, [fp, r3]
  409c24:	b993      	cbnz	r3, 409c4c <quorem+0xb4>
  409c26:	9c01      	ldr	r4, [sp, #4]
  409c28:	1f23      	subs	r3, r4, #4
  409c2a:	459b      	cmp	fp, r3
  409c2c:	d20c      	bcs.n	409c48 <quorem+0xb0>
  409c2e:	f854 3c04 	ldr.w	r3, [r4, #-4]
  409c32:	b94b      	cbnz	r3, 409c48 <quorem+0xb0>
  409c34:	f1a4 0308 	sub.w	r3, r4, #8
  409c38:	e002      	b.n	409c40 <quorem+0xa8>
  409c3a:	681a      	ldr	r2, [r3, #0]
  409c3c:	3b04      	subs	r3, #4
  409c3e:	b91a      	cbnz	r2, 409c48 <quorem+0xb0>
  409c40:	459b      	cmp	fp, r3
  409c42:	f108 38ff 	add.w	r8, r8, #4294967295
  409c46:	d3f8      	bcc.n	409c3a <quorem+0xa2>
  409c48:	f8c0 8010 	str.w	r8, [r0, #16]
  409c4c:	4604      	mov	r4, r0
  409c4e:	f002 fa35 	bl	40c0bc <__mcmp>
  409c52:	2800      	cmp	r0, #0
  409c54:	db2e      	blt.n	409cb4 <quorem+0x11c>
  409c56:	f109 0901 	add.w	r9, r9, #1
  409c5a:	465d      	mov	r5, fp
  409c5c:	2300      	movs	r3, #0
  409c5e:	f857 1b04 	ldr.w	r1, [r7], #4
  409c62:	6828      	ldr	r0, [r5, #0]
  409c64:	b28a      	uxth	r2, r1
  409c66:	1a9a      	subs	r2, r3, r2
  409c68:	0c0b      	lsrs	r3, r1, #16
  409c6a:	fa12 f280 	uxtah	r2, r2, r0
  409c6e:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  409c72:	eb03 4322 	add.w	r3, r3, r2, asr #16
  409c76:	b292      	uxth	r2, r2
  409c78:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  409c7c:	45ba      	cmp	sl, r7
  409c7e:	f845 2b04 	str.w	r2, [r5], #4
  409c82:	ea4f 4323 	mov.w	r3, r3, asr #16
  409c86:	d2ea      	bcs.n	409c5e <quorem+0xc6>
  409c88:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  409c8c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  409c90:	b982      	cbnz	r2, 409cb4 <quorem+0x11c>
  409c92:	1f1a      	subs	r2, r3, #4
  409c94:	4593      	cmp	fp, r2
  409c96:	d20b      	bcs.n	409cb0 <quorem+0x118>
  409c98:	f853 2c04 	ldr.w	r2, [r3, #-4]
  409c9c:	b942      	cbnz	r2, 409cb0 <quorem+0x118>
  409c9e:	3b08      	subs	r3, #8
  409ca0:	e002      	b.n	409ca8 <quorem+0x110>
  409ca2:	681a      	ldr	r2, [r3, #0]
  409ca4:	3b04      	subs	r3, #4
  409ca6:	b91a      	cbnz	r2, 409cb0 <quorem+0x118>
  409ca8:	459b      	cmp	fp, r3
  409caa:	f108 38ff 	add.w	r8, r8, #4294967295
  409cae:	d3f8      	bcc.n	409ca2 <quorem+0x10a>
  409cb0:	f8c4 8010 	str.w	r8, [r4, #16]
  409cb4:	4648      	mov	r0, r9
  409cb6:	b003      	add	sp, #12
  409cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409cbc:	2000      	movs	r0, #0
  409cbe:	4770      	bx	lr

00409cc0 <_dtoa_r>:
  409cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409cc4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  409cc6:	b09b      	sub	sp, #108	; 0x6c
  409cc8:	4604      	mov	r4, r0
  409cca:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  409ccc:	4692      	mov	sl, r2
  409cce:	469b      	mov	fp, r3
  409cd0:	b141      	cbz	r1, 409ce4 <_dtoa_r+0x24>
  409cd2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  409cd4:	604a      	str	r2, [r1, #4]
  409cd6:	2301      	movs	r3, #1
  409cd8:	4093      	lsls	r3, r2
  409cda:	608b      	str	r3, [r1, #8]
  409cdc:	f002 f816 	bl	40bd0c <_Bfree>
  409ce0:	2300      	movs	r3, #0
  409ce2:	6423      	str	r3, [r4, #64]	; 0x40
  409ce4:	f1bb 0f00 	cmp.w	fp, #0
  409ce8:	465d      	mov	r5, fp
  409cea:	db35      	blt.n	409d58 <_dtoa_r+0x98>
  409cec:	2300      	movs	r3, #0
  409cee:	6033      	str	r3, [r6, #0]
  409cf0:	4b9d      	ldr	r3, [pc, #628]	; (409f68 <_dtoa_r+0x2a8>)
  409cf2:	43ab      	bics	r3, r5
  409cf4:	d015      	beq.n	409d22 <_dtoa_r+0x62>
  409cf6:	4650      	mov	r0, sl
  409cf8:	4659      	mov	r1, fp
  409cfa:	2200      	movs	r2, #0
  409cfc:	2300      	movs	r3, #0
  409cfe:	f003 fb71 	bl	40d3e4 <__aeabi_dcmpeq>
  409d02:	4680      	mov	r8, r0
  409d04:	2800      	cmp	r0, #0
  409d06:	d02d      	beq.n	409d64 <_dtoa_r+0xa4>
  409d08:	9a26      	ldr	r2, [sp, #152]	; 0x98
  409d0a:	2301      	movs	r3, #1
  409d0c:	6013      	str	r3, [r2, #0]
  409d0e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  409d10:	2b00      	cmp	r3, #0
  409d12:	f000 80bd 	beq.w	409e90 <_dtoa_r+0x1d0>
  409d16:	4895      	ldr	r0, [pc, #596]	; (409f6c <_dtoa_r+0x2ac>)
  409d18:	6018      	str	r0, [r3, #0]
  409d1a:	3801      	subs	r0, #1
  409d1c:	b01b      	add	sp, #108	; 0x6c
  409d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409d22:	9a26      	ldr	r2, [sp, #152]	; 0x98
  409d24:	f242 730f 	movw	r3, #9999	; 0x270f
  409d28:	6013      	str	r3, [r2, #0]
  409d2a:	f1ba 0f00 	cmp.w	sl, #0
  409d2e:	d10d      	bne.n	409d4c <_dtoa_r+0x8c>
  409d30:	f3c5 0513 	ubfx	r5, r5, #0, #20
  409d34:	b955      	cbnz	r5, 409d4c <_dtoa_r+0x8c>
  409d36:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  409d38:	488d      	ldr	r0, [pc, #564]	; (409f70 <_dtoa_r+0x2b0>)
  409d3a:	2b00      	cmp	r3, #0
  409d3c:	d0ee      	beq.n	409d1c <_dtoa_r+0x5c>
  409d3e:	f100 0308 	add.w	r3, r0, #8
  409d42:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  409d44:	6013      	str	r3, [r2, #0]
  409d46:	b01b      	add	sp, #108	; 0x6c
  409d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409d4c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  409d4e:	4889      	ldr	r0, [pc, #548]	; (409f74 <_dtoa_r+0x2b4>)
  409d50:	2b00      	cmp	r3, #0
  409d52:	d0e3      	beq.n	409d1c <_dtoa_r+0x5c>
  409d54:	1cc3      	adds	r3, r0, #3
  409d56:	e7f4      	b.n	409d42 <_dtoa_r+0x82>
  409d58:	2301      	movs	r3, #1
  409d5a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  409d5e:	6033      	str	r3, [r6, #0]
  409d60:	46ab      	mov	fp, r5
  409d62:	e7c5      	b.n	409cf0 <_dtoa_r+0x30>
  409d64:	aa18      	add	r2, sp, #96	; 0x60
  409d66:	ab19      	add	r3, sp, #100	; 0x64
  409d68:	9201      	str	r2, [sp, #4]
  409d6a:	9300      	str	r3, [sp, #0]
  409d6c:	4652      	mov	r2, sl
  409d6e:	465b      	mov	r3, fp
  409d70:	4620      	mov	r0, r4
  409d72:	f002 fa43 	bl	40c1fc <__d2b>
  409d76:	0d2b      	lsrs	r3, r5, #20
  409d78:	4681      	mov	r9, r0
  409d7a:	d071      	beq.n	409e60 <_dtoa_r+0x1a0>
  409d7c:	f3cb 0213 	ubfx	r2, fp, #0, #20
  409d80:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  409d84:	9f18      	ldr	r7, [sp, #96]	; 0x60
  409d86:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  409d8a:	4650      	mov	r0, sl
  409d8c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  409d90:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  409d94:	2200      	movs	r2, #0
  409d96:	4b78      	ldr	r3, [pc, #480]	; (409f78 <_dtoa_r+0x2b8>)
  409d98:	f002 ff08 	bl	40cbac <__aeabi_dsub>
  409d9c:	a36c      	add	r3, pc, #432	; (adr r3, 409f50 <_dtoa_r+0x290>)
  409d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
  409da2:	f003 f8b7 	bl	40cf14 <__aeabi_dmul>
  409da6:	a36c      	add	r3, pc, #432	; (adr r3, 409f58 <_dtoa_r+0x298>)
  409da8:	e9d3 2300 	ldrd	r2, r3, [r3]
  409dac:	f002 ff00 	bl	40cbb0 <__adddf3>
  409db0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  409db4:	4630      	mov	r0, r6
  409db6:	f003 f847 	bl	40ce48 <__aeabi_i2d>
  409dba:	a369      	add	r3, pc, #420	; (adr r3, 409f60 <_dtoa_r+0x2a0>)
  409dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
  409dc0:	f003 f8a8 	bl	40cf14 <__aeabi_dmul>
  409dc4:	4602      	mov	r2, r0
  409dc6:	460b      	mov	r3, r1
  409dc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  409dcc:	f002 fef0 	bl	40cbb0 <__adddf3>
  409dd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
  409dd4:	f003 fb4e 	bl	40d474 <__aeabi_d2iz>
  409dd8:	2200      	movs	r2, #0
  409dda:	9002      	str	r0, [sp, #8]
  409ddc:	2300      	movs	r3, #0
  409dde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  409de2:	f003 fb09 	bl	40d3f8 <__aeabi_dcmplt>
  409de6:	2800      	cmp	r0, #0
  409de8:	f040 8173 	bne.w	40a0d2 <_dtoa_r+0x412>
  409dec:	9d02      	ldr	r5, [sp, #8]
  409dee:	2d16      	cmp	r5, #22
  409df0:	f200 815d 	bhi.w	40a0ae <_dtoa_r+0x3ee>
  409df4:	4b61      	ldr	r3, [pc, #388]	; (409f7c <_dtoa_r+0x2bc>)
  409df6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  409dfa:	e9d3 0100 	ldrd	r0, r1, [r3]
  409dfe:	4652      	mov	r2, sl
  409e00:	465b      	mov	r3, fp
  409e02:	f003 fb17 	bl	40d434 <__aeabi_dcmpgt>
  409e06:	2800      	cmp	r0, #0
  409e08:	f000 81c5 	beq.w	40a196 <_dtoa_r+0x4d6>
  409e0c:	1e6b      	subs	r3, r5, #1
  409e0e:	9302      	str	r3, [sp, #8]
  409e10:	2300      	movs	r3, #0
  409e12:	930e      	str	r3, [sp, #56]	; 0x38
  409e14:	1bbf      	subs	r7, r7, r6
  409e16:	1e7b      	subs	r3, r7, #1
  409e18:	9306      	str	r3, [sp, #24]
  409e1a:	f100 8154 	bmi.w	40a0c6 <_dtoa_r+0x406>
  409e1e:	2300      	movs	r3, #0
  409e20:	9308      	str	r3, [sp, #32]
  409e22:	9b02      	ldr	r3, [sp, #8]
  409e24:	2b00      	cmp	r3, #0
  409e26:	f2c0 8145 	blt.w	40a0b4 <_dtoa_r+0x3f4>
  409e2a:	9a06      	ldr	r2, [sp, #24]
  409e2c:	930d      	str	r3, [sp, #52]	; 0x34
  409e2e:	4611      	mov	r1, r2
  409e30:	4419      	add	r1, r3
  409e32:	2300      	movs	r3, #0
  409e34:	9106      	str	r1, [sp, #24]
  409e36:	930c      	str	r3, [sp, #48]	; 0x30
  409e38:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409e3a:	2b09      	cmp	r3, #9
  409e3c:	d82a      	bhi.n	409e94 <_dtoa_r+0x1d4>
  409e3e:	2b05      	cmp	r3, #5
  409e40:	f340 865b 	ble.w	40aafa <_dtoa_r+0xe3a>
  409e44:	3b04      	subs	r3, #4
  409e46:	9324      	str	r3, [sp, #144]	; 0x90
  409e48:	2500      	movs	r5, #0
  409e4a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409e4c:	3b02      	subs	r3, #2
  409e4e:	2b03      	cmp	r3, #3
  409e50:	f200 8642 	bhi.w	40aad8 <_dtoa_r+0xe18>
  409e54:	e8df f013 	tbh	[pc, r3, lsl #1]
  409e58:	02c903d4 	.word	0x02c903d4
  409e5c:	046103df 	.word	0x046103df
  409e60:	9f18      	ldr	r7, [sp, #96]	; 0x60
  409e62:	9e19      	ldr	r6, [sp, #100]	; 0x64
  409e64:	443e      	add	r6, r7
  409e66:	f206 4332 	addw	r3, r6, #1074	; 0x432
  409e6a:	2b20      	cmp	r3, #32
  409e6c:	f340 818e 	ble.w	40a18c <_dtoa_r+0x4cc>
  409e70:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  409e74:	f206 4012 	addw	r0, r6, #1042	; 0x412
  409e78:	409d      	lsls	r5, r3
  409e7a:	fa2a f000 	lsr.w	r0, sl, r0
  409e7e:	4328      	orrs	r0, r5
  409e80:	f002 ffd2 	bl	40ce28 <__aeabi_ui2d>
  409e84:	2301      	movs	r3, #1
  409e86:	3e01      	subs	r6, #1
  409e88:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  409e8c:	9314      	str	r3, [sp, #80]	; 0x50
  409e8e:	e781      	b.n	409d94 <_dtoa_r+0xd4>
  409e90:	483b      	ldr	r0, [pc, #236]	; (409f80 <_dtoa_r+0x2c0>)
  409e92:	e743      	b.n	409d1c <_dtoa_r+0x5c>
  409e94:	2100      	movs	r1, #0
  409e96:	6461      	str	r1, [r4, #68]	; 0x44
  409e98:	4620      	mov	r0, r4
  409e9a:	9125      	str	r1, [sp, #148]	; 0x94
  409e9c:	f001 ff10 	bl	40bcc0 <_Balloc>
  409ea0:	f04f 33ff 	mov.w	r3, #4294967295
  409ea4:	930a      	str	r3, [sp, #40]	; 0x28
  409ea6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  409ea8:	930f      	str	r3, [sp, #60]	; 0x3c
  409eaa:	2301      	movs	r3, #1
  409eac:	9004      	str	r0, [sp, #16]
  409eae:	6420      	str	r0, [r4, #64]	; 0x40
  409eb0:	9224      	str	r2, [sp, #144]	; 0x90
  409eb2:	930b      	str	r3, [sp, #44]	; 0x2c
  409eb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
  409eb6:	2b00      	cmp	r3, #0
  409eb8:	f2c0 80d9 	blt.w	40a06e <_dtoa_r+0x3ae>
  409ebc:	9a02      	ldr	r2, [sp, #8]
  409ebe:	2a0e      	cmp	r2, #14
  409ec0:	f300 80d5 	bgt.w	40a06e <_dtoa_r+0x3ae>
  409ec4:	4b2d      	ldr	r3, [pc, #180]	; (409f7c <_dtoa_r+0x2bc>)
  409ec6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409eca:	e9d3 2300 	ldrd	r2, r3, [r3]
  409ece:	e9cd 2308 	strd	r2, r3, [sp, #32]
  409ed2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  409ed4:	2b00      	cmp	r3, #0
  409ed6:	f2c0 83ba 	blt.w	40a64e <_dtoa_r+0x98e>
  409eda:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  409ede:	4650      	mov	r0, sl
  409ee0:	462a      	mov	r2, r5
  409ee2:	4633      	mov	r3, r6
  409ee4:	4659      	mov	r1, fp
  409ee6:	f003 f93f 	bl	40d168 <__aeabi_ddiv>
  409eea:	f003 fac3 	bl	40d474 <__aeabi_d2iz>
  409eee:	4680      	mov	r8, r0
  409ef0:	f002 ffaa 	bl	40ce48 <__aeabi_i2d>
  409ef4:	462a      	mov	r2, r5
  409ef6:	4633      	mov	r3, r6
  409ef8:	f003 f80c 	bl	40cf14 <__aeabi_dmul>
  409efc:	460b      	mov	r3, r1
  409efe:	4602      	mov	r2, r0
  409f00:	4659      	mov	r1, fp
  409f02:	4650      	mov	r0, sl
  409f04:	f002 fe52 	bl	40cbac <__aeabi_dsub>
  409f08:	9d04      	ldr	r5, [sp, #16]
  409f0a:	f108 0330 	add.w	r3, r8, #48	; 0x30
  409f0e:	702b      	strb	r3, [r5, #0]
  409f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409f12:	2b01      	cmp	r3, #1
  409f14:	4606      	mov	r6, r0
  409f16:	460f      	mov	r7, r1
  409f18:	f105 0501 	add.w	r5, r5, #1
  409f1c:	d068      	beq.n	409ff0 <_dtoa_r+0x330>
  409f1e:	2200      	movs	r2, #0
  409f20:	4b18      	ldr	r3, [pc, #96]	; (409f84 <_dtoa_r+0x2c4>)
  409f22:	f002 fff7 	bl	40cf14 <__aeabi_dmul>
  409f26:	2200      	movs	r2, #0
  409f28:	2300      	movs	r3, #0
  409f2a:	4606      	mov	r6, r0
  409f2c:	460f      	mov	r7, r1
  409f2e:	f003 fa59 	bl	40d3e4 <__aeabi_dcmpeq>
  409f32:	2800      	cmp	r0, #0
  409f34:	f040 8088 	bne.w	40a048 <_dtoa_r+0x388>
  409f38:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  409f3c:	f04f 0a00 	mov.w	sl, #0
  409f40:	f8df b040 	ldr.w	fp, [pc, #64]	; 409f84 <_dtoa_r+0x2c4>
  409f44:	940c      	str	r4, [sp, #48]	; 0x30
  409f46:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  409f4a:	e028      	b.n	409f9e <_dtoa_r+0x2de>
  409f4c:	f3af 8000 	nop.w
  409f50:	636f4361 	.word	0x636f4361
  409f54:	3fd287a7 	.word	0x3fd287a7
  409f58:	8b60c8b3 	.word	0x8b60c8b3
  409f5c:	3fc68a28 	.word	0x3fc68a28
  409f60:	509f79fb 	.word	0x509f79fb
  409f64:	3fd34413 	.word	0x3fd34413
  409f68:	7ff00000 	.word	0x7ff00000
  409f6c:	0040db4d 	.word	0x0040db4d
  409f70:	0040db90 	.word	0x0040db90
  409f74:	0040db9c 	.word	0x0040db9c
  409f78:	3ff80000 	.word	0x3ff80000
  409f7c:	0040dbd8 	.word	0x0040dbd8
  409f80:	0040db4c 	.word	0x0040db4c
  409f84:	40240000 	.word	0x40240000
  409f88:	f002 ffc4 	bl	40cf14 <__aeabi_dmul>
  409f8c:	2200      	movs	r2, #0
  409f8e:	2300      	movs	r3, #0
  409f90:	4606      	mov	r6, r0
  409f92:	460f      	mov	r7, r1
  409f94:	f003 fa26 	bl	40d3e4 <__aeabi_dcmpeq>
  409f98:	2800      	cmp	r0, #0
  409f9a:	f040 83c1 	bne.w	40a720 <_dtoa_r+0xa60>
  409f9e:	4642      	mov	r2, r8
  409fa0:	464b      	mov	r3, r9
  409fa2:	4630      	mov	r0, r6
  409fa4:	4639      	mov	r1, r7
  409fa6:	f003 f8df 	bl	40d168 <__aeabi_ddiv>
  409faa:	f003 fa63 	bl	40d474 <__aeabi_d2iz>
  409fae:	4604      	mov	r4, r0
  409fb0:	f002 ff4a 	bl	40ce48 <__aeabi_i2d>
  409fb4:	4642      	mov	r2, r8
  409fb6:	464b      	mov	r3, r9
  409fb8:	f002 ffac 	bl	40cf14 <__aeabi_dmul>
  409fbc:	4602      	mov	r2, r0
  409fbe:	460b      	mov	r3, r1
  409fc0:	4630      	mov	r0, r6
  409fc2:	4639      	mov	r1, r7
  409fc4:	f002 fdf2 	bl	40cbac <__aeabi_dsub>
  409fc8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  409fcc:	9e04      	ldr	r6, [sp, #16]
  409fce:	f805 eb01 	strb.w	lr, [r5], #1
  409fd2:	eba5 0e06 	sub.w	lr, r5, r6
  409fd6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  409fd8:	45b6      	cmp	lr, r6
  409fda:	e9cd 0106 	strd	r0, r1, [sp, #24]
  409fde:	4652      	mov	r2, sl
  409fe0:	465b      	mov	r3, fp
  409fe2:	d1d1      	bne.n	409f88 <_dtoa_r+0x2c8>
  409fe4:	46a0      	mov	r8, r4
  409fe6:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  409fea:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  409fec:	4606      	mov	r6, r0
  409fee:	460f      	mov	r7, r1
  409ff0:	4632      	mov	r2, r6
  409ff2:	463b      	mov	r3, r7
  409ff4:	4630      	mov	r0, r6
  409ff6:	4639      	mov	r1, r7
  409ff8:	f002 fdda 	bl	40cbb0 <__adddf3>
  409ffc:	4606      	mov	r6, r0
  409ffe:	460f      	mov	r7, r1
  40a000:	4602      	mov	r2, r0
  40a002:	460b      	mov	r3, r1
  40a004:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40a008:	f003 f9f6 	bl	40d3f8 <__aeabi_dcmplt>
  40a00c:	b948      	cbnz	r0, 40a022 <_dtoa_r+0x362>
  40a00e:	4632      	mov	r2, r6
  40a010:	463b      	mov	r3, r7
  40a012:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40a016:	f003 f9e5 	bl	40d3e4 <__aeabi_dcmpeq>
  40a01a:	b1a8      	cbz	r0, 40a048 <_dtoa_r+0x388>
  40a01c:	f018 0f01 	tst.w	r8, #1
  40a020:	d012      	beq.n	40a048 <_dtoa_r+0x388>
  40a022:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40a026:	9a04      	ldr	r2, [sp, #16]
  40a028:	1e6b      	subs	r3, r5, #1
  40a02a:	e004      	b.n	40a036 <_dtoa_r+0x376>
  40a02c:	429a      	cmp	r2, r3
  40a02e:	f000 8401 	beq.w	40a834 <_dtoa_r+0xb74>
  40a032:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  40a036:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40a03a:	f103 0501 	add.w	r5, r3, #1
  40a03e:	d0f5      	beq.n	40a02c <_dtoa_r+0x36c>
  40a040:	f108 0801 	add.w	r8, r8, #1
  40a044:	f883 8000 	strb.w	r8, [r3]
  40a048:	4649      	mov	r1, r9
  40a04a:	4620      	mov	r0, r4
  40a04c:	f001 fe5e 	bl	40bd0c <_Bfree>
  40a050:	2200      	movs	r2, #0
  40a052:	9b02      	ldr	r3, [sp, #8]
  40a054:	702a      	strb	r2, [r5, #0]
  40a056:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40a058:	3301      	adds	r3, #1
  40a05a:	6013      	str	r3, [r2, #0]
  40a05c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40a05e:	2b00      	cmp	r3, #0
  40a060:	f000 839e 	beq.w	40a7a0 <_dtoa_r+0xae0>
  40a064:	9804      	ldr	r0, [sp, #16]
  40a066:	601d      	str	r5, [r3, #0]
  40a068:	b01b      	add	sp, #108	; 0x6c
  40a06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a06e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40a070:	2a00      	cmp	r2, #0
  40a072:	d03e      	beq.n	40a0f2 <_dtoa_r+0x432>
  40a074:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40a076:	2a01      	cmp	r2, #1
  40a078:	f340 8311 	ble.w	40a69e <_dtoa_r+0x9de>
  40a07c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a07e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40a080:	1e5f      	subs	r7, r3, #1
  40a082:	42ba      	cmp	r2, r7
  40a084:	f2c0 838f 	blt.w	40a7a6 <_dtoa_r+0xae6>
  40a088:	1bd7      	subs	r7, r2, r7
  40a08a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a08c:	2b00      	cmp	r3, #0
  40a08e:	f2c0 848b 	blt.w	40a9a8 <_dtoa_r+0xce8>
  40a092:	9d08      	ldr	r5, [sp, #32]
  40a094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a096:	9a08      	ldr	r2, [sp, #32]
  40a098:	441a      	add	r2, r3
  40a09a:	9208      	str	r2, [sp, #32]
  40a09c:	9a06      	ldr	r2, [sp, #24]
  40a09e:	2101      	movs	r1, #1
  40a0a0:	441a      	add	r2, r3
  40a0a2:	4620      	mov	r0, r4
  40a0a4:	9206      	str	r2, [sp, #24]
  40a0a6:	f001 fecb 	bl	40be40 <__i2b>
  40a0aa:	4606      	mov	r6, r0
  40a0ac:	e024      	b.n	40a0f8 <_dtoa_r+0x438>
  40a0ae:	2301      	movs	r3, #1
  40a0b0:	930e      	str	r3, [sp, #56]	; 0x38
  40a0b2:	e6af      	b.n	409e14 <_dtoa_r+0x154>
  40a0b4:	9a08      	ldr	r2, [sp, #32]
  40a0b6:	9b02      	ldr	r3, [sp, #8]
  40a0b8:	1ad2      	subs	r2, r2, r3
  40a0ba:	425b      	negs	r3, r3
  40a0bc:	930c      	str	r3, [sp, #48]	; 0x30
  40a0be:	2300      	movs	r3, #0
  40a0c0:	9208      	str	r2, [sp, #32]
  40a0c2:	930d      	str	r3, [sp, #52]	; 0x34
  40a0c4:	e6b8      	b.n	409e38 <_dtoa_r+0x178>
  40a0c6:	f1c7 0301 	rsb	r3, r7, #1
  40a0ca:	9308      	str	r3, [sp, #32]
  40a0cc:	2300      	movs	r3, #0
  40a0ce:	9306      	str	r3, [sp, #24]
  40a0d0:	e6a7      	b.n	409e22 <_dtoa_r+0x162>
  40a0d2:	9d02      	ldr	r5, [sp, #8]
  40a0d4:	4628      	mov	r0, r5
  40a0d6:	f002 feb7 	bl	40ce48 <__aeabi_i2d>
  40a0da:	4602      	mov	r2, r0
  40a0dc:	460b      	mov	r3, r1
  40a0de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40a0e2:	f003 f97f 	bl	40d3e4 <__aeabi_dcmpeq>
  40a0e6:	2800      	cmp	r0, #0
  40a0e8:	f47f ae80 	bne.w	409dec <_dtoa_r+0x12c>
  40a0ec:	1e6b      	subs	r3, r5, #1
  40a0ee:	9302      	str	r3, [sp, #8]
  40a0f0:	e67c      	b.n	409dec <_dtoa_r+0x12c>
  40a0f2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40a0f4:	9d08      	ldr	r5, [sp, #32]
  40a0f6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  40a0f8:	2d00      	cmp	r5, #0
  40a0fa:	dd0c      	ble.n	40a116 <_dtoa_r+0x456>
  40a0fc:	9906      	ldr	r1, [sp, #24]
  40a0fe:	2900      	cmp	r1, #0
  40a100:	460b      	mov	r3, r1
  40a102:	dd08      	ble.n	40a116 <_dtoa_r+0x456>
  40a104:	42a9      	cmp	r1, r5
  40a106:	9a08      	ldr	r2, [sp, #32]
  40a108:	bfa8      	it	ge
  40a10a:	462b      	movge	r3, r5
  40a10c:	1ad2      	subs	r2, r2, r3
  40a10e:	1aed      	subs	r5, r5, r3
  40a110:	1acb      	subs	r3, r1, r3
  40a112:	9208      	str	r2, [sp, #32]
  40a114:	9306      	str	r3, [sp, #24]
  40a116:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40a118:	b1d3      	cbz	r3, 40a150 <_dtoa_r+0x490>
  40a11a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40a11c:	2b00      	cmp	r3, #0
  40a11e:	f000 82b7 	beq.w	40a690 <_dtoa_r+0x9d0>
  40a122:	2f00      	cmp	r7, #0
  40a124:	dd10      	ble.n	40a148 <_dtoa_r+0x488>
  40a126:	4631      	mov	r1, r6
  40a128:	463a      	mov	r2, r7
  40a12a:	4620      	mov	r0, r4
  40a12c:	f001 ff24 	bl	40bf78 <__pow5mult>
  40a130:	464a      	mov	r2, r9
  40a132:	4601      	mov	r1, r0
  40a134:	4606      	mov	r6, r0
  40a136:	4620      	mov	r0, r4
  40a138:	f001 fe8c 	bl	40be54 <__multiply>
  40a13c:	4649      	mov	r1, r9
  40a13e:	4680      	mov	r8, r0
  40a140:	4620      	mov	r0, r4
  40a142:	f001 fde3 	bl	40bd0c <_Bfree>
  40a146:	46c1      	mov	r9, r8
  40a148:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40a14a:	1bda      	subs	r2, r3, r7
  40a14c:	f040 82a1 	bne.w	40a692 <_dtoa_r+0x9d2>
  40a150:	2101      	movs	r1, #1
  40a152:	4620      	mov	r0, r4
  40a154:	f001 fe74 	bl	40be40 <__i2b>
  40a158:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40a15a:	2b00      	cmp	r3, #0
  40a15c:	4680      	mov	r8, r0
  40a15e:	dd1c      	ble.n	40a19a <_dtoa_r+0x4da>
  40a160:	4601      	mov	r1, r0
  40a162:	461a      	mov	r2, r3
  40a164:	4620      	mov	r0, r4
  40a166:	f001 ff07 	bl	40bf78 <__pow5mult>
  40a16a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a16c:	2b01      	cmp	r3, #1
  40a16e:	4680      	mov	r8, r0
  40a170:	f340 8254 	ble.w	40a61c <_dtoa_r+0x95c>
  40a174:	2300      	movs	r3, #0
  40a176:	930c      	str	r3, [sp, #48]	; 0x30
  40a178:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40a17c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  40a180:	6918      	ldr	r0, [r3, #16]
  40a182:	f001 fe0d 	bl	40bda0 <__hi0bits>
  40a186:	f1c0 0020 	rsb	r0, r0, #32
  40a18a:	e010      	b.n	40a1ae <_dtoa_r+0x4ee>
  40a18c:	f1c3 0520 	rsb	r5, r3, #32
  40a190:	fa0a f005 	lsl.w	r0, sl, r5
  40a194:	e674      	b.n	409e80 <_dtoa_r+0x1c0>
  40a196:	900e      	str	r0, [sp, #56]	; 0x38
  40a198:	e63c      	b.n	409e14 <_dtoa_r+0x154>
  40a19a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a19c:	2b01      	cmp	r3, #1
  40a19e:	f340 8287 	ble.w	40a6b0 <_dtoa_r+0x9f0>
  40a1a2:	2300      	movs	r3, #0
  40a1a4:	930c      	str	r3, [sp, #48]	; 0x30
  40a1a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40a1a8:	2001      	movs	r0, #1
  40a1aa:	2b00      	cmp	r3, #0
  40a1ac:	d1e4      	bne.n	40a178 <_dtoa_r+0x4b8>
  40a1ae:	9a06      	ldr	r2, [sp, #24]
  40a1b0:	4410      	add	r0, r2
  40a1b2:	f010 001f 	ands.w	r0, r0, #31
  40a1b6:	f000 80a1 	beq.w	40a2fc <_dtoa_r+0x63c>
  40a1ba:	f1c0 0320 	rsb	r3, r0, #32
  40a1be:	2b04      	cmp	r3, #4
  40a1c0:	f340 849e 	ble.w	40ab00 <_dtoa_r+0xe40>
  40a1c4:	9b08      	ldr	r3, [sp, #32]
  40a1c6:	f1c0 001c 	rsb	r0, r0, #28
  40a1ca:	4403      	add	r3, r0
  40a1cc:	9308      	str	r3, [sp, #32]
  40a1ce:	4613      	mov	r3, r2
  40a1d0:	4403      	add	r3, r0
  40a1d2:	4405      	add	r5, r0
  40a1d4:	9306      	str	r3, [sp, #24]
  40a1d6:	9b08      	ldr	r3, [sp, #32]
  40a1d8:	2b00      	cmp	r3, #0
  40a1da:	dd05      	ble.n	40a1e8 <_dtoa_r+0x528>
  40a1dc:	4649      	mov	r1, r9
  40a1de:	461a      	mov	r2, r3
  40a1e0:	4620      	mov	r0, r4
  40a1e2:	f001 ff19 	bl	40c018 <__lshift>
  40a1e6:	4681      	mov	r9, r0
  40a1e8:	9b06      	ldr	r3, [sp, #24]
  40a1ea:	2b00      	cmp	r3, #0
  40a1ec:	dd05      	ble.n	40a1fa <_dtoa_r+0x53a>
  40a1ee:	4641      	mov	r1, r8
  40a1f0:	461a      	mov	r2, r3
  40a1f2:	4620      	mov	r0, r4
  40a1f4:	f001 ff10 	bl	40c018 <__lshift>
  40a1f8:	4680      	mov	r8, r0
  40a1fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40a1fc:	2b00      	cmp	r3, #0
  40a1fe:	f040 8086 	bne.w	40a30e <_dtoa_r+0x64e>
  40a202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a204:	2b00      	cmp	r3, #0
  40a206:	f340 8266 	ble.w	40a6d6 <_dtoa_r+0xa16>
  40a20a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40a20c:	2b00      	cmp	r3, #0
  40a20e:	f000 8098 	beq.w	40a342 <_dtoa_r+0x682>
  40a212:	2d00      	cmp	r5, #0
  40a214:	dd05      	ble.n	40a222 <_dtoa_r+0x562>
  40a216:	4631      	mov	r1, r6
  40a218:	462a      	mov	r2, r5
  40a21a:	4620      	mov	r0, r4
  40a21c:	f001 fefc 	bl	40c018 <__lshift>
  40a220:	4606      	mov	r6, r0
  40a222:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40a224:	2b00      	cmp	r3, #0
  40a226:	f040 8337 	bne.w	40a898 <_dtoa_r+0xbd8>
  40a22a:	9606      	str	r6, [sp, #24]
  40a22c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a22e:	9a04      	ldr	r2, [sp, #16]
  40a230:	f8dd b018 	ldr.w	fp, [sp, #24]
  40a234:	3b01      	subs	r3, #1
  40a236:	18d3      	adds	r3, r2, r3
  40a238:	930b      	str	r3, [sp, #44]	; 0x2c
  40a23a:	f00a 0301 	and.w	r3, sl, #1
  40a23e:	930c      	str	r3, [sp, #48]	; 0x30
  40a240:	4617      	mov	r7, r2
  40a242:	46c2      	mov	sl, r8
  40a244:	4651      	mov	r1, sl
  40a246:	4648      	mov	r0, r9
  40a248:	f7ff fca6 	bl	409b98 <quorem>
  40a24c:	4631      	mov	r1, r6
  40a24e:	4605      	mov	r5, r0
  40a250:	4648      	mov	r0, r9
  40a252:	f001 ff33 	bl	40c0bc <__mcmp>
  40a256:	465a      	mov	r2, fp
  40a258:	900a      	str	r0, [sp, #40]	; 0x28
  40a25a:	4651      	mov	r1, sl
  40a25c:	4620      	mov	r0, r4
  40a25e:	f001 ff49 	bl	40c0f4 <__mdiff>
  40a262:	68c2      	ldr	r2, [r0, #12]
  40a264:	4680      	mov	r8, r0
  40a266:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40a26a:	2a00      	cmp	r2, #0
  40a26c:	f040 822b 	bne.w	40a6c6 <_dtoa_r+0xa06>
  40a270:	4601      	mov	r1, r0
  40a272:	4648      	mov	r0, r9
  40a274:	9308      	str	r3, [sp, #32]
  40a276:	f001 ff21 	bl	40c0bc <__mcmp>
  40a27a:	4641      	mov	r1, r8
  40a27c:	9006      	str	r0, [sp, #24]
  40a27e:	4620      	mov	r0, r4
  40a280:	f001 fd44 	bl	40bd0c <_Bfree>
  40a284:	9a06      	ldr	r2, [sp, #24]
  40a286:	9b08      	ldr	r3, [sp, #32]
  40a288:	b932      	cbnz	r2, 40a298 <_dtoa_r+0x5d8>
  40a28a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40a28c:	b921      	cbnz	r1, 40a298 <_dtoa_r+0x5d8>
  40a28e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40a290:	2a00      	cmp	r2, #0
  40a292:	f000 83ef 	beq.w	40aa74 <_dtoa_r+0xdb4>
  40a296:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40a298:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a29a:	2900      	cmp	r1, #0
  40a29c:	f2c0 829f 	blt.w	40a7de <_dtoa_r+0xb1e>
  40a2a0:	d105      	bne.n	40a2ae <_dtoa_r+0x5ee>
  40a2a2:	9924      	ldr	r1, [sp, #144]	; 0x90
  40a2a4:	b919      	cbnz	r1, 40a2ae <_dtoa_r+0x5ee>
  40a2a6:	990c      	ldr	r1, [sp, #48]	; 0x30
  40a2a8:	2900      	cmp	r1, #0
  40a2aa:	f000 8298 	beq.w	40a7de <_dtoa_r+0xb1e>
  40a2ae:	2a00      	cmp	r2, #0
  40a2b0:	f300 8306 	bgt.w	40a8c0 <_dtoa_r+0xc00>
  40a2b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40a2b6:	703b      	strb	r3, [r7, #0]
  40a2b8:	f107 0801 	add.w	r8, r7, #1
  40a2bc:	4297      	cmp	r7, r2
  40a2be:	4645      	mov	r5, r8
  40a2c0:	f000 830c 	beq.w	40a8dc <_dtoa_r+0xc1c>
  40a2c4:	4649      	mov	r1, r9
  40a2c6:	2300      	movs	r3, #0
  40a2c8:	220a      	movs	r2, #10
  40a2ca:	4620      	mov	r0, r4
  40a2cc:	f001 fd28 	bl	40bd20 <__multadd>
  40a2d0:	455e      	cmp	r6, fp
  40a2d2:	4681      	mov	r9, r0
  40a2d4:	4631      	mov	r1, r6
  40a2d6:	f04f 0300 	mov.w	r3, #0
  40a2da:	f04f 020a 	mov.w	r2, #10
  40a2de:	4620      	mov	r0, r4
  40a2e0:	f000 81eb 	beq.w	40a6ba <_dtoa_r+0x9fa>
  40a2e4:	f001 fd1c 	bl	40bd20 <__multadd>
  40a2e8:	4659      	mov	r1, fp
  40a2ea:	4606      	mov	r6, r0
  40a2ec:	2300      	movs	r3, #0
  40a2ee:	220a      	movs	r2, #10
  40a2f0:	4620      	mov	r0, r4
  40a2f2:	f001 fd15 	bl	40bd20 <__multadd>
  40a2f6:	4647      	mov	r7, r8
  40a2f8:	4683      	mov	fp, r0
  40a2fa:	e7a3      	b.n	40a244 <_dtoa_r+0x584>
  40a2fc:	201c      	movs	r0, #28
  40a2fe:	9b08      	ldr	r3, [sp, #32]
  40a300:	4403      	add	r3, r0
  40a302:	9308      	str	r3, [sp, #32]
  40a304:	9b06      	ldr	r3, [sp, #24]
  40a306:	4403      	add	r3, r0
  40a308:	4405      	add	r5, r0
  40a30a:	9306      	str	r3, [sp, #24]
  40a30c:	e763      	b.n	40a1d6 <_dtoa_r+0x516>
  40a30e:	4641      	mov	r1, r8
  40a310:	4648      	mov	r0, r9
  40a312:	f001 fed3 	bl	40c0bc <__mcmp>
  40a316:	2800      	cmp	r0, #0
  40a318:	f6bf af73 	bge.w	40a202 <_dtoa_r+0x542>
  40a31c:	9f02      	ldr	r7, [sp, #8]
  40a31e:	4649      	mov	r1, r9
  40a320:	2300      	movs	r3, #0
  40a322:	220a      	movs	r2, #10
  40a324:	4620      	mov	r0, r4
  40a326:	3f01      	subs	r7, #1
  40a328:	9702      	str	r7, [sp, #8]
  40a32a:	f001 fcf9 	bl	40bd20 <__multadd>
  40a32e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40a330:	4681      	mov	r9, r0
  40a332:	2b00      	cmp	r3, #0
  40a334:	f040 83b6 	bne.w	40aaa4 <_dtoa_r+0xde4>
  40a338:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40a33a:	2b00      	cmp	r3, #0
  40a33c:	f340 83bf 	ble.w	40aabe <_dtoa_r+0xdfe>
  40a340:	930a      	str	r3, [sp, #40]	; 0x28
  40a342:	f8dd b010 	ldr.w	fp, [sp, #16]
  40a346:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40a348:	465d      	mov	r5, fp
  40a34a:	e002      	b.n	40a352 <_dtoa_r+0x692>
  40a34c:	f001 fce8 	bl	40bd20 <__multadd>
  40a350:	4681      	mov	r9, r0
  40a352:	4641      	mov	r1, r8
  40a354:	4648      	mov	r0, r9
  40a356:	f7ff fc1f 	bl	409b98 <quorem>
  40a35a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40a35e:	f805 ab01 	strb.w	sl, [r5], #1
  40a362:	eba5 030b 	sub.w	r3, r5, fp
  40a366:	42bb      	cmp	r3, r7
  40a368:	f04f 020a 	mov.w	r2, #10
  40a36c:	f04f 0300 	mov.w	r3, #0
  40a370:	4649      	mov	r1, r9
  40a372:	4620      	mov	r0, r4
  40a374:	dbea      	blt.n	40a34c <_dtoa_r+0x68c>
  40a376:	9b04      	ldr	r3, [sp, #16]
  40a378:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40a37a:	2a01      	cmp	r2, #1
  40a37c:	bfac      	ite	ge
  40a37e:	189b      	addge	r3, r3, r2
  40a380:	3301      	addlt	r3, #1
  40a382:	461d      	mov	r5, r3
  40a384:	f04f 0b00 	mov.w	fp, #0
  40a388:	4649      	mov	r1, r9
  40a38a:	2201      	movs	r2, #1
  40a38c:	4620      	mov	r0, r4
  40a38e:	f001 fe43 	bl	40c018 <__lshift>
  40a392:	4641      	mov	r1, r8
  40a394:	4681      	mov	r9, r0
  40a396:	f001 fe91 	bl	40c0bc <__mcmp>
  40a39a:	2800      	cmp	r0, #0
  40a39c:	f340 823d 	ble.w	40a81a <_dtoa_r+0xb5a>
  40a3a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40a3a4:	9904      	ldr	r1, [sp, #16]
  40a3a6:	1e6b      	subs	r3, r5, #1
  40a3a8:	e004      	b.n	40a3b4 <_dtoa_r+0x6f4>
  40a3aa:	428b      	cmp	r3, r1
  40a3ac:	f000 81ae 	beq.w	40a70c <_dtoa_r+0xa4c>
  40a3b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40a3b4:	2a39      	cmp	r2, #57	; 0x39
  40a3b6:	f103 0501 	add.w	r5, r3, #1
  40a3ba:	d0f6      	beq.n	40a3aa <_dtoa_r+0x6ea>
  40a3bc:	3201      	adds	r2, #1
  40a3be:	701a      	strb	r2, [r3, #0]
  40a3c0:	4641      	mov	r1, r8
  40a3c2:	4620      	mov	r0, r4
  40a3c4:	f001 fca2 	bl	40bd0c <_Bfree>
  40a3c8:	2e00      	cmp	r6, #0
  40a3ca:	f43f ae3d 	beq.w	40a048 <_dtoa_r+0x388>
  40a3ce:	f1bb 0f00 	cmp.w	fp, #0
  40a3d2:	d005      	beq.n	40a3e0 <_dtoa_r+0x720>
  40a3d4:	45b3      	cmp	fp, r6
  40a3d6:	d003      	beq.n	40a3e0 <_dtoa_r+0x720>
  40a3d8:	4659      	mov	r1, fp
  40a3da:	4620      	mov	r0, r4
  40a3dc:	f001 fc96 	bl	40bd0c <_Bfree>
  40a3e0:	4631      	mov	r1, r6
  40a3e2:	4620      	mov	r0, r4
  40a3e4:	f001 fc92 	bl	40bd0c <_Bfree>
  40a3e8:	e62e      	b.n	40a048 <_dtoa_r+0x388>
  40a3ea:	2300      	movs	r3, #0
  40a3ec:	930b      	str	r3, [sp, #44]	; 0x2c
  40a3ee:	9b02      	ldr	r3, [sp, #8]
  40a3f0:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40a3f2:	4413      	add	r3, r2
  40a3f4:	930f      	str	r3, [sp, #60]	; 0x3c
  40a3f6:	3301      	adds	r3, #1
  40a3f8:	2b01      	cmp	r3, #1
  40a3fa:	461f      	mov	r7, r3
  40a3fc:	461e      	mov	r6, r3
  40a3fe:	930a      	str	r3, [sp, #40]	; 0x28
  40a400:	bfb8      	it	lt
  40a402:	2701      	movlt	r7, #1
  40a404:	2100      	movs	r1, #0
  40a406:	2f17      	cmp	r7, #23
  40a408:	6461      	str	r1, [r4, #68]	; 0x44
  40a40a:	d90a      	bls.n	40a422 <_dtoa_r+0x762>
  40a40c:	2201      	movs	r2, #1
  40a40e:	2304      	movs	r3, #4
  40a410:	005b      	lsls	r3, r3, #1
  40a412:	f103 0014 	add.w	r0, r3, #20
  40a416:	4287      	cmp	r7, r0
  40a418:	4611      	mov	r1, r2
  40a41a:	f102 0201 	add.w	r2, r2, #1
  40a41e:	d2f7      	bcs.n	40a410 <_dtoa_r+0x750>
  40a420:	6461      	str	r1, [r4, #68]	; 0x44
  40a422:	4620      	mov	r0, r4
  40a424:	f001 fc4c 	bl	40bcc0 <_Balloc>
  40a428:	2e0e      	cmp	r6, #14
  40a42a:	9004      	str	r0, [sp, #16]
  40a42c:	6420      	str	r0, [r4, #64]	; 0x40
  40a42e:	f63f ad41 	bhi.w	409eb4 <_dtoa_r+0x1f4>
  40a432:	2d00      	cmp	r5, #0
  40a434:	f43f ad3e 	beq.w	409eb4 <_dtoa_r+0x1f4>
  40a438:	9902      	ldr	r1, [sp, #8]
  40a43a:	2900      	cmp	r1, #0
  40a43c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  40a440:	f340 8202 	ble.w	40a848 <_dtoa_r+0xb88>
  40a444:	4bb8      	ldr	r3, [pc, #736]	; (40a728 <_dtoa_r+0xa68>)
  40a446:	f001 020f 	and.w	r2, r1, #15
  40a44a:	110d      	asrs	r5, r1, #4
  40a44c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40a450:	06e9      	lsls	r1, r5, #27
  40a452:	e9d3 6700 	ldrd	r6, r7, [r3]
  40a456:	f140 81ae 	bpl.w	40a7b6 <_dtoa_r+0xaf6>
  40a45a:	4bb4      	ldr	r3, [pc, #720]	; (40a72c <_dtoa_r+0xa6c>)
  40a45c:	4650      	mov	r0, sl
  40a45e:	4659      	mov	r1, fp
  40a460:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40a464:	f002 fe80 	bl	40d168 <__aeabi_ddiv>
  40a468:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40a46c:	f005 050f 	and.w	r5, r5, #15
  40a470:	f04f 0a03 	mov.w	sl, #3
  40a474:	b18d      	cbz	r5, 40a49a <_dtoa_r+0x7da>
  40a476:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 40a72c <_dtoa_r+0xa6c>
  40a47a:	07ea      	lsls	r2, r5, #31
  40a47c:	d509      	bpl.n	40a492 <_dtoa_r+0x7d2>
  40a47e:	4630      	mov	r0, r6
  40a480:	4639      	mov	r1, r7
  40a482:	e9d8 2300 	ldrd	r2, r3, [r8]
  40a486:	f002 fd45 	bl	40cf14 <__aeabi_dmul>
  40a48a:	f10a 0a01 	add.w	sl, sl, #1
  40a48e:	4606      	mov	r6, r0
  40a490:	460f      	mov	r7, r1
  40a492:	106d      	asrs	r5, r5, #1
  40a494:	f108 0808 	add.w	r8, r8, #8
  40a498:	d1ef      	bne.n	40a47a <_dtoa_r+0x7ba>
  40a49a:	463b      	mov	r3, r7
  40a49c:	4632      	mov	r2, r6
  40a49e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40a4a2:	f002 fe61 	bl	40d168 <__aeabi_ddiv>
  40a4a6:	4607      	mov	r7, r0
  40a4a8:	4688      	mov	r8, r1
  40a4aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40a4ac:	b143      	cbz	r3, 40a4c0 <_dtoa_r+0x800>
  40a4ae:	2200      	movs	r2, #0
  40a4b0:	4b9f      	ldr	r3, [pc, #636]	; (40a730 <_dtoa_r+0xa70>)
  40a4b2:	4638      	mov	r0, r7
  40a4b4:	4641      	mov	r1, r8
  40a4b6:	f002 ff9f 	bl	40d3f8 <__aeabi_dcmplt>
  40a4ba:	2800      	cmp	r0, #0
  40a4bc:	f040 8286 	bne.w	40a9cc <_dtoa_r+0xd0c>
  40a4c0:	4650      	mov	r0, sl
  40a4c2:	f002 fcc1 	bl	40ce48 <__aeabi_i2d>
  40a4c6:	463a      	mov	r2, r7
  40a4c8:	4643      	mov	r3, r8
  40a4ca:	f002 fd23 	bl	40cf14 <__aeabi_dmul>
  40a4ce:	4b99      	ldr	r3, [pc, #612]	; (40a734 <_dtoa_r+0xa74>)
  40a4d0:	2200      	movs	r2, #0
  40a4d2:	f002 fb6d 	bl	40cbb0 <__adddf3>
  40a4d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a4d8:	4605      	mov	r5, r0
  40a4da:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40a4de:	2b00      	cmp	r3, #0
  40a4e0:	f000 813e 	beq.w	40a760 <_dtoa_r+0xaa0>
  40a4e4:	9b02      	ldr	r3, [sp, #8]
  40a4e6:	9315      	str	r3, [sp, #84]	; 0x54
  40a4e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a4ea:	9312      	str	r3, [sp, #72]	; 0x48
  40a4ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40a4ee:	2b00      	cmp	r3, #0
  40a4f0:	f000 81fa 	beq.w	40a8e8 <_dtoa_r+0xc28>
  40a4f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40a4f6:	4b8c      	ldr	r3, [pc, #560]	; (40a728 <_dtoa_r+0xa68>)
  40a4f8:	498f      	ldr	r1, [pc, #572]	; (40a738 <_dtoa_r+0xa78>)
  40a4fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40a4fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40a502:	2000      	movs	r0, #0
  40a504:	f002 fe30 	bl	40d168 <__aeabi_ddiv>
  40a508:	462a      	mov	r2, r5
  40a50a:	4633      	mov	r3, r6
  40a50c:	f002 fb4e 	bl	40cbac <__aeabi_dsub>
  40a510:	4682      	mov	sl, r0
  40a512:	468b      	mov	fp, r1
  40a514:	4638      	mov	r0, r7
  40a516:	4641      	mov	r1, r8
  40a518:	f002 ffac 	bl	40d474 <__aeabi_d2iz>
  40a51c:	4605      	mov	r5, r0
  40a51e:	f002 fc93 	bl	40ce48 <__aeabi_i2d>
  40a522:	4602      	mov	r2, r0
  40a524:	460b      	mov	r3, r1
  40a526:	4638      	mov	r0, r7
  40a528:	4641      	mov	r1, r8
  40a52a:	f002 fb3f 	bl	40cbac <__aeabi_dsub>
  40a52e:	3530      	adds	r5, #48	; 0x30
  40a530:	fa5f f885 	uxtb.w	r8, r5
  40a534:	9d04      	ldr	r5, [sp, #16]
  40a536:	4606      	mov	r6, r0
  40a538:	460f      	mov	r7, r1
  40a53a:	f885 8000 	strb.w	r8, [r5]
  40a53e:	4602      	mov	r2, r0
  40a540:	460b      	mov	r3, r1
  40a542:	4650      	mov	r0, sl
  40a544:	4659      	mov	r1, fp
  40a546:	3501      	adds	r5, #1
  40a548:	f002 ff74 	bl	40d434 <__aeabi_dcmpgt>
  40a54c:	2800      	cmp	r0, #0
  40a54e:	d154      	bne.n	40a5fa <_dtoa_r+0x93a>
  40a550:	4632      	mov	r2, r6
  40a552:	463b      	mov	r3, r7
  40a554:	2000      	movs	r0, #0
  40a556:	4976      	ldr	r1, [pc, #472]	; (40a730 <_dtoa_r+0xa70>)
  40a558:	f002 fb28 	bl	40cbac <__aeabi_dsub>
  40a55c:	4602      	mov	r2, r0
  40a55e:	460b      	mov	r3, r1
  40a560:	4650      	mov	r0, sl
  40a562:	4659      	mov	r1, fp
  40a564:	f002 ff66 	bl	40d434 <__aeabi_dcmpgt>
  40a568:	2800      	cmp	r0, #0
  40a56a:	f040 8270 	bne.w	40aa4e <_dtoa_r+0xd8e>
  40a56e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40a570:	2a01      	cmp	r2, #1
  40a572:	f000 8111 	beq.w	40a798 <_dtoa_r+0xad8>
  40a576:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40a578:	9a04      	ldr	r2, [sp, #16]
  40a57a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40a57e:	4413      	add	r3, r2
  40a580:	4699      	mov	r9, r3
  40a582:	e00d      	b.n	40a5a0 <_dtoa_r+0x8e0>
  40a584:	2000      	movs	r0, #0
  40a586:	496a      	ldr	r1, [pc, #424]	; (40a730 <_dtoa_r+0xa70>)
  40a588:	f002 fb10 	bl	40cbac <__aeabi_dsub>
  40a58c:	4652      	mov	r2, sl
  40a58e:	465b      	mov	r3, fp
  40a590:	f002 ff32 	bl	40d3f8 <__aeabi_dcmplt>
  40a594:	2800      	cmp	r0, #0
  40a596:	f040 8258 	bne.w	40aa4a <_dtoa_r+0xd8a>
  40a59a:	454d      	cmp	r5, r9
  40a59c:	f000 80fa 	beq.w	40a794 <_dtoa_r+0xad4>
  40a5a0:	4650      	mov	r0, sl
  40a5a2:	4659      	mov	r1, fp
  40a5a4:	2200      	movs	r2, #0
  40a5a6:	4b65      	ldr	r3, [pc, #404]	; (40a73c <_dtoa_r+0xa7c>)
  40a5a8:	f002 fcb4 	bl	40cf14 <__aeabi_dmul>
  40a5ac:	2200      	movs	r2, #0
  40a5ae:	4b63      	ldr	r3, [pc, #396]	; (40a73c <_dtoa_r+0xa7c>)
  40a5b0:	4682      	mov	sl, r0
  40a5b2:	468b      	mov	fp, r1
  40a5b4:	4630      	mov	r0, r6
  40a5b6:	4639      	mov	r1, r7
  40a5b8:	f002 fcac 	bl	40cf14 <__aeabi_dmul>
  40a5bc:	460f      	mov	r7, r1
  40a5be:	4606      	mov	r6, r0
  40a5c0:	f002 ff58 	bl	40d474 <__aeabi_d2iz>
  40a5c4:	4680      	mov	r8, r0
  40a5c6:	f002 fc3f 	bl	40ce48 <__aeabi_i2d>
  40a5ca:	4602      	mov	r2, r0
  40a5cc:	460b      	mov	r3, r1
  40a5ce:	4630      	mov	r0, r6
  40a5d0:	4639      	mov	r1, r7
  40a5d2:	f002 faeb 	bl	40cbac <__aeabi_dsub>
  40a5d6:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40a5da:	fa5f f888 	uxtb.w	r8, r8
  40a5de:	4652      	mov	r2, sl
  40a5e0:	465b      	mov	r3, fp
  40a5e2:	f805 8b01 	strb.w	r8, [r5], #1
  40a5e6:	4606      	mov	r6, r0
  40a5e8:	460f      	mov	r7, r1
  40a5ea:	f002 ff05 	bl	40d3f8 <__aeabi_dcmplt>
  40a5ee:	4632      	mov	r2, r6
  40a5f0:	463b      	mov	r3, r7
  40a5f2:	2800      	cmp	r0, #0
  40a5f4:	d0c6      	beq.n	40a584 <_dtoa_r+0x8c4>
  40a5f6:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40a5fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40a5fc:	9302      	str	r3, [sp, #8]
  40a5fe:	e523      	b.n	40a048 <_dtoa_r+0x388>
  40a600:	2300      	movs	r3, #0
  40a602:	930b      	str	r3, [sp, #44]	; 0x2c
  40a604:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40a606:	2b00      	cmp	r3, #0
  40a608:	f340 80dc 	ble.w	40a7c4 <_dtoa_r+0xb04>
  40a60c:	461f      	mov	r7, r3
  40a60e:	461e      	mov	r6, r3
  40a610:	930f      	str	r3, [sp, #60]	; 0x3c
  40a612:	930a      	str	r3, [sp, #40]	; 0x28
  40a614:	e6f6      	b.n	40a404 <_dtoa_r+0x744>
  40a616:	2301      	movs	r3, #1
  40a618:	930b      	str	r3, [sp, #44]	; 0x2c
  40a61a:	e7f3      	b.n	40a604 <_dtoa_r+0x944>
  40a61c:	f1ba 0f00 	cmp.w	sl, #0
  40a620:	f47f ada8 	bne.w	40a174 <_dtoa_r+0x4b4>
  40a624:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40a628:	2b00      	cmp	r3, #0
  40a62a:	f47f adba 	bne.w	40a1a2 <_dtoa_r+0x4e2>
  40a62e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40a632:	0d3f      	lsrs	r7, r7, #20
  40a634:	053f      	lsls	r7, r7, #20
  40a636:	2f00      	cmp	r7, #0
  40a638:	f000 820d 	beq.w	40aa56 <_dtoa_r+0xd96>
  40a63c:	9b08      	ldr	r3, [sp, #32]
  40a63e:	3301      	adds	r3, #1
  40a640:	9308      	str	r3, [sp, #32]
  40a642:	9b06      	ldr	r3, [sp, #24]
  40a644:	3301      	adds	r3, #1
  40a646:	9306      	str	r3, [sp, #24]
  40a648:	2301      	movs	r3, #1
  40a64a:	930c      	str	r3, [sp, #48]	; 0x30
  40a64c:	e5ab      	b.n	40a1a6 <_dtoa_r+0x4e6>
  40a64e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a650:	2b00      	cmp	r3, #0
  40a652:	f73f ac42 	bgt.w	409eda <_dtoa_r+0x21a>
  40a656:	f040 8221 	bne.w	40aa9c <_dtoa_r+0xddc>
  40a65a:	2200      	movs	r2, #0
  40a65c:	4b38      	ldr	r3, [pc, #224]	; (40a740 <_dtoa_r+0xa80>)
  40a65e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40a662:	f002 fc57 	bl	40cf14 <__aeabi_dmul>
  40a666:	4652      	mov	r2, sl
  40a668:	465b      	mov	r3, fp
  40a66a:	f002 fed9 	bl	40d420 <__aeabi_dcmpge>
  40a66e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  40a672:	4646      	mov	r6, r8
  40a674:	2800      	cmp	r0, #0
  40a676:	d041      	beq.n	40a6fc <_dtoa_r+0xa3c>
  40a678:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40a67a:	9d04      	ldr	r5, [sp, #16]
  40a67c:	43db      	mvns	r3, r3
  40a67e:	9302      	str	r3, [sp, #8]
  40a680:	4641      	mov	r1, r8
  40a682:	4620      	mov	r0, r4
  40a684:	f001 fb42 	bl	40bd0c <_Bfree>
  40a688:	2e00      	cmp	r6, #0
  40a68a:	f43f acdd 	beq.w	40a048 <_dtoa_r+0x388>
  40a68e:	e6a7      	b.n	40a3e0 <_dtoa_r+0x720>
  40a690:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40a692:	4649      	mov	r1, r9
  40a694:	4620      	mov	r0, r4
  40a696:	f001 fc6f 	bl	40bf78 <__pow5mult>
  40a69a:	4681      	mov	r9, r0
  40a69c:	e558      	b.n	40a150 <_dtoa_r+0x490>
  40a69e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40a6a0:	2a00      	cmp	r2, #0
  40a6a2:	f000 8187 	beq.w	40a9b4 <_dtoa_r+0xcf4>
  40a6a6:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40a6aa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40a6ac:	9d08      	ldr	r5, [sp, #32]
  40a6ae:	e4f2      	b.n	40a096 <_dtoa_r+0x3d6>
  40a6b0:	f1ba 0f00 	cmp.w	sl, #0
  40a6b4:	f47f ad75 	bne.w	40a1a2 <_dtoa_r+0x4e2>
  40a6b8:	e7b4      	b.n	40a624 <_dtoa_r+0x964>
  40a6ba:	f001 fb31 	bl	40bd20 <__multadd>
  40a6be:	4647      	mov	r7, r8
  40a6c0:	4606      	mov	r6, r0
  40a6c2:	4683      	mov	fp, r0
  40a6c4:	e5be      	b.n	40a244 <_dtoa_r+0x584>
  40a6c6:	4601      	mov	r1, r0
  40a6c8:	4620      	mov	r0, r4
  40a6ca:	9306      	str	r3, [sp, #24]
  40a6cc:	f001 fb1e 	bl	40bd0c <_Bfree>
  40a6d0:	2201      	movs	r2, #1
  40a6d2:	9b06      	ldr	r3, [sp, #24]
  40a6d4:	e5e0      	b.n	40a298 <_dtoa_r+0x5d8>
  40a6d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a6d8:	2b02      	cmp	r3, #2
  40a6da:	f77f ad96 	ble.w	40a20a <_dtoa_r+0x54a>
  40a6de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a6e0:	2b00      	cmp	r3, #0
  40a6e2:	d1c9      	bne.n	40a678 <_dtoa_r+0x9b8>
  40a6e4:	4641      	mov	r1, r8
  40a6e6:	2205      	movs	r2, #5
  40a6e8:	4620      	mov	r0, r4
  40a6ea:	f001 fb19 	bl	40bd20 <__multadd>
  40a6ee:	4601      	mov	r1, r0
  40a6f0:	4680      	mov	r8, r0
  40a6f2:	4648      	mov	r0, r9
  40a6f4:	f001 fce2 	bl	40c0bc <__mcmp>
  40a6f8:	2800      	cmp	r0, #0
  40a6fa:	ddbd      	ble.n	40a678 <_dtoa_r+0x9b8>
  40a6fc:	9a02      	ldr	r2, [sp, #8]
  40a6fe:	9904      	ldr	r1, [sp, #16]
  40a700:	2331      	movs	r3, #49	; 0x31
  40a702:	3201      	adds	r2, #1
  40a704:	9202      	str	r2, [sp, #8]
  40a706:	700b      	strb	r3, [r1, #0]
  40a708:	1c4d      	adds	r5, r1, #1
  40a70a:	e7b9      	b.n	40a680 <_dtoa_r+0x9c0>
  40a70c:	9a02      	ldr	r2, [sp, #8]
  40a70e:	3201      	adds	r2, #1
  40a710:	9202      	str	r2, [sp, #8]
  40a712:	9a04      	ldr	r2, [sp, #16]
  40a714:	2331      	movs	r3, #49	; 0x31
  40a716:	7013      	strb	r3, [r2, #0]
  40a718:	e652      	b.n	40a3c0 <_dtoa_r+0x700>
  40a71a:	2301      	movs	r3, #1
  40a71c:	930b      	str	r3, [sp, #44]	; 0x2c
  40a71e:	e666      	b.n	40a3ee <_dtoa_r+0x72e>
  40a720:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40a724:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40a726:	e48f      	b.n	40a048 <_dtoa_r+0x388>
  40a728:	0040dbd8 	.word	0x0040dbd8
  40a72c:	0040dbb0 	.word	0x0040dbb0
  40a730:	3ff00000 	.word	0x3ff00000
  40a734:	401c0000 	.word	0x401c0000
  40a738:	3fe00000 	.word	0x3fe00000
  40a73c:	40240000 	.word	0x40240000
  40a740:	40140000 	.word	0x40140000
  40a744:	4650      	mov	r0, sl
  40a746:	f002 fb7f 	bl	40ce48 <__aeabi_i2d>
  40a74a:	463a      	mov	r2, r7
  40a74c:	4643      	mov	r3, r8
  40a74e:	f002 fbe1 	bl	40cf14 <__aeabi_dmul>
  40a752:	2200      	movs	r2, #0
  40a754:	4bc1      	ldr	r3, [pc, #772]	; (40aa5c <_dtoa_r+0xd9c>)
  40a756:	f002 fa2b 	bl	40cbb0 <__adddf3>
  40a75a:	4605      	mov	r5, r0
  40a75c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40a760:	4641      	mov	r1, r8
  40a762:	2200      	movs	r2, #0
  40a764:	4bbe      	ldr	r3, [pc, #760]	; (40aa60 <_dtoa_r+0xda0>)
  40a766:	4638      	mov	r0, r7
  40a768:	f002 fa20 	bl	40cbac <__aeabi_dsub>
  40a76c:	462a      	mov	r2, r5
  40a76e:	4633      	mov	r3, r6
  40a770:	4682      	mov	sl, r0
  40a772:	468b      	mov	fp, r1
  40a774:	f002 fe5e 	bl	40d434 <__aeabi_dcmpgt>
  40a778:	4680      	mov	r8, r0
  40a77a:	2800      	cmp	r0, #0
  40a77c:	f040 8110 	bne.w	40a9a0 <_dtoa_r+0xce0>
  40a780:	462a      	mov	r2, r5
  40a782:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  40a786:	4650      	mov	r0, sl
  40a788:	4659      	mov	r1, fp
  40a78a:	f002 fe35 	bl	40d3f8 <__aeabi_dcmplt>
  40a78e:	b118      	cbz	r0, 40a798 <_dtoa_r+0xad8>
  40a790:	4646      	mov	r6, r8
  40a792:	e771      	b.n	40a678 <_dtoa_r+0x9b8>
  40a794:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40a798:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40a79c:	f7ff bb8a 	b.w	409eb4 <_dtoa_r+0x1f4>
  40a7a0:	9804      	ldr	r0, [sp, #16]
  40a7a2:	f7ff babb 	b.w	409d1c <_dtoa_r+0x5c>
  40a7a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40a7a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40a7aa:	970c      	str	r7, [sp, #48]	; 0x30
  40a7ac:	1afb      	subs	r3, r7, r3
  40a7ae:	441a      	add	r2, r3
  40a7b0:	920d      	str	r2, [sp, #52]	; 0x34
  40a7b2:	2700      	movs	r7, #0
  40a7b4:	e469      	b.n	40a08a <_dtoa_r+0x3ca>
  40a7b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40a7ba:	f04f 0a02 	mov.w	sl, #2
  40a7be:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40a7c2:	e657      	b.n	40a474 <_dtoa_r+0x7b4>
  40a7c4:	2100      	movs	r1, #0
  40a7c6:	2301      	movs	r3, #1
  40a7c8:	6461      	str	r1, [r4, #68]	; 0x44
  40a7ca:	4620      	mov	r0, r4
  40a7cc:	9325      	str	r3, [sp, #148]	; 0x94
  40a7ce:	f001 fa77 	bl	40bcc0 <_Balloc>
  40a7d2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40a7d4:	9004      	str	r0, [sp, #16]
  40a7d6:	6420      	str	r0, [r4, #64]	; 0x40
  40a7d8:	930a      	str	r3, [sp, #40]	; 0x28
  40a7da:	930f      	str	r3, [sp, #60]	; 0x3c
  40a7dc:	e629      	b.n	40a432 <_dtoa_r+0x772>
  40a7de:	2a00      	cmp	r2, #0
  40a7e0:	46d0      	mov	r8, sl
  40a7e2:	f8cd b018 	str.w	fp, [sp, #24]
  40a7e6:	469a      	mov	sl, r3
  40a7e8:	dd11      	ble.n	40a80e <_dtoa_r+0xb4e>
  40a7ea:	4649      	mov	r1, r9
  40a7ec:	2201      	movs	r2, #1
  40a7ee:	4620      	mov	r0, r4
  40a7f0:	f001 fc12 	bl	40c018 <__lshift>
  40a7f4:	4641      	mov	r1, r8
  40a7f6:	4681      	mov	r9, r0
  40a7f8:	f001 fc60 	bl	40c0bc <__mcmp>
  40a7fc:	2800      	cmp	r0, #0
  40a7fe:	f340 8146 	ble.w	40aa8e <_dtoa_r+0xdce>
  40a802:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40a806:	f000 8106 	beq.w	40aa16 <_dtoa_r+0xd56>
  40a80a:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  40a80e:	46b3      	mov	fp, r6
  40a810:	f887 a000 	strb.w	sl, [r7]
  40a814:	1c7d      	adds	r5, r7, #1
  40a816:	9e06      	ldr	r6, [sp, #24]
  40a818:	e5d2      	b.n	40a3c0 <_dtoa_r+0x700>
  40a81a:	d104      	bne.n	40a826 <_dtoa_r+0xb66>
  40a81c:	f01a 0f01 	tst.w	sl, #1
  40a820:	d001      	beq.n	40a826 <_dtoa_r+0xb66>
  40a822:	e5bd      	b.n	40a3a0 <_dtoa_r+0x6e0>
  40a824:	4615      	mov	r5, r2
  40a826:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40a82a:	2b30      	cmp	r3, #48	; 0x30
  40a82c:	f105 32ff 	add.w	r2, r5, #4294967295
  40a830:	d0f8      	beq.n	40a824 <_dtoa_r+0xb64>
  40a832:	e5c5      	b.n	40a3c0 <_dtoa_r+0x700>
  40a834:	9904      	ldr	r1, [sp, #16]
  40a836:	2230      	movs	r2, #48	; 0x30
  40a838:	700a      	strb	r2, [r1, #0]
  40a83a:	9a02      	ldr	r2, [sp, #8]
  40a83c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40a840:	3201      	adds	r2, #1
  40a842:	9202      	str	r2, [sp, #8]
  40a844:	f7ff bbfc 	b.w	40a040 <_dtoa_r+0x380>
  40a848:	f000 80bb 	beq.w	40a9c2 <_dtoa_r+0xd02>
  40a84c:	9b02      	ldr	r3, [sp, #8]
  40a84e:	425d      	negs	r5, r3
  40a850:	4b84      	ldr	r3, [pc, #528]	; (40aa64 <_dtoa_r+0xda4>)
  40a852:	f005 020f 	and.w	r2, r5, #15
  40a856:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40a85a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a85e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40a862:	f002 fb57 	bl	40cf14 <__aeabi_dmul>
  40a866:	112d      	asrs	r5, r5, #4
  40a868:	4607      	mov	r7, r0
  40a86a:	4688      	mov	r8, r1
  40a86c:	f000 812c 	beq.w	40aac8 <_dtoa_r+0xe08>
  40a870:	4e7d      	ldr	r6, [pc, #500]	; (40aa68 <_dtoa_r+0xda8>)
  40a872:	f04f 0a02 	mov.w	sl, #2
  40a876:	07eb      	lsls	r3, r5, #31
  40a878:	d509      	bpl.n	40a88e <_dtoa_r+0xbce>
  40a87a:	4638      	mov	r0, r7
  40a87c:	4641      	mov	r1, r8
  40a87e:	e9d6 2300 	ldrd	r2, r3, [r6]
  40a882:	f002 fb47 	bl	40cf14 <__aeabi_dmul>
  40a886:	f10a 0a01 	add.w	sl, sl, #1
  40a88a:	4607      	mov	r7, r0
  40a88c:	4688      	mov	r8, r1
  40a88e:	106d      	asrs	r5, r5, #1
  40a890:	f106 0608 	add.w	r6, r6, #8
  40a894:	d1ef      	bne.n	40a876 <_dtoa_r+0xbb6>
  40a896:	e608      	b.n	40a4aa <_dtoa_r+0x7ea>
  40a898:	6871      	ldr	r1, [r6, #4]
  40a89a:	4620      	mov	r0, r4
  40a89c:	f001 fa10 	bl	40bcc0 <_Balloc>
  40a8a0:	6933      	ldr	r3, [r6, #16]
  40a8a2:	3302      	adds	r3, #2
  40a8a4:	009a      	lsls	r2, r3, #2
  40a8a6:	4605      	mov	r5, r0
  40a8a8:	f106 010c 	add.w	r1, r6, #12
  40a8ac:	300c      	adds	r0, #12
  40a8ae:	f7fc fcf1 	bl	407294 <memcpy>
  40a8b2:	4629      	mov	r1, r5
  40a8b4:	2201      	movs	r2, #1
  40a8b6:	4620      	mov	r0, r4
  40a8b8:	f001 fbae 	bl	40c018 <__lshift>
  40a8bc:	9006      	str	r0, [sp, #24]
  40a8be:	e4b5      	b.n	40a22c <_dtoa_r+0x56c>
  40a8c0:	2b39      	cmp	r3, #57	; 0x39
  40a8c2:	f8cd b018 	str.w	fp, [sp, #24]
  40a8c6:	46d0      	mov	r8, sl
  40a8c8:	f000 80a5 	beq.w	40aa16 <_dtoa_r+0xd56>
  40a8cc:	f103 0a01 	add.w	sl, r3, #1
  40a8d0:	46b3      	mov	fp, r6
  40a8d2:	f887 a000 	strb.w	sl, [r7]
  40a8d6:	1c7d      	adds	r5, r7, #1
  40a8d8:	9e06      	ldr	r6, [sp, #24]
  40a8da:	e571      	b.n	40a3c0 <_dtoa_r+0x700>
  40a8dc:	465a      	mov	r2, fp
  40a8de:	46d0      	mov	r8, sl
  40a8e0:	46b3      	mov	fp, r6
  40a8e2:	469a      	mov	sl, r3
  40a8e4:	4616      	mov	r6, r2
  40a8e6:	e54f      	b.n	40a388 <_dtoa_r+0x6c8>
  40a8e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40a8ea:	495e      	ldr	r1, [pc, #376]	; (40aa64 <_dtoa_r+0xda4>)
  40a8ec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  40a8f0:	462a      	mov	r2, r5
  40a8f2:	4633      	mov	r3, r6
  40a8f4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  40a8f8:	f002 fb0c 	bl	40cf14 <__aeabi_dmul>
  40a8fc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  40a900:	4638      	mov	r0, r7
  40a902:	4641      	mov	r1, r8
  40a904:	f002 fdb6 	bl	40d474 <__aeabi_d2iz>
  40a908:	4605      	mov	r5, r0
  40a90a:	f002 fa9d 	bl	40ce48 <__aeabi_i2d>
  40a90e:	460b      	mov	r3, r1
  40a910:	4602      	mov	r2, r0
  40a912:	4641      	mov	r1, r8
  40a914:	4638      	mov	r0, r7
  40a916:	f002 f949 	bl	40cbac <__aeabi_dsub>
  40a91a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40a91c:	460f      	mov	r7, r1
  40a91e:	9904      	ldr	r1, [sp, #16]
  40a920:	3530      	adds	r5, #48	; 0x30
  40a922:	2b01      	cmp	r3, #1
  40a924:	700d      	strb	r5, [r1, #0]
  40a926:	4606      	mov	r6, r0
  40a928:	f101 0501 	add.w	r5, r1, #1
  40a92c:	d026      	beq.n	40a97c <_dtoa_r+0xcbc>
  40a92e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40a930:	9a04      	ldr	r2, [sp, #16]
  40a932:	f8df b13c 	ldr.w	fp, [pc, #316]	; 40aa70 <_dtoa_r+0xdb0>
  40a936:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40a93a:	4413      	add	r3, r2
  40a93c:	f04f 0a00 	mov.w	sl, #0
  40a940:	4699      	mov	r9, r3
  40a942:	4652      	mov	r2, sl
  40a944:	465b      	mov	r3, fp
  40a946:	4630      	mov	r0, r6
  40a948:	4639      	mov	r1, r7
  40a94a:	f002 fae3 	bl	40cf14 <__aeabi_dmul>
  40a94e:	460f      	mov	r7, r1
  40a950:	4606      	mov	r6, r0
  40a952:	f002 fd8f 	bl	40d474 <__aeabi_d2iz>
  40a956:	4680      	mov	r8, r0
  40a958:	f002 fa76 	bl	40ce48 <__aeabi_i2d>
  40a95c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40a960:	4602      	mov	r2, r0
  40a962:	460b      	mov	r3, r1
  40a964:	4630      	mov	r0, r6
  40a966:	4639      	mov	r1, r7
  40a968:	f002 f920 	bl	40cbac <__aeabi_dsub>
  40a96c:	f805 8b01 	strb.w	r8, [r5], #1
  40a970:	454d      	cmp	r5, r9
  40a972:	4606      	mov	r6, r0
  40a974:	460f      	mov	r7, r1
  40a976:	d1e4      	bne.n	40a942 <_dtoa_r+0xc82>
  40a978:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40a97c:	4b3b      	ldr	r3, [pc, #236]	; (40aa6c <_dtoa_r+0xdac>)
  40a97e:	2200      	movs	r2, #0
  40a980:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40a984:	f002 f914 	bl	40cbb0 <__adddf3>
  40a988:	4632      	mov	r2, r6
  40a98a:	463b      	mov	r3, r7
  40a98c:	f002 fd34 	bl	40d3f8 <__aeabi_dcmplt>
  40a990:	2800      	cmp	r0, #0
  40a992:	d046      	beq.n	40aa22 <_dtoa_r+0xd62>
  40a994:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40a996:	9302      	str	r3, [sp, #8]
  40a998:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40a99c:	f7ff bb43 	b.w	40a026 <_dtoa_r+0x366>
  40a9a0:	f04f 0800 	mov.w	r8, #0
  40a9a4:	4646      	mov	r6, r8
  40a9a6:	e6a9      	b.n	40a6fc <_dtoa_r+0xa3c>
  40a9a8:	9b08      	ldr	r3, [sp, #32]
  40a9aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40a9ac:	1a9d      	subs	r5, r3, r2
  40a9ae:	2300      	movs	r3, #0
  40a9b0:	f7ff bb71 	b.w	40a096 <_dtoa_r+0x3d6>
  40a9b4:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40a9b6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40a9b8:	9d08      	ldr	r5, [sp, #32]
  40a9ba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40a9be:	f7ff bb6a 	b.w	40a096 <_dtoa_r+0x3d6>
  40a9c2:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  40a9c6:	f04f 0a02 	mov.w	sl, #2
  40a9ca:	e56e      	b.n	40a4aa <_dtoa_r+0x7ea>
  40a9cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a9ce:	2b00      	cmp	r3, #0
  40a9d0:	f43f aeb8 	beq.w	40a744 <_dtoa_r+0xa84>
  40a9d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40a9d6:	2b00      	cmp	r3, #0
  40a9d8:	f77f aede 	ble.w	40a798 <_dtoa_r+0xad8>
  40a9dc:	2200      	movs	r2, #0
  40a9de:	4b24      	ldr	r3, [pc, #144]	; (40aa70 <_dtoa_r+0xdb0>)
  40a9e0:	4638      	mov	r0, r7
  40a9e2:	4641      	mov	r1, r8
  40a9e4:	f002 fa96 	bl	40cf14 <__aeabi_dmul>
  40a9e8:	4607      	mov	r7, r0
  40a9ea:	4688      	mov	r8, r1
  40a9ec:	f10a 0001 	add.w	r0, sl, #1
  40a9f0:	f002 fa2a 	bl	40ce48 <__aeabi_i2d>
  40a9f4:	463a      	mov	r2, r7
  40a9f6:	4643      	mov	r3, r8
  40a9f8:	f002 fa8c 	bl	40cf14 <__aeabi_dmul>
  40a9fc:	2200      	movs	r2, #0
  40a9fe:	4b17      	ldr	r3, [pc, #92]	; (40aa5c <_dtoa_r+0xd9c>)
  40aa00:	f002 f8d6 	bl	40cbb0 <__adddf3>
  40aa04:	9a02      	ldr	r2, [sp, #8]
  40aa06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40aa08:	9312      	str	r3, [sp, #72]	; 0x48
  40aa0a:	3a01      	subs	r2, #1
  40aa0c:	4605      	mov	r5, r0
  40aa0e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40aa12:	9215      	str	r2, [sp, #84]	; 0x54
  40aa14:	e56a      	b.n	40a4ec <_dtoa_r+0x82c>
  40aa16:	2239      	movs	r2, #57	; 0x39
  40aa18:	46b3      	mov	fp, r6
  40aa1a:	703a      	strb	r2, [r7, #0]
  40aa1c:	9e06      	ldr	r6, [sp, #24]
  40aa1e:	1c7d      	adds	r5, r7, #1
  40aa20:	e4c0      	b.n	40a3a4 <_dtoa_r+0x6e4>
  40aa22:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40aa26:	2000      	movs	r0, #0
  40aa28:	4910      	ldr	r1, [pc, #64]	; (40aa6c <_dtoa_r+0xdac>)
  40aa2a:	f002 f8bf 	bl	40cbac <__aeabi_dsub>
  40aa2e:	4632      	mov	r2, r6
  40aa30:	463b      	mov	r3, r7
  40aa32:	f002 fcff 	bl	40d434 <__aeabi_dcmpgt>
  40aa36:	b908      	cbnz	r0, 40aa3c <_dtoa_r+0xd7c>
  40aa38:	e6ae      	b.n	40a798 <_dtoa_r+0xad8>
  40aa3a:	4615      	mov	r5, r2
  40aa3c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40aa40:	2b30      	cmp	r3, #48	; 0x30
  40aa42:	f105 32ff 	add.w	r2, r5, #4294967295
  40aa46:	d0f8      	beq.n	40aa3a <_dtoa_r+0xd7a>
  40aa48:	e5d7      	b.n	40a5fa <_dtoa_r+0x93a>
  40aa4a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40aa4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40aa50:	9302      	str	r3, [sp, #8]
  40aa52:	f7ff bae8 	b.w	40a026 <_dtoa_r+0x366>
  40aa56:	970c      	str	r7, [sp, #48]	; 0x30
  40aa58:	f7ff bba5 	b.w	40a1a6 <_dtoa_r+0x4e6>
  40aa5c:	401c0000 	.word	0x401c0000
  40aa60:	40140000 	.word	0x40140000
  40aa64:	0040dbd8 	.word	0x0040dbd8
  40aa68:	0040dbb0 	.word	0x0040dbb0
  40aa6c:	3fe00000 	.word	0x3fe00000
  40aa70:	40240000 	.word	0x40240000
  40aa74:	2b39      	cmp	r3, #57	; 0x39
  40aa76:	f8cd b018 	str.w	fp, [sp, #24]
  40aa7a:	46d0      	mov	r8, sl
  40aa7c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40aa80:	469a      	mov	sl, r3
  40aa82:	d0c8      	beq.n	40aa16 <_dtoa_r+0xd56>
  40aa84:	f1bb 0f00 	cmp.w	fp, #0
  40aa88:	f73f aebf 	bgt.w	40a80a <_dtoa_r+0xb4a>
  40aa8c:	e6bf      	b.n	40a80e <_dtoa_r+0xb4e>
  40aa8e:	f47f aebe 	bne.w	40a80e <_dtoa_r+0xb4e>
  40aa92:	f01a 0f01 	tst.w	sl, #1
  40aa96:	f43f aeba 	beq.w	40a80e <_dtoa_r+0xb4e>
  40aa9a:	e6b2      	b.n	40a802 <_dtoa_r+0xb42>
  40aa9c:	f04f 0800 	mov.w	r8, #0
  40aaa0:	4646      	mov	r6, r8
  40aaa2:	e5e9      	b.n	40a678 <_dtoa_r+0x9b8>
  40aaa4:	4631      	mov	r1, r6
  40aaa6:	2300      	movs	r3, #0
  40aaa8:	220a      	movs	r2, #10
  40aaaa:	4620      	mov	r0, r4
  40aaac:	f001 f938 	bl	40bd20 <__multadd>
  40aab0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40aab2:	2b00      	cmp	r3, #0
  40aab4:	4606      	mov	r6, r0
  40aab6:	dd0a      	ble.n	40aace <_dtoa_r+0xe0e>
  40aab8:	930a      	str	r3, [sp, #40]	; 0x28
  40aaba:	f7ff bbaa 	b.w	40a212 <_dtoa_r+0x552>
  40aabe:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40aac0:	2b02      	cmp	r3, #2
  40aac2:	dc23      	bgt.n	40ab0c <_dtoa_r+0xe4c>
  40aac4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40aac6:	e43b      	b.n	40a340 <_dtoa_r+0x680>
  40aac8:	f04f 0a02 	mov.w	sl, #2
  40aacc:	e4ed      	b.n	40a4aa <_dtoa_r+0x7ea>
  40aace:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40aad0:	2b02      	cmp	r3, #2
  40aad2:	dc1b      	bgt.n	40ab0c <_dtoa_r+0xe4c>
  40aad4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40aad6:	e7ef      	b.n	40aab8 <_dtoa_r+0xdf8>
  40aad8:	2500      	movs	r5, #0
  40aada:	6465      	str	r5, [r4, #68]	; 0x44
  40aadc:	4629      	mov	r1, r5
  40aade:	4620      	mov	r0, r4
  40aae0:	f001 f8ee 	bl	40bcc0 <_Balloc>
  40aae4:	f04f 33ff 	mov.w	r3, #4294967295
  40aae8:	930a      	str	r3, [sp, #40]	; 0x28
  40aaea:	930f      	str	r3, [sp, #60]	; 0x3c
  40aaec:	2301      	movs	r3, #1
  40aaee:	9004      	str	r0, [sp, #16]
  40aaf0:	9525      	str	r5, [sp, #148]	; 0x94
  40aaf2:	6420      	str	r0, [r4, #64]	; 0x40
  40aaf4:	930b      	str	r3, [sp, #44]	; 0x2c
  40aaf6:	f7ff b9dd 	b.w	409eb4 <_dtoa_r+0x1f4>
  40aafa:	2501      	movs	r5, #1
  40aafc:	f7ff b9a5 	b.w	409e4a <_dtoa_r+0x18a>
  40ab00:	f43f ab69 	beq.w	40a1d6 <_dtoa_r+0x516>
  40ab04:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  40ab08:	f7ff bbf9 	b.w	40a2fe <_dtoa_r+0x63e>
  40ab0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40ab0e:	930a      	str	r3, [sp, #40]	; 0x28
  40ab10:	e5e5      	b.n	40a6de <_dtoa_r+0xa1e>
  40ab12:	bf00      	nop

0040ab14 <__sflush_r>:
  40ab14:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40ab18:	b29a      	uxth	r2, r3
  40ab1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ab1e:	460d      	mov	r5, r1
  40ab20:	0711      	lsls	r1, r2, #28
  40ab22:	4680      	mov	r8, r0
  40ab24:	d43a      	bmi.n	40ab9c <__sflush_r+0x88>
  40ab26:	686a      	ldr	r2, [r5, #4]
  40ab28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40ab2c:	2a00      	cmp	r2, #0
  40ab2e:	81ab      	strh	r3, [r5, #12]
  40ab30:	dd6f      	ble.n	40ac12 <__sflush_r+0xfe>
  40ab32:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40ab34:	2c00      	cmp	r4, #0
  40ab36:	d049      	beq.n	40abcc <__sflush_r+0xb8>
  40ab38:	2200      	movs	r2, #0
  40ab3a:	b29b      	uxth	r3, r3
  40ab3c:	f8d8 6000 	ldr.w	r6, [r8]
  40ab40:	f8c8 2000 	str.w	r2, [r8]
  40ab44:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40ab48:	d067      	beq.n	40ac1a <__sflush_r+0x106>
  40ab4a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40ab4c:	075f      	lsls	r7, r3, #29
  40ab4e:	d505      	bpl.n	40ab5c <__sflush_r+0x48>
  40ab50:	6869      	ldr	r1, [r5, #4]
  40ab52:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40ab54:	1a52      	subs	r2, r2, r1
  40ab56:	b10b      	cbz	r3, 40ab5c <__sflush_r+0x48>
  40ab58:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40ab5a:	1ad2      	subs	r2, r2, r3
  40ab5c:	2300      	movs	r3, #0
  40ab5e:	69e9      	ldr	r1, [r5, #28]
  40ab60:	4640      	mov	r0, r8
  40ab62:	47a0      	blx	r4
  40ab64:	1c44      	adds	r4, r0, #1
  40ab66:	d03c      	beq.n	40abe2 <__sflush_r+0xce>
  40ab68:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40ab6c:	692a      	ldr	r2, [r5, #16]
  40ab6e:	602a      	str	r2, [r5, #0]
  40ab70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40ab74:	2200      	movs	r2, #0
  40ab76:	81ab      	strh	r3, [r5, #12]
  40ab78:	04db      	lsls	r3, r3, #19
  40ab7a:	606a      	str	r2, [r5, #4]
  40ab7c:	d447      	bmi.n	40ac0e <__sflush_r+0xfa>
  40ab7e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40ab80:	f8c8 6000 	str.w	r6, [r8]
  40ab84:	b311      	cbz	r1, 40abcc <__sflush_r+0xb8>
  40ab86:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40ab8a:	4299      	cmp	r1, r3
  40ab8c:	d002      	beq.n	40ab94 <__sflush_r+0x80>
  40ab8e:	4640      	mov	r0, r8
  40ab90:	f000 f9de 	bl	40af50 <_free_r>
  40ab94:	2000      	movs	r0, #0
  40ab96:	6328      	str	r0, [r5, #48]	; 0x30
  40ab98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ab9c:	692e      	ldr	r6, [r5, #16]
  40ab9e:	b1ae      	cbz	r6, 40abcc <__sflush_r+0xb8>
  40aba0:	682c      	ldr	r4, [r5, #0]
  40aba2:	602e      	str	r6, [r5, #0]
  40aba4:	0791      	lsls	r1, r2, #30
  40aba6:	bf0c      	ite	eq
  40aba8:	696b      	ldreq	r3, [r5, #20]
  40abaa:	2300      	movne	r3, #0
  40abac:	1ba4      	subs	r4, r4, r6
  40abae:	60ab      	str	r3, [r5, #8]
  40abb0:	e00a      	b.n	40abc8 <__sflush_r+0xb4>
  40abb2:	4623      	mov	r3, r4
  40abb4:	4632      	mov	r2, r6
  40abb6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40abb8:	69e9      	ldr	r1, [r5, #28]
  40abba:	4640      	mov	r0, r8
  40abbc:	47b8      	blx	r7
  40abbe:	2800      	cmp	r0, #0
  40abc0:	eba4 0400 	sub.w	r4, r4, r0
  40abc4:	4406      	add	r6, r0
  40abc6:	dd04      	ble.n	40abd2 <__sflush_r+0xbe>
  40abc8:	2c00      	cmp	r4, #0
  40abca:	dcf2      	bgt.n	40abb2 <__sflush_r+0x9e>
  40abcc:	2000      	movs	r0, #0
  40abce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40abd2:	89ab      	ldrh	r3, [r5, #12]
  40abd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40abd8:	81ab      	strh	r3, [r5, #12]
  40abda:	f04f 30ff 	mov.w	r0, #4294967295
  40abde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40abe2:	f8d8 4000 	ldr.w	r4, [r8]
  40abe6:	2c1d      	cmp	r4, #29
  40abe8:	d8f3      	bhi.n	40abd2 <__sflush_r+0xbe>
  40abea:	4b19      	ldr	r3, [pc, #100]	; (40ac50 <__sflush_r+0x13c>)
  40abec:	40e3      	lsrs	r3, r4
  40abee:	43db      	mvns	r3, r3
  40abf0:	f013 0301 	ands.w	r3, r3, #1
  40abf4:	d1ed      	bne.n	40abd2 <__sflush_r+0xbe>
  40abf6:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40abfa:	606b      	str	r3, [r5, #4]
  40abfc:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  40ac00:	6929      	ldr	r1, [r5, #16]
  40ac02:	81ab      	strh	r3, [r5, #12]
  40ac04:	04da      	lsls	r2, r3, #19
  40ac06:	6029      	str	r1, [r5, #0]
  40ac08:	d5b9      	bpl.n	40ab7e <__sflush_r+0x6a>
  40ac0a:	2c00      	cmp	r4, #0
  40ac0c:	d1b7      	bne.n	40ab7e <__sflush_r+0x6a>
  40ac0e:	6528      	str	r0, [r5, #80]	; 0x50
  40ac10:	e7b5      	b.n	40ab7e <__sflush_r+0x6a>
  40ac12:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40ac14:	2a00      	cmp	r2, #0
  40ac16:	dc8c      	bgt.n	40ab32 <__sflush_r+0x1e>
  40ac18:	e7d8      	b.n	40abcc <__sflush_r+0xb8>
  40ac1a:	2301      	movs	r3, #1
  40ac1c:	69e9      	ldr	r1, [r5, #28]
  40ac1e:	4640      	mov	r0, r8
  40ac20:	47a0      	blx	r4
  40ac22:	1c43      	adds	r3, r0, #1
  40ac24:	4602      	mov	r2, r0
  40ac26:	d002      	beq.n	40ac2e <__sflush_r+0x11a>
  40ac28:	89ab      	ldrh	r3, [r5, #12]
  40ac2a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40ac2c:	e78e      	b.n	40ab4c <__sflush_r+0x38>
  40ac2e:	f8d8 3000 	ldr.w	r3, [r8]
  40ac32:	2b00      	cmp	r3, #0
  40ac34:	d0f8      	beq.n	40ac28 <__sflush_r+0x114>
  40ac36:	2b1d      	cmp	r3, #29
  40ac38:	d001      	beq.n	40ac3e <__sflush_r+0x12a>
  40ac3a:	2b16      	cmp	r3, #22
  40ac3c:	d102      	bne.n	40ac44 <__sflush_r+0x130>
  40ac3e:	f8c8 6000 	str.w	r6, [r8]
  40ac42:	e7c3      	b.n	40abcc <__sflush_r+0xb8>
  40ac44:	89ab      	ldrh	r3, [r5, #12]
  40ac46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40ac4a:	81ab      	strh	r3, [r5, #12]
  40ac4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ac50:	20400001 	.word	0x20400001

0040ac54 <_fflush_r>:
  40ac54:	b538      	push	{r3, r4, r5, lr}
  40ac56:	460d      	mov	r5, r1
  40ac58:	4604      	mov	r4, r0
  40ac5a:	b108      	cbz	r0, 40ac60 <_fflush_r+0xc>
  40ac5c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40ac5e:	b1bb      	cbz	r3, 40ac90 <_fflush_r+0x3c>
  40ac60:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40ac64:	b188      	cbz	r0, 40ac8a <_fflush_r+0x36>
  40ac66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40ac68:	07db      	lsls	r3, r3, #31
  40ac6a:	d401      	bmi.n	40ac70 <_fflush_r+0x1c>
  40ac6c:	0581      	lsls	r1, r0, #22
  40ac6e:	d517      	bpl.n	40aca0 <_fflush_r+0x4c>
  40ac70:	4620      	mov	r0, r4
  40ac72:	4629      	mov	r1, r5
  40ac74:	f7ff ff4e 	bl	40ab14 <__sflush_r>
  40ac78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40ac7a:	07da      	lsls	r2, r3, #31
  40ac7c:	4604      	mov	r4, r0
  40ac7e:	d402      	bmi.n	40ac86 <_fflush_r+0x32>
  40ac80:	89ab      	ldrh	r3, [r5, #12]
  40ac82:	059b      	lsls	r3, r3, #22
  40ac84:	d507      	bpl.n	40ac96 <_fflush_r+0x42>
  40ac86:	4620      	mov	r0, r4
  40ac88:	bd38      	pop	{r3, r4, r5, pc}
  40ac8a:	4604      	mov	r4, r0
  40ac8c:	4620      	mov	r0, r4
  40ac8e:	bd38      	pop	{r3, r4, r5, pc}
  40ac90:	f000 f838 	bl	40ad04 <__sinit>
  40ac94:	e7e4      	b.n	40ac60 <_fflush_r+0xc>
  40ac96:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40ac98:	f000 fc04 	bl	40b4a4 <__retarget_lock_release_recursive>
  40ac9c:	4620      	mov	r0, r4
  40ac9e:	bd38      	pop	{r3, r4, r5, pc}
  40aca0:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40aca2:	f000 fbfd 	bl	40b4a0 <__retarget_lock_acquire_recursive>
  40aca6:	e7e3      	b.n	40ac70 <_fflush_r+0x1c>

0040aca8 <_cleanup_r>:
  40aca8:	4901      	ldr	r1, [pc, #4]	; (40acb0 <_cleanup_r+0x8>)
  40acaa:	f000 bbaf 	b.w	40b40c <_fwalk_reent>
  40acae:	bf00      	nop
  40acb0:	0040ca3d 	.word	0x0040ca3d

0040acb4 <std.isra.0>:
  40acb4:	b510      	push	{r4, lr}
  40acb6:	2300      	movs	r3, #0
  40acb8:	4604      	mov	r4, r0
  40acba:	8181      	strh	r1, [r0, #12]
  40acbc:	81c2      	strh	r2, [r0, #14]
  40acbe:	6003      	str	r3, [r0, #0]
  40acc0:	6043      	str	r3, [r0, #4]
  40acc2:	6083      	str	r3, [r0, #8]
  40acc4:	6643      	str	r3, [r0, #100]	; 0x64
  40acc6:	6103      	str	r3, [r0, #16]
  40acc8:	6143      	str	r3, [r0, #20]
  40acca:	6183      	str	r3, [r0, #24]
  40accc:	4619      	mov	r1, r3
  40acce:	2208      	movs	r2, #8
  40acd0:	305c      	adds	r0, #92	; 0x5c
  40acd2:	f7fc fb79 	bl	4073c8 <memset>
  40acd6:	4807      	ldr	r0, [pc, #28]	; (40acf4 <std.isra.0+0x40>)
  40acd8:	4907      	ldr	r1, [pc, #28]	; (40acf8 <std.isra.0+0x44>)
  40acda:	4a08      	ldr	r2, [pc, #32]	; (40acfc <std.isra.0+0x48>)
  40acdc:	4b08      	ldr	r3, [pc, #32]	; (40ad00 <std.isra.0+0x4c>)
  40acde:	6220      	str	r0, [r4, #32]
  40ace0:	61e4      	str	r4, [r4, #28]
  40ace2:	6261      	str	r1, [r4, #36]	; 0x24
  40ace4:	62a2      	str	r2, [r4, #40]	; 0x28
  40ace6:	62e3      	str	r3, [r4, #44]	; 0x2c
  40ace8:	f104 0058 	add.w	r0, r4, #88	; 0x58
  40acec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40acf0:	f000 bbd2 	b.w	40b498 <__retarget_lock_init_recursive>
  40acf4:	0040c625 	.word	0x0040c625
  40acf8:	0040c649 	.word	0x0040c649
  40acfc:	0040c685 	.word	0x0040c685
  40ad00:	0040c6a5 	.word	0x0040c6a5

0040ad04 <__sinit>:
  40ad04:	b510      	push	{r4, lr}
  40ad06:	4604      	mov	r4, r0
  40ad08:	4812      	ldr	r0, [pc, #72]	; (40ad54 <__sinit+0x50>)
  40ad0a:	f000 fbc9 	bl	40b4a0 <__retarget_lock_acquire_recursive>
  40ad0e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40ad10:	b9d2      	cbnz	r2, 40ad48 <__sinit+0x44>
  40ad12:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40ad16:	4810      	ldr	r0, [pc, #64]	; (40ad58 <__sinit+0x54>)
  40ad18:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  40ad1c:	2103      	movs	r1, #3
  40ad1e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40ad22:	63e0      	str	r0, [r4, #60]	; 0x3c
  40ad24:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40ad28:	6860      	ldr	r0, [r4, #4]
  40ad2a:	2104      	movs	r1, #4
  40ad2c:	f7ff ffc2 	bl	40acb4 <std.isra.0>
  40ad30:	2201      	movs	r2, #1
  40ad32:	2109      	movs	r1, #9
  40ad34:	68a0      	ldr	r0, [r4, #8]
  40ad36:	f7ff ffbd 	bl	40acb4 <std.isra.0>
  40ad3a:	2202      	movs	r2, #2
  40ad3c:	2112      	movs	r1, #18
  40ad3e:	68e0      	ldr	r0, [r4, #12]
  40ad40:	f7ff ffb8 	bl	40acb4 <std.isra.0>
  40ad44:	2301      	movs	r3, #1
  40ad46:	63a3      	str	r3, [r4, #56]	; 0x38
  40ad48:	4802      	ldr	r0, [pc, #8]	; (40ad54 <__sinit+0x50>)
  40ad4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40ad4e:	f000 bba9 	b.w	40b4a4 <__retarget_lock_release_recursive>
  40ad52:	bf00      	nop
  40ad54:	204049c8 	.word	0x204049c8
  40ad58:	0040aca9 	.word	0x0040aca9

0040ad5c <__sfp_lock_acquire>:
  40ad5c:	4801      	ldr	r0, [pc, #4]	; (40ad64 <__sfp_lock_acquire+0x8>)
  40ad5e:	f000 bb9f 	b.w	40b4a0 <__retarget_lock_acquire_recursive>
  40ad62:	bf00      	nop
  40ad64:	204049dc 	.word	0x204049dc

0040ad68 <__sfp_lock_release>:
  40ad68:	4801      	ldr	r0, [pc, #4]	; (40ad70 <__sfp_lock_release+0x8>)
  40ad6a:	f000 bb9b 	b.w	40b4a4 <__retarget_lock_release_recursive>
  40ad6e:	bf00      	nop
  40ad70:	204049dc 	.word	0x204049dc

0040ad74 <__libc_fini_array>:
  40ad74:	b538      	push	{r3, r4, r5, lr}
  40ad76:	4c0a      	ldr	r4, [pc, #40]	; (40ada0 <__libc_fini_array+0x2c>)
  40ad78:	4d0a      	ldr	r5, [pc, #40]	; (40ada4 <__libc_fini_array+0x30>)
  40ad7a:	1b64      	subs	r4, r4, r5
  40ad7c:	10a4      	asrs	r4, r4, #2
  40ad7e:	d00a      	beq.n	40ad96 <__libc_fini_array+0x22>
  40ad80:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40ad84:	3b01      	subs	r3, #1
  40ad86:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40ad8a:	3c01      	subs	r4, #1
  40ad8c:	f855 3904 	ldr.w	r3, [r5], #-4
  40ad90:	4798      	blx	r3
  40ad92:	2c00      	cmp	r4, #0
  40ad94:	d1f9      	bne.n	40ad8a <__libc_fini_array+0x16>
  40ad96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40ad9a:	f003 b813 	b.w	40ddc4 <_fini>
  40ad9e:	bf00      	nop
  40ada0:	0040ddd4 	.word	0x0040ddd4
  40ada4:	0040ddd0 	.word	0x0040ddd0

0040ada8 <__fputwc>:
  40ada8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40adac:	b082      	sub	sp, #8
  40adae:	4680      	mov	r8, r0
  40adb0:	4689      	mov	r9, r1
  40adb2:	4614      	mov	r4, r2
  40adb4:	f000 fb54 	bl	40b460 <__locale_mb_cur_max>
  40adb8:	2801      	cmp	r0, #1
  40adba:	d036      	beq.n	40ae2a <__fputwc+0x82>
  40adbc:	464a      	mov	r2, r9
  40adbe:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40adc2:	a901      	add	r1, sp, #4
  40adc4:	4640      	mov	r0, r8
  40adc6:	f001 fd47 	bl	40c858 <_wcrtomb_r>
  40adca:	1c42      	adds	r2, r0, #1
  40adcc:	4606      	mov	r6, r0
  40adce:	d025      	beq.n	40ae1c <__fputwc+0x74>
  40add0:	b3a8      	cbz	r0, 40ae3e <__fputwc+0x96>
  40add2:	f89d e004 	ldrb.w	lr, [sp, #4]
  40add6:	2500      	movs	r5, #0
  40add8:	f10d 0a04 	add.w	sl, sp, #4
  40addc:	e009      	b.n	40adf2 <__fputwc+0x4a>
  40adde:	6823      	ldr	r3, [r4, #0]
  40ade0:	1c5a      	adds	r2, r3, #1
  40ade2:	6022      	str	r2, [r4, #0]
  40ade4:	f883 e000 	strb.w	lr, [r3]
  40ade8:	3501      	adds	r5, #1
  40adea:	42b5      	cmp	r5, r6
  40adec:	d227      	bcs.n	40ae3e <__fputwc+0x96>
  40adee:	f815 e00a 	ldrb.w	lr, [r5, sl]
  40adf2:	68a3      	ldr	r3, [r4, #8]
  40adf4:	3b01      	subs	r3, #1
  40adf6:	2b00      	cmp	r3, #0
  40adf8:	60a3      	str	r3, [r4, #8]
  40adfa:	daf0      	bge.n	40adde <__fputwc+0x36>
  40adfc:	69a7      	ldr	r7, [r4, #24]
  40adfe:	42bb      	cmp	r3, r7
  40ae00:	4671      	mov	r1, lr
  40ae02:	4622      	mov	r2, r4
  40ae04:	4640      	mov	r0, r8
  40ae06:	db02      	blt.n	40ae0e <__fputwc+0x66>
  40ae08:	f1be 0f0a 	cmp.w	lr, #10
  40ae0c:	d1e7      	bne.n	40adde <__fputwc+0x36>
  40ae0e:	f001 fccb 	bl	40c7a8 <__swbuf_r>
  40ae12:	1c43      	adds	r3, r0, #1
  40ae14:	d1e8      	bne.n	40ade8 <__fputwc+0x40>
  40ae16:	b002      	add	sp, #8
  40ae18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ae1c:	89a3      	ldrh	r3, [r4, #12]
  40ae1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40ae22:	81a3      	strh	r3, [r4, #12]
  40ae24:	b002      	add	sp, #8
  40ae26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ae2a:	f109 33ff 	add.w	r3, r9, #4294967295
  40ae2e:	2bfe      	cmp	r3, #254	; 0xfe
  40ae30:	d8c4      	bhi.n	40adbc <__fputwc+0x14>
  40ae32:	fa5f fe89 	uxtb.w	lr, r9
  40ae36:	4606      	mov	r6, r0
  40ae38:	f88d e004 	strb.w	lr, [sp, #4]
  40ae3c:	e7cb      	b.n	40add6 <__fputwc+0x2e>
  40ae3e:	4648      	mov	r0, r9
  40ae40:	b002      	add	sp, #8
  40ae42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ae46:	bf00      	nop

0040ae48 <_fputwc_r>:
  40ae48:	b530      	push	{r4, r5, lr}
  40ae4a:	6e53      	ldr	r3, [r2, #100]	; 0x64
  40ae4c:	f013 0f01 	tst.w	r3, #1
  40ae50:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40ae54:	4614      	mov	r4, r2
  40ae56:	b083      	sub	sp, #12
  40ae58:	4605      	mov	r5, r0
  40ae5a:	b29a      	uxth	r2, r3
  40ae5c:	d101      	bne.n	40ae62 <_fputwc_r+0x1a>
  40ae5e:	0590      	lsls	r0, r2, #22
  40ae60:	d51c      	bpl.n	40ae9c <_fputwc_r+0x54>
  40ae62:	0490      	lsls	r0, r2, #18
  40ae64:	d406      	bmi.n	40ae74 <_fputwc_r+0x2c>
  40ae66:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40ae68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40ae6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40ae70:	81a3      	strh	r3, [r4, #12]
  40ae72:	6662      	str	r2, [r4, #100]	; 0x64
  40ae74:	4628      	mov	r0, r5
  40ae76:	4622      	mov	r2, r4
  40ae78:	f7ff ff96 	bl	40ada8 <__fputwc>
  40ae7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40ae7e:	07da      	lsls	r2, r3, #31
  40ae80:	4605      	mov	r5, r0
  40ae82:	d402      	bmi.n	40ae8a <_fputwc_r+0x42>
  40ae84:	89a3      	ldrh	r3, [r4, #12]
  40ae86:	059b      	lsls	r3, r3, #22
  40ae88:	d502      	bpl.n	40ae90 <_fputwc_r+0x48>
  40ae8a:	4628      	mov	r0, r5
  40ae8c:	b003      	add	sp, #12
  40ae8e:	bd30      	pop	{r4, r5, pc}
  40ae90:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40ae92:	f000 fb07 	bl	40b4a4 <__retarget_lock_release_recursive>
  40ae96:	4628      	mov	r0, r5
  40ae98:	b003      	add	sp, #12
  40ae9a:	bd30      	pop	{r4, r5, pc}
  40ae9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40ae9e:	9101      	str	r1, [sp, #4]
  40aea0:	f000 fafe 	bl	40b4a0 <__retarget_lock_acquire_recursive>
  40aea4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40aea8:	9901      	ldr	r1, [sp, #4]
  40aeaa:	b29a      	uxth	r2, r3
  40aeac:	e7d9      	b.n	40ae62 <_fputwc_r+0x1a>
  40aeae:	bf00      	nop

0040aeb0 <_malloc_trim_r>:
  40aeb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40aeb2:	4f24      	ldr	r7, [pc, #144]	; (40af44 <_malloc_trim_r+0x94>)
  40aeb4:	460c      	mov	r4, r1
  40aeb6:	4606      	mov	r6, r0
  40aeb8:	f000 fef6 	bl	40bca8 <__malloc_lock>
  40aebc:	68bb      	ldr	r3, [r7, #8]
  40aebe:	685d      	ldr	r5, [r3, #4]
  40aec0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40aec4:	310f      	adds	r1, #15
  40aec6:	f025 0503 	bic.w	r5, r5, #3
  40aeca:	4429      	add	r1, r5
  40aecc:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40aed0:	f021 010f 	bic.w	r1, r1, #15
  40aed4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40aed8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40aedc:	db07      	blt.n	40aeee <_malloc_trim_r+0x3e>
  40aede:	2100      	movs	r1, #0
  40aee0:	4630      	mov	r0, r6
  40aee2:	f001 fb8d 	bl	40c600 <_sbrk_r>
  40aee6:	68bb      	ldr	r3, [r7, #8]
  40aee8:	442b      	add	r3, r5
  40aeea:	4298      	cmp	r0, r3
  40aeec:	d004      	beq.n	40aef8 <_malloc_trim_r+0x48>
  40aeee:	4630      	mov	r0, r6
  40aef0:	f000 fee0 	bl	40bcb4 <__malloc_unlock>
  40aef4:	2000      	movs	r0, #0
  40aef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40aef8:	4261      	negs	r1, r4
  40aefa:	4630      	mov	r0, r6
  40aefc:	f001 fb80 	bl	40c600 <_sbrk_r>
  40af00:	3001      	adds	r0, #1
  40af02:	d00d      	beq.n	40af20 <_malloc_trim_r+0x70>
  40af04:	4b10      	ldr	r3, [pc, #64]	; (40af48 <_malloc_trim_r+0x98>)
  40af06:	68ba      	ldr	r2, [r7, #8]
  40af08:	6819      	ldr	r1, [r3, #0]
  40af0a:	1b2d      	subs	r5, r5, r4
  40af0c:	f045 0501 	orr.w	r5, r5, #1
  40af10:	4630      	mov	r0, r6
  40af12:	1b09      	subs	r1, r1, r4
  40af14:	6055      	str	r5, [r2, #4]
  40af16:	6019      	str	r1, [r3, #0]
  40af18:	f000 fecc 	bl	40bcb4 <__malloc_unlock>
  40af1c:	2001      	movs	r0, #1
  40af1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40af20:	2100      	movs	r1, #0
  40af22:	4630      	mov	r0, r6
  40af24:	f001 fb6c 	bl	40c600 <_sbrk_r>
  40af28:	68ba      	ldr	r2, [r7, #8]
  40af2a:	1a83      	subs	r3, r0, r2
  40af2c:	2b0f      	cmp	r3, #15
  40af2e:	ddde      	ble.n	40aeee <_malloc_trim_r+0x3e>
  40af30:	4c06      	ldr	r4, [pc, #24]	; (40af4c <_malloc_trim_r+0x9c>)
  40af32:	4905      	ldr	r1, [pc, #20]	; (40af48 <_malloc_trim_r+0x98>)
  40af34:	6824      	ldr	r4, [r4, #0]
  40af36:	f043 0301 	orr.w	r3, r3, #1
  40af3a:	1b00      	subs	r0, r0, r4
  40af3c:	6053      	str	r3, [r2, #4]
  40af3e:	6008      	str	r0, [r1, #0]
  40af40:	e7d5      	b.n	40aeee <_malloc_trim_r+0x3e>
  40af42:	bf00      	nop
  40af44:	20400600 	.word	0x20400600
  40af48:	204038f0 	.word	0x204038f0
  40af4c:	20400a08 	.word	0x20400a08

0040af50 <_free_r>:
  40af50:	2900      	cmp	r1, #0
  40af52:	d044      	beq.n	40afde <_free_r+0x8e>
  40af54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40af58:	460d      	mov	r5, r1
  40af5a:	4680      	mov	r8, r0
  40af5c:	f000 fea4 	bl	40bca8 <__malloc_lock>
  40af60:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40af64:	4969      	ldr	r1, [pc, #420]	; (40b10c <_free_r+0x1bc>)
  40af66:	f027 0301 	bic.w	r3, r7, #1
  40af6a:	f1a5 0408 	sub.w	r4, r5, #8
  40af6e:	18e2      	adds	r2, r4, r3
  40af70:	688e      	ldr	r6, [r1, #8]
  40af72:	6850      	ldr	r0, [r2, #4]
  40af74:	42b2      	cmp	r2, r6
  40af76:	f020 0003 	bic.w	r0, r0, #3
  40af7a:	d05e      	beq.n	40b03a <_free_r+0xea>
  40af7c:	07fe      	lsls	r6, r7, #31
  40af7e:	6050      	str	r0, [r2, #4]
  40af80:	d40b      	bmi.n	40af9a <_free_r+0x4a>
  40af82:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40af86:	1be4      	subs	r4, r4, r7
  40af88:	f101 0e08 	add.w	lr, r1, #8
  40af8c:	68a5      	ldr	r5, [r4, #8]
  40af8e:	4575      	cmp	r5, lr
  40af90:	443b      	add	r3, r7
  40af92:	d06d      	beq.n	40b070 <_free_r+0x120>
  40af94:	68e7      	ldr	r7, [r4, #12]
  40af96:	60ef      	str	r7, [r5, #12]
  40af98:	60bd      	str	r5, [r7, #8]
  40af9a:	1815      	adds	r5, r2, r0
  40af9c:	686d      	ldr	r5, [r5, #4]
  40af9e:	07ed      	lsls	r5, r5, #31
  40afa0:	d53e      	bpl.n	40b020 <_free_r+0xd0>
  40afa2:	f043 0201 	orr.w	r2, r3, #1
  40afa6:	6062      	str	r2, [r4, #4]
  40afa8:	50e3      	str	r3, [r4, r3]
  40afaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40afae:	d217      	bcs.n	40afe0 <_free_r+0x90>
  40afb0:	08db      	lsrs	r3, r3, #3
  40afb2:	1c58      	adds	r0, r3, #1
  40afb4:	109a      	asrs	r2, r3, #2
  40afb6:	684d      	ldr	r5, [r1, #4]
  40afb8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40afbc:	60a7      	str	r7, [r4, #8]
  40afbe:	2301      	movs	r3, #1
  40afc0:	4093      	lsls	r3, r2
  40afc2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40afc6:	432b      	orrs	r3, r5
  40afc8:	3a08      	subs	r2, #8
  40afca:	60e2      	str	r2, [r4, #12]
  40afcc:	604b      	str	r3, [r1, #4]
  40afce:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40afd2:	60fc      	str	r4, [r7, #12]
  40afd4:	4640      	mov	r0, r8
  40afd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40afda:	f000 be6b 	b.w	40bcb4 <__malloc_unlock>
  40afde:	4770      	bx	lr
  40afe0:	0a5a      	lsrs	r2, r3, #9
  40afe2:	2a04      	cmp	r2, #4
  40afe4:	d852      	bhi.n	40b08c <_free_r+0x13c>
  40afe6:	099a      	lsrs	r2, r3, #6
  40afe8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40afec:	00ff      	lsls	r7, r7, #3
  40afee:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40aff2:	19c8      	adds	r0, r1, r7
  40aff4:	59ca      	ldr	r2, [r1, r7]
  40aff6:	3808      	subs	r0, #8
  40aff8:	4290      	cmp	r0, r2
  40affa:	d04f      	beq.n	40b09c <_free_r+0x14c>
  40affc:	6851      	ldr	r1, [r2, #4]
  40affe:	f021 0103 	bic.w	r1, r1, #3
  40b002:	428b      	cmp	r3, r1
  40b004:	d232      	bcs.n	40b06c <_free_r+0x11c>
  40b006:	6892      	ldr	r2, [r2, #8]
  40b008:	4290      	cmp	r0, r2
  40b00a:	d1f7      	bne.n	40affc <_free_r+0xac>
  40b00c:	68c3      	ldr	r3, [r0, #12]
  40b00e:	60a0      	str	r0, [r4, #8]
  40b010:	60e3      	str	r3, [r4, #12]
  40b012:	609c      	str	r4, [r3, #8]
  40b014:	60c4      	str	r4, [r0, #12]
  40b016:	4640      	mov	r0, r8
  40b018:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40b01c:	f000 be4a 	b.w	40bcb4 <__malloc_unlock>
  40b020:	6895      	ldr	r5, [r2, #8]
  40b022:	4f3b      	ldr	r7, [pc, #236]	; (40b110 <_free_r+0x1c0>)
  40b024:	42bd      	cmp	r5, r7
  40b026:	4403      	add	r3, r0
  40b028:	d040      	beq.n	40b0ac <_free_r+0x15c>
  40b02a:	68d0      	ldr	r0, [r2, #12]
  40b02c:	60e8      	str	r0, [r5, #12]
  40b02e:	f043 0201 	orr.w	r2, r3, #1
  40b032:	6085      	str	r5, [r0, #8]
  40b034:	6062      	str	r2, [r4, #4]
  40b036:	50e3      	str	r3, [r4, r3]
  40b038:	e7b7      	b.n	40afaa <_free_r+0x5a>
  40b03a:	07ff      	lsls	r7, r7, #31
  40b03c:	4403      	add	r3, r0
  40b03e:	d407      	bmi.n	40b050 <_free_r+0x100>
  40b040:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40b044:	1aa4      	subs	r4, r4, r2
  40b046:	4413      	add	r3, r2
  40b048:	68a0      	ldr	r0, [r4, #8]
  40b04a:	68e2      	ldr	r2, [r4, #12]
  40b04c:	60c2      	str	r2, [r0, #12]
  40b04e:	6090      	str	r0, [r2, #8]
  40b050:	4a30      	ldr	r2, [pc, #192]	; (40b114 <_free_r+0x1c4>)
  40b052:	6812      	ldr	r2, [r2, #0]
  40b054:	f043 0001 	orr.w	r0, r3, #1
  40b058:	4293      	cmp	r3, r2
  40b05a:	6060      	str	r0, [r4, #4]
  40b05c:	608c      	str	r4, [r1, #8]
  40b05e:	d3b9      	bcc.n	40afd4 <_free_r+0x84>
  40b060:	4b2d      	ldr	r3, [pc, #180]	; (40b118 <_free_r+0x1c8>)
  40b062:	4640      	mov	r0, r8
  40b064:	6819      	ldr	r1, [r3, #0]
  40b066:	f7ff ff23 	bl	40aeb0 <_malloc_trim_r>
  40b06a:	e7b3      	b.n	40afd4 <_free_r+0x84>
  40b06c:	4610      	mov	r0, r2
  40b06e:	e7cd      	b.n	40b00c <_free_r+0xbc>
  40b070:	1811      	adds	r1, r2, r0
  40b072:	6849      	ldr	r1, [r1, #4]
  40b074:	07c9      	lsls	r1, r1, #31
  40b076:	d444      	bmi.n	40b102 <_free_r+0x1b2>
  40b078:	6891      	ldr	r1, [r2, #8]
  40b07a:	68d2      	ldr	r2, [r2, #12]
  40b07c:	60ca      	str	r2, [r1, #12]
  40b07e:	4403      	add	r3, r0
  40b080:	f043 0001 	orr.w	r0, r3, #1
  40b084:	6091      	str	r1, [r2, #8]
  40b086:	6060      	str	r0, [r4, #4]
  40b088:	50e3      	str	r3, [r4, r3]
  40b08a:	e7a3      	b.n	40afd4 <_free_r+0x84>
  40b08c:	2a14      	cmp	r2, #20
  40b08e:	d816      	bhi.n	40b0be <_free_r+0x16e>
  40b090:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40b094:	00ff      	lsls	r7, r7, #3
  40b096:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40b09a:	e7aa      	b.n	40aff2 <_free_r+0xa2>
  40b09c:	10aa      	asrs	r2, r5, #2
  40b09e:	2301      	movs	r3, #1
  40b0a0:	684d      	ldr	r5, [r1, #4]
  40b0a2:	4093      	lsls	r3, r2
  40b0a4:	432b      	orrs	r3, r5
  40b0a6:	604b      	str	r3, [r1, #4]
  40b0a8:	4603      	mov	r3, r0
  40b0aa:	e7b0      	b.n	40b00e <_free_r+0xbe>
  40b0ac:	f043 0201 	orr.w	r2, r3, #1
  40b0b0:	614c      	str	r4, [r1, #20]
  40b0b2:	610c      	str	r4, [r1, #16]
  40b0b4:	60e5      	str	r5, [r4, #12]
  40b0b6:	60a5      	str	r5, [r4, #8]
  40b0b8:	6062      	str	r2, [r4, #4]
  40b0ba:	50e3      	str	r3, [r4, r3]
  40b0bc:	e78a      	b.n	40afd4 <_free_r+0x84>
  40b0be:	2a54      	cmp	r2, #84	; 0x54
  40b0c0:	d806      	bhi.n	40b0d0 <_free_r+0x180>
  40b0c2:	0b1a      	lsrs	r2, r3, #12
  40b0c4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40b0c8:	00ff      	lsls	r7, r7, #3
  40b0ca:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40b0ce:	e790      	b.n	40aff2 <_free_r+0xa2>
  40b0d0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40b0d4:	d806      	bhi.n	40b0e4 <_free_r+0x194>
  40b0d6:	0bda      	lsrs	r2, r3, #15
  40b0d8:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40b0dc:	00ff      	lsls	r7, r7, #3
  40b0de:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40b0e2:	e786      	b.n	40aff2 <_free_r+0xa2>
  40b0e4:	f240 5054 	movw	r0, #1364	; 0x554
  40b0e8:	4282      	cmp	r2, r0
  40b0ea:	d806      	bhi.n	40b0fa <_free_r+0x1aa>
  40b0ec:	0c9a      	lsrs	r2, r3, #18
  40b0ee:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40b0f2:	00ff      	lsls	r7, r7, #3
  40b0f4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40b0f8:	e77b      	b.n	40aff2 <_free_r+0xa2>
  40b0fa:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40b0fe:	257e      	movs	r5, #126	; 0x7e
  40b100:	e777      	b.n	40aff2 <_free_r+0xa2>
  40b102:	f043 0101 	orr.w	r1, r3, #1
  40b106:	6061      	str	r1, [r4, #4]
  40b108:	6013      	str	r3, [r2, #0]
  40b10a:	e763      	b.n	40afd4 <_free_r+0x84>
  40b10c:	20400600 	.word	0x20400600
  40b110:	20400608 	.word	0x20400608
  40b114:	20400a0c 	.word	0x20400a0c
  40b118:	20403920 	.word	0x20403920

0040b11c <__sfvwrite_r>:
  40b11c:	6893      	ldr	r3, [r2, #8]
  40b11e:	2b00      	cmp	r3, #0
  40b120:	d073      	beq.n	40b20a <__sfvwrite_r+0xee>
  40b122:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b126:	898b      	ldrh	r3, [r1, #12]
  40b128:	b083      	sub	sp, #12
  40b12a:	460c      	mov	r4, r1
  40b12c:	0719      	lsls	r1, r3, #28
  40b12e:	9000      	str	r0, [sp, #0]
  40b130:	4616      	mov	r6, r2
  40b132:	d526      	bpl.n	40b182 <__sfvwrite_r+0x66>
  40b134:	6922      	ldr	r2, [r4, #16]
  40b136:	b322      	cbz	r2, 40b182 <__sfvwrite_r+0x66>
  40b138:	f013 0002 	ands.w	r0, r3, #2
  40b13c:	6835      	ldr	r5, [r6, #0]
  40b13e:	d02c      	beq.n	40b19a <__sfvwrite_r+0x7e>
  40b140:	f04f 0900 	mov.w	r9, #0
  40b144:	4fb0      	ldr	r7, [pc, #704]	; (40b408 <__sfvwrite_r+0x2ec>)
  40b146:	46c8      	mov	r8, r9
  40b148:	46b2      	mov	sl, r6
  40b14a:	45b8      	cmp	r8, r7
  40b14c:	4643      	mov	r3, r8
  40b14e:	464a      	mov	r2, r9
  40b150:	bf28      	it	cs
  40b152:	463b      	movcs	r3, r7
  40b154:	9800      	ldr	r0, [sp, #0]
  40b156:	f1b8 0f00 	cmp.w	r8, #0
  40b15a:	d050      	beq.n	40b1fe <__sfvwrite_r+0xe2>
  40b15c:	69e1      	ldr	r1, [r4, #28]
  40b15e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40b160:	47b0      	blx	r6
  40b162:	2800      	cmp	r0, #0
  40b164:	dd58      	ble.n	40b218 <__sfvwrite_r+0xfc>
  40b166:	f8da 3008 	ldr.w	r3, [sl, #8]
  40b16a:	1a1b      	subs	r3, r3, r0
  40b16c:	4481      	add	r9, r0
  40b16e:	eba8 0800 	sub.w	r8, r8, r0
  40b172:	f8ca 3008 	str.w	r3, [sl, #8]
  40b176:	2b00      	cmp	r3, #0
  40b178:	d1e7      	bne.n	40b14a <__sfvwrite_r+0x2e>
  40b17a:	2000      	movs	r0, #0
  40b17c:	b003      	add	sp, #12
  40b17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b182:	4621      	mov	r1, r4
  40b184:	9800      	ldr	r0, [sp, #0]
  40b186:	f7fe fc93 	bl	409ab0 <__swsetup_r>
  40b18a:	2800      	cmp	r0, #0
  40b18c:	f040 8133 	bne.w	40b3f6 <__sfvwrite_r+0x2da>
  40b190:	89a3      	ldrh	r3, [r4, #12]
  40b192:	6835      	ldr	r5, [r6, #0]
  40b194:	f013 0002 	ands.w	r0, r3, #2
  40b198:	d1d2      	bne.n	40b140 <__sfvwrite_r+0x24>
  40b19a:	f013 0901 	ands.w	r9, r3, #1
  40b19e:	d145      	bne.n	40b22c <__sfvwrite_r+0x110>
  40b1a0:	464f      	mov	r7, r9
  40b1a2:	9601      	str	r6, [sp, #4]
  40b1a4:	b337      	cbz	r7, 40b1f4 <__sfvwrite_r+0xd8>
  40b1a6:	059a      	lsls	r2, r3, #22
  40b1a8:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40b1ac:	f140 8083 	bpl.w	40b2b6 <__sfvwrite_r+0x19a>
  40b1b0:	4547      	cmp	r7, r8
  40b1b2:	46c3      	mov	fp, r8
  40b1b4:	f0c0 80ab 	bcc.w	40b30e <__sfvwrite_r+0x1f2>
  40b1b8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40b1bc:	f040 80ac 	bne.w	40b318 <__sfvwrite_r+0x1fc>
  40b1c0:	6820      	ldr	r0, [r4, #0]
  40b1c2:	46ba      	mov	sl, r7
  40b1c4:	465a      	mov	r2, fp
  40b1c6:	4649      	mov	r1, r9
  40b1c8:	f000 fd0a 	bl	40bbe0 <memmove>
  40b1cc:	68a2      	ldr	r2, [r4, #8]
  40b1ce:	6823      	ldr	r3, [r4, #0]
  40b1d0:	eba2 0208 	sub.w	r2, r2, r8
  40b1d4:	445b      	add	r3, fp
  40b1d6:	60a2      	str	r2, [r4, #8]
  40b1d8:	6023      	str	r3, [r4, #0]
  40b1da:	9a01      	ldr	r2, [sp, #4]
  40b1dc:	6893      	ldr	r3, [r2, #8]
  40b1de:	eba3 030a 	sub.w	r3, r3, sl
  40b1e2:	44d1      	add	r9, sl
  40b1e4:	eba7 070a 	sub.w	r7, r7, sl
  40b1e8:	6093      	str	r3, [r2, #8]
  40b1ea:	2b00      	cmp	r3, #0
  40b1ec:	d0c5      	beq.n	40b17a <__sfvwrite_r+0x5e>
  40b1ee:	89a3      	ldrh	r3, [r4, #12]
  40b1f0:	2f00      	cmp	r7, #0
  40b1f2:	d1d8      	bne.n	40b1a6 <__sfvwrite_r+0x8a>
  40b1f4:	f8d5 9000 	ldr.w	r9, [r5]
  40b1f8:	686f      	ldr	r7, [r5, #4]
  40b1fa:	3508      	adds	r5, #8
  40b1fc:	e7d2      	b.n	40b1a4 <__sfvwrite_r+0x88>
  40b1fe:	f8d5 9000 	ldr.w	r9, [r5]
  40b202:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40b206:	3508      	adds	r5, #8
  40b208:	e79f      	b.n	40b14a <__sfvwrite_r+0x2e>
  40b20a:	2000      	movs	r0, #0
  40b20c:	4770      	bx	lr
  40b20e:	4621      	mov	r1, r4
  40b210:	9800      	ldr	r0, [sp, #0]
  40b212:	f7ff fd1f 	bl	40ac54 <_fflush_r>
  40b216:	b370      	cbz	r0, 40b276 <__sfvwrite_r+0x15a>
  40b218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b21c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b220:	f04f 30ff 	mov.w	r0, #4294967295
  40b224:	81a3      	strh	r3, [r4, #12]
  40b226:	b003      	add	sp, #12
  40b228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b22c:	4681      	mov	r9, r0
  40b22e:	4633      	mov	r3, r6
  40b230:	464e      	mov	r6, r9
  40b232:	46a8      	mov	r8, r5
  40b234:	469a      	mov	sl, r3
  40b236:	464d      	mov	r5, r9
  40b238:	b34e      	cbz	r6, 40b28e <__sfvwrite_r+0x172>
  40b23a:	b380      	cbz	r0, 40b29e <__sfvwrite_r+0x182>
  40b23c:	6820      	ldr	r0, [r4, #0]
  40b23e:	6923      	ldr	r3, [r4, #16]
  40b240:	6962      	ldr	r2, [r4, #20]
  40b242:	45b1      	cmp	r9, r6
  40b244:	46cb      	mov	fp, r9
  40b246:	bf28      	it	cs
  40b248:	46b3      	movcs	fp, r6
  40b24a:	4298      	cmp	r0, r3
  40b24c:	465f      	mov	r7, fp
  40b24e:	d904      	bls.n	40b25a <__sfvwrite_r+0x13e>
  40b250:	68a3      	ldr	r3, [r4, #8]
  40b252:	4413      	add	r3, r2
  40b254:	459b      	cmp	fp, r3
  40b256:	f300 80a6 	bgt.w	40b3a6 <__sfvwrite_r+0x28a>
  40b25a:	4593      	cmp	fp, r2
  40b25c:	db4b      	blt.n	40b2f6 <__sfvwrite_r+0x1da>
  40b25e:	4613      	mov	r3, r2
  40b260:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40b262:	69e1      	ldr	r1, [r4, #28]
  40b264:	9800      	ldr	r0, [sp, #0]
  40b266:	462a      	mov	r2, r5
  40b268:	47b8      	blx	r7
  40b26a:	1e07      	subs	r7, r0, #0
  40b26c:	ddd4      	ble.n	40b218 <__sfvwrite_r+0xfc>
  40b26e:	ebb9 0907 	subs.w	r9, r9, r7
  40b272:	d0cc      	beq.n	40b20e <__sfvwrite_r+0xf2>
  40b274:	2001      	movs	r0, #1
  40b276:	f8da 3008 	ldr.w	r3, [sl, #8]
  40b27a:	1bdb      	subs	r3, r3, r7
  40b27c:	443d      	add	r5, r7
  40b27e:	1bf6      	subs	r6, r6, r7
  40b280:	f8ca 3008 	str.w	r3, [sl, #8]
  40b284:	2b00      	cmp	r3, #0
  40b286:	f43f af78 	beq.w	40b17a <__sfvwrite_r+0x5e>
  40b28a:	2e00      	cmp	r6, #0
  40b28c:	d1d5      	bne.n	40b23a <__sfvwrite_r+0x11e>
  40b28e:	f108 0308 	add.w	r3, r8, #8
  40b292:	e913 0060 	ldmdb	r3, {r5, r6}
  40b296:	4698      	mov	r8, r3
  40b298:	3308      	adds	r3, #8
  40b29a:	2e00      	cmp	r6, #0
  40b29c:	d0f9      	beq.n	40b292 <__sfvwrite_r+0x176>
  40b29e:	4632      	mov	r2, r6
  40b2a0:	210a      	movs	r1, #10
  40b2a2:	4628      	mov	r0, r5
  40b2a4:	f000 fc4c 	bl	40bb40 <memchr>
  40b2a8:	2800      	cmp	r0, #0
  40b2aa:	f000 80a1 	beq.w	40b3f0 <__sfvwrite_r+0x2d4>
  40b2ae:	3001      	adds	r0, #1
  40b2b0:	eba0 0905 	sub.w	r9, r0, r5
  40b2b4:	e7c2      	b.n	40b23c <__sfvwrite_r+0x120>
  40b2b6:	6820      	ldr	r0, [r4, #0]
  40b2b8:	6923      	ldr	r3, [r4, #16]
  40b2ba:	4298      	cmp	r0, r3
  40b2bc:	d802      	bhi.n	40b2c4 <__sfvwrite_r+0x1a8>
  40b2be:	6963      	ldr	r3, [r4, #20]
  40b2c0:	429f      	cmp	r7, r3
  40b2c2:	d25d      	bcs.n	40b380 <__sfvwrite_r+0x264>
  40b2c4:	45b8      	cmp	r8, r7
  40b2c6:	bf28      	it	cs
  40b2c8:	46b8      	movcs	r8, r7
  40b2ca:	4642      	mov	r2, r8
  40b2cc:	4649      	mov	r1, r9
  40b2ce:	f000 fc87 	bl	40bbe0 <memmove>
  40b2d2:	68a3      	ldr	r3, [r4, #8]
  40b2d4:	6822      	ldr	r2, [r4, #0]
  40b2d6:	eba3 0308 	sub.w	r3, r3, r8
  40b2da:	4442      	add	r2, r8
  40b2dc:	60a3      	str	r3, [r4, #8]
  40b2de:	6022      	str	r2, [r4, #0]
  40b2e0:	b10b      	cbz	r3, 40b2e6 <__sfvwrite_r+0x1ca>
  40b2e2:	46c2      	mov	sl, r8
  40b2e4:	e779      	b.n	40b1da <__sfvwrite_r+0xbe>
  40b2e6:	4621      	mov	r1, r4
  40b2e8:	9800      	ldr	r0, [sp, #0]
  40b2ea:	f7ff fcb3 	bl	40ac54 <_fflush_r>
  40b2ee:	2800      	cmp	r0, #0
  40b2f0:	d192      	bne.n	40b218 <__sfvwrite_r+0xfc>
  40b2f2:	46c2      	mov	sl, r8
  40b2f4:	e771      	b.n	40b1da <__sfvwrite_r+0xbe>
  40b2f6:	465a      	mov	r2, fp
  40b2f8:	4629      	mov	r1, r5
  40b2fa:	f000 fc71 	bl	40bbe0 <memmove>
  40b2fe:	68a2      	ldr	r2, [r4, #8]
  40b300:	6823      	ldr	r3, [r4, #0]
  40b302:	eba2 020b 	sub.w	r2, r2, fp
  40b306:	445b      	add	r3, fp
  40b308:	60a2      	str	r2, [r4, #8]
  40b30a:	6023      	str	r3, [r4, #0]
  40b30c:	e7af      	b.n	40b26e <__sfvwrite_r+0x152>
  40b30e:	6820      	ldr	r0, [r4, #0]
  40b310:	46b8      	mov	r8, r7
  40b312:	46ba      	mov	sl, r7
  40b314:	46bb      	mov	fp, r7
  40b316:	e755      	b.n	40b1c4 <__sfvwrite_r+0xa8>
  40b318:	6962      	ldr	r2, [r4, #20]
  40b31a:	6820      	ldr	r0, [r4, #0]
  40b31c:	6921      	ldr	r1, [r4, #16]
  40b31e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40b322:	eba0 0a01 	sub.w	sl, r0, r1
  40b326:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40b32a:	f10a 0001 	add.w	r0, sl, #1
  40b32e:	ea4f 0868 	mov.w	r8, r8, asr #1
  40b332:	4438      	add	r0, r7
  40b334:	4540      	cmp	r0, r8
  40b336:	4642      	mov	r2, r8
  40b338:	bf84      	itt	hi
  40b33a:	4680      	movhi	r8, r0
  40b33c:	4642      	movhi	r2, r8
  40b33e:	055b      	lsls	r3, r3, #21
  40b340:	d544      	bpl.n	40b3cc <__sfvwrite_r+0x2b0>
  40b342:	4611      	mov	r1, r2
  40b344:	9800      	ldr	r0, [sp, #0]
  40b346:	f000 f92f 	bl	40b5a8 <_malloc_r>
  40b34a:	4683      	mov	fp, r0
  40b34c:	2800      	cmp	r0, #0
  40b34e:	d055      	beq.n	40b3fc <__sfvwrite_r+0x2e0>
  40b350:	4652      	mov	r2, sl
  40b352:	6921      	ldr	r1, [r4, #16]
  40b354:	f7fb ff9e 	bl	407294 <memcpy>
  40b358:	89a3      	ldrh	r3, [r4, #12]
  40b35a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40b35e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40b362:	81a3      	strh	r3, [r4, #12]
  40b364:	eb0b 000a 	add.w	r0, fp, sl
  40b368:	eba8 030a 	sub.w	r3, r8, sl
  40b36c:	f8c4 b010 	str.w	fp, [r4, #16]
  40b370:	f8c4 8014 	str.w	r8, [r4, #20]
  40b374:	6020      	str	r0, [r4, #0]
  40b376:	60a3      	str	r3, [r4, #8]
  40b378:	46b8      	mov	r8, r7
  40b37a:	46ba      	mov	sl, r7
  40b37c:	46bb      	mov	fp, r7
  40b37e:	e721      	b.n	40b1c4 <__sfvwrite_r+0xa8>
  40b380:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40b384:	42b9      	cmp	r1, r7
  40b386:	bf28      	it	cs
  40b388:	4639      	movcs	r1, r7
  40b38a:	464a      	mov	r2, r9
  40b38c:	fb91 f1f3 	sdiv	r1, r1, r3
  40b390:	9800      	ldr	r0, [sp, #0]
  40b392:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40b394:	fb03 f301 	mul.w	r3, r3, r1
  40b398:	69e1      	ldr	r1, [r4, #28]
  40b39a:	47b0      	blx	r6
  40b39c:	f1b0 0a00 	subs.w	sl, r0, #0
  40b3a0:	f73f af1b 	bgt.w	40b1da <__sfvwrite_r+0xbe>
  40b3a4:	e738      	b.n	40b218 <__sfvwrite_r+0xfc>
  40b3a6:	461a      	mov	r2, r3
  40b3a8:	4629      	mov	r1, r5
  40b3aa:	9301      	str	r3, [sp, #4]
  40b3ac:	f000 fc18 	bl	40bbe0 <memmove>
  40b3b0:	6822      	ldr	r2, [r4, #0]
  40b3b2:	9b01      	ldr	r3, [sp, #4]
  40b3b4:	9800      	ldr	r0, [sp, #0]
  40b3b6:	441a      	add	r2, r3
  40b3b8:	6022      	str	r2, [r4, #0]
  40b3ba:	4621      	mov	r1, r4
  40b3bc:	f7ff fc4a 	bl	40ac54 <_fflush_r>
  40b3c0:	9b01      	ldr	r3, [sp, #4]
  40b3c2:	2800      	cmp	r0, #0
  40b3c4:	f47f af28 	bne.w	40b218 <__sfvwrite_r+0xfc>
  40b3c8:	461f      	mov	r7, r3
  40b3ca:	e750      	b.n	40b26e <__sfvwrite_r+0x152>
  40b3cc:	9800      	ldr	r0, [sp, #0]
  40b3ce:	f000 ff71 	bl	40c2b4 <_realloc_r>
  40b3d2:	4683      	mov	fp, r0
  40b3d4:	2800      	cmp	r0, #0
  40b3d6:	d1c5      	bne.n	40b364 <__sfvwrite_r+0x248>
  40b3d8:	9d00      	ldr	r5, [sp, #0]
  40b3da:	6921      	ldr	r1, [r4, #16]
  40b3dc:	4628      	mov	r0, r5
  40b3de:	f7ff fdb7 	bl	40af50 <_free_r>
  40b3e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b3e6:	220c      	movs	r2, #12
  40b3e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40b3ec:	602a      	str	r2, [r5, #0]
  40b3ee:	e715      	b.n	40b21c <__sfvwrite_r+0x100>
  40b3f0:	f106 0901 	add.w	r9, r6, #1
  40b3f4:	e722      	b.n	40b23c <__sfvwrite_r+0x120>
  40b3f6:	f04f 30ff 	mov.w	r0, #4294967295
  40b3fa:	e6bf      	b.n	40b17c <__sfvwrite_r+0x60>
  40b3fc:	9a00      	ldr	r2, [sp, #0]
  40b3fe:	230c      	movs	r3, #12
  40b400:	6013      	str	r3, [r2, #0]
  40b402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b406:	e709      	b.n	40b21c <__sfvwrite_r+0x100>
  40b408:	7ffffc00 	.word	0x7ffffc00

0040b40c <_fwalk_reent>:
  40b40c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40b410:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40b414:	d01f      	beq.n	40b456 <_fwalk_reent+0x4a>
  40b416:	4688      	mov	r8, r1
  40b418:	4606      	mov	r6, r0
  40b41a:	f04f 0900 	mov.w	r9, #0
  40b41e:	687d      	ldr	r5, [r7, #4]
  40b420:	68bc      	ldr	r4, [r7, #8]
  40b422:	3d01      	subs	r5, #1
  40b424:	d411      	bmi.n	40b44a <_fwalk_reent+0x3e>
  40b426:	89a3      	ldrh	r3, [r4, #12]
  40b428:	2b01      	cmp	r3, #1
  40b42a:	f105 35ff 	add.w	r5, r5, #4294967295
  40b42e:	d908      	bls.n	40b442 <_fwalk_reent+0x36>
  40b430:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40b434:	3301      	adds	r3, #1
  40b436:	4621      	mov	r1, r4
  40b438:	4630      	mov	r0, r6
  40b43a:	d002      	beq.n	40b442 <_fwalk_reent+0x36>
  40b43c:	47c0      	blx	r8
  40b43e:	ea49 0900 	orr.w	r9, r9, r0
  40b442:	1c6b      	adds	r3, r5, #1
  40b444:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40b448:	d1ed      	bne.n	40b426 <_fwalk_reent+0x1a>
  40b44a:	683f      	ldr	r7, [r7, #0]
  40b44c:	2f00      	cmp	r7, #0
  40b44e:	d1e6      	bne.n	40b41e <_fwalk_reent+0x12>
  40b450:	4648      	mov	r0, r9
  40b452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40b456:	46b9      	mov	r9, r7
  40b458:	4648      	mov	r0, r9
  40b45a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40b45e:	bf00      	nop

0040b460 <__locale_mb_cur_max>:
  40b460:	4b04      	ldr	r3, [pc, #16]	; (40b474 <__locale_mb_cur_max+0x14>)
  40b462:	4a05      	ldr	r2, [pc, #20]	; (40b478 <__locale_mb_cur_max+0x18>)
  40b464:	681b      	ldr	r3, [r3, #0]
  40b466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40b468:	2b00      	cmp	r3, #0
  40b46a:	bf08      	it	eq
  40b46c:	4613      	moveq	r3, r2
  40b46e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40b472:	4770      	bx	lr
  40b474:	20400064 	.word	0x20400064
  40b478:	20400494 	.word	0x20400494

0040b47c <_localeconv_r>:
  40b47c:	4a04      	ldr	r2, [pc, #16]	; (40b490 <_localeconv_r+0x14>)
  40b47e:	4b05      	ldr	r3, [pc, #20]	; (40b494 <_localeconv_r+0x18>)
  40b480:	6812      	ldr	r2, [r2, #0]
  40b482:	6b50      	ldr	r0, [r2, #52]	; 0x34
  40b484:	2800      	cmp	r0, #0
  40b486:	bf08      	it	eq
  40b488:	4618      	moveq	r0, r3
  40b48a:	30f0      	adds	r0, #240	; 0xf0
  40b48c:	4770      	bx	lr
  40b48e:	bf00      	nop
  40b490:	20400064 	.word	0x20400064
  40b494:	20400494 	.word	0x20400494

0040b498 <__retarget_lock_init_recursive>:
  40b498:	4770      	bx	lr
  40b49a:	bf00      	nop

0040b49c <__retarget_lock_close_recursive>:
  40b49c:	4770      	bx	lr
  40b49e:	bf00      	nop

0040b4a0 <__retarget_lock_acquire_recursive>:
  40b4a0:	4770      	bx	lr
  40b4a2:	bf00      	nop

0040b4a4 <__retarget_lock_release_recursive>:
  40b4a4:	4770      	bx	lr
  40b4a6:	bf00      	nop

0040b4a8 <__swhatbuf_r>:
  40b4a8:	b570      	push	{r4, r5, r6, lr}
  40b4aa:	460c      	mov	r4, r1
  40b4ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b4b0:	2900      	cmp	r1, #0
  40b4b2:	b090      	sub	sp, #64	; 0x40
  40b4b4:	4615      	mov	r5, r2
  40b4b6:	461e      	mov	r6, r3
  40b4b8:	db14      	blt.n	40b4e4 <__swhatbuf_r+0x3c>
  40b4ba:	aa01      	add	r2, sp, #4
  40b4bc:	f001 fb20 	bl	40cb00 <_fstat_r>
  40b4c0:	2800      	cmp	r0, #0
  40b4c2:	db0f      	blt.n	40b4e4 <__swhatbuf_r+0x3c>
  40b4c4:	9a02      	ldr	r2, [sp, #8]
  40b4c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40b4ca:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40b4ce:	fab2 f282 	clz	r2, r2
  40b4d2:	0952      	lsrs	r2, r2, #5
  40b4d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40b4d8:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40b4dc:	6032      	str	r2, [r6, #0]
  40b4de:	602b      	str	r3, [r5, #0]
  40b4e0:	b010      	add	sp, #64	; 0x40
  40b4e2:	bd70      	pop	{r4, r5, r6, pc}
  40b4e4:	89a2      	ldrh	r2, [r4, #12]
  40b4e6:	2300      	movs	r3, #0
  40b4e8:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  40b4ec:	6033      	str	r3, [r6, #0]
  40b4ee:	d004      	beq.n	40b4fa <__swhatbuf_r+0x52>
  40b4f0:	2240      	movs	r2, #64	; 0x40
  40b4f2:	4618      	mov	r0, r3
  40b4f4:	602a      	str	r2, [r5, #0]
  40b4f6:	b010      	add	sp, #64	; 0x40
  40b4f8:	bd70      	pop	{r4, r5, r6, pc}
  40b4fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40b4fe:	602b      	str	r3, [r5, #0]
  40b500:	b010      	add	sp, #64	; 0x40
  40b502:	bd70      	pop	{r4, r5, r6, pc}

0040b504 <__smakebuf_r>:
  40b504:	898a      	ldrh	r2, [r1, #12]
  40b506:	0792      	lsls	r2, r2, #30
  40b508:	460b      	mov	r3, r1
  40b50a:	d506      	bpl.n	40b51a <__smakebuf_r+0x16>
  40b50c:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40b510:	2101      	movs	r1, #1
  40b512:	601a      	str	r2, [r3, #0]
  40b514:	611a      	str	r2, [r3, #16]
  40b516:	6159      	str	r1, [r3, #20]
  40b518:	4770      	bx	lr
  40b51a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40b51c:	b083      	sub	sp, #12
  40b51e:	ab01      	add	r3, sp, #4
  40b520:	466a      	mov	r2, sp
  40b522:	460c      	mov	r4, r1
  40b524:	4606      	mov	r6, r0
  40b526:	f7ff ffbf 	bl	40b4a8 <__swhatbuf_r>
  40b52a:	9900      	ldr	r1, [sp, #0]
  40b52c:	4605      	mov	r5, r0
  40b52e:	4630      	mov	r0, r6
  40b530:	f000 f83a 	bl	40b5a8 <_malloc_r>
  40b534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b538:	b1d8      	cbz	r0, 40b572 <__smakebuf_r+0x6e>
  40b53a:	9a01      	ldr	r2, [sp, #4]
  40b53c:	4f15      	ldr	r7, [pc, #84]	; (40b594 <__smakebuf_r+0x90>)
  40b53e:	9900      	ldr	r1, [sp, #0]
  40b540:	63f7      	str	r7, [r6, #60]	; 0x3c
  40b542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40b546:	81a3      	strh	r3, [r4, #12]
  40b548:	6020      	str	r0, [r4, #0]
  40b54a:	6120      	str	r0, [r4, #16]
  40b54c:	6161      	str	r1, [r4, #20]
  40b54e:	b91a      	cbnz	r2, 40b558 <__smakebuf_r+0x54>
  40b550:	432b      	orrs	r3, r5
  40b552:	81a3      	strh	r3, [r4, #12]
  40b554:	b003      	add	sp, #12
  40b556:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40b558:	4630      	mov	r0, r6
  40b55a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40b55e:	f001 fae3 	bl	40cb28 <_isatty_r>
  40b562:	b1a0      	cbz	r0, 40b58e <__smakebuf_r+0x8a>
  40b564:	89a3      	ldrh	r3, [r4, #12]
  40b566:	f023 0303 	bic.w	r3, r3, #3
  40b56a:	f043 0301 	orr.w	r3, r3, #1
  40b56e:	b21b      	sxth	r3, r3
  40b570:	e7ee      	b.n	40b550 <__smakebuf_r+0x4c>
  40b572:	059a      	lsls	r2, r3, #22
  40b574:	d4ee      	bmi.n	40b554 <__smakebuf_r+0x50>
  40b576:	f023 0303 	bic.w	r3, r3, #3
  40b57a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40b57e:	f043 0302 	orr.w	r3, r3, #2
  40b582:	2101      	movs	r1, #1
  40b584:	81a3      	strh	r3, [r4, #12]
  40b586:	6022      	str	r2, [r4, #0]
  40b588:	6122      	str	r2, [r4, #16]
  40b58a:	6161      	str	r1, [r4, #20]
  40b58c:	e7e2      	b.n	40b554 <__smakebuf_r+0x50>
  40b58e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b592:	e7dd      	b.n	40b550 <__smakebuf_r+0x4c>
  40b594:	0040aca9 	.word	0x0040aca9

0040b598 <malloc>:
  40b598:	4b02      	ldr	r3, [pc, #8]	; (40b5a4 <malloc+0xc>)
  40b59a:	4601      	mov	r1, r0
  40b59c:	6818      	ldr	r0, [r3, #0]
  40b59e:	f000 b803 	b.w	40b5a8 <_malloc_r>
  40b5a2:	bf00      	nop
  40b5a4:	20400064 	.word	0x20400064

0040b5a8 <_malloc_r>:
  40b5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b5ac:	f101 060b 	add.w	r6, r1, #11
  40b5b0:	2e16      	cmp	r6, #22
  40b5b2:	b083      	sub	sp, #12
  40b5b4:	4605      	mov	r5, r0
  40b5b6:	f240 809e 	bls.w	40b6f6 <_malloc_r+0x14e>
  40b5ba:	f036 0607 	bics.w	r6, r6, #7
  40b5be:	f100 80bd 	bmi.w	40b73c <_malloc_r+0x194>
  40b5c2:	42b1      	cmp	r1, r6
  40b5c4:	f200 80ba 	bhi.w	40b73c <_malloc_r+0x194>
  40b5c8:	f000 fb6e 	bl	40bca8 <__malloc_lock>
  40b5cc:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40b5d0:	f0c0 8293 	bcc.w	40bafa <_malloc_r+0x552>
  40b5d4:	0a73      	lsrs	r3, r6, #9
  40b5d6:	f000 80b8 	beq.w	40b74a <_malloc_r+0x1a2>
  40b5da:	2b04      	cmp	r3, #4
  40b5dc:	f200 8179 	bhi.w	40b8d2 <_malloc_r+0x32a>
  40b5e0:	09b3      	lsrs	r3, r6, #6
  40b5e2:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40b5e6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40b5ea:	00c3      	lsls	r3, r0, #3
  40b5ec:	4fbf      	ldr	r7, [pc, #764]	; (40b8ec <_malloc_r+0x344>)
  40b5ee:	443b      	add	r3, r7
  40b5f0:	f1a3 0108 	sub.w	r1, r3, #8
  40b5f4:	685c      	ldr	r4, [r3, #4]
  40b5f6:	42a1      	cmp	r1, r4
  40b5f8:	d106      	bne.n	40b608 <_malloc_r+0x60>
  40b5fa:	e00c      	b.n	40b616 <_malloc_r+0x6e>
  40b5fc:	2a00      	cmp	r2, #0
  40b5fe:	f280 80aa 	bge.w	40b756 <_malloc_r+0x1ae>
  40b602:	68e4      	ldr	r4, [r4, #12]
  40b604:	42a1      	cmp	r1, r4
  40b606:	d006      	beq.n	40b616 <_malloc_r+0x6e>
  40b608:	6863      	ldr	r3, [r4, #4]
  40b60a:	f023 0303 	bic.w	r3, r3, #3
  40b60e:	1b9a      	subs	r2, r3, r6
  40b610:	2a0f      	cmp	r2, #15
  40b612:	ddf3      	ble.n	40b5fc <_malloc_r+0x54>
  40b614:	4670      	mov	r0, lr
  40b616:	693c      	ldr	r4, [r7, #16]
  40b618:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40b900 <_malloc_r+0x358>
  40b61c:	4574      	cmp	r4, lr
  40b61e:	f000 81ab 	beq.w	40b978 <_malloc_r+0x3d0>
  40b622:	6863      	ldr	r3, [r4, #4]
  40b624:	f023 0303 	bic.w	r3, r3, #3
  40b628:	1b9a      	subs	r2, r3, r6
  40b62a:	2a0f      	cmp	r2, #15
  40b62c:	f300 8190 	bgt.w	40b950 <_malloc_r+0x3a8>
  40b630:	2a00      	cmp	r2, #0
  40b632:	f8c7 e014 	str.w	lr, [r7, #20]
  40b636:	f8c7 e010 	str.w	lr, [r7, #16]
  40b63a:	f280 809d 	bge.w	40b778 <_malloc_r+0x1d0>
  40b63e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40b642:	f080 8161 	bcs.w	40b908 <_malloc_r+0x360>
  40b646:	08db      	lsrs	r3, r3, #3
  40b648:	f103 0c01 	add.w	ip, r3, #1
  40b64c:	1099      	asrs	r1, r3, #2
  40b64e:	687a      	ldr	r2, [r7, #4]
  40b650:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40b654:	f8c4 8008 	str.w	r8, [r4, #8]
  40b658:	2301      	movs	r3, #1
  40b65a:	408b      	lsls	r3, r1
  40b65c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40b660:	4313      	orrs	r3, r2
  40b662:	3908      	subs	r1, #8
  40b664:	60e1      	str	r1, [r4, #12]
  40b666:	607b      	str	r3, [r7, #4]
  40b668:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40b66c:	f8c8 400c 	str.w	r4, [r8, #12]
  40b670:	1082      	asrs	r2, r0, #2
  40b672:	2401      	movs	r4, #1
  40b674:	4094      	lsls	r4, r2
  40b676:	429c      	cmp	r4, r3
  40b678:	f200 808b 	bhi.w	40b792 <_malloc_r+0x1ea>
  40b67c:	421c      	tst	r4, r3
  40b67e:	d106      	bne.n	40b68e <_malloc_r+0xe6>
  40b680:	f020 0003 	bic.w	r0, r0, #3
  40b684:	0064      	lsls	r4, r4, #1
  40b686:	421c      	tst	r4, r3
  40b688:	f100 0004 	add.w	r0, r0, #4
  40b68c:	d0fa      	beq.n	40b684 <_malloc_r+0xdc>
  40b68e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40b692:	46cc      	mov	ip, r9
  40b694:	4680      	mov	r8, r0
  40b696:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40b69a:	459c      	cmp	ip, r3
  40b69c:	d107      	bne.n	40b6ae <_malloc_r+0x106>
  40b69e:	e16d      	b.n	40b97c <_malloc_r+0x3d4>
  40b6a0:	2a00      	cmp	r2, #0
  40b6a2:	f280 817b 	bge.w	40b99c <_malloc_r+0x3f4>
  40b6a6:	68db      	ldr	r3, [r3, #12]
  40b6a8:	459c      	cmp	ip, r3
  40b6aa:	f000 8167 	beq.w	40b97c <_malloc_r+0x3d4>
  40b6ae:	6859      	ldr	r1, [r3, #4]
  40b6b0:	f021 0103 	bic.w	r1, r1, #3
  40b6b4:	1b8a      	subs	r2, r1, r6
  40b6b6:	2a0f      	cmp	r2, #15
  40b6b8:	ddf2      	ble.n	40b6a0 <_malloc_r+0xf8>
  40b6ba:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40b6be:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40b6c2:	9300      	str	r3, [sp, #0]
  40b6c4:	199c      	adds	r4, r3, r6
  40b6c6:	4628      	mov	r0, r5
  40b6c8:	f046 0601 	orr.w	r6, r6, #1
  40b6cc:	f042 0501 	orr.w	r5, r2, #1
  40b6d0:	605e      	str	r6, [r3, #4]
  40b6d2:	f8c8 c00c 	str.w	ip, [r8, #12]
  40b6d6:	f8cc 8008 	str.w	r8, [ip, #8]
  40b6da:	617c      	str	r4, [r7, #20]
  40b6dc:	613c      	str	r4, [r7, #16]
  40b6de:	f8c4 e00c 	str.w	lr, [r4, #12]
  40b6e2:	f8c4 e008 	str.w	lr, [r4, #8]
  40b6e6:	6065      	str	r5, [r4, #4]
  40b6e8:	505a      	str	r2, [r3, r1]
  40b6ea:	f000 fae3 	bl	40bcb4 <__malloc_unlock>
  40b6ee:	9b00      	ldr	r3, [sp, #0]
  40b6f0:	f103 0408 	add.w	r4, r3, #8
  40b6f4:	e01e      	b.n	40b734 <_malloc_r+0x18c>
  40b6f6:	2910      	cmp	r1, #16
  40b6f8:	d820      	bhi.n	40b73c <_malloc_r+0x194>
  40b6fa:	f000 fad5 	bl	40bca8 <__malloc_lock>
  40b6fe:	2610      	movs	r6, #16
  40b700:	2318      	movs	r3, #24
  40b702:	2002      	movs	r0, #2
  40b704:	4f79      	ldr	r7, [pc, #484]	; (40b8ec <_malloc_r+0x344>)
  40b706:	443b      	add	r3, r7
  40b708:	f1a3 0208 	sub.w	r2, r3, #8
  40b70c:	685c      	ldr	r4, [r3, #4]
  40b70e:	4294      	cmp	r4, r2
  40b710:	f000 813d 	beq.w	40b98e <_malloc_r+0x3e6>
  40b714:	6863      	ldr	r3, [r4, #4]
  40b716:	68e1      	ldr	r1, [r4, #12]
  40b718:	68a6      	ldr	r6, [r4, #8]
  40b71a:	f023 0303 	bic.w	r3, r3, #3
  40b71e:	4423      	add	r3, r4
  40b720:	4628      	mov	r0, r5
  40b722:	685a      	ldr	r2, [r3, #4]
  40b724:	60f1      	str	r1, [r6, #12]
  40b726:	f042 0201 	orr.w	r2, r2, #1
  40b72a:	608e      	str	r6, [r1, #8]
  40b72c:	605a      	str	r2, [r3, #4]
  40b72e:	f000 fac1 	bl	40bcb4 <__malloc_unlock>
  40b732:	3408      	adds	r4, #8
  40b734:	4620      	mov	r0, r4
  40b736:	b003      	add	sp, #12
  40b738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b73c:	2400      	movs	r4, #0
  40b73e:	230c      	movs	r3, #12
  40b740:	4620      	mov	r0, r4
  40b742:	602b      	str	r3, [r5, #0]
  40b744:	b003      	add	sp, #12
  40b746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b74a:	2040      	movs	r0, #64	; 0x40
  40b74c:	f44f 7300 	mov.w	r3, #512	; 0x200
  40b750:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40b754:	e74a      	b.n	40b5ec <_malloc_r+0x44>
  40b756:	4423      	add	r3, r4
  40b758:	68e1      	ldr	r1, [r4, #12]
  40b75a:	685a      	ldr	r2, [r3, #4]
  40b75c:	68a6      	ldr	r6, [r4, #8]
  40b75e:	f042 0201 	orr.w	r2, r2, #1
  40b762:	60f1      	str	r1, [r6, #12]
  40b764:	4628      	mov	r0, r5
  40b766:	608e      	str	r6, [r1, #8]
  40b768:	605a      	str	r2, [r3, #4]
  40b76a:	f000 faa3 	bl	40bcb4 <__malloc_unlock>
  40b76e:	3408      	adds	r4, #8
  40b770:	4620      	mov	r0, r4
  40b772:	b003      	add	sp, #12
  40b774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b778:	4423      	add	r3, r4
  40b77a:	4628      	mov	r0, r5
  40b77c:	685a      	ldr	r2, [r3, #4]
  40b77e:	f042 0201 	orr.w	r2, r2, #1
  40b782:	605a      	str	r2, [r3, #4]
  40b784:	f000 fa96 	bl	40bcb4 <__malloc_unlock>
  40b788:	3408      	adds	r4, #8
  40b78a:	4620      	mov	r0, r4
  40b78c:	b003      	add	sp, #12
  40b78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b792:	68bc      	ldr	r4, [r7, #8]
  40b794:	6863      	ldr	r3, [r4, #4]
  40b796:	f023 0803 	bic.w	r8, r3, #3
  40b79a:	45b0      	cmp	r8, r6
  40b79c:	d304      	bcc.n	40b7a8 <_malloc_r+0x200>
  40b79e:	eba8 0306 	sub.w	r3, r8, r6
  40b7a2:	2b0f      	cmp	r3, #15
  40b7a4:	f300 8085 	bgt.w	40b8b2 <_malloc_r+0x30a>
  40b7a8:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40b904 <_malloc_r+0x35c>
  40b7ac:	4b50      	ldr	r3, [pc, #320]	; (40b8f0 <_malloc_r+0x348>)
  40b7ae:	f8d9 2000 	ldr.w	r2, [r9]
  40b7b2:	681b      	ldr	r3, [r3, #0]
  40b7b4:	3201      	adds	r2, #1
  40b7b6:	4433      	add	r3, r6
  40b7b8:	eb04 0a08 	add.w	sl, r4, r8
  40b7bc:	f000 8155 	beq.w	40ba6a <_malloc_r+0x4c2>
  40b7c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40b7c4:	330f      	adds	r3, #15
  40b7c6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40b7ca:	f02b 0b0f 	bic.w	fp, fp, #15
  40b7ce:	4659      	mov	r1, fp
  40b7d0:	4628      	mov	r0, r5
  40b7d2:	f000 ff15 	bl	40c600 <_sbrk_r>
  40b7d6:	1c41      	adds	r1, r0, #1
  40b7d8:	4602      	mov	r2, r0
  40b7da:	f000 80fc 	beq.w	40b9d6 <_malloc_r+0x42e>
  40b7de:	4582      	cmp	sl, r0
  40b7e0:	f200 80f7 	bhi.w	40b9d2 <_malloc_r+0x42a>
  40b7e4:	4b43      	ldr	r3, [pc, #268]	; (40b8f4 <_malloc_r+0x34c>)
  40b7e6:	6819      	ldr	r1, [r3, #0]
  40b7e8:	4459      	add	r1, fp
  40b7ea:	6019      	str	r1, [r3, #0]
  40b7ec:	f000 814d 	beq.w	40ba8a <_malloc_r+0x4e2>
  40b7f0:	f8d9 0000 	ldr.w	r0, [r9]
  40b7f4:	3001      	adds	r0, #1
  40b7f6:	bf1b      	ittet	ne
  40b7f8:	eba2 0a0a 	subne.w	sl, r2, sl
  40b7fc:	4451      	addne	r1, sl
  40b7fe:	f8c9 2000 	streq.w	r2, [r9]
  40b802:	6019      	strne	r1, [r3, #0]
  40b804:	f012 0107 	ands.w	r1, r2, #7
  40b808:	f000 8115 	beq.w	40ba36 <_malloc_r+0x48e>
  40b80c:	f1c1 0008 	rsb	r0, r1, #8
  40b810:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40b814:	4402      	add	r2, r0
  40b816:	3108      	adds	r1, #8
  40b818:	eb02 090b 	add.w	r9, r2, fp
  40b81c:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40b820:	eba1 0909 	sub.w	r9, r1, r9
  40b824:	4649      	mov	r1, r9
  40b826:	4628      	mov	r0, r5
  40b828:	9301      	str	r3, [sp, #4]
  40b82a:	9200      	str	r2, [sp, #0]
  40b82c:	f000 fee8 	bl	40c600 <_sbrk_r>
  40b830:	1c43      	adds	r3, r0, #1
  40b832:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40b836:	f000 8143 	beq.w	40bac0 <_malloc_r+0x518>
  40b83a:	1a80      	subs	r0, r0, r2
  40b83c:	4448      	add	r0, r9
  40b83e:	f040 0001 	orr.w	r0, r0, #1
  40b842:	6819      	ldr	r1, [r3, #0]
  40b844:	60ba      	str	r2, [r7, #8]
  40b846:	4449      	add	r1, r9
  40b848:	42bc      	cmp	r4, r7
  40b84a:	6050      	str	r0, [r2, #4]
  40b84c:	6019      	str	r1, [r3, #0]
  40b84e:	d017      	beq.n	40b880 <_malloc_r+0x2d8>
  40b850:	f1b8 0f0f 	cmp.w	r8, #15
  40b854:	f240 80fb 	bls.w	40ba4e <_malloc_r+0x4a6>
  40b858:	6860      	ldr	r0, [r4, #4]
  40b85a:	f1a8 020c 	sub.w	r2, r8, #12
  40b85e:	f022 0207 	bic.w	r2, r2, #7
  40b862:	eb04 0e02 	add.w	lr, r4, r2
  40b866:	f000 0001 	and.w	r0, r0, #1
  40b86a:	f04f 0c05 	mov.w	ip, #5
  40b86e:	4310      	orrs	r0, r2
  40b870:	2a0f      	cmp	r2, #15
  40b872:	6060      	str	r0, [r4, #4]
  40b874:	f8ce c004 	str.w	ip, [lr, #4]
  40b878:	f8ce c008 	str.w	ip, [lr, #8]
  40b87c:	f200 8117 	bhi.w	40baae <_malloc_r+0x506>
  40b880:	4b1d      	ldr	r3, [pc, #116]	; (40b8f8 <_malloc_r+0x350>)
  40b882:	68bc      	ldr	r4, [r7, #8]
  40b884:	681a      	ldr	r2, [r3, #0]
  40b886:	4291      	cmp	r1, r2
  40b888:	bf88      	it	hi
  40b88a:	6019      	strhi	r1, [r3, #0]
  40b88c:	4b1b      	ldr	r3, [pc, #108]	; (40b8fc <_malloc_r+0x354>)
  40b88e:	681a      	ldr	r2, [r3, #0]
  40b890:	4291      	cmp	r1, r2
  40b892:	6862      	ldr	r2, [r4, #4]
  40b894:	bf88      	it	hi
  40b896:	6019      	strhi	r1, [r3, #0]
  40b898:	f022 0203 	bic.w	r2, r2, #3
  40b89c:	4296      	cmp	r6, r2
  40b89e:	eba2 0306 	sub.w	r3, r2, r6
  40b8a2:	d801      	bhi.n	40b8a8 <_malloc_r+0x300>
  40b8a4:	2b0f      	cmp	r3, #15
  40b8a6:	dc04      	bgt.n	40b8b2 <_malloc_r+0x30a>
  40b8a8:	4628      	mov	r0, r5
  40b8aa:	f000 fa03 	bl	40bcb4 <__malloc_unlock>
  40b8ae:	2400      	movs	r4, #0
  40b8b0:	e740      	b.n	40b734 <_malloc_r+0x18c>
  40b8b2:	19a2      	adds	r2, r4, r6
  40b8b4:	f043 0301 	orr.w	r3, r3, #1
  40b8b8:	f046 0601 	orr.w	r6, r6, #1
  40b8bc:	6066      	str	r6, [r4, #4]
  40b8be:	4628      	mov	r0, r5
  40b8c0:	60ba      	str	r2, [r7, #8]
  40b8c2:	6053      	str	r3, [r2, #4]
  40b8c4:	f000 f9f6 	bl	40bcb4 <__malloc_unlock>
  40b8c8:	3408      	adds	r4, #8
  40b8ca:	4620      	mov	r0, r4
  40b8cc:	b003      	add	sp, #12
  40b8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b8d2:	2b14      	cmp	r3, #20
  40b8d4:	d971      	bls.n	40b9ba <_malloc_r+0x412>
  40b8d6:	2b54      	cmp	r3, #84	; 0x54
  40b8d8:	f200 80a3 	bhi.w	40ba22 <_malloc_r+0x47a>
  40b8dc:	0b33      	lsrs	r3, r6, #12
  40b8de:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40b8e2:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40b8e6:	00c3      	lsls	r3, r0, #3
  40b8e8:	e680      	b.n	40b5ec <_malloc_r+0x44>
  40b8ea:	bf00      	nop
  40b8ec:	20400600 	.word	0x20400600
  40b8f0:	20403920 	.word	0x20403920
  40b8f4:	204038f0 	.word	0x204038f0
  40b8f8:	20403918 	.word	0x20403918
  40b8fc:	2040391c 	.word	0x2040391c
  40b900:	20400608 	.word	0x20400608
  40b904:	20400a08 	.word	0x20400a08
  40b908:	0a5a      	lsrs	r2, r3, #9
  40b90a:	2a04      	cmp	r2, #4
  40b90c:	d95b      	bls.n	40b9c6 <_malloc_r+0x41e>
  40b90e:	2a14      	cmp	r2, #20
  40b910:	f200 80ae 	bhi.w	40ba70 <_malloc_r+0x4c8>
  40b914:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40b918:	00c9      	lsls	r1, r1, #3
  40b91a:	325b      	adds	r2, #91	; 0x5b
  40b91c:	eb07 0c01 	add.w	ip, r7, r1
  40b920:	5879      	ldr	r1, [r7, r1]
  40b922:	f1ac 0c08 	sub.w	ip, ip, #8
  40b926:	458c      	cmp	ip, r1
  40b928:	f000 8088 	beq.w	40ba3c <_malloc_r+0x494>
  40b92c:	684a      	ldr	r2, [r1, #4]
  40b92e:	f022 0203 	bic.w	r2, r2, #3
  40b932:	4293      	cmp	r3, r2
  40b934:	d273      	bcs.n	40ba1e <_malloc_r+0x476>
  40b936:	6889      	ldr	r1, [r1, #8]
  40b938:	458c      	cmp	ip, r1
  40b93a:	d1f7      	bne.n	40b92c <_malloc_r+0x384>
  40b93c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40b940:	687b      	ldr	r3, [r7, #4]
  40b942:	60e2      	str	r2, [r4, #12]
  40b944:	f8c4 c008 	str.w	ip, [r4, #8]
  40b948:	6094      	str	r4, [r2, #8]
  40b94a:	f8cc 400c 	str.w	r4, [ip, #12]
  40b94e:	e68f      	b.n	40b670 <_malloc_r+0xc8>
  40b950:	19a1      	adds	r1, r4, r6
  40b952:	f046 0c01 	orr.w	ip, r6, #1
  40b956:	f042 0601 	orr.w	r6, r2, #1
  40b95a:	f8c4 c004 	str.w	ip, [r4, #4]
  40b95e:	4628      	mov	r0, r5
  40b960:	6179      	str	r1, [r7, #20]
  40b962:	6139      	str	r1, [r7, #16]
  40b964:	f8c1 e00c 	str.w	lr, [r1, #12]
  40b968:	f8c1 e008 	str.w	lr, [r1, #8]
  40b96c:	604e      	str	r6, [r1, #4]
  40b96e:	50e2      	str	r2, [r4, r3]
  40b970:	f000 f9a0 	bl	40bcb4 <__malloc_unlock>
  40b974:	3408      	adds	r4, #8
  40b976:	e6dd      	b.n	40b734 <_malloc_r+0x18c>
  40b978:	687b      	ldr	r3, [r7, #4]
  40b97a:	e679      	b.n	40b670 <_malloc_r+0xc8>
  40b97c:	f108 0801 	add.w	r8, r8, #1
  40b980:	f018 0f03 	tst.w	r8, #3
  40b984:	f10c 0c08 	add.w	ip, ip, #8
  40b988:	f47f ae85 	bne.w	40b696 <_malloc_r+0xee>
  40b98c:	e02d      	b.n	40b9ea <_malloc_r+0x442>
  40b98e:	68dc      	ldr	r4, [r3, #12]
  40b990:	42a3      	cmp	r3, r4
  40b992:	bf08      	it	eq
  40b994:	3002      	addeq	r0, #2
  40b996:	f43f ae3e 	beq.w	40b616 <_malloc_r+0x6e>
  40b99a:	e6bb      	b.n	40b714 <_malloc_r+0x16c>
  40b99c:	4419      	add	r1, r3
  40b99e:	461c      	mov	r4, r3
  40b9a0:	684a      	ldr	r2, [r1, #4]
  40b9a2:	68db      	ldr	r3, [r3, #12]
  40b9a4:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40b9a8:	f042 0201 	orr.w	r2, r2, #1
  40b9ac:	604a      	str	r2, [r1, #4]
  40b9ae:	4628      	mov	r0, r5
  40b9b0:	60f3      	str	r3, [r6, #12]
  40b9b2:	609e      	str	r6, [r3, #8]
  40b9b4:	f000 f97e 	bl	40bcb4 <__malloc_unlock>
  40b9b8:	e6bc      	b.n	40b734 <_malloc_r+0x18c>
  40b9ba:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40b9be:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40b9c2:	00c3      	lsls	r3, r0, #3
  40b9c4:	e612      	b.n	40b5ec <_malloc_r+0x44>
  40b9c6:	099a      	lsrs	r2, r3, #6
  40b9c8:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40b9cc:	00c9      	lsls	r1, r1, #3
  40b9ce:	3238      	adds	r2, #56	; 0x38
  40b9d0:	e7a4      	b.n	40b91c <_malloc_r+0x374>
  40b9d2:	42bc      	cmp	r4, r7
  40b9d4:	d054      	beq.n	40ba80 <_malloc_r+0x4d8>
  40b9d6:	68bc      	ldr	r4, [r7, #8]
  40b9d8:	6862      	ldr	r2, [r4, #4]
  40b9da:	f022 0203 	bic.w	r2, r2, #3
  40b9de:	e75d      	b.n	40b89c <_malloc_r+0x2f4>
  40b9e0:	f859 3908 	ldr.w	r3, [r9], #-8
  40b9e4:	4599      	cmp	r9, r3
  40b9e6:	f040 8086 	bne.w	40baf6 <_malloc_r+0x54e>
  40b9ea:	f010 0f03 	tst.w	r0, #3
  40b9ee:	f100 30ff 	add.w	r0, r0, #4294967295
  40b9f2:	d1f5      	bne.n	40b9e0 <_malloc_r+0x438>
  40b9f4:	687b      	ldr	r3, [r7, #4]
  40b9f6:	ea23 0304 	bic.w	r3, r3, r4
  40b9fa:	607b      	str	r3, [r7, #4]
  40b9fc:	0064      	lsls	r4, r4, #1
  40b9fe:	429c      	cmp	r4, r3
  40ba00:	f63f aec7 	bhi.w	40b792 <_malloc_r+0x1ea>
  40ba04:	2c00      	cmp	r4, #0
  40ba06:	f43f aec4 	beq.w	40b792 <_malloc_r+0x1ea>
  40ba0a:	421c      	tst	r4, r3
  40ba0c:	4640      	mov	r0, r8
  40ba0e:	f47f ae3e 	bne.w	40b68e <_malloc_r+0xe6>
  40ba12:	0064      	lsls	r4, r4, #1
  40ba14:	421c      	tst	r4, r3
  40ba16:	f100 0004 	add.w	r0, r0, #4
  40ba1a:	d0fa      	beq.n	40ba12 <_malloc_r+0x46a>
  40ba1c:	e637      	b.n	40b68e <_malloc_r+0xe6>
  40ba1e:	468c      	mov	ip, r1
  40ba20:	e78c      	b.n	40b93c <_malloc_r+0x394>
  40ba22:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40ba26:	d815      	bhi.n	40ba54 <_malloc_r+0x4ac>
  40ba28:	0bf3      	lsrs	r3, r6, #15
  40ba2a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40ba2e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40ba32:	00c3      	lsls	r3, r0, #3
  40ba34:	e5da      	b.n	40b5ec <_malloc_r+0x44>
  40ba36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40ba3a:	e6ed      	b.n	40b818 <_malloc_r+0x270>
  40ba3c:	687b      	ldr	r3, [r7, #4]
  40ba3e:	1092      	asrs	r2, r2, #2
  40ba40:	2101      	movs	r1, #1
  40ba42:	fa01 f202 	lsl.w	r2, r1, r2
  40ba46:	4313      	orrs	r3, r2
  40ba48:	607b      	str	r3, [r7, #4]
  40ba4a:	4662      	mov	r2, ip
  40ba4c:	e779      	b.n	40b942 <_malloc_r+0x39a>
  40ba4e:	2301      	movs	r3, #1
  40ba50:	6053      	str	r3, [r2, #4]
  40ba52:	e729      	b.n	40b8a8 <_malloc_r+0x300>
  40ba54:	f240 5254 	movw	r2, #1364	; 0x554
  40ba58:	4293      	cmp	r3, r2
  40ba5a:	d822      	bhi.n	40baa2 <_malloc_r+0x4fa>
  40ba5c:	0cb3      	lsrs	r3, r6, #18
  40ba5e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40ba62:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40ba66:	00c3      	lsls	r3, r0, #3
  40ba68:	e5c0      	b.n	40b5ec <_malloc_r+0x44>
  40ba6a:	f103 0b10 	add.w	fp, r3, #16
  40ba6e:	e6ae      	b.n	40b7ce <_malloc_r+0x226>
  40ba70:	2a54      	cmp	r2, #84	; 0x54
  40ba72:	d829      	bhi.n	40bac8 <_malloc_r+0x520>
  40ba74:	0b1a      	lsrs	r2, r3, #12
  40ba76:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40ba7a:	00c9      	lsls	r1, r1, #3
  40ba7c:	326e      	adds	r2, #110	; 0x6e
  40ba7e:	e74d      	b.n	40b91c <_malloc_r+0x374>
  40ba80:	4b20      	ldr	r3, [pc, #128]	; (40bb04 <_malloc_r+0x55c>)
  40ba82:	6819      	ldr	r1, [r3, #0]
  40ba84:	4459      	add	r1, fp
  40ba86:	6019      	str	r1, [r3, #0]
  40ba88:	e6b2      	b.n	40b7f0 <_malloc_r+0x248>
  40ba8a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40ba8e:	2800      	cmp	r0, #0
  40ba90:	f47f aeae 	bne.w	40b7f0 <_malloc_r+0x248>
  40ba94:	eb08 030b 	add.w	r3, r8, fp
  40ba98:	68ba      	ldr	r2, [r7, #8]
  40ba9a:	f043 0301 	orr.w	r3, r3, #1
  40ba9e:	6053      	str	r3, [r2, #4]
  40baa0:	e6ee      	b.n	40b880 <_malloc_r+0x2d8>
  40baa2:	207f      	movs	r0, #127	; 0x7f
  40baa4:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40baa8:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40baac:	e59e      	b.n	40b5ec <_malloc_r+0x44>
  40baae:	f104 0108 	add.w	r1, r4, #8
  40bab2:	4628      	mov	r0, r5
  40bab4:	9300      	str	r3, [sp, #0]
  40bab6:	f7ff fa4b 	bl	40af50 <_free_r>
  40baba:	9b00      	ldr	r3, [sp, #0]
  40babc:	6819      	ldr	r1, [r3, #0]
  40babe:	e6df      	b.n	40b880 <_malloc_r+0x2d8>
  40bac0:	2001      	movs	r0, #1
  40bac2:	f04f 0900 	mov.w	r9, #0
  40bac6:	e6bc      	b.n	40b842 <_malloc_r+0x29a>
  40bac8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40bacc:	d805      	bhi.n	40bada <_malloc_r+0x532>
  40bace:	0bda      	lsrs	r2, r3, #15
  40bad0:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40bad4:	00c9      	lsls	r1, r1, #3
  40bad6:	3277      	adds	r2, #119	; 0x77
  40bad8:	e720      	b.n	40b91c <_malloc_r+0x374>
  40bada:	f240 5154 	movw	r1, #1364	; 0x554
  40bade:	428a      	cmp	r2, r1
  40bae0:	d805      	bhi.n	40baee <_malloc_r+0x546>
  40bae2:	0c9a      	lsrs	r2, r3, #18
  40bae4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40bae8:	00c9      	lsls	r1, r1, #3
  40baea:	327c      	adds	r2, #124	; 0x7c
  40baec:	e716      	b.n	40b91c <_malloc_r+0x374>
  40baee:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40baf2:	227e      	movs	r2, #126	; 0x7e
  40baf4:	e712      	b.n	40b91c <_malloc_r+0x374>
  40baf6:	687b      	ldr	r3, [r7, #4]
  40baf8:	e780      	b.n	40b9fc <_malloc_r+0x454>
  40bafa:	08f0      	lsrs	r0, r6, #3
  40bafc:	f106 0308 	add.w	r3, r6, #8
  40bb00:	e600      	b.n	40b704 <_malloc_r+0x15c>
  40bb02:	bf00      	nop
  40bb04:	204038f0 	.word	0x204038f0

0040bb08 <__ascii_mbtowc>:
  40bb08:	b082      	sub	sp, #8
  40bb0a:	b149      	cbz	r1, 40bb20 <__ascii_mbtowc+0x18>
  40bb0c:	b15a      	cbz	r2, 40bb26 <__ascii_mbtowc+0x1e>
  40bb0e:	b16b      	cbz	r3, 40bb2c <__ascii_mbtowc+0x24>
  40bb10:	7813      	ldrb	r3, [r2, #0]
  40bb12:	600b      	str	r3, [r1, #0]
  40bb14:	7812      	ldrb	r2, [r2, #0]
  40bb16:	1c10      	adds	r0, r2, #0
  40bb18:	bf18      	it	ne
  40bb1a:	2001      	movne	r0, #1
  40bb1c:	b002      	add	sp, #8
  40bb1e:	4770      	bx	lr
  40bb20:	a901      	add	r1, sp, #4
  40bb22:	2a00      	cmp	r2, #0
  40bb24:	d1f3      	bne.n	40bb0e <__ascii_mbtowc+0x6>
  40bb26:	4610      	mov	r0, r2
  40bb28:	b002      	add	sp, #8
  40bb2a:	4770      	bx	lr
  40bb2c:	f06f 0001 	mvn.w	r0, #1
  40bb30:	e7f4      	b.n	40bb1c <__ascii_mbtowc+0x14>
  40bb32:	bf00      	nop
	...

0040bb40 <memchr>:
  40bb40:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40bb44:	2a10      	cmp	r2, #16
  40bb46:	db2b      	blt.n	40bba0 <memchr+0x60>
  40bb48:	f010 0f07 	tst.w	r0, #7
  40bb4c:	d008      	beq.n	40bb60 <memchr+0x20>
  40bb4e:	f810 3b01 	ldrb.w	r3, [r0], #1
  40bb52:	3a01      	subs	r2, #1
  40bb54:	428b      	cmp	r3, r1
  40bb56:	d02d      	beq.n	40bbb4 <memchr+0x74>
  40bb58:	f010 0f07 	tst.w	r0, #7
  40bb5c:	b342      	cbz	r2, 40bbb0 <memchr+0x70>
  40bb5e:	d1f6      	bne.n	40bb4e <memchr+0xe>
  40bb60:	b4f0      	push	{r4, r5, r6, r7}
  40bb62:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40bb66:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40bb6a:	f022 0407 	bic.w	r4, r2, #7
  40bb6e:	f07f 0700 	mvns.w	r7, #0
  40bb72:	2300      	movs	r3, #0
  40bb74:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40bb78:	3c08      	subs	r4, #8
  40bb7a:	ea85 0501 	eor.w	r5, r5, r1
  40bb7e:	ea86 0601 	eor.w	r6, r6, r1
  40bb82:	fa85 f547 	uadd8	r5, r5, r7
  40bb86:	faa3 f587 	sel	r5, r3, r7
  40bb8a:	fa86 f647 	uadd8	r6, r6, r7
  40bb8e:	faa5 f687 	sel	r6, r5, r7
  40bb92:	b98e      	cbnz	r6, 40bbb8 <memchr+0x78>
  40bb94:	d1ee      	bne.n	40bb74 <memchr+0x34>
  40bb96:	bcf0      	pop	{r4, r5, r6, r7}
  40bb98:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40bb9c:	f002 0207 	and.w	r2, r2, #7
  40bba0:	b132      	cbz	r2, 40bbb0 <memchr+0x70>
  40bba2:	f810 3b01 	ldrb.w	r3, [r0], #1
  40bba6:	3a01      	subs	r2, #1
  40bba8:	ea83 0301 	eor.w	r3, r3, r1
  40bbac:	b113      	cbz	r3, 40bbb4 <memchr+0x74>
  40bbae:	d1f8      	bne.n	40bba2 <memchr+0x62>
  40bbb0:	2000      	movs	r0, #0
  40bbb2:	4770      	bx	lr
  40bbb4:	3801      	subs	r0, #1
  40bbb6:	4770      	bx	lr
  40bbb8:	2d00      	cmp	r5, #0
  40bbba:	bf06      	itte	eq
  40bbbc:	4635      	moveq	r5, r6
  40bbbe:	3803      	subeq	r0, #3
  40bbc0:	3807      	subne	r0, #7
  40bbc2:	f015 0f01 	tst.w	r5, #1
  40bbc6:	d107      	bne.n	40bbd8 <memchr+0x98>
  40bbc8:	3001      	adds	r0, #1
  40bbca:	f415 7f80 	tst.w	r5, #256	; 0x100
  40bbce:	bf02      	ittt	eq
  40bbd0:	3001      	addeq	r0, #1
  40bbd2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40bbd6:	3001      	addeq	r0, #1
  40bbd8:	bcf0      	pop	{r4, r5, r6, r7}
  40bbda:	3801      	subs	r0, #1
  40bbdc:	4770      	bx	lr
  40bbde:	bf00      	nop

0040bbe0 <memmove>:
  40bbe0:	4288      	cmp	r0, r1
  40bbe2:	b5f0      	push	{r4, r5, r6, r7, lr}
  40bbe4:	d90d      	bls.n	40bc02 <memmove+0x22>
  40bbe6:	188b      	adds	r3, r1, r2
  40bbe8:	4298      	cmp	r0, r3
  40bbea:	d20a      	bcs.n	40bc02 <memmove+0x22>
  40bbec:	1884      	adds	r4, r0, r2
  40bbee:	2a00      	cmp	r2, #0
  40bbf0:	d051      	beq.n	40bc96 <memmove+0xb6>
  40bbf2:	4622      	mov	r2, r4
  40bbf4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40bbf8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40bbfc:	4299      	cmp	r1, r3
  40bbfe:	d1f9      	bne.n	40bbf4 <memmove+0x14>
  40bc00:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40bc02:	2a0f      	cmp	r2, #15
  40bc04:	d948      	bls.n	40bc98 <memmove+0xb8>
  40bc06:	ea41 0300 	orr.w	r3, r1, r0
  40bc0a:	079b      	lsls	r3, r3, #30
  40bc0c:	d146      	bne.n	40bc9c <memmove+0xbc>
  40bc0e:	f100 0410 	add.w	r4, r0, #16
  40bc12:	f101 0310 	add.w	r3, r1, #16
  40bc16:	4615      	mov	r5, r2
  40bc18:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40bc1c:	f844 6c10 	str.w	r6, [r4, #-16]
  40bc20:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40bc24:	f844 6c0c 	str.w	r6, [r4, #-12]
  40bc28:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40bc2c:	f844 6c08 	str.w	r6, [r4, #-8]
  40bc30:	3d10      	subs	r5, #16
  40bc32:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40bc36:	f844 6c04 	str.w	r6, [r4, #-4]
  40bc3a:	2d0f      	cmp	r5, #15
  40bc3c:	f103 0310 	add.w	r3, r3, #16
  40bc40:	f104 0410 	add.w	r4, r4, #16
  40bc44:	d8e8      	bhi.n	40bc18 <memmove+0x38>
  40bc46:	f1a2 0310 	sub.w	r3, r2, #16
  40bc4a:	f023 030f 	bic.w	r3, r3, #15
  40bc4e:	f002 0e0f 	and.w	lr, r2, #15
  40bc52:	3310      	adds	r3, #16
  40bc54:	f1be 0f03 	cmp.w	lr, #3
  40bc58:	4419      	add	r1, r3
  40bc5a:	4403      	add	r3, r0
  40bc5c:	d921      	bls.n	40bca2 <memmove+0xc2>
  40bc5e:	1f1e      	subs	r6, r3, #4
  40bc60:	460d      	mov	r5, r1
  40bc62:	4674      	mov	r4, lr
  40bc64:	3c04      	subs	r4, #4
  40bc66:	f855 7b04 	ldr.w	r7, [r5], #4
  40bc6a:	f846 7f04 	str.w	r7, [r6, #4]!
  40bc6e:	2c03      	cmp	r4, #3
  40bc70:	d8f8      	bhi.n	40bc64 <memmove+0x84>
  40bc72:	f1ae 0404 	sub.w	r4, lr, #4
  40bc76:	f024 0403 	bic.w	r4, r4, #3
  40bc7a:	3404      	adds	r4, #4
  40bc7c:	4421      	add	r1, r4
  40bc7e:	4423      	add	r3, r4
  40bc80:	f002 0203 	and.w	r2, r2, #3
  40bc84:	b162      	cbz	r2, 40bca0 <memmove+0xc0>
  40bc86:	3b01      	subs	r3, #1
  40bc88:	440a      	add	r2, r1
  40bc8a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40bc8e:	f803 4f01 	strb.w	r4, [r3, #1]!
  40bc92:	428a      	cmp	r2, r1
  40bc94:	d1f9      	bne.n	40bc8a <memmove+0xaa>
  40bc96:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40bc98:	4603      	mov	r3, r0
  40bc9a:	e7f3      	b.n	40bc84 <memmove+0xa4>
  40bc9c:	4603      	mov	r3, r0
  40bc9e:	e7f2      	b.n	40bc86 <memmove+0xa6>
  40bca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40bca2:	4672      	mov	r2, lr
  40bca4:	e7ee      	b.n	40bc84 <memmove+0xa4>
  40bca6:	bf00      	nop

0040bca8 <__malloc_lock>:
  40bca8:	4801      	ldr	r0, [pc, #4]	; (40bcb0 <__malloc_lock+0x8>)
  40bcaa:	f7ff bbf9 	b.w	40b4a0 <__retarget_lock_acquire_recursive>
  40bcae:	bf00      	nop
  40bcb0:	204049cc 	.word	0x204049cc

0040bcb4 <__malloc_unlock>:
  40bcb4:	4801      	ldr	r0, [pc, #4]	; (40bcbc <__malloc_unlock+0x8>)
  40bcb6:	f7ff bbf5 	b.w	40b4a4 <__retarget_lock_release_recursive>
  40bcba:	bf00      	nop
  40bcbc:	204049cc 	.word	0x204049cc

0040bcc0 <_Balloc>:
  40bcc0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40bcc2:	b570      	push	{r4, r5, r6, lr}
  40bcc4:	4605      	mov	r5, r0
  40bcc6:	460c      	mov	r4, r1
  40bcc8:	b14b      	cbz	r3, 40bcde <_Balloc+0x1e>
  40bcca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40bcce:	b180      	cbz	r0, 40bcf2 <_Balloc+0x32>
  40bcd0:	6802      	ldr	r2, [r0, #0]
  40bcd2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40bcd6:	2300      	movs	r3, #0
  40bcd8:	6103      	str	r3, [r0, #16]
  40bcda:	60c3      	str	r3, [r0, #12]
  40bcdc:	bd70      	pop	{r4, r5, r6, pc}
  40bcde:	2221      	movs	r2, #33	; 0x21
  40bce0:	2104      	movs	r1, #4
  40bce2:	f000 fe69 	bl	40c9b8 <_calloc_r>
  40bce6:	64e8      	str	r0, [r5, #76]	; 0x4c
  40bce8:	4603      	mov	r3, r0
  40bcea:	2800      	cmp	r0, #0
  40bcec:	d1ed      	bne.n	40bcca <_Balloc+0xa>
  40bcee:	2000      	movs	r0, #0
  40bcf0:	bd70      	pop	{r4, r5, r6, pc}
  40bcf2:	2101      	movs	r1, #1
  40bcf4:	fa01 f604 	lsl.w	r6, r1, r4
  40bcf8:	1d72      	adds	r2, r6, #5
  40bcfa:	4628      	mov	r0, r5
  40bcfc:	0092      	lsls	r2, r2, #2
  40bcfe:	f000 fe5b 	bl	40c9b8 <_calloc_r>
  40bd02:	2800      	cmp	r0, #0
  40bd04:	d0f3      	beq.n	40bcee <_Balloc+0x2e>
  40bd06:	6044      	str	r4, [r0, #4]
  40bd08:	6086      	str	r6, [r0, #8]
  40bd0a:	e7e4      	b.n	40bcd6 <_Balloc+0x16>

0040bd0c <_Bfree>:
  40bd0c:	b131      	cbz	r1, 40bd1c <_Bfree+0x10>
  40bd0e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40bd10:	684a      	ldr	r2, [r1, #4]
  40bd12:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40bd16:	6008      	str	r0, [r1, #0]
  40bd18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40bd1c:	4770      	bx	lr
  40bd1e:	bf00      	nop

0040bd20 <__multadd>:
  40bd20:	b5f0      	push	{r4, r5, r6, r7, lr}
  40bd22:	690c      	ldr	r4, [r1, #16]
  40bd24:	b083      	sub	sp, #12
  40bd26:	460d      	mov	r5, r1
  40bd28:	4606      	mov	r6, r0
  40bd2a:	f101 0e14 	add.w	lr, r1, #20
  40bd2e:	2700      	movs	r7, #0
  40bd30:	f8de 0000 	ldr.w	r0, [lr]
  40bd34:	b281      	uxth	r1, r0
  40bd36:	fb02 3301 	mla	r3, r2, r1, r3
  40bd3a:	0c01      	lsrs	r1, r0, #16
  40bd3c:	0c18      	lsrs	r0, r3, #16
  40bd3e:	fb02 0101 	mla	r1, r2, r1, r0
  40bd42:	b29b      	uxth	r3, r3
  40bd44:	3701      	adds	r7, #1
  40bd46:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  40bd4a:	42bc      	cmp	r4, r7
  40bd4c:	f84e 3b04 	str.w	r3, [lr], #4
  40bd50:	ea4f 4311 	mov.w	r3, r1, lsr #16
  40bd54:	dcec      	bgt.n	40bd30 <__multadd+0x10>
  40bd56:	b13b      	cbz	r3, 40bd68 <__multadd+0x48>
  40bd58:	68aa      	ldr	r2, [r5, #8]
  40bd5a:	4294      	cmp	r4, r2
  40bd5c:	da07      	bge.n	40bd6e <__multadd+0x4e>
  40bd5e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40bd62:	3401      	adds	r4, #1
  40bd64:	6153      	str	r3, [r2, #20]
  40bd66:	612c      	str	r4, [r5, #16]
  40bd68:	4628      	mov	r0, r5
  40bd6a:	b003      	add	sp, #12
  40bd6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40bd6e:	6869      	ldr	r1, [r5, #4]
  40bd70:	9301      	str	r3, [sp, #4]
  40bd72:	3101      	adds	r1, #1
  40bd74:	4630      	mov	r0, r6
  40bd76:	f7ff ffa3 	bl	40bcc0 <_Balloc>
  40bd7a:	692a      	ldr	r2, [r5, #16]
  40bd7c:	3202      	adds	r2, #2
  40bd7e:	f105 010c 	add.w	r1, r5, #12
  40bd82:	4607      	mov	r7, r0
  40bd84:	0092      	lsls	r2, r2, #2
  40bd86:	300c      	adds	r0, #12
  40bd88:	f7fb fa84 	bl	407294 <memcpy>
  40bd8c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40bd8e:	6869      	ldr	r1, [r5, #4]
  40bd90:	9b01      	ldr	r3, [sp, #4]
  40bd92:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40bd96:	6028      	str	r0, [r5, #0]
  40bd98:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  40bd9c:	463d      	mov	r5, r7
  40bd9e:	e7de      	b.n	40bd5e <__multadd+0x3e>

0040bda0 <__hi0bits>:
  40bda0:	0c02      	lsrs	r2, r0, #16
  40bda2:	0412      	lsls	r2, r2, #16
  40bda4:	4603      	mov	r3, r0
  40bda6:	b9b2      	cbnz	r2, 40bdd6 <__hi0bits+0x36>
  40bda8:	0403      	lsls	r3, r0, #16
  40bdaa:	2010      	movs	r0, #16
  40bdac:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40bdb0:	bf04      	itt	eq
  40bdb2:	021b      	lsleq	r3, r3, #8
  40bdb4:	3008      	addeq	r0, #8
  40bdb6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  40bdba:	bf04      	itt	eq
  40bdbc:	011b      	lsleq	r3, r3, #4
  40bdbe:	3004      	addeq	r0, #4
  40bdc0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40bdc4:	bf04      	itt	eq
  40bdc6:	009b      	lsleq	r3, r3, #2
  40bdc8:	3002      	addeq	r0, #2
  40bdca:	2b00      	cmp	r3, #0
  40bdcc:	db02      	blt.n	40bdd4 <__hi0bits+0x34>
  40bdce:	005b      	lsls	r3, r3, #1
  40bdd0:	d403      	bmi.n	40bdda <__hi0bits+0x3a>
  40bdd2:	2020      	movs	r0, #32
  40bdd4:	4770      	bx	lr
  40bdd6:	2000      	movs	r0, #0
  40bdd8:	e7e8      	b.n	40bdac <__hi0bits+0xc>
  40bdda:	3001      	adds	r0, #1
  40bddc:	4770      	bx	lr
  40bdde:	bf00      	nop

0040bde0 <__lo0bits>:
  40bde0:	6803      	ldr	r3, [r0, #0]
  40bde2:	f013 0207 	ands.w	r2, r3, #7
  40bde6:	4601      	mov	r1, r0
  40bde8:	d007      	beq.n	40bdfa <__lo0bits+0x1a>
  40bdea:	07da      	lsls	r2, r3, #31
  40bdec:	d421      	bmi.n	40be32 <__lo0bits+0x52>
  40bdee:	0798      	lsls	r0, r3, #30
  40bdf0:	d421      	bmi.n	40be36 <__lo0bits+0x56>
  40bdf2:	089b      	lsrs	r3, r3, #2
  40bdf4:	600b      	str	r3, [r1, #0]
  40bdf6:	2002      	movs	r0, #2
  40bdf8:	4770      	bx	lr
  40bdfa:	b298      	uxth	r0, r3
  40bdfc:	b198      	cbz	r0, 40be26 <__lo0bits+0x46>
  40bdfe:	4610      	mov	r0, r2
  40be00:	f013 0fff 	tst.w	r3, #255	; 0xff
  40be04:	bf04      	itt	eq
  40be06:	0a1b      	lsreq	r3, r3, #8
  40be08:	3008      	addeq	r0, #8
  40be0a:	071a      	lsls	r2, r3, #28
  40be0c:	bf04      	itt	eq
  40be0e:	091b      	lsreq	r3, r3, #4
  40be10:	3004      	addeq	r0, #4
  40be12:	079a      	lsls	r2, r3, #30
  40be14:	bf04      	itt	eq
  40be16:	089b      	lsreq	r3, r3, #2
  40be18:	3002      	addeq	r0, #2
  40be1a:	07da      	lsls	r2, r3, #31
  40be1c:	d407      	bmi.n	40be2e <__lo0bits+0x4e>
  40be1e:	085b      	lsrs	r3, r3, #1
  40be20:	d104      	bne.n	40be2c <__lo0bits+0x4c>
  40be22:	2020      	movs	r0, #32
  40be24:	4770      	bx	lr
  40be26:	0c1b      	lsrs	r3, r3, #16
  40be28:	2010      	movs	r0, #16
  40be2a:	e7e9      	b.n	40be00 <__lo0bits+0x20>
  40be2c:	3001      	adds	r0, #1
  40be2e:	600b      	str	r3, [r1, #0]
  40be30:	4770      	bx	lr
  40be32:	2000      	movs	r0, #0
  40be34:	4770      	bx	lr
  40be36:	085b      	lsrs	r3, r3, #1
  40be38:	600b      	str	r3, [r1, #0]
  40be3a:	2001      	movs	r0, #1
  40be3c:	4770      	bx	lr
  40be3e:	bf00      	nop

0040be40 <__i2b>:
  40be40:	b510      	push	{r4, lr}
  40be42:	460c      	mov	r4, r1
  40be44:	2101      	movs	r1, #1
  40be46:	f7ff ff3b 	bl	40bcc0 <_Balloc>
  40be4a:	2201      	movs	r2, #1
  40be4c:	6144      	str	r4, [r0, #20]
  40be4e:	6102      	str	r2, [r0, #16]
  40be50:	bd10      	pop	{r4, pc}
  40be52:	bf00      	nop

0040be54 <__multiply>:
  40be54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40be58:	690c      	ldr	r4, [r1, #16]
  40be5a:	6915      	ldr	r5, [r2, #16]
  40be5c:	42ac      	cmp	r4, r5
  40be5e:	b083      	sub	sp, #12
  40be60:	468b      	mov	fp, r1
  40be62:	4616      	mov	r6, r2
  40be64:	da04      	bge.n	40be70 <__multiply+0x1c>
  40be66:	4622      	mov	r2, r4
  40be68:	46b3      	mov	fp, r6
  40be6a:	462c      	mov	r4, r5
  40be6c:	460e      	mov	r6, r1
  40be6e:	4615      	mov	r5, r2
  40be70:	f8db 3008 	ldr.w	r3, [fp, #8]
  40be74:	f8db 1004 	ldr.w	r1, [fp, #4]
  40be78:	eb04 0805 	add.w	r8, r4, r5
  40be7c:	4598      	cmp	r8, r3
  40be7e:	bfc8      	it	gt
  40be80:	3101      	addgt	r1, #1
  40be82:	f7ff ff1d 	bl	40bcc0 <_Balloc>
  40be86:	f100 0914 	add.w	r9, r0, #20
  40be8a:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40be8e:	45d1      	cmp	r9, sl
  40be90:	9000      	str	r0, [sp, #0]
  40be92:	d205      	bcs.n	40bea0 <__multiply+0x4c>
  40be94:	464b      	mov	r3, r9
  40be96:	2100      	movs	r1, #0
  40be98:	f843 1b04 	str.w	r1, [r3], #4
  40be9c:	459a      	cmp	sl, r3
  40be9e:	d8fb      	bhi.n	40be98 <__multiply+0x44>
  40bea0:	f106 0c14 	add.w	ip, r6, #20
  40bea4:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  40bea8:	f10b 0b14 	add.w	fp, fp, #20
  40beac:	459c      	cmp	ip, r3
  40beae:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40beb2:	d24c      	bcs.n	40bf4e <__multiply+0xfa>
  40beb4:	f8cd a004 	str.w	sl, [sp, #4]
  40beb8:	469a      	mov	sl, r3
  40beba:	f8dc 5000 	ldr.w	r5, [ip]
  40bebe:	b2af      	uxth	r7, r5
  40bec0:	b1ef      	cbz	r7, 40befe <__multiply+0xaa>
  40bec2:	2100      	movs	r1, #0
  40bec4:	464d      	mov	r5, r9
  40bec6:	465e      	mov	r6, fp
  40bec8:	460c      	mov	r4, r1
  40beca:	f856 2b04 	ldr.w	r2, [r6], #4
  40bece:	6828      	ldr	r0, [r5, #0]
  40bed0:	b293      	uxth	r3, r2
  40bed2:	b281      	uxth	r1, r0
  40bed4:	fb07 1303 	mla	r3, r7, r3, r1
  40bed8:	0c12      	lsrs	r2, r2, #16
  40beda:	0c01      	lsrs	r1, r0, #16
  40bedc:	4423      	add	r3, r4
  40bede:	fb07 1102 	mla	r1, r7, r2, r1
  40bee2:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40bee6:	b29b      	uxth	r3, r3
  40bee8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40beec:	45b6      	cmp	lr, r6
  40beee:	f845 3b04 	str.w	r3, [r5], #4
  40bef2:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40bef6:	d8e8      	bhi.n	40beca <__multiply+0x76>
  40bef8:	602c      	str	r4, [r5, #0]
  40befa:	f8dc 5000 	ldr.w	r5, [ip]
  40befe:	0c2d      	lsrs	r5, r5, #16
  40bf00:	d01d      	beq.n	40bf3e <__multiply+0xea>
  40bf02:	f8d9 3000 	ldr.w	r3, [r9]
  40bf06:	4648      	mov	r0, r9
  40bf08:	461c      	mov	r4, r3
  40bf0a:	4659      	mov	r1, fp
  40bf0c:	2200      	movs	r2, #0
  40bf0e:	880e      	ldrh	r6, [r1, #0]
  40bf10:	0c24      	lsrs	r4, r4, #16
  40bf12:	fb05 4406 	mla	r4, r5, r6, r4
  40bf16:	4422      	add	r2, r4
  40bf18:	b29b      	uxth	r3, r3
  40bf1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40bf1e:	f840 3b04 	str.w	r3, [r0], #4
  40bf22:	f851 3b04 	ldr.w	r3, [r1], #4
  40bf26:	6804      	ldr	r4, [r0, #0]
  40bf28:	0c1b      	lsrs	r3, r3, #16
  40bf2a:	b2a6      	uxth	r6, r4
  40bf2c:	fb05 6303 	mla	r3, r5, r3, r6
  40bf30:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  40bf34:	458e      	cmp	lr, r1
  40bf36:	ea4f 4213 	mov.w	r2, r3, lsr #16
  40bf3a:	d8e8      	bhi.n	40bf0e <__multiply+0xba>
  40bf3c:	6003      	str	r3, [r0, #0]
  40bf3e:	f10c 0c04 	add.w	ip, ip, #4
  40bf42:	45e2      	cmp	sl, ip
  40bf44:	f109 0904 	add.w	r9, r9, #4
  40bf48:	d8b7      	bhi.n	40beba <__multiply+0x66>
  40bf4a:	f8dd a004 	ldr.w	sl, [sp, #4]
  40bf4e:	f1b8 0f00 	cmp.w	r8, #0
  40bf52:	dd0b      	ble.n	40bf6c <__multiply+0x118>
  40bf54:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  40bf58:	f1aa 0a04 	sub.w	sl, sl, #4
  40bf5c:	b11b      	cbz	r3, 40bf66 <__multiply+0x112>
  40bf5e:	e005      	b.n	40bf6c <__multiply+0x118>
  40bf60:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  40bf64:	b913      	cbnz	r3, 40bf6c <__multiply+0x118>
  40bf66:	f1b8 0801 	subs.w	r8, r8, #1
  40bf6a:	d1f9      	bne.n	40bf60 <__multiply+0x10c>
  40bf6c:	9800      	ldr	r0, [sp, #0]
  40bf6e:	f8c0 8010 	str.w	r8, [r0, #16]
  40bf72:	b003      	add	sp, #12
  40bf74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040bf78 <__pow5mult>:
  40bf78:	f012 0303 	ands.w	r3, r2, #3
  40bf7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40bf80:	4614      	mov	r4, r2
  40bf82:	4607      	mov	r7, r0
  40bf84:	d12e      	bne.n	40bfe4 <__pow5mult+0x6c>
  40bf86:	460d      	mov	r5, r1
  40bf88:	10a4      	asrs	r4, r4, #2
  40bf8a:	d01c      	beq.n	40bfc6 <__pow5mult+0x4e>
  40bf8c:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40bf8e:	b396      	cbz	r6, 40bff6 <__pow5mult+0x7e>
  40bf90:	07e3      	lsls	r3, r4, #31
  40bf92:	f04f 0800 	mov.w	r8, #0
  40bf96:	d406      	bmi.n	40bfa6 <__pow5mult+0x2e>
  40bf98:	1064      	asrs	r4, r4, #1
  40bf9a:	d014      	beq.n	40bfc6 <__pow5mult+0x4e>
  40bf9c:	6830      	ldr	r0, [r6, #0]
  40bf9e:	b1a8      	cbz	r0, 40bfcc <__pow5mult+0x54>
  40bfa0:	4606      	mov	r6, r0
  40bfa2:	07e3      	lsls	r3, r4, #31
  40bfa4:	d5f8      	bpl.n	40bf98 <__pow5mult+0x20>
  40bfa6:	4632      	mov	r2, r6
  40bfa8:	4629      	mov	r1, r5
  40bfaa:	4638      	mov	r0, r7
  40bfac:	f7ff ff52 	bl	40be54 <__multiply>
  40bfb0:	b1b5      	cbz	r5, 40bfe0 <__pow5mult+0x68>
  40bfb2:	686a      	ldr	r2, [r5, #4]
  40bfb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40bfb6:	1064      	asrs	r4, r4, #1
  40bfb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40bfbc:	6029      	str	r1, [r5, #0]
  40bfbe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40bfc2:	4605      	mov	r5, r0
  40bfc4:	d1ea      	bne.n	40bf9c <__pow5mult+0x24>
  40bfc6:	4628      	mov	r0, r5
  40bfc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40bfcc:	4632      	mov	r2, r6
  40bfce:	4631      	mov	r1, r6
  40bfd0:	4638      	mov	r0, r7
  40bfd2:	f7ff ff3f 	bl	40be54 <__multiply>
  40bfd6:	6030      	str	r0, [r6, #0]
  40bfd8:	f8c0 8000 	str.w	r8, [r0]
  40bfdc:	4606      	mov	r6, r0
  40bfde:	e7e0      	b.n	40bfa2 <__pow5mult+0x2a>
  40bfe0:	4605      	mov	r5, r0
  40bfe2:	e7d9      	b.n	40bf98 <__pow5mult+0x20>
  40bfe4:	1e5a      	subs	r2, r3, #1
  40bfe6:	4d0b      	ldr	r5, [pc, #44]	; (40c014 <__pow5mult+0x9c>)
  40bfe8:	2300      	movs	r3, #0
  40bfea:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40bfee:	f7ff fe97 	bl	40bd20 <__multadd>
  40bff2:	4605      	mov	r5, r0
  40bff4:	e7c8      	b.n	40bf88 <__pow5mult+0x10>
  40bff6:	2101      	movs	r1, #1
  40bff8:	4638      	mov	r0, r7
  40bffa:	f7ff fe61 	bl	40bcc0 <_Balloc>
  40bffe:	f240 2171 	movw	r1, #625	; 0x271
  40c002:	2201      	movs	r2, #1
  40c004:	2300      	movs	r3, #0
  40c006:	6141      	str	r1, [r0, #20]
  40c008:	6102      	str	r2, [r0, #16]
  40c00a:	4606      	mov	r6, r0
  40c00c:	64b8      	str	r0, [r7, #72]	; 0x48
  40c00e:	6003      	str	r3, [r0, #0]
  40c010:	e7be      	b.n	40bf90 <__pow5mult+0x18>
  40c012:	bf00      	nop
  40c014:	0040dca0 	.word	0x0040dca0

0040c018 <__lshift>:
  40c018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40c01c:	4691      	mov	r9, r2
  40c01e:	690a      	ldr	r2, [r1, #16]
  40c020:	688b      	ldr	r3, [r1, #8]
  40c022:	ea4f 1469 	mov.w	r4, r9, asr #5
  40c026:	eb04 0802 	add.w	r8, r4, r2
  40c02a:	f108 0501 	add.w	r5, r8, #1
  40c02e:	429d      	cmp	r5, r3
  40c030:	460e      	mov	r6, r1
  40c032:	4607      	mov	r7, r0
  40c034:	6849      	ldr	r1, [r1, #4]
  40c036:	dd04      	ble.n	40c042 <__lshift+0x2a>
  40c038:	005b      	lsls	r3, r3, #1
  40c03a:	429d      	cmp	r5, r3
  40c03c:	f101 0101 	add.w	r1, r1, #1
  40c040:	dcfa      	bgt.n	40c038 <__lshift+0x20>
  40c042:	4638      	mov	r0, r7
  40c044:	f7ff fe3c 	bl	40bcc0 <_Balloc>
  40c048:	2c00      	cmp	r4, #0
  40c04a:	f100 0314 	add.w	r3, r0, #20
  40c04e:	dd06      	ble.n	40c05e <__lshift+0x46>
  40c050:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  40c054:	2100      	movs	r1, #0
  40c056:	f843 1b04 	str.w	r1, [r3], #4
  40c05a:	429a      	cmp	r2, r3
  40c05c:	d1fb      	bne.n	40c056 <__lshift+0x3e>
  40c05e:	6934      	ldr	r4, [r6, #16]
  40c060:	f106 0114 	add.w	r1, r6, #20
  40c064:	f019 091f 	ands.w	r9, r9, #31
  40c068:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  40c06c:	d01d      	beq.n	40c0aa <__lshift+0x92>
  40c06e:	f1c9 0c20 	rsb	ip, r9, #32
  40c072:	2200      	movs	r2, #0
  40c074:	680c      	ldr	r4, [r1, #0]
  40c076:	fa04 f409 	lsl.w	r4, r4, r9
  40c07a:	4314      	orrs	r4, r2
  40c07c:	f843 4b04 	str.w	r4, [r3], #4
  40c080:	f851 2b04 	ldr.w	r2, [r1], #4
  40c084:	458e      	cmp	lr, r1
  40c086:	fa22 f20c 	lsr.w	r2, r2, ip
  40c08a:	d8f3      	bhi.n	40c074 <__lshift+0x5c>
  40c08c:	601a      	str	r2, [r3, #0]
  40c08e:	b10a      	cbz	r2, 40c094 <__lshift+0x7c>
  40c090:	f108 0502 	add.w	r5, r8, #2
  40c094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40c096:	6872      	ldr	r2, [r6, #4]
  40c098:	3d01      	subs	r5, #1
  40c09a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40c09e:	6105      	str	r5, [r0, #16]
  40c0a0:	6031      	str	r1, [r6, #0]
  40c0a2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40c0a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40c0aa:	3b04      	subs	r3, #4
  40c0ac:	f851 2b04 	ldr.w	r2, [r1], #4
  40c0b0:	f843 2f04 	str.w	r2, [r3, #4]!
  40c0b4:	458e      	cmp	lr, r1
  40c0b6:	d8f9      	bhi.n	40c0ac <__lshift+0x94>
  40c0b8:	e7ec      	b.n	40c094 <__lshift+0x7c>
  40c0ba:	bf00      	nop

0040c0bc <__mcmp>:
  40c0bc:	b430      	push	{r4, r5}
  40c0be:	690b      	ldr	r3, [r1, #16]
  40c0c0:	4605      	mov	r5, r0
  40c0c2:	6900      	ldr	r0, [r0, #16]
  40c0c4:	1ac0      	subs	r0, r0, r3
  40c0c6:	d10f      	bne.n	40c0e8 <__mcmp+0x2c>
  40c0c8:	009b      	lsls	r3, r3, #2
  40c0ca:	3514      	adds	r5, #20
  40c0cc:	3114      	adds	r1, #20
  40c0ce:	4419      	add	r1, r3
  40c0d0:	442b      	add	r3, r5
  40c0d2:	e001      	b.n	40c0d8 <__mcmp+0x1c>
  40c0d4:	429d      	cmp	r5, r3
  40c0d6:	d207      	bcs.n	40c0e8 <__mcmp+0x2c>
  40c0d8:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40c0dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40c0e0:	4294      	cmp	r4, r2
  40c0e2:	d0f7      	beq.n	40c0d4 <__mcmp+0x18>
  40c0e4:	d302      	bcc.n	40c0ec <__mcmp+0x30>
  40c0e6:	2001      	movs	r0, #1
  40c0e8:	bc30      	pop	{r4, r5}
  40c0ea:	4770      	bx	lr
  40c0ec:	f04f 30ff 	mov.w	r0, #4294967295
  40c0f0:	e7fa      	b.n	40c0e8 <__mcmp+0x2c>
  40c0f2:	bf00      	nop

0040c0f4 <__mdiff>:
  40c0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40c0f8:	690f      	ldr	r7, [r1, #16]
  40c0fa:	460e      	mov	r6, r1
  40c0fc:	6911      	ldr	r1, [r2, #16]
  40c0fe:	1a7f      	subs	r7, r7, r1
  40c100:	2f00      	cmp	r7, #0
  40c102:	4690      	mov	r8, r2
  40c104:	d117      	bne.n	40c136 <__mdiff+0x42>
  40c106:	0089      	lsls	r1, r1, #2
  40c108:	f106 0514 	add.w	r5, r6, #20
  40c10c:	f102 0e14 	add.w	lr, r2, #20
  40c110:	186b      	adds	r3, r5, r1
  40c112:	4471      	add	r1, lr
  40c114:	e001      	b.n	40c11a <__mdiff+0x26>
  40c116:	429d      	cmp	r5, r3
  40c118:	d25c      	bcs.n	40c1d4 <__mdiff+0xe0>
  40c11a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40c11e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40c122:	42a2      	cmp	r2, r4
  40c124:	d0f7      	beq.n	40c116 <__mdiff+0x22>
  40c126:	d25e      	bcs.n	40c1e6 <__mdiff+0xf2>
  40c128:	4633      	mov	r3, r6
  40c12a:	462c      	mov	r4, r5
  40c12c:	4646      	mov	r6, r8
  40c12e:	4675      	mov	r5, lr
  40c130:	4698      	mov	r8, r3
  40c132:	2701      	movs	r7, #1
  40c134:	e005      	b.n	40c142 <__mdiff+0x4e>
  40c136:	db58      	blt.n	40c1ea <__mdiff+0xf6>
  40c138:	f106 0514 	add.w	r5, r6, #20
  40c13c:	f108 0414 	add.w	r4, r8, #20
  40c140:	2700      	movs	r7, #0
  40c142:	6871      	ldr	r1, [r6, #4]
  40c144:	f7ff fdbc 	bl	40bcc0 <_Balloc>
  40c148:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40c14c:	6936      	ldr	r6, [r6, #16]
  40c14e:	60c7      	str	r7, [r0, #12]
  40c150:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40c154:	46a6      	mov	lr, r4
  40c156:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  40c15a:	f100 0414 	add.w	r4, r0, #20
  40c15e:	2300      	movs	r3, #0
  40c160:	f85e 1b04 	ldr.w	r1, [lr], #4
  40c164:	f855 8b04 	ldr.w	r8, [r5], #4
  40c168:	b28a      	uxth	r2, r1
  40c16a:	fa13 f388 	uxtah	r3, r3, r8
  40c16e:	0c09      	lsrs	r1, r1, #16
  40c170:	1a9a      	subs	r2, r3, r2
  40c172:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40c176:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40c17a:	b292      	uxth	r2, r2
  40c17c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40c180:	45f4      	cmp	ip, lr
  40c182:	f844 2b04 	str.w	r2, [r4], #4
  40c186:	ea4f 4323 	mov.w	r3, r3, asr #16
  40c18a:	d8e9      	bhi.n	40c160 <__mdiff+0x6c>
  40c18c:	42af      	cmp	r7, r5
  40c18e:	d917      	bls.n	40c1c0 <__mdiff+0xcc>
  40c190:	46a4      	mov	ip, r4
  40c192:	46ae      	mov	lr, r5
  40c194:	f85e 2b04 	ldr.w	r2, [lr], #4
  40c198:	fa13 f382 	uxtah	r3, r3, r2
  40c19c:	1419      	asrs	r1, r3, #16
  40c19e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40c1a2:	b29b      	uxth	r3, r3
  40c1a4:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  40c1a8:	4577      	cmp	r7, lr
  40c1aa:	f84c 2b04 	str.w	r2, [ip], #4
  40c1ae:	ea4f 4321 	mov.w	r3, r1, asr #16
  40c1b2:	d8ef      	bhi.n	40c194 <__mdiff+0xa0>
  40c1b4:	43ed      	mvns	r5, r5
  40c1b6:	442f      	add	r7, r5
  40c1b8:	f027 0703 	bic.w	r7, r7, #3
  40c1bc:	3704      	adds	r7, #4
  40c1be:	443c      	add	r4, r7
  40c1c0:	3c04      	subs	r4, #4
  40c1c2:	b922      	cbnz	r2, 40c1ce <__mdiff+0xda>
  40c1c4:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40c1c8:	3e01      	subs	r6, #1
  40c1ca:	2b00      	cmp	r3, #0
  40c1cc:	d0fa      	beq.n	40c1c4 <__mdiff+0xd0>
  40c1ce:	6106      	str	r6, [r0, #16]
  40c1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40c1d4:	2100      	movs	r1, #0
  40c1d6:	f7ff fd73 	bl	40bcc0 <_Balloc>
  40c1da:	2201      	movs	r2, #1
  40c1dc:	2300      	movs	r3, #0
  40c1de:	6102      	str	r2, [r0, #16]
  40c1e0:	6143      	str	r3, [r0, #20]
  40c1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40c1e6:	4674      	mov	r4, lr
  40c1e8:	e7ab      	b.n	40c142 <__mdiff+0x4e>
  40c1ea:	4633      	mov	r3, r6
  40c1ec:	f106 0414 	add.w	r4, r6, #20
  40c1f0:	f102 0514 	add.w	r5, r2, #20
  40c1f4:	4616      	mov	r6, r2
  40c1f6:	2701      	movs	r7, #1
  40c1f8:	4698      	mov	r8, r3
  40c1fa:	e7a2      	b.n	40c142 <__mdiff+0x4e>

0040c1fc <__d2b>:
  40c1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40c200:	b082      	sub	sp, #8
  40c202:	2101      	movs	r1, #1
  40c204:	461c      	mov	r4, r3
  40c206:	f3c3 570a 	ubfx	r7, r3, #20, #11
  40c20a:	4615      	mov	r5, r2
  40c20c:	9e08      	ldr	r6, [sp, #32]
  40c20e:	f7ff fd57 	bl	40bcc0 <_Balloc>
  40c212:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40c216:	4680      	mov	r8, r0
  40c218:	b10f      	cbz	r7, 40c21e <__d2b+0x22>
  40c21a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40c21e:	9401      	str	r4, [sp, #4]
  40c220:	b31d      	cbz	r5, 40c26a <__d2b+0x6e>
  40c222:	a802      	add	r0, sp, #8
  40c224:	f840 5d08 	str.w	r5, [r0, #-8]!
  40c228:	f7ff fdda 	bl	40bde0 <__lo0bits>
  40c22c:	2800      	cmp	r0, #0
  40c22e:	d134      	bne.n	40c29a <__d2b+0x9e>
  40c230:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40c234:	f8c8 2014 	str.w	r2, [r8, #20]
  40c238:	2b00      	cmp	r3, #0
  40c23a:	bf0c      	ite	eq
  40c23c:	2101      	moveq	r1, #1
  40c23e:	2102      	movne	r1, #2
  40c240:	f8c8 3018 	str.w	r3, [r8, #24]
  40c244:	f8c8 1010 	str.w	r1, [r8, #16]
  40c248:	b9df      	cbnz	r7, 40c282 <__d2b+0x86>
  40c24a:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40c24e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40c252:	6030      	str	r0, [r6, #0]
  40c254:	6918      	ldr	r0, [r3, #16]
  40c256:	f7ff fda3 	bl	40bda0 <__hi0bits>
  40c25a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40c25c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40c260:	6018      	str	r0, [r3, #0]
  40c262:	4640      	mov	r0, r8
  40c264:	b002      	add	sp, #8
  40c266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40c26a:	a801      	add	r0, sp, #4
  40c26c:	f7ff fdb8 	bl	40bde0 <__lo0bits>
  40c270:	9b01      	ldr	r3, [sp, #4]
  40c272:	f8c8 3014 	str.w	r3, [r8, #20]
  40c276:	2101      	movs	r1, #1
  40c278:	3020      	adds	r0, #32
  40c27a:	f8c8 1010 	str.w	r1, [r8, #16]
  40c27e:	2f00      	cmp	r7, #0
  40c280:	d0e3      	beq.n	40c24a <__d2b+0x4e>
  40c282:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40c284:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40c288:	4407      	add	r7, r0
  40c28a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40c28e:	6037      	str	r7, [r6, #0]
  40c290:	6018      	str	r0, [r3, #0]
  40c292:	4640      	mov	r0, r8
  40c294:	b002      	add	sp, #8
  40c296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40c29a:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40c29e:	f1c0 0220 	rsb	r2, r0, #32
  40c2a2:	fa03 f202 	lsl.w	r2, r3, r2
  40c2a6:	430a      	orrs	r2, r1
  40c2a8:	40c3      	lsrs	r3, r0
  40c2aa:	9301      	str	r3, [sp, #4]
  40c2ac:	f8c8 2014 	str.w	r2, [r8, #20]
  40c2b0:	e7c2      	b.n	40c238 <__d2b+0x3c>
  40c2b2:	bf00      	nop

0040c2b4 <_realloc_r>:
  40c2b4:	2900      	cmp	r1, #0
  40c2b6:	f000 8095 	beq.w	40c3e4 <_realloc_r+0x130>
  40c2ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c2be:	460d      	mov	r5, r1
  40c2c0:	4616      	mov	r6, r2
  40c2c2:	b083      	sub	sp, #12
  40c2c4:	4680      	mov	r8, r0
  40c2c6:	f106 070b 	add.w	r7, r6, #11
  40c2ca:	f7ff fced 	bl	40bca8 <__malloc_lock>
  40c2ce:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40c2d2:	2f16      	cmp	r7, #22
  40c2d4:	f02e 0403 	bic.w	r4, lr, #3
  40c2d8:	f1a5 0908 	sub.w	r9, r5, #8
  40c2dc:	d83c      	bhi.n	40c358 <_realloc_r+0xa4>
  40c2de:	2210      	movs	r2, #16
  40c2e0:	4617      	mov	r7, r2
  40c2e2:	42be      	cmp	r6, r7
  40c2e4:	d83d      	bhi.n	40c362 <_realloc_r+0xae>
  40c2e6:	4294      	cmp	r4, r2
  40c2e8:	da43      	bge.n	40c372 <_realloc_r+0xbe>
  40c2ea:	4bc4      	ldr	r3, [pc, #784]	; (40c5fc <_realloc_r+0x348>)
  40c2ec:	6899      	ldr	r1, [r3, #8]
  40c2ee:	eb09 0004 	add.w	r0, r9, r4
  40c2f2:	4288      	cmp	r0, r1
  40c2f4:	f000 80b4 	beq.w	40c460 <_realloc_r+0x1ac>
  40c2f8:	6843      	ldr	r3, [r0, #4]
  40c2fa:	f023 0101 	bic.w	r1, r3, #1
  40c2fe:	4401      	add	r1, r0
  40c300:	6849      	ldr	r1, [r1, #4]
  40c302:	07c9      	lsls	r1, r1, #31
  40c304:	d54c      	bpl.n	40c3a0 <_realloc_r+0xec>
  40c306:	f01e 0f01 	tst.w	lr, #1
  40c30a:	f000 809b 	beq.w	40c444 <_realloc_r+0x190>
  40c30e:	4631      	mov	r1, r6
  40c310:	4640      	mov	r0, r8
  40c312:	f7ff f949 	bl	40b5a8 <_malloc_r>
  40c316:	4606      	mov	r6, r0
  40c318:	2800      	cmp	r0, #0
  40c31a:	d03a      	beq.n	40c392 <_realloc_r+0xde>
  40c31c:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40c320:	f023 0301 	bic.w	r3, r3, #1
  40c324:	444b      	add	r3, r9
  40c326:	f1a0 0208 	sub.w	r2, r0, #8
  40c32a:	429a      	cmp	r2, r3
  40c32c:	f000 8121 	beq.w	40c572 <_realloc_r+0x2be>
  40c330:	1f22      	subs	r2, r4, #4
  40c332:	2a24      	cmp	r2, #36	; 0x24
  40c334:	f200 8107 	bhi.w	40c546 <_realloc_r+0x292>
  40c338:	2a13      	cmp	r2, #19
  40c33a:	f200 80db 	bhi.w	40c4f4 <_realloc_r+0x240>
  40c33e:	4603      	mov	r3, r0
  40c340:	462a      	mov	r2, r5
  40c342:	6811      	ldr	r1, [r2, #0]
  40c344:	6019      	str	r1, [r3, #0]
  40c346:	6851      	ldr	r1, [r2, #4]
  40c348:	6059      	str	r1, [r3, #4]
  40c34a:	6892      	ldr	r2, [r2, #8]
  40c34c:	609a      	str	r2, [r3, #8]
  40c34e:	4629      	mov	r1, r5
  40c350:	4640      	mov	r0, r8
  40c352:	f7fe fdfd 	bl	40af50 <_free_r>
  40c356:	e01c      	b.n	40c392 <_realloc_r+0xde>
  40c358:	f027 0707 	bic.w	r7, r7, #7
  40c35c:	2f00      	cmp	r7, #0
  40c35e:	463a      	mov	r2, r7
  40c360:	dabf      	bge.n	40c2e2 <_realloc_r+0x2e>
  40c362:	2600      	movs	r6, #0
  40c364:	230c      	movs	r3, #12
  40c366:	4630      	mov	r0, r6
  40c368:	f8c8 3000 	str.w	r3, [r8]
  40c36c:	b003      	add	sp, #12
  40c36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c372:	462e      	mov	r6, r5
  40c374:	1be3      	subs	r3, r4, r7
  40c376:	2b0f      	cmp	r3, #15
  40c378:	d81e      	bhi.n	40c3b8 <_realloc_r+0x104>
  40c37a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40c37e:	f003 0301 	and.w	r3, r3, #1
  40c382:	4323      	orrs	r3, r4
  40c384:	444c      	add	r4, r9
  40c386:	f8c9 3004 	str.w	r3, [r9, #4]
  40c38a:	6863      	ldr	r3, [r4, #4]
  40c38c:	f043 0301 	orr.w	r3, r3, #1
  40c390:	6063      	str	r3, [r4, #4]
  40c392:	4640      	mov	r0, r8
  40c394:	f7ff fc8e 	bl	40bcb4 <__malloc_unlock>
  40c398:	4630      	mov	r0, r6
  40c39a:	b003      	add	sp, #12
  40c39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c3a0:	f023 0303 	bic.w	r3, r3, #3
  40c3a4:	18e1      	adds	r1, r4, r3
  40c3a6:	4291      	cmp	r1, r2
  40c3a8:	db1f      	blt.n	40c3ea <_realloc_r+0x136>
  40c3aa:	68c3      	ldr	r3, [r0, #12]
  40c3ac:	6882      	ldr	r2, [r0, #8]
  40c3ae:	462e      	mov	r6, r5
  40c3b0:	60d3      	str	r3, [r2, #12]
  40c3b2:	460c      	mov	r4, r1
  40c3b4:	609a      	str	r2, [r3, #8]
  40c3b6:	e7dd      	b.n	40c374 <_realloc_r+0xc0>
  40c3b8:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40c3bc:	eb09 0107 	add.w	r1, r9, r7
  40c3c0:	f002 0201 	and.w	r2, r2, #1
  40c3c4:	444c      	add	r4, r9
  40c3c6:	f043 0301 	orr.w	r3, r3, #1
  40c3ca:	4317      	orrs	r7, r2
  40c3cc:	f8c9 7004 	str.w	r7, [r9, #4]
  40c3d0:	604b      	str	r3, [r1, #4]
  40c3d2:	6863      	ldr	r3, [r4, #4]
  40c3d4:	f043 0301 	orr.w	r3, r3, #1
  40c3d8:	3108      	adds	r1, #8
  40c3da:	6063      	str	r3, [r4, #4]
  40c3dc:	4640      	mov	r0, r8
  40c3de:	f7fe fdb7 	bl	40af50 <_free_r>
  40c3e2:	e7d6      	b.n	40c392 <_realloc_r+0xde>
  40c3e4:	4611      	mov	r1, r2
  40c3e6:	f7ff b8df 	b.w	40b5a8 <_malloc_r>
  40c3ea:	f01e 0f01 	tst.w	lr, #1
  40c3ee:	d18e      	bne.n	40c30e <_realloc_r+0x5a>
  40c3f0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40c3f4:	eba9 0a01 	sub.w	sl, r9, r1
  40c3f8:	f8da 1004 	ldr.w	r1, [sl, #4]
  40c3fc:	f021 0103 	bic.w	r1, r1, #3
  40c400:	440b      	add	r3, r1
  40c402:	4423      	add	r3, r4
  40c404:	4293      	cmp	r3, r2
  40c406:	db25      	blt.n	40c454 <_realloc_r+0x1a0>
  40c408:	68c2      	ldr	r2, [r0, #12]
  40c40a:	6881      	ldr	r1, [r0, #8]
  40c40c:	4656      	mov	r6, sl
  40c40e:	60ca      	str	r2, [r1, #12]
  40c410:	6091      	str	r1, [r2, #8]
  40c412:	f8da 100c 	ldr.w	r1, [sl, #12]
  40c416:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40c41a:	1f22      	subs	r2, r4, #4
  40c41c:	2a24      	cmp	r2, #36	; 0x24
  40c41e:	60c1      	str	r1, [r0, #12]
  40c420:	6088      	str	r0, [r1, #8]
  40c422:	f200 8094 	bhi.w	40c54e <_realloc_r+0x29a>
  40c426:	2a13      	cmp	r2, #19
  40c428:	d96f      	bls.n	40c50a <_realloc_r+0x256>
  40c42a:	6829      	ldr	r1, [r5, #0]
  40c42c:	f8ca 1008 	str.w	r1, [sl, #8]
  40c430:	6869      	ldr	r1, [r5, #4]
  40c432:	f8ca 100c 	str.w	r1, [sl, #12]
  40c436:	2a1b      	cmp	r2, #27
  40c438:	f200 80a2 	bhi.w	40c580 <_realloc_r+0x2cc>
  40c43c:	3508      	adds	r5, #8
  40c43e:	f10a 0210 	add.w	r2, sl, #16
  40c442:	e063      	b.n	40c50c <_realloc_r+0x258>
  40c444:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40c448:	eba9 0a03 	sub.w	sl, r9, r3
  40c44c:	f8da 1004 	ldr.w	r1, [sl, #4]
  40c450:	f021 0103 	bic.w	r1, r1, #3
  40c454:	1863      	adds	r3, r4, r1
  40c456:	4293      	cmp	r3, r2
  40c458:	f6ff af59 	blt.w	40c30e <_realloc_r+0x5a>
  40c45c:	4656      	mov	r6, sl
  40c45e:	e7d8      	b.n	40c412 <_realloc_r+0x15e>
  40c460:	6841      	ldr	r1, [r0, #4]
  40c462:	f021 0b03 	bic.w	fp, r1, #3
  40c466:	44a3      	add	fp, r4
  40c468:	f107 0010 	add.w	r0, r7, #16
  40c46c:	4583      	cmp	fp, r0
  40c46e:	da56      	bge.n	40c51e <_realloc_r+0x26a>
  40c470:	f01e 0f01 	tst.w	lr, #1
  40c474:	f47f af4b 	bne.w	40c30e <_realloc_r+0x5a>
  40c478:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40c47c:	eba9 0a01 	sub.w	sl, r9, r1
  40c480:	f8da 1004 	ldr.w	r1, [sl, #4]
  40c484:	f021 0103 	bic.w	r1, r1, #3
  40c488:	448b      	add	fp, r1
  40c48a:	4558      	cmp	r0, fp
  40c48c:	dce2      	bgt.n	40c454 <_realloc_r+0x1a0>
  40c48e:	4656      	mov	r6, sl
  40c490:	f8da 100c 	ldr.w	r1, [sl, #12]
  40c494:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40c498:	1f22      	subs	r2, r4, #4
  40c49a:	2a24      	cmp	r2, #36	; 0x24
  40c49c:	60c1      	str	r1, [r0, #12]
  40c49e:	6088      	str	r0, [r1, #8]
  40c4a0:	f200 808f 	bhi.w	40c5c2 <_realloc_r+0x30e>
  40c4a4:	2a13      	cmp	r2, #19
  40c4a6:	f240 808a 	bls.w	40c5be <_realloc_r+0x30a>
  40c4aa:	6829      	ldr	r1, [r5, #0]
  40c4ac:	f8ca 1008 	str.w	r1, [sl, #8]
  40c4b0:	6869      	ldr	r1, [r5, #4]
  40c4b2:	f8ca 100c 	str.w	r1, [sl, #12]
  40c4b6:	2a1b      	cmp	r2, #27
  40c4b8:	f200 808a 	bhi.w	40c5d0 <_realloc_r+0x31c>
  40c4bc:	3508      	adds	r5, #8
  40c4be:	f10a 0210 	add.w	r2, sl, #16
  40c4c2:	6829      	ldr	r1, [r5, #0]
  40c4c4:	6011      	str	r1, [r2, #0]
  40c4c6:	6869      	ldr	r1, [r5, #4]
  40c4c8:	6051      	str	r1, [r2, #4]
  40c4ca:	68a9      	ldr	r1, [r5, #8]
  40c4cc:	6091      	str	r1, [r2, #8]
  40c4ce:	eb0a 0107 	add.w	r1, sl, r7
  40c4d2:	ebab 0207 	sub.w	r2, fp, r7
  40c4d6:	f042 0201 	orr.w	r2, r2, #1
  40c4da:	6099      	str	r1, [r3, #8]
  40c4dc:	604a      	str	r2, [r1, #4]
  40c4de:	f8da 3004 	ldr.w	r3, [sl, #4]
  40c4e2:	f003 0301 	and.w	r3, r3, #1
  40c4e6:	431f      	orrs	r7, r3
  40c4e8:	4640      	mov	r0, r8
  40c4ea:	f8ca 7004 	str.w	r7, [sl, #4]
  40c4ee:	f7ff fbe1 	bl	40bcb4 <__malloc_unlock>
  40c4f2:	e751      	b.n	40c398 <_realloc_r+0xe4>
  40c4f4:	682b      	ldr	r3, [r5, #0]
  40c4f6:	6003      	str	r3, [r0, #0]
  40c4f8:	686b      	ldr	r3, [r5, #4]
  40c4fa:	6043      	str	r3, [r0, #4]
  40c4fc:	2a1b      	cmp	r2, #27
  40c4fe:	d82d      	bhi.n	40c55c <_realloc_r+0x2a8>
  40c500:	f100 0308 	add.w	r3, r0, #8
  40c504:	f105 0208 	add.w	r2, r5, #8
  40c508:	e71b      	b.n	40c342 <_realloc_r+0x8e>
  40c50a:	4632      	mov	r2, r6
  40c50c:	6829      	ldr	r1, [r5, #0]
  40c50e:	6011      	str	r1, [r2, #0]
  40c510:	6869      	ldr	r1, [r5, #4]
  40c512:	6051      	str	r1, [r2, #4]
  40c514:	68a9      	ldr	r1, [r5, #8]
  40c516:	6091      	str	r1, [r2, #8]
  40c518:	461c      	mov	r4, r3
  40c51a:	46d1      	mov	r9, sl
  40c51c:	e72a      	b.n	40c374 <_realloc_r+0xc0>
  40c51e:	eb09 0107 	add.w	r1, r9, r7
  40c522:	ebab 0b07 	sub.w	fp, fp, r7
  40c526:	f04b 0201 	orr.w	r2, fp, #1
  40c52a:	6099      	str	r1, [r3, #8]
  40c52c:	604a      	str	r2, [r1, #4]
  40c52e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40c532:	f003 0301 	and.w	r3, r3, #1
  40c536:	431f      	orrs	r7, r3
  40c538:	4640      	mov	r0, r8
  40c53a:	f845 7c04 	str.w	r7, [r5, #-4]
  40c53e:	f7ff fbb9 	bl	40bcb4 <__malloc_unlock>
  40c542:	462e      	mov	r6, r5
  40c544:	e728      	b.n	40c398 <_realloc_r+0xe4>
  40c546:	4629      	mov	r1, r5
  40c548:	f7ff fb4a 	bl	40bbe0 <memmove>
  40c54c:	e6ff      	b.n	40c34e <_realloc_r+0x9a>
  40c54e:	4629      	mov	r1, r5
  40c550:	4630      	mov	r0, r6
  40c552:	461c      	mov	r4, r3
  40c554:	46d1      	mov	r9, sl
  40c556:	f7ff fb43 	bl	40bbe0 <memmove>
  40c55a:	e70b      	b.n	40c374 <_realloc_r+0xc0>
  40c55c:	68ab      	ldr	r3, [r5, #8]
  40c55e:	6083      	str	r3, [r0, #8]
  40c560:	68eb      	ldr	r3, [r5, #12]
  40c562:	60c3      	str	r3, [r0, #12]
  40c564:	2a24      	cmp	r2, #36	; 0x24
  40c566:	d017      	beq.n	40c598 <_realloc_r+0x2e4>
  40c568:	f100 0310 	add.w	r3, r0, #16
  40c56c:	f105 0210 	add.w	r2, r5, #16
  40c570:	e6e7      	b.n	40c342 <_realloc_r+0x8e>
  40c572:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40c576:	f023 0303 	bic.w	r3, r3, #3
  40c57a:	441c      	add	r4, r3
  40c57c:	462e      	mov	r6, r5
  40c57e:	e6f9      	b.n	40c374 <_realloc_r+0xc0>
  40c580:	68a9      	ldr	r1, [r5, #8]
  40c582:	f8ca 1010 	str.w	r1, [sl, #16]
  40c586:	68e9      	ldr	r1, [r5, #12]
  40c588:	f8ca 1014 	str.w	r1, [sl, #20]
  40c58c:	2a24      	cmp	r2, #36	; 0x24
  40c58e:	d00c      	beq.n	40c5aa <_realloc_r+0x2f6>
  40c590:	3510      	adds	r5, #16
  40c592:	f10a 0218 	add.w	r2, sl, #24
  40c596:	e7b9      	b.n	40c50c <_realloc_r+0x258>
  40c598:	692b      	ldr	r3, [r5, #16]
  40c59a:	6103      	str	r3, [r0, #16]
  40c59c:	696b      	ldr	r3, [r5, #20]
  40c59e:	6143      	str	r3, [r0, #20]
  40c5a0:	f105 0218 	add.w	r2, r5, #24
  40c5a4:	f100 0318 	add.w	r3, r0, #24
  40c5a8:	e6cb      	b.n	40c342 <_realloc_r+0x8e>
  40c5aa:	692a      	ldr	r2, [r5, #16]
  40c5ac:	f8ca 2018 	str.w	r2, [sl, #24]
  40c5b0:	696a      	ldr	r2, [r5, #20]
  40c5b2:	f8ca 201c 	str.w	r2, [sl, #28]
  40c5b6:	3518      	adds	r5, #24
  40c5b8:	f10a 0220 	add.w	r2, sl, #32
  40c5bc:	e7a6      	b.n	40c50c <_realloc_r+0x258>
  40c5be:	4632      	mov	r2, r6
  40c5c0:	e77f      	b.n	40c4c2 <_realloc_r+0x20e>
  40c5c2:	4629      	mov	r1, r5
  40c5c4:	4630      	mov	r0, r6
  40c5c6:	9301      	str	r3, [sp, #4]
  40c5c8:	f7ff fb0a 	bl	40bbe0 <memmove>
  40c5cc:	9b01      	ldr	r3, [sp, #4]
  40c5ce:	e77e      	b.n	40c4ce <_realloc_r+0x21a>
  40c5d0:	68a9      	ldr	r1, [r5, #8]
  40c5d2:	f8ca 1010 	str.w	r1, [sl, #16]
  40c5d6:	68e9      	ldr	r1, [r5, #12]
  40c5d8:	f8ca 1014 	str.w	r1, [sl, #20]
  40c5dc:	2a24      	cmp	r2, #36	; 0x24
  40c5de:	d003      	beq.n	40c5e8 <_realloc_r+0x334>
  40c5e0:	3510      	adds	r5, #16
  40c5e2:	f10a 0218 	add.w	r2, sl, #24
  40c5e6:	e76c      	b.n	40c4c2 <_realloc_r+0x20e>
  40c5e8:	692a      	ldr	r2, [r5, #16]
  40c5ea:	f8ca 2018 	str.w	r2, [sl, #24]
  40c5ee:	696a      	ldr	r2, [r5, #20]
  40c5f0:	f8ca 201c 	str.w	r2, [sl, #28]
  40c5f4:	3518      	adds	r5, #24
  40c5f6:	f10a 0220 	add.w	r2, sl, #32
  40c5fa:	e762      	b.n	40c4c2 <_realloc_r+0x20e>
  40c5fc:	20400600 	.word	0x20400600

0040c600 <_sbrk_r>:
  40c600:	b538      	push	{r3, r4, r5, lr}
  40c602:	4c07      	ldr	r4, [pc, #28]	; (40c620 <_sbrk_r+0x20>)
  40c604:	2300      	movs	r3, #0
  40c606:	4605      	mov	r5, r0
  40c608:	4608      	mov	r0, r1
  40c60a:	6023      	str	r3, [r4, #0]
  40c60c:	f7f4 fd9a 	bl	401144 <_sbrk>
  40c610:	1c43      	adds	r3, r0, #1
  40c612:	d000      	beq.n	40c616 <_sbrk_r+0x16>
  40c614:	bd38      	pop	{r3, r4, r5, pc}
  40c616:	6823      	ldr	r3, [r4, #0]
  40c618:	2b00      	cmp	r3, #0
  40c61a:	d0fb      	beq.n	40c614 <_sbrk_r+0x14>
  40c61c:	602b      	str	r3, [r5, #0]
  40c61e:	bd38      	pop	{r3, r4, r5, pc}
  40c620:	204049e0 	.word	0x204049e0

0040c624 <__sread>:
  40c624:	b510      	push	{r4, lr}
  40c626:	460c      	mov	r4, r1
  40c628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40c62c:	f000 faa4 	bl	40cb78 <_read_r>
  40c630:	2800      	cmp	r0, #0
  40c632:	db03      	blt.n	40c63c <__sread+0x18>
  40c634:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40c636:	4403      	add	r3, r0
  40c638:	6523      	str	r3, [r4, #80]	; 0x50
  40c63a:	bd10      	pop	{r4, pc}
  40c63c:	89a3      	ldrh	r3, [r4, #12]
  40c63e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40c642:	81a3      	strh	r3, [r4, #12]
  40c644:	bd10      	pop	{r4, pc}
  40c646:	bf00      	nop

0040c648 <__swrite>:
  40c648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40c64c:	4616      	mov	r6, r2
  40c64e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40c652:	461f      	mov	r7, r3
  40c654:	05d3      	lsls	r3, r2, #23
  40c656:	460c      	mov	r4, r1
  40c658:	4605      	mov	r5, r0
  40c65a:	d507      	bpl.n	40c66c <__swrite+0x24>
  40c65c:	2200      	movs	r2, #0
  40c65e:	2302      	movs	r3, #2
  40c660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40c664:	f000 fa72 	bl	40cb4c <_lseek_r>
  40c668:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40c66c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40c670:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40c674:	81a2      	strh	r2, [r4, #12]
  40c676:	463b      	mov	r3, r7
  40c678:	4632      	mov	r2, r6
  40c67a:	4628      	mov	r0, r5
  40c67c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40c680:	f000 b922 	b.w	40c8c8 <_write_r>

0040c684 <__sseek>:
  40c684:	b510      	push	{r4, lr}
  40c686:	460c      	mov	r4, r1
  40c688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40c68c:	f000 fa5e 	bl	40cb4c <_lseek_r>
  40c690:	89a3      	ldrh	r3, [r4, #12]
  40c692:	1c42      	adds	r2, r0, #1
  40c694:	bf0e      	itee	eq
  40c696:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40c69a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40c69e:	6520      	strne	r0, [r4, #80]	; 0x50
  40c6a0:	81a3      	strh	r3, [r4, #12]
  40c6a2:	bd10      	pop	{r4, pc}

0040c6a4 <__sclose>:
  40c6a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40c6a8:	f000 b9b6 	b.w	40ca18 <_close_r>

0040c6ac <__ssprint_r>:
  40c6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c6b0:	6893      	ldr	r3, [r2, #8]
  40c6b2:	b083      	sub	sp, #12
  40c6b4:	4690      	mov	r8, r2
  40c6b6:	2b00      	cmp	r3, #0
  40c6b8:	d070      	beq.n	40c79c <__ssprint_r+0xf0>
  40c6ba:	4682      	mov	sl, r0
  40c6bc:	460c      	mov	r4, r1
  40c6be:	6817      	ldr	r7, [r2, #0]
  40c6c0:	688d      	ldr	r5, [r1, #8]
  40c6c2:	6808      	ldr	r0, [r1, #0]
  40c6c4:	e042      	b.n	40c74c <__ssprint_r+0xa0>
  40c6c6:	89a3      	ldrh	r3, [r4, #12]
  40c6c8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40c6cc:	d02e      	beq.n	40c72c <__ssprint_r+0x80>
  40c6ce:	6965      	ldr	r5, [r4, #20]
  40c6d0:	6921      	ldr	r1, [r4, #16]
  40c6d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  40c6d6:	eba0 0b01 	sub.w	fp, r0, r1
  40c6da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40c6de:	f10b 0001 	add.w	r0, fp, #1
  40c6e2:	106d      	asrs	r5, r5, #1
  40c6e4:	4430      	add	r0, r6
  40c6e6:	42a8      	cmp	r0, r5
  40c6e8:	462a      	mov	r2, r5
  40c6ea:	bf84      	itt	hi
  40c6ec:	4605      	movhi	r5, r0
  40c6ee:	462a      	movhi	r2, r5
  40c6f0:	055b      	lsls	r3, r3, #21
  40c6f2:	d538      	bpl.n	40c766 <__ssprint_r+0xba>
  40c6f4:	4611      	mov	r1, r2
  40c6f6:	4650      	mov	r0, sl
  40c6f8:	f7fe ff56 	bl	40b5a8 <_malloc_r>
  40c6fc:	2800      	cmp	r0, #0
  40c6fe:	d03c      	beq.n	40c77a <__ssprint_r+0xce>
  40c700:	465a      	mov	r2, fp
  40c702:	6921      	ldr	r1, [r4, #16]
  40c704:	9001      	str	r0, [sp, #4]
  40c706:	f7fa fdc5 	bl	407294 <memcpy>
  40c70a:	89a2      	ldrh	r2, [r4, #12]
  40c70c:	9b01      	ldr	r3, [sp, #4]
  40c70e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40c712:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40c716:	81a2      	strh	r2, [r4, #12]
  40c718:	eba5 020b 	sub.w	r2, r5, fp
  40c71c:	eb03 000b 	add.w	r0, r3, fp
  40c720:	6165      	str	r5, [r4, #20]
  40c722:	6123      	str	r3, [r4, #16]
  40c724:	6020      	str	r0, [r4, #0]
  40c726:	60a2      	str	r2, [r4, #8]
  40c728:	4635      	mov	r5, r6
  40c72a:	46b3      	mov	fp, r6
  40c72c:	465a      	mov	r2, fp
  40c72e:	4649      	mov	r1, r9
  40c730:	f7ff fa56 	bl	40bbe0 <memmove>
  40c734:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40c738:	68a2      	ldr	r2, [r4, #8]
  40c73a:	6820      	ldr	r0, [r4, #0]
  40c73c:	1b55      	subs	r5, r2, r5
  40c73e:	4458      	add	r0, fp
  40c740:	1b9e      	subs	r6, r3, r6
  40c742:	60a5      	str	r5, [r4, #8]
  40c744:	6020      	str	r0, [r4, #0]
  40c746:	f8c8 6008 	str.w	r6, [r8, #8]
  40c74a:	b33e      	cbz	r6, 40c79c <__ssprint_r+0xf0>
  40c74c:	687e      	ldr	r6, [r7, #4]
  40c74e:	463b      	mov	r3, r7
  40c750:	3708      	adds	r7, #8
  40c752:	2e00      	cmp	r6, #0
  40c754:	d0fa      	beq.n	40c74c <__ssprint_r+0xa0>
  40c756:	42ae      	cmp	r6, r5
  40c758:	f8d3 9000 	ldr.w	r9, [r3]
  40c75c:	46ab      	mov	fp, r5
  40c75e:	d2b2      	bcs.n	40c6c6 <__ssprint_r+0x1a>
  40c760:	4635      	mov	r5, r6
  40c762:	46b3      	mov	fp, r6
  40c764:	e7e2      	b.n	40c72c <__ssprint_r+0x80>
  40c766:	4650      	mov	r0, sl
  40c768:	f7ff fda4 	bl	40c2b4 <_realloc_r>
  40c76c:	4603      	mov	r3, r0
  40c76e:	2800      	cmp	r0, #0
  40c770:	d1d2      	bne.n	40c718 <__ssprint_r+0x6c>
  40c772:	6921      	ldr	r1, [r4, #16]
  40c774:	4650      	mov	r0, sl
  40c776:	f7fe fbeb 	bl	40af50 <_free_r>
  40c77a:	230c      	movs	r3, #12
  40c77c:	f8ca 3000 	str.w	r3, [sl]
  40c780:	89a3      	ldrh	r3, [r4, #12]
  40c782:	2200      	movs	r2, #0
  40c784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40c788:	f04f 30ff 	mov.w	r0, #4294967295
  40c78c:	81a3      	strh	r3, [r4, #12]
  40c78e:	f8c8 2008 	str.w	r2, [r8, #8]
  40c792:	f8c8 2004 	str.w	r2, [r8, #4]
  40c796:	b003      	add	sp, #12
  40c798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c79c:	2000      	movs	r0, #0
  40c79e:	f8c8 0004 	str.w	r0, [r8, #4]
  40c7a2:	b003      	add	sp, #12
  40c7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040c7a8 <__swbuf_r>:
  40c7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40c7aa:	460d      	mov	r5, r1
  40c7ac:	4614      	mov	r4, r2
  40c7ae:	4606      	mov	r6, r0
  40c7b0:	b110      	cbz	r0, 40c7b8 <__swbuf_r+0x10>
  40c7b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40c7b4:	2b00      	cmp	r3, #0
  40c7b6:	d04b      	beq.n	40c850 <__swbuf_r+0xa8>
  40c7b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40c7bc:	69a3      	ldr	r3, [r4, #24]
  40c7be:	60a3      	str	r3, [r4, #8]
  40c7c0:	b291      	uxth	r1, r2
  40c7c2:	0708      	lsls	r0, r1, #28
  40c7c4:	d539      	bpl.n	40c83a <__swbuf_r+0x92>
  40c7c6:	6923      	ldr	r3, [r4, #16]
  40c7c8:	2b00      	cmp	r3, #0
  40c7ca:	d036      	beq.n	40c83a <__swbuf_r+0x92>
  40c7cc:	b2ed      	uxtb	r5, r5
  40c7ce:	0489      	lsls	r1, r1, #18
  40c7d0:	462f      	mov	r7, r5
  40c7d2:	d515      	bpl.n	40c800 <__swbuf_r+0x58>
  40c7d4:	6822      	ldr	r2, [r4, #0]
  40c7d6:	6961      	ldr	r1, [r4, #20]
  40c7d8:	1ad3      	subs	r3, r2, r3
  40c7da:	428b      	cmp	r3, r1
  40c7dc:	da1c      	bge.n	40c818 <__swbuf_r+0x70>
  40c7de:	3301      	adds	r3, #1
  40c7e0:	68a1      	ldr	r1, [r4, #8]
  40c7e2:	1c50      	adds	r0, r2, #1
  40c7e4:	3901      	subs	r1, #1
  40c7e6:	60a1      	str	r1, [r4, #8]
  40c7e8:	6020      	str	r0, [r4, #0]
  40c7ea:	7015      	strb	r5, [r2, #0]
  40c7ec:	6962      	ldr	r2, [r4, #20]
  40c7ee:	429a      	cmp	r2, r3
  40c7f0:	d01a      	beq.n	40c828 <__swbuf_r+0x80>
  40c7f2:	89a3      	ldrh	r3, [r4, #12]
  40c7f4:	07db      	lsls	r3, r3, #31
  40c7f6:	d501      	bpl.n	40c7fc <__swbuf_r+0x54>
  40c7f8:	2d0a      	cmp	r5, #10
  40c7fa:	d015      	beq.n	40c828 <__swbuf_r+0x80>
  40c7fc:	4638      	mov	r0, r7
  40c7fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40c800:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40c802:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40c806:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40c80a:	81a2      	strh	r2, [r4, #12]
  40c80c:	6822      	ldr	r2, [r4, #0]
  40c80e:	6661      	str	r1, [r4, #100]	; 0x64
  40c810:	6961      	ldr	r1, [r4, #20]
  40c812:	1ad3      	subs	r3, r2, r3
  40c814:	428b      	cmp	r3, r1
  40c816:	dbe2      	blt.n	40c7de <__swbuf_r+0x36>
  40c818:	4621      	mov	r1, r4
  40c81a:	4630      	mov	r0, r6
  40c81c:	f7fe fa1a 	bl	40ac54 <_fflush_r>
  40c820:	b940      	cbnz	r0, 40c834 <__swbuf_r+0x8c>
  40c822:	6822      	ldr	r2, [r4, #0]
  40c824:	2301      	movs	r3, #1
  40c826:	e7db      	b.n	40c7e0 <__swbuf_r+0x38>
  40c828:	4621      	mov	r1, r4
  40c82a:	4630      	mov	r0, r6
  40c82c:	f7fe fa12 	bl	40ac54 <_fflush_r>
  40c830:	2800      	cmp	r0, #0
  40c832:	d0e3      	beq.n	40c7fc <__swbuf_r+0x54>
  40c834:	f04f 37ff 	mov.w	r7, #4294967295
  40c838:	e7e0      	b.n	40c7fc <__swbuf_r+0x54>
  40c83a:	4621      	mov	r1, r4
  40c83c:	4630      	mov	r0, r6
  40c83e:	f7fd f937 	bl	409ab0 <__swsetup_r>
  40c842:	2800      	cmp	r0, #0
  40c844:	d1f6      	bne.n	40c834 <__swbuf_r+0x8c>
  40c846:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40c84a:	6923      	ldr	r3, [r4, #16]
  40c84c:	b291      	uxth	r1, r2
  40c84e:	e7bd      	b.n	40c7cc <__swbuf_r+0x24>
  40c850:	f7fe fa58 	bl	40ad04 <__sinit>
  40c854:	e7b0      	b.n	40c7b8 <__swbuf_r+0x10>
  40c856:	bf00      	nop

0040c858 <_wcrtomb_r>:
  40c858:	b5f0      	push	{r4, r5, r6, r7, lr}
  40c85a:	4606      	mov	r6, r0
  40c85c:	b085      	sub	sp, #20
  40c85e:	461f      	mov	r7, r3
  40c860:	b189      	cbz	r1, 40c886 <_wcrtomb_r+0x2e>
  40c862:	4c10      	ldr	r4, [pc, #64]	; (40c8a4 <_wcrtomb_r+0x4c>)
  40c864:	4d10      	ldr	r5, [pc, #64]	; (40c8a8 <_wcrtomb_r+0x50>)
  40c866:	6824      	ldr	r4, [r4, #0]
  40c868:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40c86a:	2c00      	cmp	r4, #0
  40c86c:	bf08      	it	eq
  40c86e:	462c      	moveq	r4, r5
  40c870:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40c874:	47a0      	blx	r4
  40c876:	1c43      	adds	r3, r0, #1
  40c878:	d103      	bne.n	40c882 <_wcrtomb_r+0x2a>
  40c87a:	2200      	movs	r2, #0
  40c87c:	238a      	movs	r3, #138	; 0x8a
  40c87e:	603a      	str	r2, [r7, #0]
  40c880:	6033      	str	r3, [r6, #0]
  40c882:	b005      	add	sp, #20
  40c884:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c886:	460c      	mov	r4, r1
  40c888:	4906      	ldr	r1, [pc, #24]	; (40c8a4 <_wcrtomb_r+0x4c>)
  40c88a:	4a07      	ldr	r2, [pc, #28]	; (40c8a8 <_wcrtomb_r+0x50>)
  40c88c:	6809      	ldr	r1, [r1, #0]
  40c88e:	6b49      	ldr	r1, [r1, #52]	; 0x34
  40c890:	2900      	cmp	r1, #0
  40c892:	bf08      	it	eq
  40c894:	4611      	moveq	r1, r2
  40c896:	4622      	mov	r2, r4
  40c898:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40c89c:	a901      	add	r1, sp, #4
  40c89e:	47a0      	blx	r4
  40c8a0:	e7e9      	b.n	40c876 <_wcrtomb_r+0x1e>
  40c8a2:	bf00      	nop
  40c8a4:	20400064 	.word	0x20400064
  40c8a8:	20400494 	.word	0x20400494

0040c8ac <__ascii_wctomb>:
  40c8ac:	b121      	cbz	r1, 40c8b8 <__ascii_wctomb+0xc>
  40c8ae:	2aff      	cmp	r2, #255	; 0xff
  40c8b0:	d804      	bhi.n	40c8bc <__ascii_wctomb+0x10>
  40c8b2:	700a      	strb	r2, [r1, #0]
  40c8b4:	2001      	movs	r0, #1
  40c8b6:	4770      	bx	lr
  40c8b8:	4608      	mov	r0, r1
  40c8ba:	4770      	bx	lr
  40c8bc:	238a      	movs	r3, #138	; 0x8a
  40c8be:	6003      	str	r3, [r0, #0]
  40c8c0:	f04f 30ff 	mov.w	r0, #4294967295
  40c8c4:	4770      	bx	lr
  40c8c6:	bf00      	nop

0040c8c8 <_write_r>:
  40c8c8:	b570      	push	{r4, r5, r6, lr}
  40c8ca:	460d      	mov	r5, r1
  40c8cc:	4c08      	ldr	r4, [pc, #32]	; (40c8f0 <_write_r+0x28>)
  40c8ce:	4611      	mov	r1, r2
  40c8d0:	4606      	mov	r6, r0
  40c8d2:	461a      	mov	r2, r3
  40c8d4:	4628      	mov	r0, r5
  40c8d6:	2300      	movs	r3, #0
  40c8d8:	6023      	str	r3, [r4, #0]
  40c8da:	f7f3 fcd3 	bl	400284 <_write>
  40c8de:	1c43      	adds	r3, r0, #1
  40c8e0:	d000      	beq.n	40c8e4 <_write_r+0x1c>
  40c8e2:	bd70      	pop	{r4, r5, r6, pc}
  40c8e4:	6823      	ldr	r3, [r4, #0]
  40c8e6:	2b00      	cmp	r3, #0
  40c8e8:	d0fb      	beq.n	40c8e2 <_write_r+0x1a>
  40c8ea:	6033      	str	r3, [r6, #0]
  40c8ec:	bd70      	pop	{r4, r5, r6, pc}
  40c8ee:	bf00      	nop
  40c8f0:	204049e0 	.word	0x204049e0

0040c8f4 <__register_exitproc>:
  40c8f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40c8f8:	4d2c      	ldr	r5, [pc, #176]	; (40c9ac <__register_exitproc+0xb8>)
  40c8fa:	4606      	mov	r6, r0
  40c8fc:	6828      	ldr	r0, [r5, #0]
  40c8fe:	4698      	mov	r8, r3
  40c900:	460f      	mov	r7, r1
  40c902:	4691      	mov	r9, r2
  40c904:	f7fe fdcc 	bl	40b4a0 <__retarget_lock_acquire_recursive>
  40c908:	4b29      	ldr	r3, [pc, #164]	; (40c9b0 <__register_exitproc+0xbc>)
  40c90a:	681c      	ldr	r4, [r3, #0]
  40c90c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40c910:	2b00      	cmp	r3, #0
  40c912:	d03e      	beq.n	40c992 <__register_exitproc+0x9e>
  40c914:	685a      	ldr	r2, [r3, #4]
  40c916:	2a1f      	cmp	r2, #31
  40c918:	dc1c      	bgt.n	40c954 <__register_exitproc+0x60>
  40c91a:	f102 0e01 	add.w	lr, r2, #1
  40c91e:	b176      	cbz	r6, 40c93e <__register_exitproc+0x4a>
  40c920:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40c924:	2401      	movs	r4, #1
  40c926:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40c92a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40c92e:	4094      	lsls	r4, r2
  40c930:	4320      	orrs	r0, r4
  40c932:	2e02      	cmp	r6, #2
  40c934:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40c938:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40c93c:	d023      	beq.n	40c986 <__register_exitproc+0x92>
  40c93e:	3202      	adds	r2, #2
  40c940:	f8c3 e004 	str.w	lr, [r3, #4]
  40c944:	6828      	ldr	r0, [r5, #0]
  40c946:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40c94a:	f7fe fdab 	bl	40b4a4 <__retarget_lock_release_recursive>
  40c94e:	2000      	movs	r0, #0
  40c950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40c954:	4b17      	ldr	r3, [pc, #92]	; (40c9b4 <__register_exitproc+0xc0>)
  40c956:	b30b      	cbz	r3, 40c99c <__register_exitproc+0xa8>
  40c958:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40c95c:	f7fe fe1c 	bl	40b598 <malloc>
  40c960:	4603      	mov	r3, r0
  40c962:	b1d8      	cbz	r0, 40c99c <__register_exitproc+0xa8>
  40c964:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40c968:	6002      	str	r2, [r0, #0]
  40c96a:	2100      	movs	r1, #0
  40c96c:	6041      	str	r1, [r0, #4]
  40c96e:	460a      	mov	r2, r1
  40c970:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40c974:	f04f 0e01 	mov.w	lr, #1
  40c978:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40c97c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40c980:	2e00      	cmp	r6, #0
  40c982:	d0dc      	beq.n	40c93e <__register_exitproc+0x4a>
  40c984:	e7cc      	b.n	40c920 <__register_exitproc+0x2c>
  40c986:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40c98a:	430c      	orrs	r4, r1
  40c98c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40c990:	e7d5      	b.n	40c93e <__register_exitproc+0x4a>
  40c992:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40c996:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40c99a:	e7bb      	b.n	40c914 <__register_exitproc+0x20>
  40c99c:	6828      	ldr	r0, [r5, #0]
  40c99e:	f7fe fd81 	bl	40b4a4 <__retarget_lock_release_recursive>
  40c9a2:	f04f 30ff 	mov.w	r0, #4294967295
  40c9a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40c9aa:	bf00      	nop
  40c9ac:	20400490 	.word	0x20400490
  40c9b0:	0040db08 	.word	0x0040db08
  40c9b4:	0040b599 	.word	0x0040b599

0040c9b8 <_calloc_r>:
  40c9b8:	b510      	push	{r4, lr}
  40c9ba:	fb02 f101 	mul.w	r1, r2, r1
  40c9be:	f7fe fdf3 	bl	40b5a8 <_malloc_r>
  40c9c2:	4604      	mov	r4, r0
  40c9c4:	b1d8      	cbz	r0, 40c9fe <_calloc_r+0x46>
  40c9c6:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40c9ca:	f022 0203 	bic.w	r2, r2, #3
  40c9ce:	3a04      	subs	r2, #4
  40c9d0:	2a24      	cmp	r2, #36	; 0x24
  40c9d2:	d818      	bhi.n	40ca06 <_calloc_r+0x4e>
  40c9d4:	2a13      	cmp	r2, #19
  40c9d6:	d914      	bls.n	40ca02 <_calloc_r+0x4a>
  40c9d8:	2300      	movs	r3, #0
  40c9da:	2a1b      	cmp	r2, #27
  40c9dc:	6003      	str	r3, [r0, #0]
  40c9de:	6043      	str	r3, [r0, #4]
  40c9e0:	d916      	bls.n	40ca10 <_calloc_r+0x58>
  40c9e2:	2a24      	cmp	r2, #36	; 0x24
  40c9e4:	6083      	str	r3, [r0, #8]
  40c9e6:	60c3      	str	r3, [r0, #12]
  40c9e8:	bf11      	iteee	ne
  40c9ea:	f100 0210 	addne.w	r2, r0, #16
  40c9ee:	6103      	streq	r3, [r0, #16]
  40c9f0:	6143      	streq	r3, [r0, #20]
  40c9f2:	f100 0218 	addeq.w	r2, r0, #24
  40c9f6:	2300      	movs	r3, #0
  40c9f8:	6013      	str	r3, [r2, #0]
  40c9fa:	6053      	str	r3, [r2, #4]
  40c9fc:	6093      	str	r3, [r2, #8]
  40c9fe:	4620      	mov	r0, r4
  40ca00:	bd10      	pop	{r4, pc}
  40ca02:	4602      	mov	r2, r0
  40ca04:	e7f7      	b.n	40c9f6 <_calloc_r+0x3e>
  40ca06:	2100      	movs	r1, #0
  40ca08:	f7fa fcde 	bl	4073c8 <memset>
  40ca0c:	4620      	mov	r0, r4
  40ca0e:	bd10      	pop	{r4, pc}
  40ca10:	f100 0208 	add.w	r2, r0, #8
  40ca14:	e7ef      	b.n	40c9f6 <_calloc_r+0x3e>
  40ca16:	bf00      	nop

0040ca18 <_close_r>:
  40ca18:	b538      	push	{r3, r4, r5, lr}
  40ca1a:	4c07      	ldr	r4, [pc, #28]	; (40ca38 <_close_r+0x20>)
  40ca1c:	2300      	movs	r3, #0
  40ca1e:	4605      	mov	r5, r0
  40ca20:	4608      	mov	r0, r1
  40ca22:	6023      	str	r3, [r4, #0]
  40ca24:	f7f4 fbaa 	bl	40117c <_close>
  40ca28:	1c43      	adds	r3, r0, #1
  40ca2a:	d000      	beq.n	40ca2e <_close_r+0x16>
  40ca2c:	bd38      	pop	{r3, r4, r5, pc}
  40ca2e:	6823      	ldr	r3, [r4, #0]
  40ca30:	2b00      	cmp	r3, #0
  40ca32:	d0fb      	beq.n	40ca2c <_close_r+0x14>
  40ca34:	602b      	str	r3, [r5, #0]
  40ca36:	bd38      	pop	{r3, r4, r5, pc}
  40ca38:	204049e0 	.word	0x204049e0

0040ca3c <_fclose_r>:
  40ca3c:	b570      	push	{r4, r5, r6, lr}
  40ca3e:	b159      	cbz	r1, 40ca58 <_fclose_r+0x1c>
  40ca40:	4605      	mov	r5, r0
  40ca42:	460c      	mov	r4, r1
  40ca44:	b110      	cbz	r0, 40ca4c <_fclose_r+0x10>
  40ca46:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40ca48:	2b00      	cmp	r3, #0
  40ca4a:	d03c      	beq.n	40cac6 <_fclose_r+0x8a>
  40ca4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40ca4e:	07d8      	lsls	r0, r3, #31
  40ca50:	d505      	bpl.n	40ca5e <_fclose_r+0x22>
  40ca52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40ca56:	b92b      	cbnz	r3, 40ca64 <_fclose_r+0x28>
  40ca58:	2600      	movs	r6, #0
  40ca5a:	4630      	mov	r0, r6
  40ca5c:	bd70      	pop	{r4, r5, r6, pc}
  40ca5e:	89a3      	ldrh	r3, [r4, #12]
  40ca60:	0599      	lsls	r1, r3, #22
  40ca62:	d53c      	bpl.n	40cade <_fclose_r+0xa2>
  40ca64:	4621      	mov	r1, r4
  40ca66:	4628      	mov	r0, r5
  40ca68:	f7fe f854 	bl	40ab14 <__sflush_r>
  40ca6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40ca6e:	4606      	mov	r6, r0
  40ca70:	b133      	cbz	r3, 40ca80 <_fclose_r+0x44>
  40ca72:	69e1      	ldr	r1, [r4, #28]
  40ca74:	4628      	mov	r0, r5
  40ca76:	4798      	blx	r3
  40ca78:	2800      	cmp	r0, #0
  40ca7a:	bfb8      	it	lt
  40ca7c:	f04f 36ff 	movlt.w	r6, #4294967295
  40ca80:	89a3      	ldrh	r3, [r4, #12]
  40ca82:	061a      	lsls	r2, r3, #24
  40ca84:	d422      	bmi.n	40cacc <_fclose_r+0x90>
  40ca86:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40ca88:	b141      	cbz	r1, 40ca9c <_fclose_r+0x60>
  40ca8a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40ca8e:	4299      	cmp	r1, r3
  40ca90:	d002      	beq.n	40ca98 <_fclose_r+0x5c>
  40ca92:	4628      	mov	r0, r5
  40ca94:	f7fe fa5c 	bl	40af50 <_free_r>
  40ca98:	2300      	movs	r3, #0
  40ca9a:	6323      	str	r3, [r4, #48]	; 0x30
  40ca9c:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40ca9e:	b121      	cbz	r1, 40caaa <_fclose_r+0x6e>
  40caa0:	4628      	mov	r0, r5
  40caa2:	f7fe fa55 	bl	40af50 <_free_r>
  40caa6:	2300      	movs	r3, #0
  40caa8:	6463      	str	r3, [r4, #68]	; 0x44
  40caaa:	f7fe f957 	bl	40ad5c <__sfp_lock_acquire>
  40caae:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40cab0:	2200      	movs	r2, #0
  40cab2:	07db      	lsls	r3, r3, #31
  40cab4:	81a2      	strh	r2, [r4, #12]
  40cab6:	d50e      	bpl.n	40cad6 <_fclose_r+0x9a>
  40cab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40caba:	f7fe fcef 	bl	40b49c <__retarget_lock_close_recursive>
  40cabe:	f7fe f953 	bl	40ad68 <__sfp_lock_release>
  40cac2:	4630      	mov	r0, r6
  40cac4:	bd70      	pop	{r4, r5, r6, pc}
  40cac6:	f7fe f91d 	bl	40ad04 <__sinit>
  40caca:	e7bf      	b.n	40ca4c <_fclose_r+0x10>
  40cacc:	6921      	ldr	r1, [r4, #16]
  40cace:	4628      	mov	r0, r5
  40cad0:	f7fe fa3e 	bl	40af50 <_free_r>
  40cad4:	e7d7      	b.n	40ca86 <_fclose_r+0x4a>
  40cad6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40cad8:	f7fe fce4 	bl	40b4a4 <__retarget_lock_release_recursive>
  40cadc:	e7ec      	b.n	40cab8 <_fclose_r+0x7c>
  40cade:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40cae0:	f7fe fcde 	bl	40b4a0 <__retarget_lock_acquire_recursive>
  40cae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40cae8:	2b00      	cmp	r3, #0
  40caea:	d1bb      	bne.n	40ca64 <_fclose_r+0x28>
  40caec:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40caee:	f016 0601 	ands.w	r6, r6, #1
  40caf2:	d1b1      	bne.n	40ca58 <_fclose_r+0x1c>
  40caf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40caf6:	f7fe fcd5 	bl	40b4a4 <__retarget_lock_release_recursive>
  40cafa:	4630      	mov	r0, r6
  40cafc:	bd70      	pop	{r4, r5, r6, pc}
  40cafe:	bf00      	nop

0040cb00 <_fstat_r>:
  40cb00:	b538      	push	{r3, r4, r5, lr}
  40cb02:	460b      	mov	r3, r1
  40cb04:	4c07      	ldr	r4, [pc, #28]	; (40cb24 <_fstat_r+0x24>)
  40cb06:	4605      	mov	r5, r0
  40cb08:	4611      	mov	r1, r2
  40cb0a:	4618      	mov	r0, r3
  40cb0c:	2300      	movs	r3, #0
  40cb0e:	6023      	str	r3, [r4, #0]
  40cb10:	f7f4 fb37 	bl	401182 <_fstat>
  40cb14:	1c43      	adds	r3, r0, #1
  40cb16:	d000      	beq.n	40cb1a <_fstat_r+0x1a>
  40cb18:	bd38      	pop	{r3, r4, r5, pc}
  40cb1a:	6823      	ldr	r3, [r4, #0]
  40cb1c:	2b00      	cmp	r3, #0
  40cb1e:	d0fb      	beq.n	40cb18 <_fstat_r+0x18>
  40cb20:	602b      	str	r3, [r5, #0]
  40cb22:	bd38      	pop	{r3, r4, r5, pc}
  40cb24:	204049e0 	.word	0x204049e0

0040cb28 <_isatty_r>:
  40cb28:	b538      	push	{r3, r4, r5, lr}
  40cb2a:	4c07      	ldr	r4, [pc, #28]	; (40cb48 <_isatty_r+0x20>)
  40cb2c:	2300      	movs	r3, #0
  40cb2e:	4605      	mov	r5, r0
  40cb30:	4608      	mov	r0, r1
  40cb32:	6023      	str	r3, [r4, #0]
  40cb34:	f7f4 fb2a 	bl	40118c <_isatty>
  40cb38:	1c43      	adds	r3, r0, #1
  40cb3a:	d000      	beq.n	40cb3e <_isatty_r+0x16>
  40cb3c:	bd38      	pop	{r3, r4, r5, pc}
  40cb3e:	6823      	ldr	r3, [r4, #0]
  40cb40:	2b00      	cmp	r3, #0
  40cb42:	d0fb      	beq.n	40cb3c <_isatty_r+0x14>
  40cb44:	602b      	str	r3, [r5, #0]
  40cb46:	bd38      	pop	{r3, r4, r5, pc}
  40cb48:	204049e0 	.word	0x204049e0

0040cb4c <_lseek_r>:
  40cb4c:	b570      	push	{r4, r5, r6, lr}
  40cb4e:	460d      	mov	r5, r1
  40cb50:	4c08      	ldr	r4, [pc, #32]	; (40cb74 <_lseek_r+0x28>)
  40cb52:	4611      	mov	r1, r2
  40cb54:	4606      	mov	r6, r0
  40cb56:	461a      	mov	r2, r3
  40cb58:	4628      	mov	r0, r5
  40cb5a:	2300      	movs	r3, #0
  40cb5c:	6023      	str	r3, [r4, #0]
  40cb5e:	f7f4 fb17 	bl	401190 <_lseek>
  40cb62:	1c43      	adds	r3, r0, #1
  40cb64:	d000      	beq.n	40cb68 <_lseek_r+0x1c>
  40cb66:	bd70      	pop	{r4, r5, r6, pc}
  40cb68:	6823      	ldr	r3, [r4, #0]
  40cb6a:	2b00      	cmp	r3, #0
  40cb6c:	d0fb      	beq.n	40cb66 <_lseek_r+0x1a>
  40cb6e:	6033      	str	r3, [r6, #0]
  40cb70:	bd70      	pop	{r4, r5, r6, pc}
  40cb72:	bf00      	nop
  40cb74:	204049e0 	.word	0x204049e0

0040cb78 <_read_r>:
  40cb78:	b570      	push	{r4, r5, r6, lr}
  40cb7a:	460d      	mov	r5, r1
  40cb7c:	4c08      	ldr	r4, [pc, #32]	; (40cba0 <_read_r+0x28>)
  40cb7e:	4611      	mov	r1, r2
  40cb80:	4606      	mov	r6, r0
  40cb82:	461a      	mov	r2, r3
  40cb84:	4628      	mov	r0, r5
  40cb86:	2300      	movs	r3, #0
  40cb88:	6023      	str	r3, [r4, #0]
  40cb8a:	f7f3 fb5d 	bl	400248 <_read>
  40cb8e:	1c43      	adds	r3, r0, #1
  40cb90:	d000      	beq.n	40cb94 <_read_r+0x1c>
  40cb92:	bd70      	pop	{r4, r5, r6, pc}
  40cb94:	6823      	ldr	r3, [r4, #0]
  40cb96:	2b00      	cmp	r3, #0
  40cb98:	d0fb      	beq.n	40cb92 <_read_r+0x1a>
  40cb9a:	6033      	str	r3, [r6, #0]
  40cb9c:	bd70      	pop	{r4, r5, r6, pc}
  40cb9e:	bf00      	nop
  40cba0:	204049e0 	.word	0x204049e0

0040cba4 <__aeabi_drsub>:
  40cba4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40cba8:	e002      	b.n	40cbb0 <__adddf3>
  40cbaa:	bf00      	nop

0040cbac <__aeabi_dsub>:
  40cbac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040cbb0 <__adddf3>:
  40cbb0:	b530      	push	{r4, r5, lr}
  40cbb2:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40cbb6:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40cbba:	ea94 0f05 	teq	r4, r5
  40cbbe:	bf08      	it	eq
  40cbc0:	ea90 0f02 	teqeq	r0, r2
  40cbc4:	bf1f      	itttt	ne
  40cbc6:	ea54 0c00 	orrsne.w	ip, r4, r0
  40cbca:	ea55 0c02 	orrsne.w	ip, r5, r2
  40cbce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40cbd2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40cbd6:	f000 80e2 	beq.w	40cd9e <__adddf3+0x1ee>
  40cbda:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40cbde:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40cbe2:	bfb8      	it	lt
  40cbe4:	426d      	neglt	r5, r5
  40cbe6:	dd0c      	ble.n	40cc02 <__adddf3+0x52>
  40cbe8:	442c      	add	r4, r5
  40cbea:	ea80 0202 	eor.w	r2, r0, r2
  40cbee:	ea81 0303 	eor.w	r3, r1, r3
  40cbf2:	ea82 0000 	eor.w	r0, r2, r0
  40cbf6:	ea83 0101 	eor.w	r1, r3, r1
  40cbfa:	ea80 0202 	eor.w	r2, r0, r2
  40cbfe:	ea81 0303 	eor.w	r3, r1, r3
  40cc02:	2d36      	cmp	r5, #54	; 0x36
  40cc04:	bf88      	it	hi
  40cc06:	bd30      	pophi	{r4, r5, pc}
  40cc08:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40cc0c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40cc10:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40cc14:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40cc18:	d002      	beq.n	40cc20 <__adddf3+0x70>
  40cc1a:	4240      	negs	r0, r0
  40cc1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40cc20:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40cc24:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40cc28:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40cc2c:	d002      	beq.n	40cc34 <__adddf3+0x84>
  40cc2e:	4252      	negs	r2, r2
  40cc30:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40cc34:	ea94 0f05 	teq	r4, r5
  40cc38:	f000 80a7 	beq.w	40cd8a <__adddf3+0x1da>
  40cc3c:	f1a4 0401 	sub.w	r4, r4, #1
  40cc40:	f1d5 0e20 	rsbs	lr, r5, #32
  40cc44:	db0d      	blt.n	40cc62 <__adddf3+0xb2>
  40cc46:	fa02 fc0e 	lsl.w	ip, r2, lr
  40cc4a:	fa22 f205 	lsr.w	r2, r2, r5
  40cc4e:	1880      	adds	r0, r0, r2
  40cc50:	f141 0100 	adc.w	r1, r1, #0
  40cc54:	fa03 f20e 	lsl.w	r2, r3, lr
  40cc58:	1880      	adds	r0, r0, r2
  40cc5a:	fa43 f305 	asr.w	r3, r3, r5
  40cc5e:	4159      	adcs	r1, r3
  40cc60:	e00e      	b.n	40cc80 <__adddf3+0xd0>
  40cc62:	f1a5 0520 	sub.w	r5, r5, #32
  40cc66:	f10e 0e20 	add.w	lr, lr, #32
  40cc6a:	2a01      	cmp	r2, #1
  40cc6c:	fa03 fc0e 	lsl.w	ip, r3, lr
  40cc70:	bf28      	it	cs
  40cc72:	f04c 0c02 	orrcs.w	ip, ip, #2
  40cc76:	fa43 f305 	asr.w	r3, r3, r5
  40cc7a:	18c0      	adds	r0, r0, r3
  40cc7c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40cc80:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40cc84:	d507      	bpl.n	40cc96 <__adddf3+0xe6>
  40cc86:	f04f 0e00 	mov.w	lr, #0
  40cc8a:	f1dc 0c00 	rsbs	ip, ip, #0
  40cc8e:	eb7e 0000 	sbcs.w	r0, lr, r0
  40cc92:	eb6e 0101 	sbc.w	r1, lr, r1
  40cc96:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40cc9a:	d31b      	bcc.n	40ccd4 <__adddf3+0x124>
  40cc9c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40cca0:	d30c      	bcc.n	40ccbc <__adddf3+0x10c>
  40cca2:	0849      	lsrs	r1, r1, #1
  40cca4:	ea5f 0030 	movs.w	r0, r0, rrx
  40cca8:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40ccac:	f104 0401 	add.w	r4, r4, #1
  40ccb0:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40ccb4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40ccb8:	f080 809a 	bcs.w	40cdf0 <__adddf3+0x240>
  40ccbc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40ccc0:	bf08      	it	eq
  40ccc2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40ccc6:	f150 0000 	adcs.w	r0, r0, #0
  40ccca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40ccce:	ea41 0105 	orr.w	r1, r1, r5
  40ccd2:	bd30      	pop	{r4, r5, pc}
  40ccd4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40ccd8:	4140      	adcs	r0, r0
  40ccda:	eb41 0101 	adc.w	r1, r1, r1
  40ccde:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40cce2:	f1a4 0401 	sub.w	r4, r4, #1
  40cce6:	d1e9      	bne.n	40ccbc <__adddf3+0x10c>
  40cce8:	f091 0f00 	teq	r1, #0
  40ccec:	bf04      	itt	eq
  40ccee:	4601      	moveq	r1, r0
  40ccf0:	2000      	moveq	r0, #0
  40ccf2:	fab1 f381 	clz	r3, r1
  40ccf6:	bf08      	it	eq
  40ccf8:	3320      	addeq	r3, #32
  40ccfa:	f1a3 030b 	sub.w	r3, r3, #11
  40ccfe:	f1b3 0220 	subs.w	r2, r3, #32
  40cd02:	da0c      	bge.n	40cd1e <__adddf3+0x16e>
  40cd04:	320c      	adds	r2, #12
  40cd06:	dd08      	ble.n	40cd1a <__adddf3+0x16a>
  40cd08:	f102 0c14 	add.w	ip, r2, #20
  40cd0c:	f1c2 020c 	rsb	r2, r2, #12
  40cd10:	fa01 f00c 	lsl.w	r0, r1, ip
  40cd14:	fa21 f102 	lsr.w	r1, r1, r2
  40cd18:	e00c      	b.n	40cd34 <__adddf3+0x184>
  40cd1a:	f102 0214 	add.w	r2, r2, #20
  40cd1e:	bfd8      	it	le
  40cd20:	f1c2 0c20 	rsble	ip, r2, #32
  40cd24:	fa01 f102 	lsl.w	r1, r1, r2
  40cd28:	fa20 fc0c 	lsr.w	ip, r0, ip
  40cd2c:	bfdc      	itt	le
  40cd2e:	ea41 010c 	orrle.w	r1, r1, ip
  40cd32:	4090      	lslle	r0, r2
  40cd34:	1ae4      	subs	r4, r4, r3
  40cd36:	bfa2      	ittt	ge
  40cd38:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40cd3c:	4329      	orrge	r1, r5
  40cd3e:	bd30      	popge	{r4, r5, pc}
  40cd40:	ea6f 0404 	mvn.w	r4, r4
  40cd44:	3c1f      	subs	r4, #31
  40cd46:	da1c      	bge.n	40cd82 <__adddf3+0x1d2>
  40cd48:	340c      	adds	r4, #12
  40cd4a:	dc0e      	bgt.n	40cd6a <__adddf3+0x1ba>
  40cd4c:	f104 0414 	add.w	r4, r4, #20
  40cd50:	f1c4 0220 	rsb	r2, r4, #32
  40cd54:	fa20 f004 	lsr.w	r0, r0, r4
  40cd58:	fa01 f302 	lsl.w	r3, r1, r2
  40cd5c:	ea40 0003 	orr.w	r0, r0, r3
  40cd60:	fa21 f304 	lsr.w	r3, r1, r4
  40cd64:	ea45 0103 	orr.w	r1, r5, r3
  40cd68:	bd30      	pop	{r4, r5, pc}
  40cd6a:	f1c4 040c 	rsb	r4, r4, #12
  40cd6e:	f1c4 0220 	rsb	r2, r4, #32
  40cd72:	fa20 f002 	lsr.w	r0, r0, r2
  40cd76:	fa01 f304 	lsl.w	r3, r1, r4
  40cd7a:	ea40 0003 	orr.w	r0, r0, r3
  40cd7e:	4629      	mov	r1, r5
  40cd80:	bd30      	pop	{r4, r5, pc}
  40cd82:	fa21 f004 	lsr.w	r0, r1, r4
  40cd86:	4629      	mov	r1, r5
  40cd88:	bd30      	pop	{r4, r5, pc}
  40cd8a:	f094 0f00 	teq	r4, #0
  40cd8e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40cd92:	bf06      	itte	eq
  40cd94:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40cd98:	3401      	addeq	r4, #1
  40cd9a:	3d01      	subne	r5, #1
  40cd9c:	e74e      	b.n	40cc3c <__adddf3+0x8c>
  40cd9e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40cda2:	bf18      	it	ne
  40cda4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40cda8:	d029      	beq.n	40cdfe <__adddf3+0x24e>
  40cdaa:	ea94 0f05 	teq	r4, r5
  40cdae:	bf08      	it	eq
  40cdb0:	ea90 0f02 	teqeq	r0, r2
  40cdb4:	d005      	beq.n	40cdc2 <__adddf3+0x212>
  40cdb6:	ea54 0c00 	orrs.w	ip, r4, r0
  40cdba:	bf04      	itt	eq
  40cdbc:	4619      	moveq	r1, r3
  40cdbe:	4610      	moveq	r0, r2
  40cdc0:	bd30      	pop	{r4, r5, pc}
  40cdc2:	ea91 0f03 	teq	r1, r3
  40cdc6:	bf1e      	ittt	ne
  40cdc8:	2100      	movne	r1, #0
  40cdca:	2000      	movne	r0, #0
  40cdcc:	bd30      	popne	{r4, r5, pc}
  40cdce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40cdd2:	d105      	bne.n	40cde0 <__adddf3+0x230>
  40cdd4:	0040      	lsls	r0, r0, #1
  40cdd6:	4149      	adcs	r1, r1
  40cdd8:	bf28      	it	cs
  40cdda:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40cdde:	bd30      	pop	{r4, r5, pc}
  40cde0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40cde4:	bf3c      	itt	cc
  40cde6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40cdea:	bd30      	popcc	{r4, r5, pc}
  40cdec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40cdf0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40cdf4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40cdf8:	f04f 0000 	mov.w	r0, #0
  40cdfc:	bd30      	pop	{r4, r5, pc}
  40cdfe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40ce02:	bf1a      	itte	ne
  40ce04:	4619      	movne	r1, r3
  40ce06:	4610      	movne	r0, r2
  40ce08:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40ce0c:	bf1c      	itt	ne
  40ce0e:	460b      	movne	r3, r1
  40ce10:	4602      	movne	r2, r0
  40ce12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40ce16:	bf06      	itte	eq
  40ce18:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40ce1c:	ea91 0f03 	teqeq	r1, r3
  40ce20:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40ce24:	bd30      	pop	{r4, r5, pc}
  40ce26:	bf00      	nop

0040ce28 <__aeabi_ui2d>:
  40ce28:	f090 0f00 	teq	r0, #0
  40ce2c:	bf04      	itt	eq
  40ce2e:	2100      	moveq	r1, #0
  40ce30:	4770      	bxeq	lr
  40ce32:	b530      	push	{r4, r5, lr}
  40ce34:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40ce38:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40ce3c:	f04f 0500 	mov.w	r5, #0
  40ce40:	f04f 0100 	mov.w	r1, #0
  40ce44:	e750      	b.n	40cce8 <__adddf3+0x138>
  40ce46:	bf00      	nop

0040ce48 <__aeabi_i2d>:
  40ce48:	f090 0f00 	teq	r0, #0
  40ce4c:	bf04      	itt	eq
  40ce4e:	2100      	moveq	r1, #0
  40ce50:	4770      	bxeq	lr
  40ce52:	b530      	push	{r4, r5, lr}
  40ce54:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40ce58:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40ce5c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40ce60:	bf48      	it	mi
  40ce62:	4240      	negmi	r0, r0
  40ce64:	f04f 0100 	mov.w	r1, #0
  40ce68:	e73e      	b.n	40cce8 <__adddf3+0x138>
  40ce6a:	bf00      	nop

0040ce6c <__aeabi_f2d>:
  40ce6c:	0042      	lsls	r2, r0, #1
  40ce6e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40ce72:	ea4f 0131 	mov.w	r1, r1, rrx
  40ce76:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40ce7a:	bf1f      	itttt	ne
  40ce7c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40ce80:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40ce84:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40ce88:	4770      	bxne	lr
  40ce8a:	f092 0f00 	teq	r2, #0
  40ce8e:	bf14      	ite	ne
  40ce90:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40ce94:	4770      	bxeq	lr
  40ce96:	b530      	push	{r4, r5, lr}
  40ce98:	f44f 7460 	mov.w	r4, #896	; 0x380
  40ce9c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40cea0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40cea4:	e720      	b.n	40cce8 <__adddf3+0x138>
  40cea6:	bf00      	nop

0040cea8 <__aeabi_ul2d>:
  40cea8:	ea50 0201 	orrs.w	r2, r0, r1
  40ceac:	bf08      	it	eq
  40ceae:	4770      	bxeq	lr
  40ceb0:	b530      	push	{r4, r5, lr}
  40ceb2:	f04f 0500 	mov.w	r5, #0
  40ceb6:	e00a      	b.n	40cece <__aeabi_l2d+0x16>

0040ceb8 <__aeabi_l2d>:
  40ceb8:	ea50 0201 	orrs.w	r2, r0, r1
  40cebc:	bf08      	it	eq
  40cebe:	4770      	bxeq	lr
  40cec0:	b530      	push	{r4, r5, lr}
  40cec2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40cec6:	d502      	bpl.n	40cece <__aeabi_l2d+0x16>
  40cec8:	4240      	negs	r0, r0
  40ceca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40cece:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40ced2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40ced6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40ceda:	f43f aedc 	beq.w	40cc96 <__adddf3+0xe6>
  40cede:	f04f 0203 	mov.w	r2, #3
  40cee2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40cee6:	bf18      	it	ne
  40cee8:	3203      	addne	r2, #3
  40ceea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40ceee:	bf18      	it	ne
  40cef0:	3203      	addne	r2, #3
  40cef2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40cef6:	f1c2 0320 	rsb	r3, r2, #32
  40cefa:	fa00 fc03 	lsl.w	ip, r0, r3
  40cefe:	fa20 f002 	lsr.w	r0, r0, r2
  40cf02:	fa01 fe03 	lsl.w	lr, r1, r3
  40cf06:	ea40 000e 	orr.w	r0, r0, lr
  40cf0a:	fa21 f102 	lsr.w	r1, r1, r2
  40cf0e:	4414      	add	r4, r2
  40cf10:	e6c1      	b.n	40cc96 <__adddf3+0xe6>
  40cf12:	bf00      	nop

0040cf14 <__aeabi_dmul>:
  40cf14:	b570      	push	{r4, r5, r6, lr}
  40cf16:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40cf1a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40cf1e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40cf22:	bf1d      	ittte	ne
  40cf24:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40cf28:	ea94 0f0c 	teqne	r4, ip
  40cf2c:	ea95 0f0c 	teqne	r5, ip
  40cf30:	f000 f8de 	bleq	40d0f0 <__aeabi_dmul+0x1dc>
  40cf34:	442c      	add	r4, r5
  40cf36:	ea81 0603 	eor.w	r6, r1, r3
  40cf3a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40cf3e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40cf42:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40cf46:	bf18      	it	ne
  40cf48:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40cf4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40cf50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40cf54:	d038      	beq.n	40cfc8 <__aeabi_dmul+0xb4>
  40cf56:	fba0 ce02 	umull	ip, lr, r0, r2
  40cf5a:	f04f 0500 	mov.w	r5, #0
  40cf5e:	fbe1 e502 	umlal	lr, r5, r1, r2
  40cf62:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40cf66:	fbe0 e503 	umlal	lr, r5, r0, r3
  40cf6a:	f04f 0600 	mov.w	r6, #0
  40cf6e:	fbe1 5603 	umlal	r5, r6, r1, r3
  40cf72:	f09c 0f00 	teq	ip, #0
  40cf76:	bf18      	it	ne
  40cf78:	f04e 0e01 	orrne.w	lr, lr, #1
  40cf7c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40cf80:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40cf84:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40cf88:	d204      	bcs.n	40cf94 <__aeabi_dmul+0x80>
  40cf8a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40cf8e:	416d      	adcs	r5, r5
  40cf90:	eb46 0606 	adc.w	r6, r6, r6
  40cf94:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40cf98:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40cf9c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40cfa0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40cfa4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40cfa8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40cfac:	bf88      	it	hi
  40cfae:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40cfb2:	d81e      	bhi.n	40cff2 <__aeabi_dmul+0xde>
  40cfb4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40cfb8:	bf08      	it	eq
  40cfba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40cfbe:	f150 0000 	adcs.w	r0, r0, #0
  40cfc2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40cfc6:	bd70      	pop	{r4, r5, r6, pc}
  40cfc8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40cfcc:	ea46 0101 	orr.w	r1, r6, r1
  40cfd0:	ea40 0002 	orr.w	r0, r0, r2
  40cfd4:	ea81 0103 	eor.w	r1, r1, r3
  40cfd8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40cfdc:	bfc2      	ittt	gt
  40cfde:	ebd4 050c 	rsbsgt	r5, r4, ip
  40cfe2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40cfe6:	bd70      	popgt	{r4, r5, r6, pc}
  40cfe8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40cfec:	f04f 0e00 	mov.w	lr, #0
  40cff0:	3c01      	subs	r4, #1
  40cff2:	f300 80ab 	bgt.w	40d14c <__aeabi_dmul+0x238>
  40cff6:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40cffa:	bfde      	ittt	le
  40cffc:	2000      	movle	r0, #0
  40cffe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40d002:	bd70      	pople	{r4, r5, r6, pc}
  40d004:	f1c4 0400 	rsb	r4, r4, #0
  40d008:	3c20      	subs	r4, #32
  40d00a:	da35      	bge.n	40d078 <__aeabi_dmul+0x164>
  40d00c:	340c      	adds	r4, #12
  40d00e:	dc1b      	bgt.n	40d048 <__aeabi_dmul+0x134>
  40d010:	f104 0414 	add.w	r4, r4, #20
  40d014:	f1c4 0520 	rsb	r5, r4, #32
  40d018:	fa00 f305 	lsl.w	r3, r0, r5
  40d01c:	fa20 f004 	lsr.w	r0, r0, r4
  40d020:	fa01 f205 	lsl.w	r2, r1, r5
  40d024:	ea40 0002 	orr.w	r0, r0, r2
  40d028:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40d02c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40d030:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40d034:	fa21 f604 	lsr.w	r6, r1, r4
  40d038:	eb42 0106 	adc.w	r1, r2, r6
  40d03c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40d040:	bf08      	it	eq
  40d042:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40d046:	bd70      	pop	{r4, r5, r6, pc}
  40d048:	f1c4 040c 	rsb	r4, r4, #12
  40d04c:	f1c4 0520 	rsb	r5, r4, #32
  40d050:	fa00 f304 	lsl.w	r3, r0, r4
  40d054:	fa20 f005 	lsr.w	r0, r0, r5
  40d058:	fa01 f204 	lsl.w	r2, r1, r4
  40d05c:	ea40 0002 	orr.w	r0, r0, r2
  40d060:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40d064:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40d068:	f141 0100 	adc.w	r1, r1, #0
  40d06c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40d070:	bf08      	it	eq
  40d072:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40d076:	bd70      	pop	{r4, r5, r6, pc}
  40d078:	f1c4 0520 	rsb	r5, r4, #32
  40d07c:	fa00 f205 	lsl.w	r2, r0, r5
  40d080:	ea4e 0e02 	orr.w	lr, lr, r2
  40d084:	fa20 f304 	lsr.w	r3, r0, r4
  40d088:	fa01 f205 	lsl.w	r2, r1, r5
  40d08c:	ea43 0302 	orr.w	r3, r3, r2
  40d090:	fa21 f004 	lsr.w	r0, r1, r4
  40d094:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40d098:	fa21 f204 	lsr.w	r2, r1, r4
  40d09c:	ea20 0002 	bic.w	r0, r0, r2
  40d0a0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40d0a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40d0a8:	bf08      	it	eq
  40d0aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40d0ae:	bd70      	pop	{r4, r5, r6, pc}
  40d0b0:	f094 0f00 	teq	r4, #0
  40d0b4:	d10f      	bne.n	40d0d6 <__aeabi_dmul+0x1c2>
  40d0b6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40d0ba:	0040      	lsls	r0, r0, #1
  40d0bc:	eb41 0101 	adc.w	r1, r1, r1
  40d0c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40d0c4:	bf08      	it	eq
  40d0c6:	3c01      	subeq	r4, #1
  40d0c8:	d0f7      	beq.n	40d0ba <__aeabi_dmul+0x1a6>
  40d0ca:	ea41 0106 	orr.w	r1, r1, r6
  40d0ce:	f095 0f00 	teq	r5, #0
  40d0d2:	bf18      	it	ne
  40d0d4:	4770      	bxne	lr
  40d0d6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40d0da:	0052      	lsls	r2, r2, #1
  40d0dc:	eb43 0303 	adc.w	r3, r3, r3
  40d0e0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40d0e4:	bf08      	it	eq
  40d0e6:	3d01      	subeq	r5, #1
  40d0e8:	d0f7      	beq.n	40d0da <__aeabi_dmul+0x1c6>
  40d0ea:	ea43 0306 	orr.w	r3, r3, r6
  40d0ee:	4770      	bx	lr
  40d0f0:	ea94 0f0c 	teq	r4, ip
  40d0f4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40d0f8:	bf18      	it	ne
  40d0fa:	ea95 0f0c 	teqne	r5, ip
  40d0fe:	d00c      	beq.n	40d11a <__aeabi_dmul+0x206>
  40d100:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40d104:	bf18      	it	ne
  40d106:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40d10a:	d1d1      	bne.n	40d0b0 <__aeabi_dmul+0x19c>
  40d10c:	ea81 0103 	eor.w	r1, r1, r3
  40d110:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40d114:	f04f 0000 	mov.w	r0, #0
  40d118:	bd70      	pop	{r4, r5, r6, pc}
  40d11a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40d11e:	bf06      	itte	eq
  40d120:	4610      	moveq	r0, r2
  40d122:	4619      	moveq	r1, r3
  40d124:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40d128:	d019      	beq.n	40d15e <__aeabi_dmul+0x24a>
  40d12a:	ea94 0f0c 	teq	r4, ip
  40d12e:	d102      	bne.n	40d136 <__aeabi_dmul+0x222>
  40d130:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40d134:	d113      	bne.n	40d15e <__aeabi_dmul+0x24a>
  40d136:	ea95 0f0c 	teq	r5, ip
  40d13a:	d105      	bne.n	40d148 <__aeabi_dmul+0x234>
  40d13c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40d140:	bf1c      	itt	ne
  40d142:	4610      	movne	r0, r2
  40d144:	4619      	movne	r1, r3
  40d146:	d10a      	bne.n	40d15e <__aeabi_dmul+0x24a>
  40d148:	ea81 0103 	eor.w	r1, r1, r3
  40d14c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40d150:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40d154:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40d158:	f04f 0000 	mov.w	r0, #0
  40d15c:	bd70      	pop	{r4, r5, r6, pc}
  40d15e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40d162:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40d166:	bd70      	pop	{r4, r5, r6, pc}

0040d168 <__aeabi_ddiv>:
  40d168:	b570      	push	{r4, r5, r6, lr}
  40d16a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40d16e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40d172:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40d176:	bf1d      	ittte	ne
  40d178:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40d17c:	ea94 0f0c 	teqne	r4, ip
  40d180:	ea95 0f0c 	teqne	r5, ip
  40d184:	f000 f8a7 	bleq	40d2d6 <__aeabi_ddiv+0x16e>
  40d188:	eba4 0405 	sub.w	r4, r4, r5
  40d18c:	ea81 0e03 	eor.w	lr, r1, r3
  40d190:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40d194:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40d198:	f000 8088 	beq.w	40d2ac <__aeabi_ddiv+0x144>
  40d19c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40d1a0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40d1a4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40d1a8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40d1ac:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40d1b0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40d1b4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40d1b8:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40d1bc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40d1c0:	429d      	cmp	r5, r3
  40d1c2:	bf08      	it	eq
  40d1c4:	4296      	cmpeq	r6, r2
  40d1c6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40d1ca:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40d1ce:	d202      	bcs.n	40d1d6 <__aeabi_ddiv+0x6e>
  40d1d0:	085b      	lsrs	r3, r3, #1
  40d1d2:	ea4f 0232 	mov.w	r2, r2, rrx
  40d1d6:	1ab6      	subs	r6, r6, r2
  40d1d8:	eb65 0503 	sbc.w	r5, r5, r3
  40d1dc:	085b      	lsrs	r3, r3, #1
  40d1de:	ea4f 0232 	mov.w	r2, r2, rrx
  40d1e2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40d1e6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40d1ea:	ebb6 0e02 	subs.w	lr, r6, r2
  40d1ee:	eb75 0e03 	sbcs.w	lr, r5, r3
  40d1f2:	bf22      	ittt	cs
  40d1f4:	1ab6      	subcs	r6, r6, r2
  40d1f6:	4675      	movcs	r5, lr
  40d1f8:	ea40 000c 	orrcs.w	r0, r0, ip
  40d1fc:	085b      	lsrs	r3, r3, #1
  40d1fe:	ea4f 0232 	mov.w	r2, r2, rrx
  40d202:	ebb6 0e02 	subs.w	lr, r6, r2
  40d206:	eb75 0e03 	sbcs.w	lr, r5, r3
  40d20a:	bf22      	ittt	cs
  40d20c:	1ab6      	subcs	r6, r6, r2
  40d20e:	4675      	movcs	r5, lr
  40d210:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40d214:	085b      	lsrs	r3, r3, #1
  40d216:	ea4f 0232 	mov.w	r2, r2, rrx
  40d21a:	ebb6 0e02 	subs.w	lr, r6, r2
  40d21e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40d222:	bf22      	ittt	cs
  40d224:	1ab6      	subcs	r6, r6, r2
  40d226:	4675      	movcs	r5, lr
  40d228:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40d22c:	085b      	lsrs	r3, r3, #1
  40d22e:	ea4f 0232 	mov.w	r2, r2, rrx
  40d232:	ebb6 0e02 	subs.w	lr, r6, r2
  40d236:	eb75 0e03 	sbcs.w	lr, r5, r3
  40d23a:	bf22      	ittt	cs
  40d23c:	1ab6      	subcs	r6, r6, r2
  40d23e:	4675      	movcs	r5, lr
  40d240:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40d244:	ea55 0e06 	orrs.w	lr, r5, r6
  40d248:	d018      	beq.n	40d27c <__aeabi_ddiv+0x114>
  40d24a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40d24e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40d252:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40d256:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40d25a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40d25e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40d262:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40d266:	d1c0      	bne.n	40d1ea <__aeabi_ddiv+0x82>
  40d268:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40d26c:	d10b      	bne.n	40d286 <__aeabi_ddiv+0x11e>
  40d26e:	ea41 0100 	orr.w	r1, r1, r0
  40d272:	f04f 0000 	mov.w	r0, #0
  40d276:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40d27a:	e7b6      	b.n	40d1ea <__aeabi_ddiv+0x82>
  40d27c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40d280:	bf04      	itt	eq
  40d282:	4301      	orreq	r1, r0
  40d284:	2000      	moveq	r0, #0
  40d286:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40d28a:	bf88      	it	hi
  40d28c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40d290:	f63f aeaf 	bhi.w	40cff2 <__aeabi_dmul+0xde>
  40d294:	ebb5 0c03 	subs.w	ip, r5, r3
  40d298:	bf04      	itt	eq
  40d29a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40d29e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40d2a2:	f150 0000 	adcs.w	r0, r0, #0
  40d2a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40d2aa:	bd70      	pop	{r4, r5, r6, pc}
  40d2ac:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40d2b0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40d2b4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40d2b8:	bfc2      	ittt	gt
  40d2ba:	ebd4 050c 	rsbsgt	r5, r4, ip
  40d2be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40d2c2:	bd70      	popgt	{r4, r5, r6, pc}
  40d2c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40d2c8:	f04f 0e00 	mov.w	lr, #0
  40d2cc:	3c01      	subs	r4, #1
  40d2ce:	e690      	b.n	40cff2 <__aeabi_dmul+0xde>
  40d2d0:	ea45 0e06 	orr.w	lr, r5, r6
  40d2d4:	e68d      	b.n	40cff2 <__aeabi_dmul+0xde>
  40d2d6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40d2da:	ea94 0f0c 	teq	r4, ip
  40d2de:	bf08      	it	eq
  40d2e0:	ea95 0f0c 	teqeq	r5, ip
  40d2e4:	f43f af3b 	beq.w	40d15e <__aeabi_dmul+0x24a>
  40d2e8:	ea94 0f0c 	teq	r4, ip
  40d2ec:	d10a      	bne.n	40d304 <__aeabi_ddiv+0x19c>
  40d2ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40d2f2:	f47f af34 	bne.w	40d15e <__aeabi_dmul+0x24a>
  40d2f6:	ea95 0f0c 	teq	r5, ip
  40d2fa:	f47f af25 	bne.w	40d148 <__aeabi_dmul+0x234>
  40d2fe:	4610      	mov	r0, r2
  40d300:	4619      	mov	r1, r3
  40d302:	e72c      	b.n	40d15e <__aeabi_dmul+0x24a>
  40d304:	ea95 0f0c 	teq	r5, ip
  40d308:	d106      	bne.n	40d318 <__aeabi_ddiv+0x1b0>
  40d30a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40d30e:	f43f aefd 	beq.w	40d10c <__aeabi_dmul+0x1f8>
  40d312:	4610      	mov	r0, r2
  40d314:	4619      	mov	r1, r3
  40d316:	e722      	b.n	40d15e <__aeabi_dmul+0x24a>
  40d318:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40d31c:	bf18      	it	ne
  40d31e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40d322:	f47f aec5 	bne.w	40d0b0 <__aeabi_dmul+0x19c>
  40d326:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40d32a:	f47f af0d 	bne.w	40d148 <__aeabi_dmul+0x234>
  40d32e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40d332:	f47f aeeb 	bne.w	40d10c <__aeabi_dmul+0x1f8>
  40d336:	e712      	b.n	40d15e <__aeabi_dmul+0x24a>

0040d338 <__gedf2>:
  40d338:	f04f 3cff 	mov.w	ip, #4294967295
  40d33c:	e006      	b.n	40d34c <__cmpdf2+0x4>
  40d33e:	bf00      	nop

0040d340 <__ledf2>:
  40d340:	f04f 0c01 	mov.w	ip, #1
  40d344:	e002      	b.n	40d34c <__cmpdf2+0x4>
  40d346:	bf00      	nop

0040d348 <__cmpdf2>:
  40d348:	f04f 0c01 	mov.w	ip, #1
  40d34c:	f84d cd04 	str.w	ip, [sp, #-4]!
  40d350:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40d354:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40d358:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40d35c:	bf18      	it	ne
  40d35e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40d362:	d01b      	beq.n	40d39c <__cmpdf2+0x54>
  40d364:	b001      	add	sp, #4
  40d366:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40d36a:	bf0c      	ite	eq
  40d36c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40d370:	ea91 0f03 	teqne	r1, r3
  40d374:	bf02      	ittt	eq
  40d376:	ea90 0f02 	teqeq	r0, r2
  40d37a:	2000      	moveq	r0, #0
  40d37c:	4770      	bxeq	lr
  40d37e:	f110 0f00 	cmn.w	r0, #0
  40d382:	ea91 0f03 	teq	r1, r3
  40d386:	bf58      	it	pl
  40d388:	4299      	cmppl	r1, r3
  40d38a:	bf08      	it	eq
  40d38c:	4290      	cmpeq	r0, r2
  40d38e:	bf2c      	ite	cs
  40d390:	17d8      	asrcs	r0, r3, #31
  40d392:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40d396:	f040 0001 	orr.w	r0, r0, #1
  40d39a:	4770      	bx	lr
  40d39c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40d3a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40d3a4:	d102      	bne.n	40d3ac <__cmpdf2+0x64>
  40d3a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40d3aa:	d107      	bne.n	40d3bc <__cmpdf2+0x74>
  40d3ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40d3b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40d3b4:	d1d6      	bne.n	40d364 <__cmpdf2+0x1c>
  40d3b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40d3ba:	d0d3      	beq.n	40d364 <__cmpdf2+0x1c>
  40d3bc:	f85d 0b04 	ldr.w	r0, [sp], #4
  40d3c0:	4770      	bx	lr
  40d3c2:	bf00      	nop

0040d3c4 <__aeabi_cdrcmple>:
  40d3c4:	4684      	mov	ip, r0
  40d3c6:	4610      	mov	r0, r2
  40d3c8:	4662      	mov	r2, ip
  40d3ca:	468c      	mov	ip, r1
  40d3cc:	4619      	mov	r1, r3
  40d3ce:	4663      	mov	r3, ip
  40d3d0:	e000      	b.n	40d3d4 <__aeabi_cdcmpeq>
  40d3d2:	bf00      	nop

0040d3d4 <__aeabi_cdcmpeq>:
  40d3d4:	b501      	push	{r0, lr}
  40d3d6:	f7ff ffb7 	bl	40d348 <__cmpdf2>
  40d3da:	2800      	cmp	r0, #0
  40d3dc:	bf48      	it	mi
  40d3de:	f110 0f00 	cmnmi.w	r0, #0
  40d3e2:	bd01      	pop	{r0, pc}

0040d3e4 <__aeabi_dcmpeq>:
  40d3e4:	f84d ed08 	str.w	lr, [sp, #-8]!
  40d3e8:	f7ff fff4 	bl	40d3d4 <__aeabi_cdcmpeq>
  40d3ec:	bf0c      	ite	eq
  40d3ee:	2001      	moveq	r0, #1
  40d3f0:	2000      	movne	r0, #0
  40d3f2:	f85d fb08 	ldr.w	pc, [sp], #8
  40d3f6:	bf00      	nop

0040d3f8 <__aeabi_dcmplt>:
  40d3f8:	f84d ed08 	str.w	lr, [sp, #-8]!
  40d3fc:	f7ff ffea 	bl	40d3d4 <__aeabi_cdcmpeq>
  40d400:	bf34      	ite	cc
  40d402:	2001      	movcc	r0, #1
  40d404:	2000      	movcs	r0, #0
  40d406:	f85d fb08 	ldr.w	pc, [sp], #8
  40d40a:	bf00      	nop

0040d40c <__aeabi_dcmple>:
  40d40c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40d410:	f7ff ffe0 	bl	40d3d4 <__aeabi_cdcmpeq>
  40d414:	bf94      	ite	ls
  40d416:	2001      	movls	r0, #1
  40d418:	2000      	movhi	r0, #0
  40d41a:	f85d fb08 	ldr.w	pc, [sp], #8
  40d41e:	bf00      	nop

0040d420 <__aeabi_dcmpge>:
  40d420:	f84d ed08 	str.w	lr, [sp, #-8]!
  40d424:	f7ff ffce 	bl	40d3c4 <__aeabi_cdrcmple>
  40d428:	bf94      	ite	ls
  40d42a:	2001      	movls	r0, #1
  40d42c:	2000      	movhi	r0, #0
  40d42e:	f85d fb08 	ldr.w	pc, [sp], #8
  40d432:	bf00      	nop

0040d434 <__aeabi_dcmpgt>:
  40d434:	f84d ed08 	str.w	lr, [sp, #-8]!
  40d438:	f7ff ffc4 	bl	40d3c4 <__aeabi_cdrcmple>
  40d43c:	bf34      	ite	cc
  40d43e:	2001      	movcc	r0, #1
  40d440:	2000      	movcs	r0, #0
  40d442:	f85d fb08 	ldr.w	pc, [sp], #8
  40d446:	bf00      	nop

0040d448 <__aeabi_dcmpun>:
  40d448:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40d44c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40d450:	d102      	bne.n	40d458 <__aeabi_dcmpun+0x10>
  40d452:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40d456:	d10a      	bne.n	40d46e <__aeabi_dcmpun+0x26>
  40d458:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40d45c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40d460:	d102      	bne.n	40d468 <__aeabi_dcmpun+0x20>
  40d462:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40d466:	d102      	bne.n	40d46e <__aeabi_dcmpun+0x26>
  40d468:	f04f 0000 	mov.w	r0, #0
  40d46c:	4770      	bx	lr
  40d46e:	f04f 0001 	mov.w	r0, #1
  40d472:	4770      	bx	lr

0040d474 <__aeabi_d2iz>:
  40d474:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40d478:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40d47c:	d215      	bcs.n	40d4aa <__aeabi_d2iz+0x36>
  40d47e:	d511      	bpl.n	40d4a4 <__aeabi_d2iz+0x30>
  40d480:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40d484:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40d488:	d912      	bls.n	40d4b0 <__aeabi_d2iz+0x3c>
  40d48a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40d48e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40d492:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40d496:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40d49a:	fa23 f002 	lsr.w	r0, r3, r2
  40d49e:	bf18      	it	ne
  40d4a0:	4240      	negne	r0, r0
  40d4a2:	4770      	bx	lr
  40d4a4:	f04f 0000 	mov.w	r0, #0
  40d4a8:	4770      	bx	lr
  40d4aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40d4ae:	d105      	bne.n	40d4bc <__aeabi_d2iz+0x48>
  40d4b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40d4b4:	bf08      	it	eq
  40d4b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40d4ba:	4770      	bx	lr
  40d4bc:	f04f 0000 	mov.w	r0, #0
  40d4c0:	4770      	bx	lr
  40d4c2:	bf00      	nop

0040d4c4 <__aeabi_uldivmod>:
  40d4c4:	b953      	cbnz	r3, 40d4dc <__aeabi_uldivmod+0x18>
  40d4c6:	b94a      	cbnz	r2, 40d4dc <__aeabi_uldivmod+0x18>
  40d4c8:	2900      	cmp	r1, #0
  40d4ca:	bf08      	it	eq
  40d4cc:	2800      	cmpeq	r0, #0
  40d4ce:	bf1c      	itt	ne
  40d4d0:	f04f 31ff 	movne.w	r1, #4294967295
  40d4d4:	f04f 30ff 	movne.w	r0, #4294967295
  40d4d8:	f000 b97a 	b.w	40d7d0 <__aeabi_idiv0>
  40d4dc:	f1ad 0c08 	sub.w	ip, sp, #8
  40d4e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40d4e4:	f000 f806 	bl	40d4f4 <__udivmoddi4>
  40d4e8:	f8dd e004 	ldr.w	lr, [sp, #4]
  40d4ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40d4f0:	b004      	add	sp, #16
  40d4f2:	4770      	bx	lr

0040d4f4 <__udivmoddi4>:
  40d4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40d4f8:	468c      	mov	ip, r1
  40d4fa:	460d      	mov	r5, r1
  40d4fc:	4604      	mov	r4, r0
  40d4fe:	9e08      	ldr	r6, [sp, #32]
  40d500:	2b00      	cmp	r3, #0
  40d502:	d151      	bne.n	40d5a8 <__udivmoddi4+0xb4>
  40d504:	428a      	cmp	r2, r1
  40d506:	4617      	mov	r7, r2
  40d508:	d96d      	bls.n	40d5e6 <__udivmoddi4+0xf2>
  40d50a:	fab2 fe82 	clz	lr, r2
  40d50e:	f1be 0f00 	cmp.w	lr, #0
  40d512:	d00b      	beq.n	40d52c <__udivmoddi4+0x38>
  40d514:	f1ce 0c20 	rsb	ip, lr, #32
  40d518:	fa01 f50e 	lsl.w	r5, r1, lr
  40d51c:	fa20 fc0c 	lsr.w	ip, r0, ip
  40d520:	fa02 f70e 	lsl.w	r7, r2, lr
  40d524:	ea4c 0c05 	orr.w	ip, ip, r5
  40d528:	fa00 f40e 	lsl.w	r4, r0, lr
  40d52c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40d530:	0c25      	lsrs	r5, r4, #16
  40d532:	fbbc f8fa 	udiv	r8, ip, sl
  40d536:	fa1f f987 	uxth.w	r9, r7
  40d53a:	fb0a cc18 	mls	ip, sl, r8, ip
  40d53e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40d542:	fb08 f309 	mul.w	r3, r8, r9
  40d546:	42ab      	cmp	r3, r5
  40d548:	d90a      	bls.n	40d560 <__udivmoddi4+0x6c>
  40d54a:	19ed      	adds	r5, r5, r7
  40d54c:	f108 32ff 	add.w	r2, r8, #4294967295
  40d550:	f080 8123 	bcs.w	40d79a <__udivmoddi4+0x2a6>
  40d554:	42ab      	cmp	r3, r5
  40d556:	f240 8120 	bls.w	40d79a <__udivmoddi4+0x2a6>
  40d55a:	f1a8 0802 	sub.w	r8, r8, #2
  40d55e:	443d      	add	r5, r7
  40d560:	1aed      	subs	r5, r5, r3
  40d562:	b2a4      	uxth	r4, r4
  40d564:	fbb5 f0fa 	udiv	r0, r5, sl
  40d568:	fb0a 5510 	mls	r5, sl, r0, r5
  40d56c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40d570:	fb00 f909 	mul.w	r9, r0, r9
  40d574:	45a1      	cmp	r9, r4
  40d576:	d909      	bls.n	40d58c <__udivmoddi4+0x98>
  40d578:	19e4      	adds	r4, r4, r7
  40d57a:	f100 33ff 	add.w	r3, r0, #4294967295
  40d57e:	f080 810a 	bcs.w	40d796 <__udivmoddi4+0x2a2>
  40d582:	45a1      	cmp	r9, r4
  40d584:	f240 8107 	bls.w	40d796 <__udivmoddi4+0x2a2>
  40d588:	3802      	subs	r0, #2
  40d58a:	443c      	add	r4, r7
  40d58c:	eba4 0409 	sub.w	r4, r4, r9
  40d590:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40d594:	2100      	movs	r1, #0
  40d596:	2e00      	cmp	r6, #0
  40d598:	d061      	beq.n	40d65e <__udivmoddi4+0x16a>
  40d59a:	fa24 f40e 	lsr.w	r4, r4, lr
  40d59e:	2300      	movs	r3, #0
  40d5a0:	6034      	str	r4, [r6, #0]
  40d5a2:	6073      	str	r3, [r6, #4]
  40d5a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d5a8:	428b      	cmp	r3, r1
  40d5aa:	d907      	bls.n	40d5bc <__udivmoddi4+0xc8>
  40d5ac:	2e00      	cmp	r6, #0
  40d5ae:	d054      	beq.n	40d65a <__udivmoddi4+0x166>
  40d5b0:	2100      	movs	r1, #0
  40d5b2:	e886 0021 	stmia.w	r6, {r0, r5}
  40d5b6:	4608      	mov	r0, r1
  40d5b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d5bc:	fab3 f183 	clz	r1, r3
  40d5c0:	2900      	cmp	r1, #0
  40d5c2:	f040 808e 	bne.w	40d6e2 <__udivmoddi4+0x1ee>
  40d5c6:	42ab      	cmp	r3, r5
  40d5c8:	d302      	bcc.n	40d5d0 <__udivmoddi4+0xdc>
  40d5ca:	4282      	cmp	r2, r0
  40d5cc:	f200 80fa 	bhi.w	40d7c4 <__udivmoddi4+0x2d0>
  40d5d0:	1a84      	subs	r4, r0, r2
  40d5d2:	eb65 0503 	sbc.w	r5, r5, r3
  40d5d6:	2001      	movs	r0, #1
  40d5d8:	46ac      	mov	ip, r5
  40d5da:	2e00      	cmp	r6, #0
  40d5dc:	d03f      	beq.n	40d65e <__udivmoddi4+0x16a>
  40d5de:	e886 1010 	stmia.w	r6, {r4, ip}
  40d5e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d5e6:	b912      	cbnz	r2, 40d5ee <__udivmoddi4+0xfa>
  40d5e8:	2701      	movs	r7, #1
  40d5ea:	fbb7 f7f2 	udiv	r7, r7, r2
  40d5ee:	fab7 fe87 	clz	lr, r7
  40d5f2:	f1be 0f00 	cmp.w	lr, #0
  40d5f6:	d134      	bne.n	40d662 <__udivmoddi4+0x16e>
  40d5f8:	1beb      	subs	r3, r5, r7
  40d5fa:	0c3a      	lsrs	r2, r7, #16
  40d5fc:	fa1f fc87 	uxth.w	ip, r7
  40d600:	2101      	movs	r1, #1
  40d602:	fbb3 f8f2 	udiv	r8, r3, r2
  40d606:	0c25      	lsrs	r5, r4, #16
  40d608:	fb02 3318 	mls	r3, r2, r8, r3
  40d60c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40d610:	fb0c f308 	mul.w	r3, ip, r8
  40d614:	42ab      	cmp	r3, r5
  40d616:	d907      	bls.n	40d628 <__udivmoddi4+0x134>
  40d618:	19ed      	adds	r5, r5, r7
  40d61a:	f108 30ff 	add.w	r0, r8, #4294967295
  40d61e:	d202      	bcs.n	40d626 <__udivmoddi4+0x132>
  40d620:	42ab      	cmp	r3, r5
  40d622:	f200 80d1 	bhi.w	40d7c8 <__udivmoddi4+0x2d4>
  40d626:	4680      	mov	r8, r0
  40d628:	1aed      	subs	r5, r5, r3
  40d62a:	b2a3      	uxth	r3, r4
  40d62c:	fbb5 f0f2 	udiv	r0, r5, r2
  40d630:	fb02 5510 	mls	r5, r2, r0, r5
  40d634:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40d638:	fb0c fc00 	mul.w	ip, ip, r0
  40d63c:	45a4      	cmp	ip, r4
  40d63e:	d907      	bls.n	40d650 <__udivmoddi4+0x15c>
  40d640:	19e4      	adds	r4, r4, r7
  40d642:	f100 33ff 	add.w	r3, r0, #4294967295
  40d646:	d202      	bcs.n	40d64e <__udivmoddi4+0x15a>
  40d648:	45a4      	cmp	ip, r4
  40d64a:	f200 80b8 	bhi.w	40d7be <__udivmoddi4+0x2ca>
  40d64e:	4618      	mov	r0, r3
  40d650:	eba4 040c 	sub.w	r4, r4, ip
  40d654:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40d658:	e79d      	b.n	40d596 <__udivmoddi4+0xa2>
  40d65a:	4631      	mov	r1, r6
  40d65c:	4630      	mov	r0, r6
  40d65e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d662:	f1ce 0420 	rsb	r4, lr, #32
  40d666:	fa05 f30e 	lsl.w	r3, r5, lr
  40d66a:	fa07 f70e 	lsl.w	r7, r7, lr
  40d66e:	fa20 f804 	lsr.w	r8, r0, r4
  40d672:	0c3a      	lsrs	r2, r7, #16
  40d674:	fa25 f404 	lsr.w	r4, r5, r4
  40d678:	ea48 0803 	orr.w	r8, r8, r3
  40d67c:	fbb4 f1f2 	udiv	r1, r4, r2
  40d680:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40d684:	fb02 4411 	mls	r4, r2, r1, r4
  40d688:	fa1f fc87 	uxth.w	ip, r7
  40d68c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40d690:	fb01 f30c 	mul.w	r3, r1, ip
  40d694:	42ab      	cmp	r3, r5
  40d696:	fa00 f40e 	lsl.w	r4, r0, lr
  40d69a:	d909      	bls.n	40d6b0 <__udivmoddi4+0x1bc>
  40d69c:	19ed      	adds	r5, r5, r7
  40d69e:	f101 30ff 	add.w	r0, r1, #4294967295
  40d6a2:	f080 808a 	bcs.w	40d7ba <__udivmoddi4+0x2c6>
  40d6a6:	42ab      	cmp	r3, r5
  40d6a8:	f240 8087 	bls.w	40d7ba <__udivmoddi4+0x2c6>
  40d6ac:	3902      	subs	r1, #2
  40d6ae:	443d      	add	r5, r7
  40d6b0:	1aeb      	subs	r3, r5, r3
  40d6b2:	fa1f f588 	uxth.w	r5, r8
  40d6b6:	fbb3 f0f2 	udiv	r0, r3, r2
  40d6ba:	fb02 3310 	mls	r3, r2, r0, r3
  40d6be:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40d6c2:	fb00 f30c 	mul.w	r3, r0, ip
  40d6c6:	42ab      	cmp	r3, r5
  40d6c8:	d907      	bls.n	40d6da <__udivmoddi4+0x1e6>
  40d6ca:	19ed      	adds	r5, r5, r7
  40d6cc:	f100 38ff 	add.w	r8, r0, #4294967295
  40d6d0:	d26f      	bcs.n	40d7b2 <__udivmoddi4+0x2be>
  40d6d2:	42ab      	cmp	r3, r5
  40d6d4:	d96d      	bls.n	40d7b2 <__udivmoddi4+0x2be>
  40d6d6:	3802      	subs	r0, #2
  40d6d8:	443d      	add	r5, r7
  40d6da:	1aeb      	subs	r3, r5, r3
  40d6dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40d6e0:	e78f      	b.n	40d602 <__udivmoddi4+0x10e>
  40d6e2:	f1c1 0720 	rsb	r7, r1, #32
  40d6e6:	fa22 f807 	lsr.w	r8, r2, r7
  40d6ea:	408b      	lsls	r3, r1
  40d6ec:	fa05 f401 	lsl.w	r4, r5, r1
  40d6f0:	ea48 0303 	orr.w	r3, r8, r3
  40d6f4:	fa20 fe07 	lsr.w	lr, r0, r7
  40d6f8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40d6fc:	40fd      	lsrs	r5, r7
  40d6fe:	ea4e 0e04 	orr.w	lr, lr, r4
  40d702:	fbb5 f9fc 	udiv	r9, r5, ip
  40d706:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40d70a:	fb0c 5519 	mls	r5, ip, r9, r5
  40d70e:	fa1f f883 	uxth.w	r8, r3
  40d712:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40d716:	fb09 f408 	mul.w	r4, r9, r8
  40d71a:	42ac      	cmp	r4, r5
  40d71c:	fa02 f201 	lsl.w	r2, r2, r1
  40d720:	fa00 fa01 	lsl.w	sl, r0, r1
  40d724:	d908      	bls.n	40d738 <__udivmoddi4+0x244>
  40d726:	18ed      	adds	r5, r5, r3
  40d728:	f109 30ff 	add.w	r0, r9, #4294967295
  40d72c:	d243      	bcs.n	40d7b6 <__udivmoddi4+0x2c2>
  40d72e:	42ac      	cmp	r4, r5
  40d730:	d941      	bls.n	40d7b6 <__udivmoddi4+0x2c2>
  40d732:	f1a9 0902 	sub.w	r9, r9, #2
  40d736:	441d      	add	r5, r3
  40d738:	1b2d      	subs	r5, r5, r4
  40d73a:	fa1f fe8e 	uxth.w	lr, lr
  40d73e:	fbb5 f0fc 	udiv	r0, r5, ip
  40d742:	fb0c 5510 	mls	r5, ip, r0, r5
  40d746:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40d74a:	fb00 f808 	mul.w	r8, r0, r8
  40d74e:	45a0      	cmp	r8, r4
  40d750:	d907      	bls.n	40d762 <__udivmoddi4+0x26e>
  40d752:	18e4      	adds	r4, r4, r3
  40d754:	f100 35ff 	add.w	r5, r0, #4294967295
  40d758:	d229      	bcs.n	40d7ae <__udivmoddi4+0x2ba>
  40d75a:	45a0      	cmp	r8, r4
  40d75c:	d927      	bls.n	40d7ae <__udivmoddi4+0x2ba>
  40d75e:	3802      	subs	r0, #2
  40d760:	441c      	add	r4, r3
  40d762:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40d766:	eba4 0408 	sub.w	r4, r4, r8
  40d76a:	fba0 8902 	umull	r8, r9, r0, r2
  40d76e:	454c      	cmp	r4, r9
  40d770:	46c6      	mov	lr, r8
  40d772:	464d      	mov	r5, r9
  40d774:	d315      	bcc.n	40d7a2 <__udivmoddi4+0x2ae>
  40d776:	d012      	beq.n	40d79e <__udivmoddi4+0x2aa>
  40d778:	b156      	cbz	r6, 40d790 <__udivmoddi4+0x29c>
  40d77a:	ebba 030e 	subs.w	r3, sl, lr
  40d77e:	eb64 0405 	sbc.w	r4, r4, r5
  40d782:	fa04 f707 	lsl.w	r7, r4, r7
  40d786:	40cb      	lsrs	r3, r1
  40d788:	431f      	orrs	r7, r3
  40d78a:	40cc      	lsrs	r4, r1
  40d78c:	6037      	str	r7, [r6, #0]
  40d78e:	6074      	str	r4, [r6, #4]
  40d790:	2100      	movs	r1, #0
  40d792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d796:	4618      	mov	r0, r3
  40d798:	e6f8      	b.n	40d58c <__udivmoddi4+0x98>
  40d79a:	4690      	mov	r8, r2
  40d79c:	e6e0      	b.n	40d560 <__udivmoddi4+0x6c>
  40d79e:	45c2      	cmp	sl, r8
  40d7a0:	d2ea      	bcs.n	40d778 <__udivmoddi4+0x284>
  40d7a2:	ebb8 0e02 	subs.w	lr, r8, r2
  40d7a6:	eb69 0503 	sbc.w	r5, r9, r3
  40d7aa:	3801      	subs	r0, #1
  40d7ac:	e7e4      	b.n	40d778 <__udivmoddi4+0x284>
  40d7ae:	4628      	mov	r0, r5
  40d7b0:	e7d7      	b.n	40d762 <__udivmoddi4+0x26e>
  40d7b2:	4640      	mov	r0, r8
  40d7b4:	e791      	b.n	40d6da <__udivmoddi4+0x1e6>
  40d7b6:	4681      	mov	r9, r0
  40d7b8:	e7be      	b.n	40d738 <__udivmoddi4+0x244>
  40d7ba:	4601      	mov	r1, r0
  40d7bc:	e778      	b.n	40d6b0 <__udivmoddi4+0x1bc>
  40d7be:	3802      	subs	r0, #2
  40d7c0:	443c      	add	r4, r7
  40d7c2:	e745      	b.n	40d650 <__udivmoddi4+0x15c>
  40d7c4:	4608      	mov	r0, r1
  40d7c6:	e708      	b.n	40d5da <__udivmoddi4+0xe6>
  40d7c8:	f1a8 0802 	sub.w	r8, r8, #2
  40d7cc:	443d      	add	r5, r7
  40d7ce:	e72b      	b.n	40d628 <__udivmoddi4+0x134>

0040d7d0 <__aeabi_idiv0>:
  40d7d0:	4770      	bx	lr
  40d7d2:	bf00      	nop

0040d7d4 <ip_addr_any>:
  40d7d4:	0000 0000                                   ....

0040d7d8 <memp_num>:
  40d7d8:	0001 0002 0001 0008 0002 0003 0002 0004     ................

0040d7e8 <memp_sizes>:
  40d7e8:	0020 0098 001c 0010 0020 0010 0010 0610      ....... .......

0040d7f8 <tcp_backoff>:
  40d7f8:	0201 0403 0605 0707 0707 0707 0007 0000     ................

0040d808 <tcp_pcb_lists>:
  40d808:	496c 2040 4974 2040 4964 2040 4978 2040     lI@ tI@ dI@ xI@ 

0040d818 <tcp_persist_backoff>:
  40d818:	0603 180c 6030 0078                         ....0`x.

0040d820 <ethbroadcast>:
  40d820:	ffff ffff ffff 0000                         ........

0040d828 <ethzero>:
	...
  40d830:	2d2d 2d2d 776c 5049 6920 696e 6974 6c61     ----lwIP initial
  40d840:	7a69 6465 0a0d 0000 7453 7461 6369 4920     ized....Static I
  40d850:	2050 6441 7264 7365 2073 7341 6973 6e67     P Address Assign
  40d860:	6465 0a0d 0000 0000 2d2d 2d2d 7445 6568     ed......----Ethe
  40d870:	6e72 7465 6920 746e 7265 6166 6563 6320     rnet interface c
  40d880:	6e6f 6966 7567 6572 0d64 000a 654e 7774     onfigured...Netw
  40d890:	726f 206b 7075 2520 0d73 000a 654e 7774     ork up %s...Netw
  40d8a0:	726f 206b 6f64 6e77 0a0d 0000 2121 2021     ork down....!!! 
  40d8b0:	4354 2050 4942 444e 4520 5252 524f 2120     TCP BIND ERROR !
  40d8c0:	2121 0a0d 0000 0000 2121 2021 4354 2050     !!......!!! TCP 
  40d8d0:	454e 2057 5245 4f52 2052 2121 0d21 000a     NEW ERROR !!!...
  40d8e0:	2d2d 202d 6f43 736e 6c6f 2065 6f63 666e     --- Console conf
  40d8f0:	6769 7275 6465 0a0d 0000 0000 2d2d 202d     igured......--- 
  40d900:	4552 4441 4d5f 444f 3a45 2520 0075 0000     READ_MODE: %u...
  40d910:	2d2d 202d 7445 6568 6e72 7465 6920 696e     --- Ethernet ini
  40d920:	6974 6c61 7a69 6465 0a0d 0000 2d2d 202d     tialized....--- 
  40d930:	5448 5054 6920 696e 6974 6c61 7a69 6465     HTTP initialized
  40d940:	0a0d 0000 2d2d 202d 6f43 6e75 6574 2072     ....--- Counter 
  40d950:	6164 6174 7020 6e69 2073 6f63 666e 6769     data pins config
  40d960:	7275 6465 0a0d 0000 2d2d 202d 6f43 6e75     ured....--- Coun
  40d970:	6574 2072 6573 656c 7463 7020 6e69 2073     ter select pins 
  40d980:	6f63 666e 6769 7275 6465 0a0d 0000 0000     configured......
  40d990:	2d2d 202d 6f43 6e75 6574 2072 6572 6967     --- Counter regi
  40d9a0:	7473 7265 6320 6f6c 6b63 7020 6e69 2073     ster clock pins 
  40d9b0:	6f63 666e 6769 7275 6465 0a0d 0000 0000     configured......
  40d9c0:	2d2d 202d 6f43 6e75 6574 2072 6c63 6165     --- Counter clea
  40d9d0:	2072 6970 736e 6320 6e6f 6966 7567 6572     r pins configure
  40d9e0:	0d64 000a 2d2d 202d 6553 2074 6973 6e67     d...--- Set sign
  40d9f0:	6c61 7220 6165 7964 7020 6e69 6420 7269     al ready pin dir
  40da00:	6365 6974 6e6f 0a0d 0000 0000 2d2d 202d     ection......--- 
  40da10:	6553 2074 6973 6e67 6c61 7220 6165 7964     Set signal ready
  40da20:	7020 6e69 6d20 646f 0d65 000a 2d2d 202d      pin mode...--- 
  40da30:	6553 2074 6973 6e67 6c61 7220 6165 7964     Set signal ready
  40da40:	7020 6e69 7320 6e65 6573 0a0d 0000 0000      pin sense......
  40da50:	2d2d 202d 6553 2074 6973 6e67 6c61 7220     --- Set signal r
  40da60:	6165 7964 6820 6e61 6c64 7265 0a0d 0000     eady handler....
  40da70:	2d2d 202d 6e45 6261 656c 2064 5249 0d51     --- Enabled IRQ.
  40da80:	000a 0000 2d2d 202d 6553 2074 6168 646e     ....--- Set hand
  40da90:	656c 2072 7270 6f69 6972 7974 0a0d 0000     ler priority....
  40daa0:	2d2d 202d 6e45 6261 656c 2064 6e69 6574     --- Enabled inte
  40dab0:	7272 7075 0d74 000a 2d2d 202d 7453 7261     rrupt...--- Star
  40dac0:	6974 676e 4d20 6961 206e 6f4c 706f 2d20     ting Main Loop -
  40dad0:	2d2d 0a0d 0a0d 0000 255b 2563 5d64 7325     --......[%c%d]%s
  40dae0:	3a20 2520 0d75 000a 6f43 6e75 3a74 2520      : %u...Count: %
  40daf0:	0d75 000a 6564 746c 2d61 3a74 2520 6e75     u...delta-t: %un
  40db00:	0d73 000a 7525 0000                         s...%u..

0040db08 <_global_impure_ptr>:
  40db08:	0068 2040 4e49 0046 6e69 0066 414e 004e     h.@ INF.inf.NAN.
  40db18:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  40db28:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  40db38:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  40db48:	296c 0000 0030 0000                         l)..0...

0040db50 <blanks.7223>:
  40db50:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040db60 <zeroes.7224>:
  40db60:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0040db70 <blanks.7217>:
  40db70:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040db80 <zeroes.7218>:
  40db80:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  40db90:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  40dba0:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......

0040dbb0 <__mprec_bigtens>:
  40dbb0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  40dbc0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  40dbd0:	bf3c 7f73 4fdd 7515                         <.s..O.u

0040dbd8 <__mprec_tens>:
  40dbd8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  40dbe8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  40dbf8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  40dc08:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  40dc18:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  40dc28:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  40dc38:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  40dc48:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  40dc58:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  40dc68:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  40dc78:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  40dc88:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  40dc98:	9db4 79d9 7843 44ea                         ...yCx.D

0040dca0 <p05.6055>:
  40dca0:	0005 0000 0019 0000 007d 0000               ........}...

0040dcac <_ctype_>:
  40dcac:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  40dcbc:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40dccc:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  40dcdc:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  40dcec:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  40dcfc:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  40dd0c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  40dd1c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  40dd2c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0040ddb0 <_init>:
  40ddb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40ddb2:	bf00      	nop
  40ddb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40ddb6:	bc08      	pop	{r3}
  40ddb8:	469e      	mov	lr, r3
  40ddba:	4770      	bx	lr

0040ddbc <__init_array_start>:
  40ddbc:	00409b79 	.word	0x00409b79

0040ddc0 <__frame_dummy_init_array_entry>:
  40ddc0:	0040018d                                ..@.

0040ddc4 <_fini>:
  40ddc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40ddc6:	bf00      	nop
  40ddc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40ddca:	bc08      	pop	{r3}
  40ddcc:	469e      	mov	lr, r3
  40ddce:	4770      	bx	lr

0040ddd0 <__fini_array_start>:
  40ddd0:	00400169 	.word	0x00400169
