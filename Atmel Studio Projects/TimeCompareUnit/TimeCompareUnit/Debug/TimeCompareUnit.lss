
TimeCompareUnit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000efa4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040efa4  0040efa4  0001efa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a10  20400000  0040efac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00004064  20400a10  0040f9c0  00020a10  2**3
                  ALLOC
  4 .stack        00000404  20404a74  00413a24  00020a10  2**0
                  ALLOC
  5 .heap         00000200  20404e78  00413e28  00020a10  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020a10  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a3e  2**0
                  CONTENTS, READONLY
  8 .debug_info   0003cf10  00000000  00000000  00020a97  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00007651  00000000  00000000  0005d9a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00011707  00000000  00000000  00064ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001288  00000000  00000000  000766ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000017a8  00000000  00000000  00077987  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002cdb2  00000000  00000000  0007912f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001ec38  00000000  00000000  000a5ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009deb5  00000000  00000000  000c4b19  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000044b4  00000000  00000000  001629d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	78 4e 40 20 e5 0e 40 00 e3 0e 40 00 e3 0e 40 00     xN@ ..@...@...@.
  400010:	e3 0e 40 00 e3 0e 40 00 e3 0e 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	e3 0e 40 00 e3 0e 40 00 00 00 00 00 e3 0e 40 00     ..@...@.......@.
  40003c:	cd 6c 40 00 e3 0e 40 00 e3 0e 40 00 e3 0e 40 00     .l@...@...@...@.
  40004c:	e3 0e 40 00 e3 0e 40 00 e3 0e 40 00 e3 0e 40 00     ..@...@...@...@.
  40005c:	e3 0e 40 00 e3 0e 40 00 00 00 00 00 e1 0a 40 00     ..@...@.......@.
  40006c:	f5 0a 40 00 09 0b 40 00 e3 0e 40 00 e3 0e 40 00     ..@...@...@...@.
  40007c:	e3 0e 40 00 1d 0b 40 00 31 0b 40 00 e3 0e 40 00     ..@...@.1.@...@.
  40008c:	e3 0e 40 00 e3 0e 40 00 e3 0e 40 00 e3 0e 40 00     ..@...@...@...@.
  40009c:	fd 66 40 00 e3 0e 40 00 e3 0e 40 00 e3 0e 40 00     .f@...@...@...@.
  4000ac:	e3 0e 40 00 e3 0e 40 00 e3 0e 40 00 e3 0e 40 00     ..@...@...@...@.
  4000bc:	e3 0e 40 00 e3 0e 40 00 e3 0e 40 00 e3 0e 40 00     ..@...@...@...@.
  4000cc:	e3 0e 40 00 e3 0e 40 00 e3 0e 40 00 e3 0e 40 00     ..@...@...@...@.
  4000dc:	95 5f 40 00 e3 0e 40 00 e3 0e 40 00 e3 0e 40 00     ._@...@...@...@.
  4000ec:	e3 0e 40 00 e3 0e 40 00 e3 0e 40 00 e3 0e 40 00     ..@...@...@...@.
  4000fc:	e3 0e 40 00 e3 0e 40 00 e3 0e 40 00 e3 0e 40 00     ..@...@...@...@.
  40010c:	e3 0e 40 00 e3 0e 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 e3 0e 40 00 e3 0e 40 00 e3 0e 40 00     ......@...@...@.
  40012c:	e3 0e 40 00 e3 0e 40 00 e3 0e 40 00 e3 0e 40 00     ..@...@...@...@.
  40013c:	e3 0e 40 00 e3 0e 40 00 e3 0e 40 00 e3 0e 40 00     ..@...@...@...@.
  40014c:	e3 0e 40 00 e3 0e 40 00 e3 0e 40 00 e3 0e 40 00     ..@...@...@...@.
  40015c:	e3 0e 40 00 e3 0e 40 00 e3 0e 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400a10 	.word	0x20400a10
  400184:	00000000 	.word	0x00000000
  400188:	0040efac 	.word	0x0040efac

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	0040efac 	.word	0x0040efac
  4001c8:	20400a14 	.word	0x20400a14
  4001cc:	0040efac 	.word	0x0040efac
  4001d0:	00000000 	.word	0x00000000

004001d4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001d4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001d6:	4810      	ldr	r0, [pc, #64]	; (400218 <sysclk_init+0x44>)
  4001d8:	4b10      	ldr	r3, [pc, #64]	; (40021c <sysclk_init+0x48>)
  4001da:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001dc:	213e      	movs	r1, #62	; 0x3e
  4001de:	2000      	movs	r0, #0
  4001e0:	4b0f      	ldr	r3, [pc, #60]	; (400220 <sysclk_init+0x4c>)
  4001e2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001e4:	4c0f      	ldr	r4, [pc, #60]	; (400224 <sysclk_init+0x50>)
  4001e6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001e8:	2800      	cmp	r0, #0
  4001ea:	d0fc      	beq.n	4001e6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001ec:	4b0e      	ldr	r3, [pc, #56]	; (400228 <sysclk_init+0x54>)
  4001ee:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001f0:	4a0e      	ldr	r2, [pc, #56]	; (40022c <sysclk_init+0x58>)
  4001f2:	4b0f      	ldr	r3, [pc, #60]	; (400230 <sysclk_init+0x5c>)
  4001f4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001f6:	4c0f      	ldr	r4, [pc, #60]	; (400234 <sysclk_init+0x60>)
  4001f8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001fa:	2800      	cmp	r0, #0
  4001fc:	d0fc      	beq.n	4001f8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001fe:	2002      	movs	r0, #2
  400200:	4b0d      	ldr	r3, [pc, #52]	; (400238 <sysclk_init+0x64>)
  400202:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400204:	2010      	movs	r0, #16
  400206:	4b0d      	ldr	r3, [pc, #52]	; (40023c <sysclk_init+0x68>)
  400208:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40020a:	4b0d      	ldr	r3, [pc, #52]	; (400240 <sysclk_init+0x6c>)
  40020c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40020e:	480d      	ldr	r0, [pc, #52]	; (400244 <sysclk_init+0x70>)
  400210:	4b02      	ldr	r3, [pc, #8]	; (40021c <sysclk_init+0x48>)
  400212:	4798      	blx	r3
  400214:	bd10      	pop	{r4, pc}
  400216:	bf00      	nop
  400218:	07270e00 	.word	0x07270e00
  40021c:	004010b9 	.word	0x004010b9
  400220:	00400c65 	.word	0x00400c65
  400224:	00400cb9 	.word	0x00400cb9
  400228:	00400cc9 	.word	0x00400cc9
  40022c:	20183f01 	.word	0x20183f01
  400230:	400e0600 	.word	0x400e0600
  400234:	00400cd9 	.word	0x00400cd9
  400238:	00400bc9 	.word	0x00400bc9
  40023c:	00400c01 	.word	0x00400c01
  400240:	00400fad 	.word	0x00400fad
  400244:	08f0d180 	.word	0x08f0d180

00400248 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  40024c:	b980      	cbnz	r0, 400270 <_read+0x28>
  40024e:	460c      	mov	r4, r1
  400250:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400252:	2a00      	cmp	r2, #0
  400254:	dd0f      	ble.n	400276 <_read+0x2e>
  400256:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400258:	4e08      	ldr	r6, [pc, #32]	; (40027c <_read+0x34>)
  40025a:	4d09      	ldr	r5, [pc, #36]	; (400280 <_read+0x38>)
  40025c:	6830      	ldr	r0, [r6, #0]
  40025e:	4621      	mov	r1, r4
  400260:	682b      	ldr	r3, [r5, #0]
  400262:	4798      	blx	r3
		ptr++;
  400264:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400266:	42bc      	cmp	r4, r7
  400268:	d1f8      	bne.n	40025c <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40026a:	4640      	mov	r0, r8
  40026c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400270:	f04f 38ff 	mov.w	r8, #4294967295
  400274:	e7f9      	b.n	40026a <_read+0x22>
	for (; len > 0; --len) {
  400276:	4680      	mov	r8, r0
  400278:	e7f7      	b.n	40026a <_read+0x22>
  40027a:	bf00      	nop
  40027c:	2040392c 	.word	0x2040392c
  400280:	20403924 	.word	0x20403924

00400284 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400284:	3801      	subs	r0, #1
  400286:	2802      	cmp	r0, #2
  400288:	d815      	bhi.n	4002b6 <_write+0x32>
{
  40028a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40028e:	460e      	mov	r6, r1
  400290:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400292:	b19a      	cbz	r2, 4002bc <_write+0x38>
  400294:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400296:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4002d0 <_write+0x4c>
  40029a:	4f0c      	ldr	r7, [pc, #48]	; (4002cc <_write+0x48>)
  40029c:	f8d8 0000 	ldr.w	r0, [r8]
  4002a0:	f815 1b01 	ldrb.w	r1, [r5], #1
  4002a4:	683b      	ldr	r3, [r7, #0]
  4002a6:	4798      	blx	r3
  4002a8:	2800      	cmp	r0, #0
  4002aa:	db0a      	blt.n	4002c2 <_write+0x3e>
  4002ac:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4002ae:	3c01      	subs	r4, #1
  4002b0:	d1f4      	bne.n	40029c <_write+0x18>
  4002b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4002b6:	f04f 30ff 	mov.w	r0, #4294967295
  4002ba:	4770      	bx	lr
	for (; len != 0; --len) {
  4002bc:	4610      	mov	r0, r2
  4002be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4002c2:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4002c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002ca:	bf00      	nop
  4002cc:	20403928 	.word	0x20403928
  4002d0:	2040392c 	.word	0x2040392c

004002d4 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4002d4:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002da:	4b3b      	ldr	r3, [pc, #236]	; (4003c8 <board_init+0xf4>)
  4002dc:	605a      	str	r2, [r3, #4]
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4002de:	f5a3 6345 	sub.w	r3, r3, #3152	; 0xc50
  4002e2:	4a3a      	ldr	r2, [pc, #232]	; (4003cc <board_init+0xf8>)
  4002e4:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4002e6:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
  4002ea:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4002ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4002f0:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4002f4:	4b36      	ldr	r3, [pc, #216]	; (4003d0 <board_init+0xfc>)
  4002f6:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  4002fa:	f022 0201 	bic.w	r2, r2, #1
  4002fe:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400302:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400306:	f022 0201 	bic.w	r2, r2, #1
  40030a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  40030e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400312:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400316:	200a      	movs	r0, #10
  400318:	4c2e      	ldr	r4, [pc, #184]	; (4003d4 <board_init+0x100>)
  40031a:	47a0      	blx	r4
  40031c:	200b      	movs	r0, #11
  40031e:	47a0      	blx	r4
  400320:	200c      	movs	r0, #12
  400322:	47a0      	blx	r4
  400324:	2010      	movs	r0, #16
  400326:	47a0      	blx	r4
  400328:	2011      	movs	r0, #17
  40032a:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40032c:	4b2a      	ldr	r3, [pc, #168]	; (4003d8 <board_init+0x104>)
  40032e:	f44f 7280 	mov.w	r2, #256	; 0x100
  400332:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400334:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400338:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40033a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  40033e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400342:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400344:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400348:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40034a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40034e:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400350:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400352:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400356:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400358:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40035c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40035e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400360:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400364:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400366:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40036a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  40036e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400372:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400376:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400378:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40037c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40037e:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400380:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400384:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400386:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  40038a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40038c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40038e:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400392:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400394:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400396:	4a11      	ldr	r2, [pc, #68]	; (4003dc <board_init+0x108>)
  400398:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  40039c:	f043 0310 	orr.w	r3, r3, #16
  4003a0:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  4003a4:	4b0e      	ldr	r3, [pc, #56]	; (4003e0 <board_init+0x10c>)
  4003a6:	2210      	movs	r2, #16
  4003a8:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003ae:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003b0:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4003b6:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003b8:	4311      	orrs	r1, r2
  4003ba:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4003bc:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003be:	4311      	orrs	r1, r2
  4003c0:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003c2:	605a      	str	r2, [r3, #4]
  4003c4:	bd10      	pop	{r4, pc}
  4003c6:	bf00      	nop
  4003c8:	400e1850 	.word	0x400e1850
  4003cc:	5a00080c 	.word	0x5a00080c
  4003d0:	e000ed00 	.word	0xe000ed00
  4003d4:	00400ce9 	.word	0x00400ce9
  4003d8:	400e1200 	.word	0x400e1200
  4003dc:	40088000 	.word	0x40088000
  4003e0:	400e1000 	.word	0x400e1000

004003e4 <ethernet_phy_set_link>:
 *
 * Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_set_link(Gmac *p_gmac, uint8_t uc_phy_addr,
		uint8_t uc_apply_setting_flag)
{
  4003e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4003e6:	b083      	sub	sp, #12
  4003e8:	4604      	mov	r4, r0
  4003ea:	460f      	mov	r7, r1
  4003ec:	4616      	mov	r6, r2
 * \param uc_enable   0 to disable GMAC management, else to enable it.
 */
static inline void gmac_enable_management(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  4003ee:	6803      	ldr	r3, [r0, #0]
  4003f0:	f043 0310 	orr.w	r3, r3, #16
  4003f4:	6003      	str	r3, [r0, #0]

	gmac_enable_management(p_gmac, true);

	uc_phy_address = uc_phy_addr;

	uc_rc = gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_stat1);
  4003f6:	ab01      	add	r3, sp, #4
  4003f8:	2201      	movs	r2, #1
  4003fa:	4d36      	ldr	r5, [pc, #216]	; (4004d4 <ethernet_phy_set_link+0xf0>)
  4003fc:	47a8      	blx	r5
	if (uc_rc != GMAC_OK) {
  4003fe:	b958      	cbnz	r0, 400418 <ethernet_phy_set_link+0x34>
		gmac_enable_management(p_gmac, false);

		return uc_rc;
	}

	if ((ul_stat1 & GMII_LINK_STATUS) == 0) {
  400400:	9b01      	ldr	r3, [sp, #4]
  400402:	f013 0f04 	tst.w	r3, #4
  400406:	d10d      	bne.n	400424 <ethernet_phy_set_link+0x40>
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  400408:	6823      	ldr	r3, [r4, #0]
  40040a:	f023 0310 	bic.w	r3, r3, #16
  40040e:	6023      	str	r3, [r4, #0]
		/* Disable PHY management and start the GMAC transfer */
		gmac_enable_management(p_gmac, false);

		return GMAC_INVALID;
  400410:	23ff      	movs	r3, #255	; 0xff
	gmac_enable_full_duplex(p_gmac, uc_fd);

	/* Start the GMAC transfers */
	gmac_enable_management(p_gmac, false);
	return uc_rc;
}
  400412:	4618      	mov	r0, r3
  400414:	b003      	add	sp, #12
  400416:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400418:	4603      	mov	r3, r0
  40041a:	6822      	ldr	r2, [r4, #0]
  40041c:	f022 0210 	bic.w	r2, r2, #16
  400420:	6022      	str	r2, [r4, #0]
		return uc_rc;
  400422:	e7f6      	b.n	400412 <ethernet_phy_set_link+0x2e>
	if (uc_apply_setting_flag == 0) {
  400424:	b92e      	cbnz	r6, 400432 <ethernet_phy_set_link+0x4e>
  400426:	6823      	ldr	r3, [r4, #0]
  400428:	f023 0310 	bic.w	r3, r3, #16
  40042c:	6023      	str	r3, [r4, #0]
		return uc_rc;
  40042e:	4633      	mov	r3, r6
  400430:	e7ef      	b.n	400412 <ethernet_phy_set_link+0x2e>
	uc_rc = gmac_phy_read(p_gmac, uc_phy_address, GMII_PCR1, &ul_stat2);
  400432:	466b      	mov	r3, sp
  400434:	221e      	movs	r2, #30
  400436:	4639      	mov	r1, r7
  400438:	4620      	mov	r0, r4
  40043a:	4d26      	ldr	r5, [pc, #152]	; (4004d4 <ethernet_phy_set_link+0xf0>)
  40043c:	47a8      	blx	r5
	if (uc_rc != GMAC_OK) {
  40043e:	4603      	mov	r3, r0
  400440:	b950      	cbnz	r0, 400458 <ethernet_phy_set_link+0x74>
	if ((ul_stat1 & GMII_100BASE_TX_FD) && (ul_stat2 & GMII_OMI_100BASE_TX_FD)) {
  400442:	9a01      	ldr	r2, [sp, #4]
	if ((ul_stat1 & GMII_10BASE_T_FD) && (ul_stat2 & GMII_OMI_10BASE_T_FD)) {
  400444:	f412 5f80 	tst.w	r2, #4096	; 0x1000
  400448:	d00b      	beq.n	400462 <ethernet_phy_set_link+0x7e>
  40044a:	9900      	ldr	r1, [sp, #0]
  40044c:	f011 0f05 	tst.w	r1, #5
  400450:	bf0c      	ite	eq
  400452:	2101      	moveq	r1, #1
  400454:	2100      	movne	r1, #0
  400456:	e005      	b.n	400464 <ethernet_phy_set_link+0x80>
  400458:	6822      	ldr	r2, [r4, #0]
  40045a:	f022 0210 	bic.w	r2, r2, #16
  40045e:	6022      	str	r2, [r4, #0]
		return uc_rc;
  400460:	e7d7      	b.n	400412 <ethernet_phy_set_link+0x2e>
  400462:	2101      	movs	r1, #1
	if ((ul_stat1 & GMII_100BASE_TX_HD) && (ul_stat2 & GMII_OMI_100BASE_TX_HD)) {
  400464:	f412 5f00 	tst.w	r2, #8192	; 0x2000
  400468:	d003      	beq.n	400472 <ethernet_phy_set_link+0x8e>
  40046a:	9800      	ldr	r0, [sp, #0]
  40046c:	f010 0f02 	tst.w	r0, #2
  400470:	d127      	bne.n	4004c2 <ethernet_phy_set_link+0xde>
	if ((ul_stat1 & GMII_10BASE_T_HD) && (ul_stat2 & GMII_OMI_10BASE_T_HD)) {
  400472:	f412 6f00 	tst.w	r2, #2048	; 0x800
  400476:	d003      	beq.n	400480 <ethernet_phy_set_link+0x9c>
  400478:	9a00      	ldr	r2, [sp, #0]
  40047a:	f012 0f01 	tst.w	r2, #1
  40047e:	d111      	bne.n	4004a4 <ethernet_phy_set_link+0xc0>
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_speed 1 to indicate 100Mbps, 0 to 10Mbps.
 */
static inline void gmac_set_speed(Gmac* p_gmac, uint8_t uc_speed)
{
	if (uc_speed) {
  400480:	b191      	cbz	r1, 4004a8 <ethernet_phy_set_link+0xc4>
  400482:	2201      	movs	r2, #1
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_SPD;
  400484:	6861      	ldr	r1, [r4, #4]
  400486:	f041 0101 	orr.w	r1, r1, #1
  40048a:	6061      	str	r1, [r4, #4]
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_enable   0 to disable the Full-Duplex mode, else to enable it.
 */
static inline void gmac_enable_full_duplex(Gmac* p_gmac, uint8_t uc_enable)
{
	if (uc_enable) {
  40048c:	b1a2      	cbz	r2, 4004b8 <ethernet_phy_set_link+0xd4>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_FD;
  40048e:	6862      	ldr	r2, [r4, #4]
  400490:	f042 0202 	orr.w	r2, r2, #2
  400494:	6062      	str	r2, [r4, #4]
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  400496:	6822      	ldr	r2, [r4, #0]
  400498:	f022 0210 	bic.w	r2, r2, #16
  40049c:	6022      	str	r2, [r4, #0]
	return uc_rc;
  40049e:	e7b8      	b.n	400412 <ethernet_phy_set_link+0x2e>
		uc_fd = false;
  4004a0:	461a      	mov	r2, r3
  4004a2:	e7ef      	b.n	400484 <ethernet_phy_set_link+0xa0>
		uc_fd = false;
  4004a4:	461a      	mov	r2, r3
  4004a6:	e000      	b.n	4004aa <ethernet_phy_set_link+0xc6>
	if (uc_speed) {
  4004a8:	2201      	movs	r2, #1
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_SPD;
  4004aa:	6861      	ldr	r1, [r4, #4]
  4004ac:	f021 0101 	bic.w	r1, r1, #1
  4004b0:	6061      	str	r1, [r4, #4]
  4004b2:	e7eb      	b.n	40048c <ethernet_phy_set_link+0xa8>
  4004b4:	461a      	mov	r2, r3
  4004b6:	e7f8      	b.n	4004aa <ethernet_phy_set_link+0xc6>
	} else {
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_FD;
  4004b8:	6862      	ldr	r2, [r4, #4]
  4004ba:	f022 0202 	bic.w	r2, r2, #2
  4004be:	6062      	str	r2, [r4, #4]
  4004c0:	e7e9      	b.n	400496 <ethernet_phy_set_link+0xb2>
	if ((ul_stat1 & GMII_10BASE_T_HD) && (ul_stat2 & GMII_OMI_10BASE_T_HD)) {
  4004c2:	f412 6f00 	tst.w	r2, #2048	; 0x800
  4004c6:	d0eb      	beq.n	4004a0 <ethernet_phy_set_link+0xbc>
  4004c8:	9a00      	ldr	r2, [sp, #0]
  4004ca:	f012 0f01 	tst.w	r2, #1
  4004ce:	d1f1      	bne.n	4004b4 <ethernet_phy_set_link+0xd0>
		uc_fd = false;
  4004d0:	461a      	mov	r2, r3
  4004d2:	e7d7      	b.n	400484 <ethernet_phy_set_link+0xa0>
  4004d4:	00400839 	.word	0x00400839

004004d8 <ethernet_phy_auto_negotiate>:
 * \param uc_phy_addr PHY address.
 *
 * Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_auto_negotiate(Gmac *p_gmac, uint8_t uc_phy_addr)
{
  4004d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4004dc:	b082      	sub	sp, #8
  4004de:	4604      	mov	r4, r0
  4004e0:	460d      	mov	r5, r1
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  4004e2:	6803      	ldr	r3, [r0, #0]
  4004e4:	f043 0310 	orr.w	r3, r3, #16
  4004e8:	6003      	str	r3, [r0, #0]
	uint8_t uc_rc;

	gmac_enable_management(p_gmac, true);

	/* Set up control register */
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMCR, &ul_value);
  4004ea:	ab01      	add	r3, sp, #4
  4004ec:	2200      	movs	r2, #0
  4004ee:	4e5d      	ldr	r6, [pc, #372]	; (400664 <ethernet_phy_auto_negotiate+0x18c>)
  4004f0:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  4004f2:	b140      	cbz	r0, 400506 <ethernet_phy_auto_negotiate+0x2e>
  4004f4:	4603      	mov	r3, r0
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  4004f6:	6822      	ldr	r2, [r4, #0]
  4004f8:	f022 0210 	bic.w	r2, r2, #16
  4004fc:	6022      	str	r2, [r4, #0]
	gmac_enable_transmit(GMAC, true);
	gmac_enable_receive(GMAC, true);

	gmac_enable_management(p_gmac, false);
	return uc_rc;
}
  4004fe:	4618      	mov	r0, r3
  400500:	b002      	add	sp, #8
  400502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ul_value &= ~(uint32_t)(GMII_LOOPBACK | GMII_POWER_DOWN);
  400506:	9b01      	ldr	r3, [sp, #4]
  400508:	f423 43b0 	bic.w	r3, r3, #22528	; 0x5800
	ul_value |= (uint32_t)GMII_ISOLATE; /* Electrically isolate PHY */
  40050c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  400510:	9301      	str	r3, [sp, #4]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  400512:	2200      	movs	r2, #0
  400514:	4629      	mov	r1, r5
  400516:	4620      	mov	r0, r4
  400518:	4e53      	ldr	r6, [pc, #332]	; (400668 <ethernet_phy_auto_negotiate+0x190>)
  40051a:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  40051c:	4603      	mov	r3, r0
  40051e:	b120      	cbz	r0, 40052a <ethernet_phy_auto_negotiate+0x52>
  400520:	6822      	ldr	r2, [r4, #0]
  400522:	f022 0210 	bic.w	r2, r2, #16
  400526:	6022      	str	r2, [r4, #0]
		return uc_rc;
  400528:	e7e9      	b.n	4004fe <ethernet_phy_auto_negotiate+0x26>
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_ANAR, ul_phy_anar);
  40052a:	f240 13e1 	movw	r3, #481	; 0x1e1
  40052e:	2204      	movs	r2, #4
  400530:	4629      	mov	r1, r5
  400532:	4620      	mov	r0, r4
  400534:	4e4c      	ldr	r6, [pc, #304]	; (400668 <ethernet_phy_auto_negotiate+0x190>)
  400536:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  400538:	4603      	mov	r3, r0
  40053a:	b120      	cbz	r0, 400546 <ethernet_phy_auto_negotiate+0x6e>
  40053c:	6822      	ldr	r2, [r4, #0]
  40053e:	f022 0210 	bic.w	r2, r2, #16
  400542:	6022      	str	r2, [r4, #0]
		return uc_rc;
  400544:	e7db      	b.n	4004fe <ethernet_phy_auto_negotiate+0x26>
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMCR, &ul_value);
  400546:	ab01      	add	r3, sp, #4
  400548:	2200      	movs	r2, #0
  40054a:	4629      	mov	r1, r5
  40054c:	4620      	mov	r0, r4
  40054e:	4e45      	ldr	r6, [pc, #276]	; (400664 <ethernet_phy_auto_negotiate+0x18c>)
  400550:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  400552:	4603      	mov	r3, r0
  400554:	b120      	cbz	r0, 400560 <ethernet_phy_auto_negotiate+0x88>
  400556:	6822      	ldr	r2, [r4, #0]
  400558:	f022 0210 	bic.w	r2, r2, #16
  40055c:	6022      	str	r2, [r4, #0]
		return uc_rc;
  40055e:	e7ce      	b.n	4004fe <ethernet_phy_auto_negotiate+0x26>
	ul_value |= GMII_SPEED_SELECT | GMII_AUTONEG | GMII_DUPLEX_MODE;
  400560:	9b01      	ldr	r3, [sp, #4]
  400562:	f443 5344 	orr.w	r3, r3, #12544	; 0x3100
  400566:	9301      	str	r3, [sp, #4]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  400568:	2200      	movs	r2, #0
  40056a:	4629      	mov	r1, r5
  40056c:	4620      	mov	r0, r4
  40056e:	4e3e      	ldr	r6, [pc, #248]	; (400668 <ethernet_phy_auto_negotiate+0x190>)
  400570:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  400572:	4603      	mov	r3, r0
  400574:	b120      	cbz	r0, 400580 <ethernet_phy_auto_negotiate+0xa8>
  400576:	6822      	ldr	r2, [r4, #0]
  400578:	f022 0210 	bic.w	r2, r2, #16
  40057c:	6022      	str	r2, [r4, #0]
		return uc_rc;
  40057e:	e7be      	b.n	4004fe <ethernet_phy_auto_negotiate+0x26>
	ul_value &= ~(uint32_t)GMII_ISOLATE;
  400580:	9b01      	ldr	r3, [sp, #4]
  400582:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  400586:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  40058a:	9301      	str	r3, [sp, #4]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  40058c:	2200      	movs	r2, #0
  40058e:	4629      	mov	r1, r5
  400590:	4620      	mov	r0, r4
  400592:	4e35      	ldr	r6, [pc, #212]	; (400668 <ethernet_phy_auto_negotiate+0x190>)
  400594:	47b0      	blx	r6
	if (uc_rc != GMAC_OK) {
  400596:	4603      	mov	r3, r0
  400598:	b9b0      	cbnz	r0, 4005c8 <ethernet_phy_auto_negotiate+0xf0>
  40059a:	4e34      	ldr	r6, [pc, #208]	; (40066c <ethernet_phy_auto_negotiate+0x194>)
		uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMSR, &ul_value);
  40059c:	f04f 0801 	mov.w	r8, #1
  4005a0:	4f30      	ldr	r7, [pc, #192]	; (400664 <ethernet_phy_auto_negotiate+0x18c>)
  4005a2:	ab01      	add	r3, sp, #4
  4005a4:	4642      	mov	r2, r8
  4005a6:	4629      	mov	r1, r5
  4005a8:	4620      	mov	r0, r4
  4005aa:	47b8      	blx	r7
		if (uc_rc != GMAC_OK) {
  4005ac:	4603      	mov	r3, r0
  4005ae:	b980      	cbnz	r0, 4005d2 <ethernet_phy_auto_negotiate+0xfa>
		if (ul_value & GMII_AUTONEG_COMP) {
  4005b0:	9b01      	ldr	r3, [sp, #4]
  4005b2:	f013 0f20 	tst.w	r3, #32
  4005b6:	d111      	bne.n	4005dc <ethernet_phy_auto_negotiate+0x104>
			if (++ul_retry_count >= ul_retry_max) {
  4005b8:	3e01      	subs	r6, #1
  4005ba:	d1f2      	bne.n	4005a2 <ethernet_phy_auto_negotiate+0xca>
  4005bc:	6823      	ldr	r3, [r4, #0]
  4005be:	f023 0310 	bic.w	r3, r3, #16
  4005c2:	6023      	str	r3, [r4, #0]
				return GMAC_TIMEOUT;
  4005c4:	2301      	movs	r3, #1
  4005c6:	e79a      	b.n	4004fe <ethernet_phy_auto_negotiate+0x26>
  4005c8:	6822      	ldr	r2, [r4, #0]
  4005ca:	f022 0210 	bic.w	r2, r2, #16
  4005ce:	6022      	str	r2, [r4, #0]
		return uc_rc;
  4005d0:	e795      	b.n	4004fe <ethernet_phy_auto_negotiate+0x26>
  4005d2:	6822      	ldr	r2, [r4, #0]
  4005d4:	f022 0210 	bic.w	r2, r2, #16
  4005d8:	6022      	str	r2, [r4, #0]
			return uc_rc;
  4005da:	e790      	b.n	4004fe <ethernet_phy_auto_negotiate+0x26>
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_ANLPAR, &ul_phy_analpar);
  4005dc:	466b      	mov	r3, sp
  4005de:	2205      	movs	r2, #5
  4005e0:	4629      	mov	r1, r5
  4005e2:	4620      	mov	r0, r4
  4005e4:	4d1f      	ldr	r5, [pc, #124]	; (400664 <ethernet_phy_auto_negotiate+0x18c>)
  4005e6:	47a8      	blx	r5
	if (uc_rc != GMAC_OK) {
  4005e8:	4603      	mov	r3, r0
  4005ea:	b980      	cbnz	r0, 40060e <ethernet_phy_auto_negotiate+0x136>
	if ((ul_phy_anar & ul_phy_analpar) & GMII_100TX_FDX) {
  4005ec:	9a00      	ldr	r2, [sp, #0]
  4005ee:	f412 7f80 	tst.w	r2, #256	; 0x100
  4005f2:	d113      	bne.n	40061c <ethernet_phy_auto_negotiate+0x144>
	} else if ((ul_phy_anar & ul_phy_analpar) & GMII_10_FDX) {
  4005f4:	f012 0f40 	tst.w	r2, #64	; 0x40
  4005f8:	d12c      	bne.n	400654 <ethernet_phy_auto_negotiate+0x17c>
	if (uc_speed) {
  4005fa:	f012 0f80 	tst.w	r2, #128	; 0x80
		uc_fd = false;
  4005fe:	bf08      	it	eq
  400600:	4602      	moveq	r2, r0
  400602:	d109      	bne.n	400618 <ethernet_phy_auto_negotiate+0x140>
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_SPD;
  400604:	6861      	ldr	r1, [r4, #4]
  400606:	f021 0101 	bic.w	r1, r1, #1
  40060a:	6061      	str	r1, [r4, #4]
  40060c:	e00b      	b.n	400626 <ethernet_phy_auto_negotiate+0x14e>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  40060e:	6822      	ldr	r2, [r4, #0]
  400610:	f022 0210 	bic.w	r2, r2, #16
  400614:	6022      	str	r2, [r4, #0]
		return uc_rc;
  400616:	e772      	b.n	4004fe <ethernet_phy_auto_negotiate+0x26>
		uc_fd = false;
  400618:	4602      	mov	r2, r0
  40061a:	e000      	b.n	40061e <ethernet_phy_auto_negotiate+0x146>
		uc_fd = true;
  40061c:	2201      	movs	r2, #1
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_SPD;
  40061e:	6861      	ldr	r1, [r4, #4]
  400620:	f041 0101 	orr.w	r1, r1, #1
  400624:	6061      	str	r1, [r4, #4]
	if (uc_enable) {
  400626:	b1ba      	cbz	r2, 400658 <ethernet_phy_auto_negotiate+0x180>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_FD;
  400628:	6862      	ldr	r2, [r4, #4]
  40062a:	f042 0202 	orr.w	r2, r2, #2
  40062e:	6062      	str	r2, [r4, #4]
			p_gmac->GMAC_UR |= GMAC_UR_RMII;
			break;

		case GMAC_PHY_RMII:
		default:
			p_gmac->GMAC_UR &= ~GMAC_UR_RMII;
  400630:	68e2      	ldr	r2, [r4, #12]
  400632:	f022 0201 	bic.w	r2, r2, #1
  400636:	60e2      	str	r2, [r4, #12]
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
  400638:	4a0d      	ldr	r2, [pc, #52]	; (400670 <ethernet_phy_auto_negotiate+0x198>)
  40063a:	6811      	ldr	r1, [r2, #0]
  40063c:	f041 0108 	orr.w	r1, r1, #8
  400640:	6011      	str	r1, [r2, #0]
		p_gmac->GMAC_NCR |= GMAC_NCR_RXEN;
  400642:	6811      	ldr	r1, [r2, #0]
  400644:	f041 0104 	orr.w	r1, r1, #4
  400648:	6011      	str	r1, [r2, #0]
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  40064a:	6822      	ldr	r2, [r4, #0]
  40064c:	f022 0210 	bic.w	r2, r2, #16
  400650:	6022      	str	r2, [r4, #0]
	return uc_rc;
  400652:	e754      	b.n	4004fe <ethernet_phy_auto_negotiate+0x26>
		uc_fd = true;
  400654:	2201      	movs	r2, #1
  400656:	e7d5      	b.n	400604 <ethernet_phy_auto_negotiate+0x12c>
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_FD;
  400658:	6862      	ldr	r2, [r4, #4]
  40065a:	f022 0202 	bic.w	r2, r2, #2
  40065e:	6062      	str	r2, [r4, #4]
  400660:	e7e6      	b.n	400630 <ethernet_phy_auto_negotiate+0x158>
  400662:	bf00      	nop
  400664:	00400839 	.word	0x00400839
  400668:	00400899 	.word	0x00400899
  40066c:	000f4240 	.word	0x000f4240
  400670:	40050000 	.word	0x40050000

00400674 <ethernet_phy_reset>:
 * \param uc_phy_addr PHY address.
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_reset(Gmac *p_gmac, uint8_t uc_phy_addr)
{
  400674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400678:	b083      	sub	sp, #12
  40067a:	4605      	mov	r5, r0
  40067c:	4689      	mov	r9, r1
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  40067e:	6803      	ldr	r3, [r0, #0]
  400680:	f043 0310 	orr.w	r3, r3, #16
  400684:	6003      	str	r3, [r0, #0]
	uint32_t ul_timeout = ETH_PHY_TIMEOUT;
	uint8_t uc_rc = GMAC_TIMEOUT;

	gmac_enable_management(p_gmac, true);

	ul_bmcr = GMII_RESET;
  400686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40068a:	ae02      	add	r6, sp, #8
  40068c:	f846 3d04 	str.w	r3, [r6, #-4]!
	gmac_phy_write(p_gmac, uc_phy_address, GMII_BMCR, ul_bmcr);
  400690:	2200      	movs	r2, #0
  400692:	4c0e      	ldr	r4, [pc, #56]	; (4006cc <ethernet_phy_reset+0x58>)
  400694:	47a0      	blx	r4
	uint32_t ul_timeout = ETH_PHY_TIMEOUT;
  400696:	240a      	movs	r4, #10

	do {
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMCR, &ul_bmcr);
  400698:	f04f 0800 	mov.w	r8, #0
  40069c:	4f0c      	ldr	r7, [pc, #48]	; (4006d0 <ethernet_phy_reset+0x5c>)
  40069e:	4633      	mov	r3, r6
  4006a0:	4642      	mov	r2, r8
  4006a2:	4649      	mov	r1, r9
  4006a4:	4628      	mov	r0, r5
  4006a6:	47b8      	blx	r7
		ul_timeout--;
  4006a8:	3c01      	subs	r4, #1
	} while ((ul_bmcr & GMII_RESET) && ul_timeout);
  4006aa:	9b01      	ldr	r3, [sp, #4]
  4006ac:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  4006b0:	d001      	beq.n	4006b6 <ethernet_phy_reset+0x42>
  4006b2:	2c00      	cmp	r4, #0
  4006b4:	d1f3      	bne.n	40069e <ethernet_phy_reset+0x2a>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  4006b6:	682b      	ldr	r3, [r5, #0]
  4006b8:	f023 0310 	bic.w	r3, r3, #16
  4006bc:	602b      	str	r3, [r5, #0]
	if (ul_timeout) {
		uc_rc = GMAC_OK;
	}

	return (uc_rc);
}
  4006be:	fab4 f084 	clz	r0, r4
  4006c2:	0940      	lsrs	r0, r0, #5
  4006c4:	b003      	add	sp, #12
  4006c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4006ca:	bf00      	nop
  4006cc:	00400899 	.word	0x00400899
  4006d0:	00400839 	.word	0x00400839

004006d4 <ethernet_phy_init>:
{
  4006d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4006d8:	b085      	sub	sp, #20
  4006da:	4606      	mov	r6, r0
  4006dc:	4688      	mov	r8, r1
  4006de:	4615      	mov	r5, r2
	pio_set_output(PIN_GMAC_RESET_PIO, PIN_GMAC_RESET_MASK, 1,  false, true);
  4006e0:	2401      	movs	r4, #1
  4006e2:	9400      	str	r4, [sp, #0]
  4006e4:	2300      	movs	r3, #0
  4006e6:	4622      	mov	r2, r4
  4006e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4006ec:	4843      	ldr	r0, [pc, #268]	; (4007fc <ethernet_phy_init+0x128>)
  4006ee:	4f44      	ldr	r7, [pc, #272]	; (400800 <ethernet_phy_init+0x12c>)
  4006f0:	47b8      	blx	r7
	pio_set_input(PIN_GMAC_INT_PIO, PIN_GMAC_INT_MASK, PIO_PULLUP);
  4006f2:	4622      	mov	r2, r4
  4006f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  4006f8:	4842      	ldr	r0, [pc, #264]	; (400804 <ethernet_phy_init+0x130>)
  4006fa:	4b43      	ldr	r3, [pc, #268]	; (400808 <ethernet_phy_init+0x134>)
  4006fc:	4798      	blx	r3
	pio_set_peripheral(PIN_GMAC_PIO, PIN_GMAC_PERIPH, PIN_GMAC_MASK);
  4006fe:	f240 32ff 	movw	r2, #1023	; 0x3ff
  400702:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400706:	4841      	ldr	r0, [pc, #260]	; (40080c <ethernet_phy_init+0x138>)
  400708:	4b41      	ldr	r3, [pc, #260]	; (400810 <ethernet_phy_init+0x13c>)
  40070a:	4798      	blx	r3
	ethernet_phy_reset(GMAC,uc_phy_addr);
  40070c:	4641      	mov	r1, r8
  40070e:	4841      	ldr	r0, [pc, #260]	; (400814 <ethernet_phy_init+0x140>)
  400710:	4b41      	ldr	r3, [pc, #260]	; (400818 <ethernet_phy_init+0x144>)
  400712:	4798      	blx	r3
	if (ul_mck > GMAC_MCK_SPEED_240MHZ) {
  400714:	4b41      	ldr	r3, [pc, #260]	; (40081c <ethernet_phy_init+0x148>)
  400716:	429d      	cmp	r5, r3
  400718:	d85d      	bhi.n	4007d6 <ethernet_phy_init+0x102>
	} else if (ul_mck > GMAC_MCK_SPEED_160MHZ) {
  40071a:	4b41      	ldr	r3, [pc, #260]	; (400820 <ethernet_phy_init+0x14c>)
  40071c:	429d      	cmp	r5, r3
  40071e:	d80f      	bhi.n	400740 <ethernet_phy_init+0x6c>
	} else if (ul_mck > GMAC_MCK_SPEED_120MHZ) {
  400720:	4b40      	ldr	r3, [pc, #256]	; (400824 <ethernet_phy_init+0x150>)
  400722:	429d      	cmp	r5, r3
  400724:	d83e      	bhi.n	4007a4 <ethernet_phy_init+0xd0>
	} else if (ul_mck > GMAC_MCK_SPEED_80MHZ) {
  400726:	4b40      	ldr	r3, [pc, #256]	; (400828 <ethernet_phy_init+0x154>)
  400728:	429d      	cmp	r5, r3
  40072a:	d83e      	bhi.n	4007aa <ethernet_phy_init+0xd6>
	} else if (ul_mck > GMAC_MCK_SPEED_40MHZ) {
  40072c:	4b3f      	ldr	r3, [pc, #252]	; (40082c <ethernet_phy_init+0x158>)
  40072e:	429d      	cmp	r5, r3
  400730:	d83e      	bhi.n	4007b0 <ethernet_phy_init+0xdc>
		ul_clk = GMAC_NCFGR_CLK_MCK_8;
  400732:	4b3f      	ldr	r3, [pc, #252]	; (400830 <ethernet_phy_init+0x15c>)
  400734:	429d      	cmp	r5, r3
  400736:	bf8c      	ite	hi
  400738:	f44f 2380 	movhi.w	r3, #262144	; 0x40000
  40073c:	2300      	movls	r3, #0
  40073e:	e001      	b.n	400744 <ethernet_phy_init+0x70>
		ul_clk = GMAC_NCFGR_CLK_MCK_96;
  400740:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
	p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_CLK_Msk;
  400744:	6872      	ldr	r2, [r6, #4]
  400746:	f422 12e0 	bic.w	r2, r2, #1835008	; 0x1c0000
  40074a:	6072      	str	r2, [r6, #4]
	p_gmac->GMAC_NCFGR |= ul_clk;
  40074c:	6875      	ldr	r5, [r6, #4]
  40074e:	431d      	orrs	r5, r3
  400750:	6075      	str	r5, [r6, #4]
	uint32_t ul_value = 0;
  400752:	ab04      	add	r3, sp, #16
  400754:	2200      	movs	r2, #0
  400756:	f843 2d04 	str.w	r2, [r3, #-4]!
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  40075a:	6832      	ldr	r2, [r6, #0]
  40075c:	f042 0210 	orr.w	r2, r2, #16
  400760:	6032      	str	r2, [r6, #0]
	gmac_phy_read(p_gmac, uc_phy_addr, GMII_PHYID1, &ul_value);
  400762:	2202      	movs	r2, #2
  400764:	4641      	mov	r1, r8
  400766:	4630      	mov	r0, r6
  400768:	4c32      	ldr	r4, [pc, #200]	; (400834 <ethernet_phy_init+0x160>)
  40076a:	47a0      	blx	r4
	if (ul_value != GMII_OUI_MSB) {
  40076c:	9b03      	ldr	r3, [sp, #12]
  40076e:	2b22      	cmp	r3, #34	; 0x22
  400770:	d035      	beq.n	4007de <ethernet_phy_init+0x10a>
  400772:	4644      	mov	r4, r8
  400774:	2520      	movs	r5, #32
			gmac_phy_read(p_gmac, uc_phy_address, GMII_PHYID1, &ul_value);
  400776:	f04f 0902 	mov.w	r9, #2
  40077a:	4f2e      	ldr	r7, [pc, #184]	; (400834 <ethernet_phy_init+0x160>)
			uc_phy_address = (uc_phy_address + 1) & 0x1F;
  40077c:	3401      	adds	r4, #1
  40077e:	f004 041f 	and.w	r4, r4, #31
			gmac_phy_read(p_gmac, uc_phy_address, GMII_PHYID1, &ul_value);
  400782:	ab03      	add	r3, sp, #12
  400784:	464a      	mov	r2, r9
  400786:	4621      	mov	r1, r4
  400788:	4630      	mov	r0, r6
  40078a:	47b8      	blx	r7
			if (ul_value == GMII_OUI_MSB) {
  40078c:	9b03      	ldr	r3, [sp, #12]
  40078e:	2b22      	cmp	r3, #34	; 0x22
  400790:	d011      	beq.n	4007b6 <ethernet_phy_init+0xe2>
  400792:	1e6b      	subs	r3, r5, #1
		for (uc_cnt = uc_start_addr; uc_cnt <= ETH_PHY_MAX_ADDR; uc_cnt++) {
  400794:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
  400798:	d1f0      	bne.n	40077c <ethernet_phy_init+0xa8>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  40079a:	6833      	ldr	r3, [r6, #0]
  40079c:	f023 0310 	bic.w	r3, r3, #16
  4007a0:	6033      	str	r3, [r6, #0]
  4007a2:	e018      	b.n	4007d6 <ethernet_phy_init+0x102>
		ul_clk = GMAC_NCFGR_CLK_MCK_64;
  4007a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  4007a8:	e7cc      	b.n	400744 <ethernet_phy_init+0x70>
		ul_clk = GMAC_NCFGR_CLK_MCK_48;
  4007aa:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
  4007ae:	e7c9      	b.n	400744 <ethernet_phy_init+0x70>
		ul_clk = GMAC_NCFGR_CLK_MCK_32;
  4007b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4007b4:	e7c6      	b.n	400744 <ethernet_phy_init+0x70>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  4007b6:	6833      	ldr	r3, [r6, #0]
  4007b8:	f023 0310 	bic.w	r3, r3, #16
  4007bc:	6033      	str	r3, [r6, #0]
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_value);
  4007be:	ab03      	add	r3, sp, #12
  4007c0:	2201      	movs	r2, #1
  4007c2:	4621      	mov	r1, r4
  4007c4:	4630      	mov	r0, r6
  4007c6:	4d1b      	ldr	r5, [pc, #108]	; (400834 <ethernet_phy_init+0x160>)
  4007c8:	47a8      	blx	r5
	if (uc_phy != uc_phy_addr) {
  4007ca:	45a0      	cmp	r8, r4
  4007cc:	d003      	beq.n	4007d6 <ethernet_phy_init+0x102>
		ethernet_phy_reset(p_gmac, uc_phy_addr);
  4007ce:	4641      	mov	r1, r8
  4007d0:	4630      	mov	r0, r6
  4007d2:	4b11      	ldr	r3, [pc, #68]	; (400818 <ethernet_phy_init+0x144>)
  4007d4:	4798      	blx	r3
}
  4007d6:	2000      	movs	r0, #0
  4007d8:	b005      	add	sp, #20
  4007da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4007de:	6833      	ldr	r3, [r6, #0]
  4007e0:	f023 0310 	bic.w	r3, r3, #16
  4007e4:	6033      	str	r3, [r6, #0]
	if (uc_rc != 0xFF) {
  4007e6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  4007ea:	d0f4      	beq.n	4007d6 <ethernet_phy_init+0x102>
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_value);
  4007ec:	ab03      	add	r3, sp, #12
  4007ee:	2201      	movs	r2, #1
  4007f0:	4641      	mov	r1, r8
  4007f2:	4630      	mov	r0, r6
  4007f4:	4c0f      	ldr	r4, [pc, #60]	; (400834 <ethernet_phy_init+0x160>)
  4007f6:	47a0      	blx	r4
  4007f8:	e7ed      	b.n	4007d6 <ethernet_phy_init+0x102>
  4007fa:	bf00      	nop
  4007fc:	400e1200 	.word	0x400e1200
  400800:	004009b5 	.word	0x004009b5
  400804:	400e0e00 	.word	0x400e0e00
  400808:	0040097f 	.word	0x0040097f
  40080c:	400e1400 	.word	0x400e1400
  400810:	004008ed 	.word	0x004008ed
  400814:	40050000 	.word	0x40050000
  400818:	00400675 	.word	0x00400675
  40081c:	0e4e1c00 	.word	0x0e4e1c00
  400820:	09896800 	.word	0x09896800
  400824:	07270e00 	.word	0x07270e00
  400828:	04c4b400 	.word	0x04c4b400
  40082c:	02625a00 	.word	0x02625a00
  400830:	01312d00 	.word	0x01312d00
  400834:	00400839 	.word	0x00400839

00400838 <gmac_phy_read>:
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t gmac_phy_read(Gmac* p_gmac, uint8_t uc_phy_address, uint8_t uc_address,
		uint32_t* p_value)
{
  400838:	b410      	push	{r4}
  40083a:	b083      	sub	sp, #12
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  40083c:	6884      	ldr	r4, [r0, #8]
  40083e:	f014 0f04 	tst.w	r4, #4
  400842:	d0fb      	beq.n	40083c <gmac_phy_read+0x4>
			| GMAC_MAN_REGA(uc_reg_addr)
  400844:	0492      	lsls	r2, r2, #18
  400846:	f402 04f8 	and.w	r4, r2, #8126464	; 0x7c0000
			| GMAC_MAN_DATA(us_data);
  40084a:	4a11      	ldr	r2, [pc, #68]	; (400890 <gmac_phy_read+0x58>)
  40084c:	4322      	orrs	r2, r4
			| GMAC_MAN_PHYA(uc_phy_addr)
  40084e:	05c9      	lsls	r1, r1, #23
  400850:	f001 6178 	and.w	r1, r1, #260046848	; 0xf800000
			| GMAC_MAN_DATA(us_data);
  400854:	430a      	orrs	r2, r1
	p_gmac->GMAC_MAN = GMAC_MAN_WTN(GMAC_MAN_CODE_VALUE)
  400856:	6342      	str	r2, [r0, #52]	; 0x34
	volatile uint32_t ul_retry_count = 0;
  400858:	2200      	movs	r2, #0
  40085a:	9201      	str	r2, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  40085c:	490d      	ldr	r1, [pc, #52]	; (400894 <gmac_phy_read+0x5c>)
	return ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) > 0);
  40085e:	6882      	ldr	r2, [r0, #8]
	while (!gmac_is_phy_idle(p_gmac)) {
  400860:	f012 0f04 	tst.w	r2, #4
  400864:	d107      	bne.n	400876 <gmac_phy_read+0x3e>
		ul_retry_count++;
  400866:	9a01      	ldr	r2, [sp, #4]
  400868:	3201      	adds	r2, #1
  40086a:	9201      	str	r2, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  40086c:	9a01      	ldr	r2, [sp, #4]
  40086e:	428a      	cmp	r2, r1
  400870:	d9f5      	bls.n	40085e <gmac_phy_read+0x26>
	gmac_maintain_phy(p_gmac, uc_phy_address, uc_address, 1, 0);

	if (gmac_phy_wait(p_gmac, MAC_PHY_RETRY_MAX) == GMAC_TIMEOUT) {
		return GMAC_TIMEOUT;
  400872:	2001      	movs	r0, #1
  400874:	e007      	b.n	400886 <gmac_phy_read+0x4e>
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  400876:	6882      	ldr	r2, [r0, #8]
  400878:	f012 0f04 	tst.w	r2, #4
  40087c:	d0fb      	beq.n	400876 <gmac_phy_read+0x3e>
	return (uint16_t) (p_gmac->GMAC_MAN & GMAC_MAN_DATA_Msk);
  40087e:	6b42      	ldr	r2, [r0, #52]	; 0x34
	}
	*p_value = gmac_get_phy_data(p_gmac);
  400880:	b292      	uxth	r2, r2
  400882:	601a      	str	r2, [r3, #0]
	return GMAC_OK;
  400884:	2000      	movs	r0, #0
}
  400886:	b003      	add	sp, #12
  400888:	f85d 4b04 	ldr.w	r4, [sp], #4
  40088c:	4770      	bx	lr
  40088e:	bf00      	nop
  400890:	60020000 	.word	0x60020000
  400894:	000f423f 	.word	0x000f423f

00400898 <gmac_phy_write>:
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t gmac_phy_write(Gmac* p_gmac, uint8_t uc_phy_address,
		uint8_t uc_address, uint32_t ul_value)
{
  400898:	b410      	push	{r4}
  40089a:	b083      	sub	sp, #12
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  40089c:	6884      	ldr	r4, [r0, #8]
  40089e:	f014 0f04 	tst.w	r4, #4
  4008a2:	d0fb      	beq.n	40089c <gmac_phy_write+0x4>
			| GMAC_MAN_REGA(uc_reg_addr)
  4008a4:	0492      	lsls	r2, r2, #18
  4008a6:	f402 04f8 	and.w	r4, r2, #8126464	; 0x7c0000
			| GMAC_MAN_DATA(us_data);
  4008aa:	4a0e      	ldr	r2, [pc, #56]	; (4008e4 <gmac_phy_write+0x4c>)
  4008ac:	4322      	orrs	r2, r4
			| GMAC_MAN_PHYA(uc_phy_addr)
  4008ae:	05c9      	lsls	r1, r1, #23
  4008b0:	f001 6178 	and.w	r1, r1, #260046848	; 0xf800000
			| GMAC_MAN_DATA(us_data);
  4008b4:	430a      	orrs	r2, r1
  4008b6:	b29b      	uxth	r3, r3
  4008b8:	431a      	orrs	r2, r3
	p_gmac->GMAC_MAN = GMAC_MAN_WTN(GMAC_MAN_CODE_VALUE)
  4008ba:	6342      	str	r2, [r0, #52]	; 0x34
	volatile uint32_t ul_retry_count = 0;
  4008bc:	2300      	movs	r3, #0
  4008be:	9301      	str	r3, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  4008c0:	4a09      	ldr	r2, [pc, #36]	; (4008e8 <gmac_phy_write+0x50>)
	return ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) > 0);
  4008c2:	6883      	ldr	r3, [r0, #8]
	while (!gmac_is_phy_idle(p_gmac)) {
  4008c4:	f013 0f04 	tst.w	r3, #4
  4008c8:	d107      	bne.n	4008da <gmac_phy_write+0x42>
		ul_retry_count++;
  4008ca:	9b01      	ldr	r3, [sp, #4]
  4008cc:	3301      	adds	r3, #1
  4008ce:	9301      	str	r3, [sp, #4]
		if (ul_retry_count >= ul_retry) {
  4008d0:	9b01      	ldr	r3, [sp, #4]
  4008d2:	4293      	cmp	r3, r2
  4008d4:	d9f5      	bls.n	4008c2 <gmac_phy_write+0x2a>
			return GMAC_TIMEOUT;
  4008d6:	2001      	movs	r0, #1
  4008d8:	e000      	b.n	4008dc <gmac_phy_write+0x44>
	return GMAC_OK;
  4008da:	2000      	movs	r0, #0

	if (gmac_phy_wait(p_gmac, MAC_PHY_RETRY_MAX) == GMAC_TIMEOUT) {
		return GMAC_TIMEOUT;
	}
	return GMAC_OK;
}
  4008dc:	b003      	add	sp, #12
  4008de:	f85d 4b04 	ldr.w	r4, [sp], #4
  4008e2:	4770      	bx	lr
  4008e4:	50020000 	.word	0x50020000
  4008e8:	000f423f 	.word	0x000f423f

004008ec <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4008ec:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4008ee:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4008f2:	d03a      	beq.n	40096a <pio_set_peripheral+0x7e>
  4008f4:	d813      	bhi.n	40091e <pio_set_peripheral+0x32>
  4008f6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4008fa:	d025      	beq.n	400948 <pio_set_peripheral+0x5c>
  4008fc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400900:	d10a      	bne.n	400918 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400902:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400904:	4313      	orrs	r3, r2
  400906:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400908:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40090a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40090c:	400b      	ands	r3, r1
  40090e:	ea23 0302 	bic.w	r3, r3, r2
  400912:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400914:	6042      	str	r2, [r0, #4]
  400916:	4770      	bx	lr
	switch (ul_type) {
  400918:	2900      	cmp	r1, #0
  40091a:	d1fb      	bne.n	400914 <pio_set_peripheral+0x28>
  40091c:	4770      	bx	lr
  40091e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400922:	d021      	beq.n	400968 <pio_set_peripheral+0x7c>
  400924:	d809      	bhi.n	40093a <pio_set_peripheral+0x4e>
  400926:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40092a:	d1f3      	bne.n	400914 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  40092c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40092e:	4313      	orrs	r3, r2
  400930:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400932:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400934:	4313      	orrs	r3, r2
  400936:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400938:	e7ec      	b.n	400914 <pio_set_peripheral+0x28>
	switch (ul_type) {
  40093a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40093e:	d013      	beq.n	400968 <pio_set_peripheral+0x7c>
  400940:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400944:	d010      	beq.n	400968 <pio_set_peripheral+0x7c>
  400946:	e7e5      	b.n	400914 <pio_set_peripheral+0x28>
{
  400948:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  40094a:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40094c:	6f04      	ldr	r4, [r0, #112]	; 0x70
  40094e:	43d3      	mvns	r3, r2
  400950:	4021      	ands	r1, r4
  400952:	461c      	mov	r4, r3
  400954:	4019      	ands	r1, r3
  400956:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400958:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40095a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40095c:	400b      	ands	r3, r1
  40095e:	4023      	ands	r3, r4
  400960:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400962:	6042      	str	r2, [r0, #4]
}
  400964:	f85d 4b04 	ldr.w	r4, [sp], #4
  400968:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  40096a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40096c:	6f01      	ldr	r1, [r0, #112]	; 0x70
  40096e:	400b      	ands	r3, r1
  400970:	ea23 0302 	bic.w	r3, r3, r2
  400974:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400976:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400978:	4313      	orrs	r3, r2
  40097a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40097c:	e7ca      	b.n	400914 <pio_set_peripheral+0x28>

0040097e <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40097e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400980:	f012 0f01 	tst.w	r2, #1
  400984:	d10d      	bne.n	4009a2 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400986:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400988:	f012 0f0a 	tst.w	r2, #10
  40098c:	d00b      	beq.n	4009a6 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  40098e:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400990:	f012 0f02 	tst.w	r2, #2
  400994:	d109      	bne.n	4009aa <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400996:	f012 0f08 	tst.w	r2, #8
  40099a:	d008      	beq.n	4009ae <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  40099c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  4009a0:	e005      	b.n	4009ae <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  4009a2:	6641      	str	r1, [r0, #100]	; 0x64
  4009a4:	e7f0      	b.n	400988 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  4009a6:	6241      	str	r1, [r0, #36]	; 0x24
  4009a8:	e7f2      	b.n	400990 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  4009aa:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  4009ae:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4009b0:	6001      	str	r1, [r0, #0]
  4009b2:	4770      	bx	lr

004009b4 <pio_set_output>:
{
  4009b4:	b410      	push	{r4}
  4009b6:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4009b8:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4009ba:	b94c      	cbnz	r4, 4009d0 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  4009bc:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4009be:	b14b      	cbz	r3, 4009d4 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  4009c0:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4009c2:	b94a      	cbnz	r2, 4009d8 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  4009c4:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4009c6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4009c8:	6001      	str	r1, [r0, #0]
}
  4009ca:	f85d 4b04 	ldr.w	r4, [sp], #4
  4009ce:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4009d0:	6641      	str	r1, [r0, #100]	; 0x64
  4009d2:	e7f4      	b.n	4009be <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  4009d4:	6541      	str	r1, [r0, #84]	; 0x54
  4009d6:	e7f4      	b.n	4009c2 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  4009d8:	6301      	str	r1, [r0, #48]	; 0x30
  4009da:	e7f4      	b.n	4009c6 <pio_set_output+0x12>

004009dc <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  4009dc:	f012 0f10 	tst.w	r2, #16
  4009e0:	d012      	beq.n	400a08 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  4009e2:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4009e6:	f012 0f20 	tst.w	r2, #32
  4009ea:	d007      	beq.n	4009fc <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  4009ec:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  4009f0:	f012 0f40 	tst.w	r2, #64	; 0x40
  4009f4:	d005      	beq.n	400a02 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  4009f6:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  4009fa:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  4009fc:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  400a00:	e7f6      	b.n	4009f0 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  400a02:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  400a06:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  400a08:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400a0c:	4770      	bx	lr

00400a0e <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  400a0e:	6401      	str	r1, [r0, #64]	; 0x40
  400a10:	4770      	bx	lr

00400a12 <pio_disable_interrupt>:
	p_pio->PIO_IDR = ul_mask;
  400a12:	6441      	str	r1, [r0, #68]	; 0x44
  400a14:	4770      	bx	lr

00400a16 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400a16:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400a18:	4770      	bx	lr

00400a1a <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400a1a:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400a1c:	4770      	bx	lr
	...

00400a20 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400a24:	4604      	mov	r4, r0
  400a26:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400a28:	4b0e      	ldr	r3, [pc, #56]	; (400a64 <pio_handler_process+0x44>)
  400a2a:	4798      	blx	r3
  400a2c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400a2e:	4620      	mov	r0, r4
  400a30:	4b0d      	ldr	r3, [pc, #52]	; (400a68 <pio_handler_process+0x48>)
  400a32:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400a34:	4005      	ands	r5, r0
  400a36:	d013      	beq.n	400a60 <pio_handler_process+0x40>
  400a38:	4c0c      	ldr	r4, [pc, #48]	; (400a6c <pio_handler_process+0x4c>)
  400a3a:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400a3e:	e003      	b.n	400a48 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400a40:	42b4      	cmp	r4, r6
  400a42:	d00d      	beq.n	400a60 <pio_handler_process+0x40>
  400a44:	3410      	adds	r4, #16
		while (status != 0) {
  400a46:	b15d      	cbz	r5, 400a60 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400a48:	6820      	ldr	r0, [r4, #0]
  400a4a:	4540      	cmp	r0, r8
  400a4c:	d1f8      	bne.n	400a40 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400a4e:	6861      	ldr	r1, [r4, #4]
  400a50:	4229      	tst	r1, r5
  400a52:	d0f5      	beq.n	400a40 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400a54:	68e3      	ldr	r3, [r4, #12]
  400a56:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400a58:	6863      	ldr	r3, [r4, #4]
  400a5a:	ea25 0503 	bic.w	r5, r5, r3
  400a5e:	e7ef      	b.n	400a40 <pio_handler_process+0x20>
  400a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400a64:	00400a17 	.word	0x00400a17
  400a68:	00400a1b 	.word	0x00400a1b
  400a6c:	20400a2c 	.word	0x20400a2c

00400a70 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400a72:	4c18      	ldr	r4, [pc, #96]	; (400ad4 <pio_handler_set+0x64>)
  400a74:	6826      	ldr	r6, [r4, #0]
  400a76:	2e06      	cmp	r6, #6
  400a78:	d82a      	bhi.n	400ad0 <pio_handler_set+0x60>
  400a7a:	f04f 0c00 	mov.w	ip, #0
  400a7e:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400a80:	4f15      	ldr	r7, [pc, #84]	; (400ad8 <pio_handler_set+0x68>)
  400a82:	e004      	b.n	400a8e <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400a84:	3401      	adds	r4, #1
  400a86:	b2e4      	uxtb	r4, r4
  400a88:	46a4      	mov	ip, r4
  400a8a:	42a6      	cmp	r6, r4
  400a8c:	d309      	bcc.n	400aa2 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  400a8e:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400a90:	0125      	lsls	r5, r4, #4
  400a92:	597d      	ldr	r5, [r7, r5]
  400a94:	428d      	cmp	r5, r1
  400a96:	d1f5      	bne.n	400a84 <pio_handler_set+0x14>
  400a98:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  400a9c:	686d      	ldr	r5, [r5, #4]
  400a9e:	4295      	cmp	r5, r2
  400aa0:	d1f0      	bne.n	400a84 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400aa2:	4d0d      	ldr	r5, [pc, #52]	; (400ad8 <pio_handler_set+0x68>)
  400aa4:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  400aa8:	eb05 040e 	add.w	r4, r5, lr
  400aac:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  400ab0:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  400ab2:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  400ab4:	9906      	ldr	r1, [sp, #24]
  400ab6:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  400ab8:	3601      	adds	r6, #1
  400aba:	4566      	cmp	r6, ip
  400abc:	d005      	beq.n	400aca <pio_handler_set+0x5a>
  400abe:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400ac0:	461a      	mov	r2, r3
  400ac2:	4b06      	ldr	r3, [pc, #24]	; (400adc <pio_handler_set+0x6c>)
  400ac4:	4798      	blx	r3

	return 0;
  400ac6:	2000      	movs	r0, #0
  400ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  400aca:	4902      	ldr	r1, [pc, #8]	; (400ad4 <pio_handler_set+0x64>)
  400acc:	600e      	str	r6, [r1, #0]
  400ace:	e7f6      	b.n	400abe <pio_handler_set+0x4e>
		return 1;
  400ad0:	2001      	movs	r0, #1
}
  400ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ad4:	20400a9c 	.word	0x20400a9c
  400ad8:	20400a2c 	.word	0x20400a2c
  400adc:	004009dd 	.word	0x004009dd

00400ae0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400ae0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400ae2:	210a      	movs	r1, #10
  400ae4:	4801      	ldr	r0, [pc, #4]	; (400aec <PIOA_Handler+0xc>)
  400ae6:	4b02      	ldr	r3, [pc, #8]	; (400af0 <PIOA_Handler+0x10>)
  400ae8:	4798      	blx	r3
  400aea:	bd08      	pop	{r3, pc}
  400aec:	400e0e00 	.word	0x400e0e00
  400af0:	00400a21 	.word	0x00400a21

00400af4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400af4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400af6:	210b      	movs	r1, #11
  400af8:	4801      	ldr	r0, [pc, #4]	; (400b00 <PIOB_Handler+0xc>)
  400afa:	4b02      	ldr	r3, [pc, #8]	; (400b04 <PIOB_Handler+0x10>)
  400afc:	4798      	blx	r3
  400afe:	bd08      	pop	{r3, pc}
  400b00:	400e1000 	.word	0x400e1000
  400b04:	00400a21 	.word	0x00400a21

00400b08 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400b08:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400b0a:	210c      	movs	r1, #12
  400b0c:	4801      	ldr	r0, [pc, #4]	; (400b14 <PIOC_Handler+0xc>)
  400b0e:	4b02      	ldr	r3, [pc, #8]	; (400b18 <PIOC_Handler+0x10>)
  400b10:	4798      	blx	r3
  400b12:	bd08      	pop	{r3, pc}
  400b14:	400e1200 	.word	0x400e1200
  400b18:	00400a21 	.word	0x00400a21

00400b1c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400b1c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400b1e:	2110      	movs	r1, #16
  400b20:	4801      	ldr	r0, [pc, #4]	; (400b28 <PIOD_Handler+0xc>)
  400b22:	4b02      	ldr	r3, [pc, #8]	; (400b2c <PIOD_Handler+0x10>)
  400b24:	4798      	blx	r3
  400b26:	bd08      	pop	{r3, pc}
  400b28:	400e1400 	.word	0x400e1400
  400b2c:	00400a21 	.word	0x00400a21

00400b30 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400b30:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400b32:	2111      	movs	r1, #17
  400b34:	4801      	ldr	r0, [pc, #4]	; (400b3c <PIOE_Handler+0xc>)
  400b36:	4b02      	ldr	r3, [pc, #8]	; (400b40 <PIOE_Handler+0x10>)
  400b38:	4798      	blx	r3
  400b3a:	bd08      	pop	{r3, pc}
  400b3c:	400e1600 	.word	0x400e1600
  400b40:	00400a21 	.word	0x00400a21

00400b44 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  400b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400b46:	4606      	mov	r6, r0
  400b48:	460d      	mov	r5, r1
  400b4a:	4614      	mov	r4, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  400b4c:	4b17      	ldr	r3, [pc, #92]	; (400bac <pio_handler_set_priority+0x68>)
  400b4e:	4798      	blx	r3
  400b50:	4607      	mov	r7, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  400b52:	f04f 31ff 	mov.w	r1, #4294967295
  400b56:	4630      	mov	r0, r6
  400b58:	4b15      	ldr	r3, [pc, #84]	; (400bb0 <pio_handler_set_priority+0x6c>)
  400b5a:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  400b5c:	4630      	mov	r0, r6
  400b5e:	4b15      	ldr	r3, [pc, #84]	; (400bb4 <pio_handler_set_priority+0x70>)
  400b60:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  400b62:	fa5f fe85 	uxtb.w	lr, r5
  400b66:	f00e 031f 	and.w	r3, lr, #31
  400b6a:	2201      	movs	r2, #1
  400b6c:	fa02 f303 	lsl.w	r3, r2, r3
  400b70:	0968      	lsrs	r0, r5, #5
  400b72:	4911      	ldr	r1, [pc, #68]	; (400bb8 <pio_handler_set_priority+0x74>)
  400b74:	eb01 0280 	add.w	r2, r1, r0, lsl #2
  400b78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400b7c:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  400b80:	2d00      	cmp	r5, #0
  400b82:	db0a      	blt.n	400b9a <pio_handler_set_priority+0x56>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400b84:	0164      	lsls	r4, r4, #5
  400b86:	b2e4      	uxtb	r4, r4
  400b88:	4a0c      	ldr	r2, [pc, #48]	; (400bbc <pio_handler_set_priority+0x78>)
  400b8a:	5554      	strb	r4, [r2, r5]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400b8c:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  400b90:	4639      	mov	r1, r7
  400b92:	4630      	mov	r0, r6
  400b94:	4b0a      	ldr	r3, [pc, #40]	; (400bc0 <pio_handler_set_priority+0x7c>)
  400b96:	4798      	blx	r3
  400b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400b9a:	f00e 0e0f 	and.w	lr, lr, #15
  400b9e:	0164      	lsls	r4, r4, #5
  400ba0:	b2e4      	uxtb	r4, r4
  400ba2:	4a08      	ldr	r2, [pc, #32]	; (400bc4 <pio_handler_set_priority+0x80>)
  400ba4:	f802 400e 	strb.w	r4, [r2, lr]
  400ba8:	e7f0      	b.n	400b8c <pio_handler_set_priority+0x48>
  400baa:	bf00      	nop
  400bac:	00400a1b 	.word	0x00400a1b
  400bb0:	00400a13 	.word	0x00400a13
  400bb4:	00400a17 	.word	0x00400a17
  400bb8:	e000e100 	.word	0xe000e100
  400bbc:	e000e400 	.word	0xe000e400
  400bc0:	00400a0f 	.word	0x00400a0f
  400bc4:	e000ed14 	.word	0xe000ed14

00400bc8 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400bc8:	2803      	cmp	r0, #3
  400bca:	d011      	beq.n	400bf0 <pmc_mck_set_division+0x28>
  400bcc:	2804      	cmp	r0, #4
  400bce:	d012      	beq.n	400bf6 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400bd0:	2802      	cmp	r0, #2
  400bd2:	bf0c      	ite	eq
  400bd4:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400bd8:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400bda:	4a08      	ldr	r2, [pc, #32]	; (400bfc <pmc_mck_set_division+0x34>)
  400bdc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400be2:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400be4:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400be6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400be8:	f013 0f08 	tst.w	r3, #8
  400bec:	d0fb      	beq.n	400be6 <pmc_mck_set_division+0x1e>
}
  400bee:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400bf0:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400bf4:	e7f1      	b.n	400bda <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400bf6:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400bfa:	e7ee      	b.n	400bda <pmc_mck_set_division+0x12>
  400bfc:	400e0600 	.word	0x400e0600

00400c00 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400c00:	4a17      	ldr	r2, [pc, #92]	; (400c60 <pmc_switch_mck_to_pllack+0x60>)
  400c02:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400c08:	4318      	orrs	r0, r3
  400c0a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400c0c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400c0e:	f013 0f08 	tst.w	r3, #8
  400c12:	d10a      	bne.n	400c2a <pmc_switch_mck_to_pllack+0x2a>
  400c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400c18:	4911      	ldr	r1, [pc, #68]	; (400c60 <pmc_switch_mck_to_pllack+0x60>)
  400c1a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400c1c:	f012 0f08 	tst.w	r2, #8
  400c20:	d103      	bne.n	400c2a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400c22:	3b01      	subs	r3, #1
  400c24:	d1f9      	bne.n	400c1a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400c26:	2001      	movs	r0, #1
  400c28:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400c2a:	4a0d      	ldr	r2, [pc, #52]	; (400c60 <pmc_switch_mck_to_pllack+0x60>)
  400c2c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400c2e:	f023 0303 	bic.w	r3, r3, #3
  400c32:	f043 0302 	orr.w	r3, r3, #2
  400c36:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400c38:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400c3a:	f013 0f08 	tst.w	r3, #8
  400c3e:	d10a      	bne.n	400c56 <pmc_switch_mck_to_pllack+0x56>
  400c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400c44:	4906      	ldr	r1, [pc, #24]	; (400c60 <pmc_switch_mck_to_pllack+0x60>)
  400c46:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400c48:	f012 0f08 	tst.w	r2, #8
  400c4c:	d105      	bne.n	400c5a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400c4e:	3b01      	subs	r3, #1
  400c50:	d1f9      	bne.n	400c46 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400c52:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400c54:	4770      	bx	lr
	return 0;
  400c56:	2000      	movs	r0, #0
  400c58:	4770      	bx	lr
  400c5a:	2000      	movs	r0, #0
  400c5c:	4770      	bx	lr
  400c5e:	bf00      	nop
  400c60:	400e0600 	.word	0x400e0600

00400c64 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400c64:	b9a0      	cbnz	r0, 400c90 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400c66:	480e      	ldr	r0, [pc, #56]	; (400ca0 <pmc_switch_mainck_to_xtal+0x3c>)
  400c68:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400c6a:	0209      	lsls	r1, r1, #8
  400c6c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400c6e:	4a0d      	ldr	r2, [pc, #52]	; (400ca4 <pmc_switch_mainck_to_xtal+0x40>)
  400c70:	401a      	ands	r2, r3
  400c72:	4b0d      	ldr	r3, [pc, #52]	; (400ca8 <pmc_switch_mainck_to_xtal+0x44>)
  400c74:	4313      	orrs	r3, r2
  400c76:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400c78:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400c7a:	4602      	mov	r2, r0
  400c7c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400c7e:	f013 0f01 	tst.w	r3, #1
  400c82:	d0fb      	beq.n	400c7c <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400c84:	4a06      	ldr	r2, [pc, #24]	; (400ca0 <pmc_switch_mainck_to_xtal+0x3c>)
  400c86:	6a11      	ldr	r1, [r2, #32]
  400c88:	4b08      	ldr	r3, [pc, #32]	; (400cac <pmc_switch_mainck_to_xtal+0x48>)
  400c8a:	430b      	orrs	r3, r1
  400c8c:	6213      	str	r3, [r2, #32]
  400c8e:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400c90:	4903      	ldr	r1, [pc, #12]	; (400ca0 <pmc_switch_mainck_to_xtal+0x3c>)
  400c92:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400c94:	4a06      	ldr	r2, [pc, #24]	; (400cb0 <pmc_switch_mainck_to_xtal+0x4c>)
  400c96:	401a      	ands	r2, r3
  400c98:	4b06      	ldr	r3, [pc, #24]	; (400cb4 <pmc_switch_mainck_to_xtal+0x50>)
  400c9a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400c9c:	620b      	str	r3, [r1, #32]
  400c9e:	4770      	bx	lr
  400ca0:	400e0600 	.word	0x400e0600
  400ca4:	ffc8fffc 	.word	0xffc8fffc
  400ca8:	00370001 	.word	0x00370001
  400cac:	01370000 	.word	0x01370000
  400cb0:	fec8fffc 	.word	0xfec8fffc
  400cb4:	01370002 	.word	0x01370002

00400cb8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400cb8:	4b02      	ldr	r3, [pc, #8]	; (400cc4 <pmc_osc_is_ready_mainck+0xc>)
  400cba:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400cbc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400cc0:	4770      	bx	lr
  400cc2:	bf00      	nop
  400cc4:	400e0600 	.word	0x400e0600

00400cc8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400cc8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400ccc:	4b01      	ldr	r3, [pc, #4]	; (400cd4 <pmc_disable_pllack+0xc>)
  400cce:	629a      	str	r2, [r3, #40]	; 0x28
  400cd0:	4770      	bx	lr
  400cd2:	bf00      	nop
  400cd4:	400e0600 	.word	0x400e0600

00400cd8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400cd8:	4b02      	ldr	r3, [pc, #8]	; (400ce4 <pmc_is_locked_pllack+0xc>)
  400cda:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400cdc:	f000 0002 	and.w	r0, r0, #2
  400ce0:	4770      	bx	lr
  400ce2:	bf00      	nop
  400ce4:	400e0600 	.word	0x400e0600

00400ce8 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  400ce8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400cec:	4b05      	ldr	r3, [pc, #20]	; (400d04 <pmc_enable_periph_clk+0x1c>)
  400cee:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  400cf2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400cf6:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  400cfa:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400cfe:	2000      	movs	r0, #0
  400d00:	4770      	bx	lr
  400d02:	bf00      	nop
  400d04:	400e0600 	.word	0x400e0600

00400d08 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400d08:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400d0a:	0189      	lsls	r1, r1, #6
  400d0c:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400d0e:	2402      	movs	r4, #2
  400d10:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400d12:	f04f 31ff 	mov.w	r1, #4294967295
  400d16:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400d18:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400d1a:	605a      	str	r2, [r3, #4]
}
  400d1c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400d20:	4770      	bx	lr

00400d22 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400d22:	0189      	lsls	r1, r1, #6
  400d24:	2305      	movs	r3, #5
  400d26:	5043      	str	r3, [r0, r1]
  400d28:	4770      	bx	lr

00400d2a <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400d2a:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400d2e:	61ca      	str	r2, [r1, #28]
  400d30:	4770      	bx	lr

00400d32 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400d32:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400d36:	624a      	str	r2, [r1, #36]	; 0x24
  400d38:	4770      	bx	lr

00400d3a <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400d3a:	b4f0      	push	{r4, r5, r6, r7}
  400d3c:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400d3e:	2402      	movs	r4, #2
  400d40:	9401      	str	r4, [sp, #4]
  400d42:	2408      	movs	r4, #8
  400d44:	9402      	str	r4, [sp, #8]
  400d46:	2420      	movs	r4, #32
  400d48:	9403      	str	r4, [sp, #12]
  400d4a:	2480      	movs	r4, #128	; 0x80
  400d4c:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400d4e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400d50:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400d52:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400d54:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400d58:	d814      	bhi.n	400d84 <tc_find_mck_divisor+0x4a>
  400d5a:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400d5c:	42a0      	cmp	r0, r4
  400d5e:	d217      	bcs.n	400d90 <tc_find_mck_divisor+0x56>
  400d60:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400d62:	af01      	add	r7, sp, #4
  400d64:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  400d68:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400d6c:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400d6e:	4284      	cmp	r4, r0
  400d70:	d30a      	bcc.n	400d88 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400d72:	4286      	cmp	r6, r0
  400d74:	d90d      	bls.n	400d92 <tc_find_mck_divisor+0x58>
			ul_index++) {
  400d76:	3501      	adds	r5, #1
	for (ul_index = 0;
  400d78:	2d05      	cmp	r5, #5
  400d7a:	d1f3      	bne.n	400d64 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400d7c:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400d7e:	b006      	add	sp, #24
  400d80:	bcf0      	pop	{r4, r5, r6, r7}
  400d82:	4770      	bx	lr
			return 0;
  400d84:	2000      	movs	r0, #0
  400d86:	e7fa      	b.n	400d7e <tc_find_mck_divisor+0x44>
  400d88:	2000      	movs	r0, #0
  400d8a:	e7f8      	b.n	400d7e <tc_find_mck_divisor+0x44>
	return 1;
  400d8c:	2001      	movs	r0, #1
  400d8e:	e7f6      	b.n	400d7e <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  400d90:	2500      	movs	r5, #0
	if (p_uldiv) {
  400d92:	b12a      	cbz	r2, 400da0 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  400d94:	a906      	add	r1, sp, #24
  400d96:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400d9a:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400d9e:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  400da0:	2b00      	cmp	r3, #0
  400da2:	d0f3      	beq.n	400d8c <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  400da4:	601d      	str	r5, [r3, #0]
	return 1;
  400da6:	2001      	movs	r0, #1
  400da8:	e7e9      	b.n	400d7e <tc_find_mck_divisor+0x44>

00400daa <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400daa:	6943      	ldr	r3, [r0, #20]
  400dac:	f013 0f02 	tst.w	r3, #2
  400db0:	d002      	beq.n	400db8 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400db2:	61c1      	str	r1, [r0, #28]
	return 0;
  400db4:	2000      	movs	r0, #0
  400db6:	4770      	bx	lr
		return 1;
  400db8:	2001      	movs	r0, #1
}
  400dba:	4770      	bx	lr

00400dbc <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400dbc:	6943      	ldr	r3, [r0, #20]
  400dbe:	f013 0f01 	tst.w	r3, #1
  400dc2:	d003      	beq.n	400dcc <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400dc4:	6983      	ldr	r3, [r0, #24]
  400dc6:	700b      	strb	r3, [r1, #0]
	return 0;
  400dc8:	2000      	movs	r0, #0
  400dca:	4770      	bx	lr
		return 1;
  400dcc:	2001      	movs	r0, #1
}
  400dce:	4770      	bx	lr

00400dd0 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400dd0:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400dd2:	010b      	lsls	r3, r1, #4
  400dd4:	4293      	cmp	r3, r2
  400dd6:	d914      	bls.n	400e02 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400dd8:	00c9      	lsls	r1, r1, #3
  400dda:	084b      	lsrs	r3, r1, #1
  400ddc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400de0:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400de4:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400de6:	1e5c      	subs	r4, r3, #1
  400de8:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400dec:	428c      	cmp	r4, r1
  400dee:	d901      	bls.n	400df4 <usart_set_async_baudrate+0x24>
		return 1;
  400df0:	2001      	movs	r0, #1
  400df2:	e017      	b.n	400e24 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400df4:	6841      	ldr	r1, [r0, #4]
  400df6:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400dfa:	6041      	str	r1, [r0, #4]
  400dfc:	e00c      	b.n	400e18 <usart_set_async_baudrate+0x48>
		return 1;
  400dfe:	2001      	movs	r0, #1
  400e00:	e010      	b.n	400e24 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400e02:	0859      	lsrs	r1, r3, #1
  400e04:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400e08:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400e0c:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400e0e:	1e5c      	subs	r4, r3, #1
  400e10:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400e14:	428c      	cmp	r4, r1
  400e16:	d8f2      	bhi.n	400dfe <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400e18:	0412      	lsls	r2, r2, #16
  400e1a:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400e1e:	431a      	orrs	r2, r3
  400e20:	6202      	str	r2, [r0, #32]

	return 0;
  400e22:	2000      	movs	r0, #0
}
  400e24:	f85d 4b04 	ldr.w	r4, [sp], #4
  400e28:	4770      	bx	lr
	...

00400e2c <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400e2c:	4b08      	ldr	r3, [pc, #32]	; (400e50 <usart_reset+0x24>)
  400e2e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400e32:	2300      	movs	r3, #0
  400e34:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400e36:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400e38:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400e3a:	2388      	movs	r3, #136	; 0x88
  400e3c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400e3e:	2324      	movs	r3, #36	; 0x24
  400e40:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400e42:	f44f 7380 	mov.w	r3, #256	; 0x100
  400e46:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400e48:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400e4c:	6003      	str	r3, [r0, #0]
  400e4e:	4770      	bx	lr
  400e50:	55534100 	.word	0x55534100

00400e54 <usart_init_rs232>:
{
  400e54:	b570      	push	{r4, r5, r6, lr}
  400e56:	4605      	mov	r5, r0
  400e58:	460c      	mov	r4, r1
  400e5a:	4616      	mov	r6, r2
	usart_reset(p_usart);
  400e5c:	4b0f      	ldr	r3, [pc, #60]	; (400e9c <usart_init_rs232+0x48>)
  400e5e:	4798      	blx	r3
	ul_reg_val = 0;
  400e60:	2200      	movs	r2, #0
  400e62:	4b0f      	ldr	r3, [pc, #60]	; (400ea0 <usart_init_rs232+0x4c>)
  400e64:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400e66:	b1a4      	cbz	r4, 400e92 <usart_init_rs232+0x3e>
  400e68:	4632      	mov	r2, r6
  400e6a:	6821      	ldr	r1, [r4, #0]
  400e6c:	4628      	mov	r0, r5
  400e6e:	4b0d      	ldr	r3, [pc, #52]	; (400ea4 <usart_init_rs232+0x50>)
  400e70:	4798      	blx	r3
  400e72:	4602      	mov	r2, r0
  400e74:	b978      	cbnz	r0, 400e96 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400e76:	6863      	ldr	r3, [r4, #4]
  400e78:	68a1      	ldr	r1, [r4, #8]
  400e7a:	430b      	orrs	r3, r1
  400e7c:	6921      	ldr	r1, [r4, #16]
  400e7e:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400e80:	68e1      	ldr	r1, [r4, #12]
  400e82:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400e84:	4906      	ldr	r1, [pc, #24]	; (400ea0 <usart_init_rs232+0x4c>)
  400e86:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400e88:	6869      	ldr	r1, [r5, #4]
  400e8a:	430b      	orrs	r3, r1
  400e8c:	606b      	str	r3, [r5, #4]
}
  400e8e:	4610      	mov	r0, r2
  400e90:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400e92:	2201      	movs	r2, #1
  400e94:	e7fb      	b.n	400e8e <usart_init_rs232+0x3a>
  400e96:	2201      	movs	r2, #1
  400e98:	e7f9      	b.n	400e8e <usart_init_rs232+0x3a>
  400e9a:	bf00      	nop
  400e9c:	00400e2d 	.word	0x00400e2d
  400ea0:	20400aa0 	.word	0x20400aa0
  400ea4:	00400dd1 	.word	0x00400dd1

00400ea8 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400ea8:	2340      	movs	r3, #64	; 0x40
  400eaa:	6003      	str	r3, [r0, #0]
  400eac:	4770      	bx	lr

00400eae <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400eae:	2310      	movs	r3, #16
  400eb0:	6003      	str	r3, [r0, #0]
  400eb2:	4770      	bx	lr

00400eb4 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400eb4:	6943      	ldr	r3, [r0, #20]
  400eb6:	f013 0f02 	tst.w	r3, #2
  400eba:	d004      	beq.n	400ec6 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400ebc:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400ec0:	61c1      	str	r1, [r0, #28]
	return 0;
  400ec2:	2000      	movs	r0, #0
  400ec4:	4770      	bx	lr
		return 1;
  400ec6:	2001      	movs	r0, #1
}
  400ec8:	4770      	bx	lr

00400eca <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400eca:	6943      	ldr	r3, [r0, #20]
  400ecc:	f013 0f01 	tst.w	r3, #1
  400ed0:	d005      	beq.n	400ede <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400ed2:	6983      	ldr	r3, [r0, #24]
  400ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400ed8:	600b      	str	r3, [r1, #0]
	return 0;
  400eda:	2000      	movs	r0, #0
  400edc:	4770      	bx	lr
		return 1;
  400ede:	2001      	movs	r0, #1
}
  400ee0:	4770      	bx	lr

00400ee2 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400ee2:	e7fe      	b.n	400ee2 <Dummy_Handler>

00400ee4 <Reset_Handler>:
{
  400ee4:	b500      	push	{lr}
  400ee6:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400ee8:	4b25      	ldr	r3, [pc, #148]	; (400f80 <Reset_Handler+0x9c>)
  400eea:	4a26      	ldr	r2, [pc, #152]	; (400f84 <Reset_Handler+0xa0>)
  400eec:	429a      	cmp	r2, r3
  400eee:	d010      	beq.n	400f12 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400ef0:	4b25      	ldr	r3, [pc, #148]	; (400f88 <Reset_Handler+0xa4>)
  400ef2:	4a23      	ldr	r2, [pc, #140]	; (400f80 <Reset_Handler+0x9c>)
  400ef4:	429a      	cmp	r2, r3
  400ef6:	d20c      	bcs.n	400f12 <Reset_Handler+0x2e>
  400ef8:	3b01      	subs	r3, #1
  400efa:	1a9b      	subs	r3, r3, r2
  400efc:	f023 0303 	bic.w	r3, r3, #3
  400f00:	3304      	adds	r3, #4
  400f02:	4413      	add	r3, r2
  400f04:	491f      	ldr	r1, [pc, #124]	; (400f84 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400f06:	f851 0b04 	ldr.w	r0, [r1], #4
  400f0a:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400f0e:	429a      	cmp	r2, r3
  400f10:	d1f9      	bne.n	400f06 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400f12:	4b1e      	ldr	r3, [pc, #120]	; (400f8c <Reset_Handler+0xa8>)
  400f14:	4a1e      	ldr	r2, [pc, #120]	; (400f90 <Reset_Handler+0xac>)
  400f16:	429a      	cmp	r2, r3
  400f18:	d20a      	bcs.n	400f30 <Reset_Handler+0x4c>
  400f1a:	3b01      	subs	r3, #1
  400f1c:	1a9b      	subs	r3, r3, r2
  400f1e:	f023 0303 	bic.w	r3, r3, #3
  400f22:	3304      	adds	r3, #4
  400f24:	4413      	add	r3, r2
                *pDest++ = 0;
  400f26:	2100      	movs	r1, #0
  400f28:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400f2c:	4293      	cmp	r3, r2
  400f2e:	d1fb      	bne.n	400f28 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400f30:	4a18      	ldr	r2, [pc, #96]	; (400f94 <Reset_Handler+0xb0>)
  400f32:	4b19      	ldr	r3, [pc, #100]	; (400f98 <Reset_Handler+0xb4>)
  400f34:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400f38:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400f3a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400f3e:	fab3 f383 	clz	r3, r3
  400f42:	095b      	lsrs	r3, r3, #5
  400f44:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400f46:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400f48:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400f4c:	2200      	movs	r2, #0
  400f4e:	4b13      	ldr	r3, [pc, #76]	; (400f9c <Reset_Handler+0xb8>)
  400f50:	701a      	strb	r2, [r3, #0]
	return flags;
  400f52:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400f54:	4a12      	ldr	r2, [pc, #72]	; (400fa0 <Reset_Handler+0xbc>)
  400f56:	6813      	ldr	r3, [r2, #0]
  400f58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400f5c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  400f5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400f62:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400f66:	b129      	cbz	r1, 400f74 <Reset_Handler+0x90>
		cpu_irq_enable();
  400f68:	2201      	movs	r2, #1
  400f6a:	4b0c      	ldr	r3, [pc, #48]	; (400f9c <Reset_Handler+0xb8>)
  400f6c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  400f6e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400f72:	b662      	cpsie	i
        __libc_init_array();
  400f74:	4b0b      	ldr	r3, [pc, #44]	; (400fa4 <Reset_Handler+0xc0>)
  400f76:	4798      	blx	r3
        main();
  400f78:	4b0b      	ldr	r3, [pc, #44]	; (400fa8 <Reset_Handler+0xc4>)
  400f7a:	4798      	blx	r3
  400f7c:	e7fe      	b.n	400f7c <Reset_Handler+0x98>
  400f7e:	bf00      	nop
  400f80:	20400000 	.word	0x20400000
  400f84:	0040efac 	.word	0x0040efac
  400f88:	20400a10 	.word	0x20400a10
  400f8c:	20404a74 	.word	0x20404a74
  400f90:	20400a10 	.word	0x20400a10
  400f94:	e000ed00 	.word	0xe000ed00
  400f98:	00400000 	.word	0x00400000
  400f9c:	20400000 	.word	0x20400000
  400fa0:	e000ed88 	.word	0xe000ed88
  400fa4:	00407b41 	.word	0x00407b41
  400fa8:	00406ce1 	.word	0x00406ce1

00400fac <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400fac:	4b3b      	ldr	r3, [pc, #236]	; (40109c <SystemCoreClockUpdate+0xf0>)
  400fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400fb0:	f003 0303 	and.w	r3, r3, #3
  400fb4:	2b01      	cmp	r3, #1
  400fb6:	d01d      	beq.n	400ff4 <SystemCoreClockUpdate+0x48>
  400fb8:	b183      	cbz	r3, 400fdc <SystemCoreClockUpdate+0x30>
  400fba:	2b02      	cmp	r3, #2
  400fbc:	d036      	beq.n	40102c <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400fbe:	4b37      	ldr	r3, [pc, #220]	; (40109c <SystemCoreClockUpdate+0xf0>)
  400fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400fc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400fc6:	2b70      	cmp	r3, #112	; 0x70
  400fc8:	d05f      	beq.n	40108a <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400fca:	4b34      	ldr	r3, [pc, #208]	; (40109c <SystemCoreClockUpdate+0xf0>)
  400fcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400fce:	4934      	ldr	r1, [pc, #208]	; (4010a0 <SystemCoreClockUpdate+0xf4>)
  400fd0:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400fd4:	680b      	ldr	r3, [r1, #0]
  400fd6:	40d3      	lsrs	r3, r2
  400fd8:	600b      	str	r3, [r1, #0]
  400fda:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400fdc:	4b31      	ldr	r3, [pc, #196]	; (4010a4 <SystemCoreClockUpdate+0xf8>)
  400fde:	695b      	ldr	r3, [r3, #20]
  400fe0:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400fe4:	bf14      	ite	ne
  400fe6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400fea:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400fee:	4b2c      	ldr	r3, [pc, #176]	; (4010a0 <SystemCoreClockUpdate+0xf4>)
  400ff0:	601a      	str	r2, [r3, #0]
  400ff2:	e7e4      	b.n	400fbe <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400ff4:	4b29      	ldr	r3, [pc, #164]	; (40109c <SystemCoreClockUpdate+0xf0>)
  400ff6:	6a1b      	ldr	r3, [r3, #32]
  400ff8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400ffc:	d003      	beq.n	401006 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400ffe:	4a2a      	ldr	r2, [pc, #168]	; (4010a8 <SystemCoreClockUpdate+0xfc>)
  401000:	4b27      	ldr	r3, [pc, #156]	; (4010a0 <SystemCoreClockUpdate+0xf4>)
  401002:	601a      	str	r2, [r3, #0]
  401004:	e7db      	b.n	400fbe <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401006:	4a29      	ldr	r2, [pc, #164]	; (4010ac <SystemCoreClockUpdate+0x100>)
  401008:	4b25      	ldr	r3, [pc, #148]	; (4010a0 <SystemCoreClockUpdate+0xf4>)
  40100a:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40100c:	4b23      	ldr	r3, [pc, #140]	; (40109c <SystemCoreClockUpdate+0xf0>)
  40100e:	6a1b      	ldr	r3, [r3, #32]
  401010:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401014:	2b10      	cmp	r3, #16
  401016:	d005      	beq.n	401024 <SystemCoreClockUpdate+0x78>
  401018:	2b20      	cmp	r3, #32
  40101a:	d1d0      	bne.n	400fbe <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  40101c:	4a22      	ldr	r2, [pc, #136]	; (4010a8 <SystemCoreClockUpdate+0xfc>)
  40101e:	4b20      	ldr	r3, [pc, #128]	; (4010a0 <SystemCoreClockUpdate+0xf4>)
  401020:	601a      	str	r2, [r3, #0]
          break;
  401022:	e7cc      	b.n	400fbe <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401024:	4a22      	ldr	r2, [pc, #136]	; (4010b0 <SystemCoreClockUpdate+0x104>)
  401026:	4b1e      	ldr	r3, [pc, #120]	; (4010a0 <SystemCoreClockUpdate+0xf4>)
  401028:	601a      	str	r2, [r3, #0]
          break;
  40102a:	e7c8      	b.n	400fbe <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40102c:	4b1b      	ldr	r3, [pc, #108]	; (40109c <SystemCoreClockUpdate+0xf0>)
  40102e:	6a1b      	ldr	r3, [r3, #32]
  401030:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401034:	d016      	beq.n	401064 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401036:	4a1c      	ldr	r2, [pc, #112]	; (4010a8 <SystemCoreClockUpdate+0xfc>)
  401038:	4b19      	ldr	r3, [pc, #100]	; (4010a0 <SystemCoreClockUpdate+0xf4>)
  40103a:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  40103c:	4b17      	ldr	r3, [pc, #92]	; (40109c <SystemCoreClockUpdate+0xf0>)
  40103e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401040:	f003 0303 	and.w	r3, r3, #3
  401044:	2b02      	cmp	r3, #2
  401046:	d1ba      	bne.n	400fbe <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401048:	4a14      	ldr	r2, [pc, #80]	; (40109c <SystemCoreClockUpdate+0xf0>)
  40104a:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40104c:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40104e:	4814      	ldr	r0, [pc, #80]	; (4010a0 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401050:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401054:	6803      	ldr	r3, [r0, #0]
  401056:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40105a:	b2d2      	uxtb	r2, r2
  40105c:	fbb3 f3f2 	udiv	r3, r3, r2
  401060:	6003      	str	r3, [r0, #0]
  401062:	e7ac      	b.n	400fbe <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401064:	4a11      	ldr	r2, [pc, #68]	; (4010ac <SystemCoreClockUpdate+0x100>)
  401066:	4b0e      	ldr	r3, [pc, #56]	; (4010a0 <SystemCoreClockUpdate+0xf4>)
  401068:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40106a:	4b0c      	ldr	r3, [pc, #48]	; (40109c <SystemCoreClockUpdate+0xf0>)
  40106c:	6a1b      	ldr	r3, [r3, #32]
  40106e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401072:	2b10      	cmp	r3, #16
  401074:	d005      	beq.n	401082 <SystemCoreClockUpdate+0xd6>
  401076:	2b20      	cmp	r3, #32
  401078:	d1e0      	bne.n	40103c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40107a:	4a0b      	ldr	r2, [pc, #44]	; (4010a8 <SystemCoreClockUpdate+0xfc>)
  40107c:	4b08      	ldr	r3, [pc, #32]	; (4010a0 <SystemCoreClockUpdate+0xf4>)
  40107e:	601a      	str	r2, [r3, #0]
          break;
  401080:	e7dc      	b.n	40103c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401082:	4a0b      	ldr	r2, [pc, #44]	; (4010b0 <SystemCoreClockUpdate+0x104>)
  401084:	4b06      	ldr	r3, [pc, #24]	; (4010a0 <SystemCoreClockUpdate+0xf4>)
  401086:	601a      	str	r2, [r3, #0]
          break;
  401088:	e7d8      	b.n	40103c <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40108a:	4a05      	ldr	r2, [pc, #20]	; (4010a0 <SystemCoreClockUpdate+0xf4>)
  40108c:	6813      	ldr	r3, [r2, #0]
  40108e:	4909      	ldr	r1, [pc, #36]	; (4010b4 <SystemCoreClockUpdate+0x108>)
  401090:	fba1 1303 	umull	r1, r3, r1, r3
  401094:	085b      	lsrs	r3, r3, #1
  401096:	6013      	str	r3, [r2, #0]
  401098:	4770      	bx	lr
  40109a:	bf00      	nop
  40109c:	400e0600 	.word	0x400e0600
  4010a0:	20400004 	.word	0x20400004
  4010a4:	400e1810 	.word	0x400e1810
  4010a8:	00b71b00 	.word	0x00b71b00
  4010ac:	003d0900 	.word	0x003d0900
  4010b0:	007a1200 	.word	0x007a1200
  4010b4:	aaaaaaab 	.word	0xaaaaaaab

004010b8 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4010b8:	4b16      	ldr	r3, [pc, #88]	; (401114 <system_init_flash+0x5c>)
  4010ba:	4298      	cmp	r0, r3
  4010bc:	d913      	bls.n	4010e6 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4010be:	4b16      	ldr	r3, [pc, #88]	; (401118 <system_init_flash+0x60>)
  4010c0:	4298      	cmp	r0, r3
  4010c2:	d915      	bls.n	4010f0 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4010c4:	4b15      	ldr	r3, [pc, #84]	; (40111c <system_init_flash+0x64>)
  4010c6:	4298      	cmp	r0, r3
  4010c8:	d916      	bls.n	4010f8 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4010ca:	4b15      	ldr	r3, [pc, #84]	; (401120 <system_init_flash+0x68>)
  4010cc:	4298      	cmp	r0, r3
  4010ce:	d917      	bls.n	401100 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4010d0:	4b14      	ldr	r3, [pc, #80]	; (401124 <system_init_flash+0x6c>)
  4010d2:	4298      	cmp	r0, r3
  4010d4:	d918      	bls.n	401108 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4010d6:	4b14      	ldr	r3, [pc, #80]	; (401128 <system_init_flash+0x70>)
  4010d8:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4010da:	bf94      	ite	ls
  4010dc:	4a13      	ldrls	r2, [pc, #76]	; (40112c <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4010de:	4a14      	ldrhi	r2, [pc, #80]	; (401130 <system_init_flash+0x78>)
  4010e0:	4b14      	ldr	r3, [pc, #80]	; (401134 <system_init_flash+0x7c>)
  4010e2:	601a      	str	r2, [r3, #0]
  4010e4:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4010e6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4010ea:	4b12      	ldr	r3, [pc, #72]	; (401134 <system_init_flash+0x7c>)
  4010ec:	601a      	str	r2, [r3, #0]
  4010ee:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4010f0:	4a11      	ldr	r2, [pc, #68]	; (401138 <system_init_flash+0x80>)
  4010f2:	4b10      	ldr	r3, [pc, #64]	; (401134 <system_init_flash+0x7c>)
  4010f4:	601a      	str	r2, [r3, #0]
  4010f6:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4010f8:	4a10      	ldr	r2, [pc, #64]	; (40113c <system_init_flash+0x84>)
  4010fa:	4b0e      	ldr	r3, [pc, #56]	; (401134 <system_init_flash+0x7c>)
  4010fc:	601a      	str	r2, [r3, #0]
  4010fe:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401100:	4a0f      	ldr	r2, [pc, #60]	; (401140 <system_init_flash+0x88>)
  401102:	4b0c      	ldr	r3, [pc, #48]	; (401134 <system_init_flash+0x7c>)
  401104:	601a      	str	r2, [r3, #0]
  401106:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401108:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40110c:	4b09      	ldr	r3, [pc, #36]	; (401134 <system_init_flash+0x7c>)
  40110e:	601a      	str	r2, [r3, #0]
  401110:	4770      	bx	lr
  401112:	bf00      	nop
  401114:	015ef3bf 	.word	0x015ef3bf
  401118:	02bde77f 	.word	0x02bde77f
  40111c:	041cdb3f 	.word	0x041cdb3f
  401120:	057bceff 	.word	0x057bceff
  401124:	06dac2bf 	.word	0x06dac2bf
  401128:	0839b67f 	.word	0x0839b67f
  40112c:	04000500 	.word	0x04000500
  401130:	04000600 	.word	0x04000600
  401134:	400e0c00 	.word	0x400e0c00
  401138:	04000100 	.word	0x04000100
  40113c:	04000200 	.word	0x04000200
  401140:	04000300 	.word	0x04000300

00401144 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401144:	4b0a      	ldr	r3, [pc, #40]	; (401170 <_sbrk+0x2c>)
  401146:	681b      	ldr	r3, [r3, #0]
  401148:	b153      	cbz	r3, 401160 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40114a:	4b09      	ldr	r3, [pc, #36]	; (401170 <_sbrk+0x2c>)
  40114c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40114e:	181a      	adds	r2, r3, r0
  401150:	4908      	ldr	r1, [pc, #32]	; (401174 <_sbrk+0x30>)
  401152:	4291      	cmp	r1, r2
  401154:	db08      	blt.n	401168 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401156:	4610      	mov	r0, r2
  401158:	4a05      	ldr	r2, [pc, #20]	; (401170 <_sbrk+0x2c>)
  40115a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  40115c:	4618      	mov	r0, r3
  40115e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401160:	4a05      	ldr	r2, [pc, #20]	; (401178 <_sbrk+0x34>)
  401162:	4b03      	ldr	r3, [pc, #12]	; (401170 <_sbrk+0x2c>)
  401164:	601a      	str	r2, [r3, #0]
  401166:	e7f0      	b.n	40114a <_sbrk+0x6>
		return (caddr_t) -1;	
  401168:	f04f 30ff 	mov.w	r0, #4294967295
}
  40116c:	4770      	bx	lr
  40116e:	bf00      	nop
  401170:	20400aa4 	.word	0x20400aa4
  401174:	2045fffc 	.word	0x2045fffc
  401178:	20405078 	.word	0x20405078

0040117c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  40117c:	f04f 30ff 	mov.w	r0, #4294967295
  401180:	4770      	bx	lr

00401182 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401182:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401186:	604b      	str	r3, [r1, #4]

	return 0;
}
  401188:	2000      	movs	r0, #0
  40118a:	4770      	bx	lr

0040118c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  40118c:	2001      	movs	r0, #1
  40118e:	4770      	bx	lr

00401190 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401190:	2000      	movs	r0, #0
  401192:	4770      	bx	lr

00401194 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return ((n & 0xff) << 8) | ((n & 0xff00) >> 8);
  401194:	0a03      	lsrs	r3, r0, #8
  401196:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
  40119a:	b280      	uxth	r0, r0
  40119c:	4770      	bx	lr

0040119e <lwip_ntohs>:
  return ((n & 0xff) << 8) | ((n & 0xff00) >> 8);
  40119e:	0a03      	lsrs	r3, r0, #8
  4011a0:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 */
u16_t
lwip_ntohs(u16_t n)
{
  return lwip_htons(n);
}
  4011a4:	b280      	uxth	r0, r0
  4011a6:	4770      	bx	lr

004011a8 <lwip_htonl>:
lwip_htonl(u32_t n)
{
  return ((n & 0xff) << 24) |
    ((n & 0xff00) << 8) |
    ((n & 0xff0000UL) >> 8) |
    ((n & 0xff000000UL) >> 24);
  4011a8:	0e03      	lsrs	r3, r0, #24
    ((n & 0xff0000UL) >> 8) |
  4011aa:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
    ((n & 0xff00) << 8) |
  4011ae:	0202      	lsls	r2, r0, #8
  4011b0:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    ((n & 0xff0000UL) >> 8) |
  4011b4:	4313      	orrs	r3, r2
  4011b6:	0a00      	lsrs	r0, r0, #8
  4011b8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
}
  4011bc:	4318      	orrs	r0, r3
  4011be:	4770      	bx	lr

004011c0 <lwip_ntohl>:
 * @param n u32_t in network byte order
 * @return n in host byte order
 */
u32_t
lwip_ntohl(u32_t n)
{
  4011c0:	b508      	push	{r3, lr}
  return lwip_htonl(n);
  4011c2:	4b01      	ldr	r3, [pc, #4]	; (4011c8 <lwip_ntohl+0x8>)
  4011c4:	4798      	blx	r3
}
  4011c6:	bd08      	pop	{r3, pc}
  4011c8:	004011a9 	.word	0x004011a9

004011cc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
  4011cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4011d0:	b085      	sub	sp, #20
  4011d2:	4680      	mov	r8, r0
  4011d4:	4689      	mov	r9, r1
  4011d6:	4615      	mov	r5, r2
  /* we can use the echo header here */
  struct icmp_echo_hdr *icmphdr;
  ip_addr_t iphdr_src;

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
  4011d8:	2200      	movs	r2, #0
  4011da:	2124      	movs	r1, #36	; 0x24
  4011dc:	2001      	movs	r0, #1
  4011de:	4b22      	ldr	r3, [pc, #136]	; (401268 <icmp_send_response+0x9c>)
  4011e0:	4798      	blx	r3
                 PBUF_RAM);
  if (q == NULL) {
  4011e2:	2800      	cmp	r0, #0
  4011e4:	d03d      	beq.n	401262 <icmp_send_response+0x96>
  4011e6:	4606      	mov	r6, r0
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
  4011e8:	f8d8 7004 	ldr.w	r7, [r8, #4]
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->src));
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->dest));
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  4011ec:	6844      	ldr	r4, [r0, #4]
  icmphdr->type = type;
  4011ee:	f884 9000 	strb.w	r9, [r4]
  icmphdr->code = code;
  4011f2:	7065      	strb	r5, [r4, #1]
  icmphdr->id = 0;
  4011f4:	2500      	movs	r5, #0
  4011f6:	7125      	strb	r5, [r4, #4]
  4011f8:	7165      	strb	r5, [r4, #5]
  icmphdr->seqno = 0;
  4011fa:	71a5      	strb	r5, [r4, #6]
  4011fc:	71e5      	strb	r5, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
  4011fe:	f8d0 c004 	ldr.w	ip, [r0, #4]
  401202:	f8d8 3004 	ldr.w	r3, [r8, #4]
  401206:	f8d3 e000 	ldr.w	lr, [r3]
  40120a:	6858      	ldr	r0, [r3, #4]
  40120c:	6899      	ldr	r1, [r3, #8]
  40120e:	f8d3 800c 	ldr.w	r8, [r3, #12]
  401212:	f8cc e008 	str.w	lr, [ip, #8]
  401216:	f8cc 000c 	str.w	r0, [ip, #12]
  40121a:	f8cc 1010 	str.w	r1, [ip, #16]
  40121e:	f8cc 8014 	str.w	r8, [ip, #20]
  401222:	f8d3 e010 	ldr.w	lr, [r3, #16]
  401226:	6958      	ldr	r0, [r3, #20]
  401228:	6999      	ldr	r1, [r3, #24]
  40122a:	f8cc e018 	str.w	lr, [ip, #24]
  40122e:	f8cc 001c 	str.w	r0, [ip, #28]
  401232:	f8cc 1020 	str.w	r1, [ip, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  /* calculate checksum */
  icmphdr->chksum = 0;
  401236:	70a5      	strb	r5, [r4, #2]
  401238:	70e5      	strb	r5, [r4, #3]
  icmphdr->chksum = inet_chksum(icmphdr, q->len);
  40123a:	8971      	ldrh	r1, [r6, #10]
  40123c:	4620      	mov	r0, r4
  40123e:	4b0b      	ldr	r3, [pc, #44]	; (40126c <icmp_send_response+0xa0>)
  401240:	4798      	blx	r3
  401242:	8060      	strh	r0, [r4, #2]
  ICMP_STATS_INC(icmp.xmit);
  /* increase number of messages attempted to send */
  snmp_inc_icmpoutmsgs();
  /* increase number of destination unreachable messages attempted to send */
  snmp_inc_icmpouttimeexcds();
  ip_addr_copy(iphdr_src, iphdr->src);
  401244:	68fb      	ldr	r3, [r7, #12]
  401246:	aa04      	add	r2, sp, #16
  401248:	f842 3d04 	str.w	r3, [r2, #-4]!
  ip_output(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP);
  40124c:	2301      	movs	r3, #1
  40124e:	9301      	str	r3, [sp, #4]
  401250:	9500      	str	r5, [sp, #0]
  401252:	23ff      	movs	r3, #255	; 0xff
  401254:	4629      	mov	r1, r5
  401256:	4630      	mov	r0, r6
  401258:	4c05      	ldr	r4, [pc, #20]	; (401270 <icmp_send_response+0xa4>)
  40125a:	47a0      	blx	r4
  pbuf_free(q);
  40125c:	4630      	mov	r0, r6
  40125e:	4b05      	ldr	r3, [pc, #20]	; (401274 <icmp_send_response+0xa8>)
  401260:	4798      	blx	r3
}
  401262:	b005      	add	sp, #20
  401264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401268:	00402685 	.word	0x00402685
  40126c:	00401505 	.word	0x00401505
  401270:	00401865 	.word	0x00401865
  401274:	0040262d 	.word	0x0040262d

00401278 <icmp_input>:
{
  401278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40127c:	b085      	sub	sp, #20
  40127e:	4606      	mov	r6, r0
  401280:	4688      	mov	r8, r1
  iphdr = (struct ip_hdr *)p->payload;
  401282:	6847      	ldr	r7, [r0, #4]
  hlen = IPH_HL(iphdr) * 4;
  401284:	783c      	ldrb	r4, [r7, #0]
  401286:	f004 040f 	and.w	r4, r4, #15
  40128a:	00a4      	lsls	r4, r4, #2
  if (pbuf_header(p, -hlen) || (p->tot_len < sizeof(u16_t)*2)) {
  40128c:	4265      	negs	r5, r4
  40128e:	b22d      	sxth	r5, r5
  401290:	4629      	mov	r1, r5
  401292:	4b45      	ldr	r3, [pc, #276]	; (4013a8 <icmp_input+0x130>)
  401294:	4798      	blx	r3
  401296:	b9a0      	cbnz	r0, 4012c2 <icmp_input+0x4a>
  401298:	8933      	ldrh	r3, [r6, #8]
  40129a:	2b03      	cmp	r3, #3
  40129c:	d911      	bls.n	4012c2 <icmp_input+0x4a>
  type = *((u8_t *)p->payload);
  40129e:	6873      	ldr	r3, [r6, #4]
  switch (type) {
  4012a0:	781b      	ldrb	r3, [r3, #0]
  4012a2:	2b08      	cmp	r3, #8
  4012a4:	d16f      	bne.n	401386 <icmp_input+0x10e>
      if (ip_addr_ismulticast(&current_iphdr_dest)) {
  4012a6:	4b41      	ldr	r3, [pc, #260]	; (4013ac <icmp_input+0x134>)
  4012a8:	6818      	ldr	r0, [r3, #0]
  4012aa:	f000 09f0 	and.w	r9, r0, #240	; 0xf0
      if (ip_addr_isbroadcast(&current_iphdr_dest, inp)) {
  4012ae:	4641      	mov	r1, r8
  4012b0:	4b3f      	ldr	r3, [pc, #252]	; (4013b0 <icmp_input+0x138>)
  4012b2:	4798      	blx	r3
  4012b4:	b958      	cbnz	r0, 4012ce <icmp_input+0x56>
      if (!accepted) {
  4012b6:	f1b9 0fe0 	cmp.w	r9, #224	; 0xe0
  4012ba:	d008      	beq.n	4012ce <icmp_input+0x56>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
  4012bc:	8933      	ldrh	r3, [r6, #8]
  4012be:	2b07      	cmp	r3, #7
  4012c0:	d809      	bhi.n	4012d6 <icmp_input+0x5e>
  pbuf_free(p);
  4012c2:	4630      	mov	r0, r6
  4012c4:	4b3b      	ldr	r3, [pc, #236]	; (4013b4 <icmp_input+0x13c>)
  4012c6:	4798      	blx	r3
}
  4012c8:	b005      	add	sp, #20
  4012ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        pbuf_free(p);
  4012ce:	4630      	mov	r0, r6
  4012d0:	4b38      	ldr	r3, [pc, #224]	; (4013b4 <icmp_input+0x13c>)
  4012d2:	4798      	blx	r3
        return;
  4012d4:	e7f8      	b.n	4012c8 <icmp_input+0x50>
    if (inet_chksum_pbuf(p) != 0) {
  4012d6:	4630      	mov	r0, r6
  4012d8:	4b37      	ldr	r3, [pc, #220]	; (4013b8 <icmp_input+0x140>)
  4012da:	4798      	blx	r3
  4012dc:	b970      	cbnz	r0, 4012fc <icmp_input+0x84>
  hlen = IPH_HL(iphdr) * 4;
  4012de:	b224      	sxth	r4, r4
    if (pbuf_header(p, (PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
  4012e0:	2122      	movs	r1, #34	; 0x22
  4012e2:	4630      	mov	r0, r6
  4012e4:	4b30      	ldr	r3, [pc, #192]	; (4013a8 <icmp_input+0x130>)
  4012e6:	4798      	blx	r3
  4012e8:	b330      	cbz	r0, 401338 <icmp_input+0xc0>
      if (pbuf_header(p, hlen)) {
  4012ea:	4621      	mov	r1, r4
  4012ec:	4630      	mov	r0, r6
  4012ee:	4b2e      	ldr	r3, [pc, #184]	; (4013a8 <icmp_input+0x130>)
  4012f0:	4798      	blx	r3
  4012f2:	b138      	cbz	r0, 401304 <icmp_input+0x8c>
  pbuf_free(p);
  4012f4:	4630      	mov	r0, r6
  4012f6:	4b2f      	ldr	r3, [pc, #188]	; (4013b4 <icmp_input+0x13c>)
  4012f8:	4798      	blx	r3
  return;
  4012fa:	e7e5      	b.n	4012c8 <icmp_input+0x50>
      pbuf_free(p);
  4012fc:	4630      	mov	r0, r6
  4012fe:	4b2d      	ldr	r3, [pc, #180]	; (4013b4 <icmp_input+0x13c>)
  401300:	4798      	blx	r3
      return;
  401302:	e7e1      	b.n	4012c8 <icmp_input+0x50>
      r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
  401304:	2200      	movs	r2, #0
  401306:	8931      	ldrh	r1, [r6, #8]
  401308:	2002      	movs	r0, #2
  40130a:	4b2c      	ldr	r3, [pc, #176]	; (4013bc <icmp_input+0x144>)
  40130c:	4798      	blx	r3
      if (r == NULL) {
  40130e:	4681      	mov	r9, r0
  401310:	2800      	cmp	r0, #0
  401312:	d0ef      	beq.n	4012f4 <icmp_input+0x7c>
      if (pbuf_copy(r, p) != ERR_OK) {
  401314:	4631      	mov	r1, r6
  401316:	4b2a      	ldr	r3, [pc, #168]	; (4013c0 <icmp_input+0x148>)
  401318:	4798      	blx	r3
  40131a:	2800      	cmp	r0, #0
  40131c:	d1ea      	bne.n	4012f4 <icmp_input+0x7c>
      iphdr = (struct ip_hdr *)r->payload;
  40131e:	f8d9 7004 	ldr.w	r7, [r9, #4]
      if (pbuf_header(r, -hlen)) {
  401322:	4629      	mov	r1, r5
  401324:	4648      	mov	r0, r9
  401326:	4b20      	ldr	r3, [pc, #128]	; (4013a8 <icmp_input+0x130>)
  401328:	4798      	blx	r3
  40132a:	2800      	cmp	r0, #0
  40132c:	d1e2      	bne.n	4012f4 <icmp_input+0x7c>
      pbuf_free(p);
  40132e:	4630      	mov	r0, r6
  401330:	4b20      	ldr	r3, [pc, #128]	; (4013b4 <icmp_input+0x13c>)
  401332:	4798      	blx	r3
      p = r;
  401334:	464e      	mov	r6, r9
  401336:	e006      	b.n	401346 <icmp_input+0xce>
      if (pbuf_header(p, -(s16_t)(PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
  401338:	f06f 0121 	mvn.w	r1, #33	; 0x21
  40133c:	4630      	mov	r0, r6
  40133e:	4b1a      	ldr	r3, [pc, #104]	; (4013a8 <icmp_input+0x130>)
  401340:	4798      	blx	r3
  401342:	2800      	cmp	r0, #0
  401344:	d1d6      	bne.n	4012f4 <icmp_input+0x7c>
    iecho = (struct icmp_echo_hdr *)p->payload;
  401346:	6872      	ldr	r2, [r6, #4]
    ip_addr_copy(iphdr->src, *ip_current_dest_addr());
  401348:	4b18      	ldr	r3, [pc, #96]	; (4013ac <icmp_input+0x134>)
  40134a:	681b      	ldr	r3, [r3, #0]
  40134c:	60fb      	str	r3, [r7, #12]
    ip_addr_copy(iphdr->dest, *ip_current_src_addr());
  40134e:	4b1d      	ldr	r3, [pc, #116]	; (4013c4 <icmp_input+0x14c>)
  401350:	681b      	ldr	r3, [r3, #0]
  401352:	613b      	str	r3, [r7, #16]
    ICMPH_TYPE_SET(iecho, ICMP_ER);
  401354:	2300      	movs	r3, #0
  401356:	7013      	strb	r3, [r2, #0]
    if (iecho->chksum >= PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
  401358:	8853      	ldrh	r3, [r2, #2]
  40135a:	f64f 71f6 	movw	r1, #65526	; 0xfff6
  40135e:	428b      	cmp	r3, r1
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
  401360:	bf8c      	ite	hi
  401362:	3309      	addhi	r3, #9
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
  401364:	3308      	addls	r3, #8
  401366:	8053      	strh	r3, [r2, #2]
    IPH_TTL_SET(iphdr, ICMP_TTL);
  401368:	23ff      	movs	r3, #255	; 0xff
  40136a:	723b      	strb	r3, [r7, #8]
    IPH_CHKSUM_SET(iphdr, 0);
  40136c:	2300      	movs	r3, #0
  40136e:	72bb      	strb	r3, [r7, #10]
  401370:	72fb      	strb	r3, [r7, #11]
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
  401372:	2114      	movs	r1, #20
  401374:	4638      	mov	r0, r7
  401376:	4b14      	ldr	r3, [pc, #80]	; (4013c8 <icmp_input+0x150>)
  401378:	4798      	blx	r3
  40137a:	8178      	strh	r0, [r7, #10]
    if(pbuf_header(p, hlen)) {
  40137c:	4621      	mov	r1, r4
  40137e:	4630      	mov	r0, r6
  401380:	4b09      	ldr	r3, [pc, #36]	; (4013a8 <icmp_input+0x130>)
  401382:	4798      	blx	r3
  401384:	b118      	cbz	r0, 40138e <icmp_input+0x116>
  pbuf_free(p);
  401386:	4630      	mov	r0, r6
  401388:	4b0a      	ldr	r3, [pc, #40]	; (4013b4 <icmp_input+0x13c>)
  40138a:	4798      	blx	r3
  return;
  40138c:	e79c      	b.n	4012c8 <icmp_input+0x50>
      ret = ip_output_if(p, ip_current_dest_addr(), IP_HDRINCL,
  40138e:	f8cd 8008 	str.w	r8, [sp, #8]
  401392:	2301      	movs	r3, #1
  401394:	9301      	str	r3, [sp, #4]
  401396:	2200      	movs	r2, #0
  401398:	9200      	str	r2, [sp, #0]
  40139a:	23ff      	movs	r3, #255	; 0xff
  40139c:	4903      	ldr	r1, [pc, #12]	; (4013ac <icmp_input+0x134>)
  40139e:	4630      	mov	r0, r6
  4013a0:	4c0a      	ldr	r4, [pc, #40]	; (4013cc <icmp_input+0x154>)
  4013a2:	47a0      	blx	r4
  4013a4:	e7ef      	b.n	401386 <icmp_input+0x10e>
  4013a6:	bf00      	nop
  4013a8:	004025bf 	.word	0x004025bf
  4013ac:	20403938 	.word	0x20403938
  4013b0:	004018a5 	.word	0x004018a5
  4013b4:	0040262d 	.word	0x0040262d
  4013b8:	00401515 	.word	0x00401515
  4013bc:	00402685 	.word	0x00402685
  4013c0:	00402881 	.word	0x00402881
  4013c4:	20403930 	.word	0x20403930
  4013c8:	00401505 	.word	0x00401505
  4013cc:	00401769 	.word	0x00401769

004013d0 <icmp_dest_unreach>:
{
  4013d0:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_DUR, t);
  4013d2:	460a      	mov	r2, r1
  4013d4:	2103      	movs	r1, #3
  4013d6:	4b01      	ldr	r3, [pc, #4]	; (4013dc <icmp_dest_unreach+0xc>)
  4013d8:	4798      	blx	r3
  4013da:	bd08      	pop	{r3, pc}
  4013dc:	004011cd 	.word	0x004011cd

004013e0 <icmp_time_exceeded>:
{
  4013e0:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_TE, t);
  4013e2:	460a      	mov	r2, r1
  4013e4:	210b      	movs	r1, #11
  4013e6:	4b01      	ldr	r3, [pc, #4]	; (4013ec <icmp_time_exceeded+0xc>)
  4013e8:	4798      	blx	r3
  4013ea:	bd08      	pop	{r3, pc}
  4013ec:	004011cd 	.word	0x004011cd

004013f0 <lwip_standard_chksum>:
 * @return host order (!) lwip checksum (non-inverted Internet sum) 
 */

static u16_t
lwip_standard_chksum(void *dataptr, int len)
{
  4013f0:	b470      	push	{r4, r5, r6}
  4013f2:	b083      	sub	sp, #12
  u8_t *pb = (u8_t *)dataptr;
  u16_t *ps, t = 0;
  4013f4:	2300      	movs	r3, #0
  4013f6:	f8ad 3006 	strh.w	r3, [sp, #6]
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
  4013fa:	f010 0601 	ands.w	r6, r0, #1
  4013fe:	d030      	beq.n	401462 <lwip_standard_chksum+0x72>
  401400:	4299      	cmp	r1, r3
  401402:	dd2e      	ble.n	401462 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[1] = *pb++;
  401404:	1c45      	adds	r5, r0, #1
  401406:	7803      	ldrb	r3, [r0, #0]
  401408:	f88d 3007 	strb.w	r3, [sp, #7]
    len--;
  40140c:	3901      	subs	r1, #1
  }

  /* Add the bulk of the data */
  ps = (u16_t *)(void *)pb;
  while (len > 1) {
  40140e:	2901      	cmp	r1, #1
  401410:	dd29      	ble.n	401466 <lwip_standard_chksum+0x76>
  401412:	4628      	mov	r0, r5
  401414:	460b      	mov	r3, r1
  401416:	2200      	movs	r2, #0
    sum += *ps++;
  401418:	f830 4b02 	ldrh.w	r4, [r0], #2
  40141c:	4422      	add	r2, r4
    len -= 2;
  40141e:	3b02      	subs	r3, #2
  while (len > 1) {
  401420:	2b01      	cmp	r3, #1
  401422:	dcf9      	bgt.n	401418 <lwip_standard_chksum+0x28>
  401424:	3902      	subs	r1, #2
  401426:	f021 0301 	bic.w	r3, r1, #1
  40142a:	3302      	adds	r3, #2
  40142c:	441d      	add	r5, r3
  40142e:	f001 0101 	and.w	r1, r1, #1
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
  401432:	2900      	cmp	r1, #0
  401434:	dd02      	ble.n	40143c <lwip_standard_chksum+0x4c>
    ((u8_t *)&t)[0] = *(u8_t *)ps;
  401436:	782b      	ldrb	r3, [r5, #0]
  401438:	f88d 3006 	strb.w	r3, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
  40143c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  401440:	4402      	add	r2, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  sum = FOLD_U32T(sum);
  401442:	b290      	uxth	r0, r2
  401444:	eb00 4212 	add.w	r2, r0, r2, lsr #16
  sum = FOLD_U32T(sum);
  401448:	b290      	uxth	r0, r2
  40144a:	eb00 4012 	add.w	r0, r0, r2, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
  40144e:	b126      	cbz	r6, 40145a <lwip_standard_chksum+0x6a>
    sum = SWAP_BYTES_IN_WORD(sum);
  401450:	0203      	lsls	r3, r0, #8
  401452:	b29b      	uxth	r3, r3
  401454:	f3c0 2007 	ubfx	r0, r0, #8, #8
  401458:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
  40145a:	b280      	uxth	r0, r0
  40145c:	b003      	add	sp, #12
  40145e:	bc70      	pop	{r4, r5, r6}
  401460:	4770      	bx	lr
  u8_t *pb = (u8_t *)dataptr;
  401462:	4605      	mov	r5, r0
  401464:	e7d3      	b.n	40140e <lwip_standard_chksum+0x1e>
  u32_t sum = 0;
  401466:	2200      	movs	r2, #0
  401468:	e7e3      	b.n	401432 <lwip_standard_chksum+0x42>
	...

0040146c <inet_chksum_pseudo>:
 */
u16_t
inet_chksum_pseudo(struct pbuf *p,
       ip_addr_t *src, ip_addr_t *dest,
       u8_t proto, u16_t proto_len)
{
  40146c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401470:	468a      	mov	sl, r1
  401472:	4691      	mov	r9, r2
  401474:	4698      	mov	r8, r3
  u8_t swapped;

  acc = 0;
  swapped = 0;
  /* iterate through all pbuf in chain */
  for(q = p; q != NULL; q = q->next) {
  401476:	2800      	cmp	r0, #0
  401478:	d03e      	beq.n	4014f8 <inet_chksum_pseudo+0x8c>
  40147a:	4605      	mov	r5, r0
  40147c:	2600      	movs	r6, #0
  40147e:	4634      	mov	r4, r6
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
  401480:	4f1e      	ldr	r7, [pc, #120]	; (4014fc <inet_chksum_pseudo+0x90>)
  401482:	e001      	b.n	401488 <inet_chksum_pseudo+0x1c>
  for(q = p; q != NULL; q = q->next) {
  401484:	682d      	ldr	r5, [r5, #0]
  401486:	b19d      	cbz	r5, 4014b0 <inet_chksum_pseudo+0x44>
    acc += LWIP_CHKSUM(q->payload, q->len);
  401488:	8969      	ldrh	r1, [r5, #10]
  40148a:	6868      	ldr	r0, [r5, #4]
  40148c:	47b8      	blx	r7
  40148e:	4404      	add	r4, r0
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
  401490:	b2a0      	uxth	r0, r4
  401492:	eb00 4414 	add.w	r4, r0, r4, lsr #16
    if (q->len % 2 != 0) {
  401496:	896b      	ldrh	r3, [r5, #10]
  401498:	f013 0f01 	tst.w	r3, #1
  40149c:	d0f2      	beq.n	401484 <inet_chksum_pseudo+0x18>
      swapped = 1 - swapped;
  40149e:	f1c6 0601 	rsb	r6, r6, #1
  4014a2:	b2f6      	uxtb	r6, r6
      acc = SWAP_BYTES_IN_WORD(acc);
  4014a4:	0223      	lsls	r3, r4, #8
  4014a6:	b29b      	uxth	r3, r3
  4014a8:	f3c4 2407 	ubfx	r4, r4, #8, #8
  4014ac:	431c      	orrs	r4, r3
  4014ae:	e7e9      	b.n	401484 <inet_chksum_pseudo+0x18>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
  4014b0:	b126      	cbz	r6, 4014bc <inet_chksum_pseudo+0x50>
    acc = SWAP_BYTES_IN_WORD(acc);
  4014b2:	0223      	lsls	r3, r4, #8
  4014b4:	b29b      	uxth	r3, r3
  4014b6:	f3c4 2407 	ubfx	r4, r4, #8, #8
  4014ba:	431c      	orrs	r4, r3
  }
  addr = ip4_addr_get_u32(src);
  4014bc:	f8da 2000 	ldr.w	r2, [sl]
  acc += (addr & 0xffffUL);
  acc += ((addr >> 16) & 0xffffUL);
  addr = ip4_addr_get_u32(dest);
  4014c0:	f8d9 3000 	ldr.w	r3, [r9]
  acc += (addr & 0xffffUL);
  acc += ((addr >> 16) & 0xffffUL);
  4014c4:	0c18      	lsrs	r0, r3, #16
  4014c6:	fa10 f083 	uxtah	r0, r0, r3
  4014ca:	fa10 f082 	uxtah	r0, r0, r2
  4014ce:	eb00 4012 	add.w	r0, r0, r2, lsr #16
  4014d2:	4404      	add	r4, r0
  acc += (u32_t)htons((u16_t)proto);
  4014d4:	4640      	mov	r0, r8
  4014d6:	4d0a      	ldr	r5, [pc, #40]	; (401500 <inet_chksum_pseudo+0x94>)
  4014d8:	47a8      	blx	r5
  4014da:	4404      	add	r4, r0
  acc += (u32_t)htons(proto_len);
  4014dc:	f8bd 0020 	ldrh.w	r0, [sp, #32]
  4014e0:	47a8      	blx	r5
  4014e2:	4420      	add	r0, r4

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  acc = FOLD_U32T(acc);
  4014e4:	b284      	uxth	r4, r0
  4014e6:	eb04 4410 	add.w	r4, r4, r0, lsr #16
  acc = FOLD_U32T(acc);
  4014ea:	b2a0      	uxth	r0, r4
  4014ec:	eb00 4014 	add.w	r0, r0, r4, lsr #16
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
  4014f0:	43c0      	mvns	r0, r0
}
  4014f2:	b280      	uxth	r0, r0
  4014f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  acc = 0;
  4014f8:	2400      	movs	r4, #0
  4014fa:	e7df      	b.n	4014bc <inet_chksum_pseudo+0x50>
  4014fc:	004013f1 	.word	0x004013f1
  401500:	00401195 	.word	0x00401195

00401504 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(void *dataptr, u16_t len)
{
  401504:	b508      	push	{r3, lr}
  return ~LWIP_CHKSUM(dataptr, len);
  401506:	4b02      	ldr	r3, [pc, #8]	; (401510 <inet_chksum+0xc>)
  401508:	4798      	blx	r3
  40150a:	43c0      	mvns	r0, r0
}
  40150c:	b280      	uxth	r0, r0
  40150e:	bd08      	pop	{r3, pc}
  401510:	004013f1 	.word	0x004013f1

00401514 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
  401514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
  for(q = p; q != NULL; q = q->next) {
  401516:	b318      	cbz	r0, 401560 <inet_chksum_pbuf+0x4c>
  401518:	4605      	mov	r5, r0
  40151a:	2600      	movs	r6, #0
  40151c:	4634      	mov	r4, r6
    acc += LWIP_CHKSUM(q->payload, q->len);
  40151e:	4f11      	ldr	r7, [pc, #68]	; (401564 <inet_chksum_pbuf+0x50>)
  401520:	e001      	b.n	401526 <inet_chksum_pbuf+0x12>
  for(q = p; q != NULL; q = q->next) {
  401522:	682d      	ldr	r5, [r5, #0]
  401524:	b19d      	cbz	r5, 40154e <inet_chksum_pbuf+0x3a>
    acc += LWIP_CHKSUM(q->payload, q->len);
  401526:	8969      	ldrh	r1, [r5, #10]
  401528:	6868      	ldr	r0, [r5, #4]
  40152a:	47b8      	blx	r7
  40152c:	4420      	add	r0, r4
    acc = FOLD_U32T(acc);
  40152e:	b284      	uxth	r4, r0
  401530:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    if (q->len % 2 != 0) {
  401534:	896b      	ldrh	r3, [r5, #10]
  401536:	f013 0f01 	tst.w	r3, #1
  40153a:	d0f2      	beq.n	401522 <inet_chksum_pbuf+0xe>
      swapped = 1 - swapped;
  40153c:	f1c6 0601 	rsb	r6, r6, #1
  401540:	b2f6      	uxtb	r6, r6
      acc = SWAP_BYTES_IN_WORD(acc);
  401542:	0223      	lsls	r3, r4, #8
  401544:	b29b      	uxth	r3, r3
  401546:	f3c4 2407 	ubfx	r4, r4, #8, #8
  40154a:	431c      	orrs	r4, r3
  40154c:	e7e9      	b.n	401522 <inet_chksum_pbuf+0xe>
    }
  }

  if (swapped) {
  40154e:	b126      	cbz	r6, 40155a <inet_chksum_pbuf+0x46>
    acc = SWAP_BYTES_IN_WORD(acc);
  401550:	0223      	lsls	r3, r4, #8
  401552:	b29b      	uxth	r3, r3
  401554:	f3c4 2407 	ubfx	r4, r4, #8, #8
  401558:	431c      	orrs	r4, r3
  }
  return (u16_t)~(acc & 0xffffUL);
  40155a:	43e0      	mvns	r0, r4
}
  40155c:	b280      	uxth	r0, r0
  40155e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  acc = 0;
  401560:	2400      	movs	r4, #0
  401562:	e7fa      	b.n	40155a <inet_chksum_pbuf+0x46>
  401564:	004013f1 	.word	0x004013f1

00401568 <ip_route>:
    return netif;
  }
#endif

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  401568:	4b0e      	ldr	r3, [pc, #56]	; (4015a4 <ip_route+0x3c>)
  40156a:	681b      	ldr	r3, [r3, #0]
  40156c:	b973      	cbnz	r3, 40158c <ip_route+0x24>
        /* return netif on which to forward IP packet */
        return netif;
      }
    }
  }
  if ((netif_default == NULL) || (!netif_is_up(netif_default))) {
  40156e:	4b0e      	ldr	r3, [pc, #56]	; (4015a8 <ip_route+0x40>)
  401570:	681b      	ldr	r3, [r3, #0]
  401572:	b133      	cbz	r3, 401582 <ip_route+0x1a>
  401574:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
  401578:	f002 0201 	and.w	r2, r2, #1
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    snmp_inc_ipoutnoroutes();
    return NULL;
  40157c:	2a00      	cmp	r2, #0
  40157e:	bf08      	it	eq
  401580:	2300      	moveq	r3, #0
  }
  /* no matching netif found, use default netif */
  return netif_default;
}
  401582:	4618      	mov	r0, r3
  401584:	4770      	bx	lr
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  401586:	681b      	ldr	r3, [r3, #0]
  401588:	2b00      	cmp	r3, #0
  40158a:	d0f0      	beq.n	40156e <ip_route+0x6>
    if (netif_is_up(netif)) {
  40158c:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
  401590:	f012 0f01 	tst.w	r2, #1
  401594:	d0f7      	beq.n	401586 <ip_route+0x1e>
      if (ip_addr_netcmp(dest, &(netif->ip_addr), &(netif->netmask))) {
  401596:	6802      	ldr	r2, [r0, #0]
  401598:	6859      	ldr	r1, [r3, #4]
  40159a:	404a      	eors	r2, r1
  40159c:	6899      	ldr	r1, [r3, #8]
  40159e:	420a      	tst	r2, r1
  4015a0:	d1f1      	bne.n	401586 <ip_route+0x1e>
  4015a2:	e7ee      	b.n	401582 <ip_route+0x1a>
  4015a4:	20404954 	.word	0x20404954
  4015a8:	20404958 	.word	0x20404958

004015ac <ip_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip_input(struct pbuf *p, struct netif *inp)
{
  4015ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4015b0:	4605      	mov	r5, r0

  IP_STATS_INC(ip.recv);
  snmp_inc_ipinreceives();

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
  4015b2:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (IPH_V(iphdr) != 4) {
  4015b6:	f898 3000 	ldrb.w	r3, [r8]
  4015ba:	091a      	lsrs	r2, r3, #4
  4015bc:	2a04      	cmp	r2, #4
  4015be:	d004      	beq.n	4015ca <ip_input+0x1e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", IPH_V(iphdr)));
    ip_debug_print(p);
    pbuf_free(p);
  4015c0:	4b5a      	ldr	r3, [pc, #360]	; (40172c <ip_input+0x180>)
  4015c2:	4798      	blx	r3
  current_header = NULL;
  ip_addr_set_any(&current_iphdr_src);
  ip_addr_set_any(&current_iphdr_dest);

  return ERR_OK;
}
  4015c4:	2000      	movs	r0, #0
  4015c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4015ca:	460f      	mov	r7, r1
  iphdr_hlen = IPH_HL(iphdr);
  4015cc:	f003 030f 	and.w	r3, r3, #15
  iphdr_hlen *= 4;
  4015d0:	009c      	lsls	r4, r3, #2
  iphdr_len = ntohs(IPH_LEN(iphdr));
  4015d2:	f8b8 0002 	ldrh.w	r0, [r8, #2]
  4015d6:	4b56      	ldr	r3, [pc, #344]	; (401730 <ip_input+0x184>)
  4015d8:	4798      	blx	r3
  4015da:	4606      	mov	r6, r0
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
  4015dc:	896b      	ldrh	r3, [r5, #10]
  4015de:	42a3      	cmp	r3, r4
  4015e0:	d302      	bcc.n	4015e8 <ip_input+0x3c>
  4015e2:	892b      	ldrh	r3, [r5, #8]
  4015e4:	4283      	cmp	r3, r0
  4015e6:	d203      	bcs.n	4015f0 <ip_input+0x44>
    pbuf_free(p);
  4015e8:	4628      	mov	r0, r5
  4015ea:	4b50      	ldr	r3, [pc, #320]	; (40172c <ip_input+0x180>)
  4015ec:	4798      	blx	r3
    return ERR_OK;
  4015ee:	e7e9      	b.n	4015c4 <ip_input+0x18>
  if (inet_chksum(iphdr, iphdr_hlen) != 0) {
  4015f0:	4621      	mov	r1, r4
  4015f2:	4640      	mov	r0, r8
  4015f4:	4b4f      	ldr	r3, [pc, #316]	; (401734 <ip_input+0x188>)
  4015f6:	4798      	blx	r3
  4015f8:	b9a0      	cbnz	r0, 401624 <ip_input+0x78>
  pbuf_realloc(p, iphdr_len);
  4015fa:	4631      	mov	r1, r6
  4015fc:	4628      	mov	r0, r5
  4015fe:	4b4e      	ldr	r3, [pc, #312]	; (401738 <ip_input+0x18c>)
  401600:	4798      	blx	r3
  ip_addr_copy(current_iphdr_dest, iphdr->dest);
  401602:	f8d8 2010 	ldr.w	r2, [r8, #16]
  401606:	4b4d      	ldr	r3, [pc, #308]	; (40173c <ip_input+0x190>)
  401608:	601a      	str	r2, [r3, #0]
  ip_addr_copy(current_iphdr_src, iphdr->src);
  40160a:	f8d8 200c 	ldr.w	r2, [r8, #12]
  40160e:	4b4c      	ldr	r3, [pc, #304]	; (401740 <ip_input+0x194>)
  401610:	601a      	str	r2, [r3, #0]
    netif = inp;
  401612:	463c      	mov	r4, r7
    int first = 1;
  401614:	2601      	movs	r6, #1
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
  401616:	f8df a124 	ldr.w	sl, [pc, #292]	; 40173c <ip_input+0x190>
            ip_addr_isbroadcast(&current_iphdr_dest, netif)) {
  40161a:	f8df b128 	ldr.w	fp, [pc, #296]	; 401744 <ip_input+0x198>
        netif = netif_list;
  40161e:	f8df 9144 	ldr.w	r9, [pc, #324]	; 401764 <ip_input+0x1b8>
  401622:	e00c      	b.n	40163e <ip_input+0x92>
    pbuf_free(p);
  401624:	4628      	mov	r0, r5
  401626:	4b41      	ldr	r3, [pc, #260]	; (40172c <ip_input+0x180>)
  401628:	4798      	blx	r3
    return ERR_OK;
  40162a:	e7cb      	b.n	4015c4 <ip_input+0x18>
      if (first) {
  40162c:	2e00      	cmp	r6, #0
  40162e:	d050      	beq.n	4016d2 <ip_input+0x126>
        netif = netif_list;
  401630:	f8d9 4000 	ldr.w	r4, [r9]
      if (netif == inp) {
  401634:	42bc      	cmp	r4, r7
        netif = netif->next;
  401636:	bf08      	it	eq
  401638:	6824      	ldreq	r4, [r4, #0]
  40163a:	2600      	movs	r6, #0
    } while(netif != NULL);
  40163c:	b194      	cbz	r4, 401664 <ip_input+0xb8>
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
  40163e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
  401642:	f013 0f01 	tst.w	r3, #1
  401646:	d0f1      	beq.n	40162c <ip_input+0x80>
  401648:	f114 0f04 	cmn.w	r4, #4
  40164c:	d0ee      	beq.n	40162c <ip_input+0x80>
  40164e:	6863      	ldr	r3, [r4, #4]
  401650:	2b00      	cmp	r3, #0
  401652:	d0eb      	beq.n	40162c <ip_input+0x80>
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
  401654:	f8da 0000 	ldr.w	r0, [sl]
  401658:	4283      	cmp	r3, r0
  40165a:	d003      	beq.n	401664 <ip_input+0xb8>
            ip_addr_isbroadcast(&current_iphdr_dest, netif)) {
  40165c:	4621      	mov	r1, r4
  40165e:	47d8      	blx	fp
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
  401660:	2800      	cmp	r0, #0
  401662:	d0e3      	beq.n	40162c <ip_input+0x80>
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
  401664:	4639      	mov	r1, r7
  401666:	4b36      	ldr	r3, [pc, #216]	; (401740 <ip_input+0x194>)
  401668:	6818      	ldr	r0, [r3, #0]
  40166a:	4b36      	ldr	r3, [pc, #216]	; (401744 <ip_input+0x198>)
  40166c:	4798      	blx	r3
  40166e:	2800      	cmp	r0, #0
  401670:	d131      	bne.n	4016d6 <ip_input+0x12a>
         (ip_addr_ismulticast(&current_iphdr_src))) {
  401672:	4b33      	ldr	r3, [pc, #204]	; (401740 <ip_input+0x194>)
  401674:	681b      	ldr	r3, [r3, #0]
  401676:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
  40167a:	2be0      	cmp	r3, #224	; 0xe0
  40167c:	d02b      	beq.n	4016d6 <ip_input+0x12a>
  if (netif == NULL) {
  40167e:	b374      	cbz	r4, 4016de <ip_input+0x132>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
  401680:	f8b8 3006 	ldrh.w	r3, [r8, #6]
  401684:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  401688:	b29b      	uxth	r3, r3
  40168a:	bb63      	cbnz	r3, 4016e6 <ip_input+0x13a>
  current_netif = inp;
  40168c:	4b2e      	ldr	r3, [pc, #184]	; (401748 <ip_input+0x19c>)
  40168e:	601f      	str	r7, [r3, #0]
  current_header = iphdr;
  401690:	4b2e      	ldr	r3, [pc, #184]	; (40174c <ip_input+0x1a0>)
  401692:	f8c3 8000 	str.w	r8, [r3]
    switch (IPH_PROTO(iphdr)) {
  401696:	f898 3009 	ldrb.w	r3, [r8, #9]
  40169a:	2b06      	cmp	r3, #6
  40169c:	d03b      	beq.n	401716 <ip_input+0x16a>
  40169e:	2b11      	cmp	r3, #17
  4016a0:	d02b      	beq.n	4016fa <ip_input+0x14e>
  4016a2:	2b01      	cmp	r3, #1
  4016a4:	d03c      	beq.n	401720 <ip_input+0x174>
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
  4016a6:	4639      	mov	r1, r7
  4016a8:	4b24      	ldr	r3, [pc, #144]	; (40173c <ip_input+0x190>)
  4016aa:	6818      	ldr	r0, [r3, #0]
  4016ac:	4b25      	ldr	r3, [pc, #148]	; (401744 <ip_input+0x198>)
  4016ae:	4798      	blx	r3
  4016b0:	b958      	cbnz	r0, 4016ca <ip_input+0x11e>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
  4016b2:	4b22      	ldr	r3, [pc, #136]	; (40173c <ip_input+0x190>)
  4016b4:	681b      	ldr	r3, [r3, #0]
  4016b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
  4016ba:	2be0      	cmp	r3, #224	; 0xe0
  4016bc:	d005      	beq.n	4016ca <ip_input+0x11e>
        p->payload = iphdr;
  4016be:	f8c5 8004 	str.w	r8, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
  4016c2:	2102      	movs	r1, #2
  4016c4:	4628      	mov	r0, r5
  4016c6:	4b22      	ldr	r3, [pc, #136]	; (401750 <ip_input+0x1a4>)
  4016c8:	4798      	blx	r3
      pbuf_free(p);
  4016ca:	4628      	mov	r0, r5
  4016cc:	4b17      	ldr	r3, [pc, #92]	; (40172c <ip_input+0x180>)
  4016ce:	4798      	blx	r3
  4016d0:	e017      	b.n	401702 <ip_input+0x156>
        netif = netif->next;
  4016d2:	6824      	ldr	r4, [r4, #0]
  4016d4:	e7ae      	b.n	401634 <ip_input+0x88>
      pbuf_free(p);
  4016d6:	4628      	mov	r0, r5
  4016d8:	4b14      	ldr	r3, [pc, #80]	; (40172c <ip_input+0x180>)
  4016da:	4798      	blx	r3
      return ERR_OK;
  4016dc:	e772      	b.n	4015c4 <ip_input+0x18>
    pbuf_free(p);
  4016de:	4628      	mov	r0, r5
  4016e0:	4b12      	ldr	r3, [pc, #72]	; (40172c <ip_input+0x180>)
  4016e2:	4798      	blx	r3
    return ERR_OK;
  4016e4:	e76e      	b.n	4015c4 <ip_input+0x18>
    p = ip_reass(p);
  4016e6:	4628      	mov	r0, r5
  4016e8:	4b1a      	ldr	r3, [pc, #104]	; (401754 <ip_input+0x1a8>)
  4016ea:	4798      	blx	r3
    if (p == NULL) {
  4016ec:	4605      	mov	r5, r0
  4016ee:	2800      	cmp	r0, #0
  4016f0:	f43f af68 	beq.w	4015c4 <ip_input+0x18>
    iphdr = (struct ip_hdr *)p->payload;
  4016f4:	f8d0 8004 	ldr.w	r8, [r0, #4]
  4016f8:	e7c8      	b.n	40168c <ip_input+0xe0>
      udp_input(p, inp);
  4016fa:	4639      	mov	r1, r7
  4016fc:	4628      	mov	r0, r5
  4016fe:	4b16      	ldr	r3, [pc, #88]	; (401758 <ip_input+0x1ac>)
  401700:	4798      	blx	r3
  current_netif = NULL;
  401702:	2300      	movs	r3, #0
  401704:	4a10      	ldr	r2, [pc, #64]	; (401748 <ip_input+0x19c>)
  401706:	6013      	str	r3, [r2, #0]
  current_header = NULL;
  401708:	4a10      	ldr	r2, [pc, #64]	; (40174c <ip_input+0x1a0>)
  40170a:	6013      	str	r3, [r2, #0]
  ip_addr_set_any(&current_iphdr_src);
  40170c:	4a0c      	ldr	r2, [pc, #48]	; (401740 <ip_input+0x194>)
  40170e:	6013      	str	r3, [r2, #0]
  ip_addr_set_any(&current_iphdr_dest);
  401710:	4a0a      	ldr	r2, [pc, #40]	; (40173c <ip_input+0x190>)
  401712:	6013      	str	r3, [r2, #0]
  return ERR_OK;
  401714:	e756      	b.n	4015c4 <ip_input+0x18>
      tcp_input(p, inp);
  401716:	4639      	mov	r1, r7
  401718:	4628      	mov	r0, r5
  40171a:	4b10      	ldr	r3, [pc, #64]	; (40175c <ip_input+0x1b0>)
  40171c:	4798      	blx	r3
      break;
  40171e:	e7f0      	b.n	401702 <ip_input+0x156>
      icmp_input(p, inp);
  401720:	4639      	mov	r1, r7
  401722:	4628      	mov	r0, r5
  401724:	4b0e      	ldr	r3, [pc, #56]	; (401760 <ip_input+0x1b4>)
  401726:	4798      	blx	r3
      break;
  401728:	e7eb      	b.n	401702 <ip_input+0x156>
  40172a:	bf00      	nop
  40172c:	0040262d 	.word	0x0040262d
  401730:	0040119f 	.word	0x0040119f
  401734:	00401505 	.word	0x00401505
  401738:	004027cd 	.word	0x004027cd
  40173c:	20403938 	.word	0x20403938
  401740:	20403930 	.word	0x20403930
  401744:	004018a5 	.word	0x004018a5
  401748:	20403934 	.word	0x20403934
  40174c:	2040393c 	.word	0x2040393c
  401750:	004013d1 	.word	0x004013d1
  401754:	00401b15 	.word	0x00401b15
  401758:	004055b9 	.word	0x004055b9
  40175c:	00404029 	.word	0x00404029
  401760:	00401279 	.word	0x00401279
  401764:	20404954 	.word	0x20404954

00401768 <ip_output_if>:
 */
err_t
ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
  401768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40176c:	b087      	sub	sp, #28
  40176e:	4605      	mov	r5, r0
  401770:	9102      	str	r1, [sp, #8]
  401772:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
  401776:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
  40177a:	9e12      	ldr	r6, [sp, #72]	; 0x48
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  snmp_inc_ipoutrequests();

  /* Should the IP header be generated or is it already included in p? */
  if (dest != IP_HDRINCL) {
  40177c:	9201      	str	r2, [sp, #4]
  40177e:	2a00      	cmp	r2, #0
  401780:	d057      	beq.n	401832 <ip_output_if+0xca>
  401782:	469a      	mov	sl, r3
  401784:	4617      	mov	r7, r2
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
  401786:	2114      	movs	r1, #20
  401788:	4b32      	ldr	r3, [pc, #200]	; (401854 <ip_output_if+0xec>)
  40178a:	4798      	blx	r3
  40178c:	2800      	cmp	r0, #0
  40178e:	d15d      	bne.n	40184c <ip_output_if+0xe4>
      IP_STATS_INC(ip.err);
      snmp_inc_ipoutdiscards();
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
  401790:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
  401792:	f884 a008 	strb.w	sl, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
  401796:	f884 b009 	strb.w	fp, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(proto, ttl);
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip_addr_copy(iphdr->dest, *dest);
  40179a:	683b      	ldr	r3, [r7, #0]
  40179c:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
  40179e:	b29a      	uxth	r2, r3
  4017a0:	9203      	str	r2, [sp, #12]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
  4017a2:	ea4f 4913 	mov.w	r9, r3, lsr #16
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
  4017a6:	2345      	movs	r3, #69	; 0x45
  4017a8:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
  4017aa:	f884 8001 	strb.w	r8, [r4, #1]
    chk_sum += LWIP_MAKE_U16(proto, ttl);
  4017ae:	ea4a 2a0b 	orr.w	sl, sl, fp, lsl #8
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
  4017b2:	ea4f 2808 	mov.w	r8, r8, lsl #8
  4017b6:	ea48 0803 	orr.w	r8, r8, r3
  4017ba:	eb0a 0b08 	add.w	fp, sl, r8
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, htons(p->tot_len));
  4017be:	8928      	ldrh	r0, [r5, #8]
  4017c0:	4f25      	ldr	r7, [pc, #148]	; (401858 <ip_output_if+0xf0>)
  4017c2:	47b8      	blx	r7
  4017c4:	4682      	mov	sl, r0
  4017c6:	8060      	strh	r0, [r4, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
  4017c8:	2300      	movs	r3, #0
  4017ca:	71a3      	strb	r3, [r4, #6]
  4017cc:	71e3      	strb	r3, [r4, #7]
    IPH_ID_SET(iphdr, htons(ip_id));
  4017ce:	f8df 8090 	ldr.w	r8, [pc, #144]	; 401860 <ip_output_if+0xf8>
  4017d2:	f8b8 0000 	ldrh.w	r0, [r8]
  4017d6:	47b8      	blx	r7
  4017d8:	80a0      	strh	r0, [r4, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
  4017da:	f8b8 3000 	ldrh.w	r3, [r8]
  4017de:	3301      	adds	r3, #1
  4017e0:	f8a8 3000 	strh.w	r3, [r8]

    if (ip_addr_isany(src)) {
  4017e4:	9b02      	ldr	r3, [sp, #8]
  4017e6:	b10b      	cbz	r3, 4017ec <ip_output_if+0x84>
  4017e8:	681b      	ldr	r3, [r3, #0]
  4017ea:	bb03      	cbnz	r3, 40182e <ip_output_if+0xc6>
      ip_addr_copy(iphdr->src, netif->ip_addr);
  4017ec:	6873      	ldr	r3, [r6, #4]
  4017ee:	60e3      	str	r3, [r4, #12]
      /* src cannot be NULL here */
      ip_addr_copy(iphdr->src, *src);
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
  4017f0:	68e2      	ldr	r2, [r4, #12]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
  4017f2:	fa1b f382 	uxtah	r3, fp, r2
  4017f6:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  4017fa:	9a03      	ldr	r2, [sp, #12]
  4017fc:	4413      	add	r3, r2
  4017fe:	444b      	add	r3, r9
  401800:	449a      	add	sl, r3
  401802:	4450      	add	r0, sl
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
  401804:	fa1f fa80 	uxth.w	sl, r0
  401808:	eb0a 4010 	add.w	r0, sl, r0, lsr #16
    chk_sum = (chk_sum >> 16) + chk_sum;
  40180c:	eb00 4010 	add.w	r0, r0, r0, lsr #16
    chk_sum = ~chk_sum;
    iphdr->_chksum = chk_sum; /* network order */
  401810:	43c0      	mvns	r0, r0
  401812:	8160      	strh	r0, [r4, #10]
  }
#endif /* LWIP_IGMP */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
  401814:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
  401816:	b113      	cbz	r3, 40181e <ip_output_if+0xb6>
  401818:	892a      	ldrh	r2, [r5, #8]
  40181a:	429a      	cmp	r2, r3
  40181c:	d810      	bhi.n	401840 <ip_output_if+0xd8>
    return ip_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));
  return netif->output(netif, p, dest);
  40181e:	6973      	ldr	r3, [r6, #20]
  401820:	9a01      	ldr	r2, [sp, #4]
  401822:	4629      	mov	r1, r5
  401824:	4630      	mov	r0, r6
  401826:	4798      	blx	r3
}
  401828:	b007      	add	sp, #28
  40182a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ip_addr_copy(iphdr->src, *src);
  40182e:	60e3      	str	r3, [r4, #12]
  401830:	e7de      	b.n	4017f0 <ip_output_if+0x88>
    ip_addr_copy(dest_addr, iphdr->dest);
  401832:	6843      	ldr	r3, [r0, #4]
  401834:	691b      	ldr	r3, [r3, #16]
  401836:	aa06      	add	r2, sp, #24
  401838:	f842 3d04 	str.w	r3, [r2, #-4]!
  40183c:	9201      	str	r2, [sp, #4]
  40183e:	e7e9      	b.n	401814 <ip_output_if+0xac>
    return ip_frag(p, netif, dest);
  401840:	9a01      	ldr	r2, [sp, #4]
  401842:	4631      	mov	r1, r6
  401844:	4628      	mov	r0, r5
  401846:	4b05      	ldr	r3, [pc, #20]	; (40185c <ip_output_if+0xf4>)
  401848:	4798      	blx	r3
  40184a:	e7ed      	b.n	401828 <ip_output_if+0xc0>
      return ERR_BUF;
  40184c:	f06f 0001 	mvn.w	r0, #1
  401850:	e7ea      	b.n	401828 <ip_output_if+0xc0>
  401852:	bf00      	nop
  401854:	004025bf 	.word	0x004025bf
  401858:	00401195 	.word	0x00401195
  40185c:	00401e79 	.word	0x00401e79
  401860:	20400aa8 	.word	0x20400aa8

00401864 <ip_output>:
 *         see ip_output_if() for more return values
 */
err_t
ip_output(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
  401864:	b5f0      	push	{r4, r5, r6, r7, lr}
  401866:	b085      	sub	sp, #20
  401868:	4605      	mov	r5, r0
  40186a:	460e      	mov	r6, r1
  40186c:	4614      	mov	r4, r2
  40186e:	461f      	mov	r7, r3

  /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
     gets altered as the packet is passed down the stack */
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  if ((netif = ip_route(dest)) == NULL) {
  401870:	4610      	mov	r0, r2
  401872:	4b0a      	ldr	r3, [pc, #40]	; (40189c <ip_output+0x38>)
  401874:	4798      	blx	r3
  401876:	b170      	cbz	r0, 401896 <ip_output+0x32>
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    return ERR_RTE;
  }

  return ip_output_if(p, src, dest, ttl, tos, proto, netif);
  401878:	9002      	str	r0, [sp, #8]
  40187a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
  40187e:	9301      	str	r3, [sp, #4]
  401880:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
  401884:	9300      	str	r3, [sp, #0]
  401886:	463b      	mov	r3, r7
  401888:	4622      	mov	r2, r4
  40188a:	4631      	mov	r1, r6
  40188c:	4628      	mov	r0, r5
  40188e:	4c04      	ldr	r4, [pc, #16]	; (4018a0 <ip_output+0x3c>)
  401890:	47a0      	blx	r4
}
  401892:	b005      	add	sp, #20
  401894:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_RTE;
  401896:	f06f 0003 	mvn.w	r0, #3
  40189a:	e7fa      	b.n	401892 <ip_output+0x2e>
  40189c:	00401569 	.word	0x00401569
  4018a0:	00401769 	.word	0x00401769

004018a4 <ip4_addr_isbroadcast>:
{
  ip_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
  4018a4:	1e43      	subs	r3, r0, #1
  4018a6:	f113 0f03 	cmn.w	r3, #3
  4018aa:	d812      	bhi.n	4018d2 <ip4_addr_isbroadcast+0x2e>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
  4018ac:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
  4018b0:	f013 0f02 	tst.w	r3, #2
  4018b4:	d00f      	beq.n	4018d6 <ip4_addr_isbroadcast+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
  4018b6:	684b      	ldr	r3, [r1, #4]
  4018b8:	4298      	cmp	r0, r3
  4018ba:	d00e      	beq.n	4018da <ip4_addr_isbroadcast+0x36>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
  4018bc:	688a      	ldr	r2, [r1, #8]
  4018be:	4043      	eors	r3, r0
  4018c0:	4213      	tst	r3, r2
  4018c2:	d10c      	bne.n	4018de <ip4_addr_isbroadcast+0x3a>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
  4018c4:	43d2      	mvns	r2, r2
  4018c6:	ea32 0300 	bics.w	r3, r2, r0
    return 1;
  4018ca:	bf0c      	ite	eq
  4018cc:	2001      	moveq	r0, #1
  4018ce:	2000      	movne	r0, #0
  4018d0:	4770      	bx	lr
  4018d2:	2001      	movs	r0, #1
  4018d4:	4770      	bx	lr
    return 0;
  4018d6:	2000      	movs	r0, #0
  4018d8:	4770      	bx	lr
    return 0;
  4018da:	2000      	movs	r0, #0
  4018dc:	4770      	bx	lr
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
  4018de:	2000      	movs	r0, #0
  }
}
  4018e0:	4770      	bx	lr
	...

004018e4 <ipaddr_ntoa_r>:
 * @param buflen length of buf
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *ipaddr_ntoa_r(const ip_addr_t *addr, char *buf, int buflen)
{
  4018e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4018e8:	b085      	sub	sp, #20
  4018ea:	9101      	str	r1, [sp, #4]
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;

  s_addr = ip4_addr_get_u32(addr);
  4018ec:	6803      	ldr	r3, [r0, #0]
  4018ee:	f10d 0c10 	add.w	ip, sp, #16
  4018f2:	f84c 3d04 	str.w	r3, [ip, #-4]!

  rp = buf;
  4018f6:	460c      	mov	r4, r1
  int len = 0;
  4018f8:	f04f 0800 	mov.w	r8, #0
  4018fc:	46c1      	mov	r9, r8
  ap = (u8_t *)&s_addr;
  for(n = 0; n < 4; n++) {
    i = 0;
    do {
      rem = *ap % (u8_t)10;
  4018fe:	4f27      	ldr	r7, [pc, #156]	; (40199c <ipaddr_ntoa_r+0xb8>)
  401900:	f102 0e01 	add.w	lr, r2, #1
      *rp++ = inv[i];
    }
    if (len++ >= buflen) {
      return NULL;
    }
    *rp++ = '.';
  401904:	f04f 0b2e 	mov.w	fp, #46	; 0x2e
  401908:	4666      	mov	r6, ip
  40190a:	f89c 3000 	ldrb.w	r3, [ip]
  int len = 0;
  40190e:	4648      	mov	r0, r9
  401910:	469a      	mov	sl, r3
  401912:	e000      	b.n	401916 <ipaddr_ntoa_r+0x32>
      inv[i++] = '0' + rem;
  401914:	4628      	mov	r0, r5
      rem = *ap % (u8_t)10;
  401916:	fba7 310a 	umull	r3, r1, r7, sl
  40191a:	08c9      	lsrs	r1, r1, #3
  40191c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  401920:	ebaa 0343 	sub.w	r3, sl, r3, lsl #1
      inv[i++] = '0' + rem;
  401924:	1c45      	adds	r5, r0, #1
  401926:	b2ed      	uxtb	r5, r5
  401928:	3330      	adds	r3, #48	; 0x30
  40192a:	f10d 0a10 	add.w	sl, sp, #16
  40192e:	4482      	add	sl, r0
  401930:	f80a 3c08 	strb.w	r3, [sl, #-8]
    } while(*ap);
  401934:	f001 0aff 	and.w	sl, r1, #255	; 0xff
  401938:	2900      	cmp	r1, #0
  40193a:	d1eb      	bne.n	401914 <ipaddr_ntoa_r+0x30>
  40193c:	f886 9000 	strb.w	r9, [r6]
  401940:	f10c 0c01 	add.w	ip, ip, #1
    while(i--) {
  401944:	b1ad      	cbz	r5, 401972 <ipaddr_ntoa_r+0x8e>
      if (len++ >= buflen) {
  401946:	f108 0101 	add.w	r1, r8, #1
  40194a:	4542      	cmp	r2, r8
  40194c:	dd21      	ble.n	401992 <ipaddr_ntoa_r+0xae>
  40194e:	ab02      	add	r3, sp, #8
  401950:	181d      	adds	r5, r3, r0
  401952:	1e63      	subs	r3, r4, #1
  401954:	4420      	add	r0, r4
  401956:	1c9e      	adds	r6, r3, #2
      *rp++ = inv[i];
  401958:	f815 4901 	ldrb.w	r4, [r5], #-1
  40195c:	f803 4f01 	strb.w	r4, [r3, #1]!
    while(i--) {
  401960:	4298      	cmp	r0, r3
  401962:	d008      	beq.n	401976 <ipaddr_ntoa_r+0x92>
      if (len++ >= buflen) {
  401964:	3101      	adds	r1, #1
  401966:	4571      	cmp	r1, lr
  401968:	d1f5      	bne.n	401956 <ipaddr_ntoa_r+0x72>
        return NULL;
  40196a:	2000      	movs	r0, #0
    ap++;
  }
  *--rp = 0;
  return buf;
}
  40196c:	b005      	add	sp, #20
  40196e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while(i--) {
  401972:	4641      	mov	r1, r8
  401974:	4626      	mov	r6, r4
    if (len++ >= buflen) {
  401976:	f101 0801 	add.w	r8, r1, #1
  40197a:	428a      	cmp	r2, r1
  40197c:	dd0b      	ble.n	401996 <ipaddr_ntoa_r+0xb2>
    *rp++ = '.';
  40197e:	1c74      	adds	r4, r6, #1
  401980:	f886 b000 	strb.w	fp, [r6]
  for(n = 0; n < 4; n++) {
  401984:	ab04      	add	r3, sp, #16
  401986:	459c      	cmp	ip, r3
  401988:	d1be      	bne.n	401908 <ipaddr_ntoa_r+0x24>
  *--rp = 0;
  40198a:	2300      	movs	r3, #0
  40198c:	7033      	strb	r3, [r6, #0]
  return buf;
  40198e:	9801      	ldr	r0, [sp, #4]
  401990:	e7ec      	b.n	40196c <ipaddr_ntoa_r+0x88>
        return NULL;
  401992:	2000      	movs	r0, #0
  401994:	e7ea      	b.n	40196c <ipaddr_ntoa_r+0x88>
      return NULL;
  401996:	2000      	movs	r0, #0
  401998:	e7e8      	b.n	40196c <ipaddr_ntoa_r+0x88>
  40199a:	bf00      	nop
  40199c:	cccccccd 	.word	0xcccccccd

004019a0 <ipaddr_ntoa>:
{
  4019a0:	b508      	push	{r3, lr}
  return ipaddr_ntoa_r(addr, str, 16);
  4019a2:	2210      	movs	r2, #16
  4019a4:	4901      	ldr	r1, [pc, #4]	; (4019ac <ipaddr_ntoa+0xc>)
  4019a6:	4b02      	ldr	r3, [pc, #8]	; (4019b0 <ipaddr_ntoa+0x10>)
  4019a8:	4798      	blx	r3
}
  4019aa:	bd08      	pop	{r3, pc}
  4019ac:	20400aac 	.word	0x20400aac
  4019b0:	004018e5 	.word	0x004018e5

004019b4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  4019b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4019b8:	4681      	mov	r9, r0
  4019ba:	468a      	mov	sl, r1
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
  }

  snmp_inc_ipreasmfails();
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
  4019bc:	6845      	ldr	r5, [r0, #4]
  4019be:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
  4019c0:	889a      	ldrh	r2, [r3, #4]
  4019c2:	b322      	cbz	r2, 401a0e <ip_reass_free_complete_datagram+0x5a>
  u16_t pbufs_freed = 0;
  4019c4:	2400      	movs	r4, #0
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released 
     separately as they have not yet been chained */
  p = ipr->p;
  4019c6:	f8d9 6004 	ldr.w	r6, [r9, #4]
  while (p != NULL) {
  4019ca:	b16e      	cbz	r6, 4019e8 <ip_reass_free_complete_datagram+0x34>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
    pcur = p;
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
    clen = pbuf_clen(pcur);
  4019cc:	f8df 8094 	ldr.w	r8, [pc, #148]	; 401a64 <ip_reass_free_complete_datagram+0xb0>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
    pbuf_free(pcur);
  4019d0:	4f1f      	ldr	r7, [pc, #124]	; (401a50 <ip_reass_free_complete_datagram+0x9c>)
    iprh = (struct ip_reass_helper *)p->payload;
  4019d2:	6873      	ldr	r3, [r6, #4]
    p = iprh->next_pbuf;
  4019d4:	681d      	ldr	r5, [r3, #0]
    clen = pbuf_clen(pcur);
  4019d6:	4630      	mov	r0, r6
  4019d8:	47c0      	blx	r8
    pbufs_freed += clen;
  4019da:	4404      	add	r4, r0
  4019dc:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
  4019de:	4630      	mov	r0, r6
  4019e0:	47b8      	blx	r7
    p = iprh->next_pbuf;
  4019e2:	462e      	mov	r6, r5
  while (p != NULL) {
  4019e4:	2d00      	cmp	r5, #0
  4019e6:	d1f4      	bne.n	4019d2 <ip_reass_free_complete_datagram+0x1e>
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
  4019e8:	4b1a      	ldr	r3, [pc, #104]	; (401a54 <ip_reass_free_complete_datagram+0xa0>)
  4019ea:	681b      	ldr	r3, [r3, #0]
  4019ec:	4599      	cmp	r9, r3
  4019ee:	d029      	beq.n	401a44 <ip_reass_free_complete_datagram+0x90>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  4019f0:	f8d9 3000 	ldr.w	r3, [r9]
  4019f4:	f8ca 3000 	str.w	r3, [sl]
  }

  /* now we can free the ip_reass struct */
  memp_free(MEMP_REASSDATA, ipr);
  4019f8:	4649      	mov	r1, r9
  4019fa:	2004      	movs	r0, #4
  4019fc:	4b16      	ldr	r3, [pc, #88]	; (401a58 <ip_reass_free_complete_datagram+0xa4>)
  4019fe:	4798      	blx	r3
  ip_reass_pbufcount -= pbufs_freed;
  401a00:	4a16      	ldr	r2, [pc, #88]	; (401a5c <ip_reass_free_complete_datagram+0xa8>)
  401a02:	8813      	ldrh	r3, [r2, #0]
  401a04:	1b1b      	subs	r3, r3, r4
  401a06:	8013      	strh	r3, [r2, #0]
}
  401a08:	4620      	mov	r0, r4
  401a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ipr->p = iprh->next_pbuf;
  401a0e:	681b      	ldr	r3, [r3, #0]
  401a10:	6043      	str	r3, [r0, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
  401a12:	686a      	ldr	r2, [r5, #4]
  401a14:	4603      	mov	r3, r0
  401a16:	f853 1f08 	ldr.w	r1, [r3, #8]!
  401a1a:	685e      	ldr	r6, [r3, #4]
  401a1c:	689c      	ldr	r4, [r3, #8]
  401a1e:	68d8      	ldr	r0, [r3, #12]
  401a20:	6011      	str	r1, [r2, #0]
  401a22:	6056      	str	r6, [r2, #4]
  401a24:	6094      	str	r4, [r2, #8]
  401a26:	60d0      	str	r0, [r2, #12]
  401a28:	6919      	ldr	r1, [r3, #16]
  401a2a:	6111      	str	r1, [r2, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
  401a2c:	2101      	movs	r1, #1
  401a2e:	4628      	mov	r0, r5
  401a30:	4b0b      	ldr	r3, [pc, #44]	; (401a60 <ip_reass_free_complete_datagram+0xac>)
  401a32:	4798      	blx	r3
    clen = pbuf_clen(p);
  401a34:	4628      	mov	r0, r5
  401a36:	4b0b      	ldr	r3, [pc, #44]	; (401a64 <ip_reass_free_complete_datagram+0xb0>)
  401a38:	4798      	blx	r3
    pbufs_freed += clen;
  401a3a:	b284      	uxth	r4, r0
    pbuf_free(p);
  401a3c:	4628      	mov	r0, r5
  401a3e:	4b04      	ldr	r3, [pc, #16]	; (401a50 <ip_reass_free_complete_datagram+0x9c>)
  401a40:	4798      	blx	r3
  401a42:	e7c0      	b.n	4019c6 <ip_reass_free_complete_datagram+0x12>
    reassdatagrams = ipr->next;
  401a44:	f8d9 2000 	ldr.w	r2, [r9]
  401a48:	4b02      	ldr	r3, [pc, #8]	; (401a54 <ip_reass_free_complete_datagram+0xa0>)
  401a4a:	601a      	str	r2, [r3, #0]
  401a4c:	e7d4      	b.n	4019f8 <ip_reass_free_complete_datagram+0x44>
  401a4e:	bf00      	nop
  401a50:	0040262d 	.word	0x0040262d
  401a54:	20400ac0 	.word	0x20400ac0
  401a58:	00402475 	.word	0x00402475
  401a5c:	20400abc 	.word	0x20400abc
  401a60:	004013e1 	.word	0x004013e1
  401a64:	0040282d 	.word	0x0040282d

00401a68 <ip_reass_remove_oldest_datagram>:
{
  401a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401a6c:	4605      	mov	r5, r0
  401a6e:	4688      	mov	r8, r1
  int pbufs_freed = 0, pbufs_freed_current;
  401a70:	2600      	movs	r6, #0
    r = reassdatagrams;
  401a72:	4f19      	ldr	r7, [pc, #100]	; (401ad8 <ip_reass_remove_oldest_datagram+0x70>)
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, prev);
  401a74:	f8df 9064 	ldr.w	r9, [pc, #100]	; 401adc <ip_reass_remove_oldest_datagram+0x74>
  401a78:	e022      	b.n	401ac0 <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
  401a7a:	3401      	adds	r4, #1
        if (oldest == NULL) {
  401a7c:	b1b8      	cbz	r0, 401aae <ip_reass_remove_oldest_datagram+0x46>
        } else if (r->timer <= oldest->timer) {
  401a7e:	f893 c01f 	ldrb.w	ip, [r3, #31]
  401a82:	7fc2      	ldrb	r2, [r0, #31]
  401a84:	4594      	cmp	ip, r2
  401a86:	bf98      	it	ls
  401a88:	4618      	movls	r0, r3
      if (r->next != NULL) {
  401a8a:	681a      	ldr	r2, [r3, #0]
  401a8c:	b18a      	cbz	r2, 401ab2 <ip_reass_remove_oldest_datagram+0x4a>
  401a8e:	4619      	mov	r1, r3
  401a90:	4613      	mov	r3, r2
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
  401a92:	695a      	ldr	r2, [r3, #20]
  401a94:	4572      	cmp	r2, lr
  401a96:	d1f0      	bne.n	401a7a <ip_reass_remove_oldest_datagram+0x12>
  401a98:	f8d5 c010 	ldr.w	ip, [r5, #16]
  401a9c:	699a      	ldr	r2, [r3, #24]
  401a9e:	4562      	cmp	r2, ip
  401aa0:	d1eb      	bne.n	401a7a <ip_reass_remove_oldest_datagram+0x12>
  401aa2:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
  401aa6:	88aa      	ldrh	r2, [r5, #4]
  401aa8:	4594      	cmp	ip, r2
  401aaa:	d1e6      	bne.n	401a7a <ip_reass_remove_oldest_datagram+0x12>
  401aac:	e7ed      	b.n	401a8a <ip_reass_remove_oldest_datagram+0x22>
  401aae:	4618      	mov	r0, r3
  401ab0:	e7eb      	b.n	401a8a <ip_reass_remove_oldest_datagram+0x22>
    if (oldest != NULL) {
  401ab2:	b108      	cbz	r0, 401ab8 <ip_reass_remove_oldest_datagram+0x50>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, prev);
  401ab4:	47c8      	blx	r9
      pbufs_freed += pbufs_freed_current;
  401ab6:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
  401ab8:	4546      	cmp	r6, r8
  401aba:	da09      	bge.n	401ad0 <ip_reass_remove_oldest_datagram+0x68>
  401abc:	2c01      	cmp	r4, #1
  401abe:	dd07      	ble.n	401ad0 <ip_reass_remove_oldest_datagram+0x68>
    r = reassdatagrams;
  401ac0:	683b      	ldr	r3, [r7, #0]
    while (r != NULL) {
  401ac2:	b12b      	cbz	r3, 401ad0 <ip_reass_remove_oldest_datagram+0x68>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
  401ac4:	f8d5 e00c 	ldr.w	lr, [r5, #12]
  401ac8:	2400      	movs	r4, #0
  401aca:	4621      	mov	r1, r4
  401acc:	4620      	mov	r0, r4
  401ace:	e7e0      	b.n	401a92 <ip_reass_remove_oldest_datagram+0x2a>
}
  401ad0:	4630      	mov	r0, r6
  401ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401ad6:	bf00      	nop
  401ad8:	20400ac0 	.word	0x20400ac0
  401adc:	004019b5 	.word	0x004019b5

00401ae0 <ip_reass_tmr>:
  r = reassdatagrams;
  401ae0:	4b0a      	ldr	r3, [pc, #40]	; (401b0c <ip_reass_tmr+0x2c>)
  401ae2:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
  401ae4:	b188      	cbz	r0, 401b0a <ip_reass_tmr+0x2a>
{
  401ae6:	b570      	push	{r4, r5, r6, lr}
  while (r != NULL) {
  401ae8:	2400      	movs	r4, #0
      ip_reass_free_complete_datagram(tmp, prev);
  401aea:	4e09      	ldr	r6, [pc, #36]	; (401b10 <ip_reass_tmr+0x30>)
  401aec:	e004      	b.n	401af8 <ip_reass_tmr+0x18>
      r = r->next;
  401aee:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
  401af0:	4621      	mov	r1, r4
  401af2:	47b0      	blx	r6
      r = r->next;
  401af4:	4628      	mov	r0, r5
  while (r != NULL) {
  401af6:	b138      	cbz	r0, 401b08 <ip_reass_tmr+0x28>
    if (r->timer > 0) {
  401af8:	7fc3      	ldrb	r3, [r0, #31]
  401afa:	2b00      	cmp	r3, #0
  401afc:	d0f7      	beq.n	401aee <ip_reass_tmr+0xe>
      r->timer--;
  401afe:	3b01      	subs	r3, #1
  401b00:	77c3      	strb	r3, [r0, #31]
  401b02:	4604      	mov	r4, r0
      r = r->next;
  401b04:	6800      	ldr	r0, [r0, #0]
  401b06:	e7f6      	b.n	401af6 <ip_reass_tmr+0x16>
  401b08:	bd70      	pop	{r4, r5, r6, pc}
  401b0a:	4770      	bx	lr
  401b0c:	20400ac0 	.word	0x20400ac0
  401b10:	004019b5 	.word	0x004019b5

00401b14 <ip_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip_reass(struct pbuf *p)
{
  401b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b18:	b083      	sub	sp, #12
  401b1a:	4607      	mov	r7, r0
  struct ip_reassdata *ipr_prev = NULL;

  IPFRAG_STATS_INC(ip_frag.recv);
  snmp_inc_ipreasmreqds();

  fraghdr = (struct ip_hdr*)p->payload;
  401b1c:	6846      	ldr	r6, [r0, #4]

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
  401b1e:	7833      	ldrb	r3, [r6, #0]
  401b20:	f003 030f 	and.w	r3, r3, #15
  401b24:	2b05      	cmp	r3, #5
  401b26:	d122      	bne.n	401b6e <ip_reass+0x5a>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  401b28:	88f0      	ldrh	r0, [r6, #6]
  401b2a:	4ca0      	ldr	r4, [pc, #640]	; (401dac <ip_reass+0x298>)
  401b2c:	47a0      	blx	r4
  401b2e:	4683      	mov	fp, r0
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  401b30:	8870      	ldrh	r0, [r6, #2]
  401b32:	47a0      	blx	r4
  401b34:	9001      	str	r0, [sp, #4]
  401b36:	f896 a000 	ldrb.w	sl, [r6]

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
  401b3a:	4638      	mov	r0, r7
  401b3c:	4b9c      	ldr	r3, [pc, #624]	; (401db0 <ip_reass+0x29c>)
  401b3e:	4798      	blx	r3
  401b40:	4680      	mov	r8, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
  401b42:	4b9c      	ldr	r3, [pc, #624]	; (401db4 <ip_reass+0x2a0>)
  401b44:	881b      	ldrh	r3, [r3, #0]
  401b46:	4403      	add	r3, r0
  401b48:	2b0a      	cmp	r3, #10
  401b4a:	dc06      	bgt.n	401b5a <ip_reass+0x46>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  401b4c:	4b9a      	ldr	r3, [pc, #616]	; (401db8 <ip_reass+0x2a4>)
  401b4e:	681c      	ldr	r4, [r3, #0]
  401b50:	2c00      	cmp	r4, #0
  401b52:	d079      	beq.n	401c48 <ip_reass+0x134>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
  401b54:	68f2      	ldr	r2, [r6, #12]
  401b56:	2500      	movs	r5, #0
  401b58:	e014      	b.n	401b84 <ip_reass+0x70>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  401b5a:	4601      	mov	r1, r0
  401b5c:	4630      	mov	r0, r6
  401b5e:	4b97      	ldr	r3, [pc, #604]	; (401dbc <ip_reass+0x2a8>)
  401b60:	4798      	blx	r3
  401b62:	b120      	cbz	r0, 401b6e <ip_reass+0x5a>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
  401b64:	4b93      	ldr	r3, [pc, #588]	; (401db4 <ip_reass+0x2a0>)
  401b66:	881b      	ldrh	r3, [r3, #0]
  401b68:	4443      	add	r3, r8
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  401b6a:	2b0a      	cmp	r3, #10
  401b6c:	ddee      	ble.n	401b4c <ip_reass+0x38>
  return NULL;

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
  401b6e:	4638      	mov	r0, r7
  401b70:	4b93      	ldr	r3, [pc, #588]	; (401dc0 <ip_reass+0x2ac>)
  401b72:	4798      	blx	r3
  return NULL;
  401b74:	f04f 0800 	mov.w	r8, #0
  401b78:	e101      	b.n	401d7e <ip_reass+0x26a>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  401b7a:	6823      	ldr	r3, [r4, #0]
  401b7c:	4625      	mov	r5, r4
  401b7e:	2b00      	cmp	r3, #0
  401b80:	d062      	beq.n	401c48 <ip_reass+0x134>
  401b82:	461c      	mov	r4, r3
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
  401b84:	6963      	ldr	r3, [r4, #20]
  401b86:	4293      	cmp	r3, r2
  401b88:	d1f7      	bne.n	401b7a <ip_reass+0x66>
  401b8a:	6933      	ldr	r3, [r6, #16]
  401b8c:	69a1      	ldr	r1, [r4, #24]
  401b8e:	4299      	cmp	r1, r3
  401b90:	d1f3      	bne.n	401b7a <ip_reass+0x66>
  401b92:	89a1      	ldrh	r1, [r4, #12]
  401b94:	88b3      	ldrh	r3, [r6, #4]
  401b96:	4299      	cmp	r1, r3
  401b98:	d1ef      	bne.n	401b7a <ip_reass+0x66>
  if (ipr == NULL) {
  401b9a:	2c00      	cmp	r4, #0
  401b9c:	d053      	beq.n	401c46 <ip_reass+0x132>
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
  401b9e:	88f0      	ldrh	r0, [r6, #6]
  401ba0:	4b82      	ldr	r3, [pc, #520]	; (401dac <ip_reass+0x298>)
  401ba2:	4798      	blx	r3
  401ba4:	f3c0 000c 	ubfx	r0, r0, #0, #13
  401ba8:	2800      	cmp	r0, #0
  401baa:	f000 8084 	beq.w	401cb6 <ip_reass+0x1a2>
  ip_reass_pbufcount += clen;
  401bae:	4b81      	ldr	r3, [pc, #516]	; (401db4 <ip_reass+0x2a0>)
  401bb0:	881a      	ldrh	r2, [r3, #0]
  401bb2:	4490      	add	r8, r2
  401bb4:	f8a3 8000 	strh.w	r8, [r3]
  if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
  401bb8:	88f3      	ldrh	r3, [r6, #6]
  401bba:	f013 0f20 	tst.w	r3, #32
  401bbe:	d10c      	bne.n	401bda <ip_reass+0xc6>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
  401bc0:	7fa3      	ldrb	r3, [r4, #30]
  401bc2:	f043 0301 	orr.w	r3, r3, #1
  401bc6:	77a3      	strb	r3, [r4, #30]
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  401bc8:	f00a 0a0f 	and.w	sl, sl, #15
  401bcc:	9b01      	ldr	r3, [sp, #4]
  401bce:	eba3 098a 	sub.w	r9, r3, sl, lsl #2
    ipr->datagram_len = offset + len;
  401bd2:	eb09 0bcb 	add.w	fp, r9, fp, lsl #3
  401bd6:	f8a4 b01c 	strh.w	fp, [r4, #28]
  fraghdr = (struct ip_hdr*)new_p->payload; 
  401bda:	687e      	ldr	r6, [r7, #4]
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  401bdc:	8870      	ldrh	r0, [r6, #2]
  401bde:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 401dac <ip_reass+0x298>
  401be2:	47c8      	blx	r9
  401be4:	f896 8000 	ldrb.w	r8, [r6]
  401be8:	f008 080f 	and.w	r8, r8, #15
  401bec:	eba0 0888 	sub.w	r8, r0, r8, lsl #2
  401bf0:	fa1f f888 	uxth.w	r8, r8
  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  401bf4:	88f0      	ldrh	r0, [r6, #6]
  401bf6:	47c8      	blx	r9
  401bf8:	f3c0 000c 	ubfx	r0, r0, #0, #13
  401bfc:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
  401bfe:	f8d7 c004 	ldr.w	ip, [r7, #4]
  iprh->next_pbuf = NULL;
  401c02:	2300      	movs	r3, #0
  401c04:	f88c 3000 	strb.w	r3, [ip]
  401c08:	f88c 3001 	strb.w	r3, [ip, #1]
  401c0c:	f88c 3002 	strb.w	r3, [ip, #2]
  401c10:	f88c 3003 	strb.w	r3, [ip, #3]
  iprh->start = offset;
  401c14:	f8ac 0004 	strh.w	r0, [ip, #4]
  iprh->end = offset + len;
  401c18:	4480      	add	r8, r0
  401c1a:	fa1f f888 	uxth.w	r8, r8
  401c1e:	f8ac 8006 	strh.w	r8, [ip, #6]
  for (q = ipr->p; q != NULL;) {
  401c22:	6862      	ldr	r2, [r4, #4]
  401c24:	2a00      	cmp	r2, #0
  401c26:	f000 809a 	beq.w	401d5e <ip_reass+0x24a>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
  401c2a:	6853      	ldr	r3, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
  401c2c:	8899      	ldrh	r1, [r3, #4]
  401c2e:	4288      	cmp	r0, r1
  401c30:	f0c0 80ad 	bcc.w	401d8e <ip_reass+0x27a>
    } else if(iprh->start == iprh_tmp->start) {
  401c34:	f000 8097 	beq.w	401d66 <ip_reass+0x252>
    } else if(iprh->start < iprh_tmp->end) {
  401c38:	88da      	ldrh	r2, [r3, #6]
  401c3a:	4282      	cmp	r2, r0
  401c3c:	f200 8093 	bhi.w	401d66 <ip_reass+0x252>
  401c40:	f04f 0e01 	mov.w	lr, #1
  401c44:	e078      	b.n	401d38 <ip_reass+0x224>
  401c46:	462c      	mov	r4, r5
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  401c48:	2004      	movs	r0, #4
  401c4a:	4b5e      	ldr	r3, [pc, #376]	; (401dc4 <ip_reass+0x2b0>)
  401c4c:	4798      	blx	r3
  if (ipr == NULL) {
  401c4e:	4681      	mov	r9, r0
  401c50:	b318      	cbz	r0, 401c9a <ip_reass+0x186>
  memset(ipr, 0, sizeof(struct ip_reassdata));
  401c52:	2220      	movs	r2, #32
  401c54:	2100      	movs	r1, #0
  401c56:	4648      	mov	r0, r9
  401c58:	4b5b      	ldr	r3, [pc, #364]	; (401dc8 <ip_reass+0x2b4>)
  401c5a:	4798      	blx	r3
  ipr->timer = IP_REASS_MAXAGE;
  401c5c:	2303      	movs	r3, #3
  401c5e:	f889 301f 	strb.w	r3, [r9, #31]
  ipr->next = reassdatagrams;
  401c62:	4b55      	ldr	r3, [pc, #340]	; (401db8 <ip_reass+0x2a4>)
  401c64:	681a      	ldr	r2, [r3, #0]
  401c66:	f8c9 2000 	str.w	r2, [r9]
  reassdatagrams = ipr;
  401c6a:	f8c3 9000 	str.w	r9, [r3]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
  401c6e:	6832      	ldr	r2, [r6, #0]
  401c70:	6875      	ldr	r5, [r6, #4]
  401c72:	68b0      	ldr	r0, [r6, #8]
  401c74:	68f1      	ldr	r1, [r6, #12]
  401c76:	f8c9 2008 	str.w	r2, [r9, #8]
  401c7a:	f8c9 500c 	str.w	r5, [r9, #12]
  401c7e:	f8c9 0010 	str.w	r0, [r9, #16]
  401c82:	f8c9 1014 	str.w	r1, [r9, #20]
  401c86:	6932      	ldr	r2, [r6, #16]
  401c88:	f8c9 2018 	str.w	r2, [r9, #24]
    if(ipr == NULL) {
  401c8c:	f1b9 0f00 	cmp.w	r9, #0
  401c90:	f43f af6d 	beq.w	401b6e <ip_reass+0x5a>
  401c94:	4625      	mov	r5, r4
  return ipr;
  401c96:	464c      	mov	r4, r9
  401c98:	e789      	b.n	401bae <ip_reass+0x9a>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
  401c9a:	4641      	mov	r1, r8
  401c9c:	4630      	mov	r0, r6
  401c9e:	4b47      	ldr	r3, [pc, #284]	; (401dbc <ip_reass+0x2a8>)
  401ca0:	4798      	blx	r3
  401ca2:	4580      	cmp	r8, r0
  401ca4:	f73f af63 	bgt.w	401b6e <ip_reass+0x5a>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  401ca8:	2004      	movs	r0, #4
  401caa:	4b46      	ldr	r3, [pc, #280]	; (401dc4 <ip_reass+0x2b0>)
  401cac:	4798      	blx	r3
    if (ipr == NULL)
  401cae:	4681      	mov	r9, r0
  401cb0:	2800      	cmp	r0, #0
  401cb2:	d1ce      	bne.n	401c52 <ip_reass+0x13e>
  401cb4:	e75b      	b.n	401b6e <ip_reass+0x5a>
      ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
  401cb6:	89e0      	ldrh	r0, [r4, #14]
  401cb8:	4b3c      	ldr	r3, [pc, #240]	; (401dac <ip_reass+0x298>)
  401cba:	4798      	blx	r3
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
  401cbc:	f3c0 000c 	ubfx	r0, r0, #0, #13
  401cc0:	2800      	cmp	r0, #0
  401cc2:	f43f af74 	beq.w	401bae <ip_reass+0x9a>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
  401cc6:	6832      	ldr	r2, [r6, #0]
  401cc8:	f8d6 e004 	ldr.w	lr, [r6, #4]
  401ccc:	68b0      	ldr	r0, [r6, #8]
  401cce:	68f1      	ldr	r1, [r6, #12]
  401cd0:	60a2      	str	r2, [r4, #8]
  401cd2:	f8c4 e00c 	str.w	lr, [r4, #12]
  401cd6:	6120      	str	r0, [r4, #16]
  401cd8:	6161      	str	r1, [r4, #20]
  401cda:	6932      	ldr	r2, [r6, #16]
  401cdc:	61a2      	str	r2, [r4, #24]
  401cde:	e766      	b.n	401bae <ip_reass+0x9a>
      iprh->next_pbuf = q;
  401ce0:	f8cc 6000 	str.w	r6, [ip]
      if (iprh_prev != NULL) {
  401ce4:	2b00      	cmp	r3, #0
  401ce6:	d056      	beq.n	401d96 <ip_reass+0x282>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
  401ce8:	88d9      	ldrh	r1, [r3, #6]
  401cea:	4281      	cmp	r1, r0
  401cec:	d83b      	bhi.n	401d66 <ip_reass+0x252>
  401cee:	8892      	ldrh	r2, [r2, #4]
  401cf0:	4542      	cmp	r2, r8
  401cf2:	d338      	bcc.n	401d66 <ip_reass+0x252>
        iprh_prev->next_pbuf = new_p;
  401cf4:	601f      	str	r7, [r3, #0]
  if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
  401cf6:	7fa3      	ldrb	r3, [r4, #30]
  401cf8:	f013 0f01 	tst.w	r3, #1
  401cfc:	d03d      	beq.n	401d7a <ip_reass+0x266>
    if (valid) {
  401cfe:	f1be 0f00 	cmp.w	lr, #0
  401d02:	d03a      	beq.n	401d7a <ip_reass+0x266>
      if (((struct ip_reass_helper*)ipr->p->payload)->start != 0) {
  401d04:	6860      	ldr	r0, [r4, #4]
  401d06:	6843      	ldr	r3, [r0, #4]
  401d08:	889b      	ldrh	r3, [r3, #4]
  401d0a:	2b00      	cmp	r3, #0
  401d0c:	d135      	bne.n	401d7a <ip_reass+0x266>
        q = iprh->next_pbuf;
  401d0e:	f8dc 3000 	ldr.w	r3, [ip]
        while (q != NULL) {
  401d12:	2b00      	cmp	r3, #0
  401d14:	d05a      	beq.n	401dcc <ip_reass+0x2b8>
          iprh = (struct ip_reass_helper*)q->payload;
  401d16:	685b      	ldr	r3, [r3, #4]
          if (iprh_prev->end != iprh->start) {
  401d18:	8899      	ldrh	r1, [r3, #4]
  401d1a:	f8bc 2006 	ldrh.w	r2, [ip, #6]
  401d1e:	4291      	cmp	r1, r2
  401d20:	d12b      	bne.n	401d7a <ip_reass+0x266>
          q = iprh->next_pbuf;
  401d22:	681a      	ldr	r2, [r3, #0]
        while (q != NULL) {
  401d24:	2a00      	cmp	r2, #0
  401d26:	d051      	beq.n	401dcc <ip_reass+0x2b8>
          iprh = (struct ip_reass_helper*)q->payload;
  401d28:	6852      	ldr	r2, [r2, #4]
          if (iprh_prev->end != iprh->start) {
  401d2a:	88d9      	ldrh	r1, [r3, #6]
  401d2c:	8893      	ldrh	r3, [r2, #4]
  401d2e:	4299      	cmp	r1, r3
  401d30:	d123      	bne.n	401d7a <ip_reass+0x266>
          iprh = (struct ip_reass_helper*)q->payload;
  401d32:	4613      	mov	r3, r2
  401d34:	e7f5      	b.n	401d22 <ip_reass+0x20e>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
  401d36:	4613      	mov	r3, r2
    q = iprh_tmp->next_pbuf;
  401d38:	681e      	ldr	r6, [r3, #0]
  for (q = ipr->p; q != NULL;) {
  401d3a:	b376      	cbz	r6, 401d9a <ip_reass+0x286>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
  401d3c:	6872      	ldr	r2, [r6, #4]
    if (iprh->start < iprh_tmp->start) {
  401d3e:	8891      	ldrh	r1, [r2, #4]
  401d40:	4288      	cmp	r0, r1
  401d42:	d3cd      	bcc.n	401ce0 <ip_reass+0x1cc>
    } else if(iprh->start == iprh_tmp->start) {
  401d44:	4288      	cmp	r0, r1
  401d46:	d00e      	beq.n	401d66 <ip_reass+0x252>
    } else if(iprh->start < iprh_tmp->end) {
  401d48:	88d6      	ldrh	r6, [r2, #6]
  401d4a:	4286      	cmp	r6, r0
  401d4c:	d80b      	bhi.n	401d66 <ip_reass+0x252>
      if (iprh_prev != NULL) {
  401d4e:	2b00      	cmp	r3, #0
  401d50:	d0f1      	beq.n	401d36 <ip_reass+0x222>
        if (iprh_prev->end != iprh_tmp->start) {
  401d52:	88db      	ldrh	r3, [r3, #6]
          valid = 0;
  401d54:	428b      	cmp	r3, r1
  401d56:	bf18      	it	ne
  401d58:	f04f 0e00 	movne.w	lr, #0
  401d5c:	e7eb      	b.n	401d36 <ip_reass+0x222>
  int valid = 1;
  401d5e:	f04f 0e01 	mov.w	lr, #1
      ipr->p = new_p;
  401d62:	6067      	str	r7, [r4, #4]
  401d64:	e7c7      	b.n	401cf6 <ip_reass+0x1e2>
  ip_reass_pbufcount -= pbuf_clen(new_p);
  401d66:	4638      	mov	r0, r7
  401d68:	4b11      	ldr	r3, [pc, #68]	; (401db0 <ip_reass+0x29c>)
  401d6a:	4798      	blx	r3
  401d6c:	4a11      	ldr	r2, [pc, #68]	; (401db4 <ip_reass+0x2a0>)
  401d6e:	8813      	ldrh	r3, [r2, #0]
  401d70:	1a18      	subs	r0, r3, r0
  401d72:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
  401d74:	4638      	mov	r0, r7
  401d76:	4b12      	ldr	r3, [pc, #72]	; (401dc0 <ip_reass+0x2ac>)
  401d78:	4798      	blx	r3
  return NULL;
  401d7a:	f04f 0800 	mov.w	r8, #0
}
  401d7e:	4640      	mov	r0, r8
  401d80:	b003      	add	sp, #12
  401d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    reassdatagrams = ipr->next;
  401d86:	6822      	ldr	r2, [r4, #0]
  401d88:	4b0b      	ldr	r3, [pc, #44]	; (401db8 <ip_reass+0x2a4>)
  401d8a:	601a      	str	r2, [r3, #0]
  401d8c:	e058      	b.n	401e40 <ip_reass+0x32c>
      iprh->next_pbuf = q;
  401d8e:	f8cc 2000 	str.w	r2, [ip]
  int valid = 1;
  401d92:	f04f 0e01 	mov.w	lr, #1
        ipr->p = new_p;
  401d96:	6067      	str	r7, [r4, #4]
  401d98:	e7ad      	b.n	401cf6 <ip_reass+0x1e2>
    if (iprh_prev != NULL) {
  401d9a:	2b00      	cmp	r3, #0
  401d9c:	d0e1      	beq.n	401d62 <ip_reass+0x24e>
      iprh_prev->next_pbuf = new_p;
  401d9e:	601f      	str	r7, [r3, #0]
      if (iprh_prev->end != iprh->start) {
  401da0:	88da      	ldrh	r2, [r3, #6]
  401da2:	f8bc 3004 	ldrh.w	r3, [ip, #4]
  401da6:	429a      	cmp	r2, r3
  401da8:	d1e7      	bne.n	401d7a <ip_reass+0x266>
  401daa:	e7a4      	b.n	401cf6 <ip_reass+0x1e2>
  401dac:	0040119f 	.word	0x0040119f
  401db0:	0040282d 	.word	0x0040282d
  401db4:	20400abc 	.word	0x20400abc
  401db8:	20400ac0 	.word	0x20400ac0
  401dbc:	00401a69 	.word	0x00401a69
  401dc0:	0040262d 	.word	0x0040262d
  401dc4:	00402455 	.word	0x00402455
  401dc8:	00407d25 	.word	0x00407d25
    ipr->datagram_len += IP_HLEN;
  401dcc:	8ba3      	ldrh	r3, [r4, #28]
  401dce:	3314      	adds	r3, #20
  401dd0:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
  401dd2:	6847      	ldr	r7, [r0, #4]
  401dd4:	683e      	ldr	r6, [r7, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
  401dd6:	4623      	mov	r3, r4
  401dd8:	f853 2f08 	ldr.w	r2, [r3, #8]!
  401ddc:	f8d3 e004 	ldr.w	lr, [r3, #4]
  401de0:	6898      	ldr	r0, [r3, #8]
  401de2:	68d9      	ldr	r1, [r3, #12]
  401de4:	603a      	str	r2, [r7, #0]
  401de6:	f8c7 e004 	str.w	lr, [r7, #4]
  401dea:	60b8      	str	r0, [r7, #8]
  401dec:	60f9      	str	r1, [r7, #12]
  401dee:	691a      	ldr	r2, [r3, #16]
  401df0:	613a      	str	r2, [r7, #16]
    IPH_LEN_SET(fraghdr, htons(ipr->datagram_len));
  401df2:	8ba0      	ldrh	r0, [r4, #28]
  401df4:	4b18      	ldr	r3, [pc, #96]	; (401e58 <ip_reass+0x344>)
  401df6:	4798      	blx	r3
  401df8:	8078      	strh	r0, [r7, #2]
    IPH_OFFSET_SET(fraghdr, 0);
  401dfa:	2300      	movs	r3, #0
  401dfc:	71bb      	strb	r3, [r7, #6]
  401dfe:	71fb      	strb	r3, [r7, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
  401e00:	72bb      	strb	r3, [r7, #10]
  401e02:	72fb      	strb	r3, [r7, #11]
    IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
  401e04:	2114      	movs	r1, #20
  401e06:	4638      	mov	r0, r7
  401e08:	4b14      	ldr	r3, [pc, #80]	; (401e5c <ip_reass+0x348>)
  401e0a:	4798      	blx	r3
  401e0c:	8178      	strh	r0, [r7, #10]
    p = ipr->p;
  401e0e:	f8d4 8004 	ldr.w	r8, [r4, #4]
    while(r != NULL) {
  401e12:	b17e      	cbz	r6, 401e34 <ip_reass+0x320>
      pbuf_header(r, -IP_HLEN);
  401e14:	f06f 0b13 	mvn.w	fp, #19
  401e18:	f8df a054 	ldr.w	sl, [pc, #84]	; 401e70 <ip_reass+0x35c>
      pbuf_cat(p, r);
  401e1c:	f8df 9054 	ldr.w	r9, [pc, #84]	; 401e74 <ip_reass+0x360>
      iprh = (struct ip_reass_helper*)r->payload;
  401e20:	6877      	ldr	r7, [r6, #4]
      pbuf_header(r, -IP_HLEN);
  401e22:	4659      	mov	r1, fp
  401e24:	4630      	mov	r0, r6
  401e26:	47d0      	blx	sl
      pbuf_cat(p, r);
  401e28:	4631      	mov	r1, r6
  401e2a:	4640      	mov	r0, r8
  401e2c:	47c8      	blx	r9
      r = iprh->next_pbuf;
  401e2e:	683e      	ldr	r6, [r7, #0]
    while(r != NULL) {
  401e30:	2e00      	cmp	r6, #0
  401e32:	d1f5      	bne.n	401e20 <ip_reass+0x30c>
  if (reassdatagrams == ipr) {
  401e34:	4b0a      	ldr	r3, [pc, #40]	; (401e60 <ip_reass+0x34c>)
  401e36:	681b      	ldr	r3, [r3, #0]
  401e38:	429c      	cmp	r4, r3
  401e3a:	d0a4      	beq.n	401d86 <ip_reass+0x272>
    prev->next = ipr->next;
  401e3c:	6823      	ldr	r3, [r4, #0]
  401e3e:	602b      	str	r3, [r5, #0]
  memp_free(MEMP_REASSDATA, ipr);
  401e40:	4621      	mov	r1, r4
  401e42:	2004      	movs	r0, #4
  401e44:	4b07      	ldr	r3, [pc, #28]	; (401e64 <ip_reass+0x350>)
  401e46:	4798      	blx	r3
    ip_reass_pbufcount -= pbuf_clen(p);
  401e48:	4640      	mov	r0, r8
  401e4a:	4b07      	ldr	r3, [pc, #28]	; (401e68 <ip_reass+0x354>)
  401e4c:	4798      	blx	r3
  401e4e:	4a07      	ldr	r2, [pc, #28]	; (401e6c <ip_reass+0x358>)
  401e50:	8813      	ldrh	r3, [r2, #0]
  401e52:	1a18      	subs	r0, r3, r0
  401e54:	8010      	strh	r0, [r2, #0]
    return p;
  401e56:	e792      	b.n	401d7e <ip_reass+0x26a>
  401e58:	00401195 	.word	0x00401195
  401e5c:	00401505 	.word	0x00401505
  401e60:	20400ac0 	.word	0x20400ac0
  401e64:	00402475 	.word	0x00402475
  401e68:	0040282d 	.word	0x0040282d
  401e6c:	20400abc 	.word	0x20400abc
  401e70:	004025bf 	.word	0x004025bf
  401e74:	0040284d 	.word	0x0040284d

00401e78 <ip_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t 
ip_frag(struct pbuf *p, struct netif *netif, ip_addr_t *dest)
{
  401e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401e7c:	b089      	sub	sp, #36	; 0x24
  401e7e:	4604      	mov	r4, r0
  401e80:	9003      	str	r0, [sp, #12]
  401e82:	9105      	str	r1, [sp, #20]
  401e84:	9206      	str	r2, [sp, #24]
  struct ip_hdr *original_iphdr;
#endif
  struct ip_hdr *iphdr;
  u16_t nfb;
  u16_t left, cop;
  u16_t mtu = netif->mtu;
  401e86:	8c8e      	ldrh	r6, [r1, #36]	; 0x24

  /* Copy the IP header in it */
  iphdr = (struct ip_hdr *)rambuf->payload;
  SMEMCPY(iphdr, p->payload, IP_HLEN);
#else /* IP_FRAG_USES_STATIC_BUF */
  original_iphdr = (struct ip_hdr *)p->payload;
  401e88:	f8d0 a004 	ldr.w	sl, [r0, #4]
  iphdr = original_iphdr;
#endif /* IP_FRAG_USES_STATIC_BUF */

  /* Save original offset */
  tmp = ntohs(IPH_OFFSET(iphdr));
  401e8c:	f8ba 0006 	ldrh.w	r0, [sl, #6]
  401e90:	4b3f      	ldr	r3, [pc, #252]	; (401f90 <ip_frag+0x118>)
  401e92:	4798      	blx	r3
  ofo = tmp & IP_OFFMASK;
  401e94:	f3c0 0b0c 	ubfx	fp, r0, #0, #13
  omf = tmp & IP_MF;
  401e98:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
  401e9c:	9302      	str	r3, [sp, #8]

  left = p->tot_len - IP_HLEN;
  401e9e:	8925      	ldrh	r5, [r4, #8]
  401ea0:	3d14      	subs	r5, #20
  401ea2:	b2ad      	uxth	r5, r5

  nfb = (mtu - IP_HLEN) / 8;
  401ea4:	f1a6 0314 	sub.w	r3, r6, #20
  401ea8:	9301      	str	r3, [sp, #4]
  401eaa:	2b00      	cmp	r3, #0
  401eac:	bfb8      	it	lt
  401eae:	3307      	addlt	r3, #7
  401eb0:	f3c3 03cf 	ubfx	r3, r3, #3, #16
  401eb4:	9304      	str	r3, [sp, #16]

  while (left) {
  401eb6:	2d00      	cmp	r5, #0
  401eb8:	d063      	beq.n	401f82 <ip_frag+0x10a>
    if (!last) {
      tmp = tmp | IP_MF;
    }

    /* Fill this fragment */
    cop = last ? left : nfb * 8;
  401eba:	00db      	lsls	r3, r3, #3
  401ebc:	b29b      	uxth	r3, r3
  401ebe:	9307      	str	r3, [sp, #28]
  401ec0:	f04f 0914 	mov.w	r9, #20
  401ec4:	e049      	b.n	401f5a <ip_frag+0xe2>
  401ec6:	462c      	mov	r4, r5

#if IP_FRAG_USES_STATIC_BUF
    poff += pbuf_copy_partial(p, (u8_t*)iphdr + IP_HLEN, cop, poff);
#else /* IP_FRAG_USES_STATIC_BUF */
#if LWIP_NETIF_TX_SINGLE_PBUF
    rambuf = pbuf_alloc(PBUF_IP, cop, PBUF_RAM);
  401ec8:	2200      	movs	r2, #0
  401eca:	4621      	mov	r1, r4
  401ecc:	2001      	movs	r0, #1
  401ece:	4b31      	ldr	r3, [pc, #196]	; (401f94 <ip_frag+0x11c>)
  401ed0:	4798      	blx	r3
    if (rambuf == NULL) {
  401ed2:	4606      	mov	r6, r0
  401ed4:	2800      	cmp	r0, #0
  401ed6:	d056      	beq.n	401f86 <ip_frag+0x10e>
      return ERR_MEM;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
      (rambuf->len == rambuf->tot_len) && (rambuf->next == NULL));
    poff += pbuf_copy_partial(p, rambuf->payload, cop, poff);
  401ed8:	464b      	mov	r3, r9
  401eda:	4622      	mov	r2, r4
  401edc:	6841      	ldr	r1, [r0, #4]
  401ede:	9803      	ldr	r0, [sp, #12]
  401ee0:	4f2d      	ldr	r7, [pc, #180]	; (401f98 <ip_frag+0x120>)
  401ee2:	47b8      	blx	r7
  401ee4:	4481      	add	r9, r0
  401ee6:	fa1f f989 	uxth.w	r9, r9
    /* make room for the IP header */
    if(pbuf_header(rambuf, IP_HLEN)) {
  401eea:	2114      	movs	r1, #20
  401eec:	4630      	mov	r0, r6
  401eee:	4b2b      	ldr	r3, [pc, #172]	; (401f9c <ip_frag+0x124>)
  401ef0:	4798      	blx	r3
  401ef2:	2800      	cmp	r0, #0
  401ef4:	d13d      	bne.n	401f72 <ip_frag+0xfa>
      pbuf_free(rambuf);
      return ERR_MEM;
    }
    /* fill in the IP header */
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
  401ef6:	6873      	ldr	r3, [r6, #4]
  401ef8:	f8da 2000 	ldr.w	r2, [sl]
  401efc:	f8da 7004 	ldr.w	r7, [sl, #4]
  401f00:	f8da 0008 	ldr.w	r0, [sl, #8]
  401f04:	f8da 100c 	ldr.w	r1, [sl, #12]
  401f08:	601a      	str	r2, [r3, #0]
  401f0a:	605f      	str	r7, [r3, #4]
  401f0c:	6098      	str	r0, [r3, #8]
  401f0e:	60d9      	str	r1, [r3, #12]
  401f10:	f8da 2010 	ldr.w	r2, [sl, #16]
  401f14:	611a      	str	r2, [r3, #16]
    iphdr = rambuf->payload;
  401f16:	6877      	ldr	r7, [r6, #4]
    poff = newpbuflen;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
#endif /* IP_FRAG_USES_STATIC_BUF */

    /* Correct header */
    IPH_OFFSET_SET(iphdr, htons(tmp));
  401f18:	4640      	mov	r0, r8
  401f1a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 401fa8 <ip_frag+0x130>
  401f1e:	47c0      	blx	r8
  401f20:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, htons(cop + IP_HLEN));
  401f22:	f104 0014 	add.w	r0, r4, #20
  401f26:	b280      	uxth	r0, r0
  401f28:	47c0      	blx	r8
  401f2a:	8078      	strh	r0, [r7, #2]
    IPH_CHKSUM_SET(iphdr, 0);
  401f2c:	2300      	movs	r3, #0
  401f2e:	72bb      	strb	r3, [r7, #10]
  401f30:	72fb      	strb	r3, [r7, #11]
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
  401f32:	2114      	movs	r1, #20
  401f34:	4638      	mov	r0, r7
  401f36:	4b1a      	ldr	r3, [pc, #104]	; (401fa0 <ip_frag+0x128>)
  401f38:	4798      	blx	r3
  401f3a:	8178      	strh	r0, [r7, #10]
    }
#else /* IP_FRAG_USES_STATIC_BUF */
    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
  401f3c:	9805      	ldr	r0, [sp, #20]
  401f3e:	6943      	ldr	r3, [r0, #20]
  401f40:	9a06      	ldr	r2, [sp, #24]
  401f42:	4631      	mov	r1, r6
  401f44:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */
    
    pbuf_free(rambuf);
  401f46:	4630      	mov	r0, r6
  401f48:	4b16      	ldr	r3, [pc, #88]	; (401fa4 <ip_frag+0x12c>)
  401f4a:	4798      	blx	r3
#endif /* IP_FRAG_USES_STATIC_BUF */
    left -= cop;
  401f4c:	1b2d      	subs	r5, r5, r4
  401f4e:	b2ad      	uxth	r5, r5
    ofo += nfb;
  401f50:	9b04      	ldr	r3, [sp, #16]
  401f52:	449b      	add	fp, r3
  401f54:	fa1f fb8b 	uxth.w	fp, fp
  while (left) {
  401f58:	b18d      	cbz	r5, 401f7e <ip_frag+0x106>
    tmp = omf | (IP_OFFMASK & (ofo));
  401f5a:	f3cb 080c 	ubfx	r8, fp, #0, #13
  401f5e:	9b02      	ldr	r3, [sp, #8]
  401f60:	ea43 0808 	orr.w	r8, r3, r8
    if (!last) {
  401f64:	9b01      	ldr	r3, [sp, #4]
  401f66:	42ab      	cmp	r3, r5
  401f68:	daad      	bge.n	401ec6 <ip_frag+0x4e>
      tmp = tmp | IP_MF;
  401f6a:	f448 5800 	orr.w	r8, r8, #8192	; 0x2000
    cop = last ? left : nfb * 8;
  401f6e:	9c07      	ldr	r4, [sp, #28]
  401f70:	e7aa      	b.n	401ec8 <ip_frag+0x50>
      pbuf_free(rambuf);
  401f72:	4630      	mov	r0, r6
  401f74:	4b0b      	ldr	r3, [pc, #44]	; (401fa4 <ip_frag+0x12c>)
  401f76:	4798      	blx	r3
      return ERR_MEM;
  401f78:	f04f 30ff 	mov.w	r0, #4294967295
  401f7c:	e005      	b.n	401f8a <ip_frag+0x112>
  }
#if IP_FRAG_USES_STATIC_BUF
  pbuf_free(rambuf);
#endif /* IP_FRAG_USES_STATIC_BUF */
  snmp_inc_ipfragoks();
  return ERR_OK;
  401f7e:	2000      	movs	r0, #0
  401f80:	e003      	b.n	401f8a <ip_frag+0x112>
  401f82:	2000      	movs	r0, #0
  401f84:	e001      	b.n	401f8a <ip_frag+0x112>
      return ERR_MEM;
  401f86:	f04f 30ff 	mov.w	r0, #4294967295
}
  401f8a:	b009      	add	sp, #36	; 0x24
  401f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401f90:	0040119f 	.word	0x0040119f
  401f94:	00402685 	.word	0x00402685
  401f98:	00402931 	.word	0x00402931
  401f9c:	004025bf 	.word	0x004025bf
  401fa0:	00401505 	.word	0x00401505
  401fa4:	0040262d 	.word	0x0040262d
  401fa8:	00401195 	.word	0x00401195

00401fac <lwip_init>:
/**
 * Perform Sanity check of user-configurable values, and initialize all modules.
 */
void
lwip_init(void)
{
  401fac:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
  401fae:	4b06      	ldr	r3, [pc, #24]	; (401fc8 <lwip_init+0x1c>)
  401fb0:	4798      	blx	r3
  memp_init();
  401fb2:	4b06      	ldr	r3, [pc, #24]	; (401fcc <lwip_init+0x20>)
  401fb4:	4798      	blx	r3
  pbuf_init();
  netif_init();
  401fb6:	4b06      	ldr	r3, [pc, #24]	; (401fd0 <lwip_init+0x24>)
  401fb8:	4798      	blx	r3
#endif /* LWIP_ARP */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
  401fba:	4b06      	ldr	r3, [pc, #24]	; (401fd4 <lwip_init+0x28>)
  401fbc:	4798      	blx	r3
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
  401fbe:	4b06      	ldr	r3, [pc, #24]	; (401fd8 <lwip_init+0x2c>)
  401fc0:	4798      	blx	r3
#if LWIP_DNS
  dns_init();
#endif /* LWIP_DNS */

#if LWIP_TIMERS
  sys_timeouts_init();
  401fc2:	4b06      	ldr	r3, [pc, #24]	; (401fdc <lwip_init+0x30>)
  401fc4:	4798      	blx	r3
  401fc6:	bd08      	pop	{r3, pc}
  401fc8:	00402159 	.word	0x00402159
  401fcc:	004023dd 	.word	0x004023dd
  401fd0:	0040248d 	.word	0x0040248d
  401fd4:	004055b5 	.word	0x004055b5
  401fd8:	00402a01 	.word	0x00402a01
  401fdc:	004020e1 	.word	0x004020e1

00401fe0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
  401fe0:	b570      	push	{r4, r5, r6, lr}
  401fe2:	4604      	mov	r4, r0
  401fe4:	460e      	mov	r6, r1
  401fe6:	4615      	mov	r5, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
  401fe8:	2005      	movs	r0, #5
  401fea:	4b1b      	ldr	r3, [pc, #108]	; (402058 <sys_timeout+0x78>)
  401fec:	4798      	blx	r3
  if (timeout == NULL) {
  401fee:	2800      	cmp	r0, #0
  401ff0:	d030      	beq.n	402054 <sys_timeout+0x74>
  401ff2:	4601      	mov	r1, r0
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }
  timeout->next = NULL;
  401ff4:	2300      	movs	r3, #0
  401ff6:	6003      	str	r3, [r0, #0]
  timeout->h = handler;
  401ff8:	6086      	str	r6, [r0, #8]
  timeout->arg = arg;
  401ffa:	60c5      	str	r5, [r0, #12]
  timeout->time = msecs;
  401ffc:	6044      	str	r4, [r0, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
  401ffe:	4b17      	ldr	r3, [pc, #92]	; (40205c <sys_timeout+0x7c>)
  402000:	681d      	ldr	r5, [r3, #0]
  402002:	b1a5      	cbz	r5, 40202e <sys_timeout+0x4e>
    next_timeout = timeout;
    return;
  }

  if (next_timeout->time > msecs) {
  402004:	6868      	ldr	r0, [r5, #4]
  402006:	4284      	cmp	r4, r0
  402008:	d313      	bcc.n	402032 <sys_timeout+0x52>
    next_timeout->time -= msecs;
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for(t = next_timeout; t != NULL; t = t->next) {
      timeout->time -= t->time;
  40200a:	1a20      	subs	r0, r4, r0
  40200c:	6048      	str	r0, [r1, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
  40200e:	682a      	ldr	r2, [r5, #0]
  402010:	b1f2      	cbz	r2, 402050 <sys_timeout+0x70>
  402012:	6853      	ldr	r3, [r2, #4]
  402014:	4298      	cmp	r0, r3
  402016:	d312      	bcc.n	40203e <sys_timeout+0x5e>
      timeout->time -= t->time;
  402018:	6848      	ldr	r0, [r1, #4]
  40201a:	6853      	ldr	r3, [r2, #4]
  40201c:	1ac0      	subs	r0, r0, r3
  40201e:	6048      	str	r0, [r1, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
  402020:	6813      	ldr	r3, [r2, #0]
  402022:	b18b      	cbz	r3, 402048 <sys_timeout+0x68>
  402024:	685c      	ldr	r4, [r3, #4]
  402026:	42a0      	cmp	r0, r4
  402028:	d30b      	bcc.n	402042 <sys_timeout+0x62>
  40202a:	461a      	mov	r2, r3
  40202c:	e7f4      	b.n	402018 <sys_timeout+0x38>
    next_timeout = timeout;
  40202e:	6018      	str	r0, [r3, #0]
    return;
  402030:	bd70      	pop	{r4, r5, r6, pc}
    next_timeout->time -= msecs;
  402032:	1b00      	subs	r0, r0, r4
  402034:	6068      	str	r0, [r5, #4]
    timeout->next = next_timeout;
  402036:	600d      	str	r5, [r1, #0]
    next_timeout = timeout;
  402038:	4b08      	ldr	r3, [pc, #32]	; (40205c <sys_timeout+0x7c>)
  40203a:	6019      	str	r1, [r3, #0]
  40203c:	bd70      	pop	{r4, r5, r6, pc}
      if (t->next == NULL || t->next->time > timeout->time) {
  40203e:	4613      	mov	r3, r2
  402040:	462a      	mov	r2, r5
        if (t->next != NULL) {
          t->next->time -= timeout->time;
  402042:	685c      	ldr	r4, [r3, #4]
  402044:	1a20      	subs	r0, r4, r0
  402046:	6058      	str	r0, [r3, #4]
        }
        timeout->next = t->next;
  402048:	6813      	ldr	r3, [r2, #0]
  40204a:	600b      	str	r3, [r1, #0]
        t->next = timeout;
  40204c:	6011      	str	r1, [r2, #0]
        break;
  40204e:	bd70      	pop	{r4, r5, r6, pc}
      if (t->next == NULL || t->next->time > timeout->time) {
  402050:	462a      	mov	r2, r5
  402052:	e7f9      	b.n	402048 <sys_timeout+0x68>
  402054:	bd70      	pop	{r4, r5, r6, pc}
  402056:	bf00      	nop
  402058:	00402455 	.word	0x00402455
  40205c:	20400ac4 	.word	0x20400ac4

00402060 <tcp_timer_needed>:
{
  402060:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
  402062:	4b0a      	ldr	r3, [pc, #40]	; (40208c <tcp_timer_needed+0x2c>)
  402064:	681b      	ldr	r3, [r3, #0]
  402066:	b953      	cbnz	r3, 40207e <tcp_timer_needed+0x1e>
  402068:	4b09      	ldr	r3, [pc, #36]	; (402090 <tcp_timer_needed+0x30>)
  40206a:	681b      	ldr	r3, [r3, #0]
  40206c:	b143      	cbz	r3, 402080 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
  40206e:	2201      	movs	r2, #1
  402070:	4b06      	ldr	r3, [pc, #24]	; (40208c <tcp_timer_needed+0x2c>)
  402072:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  402074:	2200      	movs	r2, #0
  402076:	4907      	ldr	r1, [pc, #28]	; (402094 <tcp_timer_needed+0x34>)
  402078:	20fa      	movs	r0, #250	; 0xfa
  40207a:	4b07      	ldr	r3, [pc, #28]	; (402098 <tcp_timer_needed+0x38>)
  40207c:	4798      	blx	r3
  40207e:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
  402080:	4b06      	ldr	r3, [pc, #24]	; (40209c <tcp_timer_needed+0x3c>)
  402082:	681b      	ldr	r3, [r3, #0]
  402084:	2b00      	cmp	r3, #0
  402086:	d1f2      	bne.n	40206e <tcp_timer_needed+0xe>
  402088:	e7f9      	b.n	40207e <tcp_timer_needed+0x1e>
  40208a:	bf00      	nop
  40208c:	20400ac8 	.word	0x20400ac8
  402090:	20404964 	.word	0x20404964
  402094:	004020a1 	.word	0x004020a1
  402098:	00401fe1 	.word	0x00401fe1
  40209c:	20404978 	.word	0x20404978

004020a0 <tcpip_tcp_timer>:
{
  4020a0:	b508      	push	{r3, lr}
  tcp_tmr();
  4020a2:	4b09      	ldr	r3, [pc, #36]	; (4020c8 <tcpip_tcp_timer+0x28>)
  4020a4:	4798      	blx	r3
  if (tcp_active_pcbs || tcp_tw_pcbs) {
  4020a6:	4b09      	ldr	r3, [pc, #36]	; (4020cc <tcpip_tcp_timer+0x2c>)
  4020a8:	681b      	ldr	r3, [r3, #0]
  4020aa:	b12b      	cbz	r3, 4020b8 <tcpip_tcp_timer+0x18>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  4020ac:	2200      	movs	r2, #0
  4020ae:	4908      	ldr	r1, [pc, #32]	; (4020d0 <tcpip_tcp_timer+0x30>)
  4020b0:	20fa      	movs	r0, #250	; 0xfa
  4020b2:	4b08      	ldr	r3, [pc, #32]	; (4020d4 <tcpip_tcp_timer+0x34>)
  4020b4:	4798      	blx	r3
  4020b6:	bd08      	pop	{r3, pc}
  if (tcp_active_pcbs || tcp_tw_pcbs) {
  4020b8:	4b07      	ldr	r3, [pc, #28]	; (4020d8 <tcpip_tcp_timer+0x38>)
  4020ba:	681b      	ldr	r3, [r3, #0]
  4020bc:	2b00      	cmp	r3, #0
  4020be:	d1f5      	bne.n	4020ac <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
  4020c0:	2200      	movs	r2, #0
  4020c2:	4b06      	ldr	r3, [pc, #24]	; (4020dc <tcpip_tcp_timer+0x3c>)
  4020c4:	601a      	str	r2, [r3, #0]
  4020c6:	bd08      	pop	{r3, pc}
  4020c8:	00403395 	.word	0x00403395
  4020cc:	20404964 	.word	0x20404964
  4020d0:	004020a1 	.word	0x004020a1
  4020d4:	00401fe1 	.word	0x00401fe1
  4020d8:	20404978 	.word	0x20404978
  4020dc:	20400ac8 	.word	0x20400ac8

004020e0 <sys_timeouts_init>:
{
  4020e0:	b510      	push	{r4, lr}
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
  4020e2:	2200      	movs	r2, #0
  4020e4:	4907      	ldr	r1, [pc, #28]	; (402104 <sys_timeouts_init+0x24>)
  4020e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  4020ea:	4c07      	ldr	r4, [pc, #28]	; (402108 <sys_timeouts_init+0x28>)
  4020ec:	47a0      	blx	r4
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
  4020ee:	2200      	movs	r2, #0
  4020f0:	4906      	ldr	r1, [pc, #24]	; (40210c <sys_timeouts_init+0x2c>)
  4020f2:	f241 3088 	movw	r0, #5000	; 0x1388
  4020f6:	47a0      	blx	r4
  timeouts_last_time = sys_now();
  4020f8:	4b05      	ldr	r3, [pc, #20]	; (402110 <sys_timeouts_init+0x30>)
  4020fa:	4798      	blx	r3
  4020fc:	4b05      	ldr	r3, [pc, #20]	; (402114 <sys_timeouts_init+0x34>)
  4020fe:	6018      	str	r0, [r3, #0]
  402100:	bd10      	pop	{r4, pc}
  402102:	bf00      	nop
  402104:	00402139 	.word	0x00402139
  402108:	00401fe1 	.word	0x00401fe1
  40210c:	00402119 	.word	0x00402119
  402110:	004067b9 	.word	0x004067b9
  402114:	20400acc 	.word	0x20400acc

00402118 <arp_timer>:
{
  402118:	b508      	push	{r3, lr}
  etharp_tmr();
  40211a:	4b04      	ldr	r3, [pc, #16]	; (40212c <arp_timer+0x14>)
  40211c:	4798      	blx	r3
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
  40211e:	2200      	movs	r2, #0
  402120:	4903      	ldr	r1, [pc, #12]	; (402130 <arp_timer+0x18>)
  402122:	f241 3088 	movw	r0, #5000	; 0x1388
  402126:	4b03      	ldr	r3, [pc, #12]	; (402134 <arp_timer+0x1c>)
  402128:	4798      	blx	r3
  40212a:	bd08      	pop	{r3, pc}
  40212c:	004058bd 	.word	0x004058bd
  402130:	00402119 	.word	0x00402119
  402134:	00401fe1 	.word	0x00401fe1

00402138 <ip_reass_timer>:
{
  402138:	b508      	push	{r3, lr}
  ip_reass_tmr();
  40213a:	4b04      	ldr	r3, [pc, #16]	; (40214c <ip_reass_timer+0x14>)
  40213c:	4798      	blx	r3
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
  40213e:	2200      	movs	r2, #0
  402140:	4903      	ldr	r1, [pc, #12]	; (402150 <ip_reass_timer+0x18>)
  402142:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  402146:	4b03      	ldr	r3, [pc, #12]	; (402154 <ip_reass_timer+0x1c>)
  402148:	4798      	blx	r3
  40214a:	bd08      	pop	{r3, pc}
  40214c:	00401ae1 	.word	0x00401ae1
  402150:	00402139 	.word	0x00402139
  402154:	00401fe1 	.word	0x00401fe1

00402158 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
  402158:	4b0a      	ldr	r3, [pc, #40]	; (402184 <mem_init+0x2c>)
  40215a:	f023 0303 	bic.w	r3, r3, #3
  40215e:	4a0a      	ldr	r2, [pc, #40]	; (402188 <mem_init+0x30>)
  402160:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  402162:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402166:	8019      	strh	r1, [r3, #0]
  mem->prev = 0;
  402168:	2200      	movs	r2, #0
  40216a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
  40216c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
  40216e:	185a      	adds	r2, r3, r1
  402170:	4806      	ldr	r0, [pc, #24]	; (40218c <mem_init+0x34>)
  402172:	6002      	str	r2, [r0, #0]
  ram_end->used = 1;
  402174:	2001      	movs	r0, #1
  402176:	7110      	strb	r0, [r2, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
  402178:	8011      	strh	r1, [r2, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
  40217a:	8051      	strh	r1, [r2, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
  40217c:	4a04      	ldr	r2, [pc, #16]	; (402190 <mem_init+0x38>)
  40217e:	6013      	str	r3, [r2, #0]
  402180:	4770      	bx	lr
  402182:	bf00      	nop
  402184:	20403943 	.word	0x20403943
  402188:	20400ad4 	.word	0x20400ad4
  40218c:	20400ad8 	.word	0x20400ad8
  402190:	20400ad0 	.word	0x20400ad0

00402194 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
  402194:	2800      	cmp	r0, #0
  402196:	d03b      	beq.n	402210 <mem_free+0x7c>
  402198:	4603      	mov	r3, r0
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
  40219a:	4a21      	ldr	r2, [pc, #132]	; (402220 <mem_free+0x8c>)
  40219c:	6812      	ldr	r2, [r2, #0]
  40219e:	4290      	cmp	r0, r2
  4021a0:	d336      	bcc.n	402210 <mem_free+0x7c>
  4021a2:	4920      	ldr	r1, [pc, #128]	; (402224 <mem_free+0x90>)
  4021a4:	6808      	ldr	r0, [r1, #0]
  4021a6:	4283      	cmp	r3, r0
  4021a8:	d232      	bcs.n	402210 <mem_free+0x7c>
{
  4021aa:	b470      	push	{r4, r5, r6}
    return;
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  4021ac:	f1a3 0108 	sub.w	r1, r3, #8
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
  /* ... and is now unused. */
  mem->used = 0;
  4021b0:	2400      	movs	r4, #0
  4021b2:	f803 4c04 	strb.w	r4, [r3, #-4]

  if (mem < lfree) {
  4021b6:	4c1c      	ldr	r4, [pc, #112]	; (402228 <mem_free+0x94>)
  4021b8:	6824      	ldr	r4, [r4, #0]
  4021ba:	42a1      	cmp	r1, r4
  4021bc:	d201      	bcs.n	4021c2 <mem_free+0x2e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
  4021be:	4c1a      	ldr	r4, [pc, #104]	; (402228 <mem_free+0x94>)
  4021c0:	6021      	str	r1, [r4, #0]
  nmem = (struct mem *)(void *)&ram[mem->next];
  4021c2:	f833 5c08 	ldrh.w	r5, [r3, #-8]
  4021c6:	1954      	adds	r4, r2, r5
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
  4021c8:	42a1      	cmp	r1, r4
  4021ca:	d00e      	beq.n	4021ea <mem_free+0x56>
  4021cc:	7926      	ldrb	r6, [r4, #4]
  4021ce:	b966      	cbnz	r6, 4021ea <mem_free+0x56>
  4021d0:	42a0      	cmp	r0, r4
  4021d2:	d00a      	beq.n	4021ea <mem_free+0x56>
    if (lfree == nmem) {
  4021d4:	4814      	ldr	r0, [pc, #80]	; (402228 <mem_free+0x94>)
  4021d6:	6800      	ldr	r0, [r0, #0]
  4021d8:	4284      	cmp	r4, r0
  4021da:	d01a      	beq.n	402212 <mem_free+0x7e>
    mem->next = nmem->next;
  4021dc:	5b50      	ldrh	r0, [r2, r5]
  4021de:	f823 0c08 	strh.w	r0, [r3, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
  4021e2:	5b50      	ldrh	r0, [r2, r5]
  4021e4:	4410      	add	r0, r2
  4021e6:	1a8c      	subs	r4, r1, r2
  4021e8:	8044      	strh	r4, [r0, #2]
  pmem = (struct mem *)(void *)&ram[mem->prev];
  4021ea:	f833 0c06 	ldrh.w	r0, [r3, #-6]
  4021ee:	1814      	adds	r4, r2, r0
  if (pmem != mem && pmem->used == 0) {
  4021f0:	42a1      	cmp	r1, r4
  4021f2:	d00c      	beq.n	40220e <mem_free+0x7a>
  4021f4:	7925      	ldrb	r5, [r4, #4]
  4021f6:	b955      	cbnz	r5, 40220e <mem_free+0x7a>
    if (lfree == mem) {
  4021f8:	4d0b      	ldr	r5, [pc, #44]	; (402228 <mem_free+0x94>)
  4021fa:	682d      	ldr	r5, [r5, #0]
  4021fc:	42a9      	cmp	r1, r5
  4021fe:	d00b      	beq.n	402218 <mem_free+0x84>
    pmem->next = mem->next;
  402200:	f833 1c08 	ldrh.w	r1, [r3, #-8]
  402204:	5211      	strh	r1, [r2, r0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
  402206:	f833 3c08 	ldrh.w	r3, [r3, #-8]
  40220a:	441a      	add	r2, r3
  40220c:	8050      	strh	r0, [r2, #2]
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
  40220e:	bc70      	pop	{r4, r5, r6}
  402210:	4770      	bx	lr
      lfree = mem;
  402212:	4805      	ldr	r0, [pc, #20]	; (402228 <mem_free+0x94>)
  402214:	6001      	str	r1, [r0, #0]
  402216:	e7e1      	b.n	4021dc <mem_free+0x48>
      lfree = pmem;
  402218:	4903      	ldr	r1, [pc, #12]	; (402228 <mem_free+0x94>)
  40221a:	600c      	str	r4, [r1, #0]
  40221c:	e7f0      	b.n	402200 <mem_free+0x6c>
  40221e:	bf00      	nop
  402220:	20400ad4 	.word	0x20400ad4
  402224:	20400ad8 	.word	0x20400ad8
  402228:	20400ad0 	.word	0x20400ad0

0040222c <mem_trim>:
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
  40222c:	3103      	adds	r1, #3
  40222e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  402232:	400b      	ands	r3, r1
  402234:	2b0c      	cmp	r3, #12
  402236:	bf38      	it	cc
  402238:	230c      	movcc	r3, #12
  if(newsize < MIN_SIZE_ALIGNED) {
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
  40223a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  40223e:	d852      	bhi.n	4022e6 <mem_trim+0xba>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
  402240:	4a2b      	ldr	r2, [pc, #172]	; (4022f0 <mem_trim+0xc4>)
  402242:	6812      	ldr	r2, [r2, #0]
  402244:	4282      	cmp	r2, r0
  402246:	d82b      	bhi.n	4022a0 <mem_trim+0x74>
  402248:	492a      	ldr	r1, [pc, #168]	; (4022f4 <mem_trim+0xc8>)
  40224a:	6809      	ldr	r1, [r1, #0]
  40224c:	4288      	cmp	r0, r1
  40224e:	d227      	bcs.n	4022a0 <mem_trim+0x74>
{
  402250:	b4f0      	push	{r4, r5, r6, r7}
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  402252:	f1a0 0408 	sub.w	r4, r0, #8
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
  402256:	1aa4      	subs	r4, r4, r2
  402258:	b2a4      	uxth	r4, r4

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
  40225a:	f830 5c08 	ldrh.w	r5, [r0, #-8]
  40225e:	f1a5 0108 	sub.w	r1, r5, #8
  402262:	1b09      	subs	r1, r1, r4
  402264:	b289      	uxth	r1, r1
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
  if (newsize > size) {
  402266:	4299      	cmp	r1, r3
  402268:	d33f      	bcc.n	4022ea <mem_trim+0xbe>
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
  40226a:	d018      	beq.n	40229e <mem_trim+0x72>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
  40226c:	1956      	adds	r6, r2, r5
  if(mem2->used == 0) {
  40226e:	7937      	ldrb	r7, [r6, #4]
  402270:	b9df      	cbnz	r7, 4022aa <mem_trim+0x7e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
  402272:	5b55      	ldrh	r5, [r2, r5]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
  402274:	f104 0108 	add.w	r1, r4, #8
  402278:	440b      	add	r3, r1
  40227a:	b29b      	uxth	r3, r3
    if (lfree == mem2) {
  40227c:	491e      	ldr	r1, [pc, #120]	; (4022f8 <mem_trim+0xcc>)
  40227e:	6809      	ldr	r1, [r1, #0]
  402280:	428e      	cmp	r6, r1
  402282:	d00e      	beq.n	4022a2 <mem_trim+0x76>
      lfree = (struct mem *)(void *)&ram[ptr2];
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
  402284:	18d1      	adds	r1, r2, r3
    mem2->used = 0;
  402286:	2600      	movs	r6, #0
  402288:	710e      	strb	r6, [r1, #4]
    /* restore the next pointer */
    mem2->next = next;
  40228a:	52d5      	strh	r5, [r2, r3]
    /* link it back to mem */
    mem2->prev = ptr;
  40228c:	804c      	strh	r4, [r1, #2]
    /* link mem to it */
    mem->next = ptr2;
  40228e:	f820 3c08 	strh.w	r3, [r0, #-8]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
  402292:	5ad1      	ldrh	r1, [r2, r3]
  402294:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
  402298:	d001      	beq.n	40229e <mem_trim+0x72>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
  40229a:	440a      	add	r2, r1
  40229c:	8053      	strh	r3, [r2, #2]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
  40229e:	bcf0      	pop	{r4, r5, r6, r7}
  4022a0:	4770      	bx	lr
      lfree = (struct mem *)(void *)&ram[ptr2];
  4022a2:	18d1      	adds	r1, r2, r3
  4022a4:	4e14      	ldr	r6, [pc, #80]	; (4022f8 <mem_trim+0xcc>)
  4022a6:	6031      	str	r1, [r6, #0]
  4022a8:	e7ec      	b.n	402284 <mem_trim+0x58>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
  4022aa:	f103 0514 	add.w	r5, r3, #20
  4022ae:	428d      	cmp	r5, r1
  4022b0:	d8f5      	bhi.n	40229e <mem_trim+0x72>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
  4022b2:	f104 0108 	add.w	r1, r4, #8
  4022b6:	440b      	add	r3, r1
  4022b8:	b29b      	uxth	r3, r3
    mem2 = (struct mem *)(void *)&ram[ptr2];
  4022ba:	18d1      	adds	r1, r2, r3
    if (mem2 < lfree) {
  4022bc:	4d0e      	ldr	r5, [pc, #56]	; (4022f8 <mem_trim+0xcc>)
  4022be:	682d      	ldr	r5, [r5, #0]
  4022c0:	42a9      	cmp	r1, r5
  4022c2:	d201      	bcs.n	4022c8 <mem_trim+0x9c>
      lfree = mem2;
  4022c4:	4d0c      	ldr	r5, [pc, #48]	; (4022f8 <mem_trim+0xcc>)
  4022c6:	6029      	str	r1, [r5, #0]
    mem2->used = 0;
  4022c8:	2500      	movs	r5, #0
  4022ca:	710d      	strb	r5, [r1, #4]
    mem2->next = mem->next;
  4022cc:	f830 5c08 	ldrh.w	r5, [r0, #-8]
  4022d0:	52d5      	strh	r5, [r2, r3]
    mem2->prev = ptr;
  4022d2:	804c      	strh	r4, [r1, #2]
    mem->next = ptr2;
  4022d4:	f820 3c08 	strh.w	r3, [r0, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
  4022d8:	5ad1      	ldrh	r1, [r2, r3]
  4022da:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
  4022de:	d0de      	beq.n	40229e <mem_trim+0x72>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
  4022e0:	440a      	add	r2, r1
  4022e2:	8053      	strh	r3, [r2, #2]
  4022e4:	e7db      	b.n	40229e <mem_trim+0x72>
    return NULL;
  4022e6:	2000      	movs	r0, #0
  4022e8:	4770      	bx	lr
    return NULL;
  4022ea:	2000      	movs	r0, #0
  4022ec:	e7d7      	b.n	40229e <mem_trim+0x72>
  4022ee:	bf00      	nop
  4022f0:	20400ad4 	.word	0x20400ad4
  4022f4:	20400ad8 	.word	0x20400ad8
  4022f8:	20400ad0 	.word	0x20400ad0

004022fc <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
  4022fc:	2800      	cmp	r0, #0
  4022fe:	d061      	beq.n	4023c4 <mem_malloc+0xc8>
{
  402300:	b5f0      	push	{r4, r5, r6, r7, lr}
  402302:	4603      	mov	r3, r0
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
  402304:	3303      	adds	r3, #3
  402306:	f64f 74fc 	movw	r4, #65532	; 0xfffc
  40230a:	401c      	ands	r4, r3
  40230c:	2c0c      	cmp	r4, #12
  40230e:	bf38      	it	cc
  402310:	240c      	movcc	r4, #12
  if(size < MIN_SIZE_ALIGNED) {
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
  402312:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  402316:	d857      	bhi.n	4023c8 <mem_malloc+0xcc>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
  402318:	4b2d      	ldr	r3, [pc, #180]	; (4023d0 <mem_malloc+0xd4>)
  40231a:	681f      	ldr	r7, [r3, #0]
  40231c:	4b2d      	ldr	r3, [pc, #180]	; (4023d4 <mem_malloc+0xd8>)
  40231e:	6819      	ldr	r1, [r3, #0]
  402320:	1a7b      	subs	r3, r7, r1
  402322:	b29b      	uxth	r3, r3
  402324:	f5c4 5580 	rsb	r5, r4, #4096	; 0x1000
  402328:	42ab      	cmp	r3, r5
  40232a:	da4f      	bge.n	4023cc <mem_malloc+0xd0>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
  40232c:	f06f 0c07 	mvn.w	ip, #7
  402330:	46a6      	mov	lr, r4
  402332:	e00e      	b.n	402352 <mem_malloc+0x56>
           * take care of this).
           * -> near fit or excact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
  402334:	2301      	movs	r3, #1
  402336:	7103      	strb	r3, [r0, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
  402338:	4b25      	ldr	r3, [pc, #148]	; (4023d0 <mem_malloc+0xd4>)
  40233a:	681b      	ldr	r3, [r3, #0]
  40233c:	4298      	cmp	r0, r3
  40233e:	d02f      	beq.n	4023a0 <mem_malloc+0xa4>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
  402340:	3008      	adds	r0, #8
  402342:	bdf0      	pop	{r4, r5, r6, r7, pc}
      mem = (struct mem *)(void *)&ram[ptr];
  402344:	4603      	mov	r3, r0
  402346:	e038      	b.n	4023ba <mem_malloc+0xbe>
  402348:	4603      	mov	r3, r0
  40234a:	e036      	b.n	4023ba <mem_malloc+0xbe>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
  40234c:	8803      	ldrh	r3, [r0, #0]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
  40234e:	42ab      	cmp	r3, r5
  402350:	da36      	bge.n	4023c0 <mem_malloc+0xc4>
      mem = (struct mem *)(void *)&ram[ptr];
  402352:	18c8      	adds	r0, r1, r3
      if ((!mem->used) &&
  402354:	7902      	ldrb	r2, [r0, #4]
  402356:	2a00      	cmp	r2, #0
  402358:	d1f8      	bne.n	40234c <mem_malloc+0x50>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
  40235a:	ebac 0203 	sub.w	r2, ip, r3
  40235e:	5ace      	ldrh	r6, [r1, r3]
  402360:	4432      	add	r2, r6
  402362:	4676      	mov	r6, lr
      if ((!mem->used) &&
  402364:	42a2      	cmp	r2, r4
  402366:	d3f1      	bcc.n	40234c <mem_malloc+0x50>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
  402368:	3614      	adds	r6, #20
  40236a:	42b2      	cmp	r2, r6
  40236c:	d3e2      	bcc.n	402334 <mem_malloc+0x38>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
  40236e:	f104 0208 	add.w	r2, r4, #8
  402372:	441a      	add	r2, r3
  402374:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
  402376:	188c      	adds	r4, r1, r2
          mem2->used = 0;
  402378:	2500      	movs	r5, #0
  40237a:	7125      	strb	r5, [r4, #4]
          mem2->next = mem->next;
  40237c:	8805      	ldrh	r5, [r0, #0]
  40237e:	528d      	strh	r5, [r1, r2]
          mem2->prev = ptr;
  402380:	8063      	strh	r3, [r4, #2]
          mem->next = ptr2;
  402382:	8002      	strh	r2, [r0, #0]
          mem->used = 1;
  402384:	2301      	movs	r3, #1
  402386:	7103      	strb	r3, [r0, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
  402388:	5a8b      	ldrh	r3, [r1, r2]
  40238a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  40238e:	d0d3      	beq.n	402338 <mem_malloc+0x3c>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
  402390:	4419      	add	r1, r3
  402392:	804a      	strh	r2, [r1, #2]
        if (mem == lfree) {
  402394:	4287      	cmp	r7, r0
  402396:	d1d3      	bne.n	402340 <mem_malloc+0x44>
          while (cur->used && cur != ram_end) {
  402398:	7903      	ldrb	r3, [r0, #4]
  40239a:	2b00      	cmp	r3, #0
  40239c:	d0d2      	beq.n	402344 <mem_malloc+0x48>
        if (mem == lfree) {
  40239e:	4603      	mov	r3, r0
          while (cur->used && cur != ram_end) {
  4023a0:	4a0d      	ldr	r2, [pc, #52]	; (4023d8 <mem_malloc+0xdc>)
  4023a2:	6811      	ldr	r1, [r2, #0]
  4023a4:	4288      	cmp	r0, r1
  4023a6:	d0cf      	beq.n	402348 <mem_malloc+0x4c>
            cur = (struct mem *)(void *)&ram[cur->next];
  4023a8:	4a0a      	ldr	r2, [pc, #40]	; (4023d4 <mem_malloc+0xd8>)
  4023aa:	6814      	ldr	r4, [r2, #0]
  4023ac:	881b      	ldrh	r3, [r3, #0]
  4023ae:	4423      	add	r3, r4
          while (cur->used && cur != ram_end) {
  4023b0:	791a      	ldrb	r2, [r3, #4]
  4023b2:	b112      	cbz	r2, 4023ba <mem_malloc+0xbe>
  4023b4:	428b      	cmp	r3, r1
  4023b6:	d1f9      	bne.n	4023ac <mem_malloc+0xb0>
            cur = (struct mem *)(void *)&ram[cur->next];
  4023b8:	460b      	mov	r3, r1
          lfree = cur;
  4023ba:	4a05      	ldr	r2, [pc, #20]	; (4023d0 <mem_malloc+0xd4>)
  4023bc:	6013      	str	r3, [r2, #0]
  4023be:	e7bf      	b.n	402340 <mem_malloc+0x44>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
  4023c0:	2000      	movs	r0, #0
  4023c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
  4023c4:	2000      	movs	r0, #0
  4023c6:	4770      	bx	lr
    return NULL;
  4023c8:	2000      	movs	r0, #0
  4023ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return NULL;
  4023cc:	2000      	movs	r0, #0
  4023ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4023d0:	20400ad0 	.word	0x20400ad0
  4023d4:	20400ad4 	.word	0x20400ad4
  4023d8:	20400ad8 	.word	0x20400ad8

004023dc <memp_init>:
 * 
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
  4023dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    MEMP_STATS_AVAIL(err, i, 0);
    MEMP_STATS_AVAIL(avail, i, memp_num[i]);
  }

#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
  4023e0:	4f18      	ldr	r7, [pc, #96]	; (402444 <memp_init+0x68>)
  4023e2:	f027 0703 	bic.w	r7, r7, #3
  4023e6:	4e18      	ldr	r6, [pc, #96]	; (402448 <memp_init+0x6c>)
  4023e8:	f8df c060 	ldr.w	ip, [pc, #96]	; 40244c <memp_init+0x70>
  4023ec:	f8df e060 	ldr.w	lr, [pc, #96]	; 402450 <memp_init+0x74>
  4023f0:	f106 0a20 	add.w	sl, r6, #32
#endif /* !MEMP_SEPARATE_POOLS */
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
    memp_tab[i] = NULL;
  4023f4:	f04f 0900 	mov.w	r9, #0
  4023f8:	e015      	b.n	402426 <memp_init+0x4a>
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
      memp->next = memp_tab[i];
      memp_tab[i] = memp;
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
  4023fa:	4603      	mov	r3, r0
      memp->next = memp_tab[i];
  4023fc:	6019      	str	r1, [r3, #0]
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
  4023fe:	1958      	adds	r0, r3, r5
  402400:	3201      	adds	r2, #1
      memp_tab[i] = memp;
  402402:	4619      	mov	r1, r3
    for (j = 0; j < memp_num[i]; ++j) {
  402404:	b293      	uxth	r3, r2
  402406:	429c      	cmp	r4, r3
  402408:	d8f7      	bhi.n	4023fa <memp_init+0x1e>
  40240a:	3c01      	subs	r4, #1
  40240c:	b2a4      	uxth	r4, r4
  40240e:	fb04 5305 	mla	r3, r4, r5, r5
  402412:	fb04 7405 	mla	r4, r4, r5, r7
  402416:	f8c8 4000 	str.w	r4, [r8]
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
  40241a:	441f      	add	r7, r3
  40241c:	3604      	adds	r6, #4
  40241e:	f10e 0e02 	add.w	lr, lr, #2
  for (i = 0; i < MEMP_MAX; ++i) {
  402422:	4556      	cmp	r6, sl
  402424:	d00c      	beq.n	402440 <memp_init+0x64>
  402426:	46b0      	mov	r8, r6
    memp_tab[i] = NULL;
  402428:	f8c6 9000 	str.w	r9, [r6]
    for (j = 0; j < memp_num[i]; ++j) {
  40242c:	f83c 4f02 	ldrh.w	r4, [ip, #2]!
  402430:	2c00      	cmp	r4, #0
  402432:	d0f3      	beq.n	40241c <memp_init+0x40>
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
  402434:	f8be 5000 	ldrh.w	r5, [lr]
  402438:	463b      	mov	r3, r7
  40243a:	2200      	movs	r2, #0
  40243c:	4611      	mov	r1, r2
  40243e:	e7dd      	b.n	4023fc <memp_init+0x20>
#if MEMP_OVERFLOW_CHECK
  memp_overflow_init();
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK */
}
  402440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402444:	20400adf 	.word	0x20400adf
  402448:	2040259c 	.word	0x2040259c
  40244c:	0040e8ce 	.word	0x0040e8ce
  402450:	0040e8e0 	.word	0x0040e8e0

00402454 <memp_malloc>:
#endif
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);
 
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
  402454:	2807      	cmp	r0, #7
  402456:	d900      	bls.n	40245a <memp_malloc+0x6>
  402458:	e7fe      	b.n	402458 <memp_malloc+0x4>
  SYS_ARCH_PROTECT(old_level);
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

  memp = memp_tab[type];
  40245a:	4b05      	ldr	r3, [pc, #20]	; (402470 <memp_malloc+0x1c>)
  40245c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  
  if (memp != NULL) {
  402460:	b11b      	cbz	r3, 40246a <memp_malloc+0x16>
    memp_tab[type] = memp->next;
  402462:	6819      	ldr	r1, [r3, #0]
  402464:	4a02      	ldr	r2, [pc, #8]	; (402470 <memp_malloc+0x1c>)
  402466:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
  }

  SYS_ARCH_UNPROTECT(old_level);

  return memp;
}
  40246a:	4618      	mov	r0, r3
  40246c:	4770      	bx	lr
  40246e:	bf00      	nop
  402470:	2040259c 	.word	0x2040259c

00402474 <memp_free>:
memp_free(memp_t type, void *mem)
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  if (mem == NULL) {
  402474:	460b      	mov	r3, r1
  402476:	b129      	cbz	r1, 402484 <memp_free+0x10>
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
#endif /* MEMP_OVERFLOW_CHECK */

  MEMP_STATS_DEC(used, type); 
  
  memp->next = memp_tab[type]; 
  402478:	4a03      	ldr	r2, [pc, #12]	; (402488 <memp_free+0x14>)
  40247a:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
  40247e:	6019      	str	r1, [r3, #0]
  memp_tab[type] = memp;
  402480:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  402484:	4770      	bx	lr
  402486:	bf00      	nop
  402488:	2040259c 	.word	0x2040259c

0040248c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
  40248c:	4770      	bx	lr
	...

00402490 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, ip_addr_t *ipaddr)
{
  402490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402492:	4604      	mov	r4, r0
#if LWIP_TCP
  struct tcp_pcb *pcb;
  struct tcp_pcb_listen *lpcb;

  /* address is actually being changed? */
  if (ipaddr && (ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0) {
  402494:	2900      	cmp	r1, #0
  402496:	d027      	beq.n	4024e8 <netif_set_ipaddr+0x58>
  402498:	460d      	mov	r5, r1
  40249a:	680a      	ldr	r2, [r1, #0]
  40249c:	6843      	ldr	r3, [r0, #4]
  40249e:	429a      	cmp	r2, r3
  4024a0:	d011      	beq.n	4024c6 <netif_set_ipaddr+0x36>
    /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    pcb = tcp_active_pcbs;
  4024a2:	4b12      	ldr	r3, [pc, #72]	; (4024ec <netif_set_ipaddr+0x5c>)
  4024a4:	6818      	ldr	r0, [r3, #0]
    while (pcb != NULL) {
  4024a6:	b158      	cbz	r0, 4024c0 <netif_set_ipaddr+0x30>
#endif /* LWIP_AUTOIP */
        ) {
        /* this connection must be aborted */
        struct tcp_pcb *next = pcb->next;
        LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
        tcp_abort(pcb);
  4024a8:	4f11      	ldr	r7, [pc, #68]	; (4024f0 <netif_set_ipaddr+0x60>)
  4024aa:	e003      	b.n	4024b4 <netif_set_ipaddr+0x24>
        struct tcp_pcb *next = pcb->next;
  4024ac:	68c6      	ldr	r6, [r0, #12]
        tcp_abort(pcb);
  4024ae:	47b8      	blx	r7
        pcb = next;
  4024b0:	4630      	mov	r0, r6
    while (pcb != NULL) {
  4024b2:	b128      	cbz	r0, 4024c0 <netif_set_ipaddr+0x30>
      if (ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))
  4024b4:	6802      	ldr	r2, [r0, #0]
  4024b6:	6863      	ldr	r3, [r4, #4]
  4024b8:	429a      	cmp	r2, r3
  4024ba:	d0f7      	beq.n	4024ac <netif_set_ipaddr+0x1c>
      } else {
        pcb = pcb->next;
  4024bc:	68c0      	ldr	r0, [r0, #12]
  4024be:	e7f8      	b.n	4024b2 <netif_set_ipaddr+0x22>
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  4024c0:	4b0c      	ldr	r3, [pc, #48]	; (4024f4 <netif_set_ipaddr+0x64>)
  4024c2:	681b      	ldr	r3, [r3, #0]
  4024c4:	b92b      	cbnz	r3, 4024d2 <netif_set_ipaddr+0x42>
  }
#endif
  snmp_delete_ipaddridx_tree(netif);
  snmp_delete_iprteidx_tree(0,netif);
  /* set new IP address to netif */
  ip_addr_set(&(netif->ip_addr), ipaddr);
  4024c6:	682b      	ldr	r3, [r5, #0]
  4024c8:	6063      	str	r3, [r4, #4]
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->ip_addr),
    ip4_addr2_16(&netif->ip_addr),
    ip4_addr3_16(&netif->ip_addr),
    ip4_addr4_16(&netif->ip_addr)));
}
  4024ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  4024cc:	68db      	ldr	r3, [r3, #12]
  4024ce:	2b00      	cmp	r3, #0
  4024d0:	d0f9      	beq.n	4024c6 <netif_set_ipaddr+0x36>
      if ((!(ip_addr_isany(&(lpcb->local_ip)))) &&
  4024d2:	2b00      	cmp	r3, #0
  4024d4:	d0fa      	beq.n	4024cc <netif_set_ipaddr+0x3c>
  4024d6:	681a      	ldr	r2, [r3, #0]
  4024d8:	2a00      	cmp	r2, #0
  4024da:	d0f7      	beq.n	4024cc <netif_set_ipaddr+0x3c>
  4024dc:	6861      	ldr	r1, [r4, #4]
  4024de:	428a      	cmp	r2, r1
  4024e0:	d1f4      	bne.n	4024cc <netif_set_ipaddr+0x3c>
        ip_addr_set(&(lpcb->local_ip), ipaddr);
  4024e2:	682a      	ldr	r2, [r5, #0]
  4024e4:	601a      	str	r2, [r3, #0]
  4024e6:	e7f1      	b.n	4024cc <netif_set_ipaddr+0x3c>
  ip_addr_set(&(netif->ip_addr), ipaddr);
  4024e8:	2300      	movs	r3, #0
  4024ea:	e7ed      	b.n	4024c8 <netif_set_ipaddr+0x38>
  4024ec:	20404964 	.word	0x20404964
  4024f0:	00403465 	.word	0x00403465
  4024f4:	2040496c 	.word	0x2040496c

004024f8 <netif_set_addr>:
{
  4024f8:	b570      	push	{r4, r5, r6, lr}
  4024fa:	4604      	mov	r4, r0
  4024fc:	4616      	mov	r6, r2
  4024fe:	461d      	mov	r5, r3
  netif_set_ipaddr(netif, ipaddr);
  402500:	4b06      	ldr	r3, [pc, #24]	; (40251c <netif_set_addr+0x24>)
  402502:	4798      	blx	r3
void
netif_set_netmask(struct netif *netif, ip_addr_t *netmask)
{
  snmp_delete_iprteidx_tree(0, netif);
  /* set new netmask to netif */
  ip_addr_set(&(netif->netmask), netmask);
  402504:	b12e      	cbz	r6, 402512 <netif_set_addr+0x1a>
  402506:	6833      	ldr	r3, [r6, #0]
  402508:	60a3      	str	r3, [r4, #8]
  ip_addr_set(&(netif->gw), gw);
  40250a:	b125      	cbz	r5, 402516 <netif_set_addr+0x1e>
  40250c:	682b      	ldr	r3, [r5, #0]
  40250e:	60e3      	str	r3, [r4, #12]
  402510:	bd70      	pop	{r4, r5, r6, pc}
  ip_addr_set(&(netif->netmask), netmask);
  402512:	2300      	movs	r3, #0
  402514:	e7f8      	b.n	402508 <netif_set_addr+0x10>
  ip_addr_set(&(netif->gw), gw);
  402516:	2300      	movs	r3, #0
  402518:	e7f9      	b.n	40250e <netif_set_addr+0x16>
  40251a:	bf00      	nop
  40251c:	00402491 	.word	0x00402491

00402520 <netif_add>:
{
  402520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402522:	4604      	mov	r4, r0
  ip_addr_set_zero(&netif->ip_addr);
  402524:	2500      	movs	r5, #0
  402526:	6045      	str	r5, [r0, #4]
  ip_addr_set_zero(&netif->netmask);
  402528:	6085      	str	r5, [r0, #8]
  ip_addr_set_zero(&netif->gw);
  40252a:	60c5      	str	r5, [r0, #12]
  netif->flags = 0;
  40252c:	f880 502d 	strb.w	r5, [r0, #45]	; 0x2d
  netif->status_callback = NULL;
  402530:	61c5      	str	r5, [r0, #28]
  netif->state = state;
  402532:	9d06      	ldr	r5, [sp, #24]
  402534:	6205      	str	r5, [r0, #32]
  netif->num = netif_num++;
  402536:	4e0b      	ldr	r6, [pc, #44]	; (402564 <netif_add+0x44>)
  402538:	7835      	ldrb	r5, [r6, #0]
  40253a:	1c6f      	adds	r7, r5, #1
  40253c:	7037      	strb	r7, [r6, #0]
  40253e:	f880 5030 	strb.w	r5, [r0, #48]	; 0x30
  netif->input = input;
  402542:	9d08      	ldr	r5, [sp, #32]
  402544:	6105      	str	r5, [r0, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
  402546:	4d08      	ldr	r5, [pc, #32]	; (402568 <netif_add+0x48>)
  402548:	47a8      	blx	r5
  if (init(netif) != ERR_OK) {
  40254a:	4620      	mov	r0, r4
  40254c:	9b07      	ldr	r3, [sp, #28]
  40254e:	4798      	blx	r3
  402550:	b928      	cbnz	r0, 40255e <netif_add+0x3e>
  netif->next = netif_list;
  402552:	4b06      	ldr	r3, [pc, #24]	; (40256c <netif_add+0x4c>)
  402554:	681a      	ldr	r2, [r3, #0]
  402556:	6022      	str	r2, [r4, #0]
  netif_list = netif;
  402558:	601c      	str	r4, [r3, #0]
  return netif;
  40255a:	4620      	mov	r0, r4
  40255c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return NULL;
  40255e:	2000      	movs	r0, #0
}
  402560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402562:	bf00      	nop
  402564:	204025bc 	.word	0x204025bc
  402568:	004024f9 	.word	0x004024f9
  40256c:	20404954 	.word	0x20404954

00402570 <netif_set_default>:
    snmp_delete_iprteidx_tree(1, netif);
  } else {
    /* install default route */
    snmp_insert_iprteidx_tree(1, netif);
  }
  netif_default = netif;
  402570:	4b01      	ldr	r3, [pc, #4]	; (402578 <netif_set_default+0x8>)
  402572:	6018      	str	r0, [r3, #0]
  402574:	4770      	bx	lr
  402576:	bf00      	nop
  402578:	20404958 	.word	0x20404958

0040257c <netif_set_up>:
 * 
 * @see dhcp_start()
 */ 
void netif_set_up(struct netif *netif)
{
  if (!(netif->flags & NETIF_FLAG_UP)) {
  40257c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
  402580:	f013 0f01 	tst.w	r3, #1
  402584:	d114      	bne.n	4025b0 <netif_set_up+0x34>
{
  402586:	b510      	push	{r4, lr}
  402588:	4604      	mov	r4, r0
    netif->flags |= NETIF_FLAG_UP;
  40258a:	f043 0301 	orr.w	r3, r3, #1
  40258e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    
#if LWIP_SNMP
    snmp_get_sysuptime(&netif->ts);
#endif /* LWIP_SNMP */

    NETIF_STATUS_CALLBACK(netif);
  402592:	69c3      	ldr	r3, [r0, #28]
  402594:	b103      	cbz	r3, 402598 <netif_set_up+0x1c>
  402596:	4798      	blx	r3

    if (netif->flags & NETIF_FLAG_LINK_UP) {
#if LWIP_ARP
      /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */ 
      if (netif->flags & (NETIF_FLAG_ETHARP)) {
  402598:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
  40259c:	f003 0330 	and.w	r3, r3, #48	; 0x30
  4025a0:	2b30      	cmp	r3, #48	; 0x30
  4025a2:	d000      	beq.n	4025a6 <netif_set_up+0x2a>
  4025a4:	bd10      	pop	{r4, pc}
        etharp_gratuitous(netif);
  4025a6:	1d21      	adds	r1, r4, #4
  4025a8:	4620      	mov	r0, r4
  4025aa:	4b02      	ldr	r3, [pc, #8]	; (4025b4 <netif_set_up+0x38>)
  4025ac:	4798      	blx	r3
        igmp_report_groups( netif);
      }
#endif /* LWIP_IGMP */
    }
  }
}
  4025ae:	e7f9      	b.n	4025a4 <netif_set_up+0x28>
  4025b0:	4770      	bx	lr
  4025b2:	bf00      	nop
  4025b4:	00405905 	.word	0x00405905

004025b8 <netif_set_status_callback>:
/**
 * Set callback to be called when interface is brought up/down
 */
void netif_set_status_callback(struct netif *netif, netif_status_callback_fn status_callback)
{
  if (netif) {
  4025b8:	b100      	cbz	r0, 4025bc <netif_set_status_callback+0x4>
    netif->status_callback = status_callback;
  4025ba:	61c1      	str	r1, [r0, #28]
  4025bc:	4770      	bx	lr

004025be <pbuf_header>:
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
  4025be:	b369      	cbz	r1, 40261c <pbuf_header+0x5e>
  4025c0:	460b      	mov	r3, r1
  4025c2:	b358      	cbz	r0, 40261c <pbuf_header+0x5e>
{
  4025c4:	b410      	push	{r4}
    return 0;
  }
 
  if (header_size_increment < 0){
  4025c6:	2900      	cmp	r1, #0
  4025c8:	db11      	blt.n	4025ee <pbuf_header+0x30>
    increment_magnitude = -header_size_increment;
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  } else {
    increment_magnitude = header_size_increment;
  4025ca:	b28c      	uxth	r4, r1
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
  4025cc:	7b01      	ldrb	r1, [r0, #12]
  /* remember current payload pointer */
  payload = p->payload;
  4025ce:	6842      	ldr	r2, [r0, #4]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
  4025d0:	b199      	cbz	r1, 4025fa <pbuf_header+0x3c>
  4025d2:	2903      	cmp	r1, #3
  4025d4:	d011      	beq.n	4025fa <pbuf_header+0x3c>
      p->payload = payload;
      /* bail out unsuccesfully */
      return 1;
    }
  /* pbuf types refering to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
  4025d6:	3901      	subs	r1, #1
  4025d8:	b289      	uxth	r1, r1
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
  4025da:	2901      	cmp	r1, #1
  4025dc:	d822      	bhi.n	402624 <pbuf_header+0x66>
  4025de:	2b00      	cmp	r3, #0
  4025e0:	da20      	bge.n	402624 <pbuf_header+0x66>
  4025e2:	8941      	ldrh	r1, [r0, #10]
  4025e4:	42a1      	cmp	r1, r4
  4025e6:	d31f      	bcc.n	402628 <pbuf_header+0x6a>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
  4025e8:	1ad2      	subs	r2, r2, r3
  4025ea:	6042      	str	r2, [r0, #4]
  4025ec:	e00b      	b.n	402606 <pbuf_header+0x48>
    increment_magnitude = -header_size_increment;
  4025ee:	424c      	negs	r4, r1
  4025f0:	b2a4      	uxth	r4, r4
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  4025f2:	8942      	ldrh	r2, [r0, #10]
  4025f4:	42a2      	cmp	r2, r4
  4025f6:	d2e9      	bcs.n	4025cc <pbuf_header+0xe>
  4025f8:	e7fe      	b.n	4025f8 <pbuf_header+0x3a>
    p->payload = (u8_t *)p->payload - header_size_increment;
  4025fa:	1ad2      	subs	r2, r2, r3
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
  4025fc:	f100 0110 	add.w	r1, r0, #16
  402600:	428a      	cmp	r2, r1
  402602:	d30d      	bcc.n	402620 <pbuf_header+0x62>
    p->payload = (u8_t *)p->payload - header_size_increment;
  402604:	6042      	str	r2, [r0, #4]
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
  402606:	b29b      	uxth	r3, r3
  402608:	8942      	ldrh	r2, [r0, #10]
  40260a:	441a      	add	r2, r3
  40260c:	8142      	strh	r2, [r0, #10]
  p->tot_len += header_size_increment;
  40260e:	8902      	ldrh	r2, [r0, #8]
  402610:	4413      	add	r3, r2
  402612:	8103      	strh	r3, [r0, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
  402614:	2000      	movs	r0, #0
}
  402616:	f85d 4b04 	ldr.w	r4, [sp], #4
  40261a:	4770      	bx	lr
    return 0;
  40261c:	2000      	movs	r0, #0
  40261e:	4770      	bx	lr
      return 1;
  402620:	2001      	movs	r0, #1
  402622:	e7f8      	b.n	402616 <pbuf_header+0x58>
      return 1;
  402624:	2001      	movs	r0, #1
  402626:	e7f6      	b.n	402616 <pbuf_header+0x58>
  402628:	2001      	movs	r0, #1
  40262a:	e7f4      	b.n	402616 <pbuf_header+0x58>

0040262c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
  40262c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
  402630:	b1f8      	cbz	r0, 402672 <pbuf_free+0x46>
  402632:	4601      	mov	r1, r0
  402634:	2400      	movs	r4, #0
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
          memp_free(MEMP_PBUF, p);
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
  402636:	4d11      	ldr	r5, [pc, #68]	; (40267c <pbuf_free+0x50>)
          memp_free(MEMP_PBUF, p);
  402638:	f04f 0806 	mov.w	r8, #6
  40263c:	4e10      	ldr	r6, [pc, #64]	; (402680 <pbuf_free+0x54>)
  40263e:	e008      	b.n	402652 <pbuf_free+0x26>
          memp_free(MEMP_PBUF_POOL, p);
  402640:	2007      	movs	r0, #7
  402642:	47b0      	blx	r6
  402644:	e001      	b.n	40264a <pbuf_free+0x1e>
          memp_free(MEMP_PBUF, p);
  402646:	4640      	mov	r0, r8
  402648:	47b0      	blx	r6
        }
      }
      count++;
  40264a:	3401      	adds	r4, #1
  40264c:	b2e4      	uxtb	r4, r4
      /* proceed to next pbuf */
      p = q;
  40264e:	4639      	mov	r1, r7
  while (p != NULL) {
  402650:	b187      	cbz	r7, 402674 <pbuf_free+0x48>
    ref = --(p->ref);
  402652:	89cb      	ldrh	r3, [r1, #14]
  402654:	3b01      	subs	r3, #1
  402656:	b29b      	uxth	r3, r3
  402658:	81cb      	strh	r3, [r1, #14]
    if (ref == 0) {
  40265a:	b95b      	cbnz	r3, 402674 <pbuf_free+0x48>
      q = p->next;
  40265c:	680f      	ldr	r7, [r1, #0]
      type = p->type;
  40265e:	7b0b      	ldrb	r3, [r1, #12]
        if (type == PBUF_POOL) {
  402660:	2b03      	cmp	r3, #3
  402662:	d0ed      	beq.n	402640 <pbuf_free+0x14>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
  402664:	3b01      	subs	r3, #1
  402666:	b29b      	uxth	r3, r3
  402668:	2b01      	cmp	r3, #1
  40266a:	d9ec      	bls.n	402646 <pbuf_free+0x1a>
          mem_free(p);
  40266c:	4608      	mov	r0, r1
  40266e:	47a8      	blx	r5
  402670:	e7eb      	b.n	40264a <pbuf_free+0x1e>
    return 0;
  402672:	2400      	movs	r4, #0
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
  402674:	4620      	mov	r0, r4
  402676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40267a:	bf00      	nop
  40267c:	00402195 	.word	0x00402195
  402680:	00402475 	.word	0x00402475

00402684 <pbuf_alloc>:
{
  402684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  switch (layer) {
  402688:	2803      	cmp	r0, #3
  40268a:	f200 8093 	bhi.w	4027b4 <pbuf_alloc+0x130>
  40268e:	e8df f000 	tbb	[pc, r0]
  402692:	0208      	.short	0x0208
  402694:	0604      	.short	0x0604
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN;
  402696:	2422      	movs	r4, #34	; 0x22
  402698:	e004      	b.n	4026a4 <pbuf_alloc+0x20>
    offset = PBUF_LINK_HLEN;
  40269a:	240e      	movs	r4, #14
    break;
  40269c:	e002      	b.n	4026a4 <pbuf_alloc+0x20>
    offset = 0;
  40269e:	2400      	movs	r4, #0
    break;
  4026a0:	e000      	b.n	4026a4 <pbuf_alloc+0x20>
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
  4026a2:	2436      	movs	r4, #54	; 0x36
  4026a4:	4617      	mov	r7, r2
  4026a6:	4688      	mov	r8, r1
  switch (type) {
  4026a8:	2a03      	cmp	r2, #3
  4026aa:	f200 8085 	bhi.w	4027b8 <pbuf_alloc+0x134>
  4026ae:	e8df f002 	tbb	[pc, r2]
  4026b2:	7252      	.short	0x7252
  4026b4:	0272      	.short	0x0272
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  4026b6:	2007      	movs	r0, #7
  4026b8:	4b40      	ldr	r3, [pc, #256]	; (4027bc <pbuf_alloc+0x138>)
  4026ba:	4798      	blx	r3
    if (p == NULL) {
  4026bc:	4606      	mov	r6, r0
  4026be:	2800      	cmp	r0, #0
  4026c0:	d03d      	beq.n	40273e <pbuf_alloc+0xba>
    p->type = type;
  4026c2:	2303      	movs	r3, #3
  4026c4:	7303      	strb	r3, [r0, #12]
    p->next = NULL;
  4026c6:	2300      	movs	r3, #0
  4026c8:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
  4026ca:	1903      	adds	r3, r0, r4
  4026cc:	3313      	adds	r3, #19
  4026ce:	f023 0303 	bic.w	r3, r3, #3
  4026d2:	6043      	str	r3, [r0, #4]
    p->tot_len = length;
  4026d4:	f8a0 8008 	strh.w	r8, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
  4026d8:	3403      	adds	r4, #3
  4026da:	f024 0403 	bic.w	r4, r4, #3
  4026de:	f5c4 64c0 	rsb	r4, r4, #1536	; 0x600
  4026e2:	4544      	cmp	r4, r8
  4026e4:	bfa8      	it	ge
  4026e6:	4644      	movge	r4, r8
  4026e8:	8144      	strh	r4, [r0, #10]
    p->ref = 1;
  4026ea:	2301      	movs	r3, #1
  4026ec:	81c3      	strh	r3, [r0, #14]
    rem_len = length - p->len;
  4026ee:	b2a5      	uxth	r5, r4
  4026f0:	eba8 0505 	sub.w	r5, r8, r5
    while (rem_len > 0) {
  4026f4:	2d00      	cmp	r5, #0
  4026f6:	dd47      	ble.n	402788 <pbuf_alloc+0x104>
  4026f8:	4682      	mov	sl, r0
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  4026fa:	f04f 0807 	mov.w	r8, #7
  4026fe:	4f2f      	ldr	r7, [pc, #188]	; (4027bc <pbuf_alloc+0x138>)
      q->type = type;
  402700:	f04f 0903 	mov.w	r9, #3
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  402704:	4640      	mov	r0, r8
  402706:	47b8      	blx	r7
      if (q == NULL) {
  402708:	4604      	mov	r4, r0
  40270a:	b1e0      	cbz	r0, 402746 <pbuf_alloc+0xc2>
      q->type = type;
  40270c:	f880 900c 	strb.w	r9, [r0, #12]
      q->flags = 0;
  402710:	2300      	movs	r3, #0
  402712:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
  402714:	6003      	str	r3, [r0, #0]
      r->next = q;
  402716:	f8ca 0000 	str.w	r0, [sl]
      q->tot_len = (u16_t)rem_len;
  40271a:	b2ab      	uxth	r3, r5
  40271c:	8103      	strh	r3, [r0, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
  40271e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
  402722:	bf28      	it	cs
  402724:	f44f 63c0 	movcs.w	r3, #1536	; 0x600
  402728:	8143      	strh	r3, [r0, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
  40272a:	f100 0210 	add.w	r2, r0, #16
  40272e:	6042      	str	r2, [r0, #4]
      q->ref = 1;
  402730:	2201      	movs	r2, #1
  402732:	81c2      	strh	r2, [r0, #14]
      rem_len -= q->len;
  402734:	1aed      	subs	r5, r5, r3
      r = q;
  402736:	4682      	mov	sl, r0
    while (rem_len > 0) {
  402738:	2d00      	cmp	r5, #0
  40273a:	dce3      	bgt.n	402704 <pbuf_alloc+0x80>
  40273c:	e024      	b.n	402788 <pbuf_alloc+0x104>
  pbuf_free_ooseq_pending = 1;
  40273e:	2201      	movs	r2, #1
  402740:	4b1f      	ldr	r3, [pc, #124]	; (4027c0 <pbuf_alloc+0x13c>)
  402742:	701a      	strb	r2, [r3, #0]
  402744:	e024      	b.n	402790 <pbuf_alloc+0x10c>
  402746:	2201      	movs	r2, #1
  402748:	4b1d      	ldr	r3, [pc, #116]	; (4027c0 <pbuf_alloc+0x13c>)
  40274a:	701a      	strb	r2, [r3, #0]
        pbuf_free(p);
  40274c:	4630      	mov	r0, r6
  40274e:	4b1d      	ldr	r3, [pc, #116]	; (4027c4 <pbuf_alloc+0x140>)
  402750:	4798      	blx	r3
        return NULL;
  402752:	4626      	mov	r6, r4
  402754:	e01c      	b.n	402790 <pbuf_alloc+0x10c>
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
  402756:	f104 0013 	add.w	r0, r4, #19
  40275a:	f020 0003 	bic.w	r0, r0, #3
  40275e:	1ccb      	adds	r3, r1, #3
  402760:	f023 0303 	bic.w	r3, r3, #3
  402764:	4418      	add	r0, r3
  402766:	b280      	uxth	r0, r0
  402768:	4b17      	ldr	r3, [pc, #92]	; (4027c8 <pbuf_alloc+0x144>)
  40276a:	4798      	blx	r3
    if (p == NULL) {
  40276c:	4606      	mov	r6, r0
  40276e:	b178      	cbz	r0, 402790 <pbuf_alloc+0x10c>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
  402770:	4404      	add	r4, r0
  402772:	3413      	adds	r4, #19
  402774:	f024 0403 	bic.w	r4, r4, #3
  402778:	6044      	str	r4, [r0, #4]
    p->len = p->tot_len = length;
  40277a:	f8a0 8008 	strh.w	r8, [r0, #8]
  40277e:	f8a0 800a 	strh.w	r8, [r0, #10]
    p->next = NULL;
  402782:	2300      	movs	r3, #0
  402784:	6003      	str	r3, [r0, #0]
    p->type = type;
  402786:	7303      	strb	r3, [r0, #12]
  p->ref = 1;
  402788:	2301      	movs	r3, #1
  40278a:	81f3      	strh	r3, [r6, #14]
  p->flags = 0;
  40278c:	2300      	movs	r3, #0
  40278e:	7373      	strb	r3, [r6, #13]
}
  402790:	4630      	mov	r0, r6
  402792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
  402796:	2006      	movs	r0, #6
  402798:	4b08      	ldr	r3, [pc, #32]	; (4027bc <pbuf_alloc+0x138>)
  40279a:	4798      	blx	r3
    if (p == NULL) {
  40279c:	4606      	mov	r6, r0
  40279e:	2800      	cmp	r0, #0
  4027a0:	d0f6      	beq.n	402790 <pbuf_alloc+0x10c>
    p->payload = NULL;
  4027a2:	2300      	movs	r3, #0
  4027a4:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
  4027a6:	f8a0 8008 	strh.w	r8, [r0, #8]
  4027aa:	f8a0 800a 	strh.w	r8, [r0, #10]
    p->next = NULL;
  4027ae:	6003      	str	r3, [r0, #0]
    p->type = type;
  4027b0:	7307      	strb	r7, [r0, #12]
    break;
  4027b2:	e7e9      	b.n	402788 <pbuf_alloc+0x104>
    return NULL;
  4027b4:	2600      	movs	r6, #0
  4027b6:	e7eb      	b.n	402790 <pbuf_alloc+0x10c>
    return NULL;
  4027b8:	2600      	movs	r6, #0
  4027ba:	e7e9      	b.n	402790 <pbuf_alloc+0x10c>
  4027bc:	00402455 	.word	0x00402455
  4027c0:	2040495c 	.word	0x2040495c
  4027c4:	0040262d 	.word	0x0040262d
  4027c8:	004022fd 	.word	0x004022fd

004027cc <pbuf_realloc>:
  if (new_len >= p->tot_len) {
  4027cc:	8902      	ldrh	r2, [r0, #8]
  4027ce:	428a      	cmp	r2, r1
  4027d0:	d926      	bls.n	402820 <pbuf_realloc+0x54>
{
  4027d2:	b538      	push	{r3, r4, r5, lr}
  4027d4:	4604      	mov	r4, r0
  while (rem_len > q->len) {
  4027d6:	8943      	ldrh	r3, [r0, #10]
  4027d8:	4299      	cmp	r1, r3
  4027da:	d91f      	bls.n	40281c <pbuf_realloc+0x50>
  4027dc:	460d      	mov	r5, r1
    q->tot_len += (u16_t)grow;
  4027de:	1a89      	subs	r1, r1, r2
    rem_len -= q->len;
  4027e0:	1aeb      	subs	r3, r5, r3
  4027e2:	b29d      	uxth	r5, r3
    q->tot_len += (u16_t)grow;
  4027e4:	8923      	ldrh	r3, [r4, #8]
  4027e6:	440b      	add	r3, r1
  4027e8:	8123      	strh	r3, [r4, #8]
    q = q->next;
  4027ea:	6824      	ldr	r4, [r4, #0]
  while (rem_len > q->len) {
  4027ec:	8963      	ldrh	r3, [r4, #10]
  4027ee:	42ab      	cmp	r3, r5
  4027f0:	d3f6      	bcc.n	4027e0 <pbuf_realloc+0x14>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)) {
  4027f2:	7b22      	ldrb	r2, [r4, #12]
  4027f4:	b94a      	cbnz	r2, 40280a <pbuf_realloc+0x3e>
  4027f6:	429d      	cmp	r5, r3
  4027f8:	d007      	beq.n	40280a <pbuf_realloc+0x3e>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
  4027fa:	6863      	ldr	r3, [r4, #4]
  4027fc:	1b1b      	subs	r3, r3, r4
  4027fe:	18e9      	adds	r1, r5, r3
  402800:	b289      	uxth	r1, r1
  402802:	4620      	mov	r0, r4
  402804:	4b07      	ldr	r3, [pc, #28]	; (402824 <pbuf_realloc+0x58>)
  402806:	4798      	blx	r3
  402808:	4604      	mov	r4, r0
  q->len = rem_len;
  40280a:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
  40280c:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
  40280e:	6820      	ldr	r0, [r4, #0]
  402810:	b108      	cbz	r0, 402816 <pbuf_realloc+0x4a>
    pbuf_free(q->next);
  402812:	4b05      	ldr	r3, [pc, #20]	; (402828 <pbuf_realloc+0x5c>)
  402814:	4798      	blx	r3
  q->next = NULL;
  402816:	2300      	movs	r3, #0
  402818:	6023      	str	r3, [r4, #0]
  40281a:	bd38      	pop	{r3, r4, r5, pc}
  while (rem_len > q->len) {
  40281c:	460d      	mov	r5, r1
  40281e:	e7e8      	b.n	4027f2 <pbuf_realloc+0x26>
  402820:	4770      	bx	lr
  402822:	bf00      	nop
  402824:	0040222d 	.word	0x0040222d
  402828:	0040262d 	.word	0x0040262d

0040282c <pbuf_clen>:
pbuf_clen(struct pbuf *p)
{
  u8_t len;

  len = 0;
  while (p != NULL) {
  40282c:	4603      	mov	r3, r0
  40282e:	b130      	cbz	r0, 40283e <pbuf_clen+0x12>
  402830:	2000      	movs	r0, #0
    ++len;
  402832:	3001      	adds	r0, #1
  402834:	b2c0      	uxtb	r0, r0
    p = p->next;
  402836:	681b      	ldr	r3, [r3, #0]
  while (p != NULL) {
  402838:	2b00      	cmp	r3, #0
  40283a:	d1fa      	bne.n	402832 <pbuf_clen+0x6>
  40283c:	4770      	bx	lr
  len = 0;
  40283e:	2000      	movs	r0, #0
  }
  return len;
}
  402840:	4770      	bx	lr

00402842 <pbuf_ref>:
void
pbuf_ref(struct pbuf *p)
{
  SYS_ARCH_DECL_PROTECT(old_level);
  /* pbuf given? */
  if (p != NULL) {
  402842:	b110      	cbz	r0, 40284a <pbuf_ref+0x8>
    SYS_ARCH_PROTECT(old_level);
    ++(p->ref);
  402844:	89c3      	ldrh	r3, [r0, #14]
  402846:	3301      	adds	r3, #1
  402848:	81c3      	strh	r3, [r0, #14]
  40284a:	4770      	bx	lr

0040284c <pbuf_cat>:
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
  40284c:	b130      	cbz	r0, 40285c <pbuf_cat+0x10>
  40284e:	4602      	mov	r2, r0
  402850:	b121      	cbz	r1, 40285c <pbuf_cat+0x10>
{
  402852:	b410      	push	{r4}
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
  402854:	6803      	ldr	r3, [r0, #0]
  402856:	b91b      	cbnz	r3, 402860 <pbuf_cat+0x14>
  402858:	4603      	mov	r3, r0
  40285a:	e009      	b.n	402870 <pbuf_cat+0x24>
  40285c:	e7fe      	b.n	40285c <pbuf_cat+0x10>
  40285e:	4603      	mov	r3, r0
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
  402860:	8910      	ldrh	r0, [r2, #8]
  402862:	890c      	ldrh	r4, [r1, #8]
  402864:	4420      	add	r0, r4
  402866:	8110      	strh	r0, [r2, #8]
  for (p = h; p->next != NULL; p = p->next) {
  402868:	6818      	ldr	r0, [r3, #0]
  40286a:	461a      	mov	r2, r3
  40286c:	2800      	cmp	r0, #0
  40286e:	d1f6      	bne.n	40285e <pbuf_cat+0x12>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
  402870:	891a      	ldrh	r2, [r3, #8]
  402872:	8908      	ldrh	r0, [r1, #8]
  402874:	4402      	add	r2, r0
  402876:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  402878:	6019      	str	r1, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
  40287a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40287e:	4770      	bx	lr

00402880 <pbuf_copy>:

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (void*)p_to, (void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
  402880:	2800      	cmp	r0, #0
  402882:	d051      	beq.n	402928 <pbuf_copy+0xa8>
{
  402884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402888:	460d      	mov	r5, r1
  40288a:	4604      	mov	r4, r0
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
  40288c:	b119      	cbz	r1, 402896 <pbuf_copy+0x16>
  40288e:	8902      	ldrh	r2, [r0, #8]
  402890:	890b      	ldrh	r3, [r1, #8]
  402892:	429a      	cmp	r2, r3
  402894:	d200      	bcs.n	402898 <pbuf_copy+0x18>
  402896:	e7fe      	b.n	402896 <pbuf_copy+0x16>
  402898:	f04f 0a00 	mov.w	sl, #0
  40289c:	4657      	mov	r7, sl
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
  40289e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 40292c <pbuf_copy+0xac>
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
      /* on to next p_from (if any) */
      offset_from = 0;
  4028a2:	46d0      	mov	r8, sl
  4028a4:	e00f      	b.n	4028c6 <pbuf_copy+0x46>
      len = p_to->len - offset_to;
  4028a6:	1bdb      	subs	r3, r3, r7
  4028a8:	b29e      	uxth	r6, r3
  4028aa:	e014      	b.n	4028d6 <pbuf_copy+0x56>
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
  4028ac:	8963      	ldrh	r3, [r4, #10]
  4028ae:	42bb      	cmp	r3, r7
  4028b0:	d022      	beq.n	4028f8 <pbuf_copy+0x78>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
    }

    if((p_from != NULL) && (p_from->len == p_from->tot_len)) {
  4028b2:	b365      	cbz	r5, 40290e <pbuf_copy+0x8e>
  4028b4:	896a      	ldrh	r2, [r5, #10]
  4028b6:	892b      	ldrh	r3, [r5, #8]
  4028b8:	429a      	cmp	r2, r3
  4028ba:	d023      	beq.n	402904 <pbuf_copy+0x84>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if((p_to != NULL) && (p_to->len == p_to->tot_len)) {
  4028bc:	b11c      	cbz	r4, 4028c6 <pbuf_copy+0x46>
  4028be:	8962      	ldrh	r2, [r4, #10]
  4028c0:	8923      	ldrh	r3, [r4, #8]
  4028c2:	429a      	cmp	r2, r3
  4028c4:	d028      	beq.n	402918 <pbuf_copy+0x98>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
  4028c6:	8963      	ldrh	r3, [r4, #10]
  4028c8:	896a      	ldrh	r2, [r5, #10]
  4028ca:	1bd8      	subs	r0, r3, r7
  4028cc:	eba2 010a 	sub.w	r1, r2, sl
  4028d0:	4288      	cmp	r0, r1
  4028d2:	dbe8      	blt.n	4028a6 <pbuf_copy+0x26>
      len = p_from->len - offset_from;
  4028d4:	b28e      	uxth	r6, r1
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
  4028d6:	6860      	ldr	r0, [r4, #4]
  4028d8:	6869      	ldr	r1, [r5, #4]
  4028da:	4632      	mov	r2, r6
  4028dc:	4451      	add	r1, sl
  4028de:	4438      	add	r0, r7
  4028e0:	47c8      	blx	r9
    offset_to += len;
  4028e2:	4437      	add	r7, r6
  4028e4:	b2bf      	uxth	r7, r7
    offset_from += len;
  4028e6:	4456      	add	r6, sl
  4028e8:	fa1f fa86 	uxth.w	sl, r6
    if (offset_from >= p_from->len) {
  4028ec:	896b      	ldrh	r3, [r5, #10]
  4028ee:	4553      	cmp	r3, sl
  4028f0:	d8dc      	bhi.n	4028ac <pbuf_copy+0x2c>
      p_from = p_from->next;
  4028f2:	682d      	ldr	r5, [r5, #0]
      offset_from = 0;
  4028f4:	46c2      	mov	sl, r8
  4028f6:	e7d9      	b.n	4028ac <pbuf_copy+0x2c>
      p_to = p_to->next;
  4028f8:	6824      	ldr	r4, [r4, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
  4028fa:	b904      	cbnz	r4, 4028fe <pbuf_copy+0x7e>
  4028fc:	b90d      	cbnz	r5, 402902 <pbuf_copy+0x82>
      offset_to = 0;
  4028fe:	4647      	mov	r7, r8
  402900:	e7d7      	b.n	4028b2 <pbuf_copy+0x32>
  402902:	e7fe      	b.n	402902 <pbuf_copy+0x82>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
  402904:	682b      	ldr	r3, [r5, #0]
  402906:	2b00      	cmp	r3, #0
  402908:	d0d8      	beq.n	4028bc <pbuf_copy+0x3c>
  40290a:	e7fe      	b.n	40290a <pbuf_copy+0x8a>
  40290c:	e7fe      	b.n	40290c <pbuf_copy+0x8c>
    if((p_to != NULL) && (p_to->len == p_to->tot_len)) {
  40290e:	b144      	cbz	r4, 402922 <pbuf_copy+0xa2>
  402910:	8962      	ldrh	r2, [r4, #10]
  402912:	8923      	ldrh	r3, [r4, #8]
  402914:	429a      	cmp	r2, r3
  402916:	d104      	bne.n	402922 <pbuf_copy+0xa2>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
  402918:	6823      	ldr	r3, [r4, #0]
  40291a:	2b00      	cmp	r3, #0
  40291c:	d1f6      	bne.n	40290c <pbuf_copy+0x8c>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  40291e:	2d00      	cmp	r5, #0
  402920:	d1d1      	bne.n	4028c6 <pbuf_copy+0x46>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
  402922:	2000      	movs	r0, #0
  402924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402928:	e7fe      	b.n	402928 <pbuf_copy+0xa8>
  40292a:	bf00      	nop
  40292c:	00407bf1 	.word	0x00407bf1

00402930 <pbuf_copy_partial>:
  struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
  402930:	b158      	cbz	r0, 40294a <pbuf_copy_partial+0x1a>
{
  402932:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402936:	460f      	mov	r7, r1
  402938:	4692      	mov	sl, r2
  40293a:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
  40293c:	b151      	cbz	r1, 402954 <pbuf_copy_partial+0x24>
  if((buf == NULL) || (dataptr == NULL)) {
    return 0;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; len != 0 && p != NULL; p = p->next) {
  40293e:	b12a      	cbz	r2, 40294c <pbuf_copy_partial+0x1c>
  402940:	2600      	movs	r6, #0
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
      if (buf_copy_len > len)
          buf_copy_len = len;
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
  402942:	f8df 9054 	ldr.w	r9, [pc, #84]	; 402998 <pbuf_copy_partial+0x68>
      copied_total += buf_copy_len;
      left += buf_copy_len;
      len -= buf_copy_len;
      offset = 0;
  402946:	46b0      	mov	r8, r6
  402948:	e01d      	b.n	402986 <pbuf_copy_partial+0x56>
  40294a:	e7fe      	b.n	40294a <pbuf_copy_partial+0x1a>
  for(p = buf; len != 0 && p != NULL; p = p->next) {
  40294c:	4616      	mov	r6, r2
    }
  }
  return copied_total;
}
  40294e:	4630      	mov	r0, r6
  402950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402954:	e7fe      	b.n	402954 <pbuf_copy_partial+0x24>
      buf_copy_len = p->len - offset;
  402956:	896c      	ldrh	r4, [r5, #10]
  402958:	1ae4      	subs	r4, r4, r3
  40295a:	b2a4      	uxth	r4, r4
  40295c:	4554      	cmp	r4, sl
  40295e:	bf28      	it	cs
  402960:	4654      	movcs	r4, sl
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
  402962:	6869      	ldr	r1, [r5, #4]
  402964:	4622      	mov	r2, r4
  402966:	4419      	add	r1, r3
  402968:	19b8      	adds	r0, r7, r6
  40296a:	47c8      	blx	r9
      copied_total += buf_copy_len;
  40296c:	4426      	add	r6, r4
  40296e:	b2b6      	uxth	r6, r6
      len -= buf_copy_len;
  402970:	ebaa 0404 	sub.w	r4, sl, r4
  402974:	fa1f fa84 	uxth.w	sl, r4
      offset = 0;
  402978:	4643      	mov	r3, r8
  for(p = buf; len != 0 && p != NULL; p = p->next) {
  40297a:	682d      	ldr	r5, [r5, #0]
  40297c:	f1ba 0f00 	cmp.w	sl, #0
  402980:	d0e5      	beq.n	40294e <pbuf_copy_partial+0x1e>
  402982:	2d00      	cmp	r5, #0
  402984:	d0e3      	beq.n	40294e <pbuf_copy_partial+0x1e>
    if ((offset != 0) && (offset >= p->len)) {
  402986:	2b00      	cmp	r3, #0
  402988:	d0e5      	beq.n	402956 <pbuf_copy_partial+0x26>
  40298a:	896a      	ldrh	r2, [r5, #10]
  40298c:	429a      	cmp	r2, r3
  40298e:	d8e2      	bhi.n	402956 <pbuf_copy_partial+0x26>
      offset -= p->len;
  402990:	1a9b      	subs	r3, r3, r2
  402992:	b29b      	uxth	r3, r3
  402994:	e7f1      	b.n	40297a <pbuf_copy_partial+0x4a>
  402996:	bf00      	nop
  402998:	00407bf1 	.word	0x00407bf1

0040299c <tcp_accept_null>:
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(err);

  return ERR_ABRT;
}
  40299c:	f06f 0009 	mvn.w	r0, #9
  4029a0:	4770      	bx	lr
	...

004029a4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
  4029a4:	b4f0      	push	{r4, r5, r6, r7}
  4029a6:	4b14      	ldr	r3, [pc, #80]	; (4029f8 <tcp_new_port+0x54>)
  4029a8:	881b      	ldrh	r3, [r3, #0]
  4029aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  u8_t i;
  u16_t n = 0;
  struct tcp_pcb *pcb;
  
again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
  4029ae:	f64f 77ff 	movw	r7, #65535	; 0xffff
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  4029b2:	f44f 4640 	mov.w	r6, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  4029b6:	4d11      	ldr	r5, [pc, #68]	; (4029fc <tcp_new_port+0x58>)
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
  4029b8:	42bb      	cmp	r3, r7
  4029ba:	d00c      	beq.n	4029d6 <tcp_new_port+0x32>
  4029bc:	1c58      	adds	r0, r3, #1
  4029be:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  4029c0:	2100      	movs	r1, #0
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  4029c2:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
  4029c6:	681c      	ldr	r4, [r3, #0]
  4029c8:	b93c      	cbnz	r4, 4029da <tcp_new_port+0x36>
  4029ca:	3101      	adds	r1, #1
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
  4029cc:	2904      	cmp	r1, #4
  4029ce:	d1f8      	bne.n	4029c2 <tcp_new_port+0x1e>
  4029d0:	4b09      	ldr	r3, [pc, #36]	; (4029f8 <tcp_new_port+0x54>)
  4029d2:	8018      	strh	r0, [r3, #0]
        }
        goto again;
      }
    }
  }
  return tcp_port;
  4029d4:	e00b      	b.n	4029ee <tcp_new_port+0x4a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  4029d6:	4630      	mov	r0, r6
  4029d8:	e7f2      	b.n	4029c0 <tcp_new_port+0x1c>
      if (pcb->local_port == tcp_port) {
  4029da:	8b63      	ldrh	r3, [r4, #26]
  4029dc:	4283      	cmp	r3, r0
  4029de:	d108      	bne.n	4029f2 <tcp_new_port+0x4e>
  4029e0:	3a01      	subs	r2, #1
  4029e2:	b292      	uxth	r2, r2
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
  4029e4:	2a00      	cmp	r2, #0
  4029e6:	d1e7      	bne.n	4029b8 <tcp_new_port+0x14>
  4029e8:	4b03      	ldr	r3, [pc, #12]	; (4029f8 <tcp_new_port+0x54>)
  4029ea:	8018      	strh	r0, [r3, #0]
          return 0;
  4029ec:	2000      	movs	r0, #0
}
  4029ee:	bcf0      	pop	{r4, r5, r6, r7}
  4029f0:	4770      	bx	lr
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  4029f2:	68e4      	ldr	r4, [r4, #12]
  4029f4:	e7e8      	b.n	4029c8 <tcp_new_port+0x24>
  4029f6:	bf00      	nop
  4029f8:	2040000c 	.word	0x2040000c
  4029fc:	0040e900 	.word	0x0040e900

00402a00 <tcp_init>:
{
  402a00:	4770      	bx	lr
	...

00402a04 <tcp_bind>:
{
  402a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
  402a06:	7e03      	ldrb	r3, [r0, #24]
  402a08:	b103      	cbz	r3, 402a0c <tcp_bind+0x8>
  402a0a:	e7fe      	b.n	402a0a <tcp_bind+0x6>
  402a0c:	4604      	mov	r4, r0
  402a0e:	460d      	mov	r5, r1
  if (port == 0) {
  402a10:	b1aa      	cbz	r2, 402a3e <tcp_bind+0x3a>
  402a12:	491b      	ldr	r1, [pc, #108]	; (402a80 <tcp_bind+0x7c>)
  402a14:	f101 0710 	add.w	r7, r1, #16
    for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  402a18:	f851 3b04 	ldr.w	r3, [r1], #4
  402a1c:	681b      	ldr	r3, [r3, #0]
  402a1e:	b9cb      	cbnz	r3, 402a54 <tcp_bind+0x50>
  for (i = 0; i < max_pcb_list; i++) {
  402a20:	42b9      	cmp	r1, r7
  402a22:	d1f9      	bne.n	402a18 <tcp_bind+0x14>
  if (!ip_addr_isany(ipaddr)) {
  402a24:	b115      	cbz	r5, 402a2c <tcp_bind+0x28>
  402a26:	682b      	ldr	r3, [r5, #0]
  402a28:	b103      	cbz	r3, 402a2c <tcp_bind+0x28>
    pcb->local_ip = *ipaddr;
  402a2a:	6023      	str	r3, [r4, #0]
  pcb->local_port = port;
  402a2c:	8362      	strh	r2, [r4, #26]
  TCP_REG(&tcp_bound_pcbs, pcb);
  402a2e:	4b15      	ldr	r3, [pc, #84]	; (402a84 <tcp_bind+0x80>)
  402a30:	681a      	ldr	r2, [r3, #0]
  402a32:	60e2      	str	r2, [r4, #12]
  402a34:	601c      	str	r4, [r3, #0]
  402a36:	4b14      	ldr	r3, [pc, #80]	; (402a88 <tcp_bind+0x84>)
  402a38:	4798      	blx	r3
  return ERR_OK;
  402a3a:	2000      	movs	r0, #0
  402a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    port = tcp_new_port();
  402a3e:	4b13      	ldr	r3, [pc, #76]	; (402a8c <tcp_bind+0x88>)
  402a40:	4798      	blx	r3
    if (port == 0) {
  402a42:	4602      	mov	r2, r0
  402a44:	2800      	cmp	r0, #0
  402a46:	d1e4      	bne.n	402a12 <tcp_bind+0xe>
      return ERR_BUF;
  402a48:	f06f 0001 	mvn.w	r0, #1
  402a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  402a4e:	68db      	ldr	r3, [r3, #12]
  402a50:	2b00      	cmp	r3, #0
  402a52:	d0e5      	beq.n	402a20 <tcp_bind+0x1c>
      if (cpcb->local_port == port) {
  402a54:	8b58      	ldrh	r0, [r3, #26]
  402a56:	4290      	cmp	r0, r2
  402a58:	d1f9      	bne.n	402a4e <tcp_bind+0x4a>
          if (ip_addr_isany(&(cpcb->local_ip)) ||
  402a5a:	b153      	cbz	r3, 402a72 <tcp_bind+0x6e>
  402a5c:	681e      	ldr	r6, [r3, #0]
  402a5e:	b15d      	cbz	r5, 402a78 <tcp_bind+0x74>
  402a60:	b156      	cbz	r6, 402a78 <tcp_bind+0x74>
              ip_addr_isany(ipaddr) ||
  402a62:	6828      	ldr	r0, [r5, #0]
  402a64:	4286      	cmp	r6, r0
  402a66:	d001      	beq.n	402a6c <tcp_bind+0x68>
  402a68:	2800      	cmp	r0, #0
  402a6a:	d1f0      	bne.n	402a4e <tcp_bind+0x4a>
            return ERR_USE;
  402a6c:	f06f 0007 	mvn.w	r0, #7
}
  402a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return ERR_USE;
  402a72:	f06f 0007 	mvn.w	r0, #7
  402a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402a78:	f06f 0007 	mvn.w	r0, #7
  402a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402a7e:	bf00      	nop
  402a80:	0040e900 	.word	0x0040e900
  402a84:	20404974 	.word	0x20404974
  402a88:	00402061 	.word	0x00402061
  402a8c:	004029a5 	.word	0x004029a5

00402a90 <tcp_listen_with_backlog>:
{
  402a90:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, return NULL);
  402a92:	7e03      	ldrb	r3, [r0, #24]
  402a94:	b103      	cbz	r3, 402a98 <tcp_listen_with_backlog+0x8>
  402a96:	e7fe      	b.n	402a96 <tcp_listen_with_backlog+0x6>
  402a98:	4604      	mov	r4, r0
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
  402a9a:	2002      	movs	r0, #2
  402a9c:	4b24      	ldr	r3, [pc, #144]	; (402b30 <tcp_listen_with_backlog+0xa0>)
  402a9e:	4798      	blx	r3
  if (lpcb == NULL) {
  402aa0:	4605      	mov	r5, r0
  402aa2:	2800      	cmp	r0, #0
  402aa4:	d041      	beq.n	402b2a <tcp_listen_with_backlog+0x9a>
  lpcb->callback_arg = pcb->callback_arg;
  402aa6:	6923      	ldr	r3, [r4, #16]
  402aa8:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
  402aaa:	8b63      	ldrh	r3, [r4, #26]
  402aac:	8343      	strh	r3, [r0, #26]
  lpcb->state = LISTEN;
  402aae:	2301      	movs	r3, #1
  402ab0:	7603      	strb	r3, [r0, #24]
  lpcb->prio = pcb->prio;
  402ab2:	7e63      	ldrb	r3, [r4, #25]
  402ab4:	7643      	strb	r3, [r0, #25]
  ip_set_option(lpcb, SOF_ACCEPTCONN);
  402ab6:	7a23      	ldrb	r3, [r4, #8]
  402ab8:	f043 0302 	orr.w	r3, r3, #2
  402abc:	7203      	strb	r3, [r0, #8]
  lpcb->ttl = pcb->ttl;
  402abe:	7aa3      	ldrb	r3, [r4, #10]
  402ac0:	7283      	strb	r3, [r0, #10]
  lpcb->tos = pcb->tos;
  402ac2:	7a63      	ldrb	r3, [r4, #9]
  402ac4:	7243      	strb	r3, [r0, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
  402ac6:	6823      	ldr	r3, [r4, #0]
  402ac8:	6003      	str	r3, [r0, #0]
  if (pcb->local_port != 0) {
  402aca:	8b63      	ldrh	r3, [r4, #26]
  402acc:	b143      	cbz	r3, 402ae0 <tcp_listen_with_backlog+0x50>
    TCP_RMV(&tcp_bound_pcbs, pcb);
  402ace:	4b19      	ldr	r3, [pc, #100]	; (402b34 <tcp_listen_with_backlog+0xa4>)
  402ad0:	681b      	ldr	r3, [r3, #0]
  402ad2:	429c      	cmp	r4, r3
  402ad4:	d112      	bne.n	402afc <tcp_listen_with_backlog+0x6c>
  402ad6:	68da      	ldr	r2, [r3, #12]
  402ad8:	4b16      	ldr	r3, [pc, #88]	; (402b34 <tcp_listen_with_backlog+0xa4>)
  402ada:	601a      	str	r2, [r3, #0]
  402adc:	2300      	movs	r3, #0
  402ade:	60e3      	str	r3, [r4, #12]
  memp_free(MEMP_TCP_PCB, pcb);
  402ae0:	4621      	mov	r1, r4
  402ae2:	2001      	movs	r0, #1
  402ae4:	4b14      	ldr	r3, [pc, #80]	; (402b38 <tcp_listen_with_backlog+0xa8>)
  402ae6:	4798      	blx	r3
  lpcb->accept = tcp_accept_null;
  402ae8:	4b14      	ldr	r3, [pc, #80]	; (402b3c <tcp_listen_with_backlog+0xac>)
  402aea:	616b      	str	r3, [r5, #20]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
  402aec:	4b14      	ldr	r3, [pc, #80]	; (402b40 <tcp_listen_with_backlog+0xb0>)
  402aee:	681a      	ldr	r2, [r3, #0]
  402af0:	60ea      	str	r2, [r5, #12]
  402af2:	601d      	str	r5, [r3, #0]
  402af4:	4b13      	ldr	r3, [pc, #76]	; (402b44 <tcp_listen_with_backlog+0xb4>)
  402af6:	4798      	blx	r3
  return (struct tcp_pcb *)lpcb;
  402af8:	4628      	mov	r0, r5
  402afa:	bd38      	pop	{r3, r4, r5, pc}
    TCP_RMV(&tcp_bound_pcbs, pcb);
  402afc:	4a12      	ldr	r2, [pc, #72]	; (402b48 <tcp_listen_with_backlog+0xb8>)
  402afe:	6013      	str	r3, [r2, #0]
  402b00:	2b00      	cmp	r3, #0
  402b02:	d0eb      	beq.n	402adc <tcp_listen_with_backlog+0x4c>
  402b04:	68da      	ldr	r2, [r3, #12]
  402b06:	4294      	cmp	r4, r2
  402b08:	d106      	bne.n	402b18 <tcp_listen_with_backlog+0x88>
  402b0a:	68e2      	ldr	r2, [r4, #12]
  402b0c:	60da      	str	r2, [r3, #12]
  402b0e:	e7e5      	b.n	402adc <tcp_listen_with_backlog+0x4c>
  402b10:	68d3      	ldr	r3, [r2, #12]
  402b12:	429c      	cmp	r4, r3
  402b14:	d005      	beq.n	402b22 <tcp_listen_with_backlog+0x92>
  402b16:	461a      	mov	r2, r3
  402b18:	2a00      	cmp	r2, #0
  402b1a:	d1f9      	bne.n	402b10 <tcp_listen_with_backlog+0x80>
  402b1c:	4b0a      	ldr	r3, [pc, #40]	; (402b48 <tcp_listen_with_backlog+0xb8>)
  402b1e:	601a      	str	r2, [r3, #0]
  402b20:	e7dc      	b.n	402adc <tcp_listen_with_backlog+0x4c>
  402b22:	4b09      	ldr	r3, [pc, #36]	; (402b48 <tcp_listen_with_backlog+0xb8>)
  402b24:	601a      	str	r2, [r3, #0]
  402b26:	4613      	mov	r3, r2
  402b28:	e7ef      	b.n	402b0a <tcp_listen_with_backlog+0x7a>
    return NULL;
  402b2a:	2000      	movs	r0, #0
}
  402b2c:	bd38      	pop	{r3, r4, r5, pc}
  402b2e:	bf00      	nop
  402b30:	00402455 	.word	0x00402455
  402b34:	20404974 	.word	0x20404974
  402b38:	00402475 	.word	0x00402475
  402b3c:	0040299d 	.word	0x0040299d
  402b40:	2040496c 	.word	0x2040496c
  402b44:	00402061 	.word	0x00402061
  402b48:	20404970 	.word	0x20404970

00402b4c <tcp_update_rcv_ann_wnd>:
{
  402b4c:	b470      	push	{r4, r5, r6}
  402b4e:	4602      	mov	r2, r0
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
  402b50:	6a85      	ldr	r5, [r0, #40]	; 0x28
  402b52:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
  402b54:	6b01      	ldr	r1, [r0, #48]	; 0x30
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
  402b56:	1963      	adds	r3, r4, r5
  402b58:	1a58      	subs	r0, r3, r1
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
  402b5a:	8ed3      	ldrh	r3, [r2, #54]	; 0x36
  402b5c:	f240 56b4 	movw	r6, #1460	; 0x5b4
  402b60:	42b3      	cmp	r3, r6
  402b62:	bf94      	ite	ls
  402b64:	1ac3      	subls	r3, r0, r3
  402b66:	1b83      	subhi	r3, r0, r6
  402b68:	2b00      	cmp	r3, #0
  402b6a:	db02      	blt.n	402b72 <tcp_update_rcv_ann_wnd+0x26>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
  402b6c:	85d4      	strh	r4, [r2, #46]	; 0x2e
}
  402b6e:	bc70      	pop	{r4, r5, r6}
  402b70:	4770      	bx	lr
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
  402b72:	1a6b      	subs	r3, r5, r1
  402b74:	2b00      	cmp	r3, #0
  402b76:	dd03      	ble.n	402b80 <tcp_update_rcv_ann_wnd+0x34>
      pcb->rcv_ann_wnd = 0;
  402b78:	2300      	movs	r3, #0
  402b7a:	85d3      	strh	r3, [r2, #46]	; 0x2e
    return 0;
  402b7c:	4618      	mov	r0, r3
  402b7e:	e7f6      	b.n	402b6e <tcp_update_rcv_ann_wnd+0x22>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
  402b80:	1b49      	subs	r1, r1, r5
      pcb->rcv_ann_wnd = (u16_t)new_rcv_ann_wnd;
  402b82:	85d1      	strh	r1, [r2, #46]	; 0x2e
    return 0;
  402b84:	2000      	movs	r0, #0
  402b86:	e7f2      	b.n	402b6e <tcp_update_rcv_ann_wnd+0x22>

00402b88 <tcp_recved>:
{
  402b88:	b510      	push	{r4, lr}
  402b8a:	4604      	mov	r4, r0
  pcb->rcv_wnd += len;
  402b8c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
  402b8e:	4419      	add	r1, r3
  402b90:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND) {
  402b92:	f640 3368 	movw	r3, #2920	; 0xb68
  402b96:	4299      	cmp	r1, r3
  402b98:	d808      	bhi.n	402bac <tcp_recved+0x24>
  pcb->rcv_wnd += len;
  402b9a:	8581      	strh	r1, [r0, #44]	; 0x2c
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
  402b9c:	4620      	mov	r0, r4
  402b9e:	4b09      	ldr	r3, [pc, #36]	; (402bc4 <tcp_recved+0x3c>)
  402ba0:	4798      	blx	r3
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
  402ba2:	f240 23d9 	movw	r3, #729	; 0x2d9
  402ba6:	4298      	cmp	r0, r3
  402ba8:	dc04      	bgt.n	402bb4 <tcp_recved+0x2c>
  402baa:	bd10      	pop	{r4, pc}
    pcb->rcv_wnd = TCP_WND;
  402bac:	f640 3368 	movw	r3, #2920	; 0xb68
  402bb0:	8583      	strh	r3, [r0, #44]	; 0x2c
  402bb2:	e7f3      	b.n	402b9c <tcp_recved+0x14>
    tcp_ack_now(pcb);
  402bb4:	7fa3      	ldrb	r3, [r4, #30]
  402bb6:	f043 0302 	orr.w	r3, r3, #2
  402bba:	77a3      	strb	r3, [r4, #30]
    tcp_output(pcb);
  402bbc:	4620      	mov	r0, r4
  402bbe:	4b02      	ldr	r3, [pc, #8]	; (402bc8 <tcp_recved+0x40>)
  402bc0:	4798      	blx	r3
}
  402bc2:	e7f2      	b.n	402baa <tcp_recved+0x22>
  402bc4:	00402b4d 	.word	0x00402b4d
  402bc8:	00405015 	.word	0x00405015

00402bcc <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
  402bcc:	b150      	cbz	r0, 402be4 <tcp_seg_free+0x18>
{
  402bce:	b510      	push	{r4, lr}
  402bd0:	4604      	mov	r4, r0
    if (seg->p != NULL) {
  402bd2:	6840      	ldr	r0, [r0, #4]
  402bd4:	b108      	cbz	r0, 402bda <tcp_seg_free+0xe>
      pbuf_free(seg->p);
  402bd6:	4b04      	ldr	r3, [pc, #16]	; (402be8 <tcp_seg_free+0x1c>)
  402bd8:	4798      	blx	r3
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
  402bda:	4621      	mov	r1, r4
  402bdc:	2003      	movs	r0, #3
  402bde:	4b03      	ldr	r3, [pc, #12]	; (402bec <tcp_seg_free+0x20>)
  402be0:	4798      	blx	r3
  402be2:	bd10      	pop	{r4, pc}
  402be4:	4770      	bx	lr
  402be6:	bf00      	nop
  402be8:	0040262d 	.word	0x0040262d
  402bec:	00402475 	.word	0x00402475

00402bf0 <tcp_segs_free>:
  while (seg != NULL) {
  402bf0:	b148      	cbz	r0, 402c06 <tcp_segs_free+0x16>
{
  402bf2:	b538      	push	{r3, r4, r5, lr}
  402bf4:	4603      	mov	r3, r0
    tcp_seg_free(seg);
  402bf6:	4d04      	ldr	r5, [pc, #16]	; (402c08 <tcp_segs_free+0x18>)
    struct tcp_seg *next = seg->next;
  402bf8:	681c      	ldr	r4, [r3, #0]
    tcp_seg_free(seg);
  402bfa:	4618      	mov	r0, r3
  402bfc:	47a8      	blx	r5
    seg = next;
  402bfe:	4623      	mov	r3, r4
  while (seg != NULL) {
  402c00:	2c00      	cmp	r4, #0
  402c02:	d1f9      	bne.n	402bf8 <tcp_segs_free+0x8>
  402c04:	bd38      	pop	{r3, r4, r5, pc}
  402c06:	4770      	bx	lr
  402c08:	00402bcd 	.word	0x00402bcd

00402c0c <tcp_setprio>:
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  pcb->prio = prio;
  402c0c:	7641      	strb	r1, [r0, #25]
  402c0e:	4770      	bx	lr

00402c10 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */ 
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
  402c10:	b538      	push	{r3, r4, r5, lr}
  402c12:	4605      	mov	r5, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
  402c14:	2003      	movs	r0, #3
  402c16:	4b08      	ldr	r3, [pc, #32]	; (402c38 <tcp_seg_copy+0x28>)
  402c18:	4798      	blx	r3
  if (cseg == NULL) {
  402c1a:	4604      	mov	r4, r0
  402c1c:	b150      	cbz	r0, 402c34 <tcp_seg_copy+0x24>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg)); 
  402c1e:	6828      	ldr	r0, [r5, #0]
  402c20:	6869      	ldr	r1, [r5, #4]
  402c22:	68aa      	ldr	r2, [r5, #8]
  402c24:	68eb      	ldr	r3, [r5, #12]
  402c26:	6020      	str	r0, [r4, #0]
  402c28:	6061      	str	r1, [r4, #4]
  402c2a:	60a2      	str	r2, [r4, #8]
  402c2c:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
  402c2e:	6860      	ldr	r0, [r4, #4]
  402c30:	4b02      	ldr	r3, [pc, #8]	; (402c3c <tcp_seg_copy+0x2c>)
  402c32:	4798      	blx	r3
  return cseg;
}
  402c34:	4620      	mov	r0, r4
  402c36:	bd38      	pop	{r3, r4, r5, pc}
  402c38:	00402455 	.word	0x00402455
  402c3c:	00402843 	.word	0x00402843

00402c40 <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  pcb->callback_arg = arg;
  402c40:	6101      	str	r1, [r0, #16]
  402c42:	4770      	bx	lr

00402c44 <tcp_recv>:
 */ 
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
  pcb->recv = recv;
  402c44:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  402c48:	4770      	bx	lr

00402c4a <tcp_sent>:
 */ 
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
  pcb->sent = sent;
  402c4a:	67c1      	str	r1, [r0, #124]	; 0x7c
  402c4c:	4770      	bx	lr

00402c4e <tcp_err>:
 */ 
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
  pcb->errf = err;
  402c4e:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
  402c52:	4770      	bx	lr

00402c54 <tcp_accept>:
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  pcb->accept = accept;
  402c54:	6141      	str	r1, [r0, #20]
  402c56:	4770      	bx	lr

00402c58 <tcp_poll>:
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
#if LWIP_CALLBACK_API
  pcb->poll = poll;
  402c58:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
#else /* LWIP_CALLBACK_API */  
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */  
  pcb->pollinterval = interval;
  402c5c:	f880 2020 	strb.w	r2, [r0, #32]
  402c60:	4770      	bx	lr
	...

00402c64 <tcp_pcb_purge>:
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  if (pcb->state != CLOSED &&
  402c64:	7e03      	ldrb	r3, [r0, #24]
     pcb->state != TIME_WAIT &&
  402c66:	2b0a      	cmp	r3, #10
  402c68:	d01a      	beq.n	402ca0 <tcp_pcb_purge+0x3c>
  402c6a:	2b01      	cmp	r3, #1
  402c6c:	d918      	bls.n	402ca0 <tcp_pcb_purge+0x3c>
{
  402c6e:	b570      	push	{r4, r5, r6, lr}
  402c70:	4604      	mov	r4, r0
      }
    }
#endif /* TCP_LISTEN_BACKLOG */


    if (pcb->refused_data != NULL) {
  402c72:	6f80      	ldr	r0, [r0, #120]	; 0x78
  402c74:	b118      	cbz	r0, 402c7e <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
  402c76:	4b0b      	ldr	r3, [pc, #44]	; (402ca4 <tcp_pcb_purge+0x40>)
  402c78:	4798      	blx	r3
      pcb->refused_data = NULL;
  402c7a:	2300      	movs	r3, #0
  402c7c:	67a3      	str	r3, [r4, #120]	; 0x78
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
  402c7e:	6f60      	ldr	r0, [r4, #116]	; 0x74
  402c80:	4e09      	ldr	r6, [pc, #36]	; (402ca8 <tcp_pcb_purge+0x44>)
  402c82:	47b0      	blx	r6
    pcb->ooseq = NULL;
  402c84:	2500      	movs	r5, #0
  402c86:	6765      	str	r5, [r4, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
  402c88:	f64f 73ff 	movw	r3, #65535	; 0xffff
  402c8c:	86a3      	strh	r3, [r4, #52]	; 0x34

    tcp_segs_free(pcb->unsent);
  402c8e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  402c90:	47b0      	blx	r6
    tcp_segs_free(pcb->unacked);
  402c92:	6f20      	ldr	r0, [r4, #112]	; 0x70
  402c94:	47b0      	blx	r6
    pcb->unacked = pcb->unsent = NULL;
  402c96:	66e5      	str	r5, [r4, #108]	; 0x6c
  402c98:	6725      	str	r5, [r4, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
  402c9a:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  402c9e:	bd70      	pop	{r4, r5, r6, pc}
  402ca0:	4770      	bx	lr
  402ca2:	bf00      	nop
  402ca4:	0040262d 	.word	0x0040262d
  402ca8:	00402bf1 	.word	0x00402bf1

00402cac <tcp_slowtmr>:
{
  402cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402cb0:	b083      	sub	sp, #12
  ++tcp_ticks;
  402cb2:	4ab6      	ldr	r2, [pc, #728]	; (402f8c <tcp_slowtmr+0x2e0>)
  402cb4:	6813      	ldr	r3, [r2, #0]
  402cb6:	3301      	adds	r3, #1
  402cb8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
  402cba:	4ab5      	ldr	r2, [pc, #724]	; (402f90 <tcp_slowtmr+0x2e4>)
  402cbc:	7813      	ldrb	r3, [r2, #0]
  402cbe:	3301      	adds	r3, #1
  402cc0:	7013      	strb	r3, [r2, #0]
    if (pcb->last_timer == tcp_timer_ctr) {
  402cc2:	4615      	mov	r5, r2
        tcp_active_pcbs_changed = 0;
  402cc4:	4fb3      	ldr	r7, [pc, #716]	; (402f94 <tcp_slowtmr+0x2e8>)
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
  402cc6:	f8df b300 	ldr.w	fp, [pc, #768]	; 402fc8 <tcp_slowtmr+0x31c>
  pcb = tcp_active_pcbs;
  402cca:	4bb3      	ldr	r3, [pc, #716]	; (402f98 <tcp_slowtmr+0x2ec>)
  402ccc:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
  402cce:	2c00      	cmp	r4, #0
  402cd0:	f000 817e 	beq.w	402fd0 <tcp_slowtmr+0x324>
  402cd4:	2600      	movs	r6, #0
  402cd6:	e003      	b.n	402ce0 <tcp_slowtmr+0x34>
      pcb = pcb->next;
  402cd8:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
  402cda:	2c00      	cmp	r4, #0
  402cdc:	f000 8178 	beq.w	402fd0 <tcp_slowtmr+0x324>
    if (pcb->last_timer == tcp_timer_ctr) {
  402ce0:	782b      	ldrb	r3, [r5, #0]
  402ce2:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
  402ce6:	429a      	cmp	r2, r3
  402ce8:	d0f6      	beq.n	402cd8 <tcp_slowtmr+0x2c>
    pcb->last_timer = tcp_timer_ctr;
  402cea:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
  402cee:	7e22      	ldrb	r2, [r4, #24]
  402cf0:	2a02      	cmp	r2, #2
  402cf2:	d024      	beq.n	402d3e <tcp_slowtmr+0x92>
    else if (pcb->nrtx == TCP_MAXRTX) {
  402cf4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
  402cf8:	2b0c      	cmp	r3, #12
  402cfa:	d061      	beq.n	402dc0 <tcp_slowtmr+0x114>
      if (pcb->persist_backoff > 0) {
  402cfc:	f894 8095 	ldrb.w	r8, [r4, #149]	; 0x95
  402d00:	f1b8 0f00 	cmp.w	r8, #0
  402d04:	d027      	beq.n	402d56 <tcp_slowtmr+0xaa>
        pcb->persist_cnt++;
  402d06:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
  402d0a:	3301      	adds	r3, #1
  402d0c:	b2db      	uxtb	r3, r3
  402d0e:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= tcp_persist_backoff[pcb->persist_backoff-1]) {
  402d12:	4aa2      	ldr	r2, [pc, #648]	; (402f9c <tcp_slowtmr+0x2f0>)
  402d14:	4442      	add	r2, r8
  402d16:	f812 2c01 	ldrb.w	r2, [r2, #-1]
  402d1a:	429a      	cmp	r2, r3
  402d1c:	d871      	bhi.n	402e02 <tcp_slowtmr+0x156>
          pcb->persist_cnt = 0;
  402d1e:	2300      	movs	r3, #0
  402d20:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
  402d24:	f1b8 0f06 	cmp.w	r8, #6
  402d28:	d803      	bhi.n	402d32 <tcp_slowtmr+0x86>
            pcb->persist_backoff++;
  402d2a:	f108 0801 	add.w	r8, r8, #1
  402d2e:	f884 8095 	strb.w	r8, [r4, #149]	; 0x95
          tcp_zero_window_probe(pcb);
  402d32:	4620      	mov	r0, r4
  402d34:	4b9a      	ldr	r3, [pc, #616]	; (402fa0 <tcp_slowtmr+0x2f4>)
  402d36:	4798      	blx	r3
    pcb_remove = 0;
  402d38:	f04f 0800 	mov.w	r8, #0
  402d3c:	e042      	b.n	402dc4 <tcp_slowtmr+0x118>
    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
  402d3e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
  402d42:	2b06      	cmp	r3, #6
  402d44:	f000 808d 	beq.w	402e62 <tcp_slowtmr+0x1b6>
    else if (pcb->nrtx == TCP_MAXRTX) {
  402d48:	2b0c      	cmp	r3, #12
  402d4a:	d1d7      	bne.n	402cfc <tcp_slowtmr+0x50>
    pcb_reset = 0;
  402d4c:	f04f 0900 	mov.w	r9, #0
    else if (pcb->nrtx == TCP_MAXRTX) {
  402d50:	f04f 0801 	mov.w	r8, #1
  402d54:	e08c      	b.n	402e70 <tcp_slowtmr+0x1c4>
        if(pcb->rtime >= 0) {
  402d56:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
  402d5a:	2900      	cmp	r1, #0
  402d5c:	db01      	blt.n	402d62 <tcp_slowtmr+0xb6>
          ++pcb->rtime;
  402d5e:	3101      	adds	r1, #1
  402d60:	86a1      	strh	r1, [r4, #52]	; 0x34
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
  402d62:	6f21      	ldr	r1, [r4, #112]	; 0x70
  402d64:	b371      	cbz	r1, 402dc4 <tcp_slowtmr+0x118>
  402d66:	f9b4 0034 	ldrsh.w	r0, [r4, #52]	; 0x34
  402d6a:	f9b4 1044 	ldrsh.w	r1, [r4, #68]	; 0x44
  402d6e:	4288      	cmp	r0, r1
  402d70:	db28      	blt.n	402dc4 <tcp_slowtmr+0x118>
          if (pcb->state != SYN_SENT) {
  402d72:	2a02      	cmp	r2, #2
  402d74:	d00b      	beq.n	402d8e <tcp_slowtmr+0xe2>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[pcb->nrtx];
  402d76:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
  402d7a:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
  402d7e:	eb02 02e1 	add.w	r2, r2, r1, asr #3
  402d82:	4988      	ldr	r1, [pc, #544]	; (402fa4 <tcp_slowtmr+0x2f8>)
  402d84:	5ccb      	ldrb	r3, [r1, r3]
  402d86:	fa02 f303 	lsl.w	r3, r2, r3
  402d8a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
          pcb->rtime = 0;
  402d8e:	2300      	movs	r3, #0
  402d90:	86a3      	strh	r3, [r4, #52]	; 0x34
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
  402d92:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
  402d96:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
          pcb->ssthresh = eff_wnd >> 1;
  402d9a:	4293      	cmp	r3, r2
  402d9c:	bf28      	it	cs
  402d9e:	4613      	movcs	r3, r2
  402da0:	085b      	lsrs	r3, r3, #1
  402da2:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
          if (pcb->ssthresh < (pcb->mss << 1)) {
  402da6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
  402da8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
  402dac:	da02      	bge.n	402db4 <tcp_slowtmr+0x108>
            pcb->ssthresh = (pcb->mss << 1);
  402dae:	0053      	lsls	r3, r2, #1
  402db0:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
          pcb->cwnd = pcb->mss;
  402db4:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
          tcp_rexmit_rto(pcb);
  402db8:	4620      	mov	r0, r4
  402dba:	4b7b      	ldr	r3, [pc, #492]	; (402fa8 <tcp_slowtmr+0x2fc>)
  402dbc:	4798      	blx	r3
  402dbe:	e001      	b.n	402dc4 <tcp_slowtmr+0x118>
      ++pcb_remove;
  402dc0:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
  402dc4:	7e23      	ldrb	r3, [r4, #24]
  402dc6:	2b06      	cmp	r3, #6
  402dc8:	d01e      	beq.n	402e08 <tcp_slowtmr+0x15c>
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
  402dca:	7a22      	ldrb	r2, [r4, #8]
  402dcc:	f012 0f08 	tst.w	r2, #8
  402dd0:	d04c      	beq.n	402e6c <tcp_slowtmr+0x1c0>
  402dd2:	2b04      	cmp	r3, #4
  402dd4:	d001      	beq.n	402dda <tcp_slowtmr+0x12e>
  402dd6:	2b07      	cmp	r3, #7
  402dd8:	d17c      	bne.n	402ed4 <tcp_slowtmr+0x228>
      if((u32_t)(tcp_ticks - pcb->tmr) >
  402dda:	4b6c      	ldr	r3, [pc, #432]	; (402f8c <tcp_slowtmr+0x2e0>)
  402ddc:	681a      	ldr	r2, [r3, #0]
  402dde:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402de0:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
  402de2:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
  402de6:	4b71      	ldr	r3, [pc, #452]	; (402fac <tcp_slowtmr+0x300>)
  402de8:	440b      	add	r3, r1
  402dea:	fbab 0303 	umull	r0, r3, fp, r3
      if((u32_t)(tcp_ticks - pcb->tmr) >
  402dee:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
  402df2:	d91e      	bls.n	402e32 <tcp_slowtmr+0x186>
        ++pcb_remove;
  402df4:	f108 0801 	add.w	r8, r8, #1
  402df8:	fa5f f888 	uxtb.w	r8, r8
        ++pcb_reset;
  402dfc:	f04f 0901 	mov.w	r9, #1
  402e00:	e036      	b.n	402e70 <tcp_slowtmr+0x1c4>
    pcb_remove = 0;
  402e02:	f04f 0800 	mov.w	r8, #0
  402e06:	e7dd      	b.n	402dc4 <tcp_slowtmr+0x118>
      if (pcb->flags & TF_RXCLOSED) {
  402e08:	7fa3      	ldrb	r3, [r4, #30]
  402e0a:	f013 0f10 	tst.w	r3, #16
  402e0e:	d009      	beq.n	402e24 <tcp_slowtmr+0x178>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
  402e10:	4b5e      	ldr	r3, [pc, #376]	; (402f8c <tcp_slowtmr+0x2e0>)
  402e12:	681b      	ldr	r3, [r3, #0]
  402e14:	6a62      	ldr	r2, [r4, #36]	; 0x24
  402e16:	1a9b      	subs	r3, r3, r2
  402e18:	2b28      	cmp	r3, #40	; 0x28
  402e1a:	d903      	bls.n	402e24 <tcp_slowtmr+0x178>
          ++pcb_remove;
  402e1c:	f108 0801 	add.w	r8, r8, #1
  402e20:	fa5f f888 	uxtb.w	r8, r8
    if (pcb->ooseq != NULL &&
  402e24:	6f60      	ldr	r0, [r4, #116]	; 0x74
  402e26:	2800      	cmp	r0, #0
  402e28:	f000 80f4 	beq.w	403014 <tcp_slowtmr+0x368>
    pcb_reset = 0;
  402e2c:	f04f 0900 	mov.w	r9, #0
  402e30:	e020      	b.n	402e74 <tcp_slowtmr+0x1c8>
              (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
  402e32:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
  402e36:	485e      	ldr	r0, [pc, #376]	; (402fb0 <tcp_slowtmr+0x304>)
  402e38:	fb00 1303 	mla	r3, r0, r3, r1
              / TCP_SLOW_INTERVAL)
  402e3c:	fbab 1303 	umull	r1, r3, fp, r3
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
  402e40:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
  402e44:	d802      	bhi.n	402e4c <tcp_slowtmr+0x1a0>
    pcb_reset = 0;
  402e46:	f04f 0900 	mov.w	r9, #0
  402e4a:	e011      	b.n	402e70 <tcp_slowtmr+0x1c4>
        tcp_keepalive(pcb);
  402e4c:	4620      	mov	r0, r4
  402e4e:	4b59      	ldr	r3, [pc, #356]	; (402fb4 <tcp_slowtmr+0x308>)
  402e50:	4798      	blx	r3
        pcb->keep_cnt_sent++;
  402e52:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
  402e56:	3301      	adds	r3, #1
  402e58:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
  402e5c:	f04f 0900 	mov.w	r9, #0
  402e60:	e006      	b.n	402e70 <tcp_slowtmr+0x1c4>
  402e62:	f04f 0900 	mov.w	r9, #0
  402e66:	f04f 0801 	mov.w	r8, #1
  402e6a:	e001      	b.n	402e70 <tcp_slowtmr+0x1c4>
  402e6c:	f04f 0900 	mov.w	r9, #0
    if (pcb->ooseq != NULL &&
  402e70:	6f60      	ldr	r0, [r4, #116]	; 0x74
  402e72:	b150      	cbz	r0, 402e8a <tcp_slowtmr+0x1de>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
  402e74:	4b45      	ldr	r3, [pc, #276]	; (402f8c <tcp_slowtmr+0x2e0>)
  402e76:	681a      	ldr	r2, [r3, #0]
  402e78:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402e7a:	1ad2      	subs	r2, r2, r3
  402e7c:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
  402e80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
  402e84:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
  402e88:	d227      	bcs.n	402eda <tcp_slowtmr+0x22e>
    if (pcb->state == SYN_RCVD) {
  402e8a:	7e23      	ldrb	r3, [r4, #24]
  402e8c:	2b03      	cmp	r3, #3
  402e8e:	d029      	beq.n	402ee4 <tcp_slowtmr+0x238>
    if (pcb->state == LAST_ACK) {
  402e90:	2b09      	cmp	r3, #9
  402e92:	d032      	beq.n	402efa <tcp_slowtmr+0x24e>
    if (pcb_remove) {
  402e94:	f1b8 0f00 	cmp.w	r8, #0
  402e98:	d13a      	bne.n	402f10 <tcp_slowtmr+0x264>
      pcb = pcb->next;
  402e9a:	f8d4 800c 	ldr.w	r8, [r4, #12]
      ++prev->polltmr;
  402e9e:	7fe3      	ldrb	r3, [r4, #31]
  402ea0:	3301      	adds	r3, #1
  402ea2:	b2db      	uxtb	r3, r3
  402ea4:	77e3      	strb	r3, [r4, #31]
      if (prev->polltmr >= prev->pollinterval) {
  402ea6:	f894 2020 	ldrb.w	r2, [r4, #32]
  402eaa:	429a      	cmp	r2, r3
  402eac:	d86a      	bhi.n	402f84 <tcp_slowtmr+0x2d8>
        prev->polltmr = 0;
  402eae:	2300      	movs	r3, #0
  402eb0:	77e3      	strb	r3, [r4, #31]
        tcp_active_pcbs_changed = 0;
  402eb2:	703b      	strb	r3, [r7, #0]
        TCP_EVENT_POLL(prev, err);
  402eb4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
  402eb8:	2b00      	cmp	r3, #0
  402eba:	d05b      	beq.n	402f74 <tcp_slowtmr+0x2c8>
  402ebc:	4621      	mov	r1, r4
  402ebe:	6920      	ldr	r0, [r4, #16]
  402ec0:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
  402ec2:	783b      	ldrb	r3, [r7, #0]
  402ec4:	2b00      	cmp	r3, #0
  402ec6:	f47f af00 	bne.w	402cca <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
  402eca:	2800      	cmp	r0, #0
  402ecc:	d052      	beq.n	402f74 <tcp_slowtmr+0x2c8>
  402ece:	4626      	mov	r6, r4
      pcb = pcb->next;
  402ed0:	4644      	mov	r4, r8
  402ed2:	e702      	b.n	402cda <tcp_slowtmr+0x2e>
    pcb_reset = 0;
  402ed4:	f04f 0900 	mov.w	r9, #0
  402ed8:	e7ca      	b.n	402e70 <tcp_slowtmr+0x1c4>
      tcp_segs_free(pcb->ooseq);
  402eda:	4b37      	ldr	r3, [pc, #220]	; (402fb8 <tcp_slowtmr+0x30c>)
  402edc:	4798      	blx	r3
      pcb->ooseq = NULL;
  402ede:	2300      	movs	r3, #0
  402ee0:	6763      	str	r3, [r4, #116]	; 0x74
  402ee2:	e7d2      	b.n	402e8a <tcp_slowtmr+0x1de>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  402ee4:	4b29      	ldr	r3, [pc, #164]	; (402f8c <tcp_slowtmr+0x2e0>)
  402ee6:	681b      	ldr	r3, [r3, #0]
  402ee8:	6a62      	ldr	r2, [r4, #36]	; 0x24
  402eea:	1a9b      	subs	r3, r3, r2
  402eec:	2b28      	cmp	r3, #40	; 0x28
  402eee:	d9d1      	bls.n	402e94 <tcp_slowtmr+0x1e8>
        ++pcb_remove;
  402ef0:	f108 0801 	add.w	r8, r8, #1
  402ef4:	fa5f f888 	uxtb.w	r8, r8
  402ef8:	e7cc      	b.n	402e94 <tcp_slowtmr+0x1e8>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  402efa:	4b24      	ldr	r3, [pc, #144]	; (402f8c <tcp_slowtmr+0x2e0>)
  402efc:	681b      	ldr	r3, [r3, #0]
  402efe:	6a62      	ldr	r2, [r4, #36]	; 0x24
  402f00:	1a9b      	subs	r3, r3, r2
  402f02:	2bf0      	cmp	r3, #240	; 0xf0
  402f04:	d9c6      	bls.n	402e94 <tcp_slowtmr+0x1e8>
        ++pcb_remove;
  402f06:	f108 0801 	add.w	r8, r8, #1
  402f0a:	fa5f f888 	uxtb.w	r8, r8
  402f0e:	e7c1      	b.n	402e94 <tcp_slowtmr+0x1e8>
      tcp_pcb_purge(pcb);
  402f10:	4620      	mov	r0, r4
  402f12:	4b2a      	ldr	r3, [pc, #168]	; (402fbc <tcp_slowtmr+0x310>)
  402f14:	4798      	blx	r3
      if (prev != NULL) {
  402f16:	b1ee      	cbz	r6, 402f54 <tcp_slowtmr+0x2a8>
        prev->next = pcb->next;
  402f18:	68e3      	ldr	r3, [r4, #12]
  402f1a:	60f3      	str	r3, [r6, #12]
      if (pcb_reset) {
  402f1c:	f1b9 0f00 	cmp.w	r9, #0
  402f20:	d11c      	bne.n	402f5c <tcp_slowtmr+0x2b0>
      err_fn = pcb->errf;
  402f22:	f8d4 808c 	ldr.w	r8, [r4, #140]	; 0x8c
      err_arg = pcb->callback_arg;
  402f26:	f8d4 a010 	ldr.w	sl, [r4, #16]
      pcb = pcb->next;
  402f2a:	f8d4 900c 	ldr.w	r9, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
  402f2e:	4621      	mov	r1, r4
  402f30:	2001      	movs	r0, #1
  402f32:	4b23      	ldr	r3, [pc, #140]	; (402fc0 <tcp_slowtmr+0x314>)
  402f34:	4798      	blx	r3
      tcp_active_pcbs_changed = 0;
  402f36:	2300      	movs	r3, #0
  402f38:	703b      	strb	r3, [r7, #0]
      TCP_EVENT_ERR(err_fn, err_arg, ERR_ABRT);
  402f3a:	f1b8 0f00 	cmp.w	r8, #0
  402f3e:	d01f      	beq.n	402f80 <tcp_slowtmr+0x2d4>
  402f40:	f06f 0109 	mvn.w	r1, #9
  402f44:	4650      	mov	r0, sl
  402f46:	47c0      	blx	r8
      if (tcp_active_pcbs_changed) {
  402f48:	783b      	ldrb	r3, [r7, #0]
  402f4a:	2b00      	cmp	r3, #0
  402f4c:	f47f aebd 	bne.w	402cca <tcp_slowtmr+0x1e>
      pcb = pcb->next;
  402f50:	464c      	mov	r4, r9
  402f52:	e6c2      	b.n	402cda <tcp_slowtmr+0x2e>
        tcp_active_pcbs = pcb->next;
  402f54:	68e3      	ldr	r3, [r4, #12]
  402f56:	4a10      	ldr	r2, [pc, #64]	; (402f98 <tcp_slowtmr+0x2ec>)
  402f58:	6013      	str	r3, [r2, #0]
  402f5a:	e7df      	b.n	402f1c <tcp_slowtmr+0x270>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  402f5c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  402f5e:	6d20      	ldr	r0, [r4, #80]	; 0x50
  402f60:	8ba3      	ldrh	r3, [r4, #28]
  402f62:	9301      	str	r3, [sp, #4]
  402f64:	8b63      	ldrh	r3, [r4, #26]
  402f66:	9300      	str	r3, [sp, #0]
  402f68:	1d23      	adds	r3, r4, #4
  402f6a:	4622      	mov	r2, r4
  402f6c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 402fcc <tcp_slowtmr+0x320>
  402f70:	47c0      	blx	r8
  402f72:	e7d6      	b.n	402f22 <tcp_slowtmr+0x276>
          tcp_output(prev);
  402f74:	4620      	mov	r0, r4
  402f76:	4b13      	ldr	r3, [pc, #76]	; (402fc4 <tcp_slowtmr+0x318>)
  402f78:	4798      	blx	r3
  402f7a:	4626      	mov	r6, r4
      pcb = pcb->next;
  402f7c:	4644      	mov	r4, r8
  402f7e:	e6ac      	b.n	402cda <tcp_slowtmr+0x2e>
      pcb = pcb->next;
  402f80:	464c      	mov	r4, r9
  402f82:	e6aa      	b.n	402cda <tcp_slowtmr+0x2e>
  402f84:	4626      	mov	r6, r4
      pcb = pcb->next;
  402f86:	4644      	mov	r4, r8
  402f88:	e6a7      	b.n	402cda <tcp_slowtmr+0x2e>
  402f8a:	bf00      	nop
  402f8c:	20404968 	.word	0x20404968
  402f90:	204025be 	.word	0x204025be
  402f94:	20404960 	.word	0x20404960
  402f98:	20404964 	.word	0x20404964
  402f9c:	0040e910 	.word	0x0040e910
  402fa0:	004054ed 	.word	0x004054ed
  402fa4:	0040e8f0 	.word	0x0040e8f0
  402fa8:	00405391 	.word	0x00405391
  402fac:	000a4cb8 	.word	0x000a4cb8
  402fb0:	000124f8 	.word	0x000124f8
  402fb4:	00405481 	.word	0x00405481
  402fb8:	00402bf1 	.word	0x00402bf1
  402fbc:	00402c65 	.word	0x00402c65
  402fc0:	00402475 	.word	0x00402475
  402fc4:	00405015 	.word	0x00405015
  402fc8:	10624dd3 	.word	0x10624dd3
  402fcc:	004052ed 	.word	0x004052ed
  pcb = tcp_tw_pcbs;
  402fd0:	4b13      	ldr	r3, [pc, #76]	; (403020 <tcp_slowtmr+0x374>)
  402fd2:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
  402fd4:	b30c      	cbz	r4, 40301a <tcp_slowtmr+0x36e>
  402fd6:	2500      	movs	r5, #0
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  402fd8:	4e12      	ldr	r6, [pc, #72]	; (403024 <tcp_slowtmr+0x378>)
      tcp_pcb_purge(pcb);
  402fda:	f8df 8050 	ldr.w	r8, [pc, #80]	; 40302c <tcp_slowtmr+0x380>
      memp_free(MEMP_TCP_PCB, pcb2);
  402fde:	4f12      	ldr	r7, [pc, #72]	; (403028 <tcp_slowtmr+0x37c>)
  402fe0:	e006      	b.n	402ff0 <tcp_slowtmr+0x344>
        tcp_tw_pcbs = pcb->next;
  402fe2:	68e2      	ldr	r2, [r4, #12]
  402fe4:	4b0e      	ldr	r3, [pc, #56]	; (403020 <tcp_slowtmr+0x374>)
  402fe6:	601a      	str	r2, [r3, #0]
  402fe8:	e00d      	b.n	403006 <tcp_slowtmr+0x35a>
      pcb = pcb->next;
  402fea:	4625      	mov	r5, r4
  402fec:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
  402fee:	b1a4      	cbz	r4, 40301a <tcp_slowtmr+0x36e>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  402ff0:	6a62      	ldr	r2, [r4, #36]	; 0x24
  402ff2:	6833      	ldr	r3, [r6, #0]
  402ff4:	1a9b      	subs	r3, r3, r2
    if (pcb_remove) {
  402ff6:	2bf0      	cmp	r3, #240	; 0xf0
  402ff8:	d9f7      	bls.n	402fea <tcp_slowtmr+0x33e>
      tcp_pcb_purge(pcb);
  402ffa:	4620      	mov	r0, r4
  402ffc:	47c0      	blx	r8
      if (prev != NULL) {
  402ffe:	2d00      	cmp	r5, #0
  403000:	d0ef      	beq.n	402fe2 <tcp_slowtmr+0x336>
        prev->next = pcb->next;
  403002:	68e3      	ldr	r3, [r4, #12]
  403004:	60eb      	str	r3, [r5, #12]
      pcb = pcb->next;
  403006:	f8d4 900c 	ldr.w	r9, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
  40300a:	4621      	mov	r1, r4
  40300c:	2001      	movs	r0, #1
  40300e:	47b8      	blx	r7
      pcb = pcb->next;
  403010:	464c      	mov	r4, r9
  403012:	e7ec      	b.n	402fee <tcp_slowtmr+0x342>
    pcb_reset = 0;
  403014:	f04f 0900 	mov.w	r9, #0
  403018:	e73c      	b.n	402e94 <tcp_slowtmr+0x1e8>
}
  40301a:	b003      	add	sp, #12
  40301c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403020:	20404978 	.word	0x20404978
  403024:	20404968 	.word	0x20404968
  403028:	00402475 	.word	0x00402475
  40302c:	00402c65 	.word	0x00402c65

00403030 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  403030:	b510      	push	{r4, lr}
  403032:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
  403034:	6802      	ldr	r2, [r0, #0]
  403036:	428a      	cmp	r2, r1
  403038:	d00b      	beq.n	403052 <tcp_pcb_remove+0x22>
  40303a:	4b18      	ldr	r3, [pc, #96]	; (40309c <tcp_pcb_remove+0x6c>)
  40303c:	601a      	str	r2, [r3, #0]
  40303e:	b17a      	cbz	r2, 403060 <tcp_pcb_remove+0x30>
  403040:	68d3      	ldr	r3, [r2, #12]
  403042:	4299      	cmp	r1, r3
  403044:	d01d      	beq.n	403082 <tcp_pcb_remove+0x52>
  403046:	b1f3      	cbz	r3, 403086 <tcp_pcb_remove+0x56>
  403048:	68da      	ldr	r2, [r3, #12]
  40304a:	4294      	cmp	r4, r2
  40304c:	d004      	beq.n	403058 <tcp_pcb_remove+0x28>
  40304e:	4613      	mov	r3, r2
  403050:	e7f9      	b.n	403046 <tcp_pcb_remove+0x16>
  403052:	68d3      	ldr	r3, [r2, #12]
  403054:	6003      	str	r3, [r0, #0]
  403056:	e003      	b.n	403060 <tcp_pcb_remove+0x30>
  403058:	4a10      	ldr	r2, [pc, #64]	; (40309c <tcp_pcb_remove+0x6c>)
  40305a:	6013      	str	r3, [r2, #0]
  40305c:	68e2      	ldr	r2, [r4, #12]
  40305e:	60da      	str	r2, [r3, #12]
  403060:	2300      	movs	r3, #0
  403062:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
  403064:	4620      	mov	r0, r4
  403066:	4b0e      	ldr	r3, [pc, #56]	; (4030a0 <tcp_pcb_remove+0x70>)
  403068:	4798      	blx	r3
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
  40306a:	7e23      	ldrb	r3, [r4, #24]
  40306c:	2b0a      	cmp	r3, #10
  40306e:	d005      	beq.n	40307c <tcp_pcb_remove+0x4c>
  403070:	2b01      	cmp	r3, #1
  403072:	d003      	beq.n	40307c <tcp_pcb_remove+0x4c>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
  403074:	7fa3      	ldrb	r3, [r4, #30]
     pcb->state != LISTEN &&
  403076:	f013 0f01 	tst.w	r3, #1
  40307a:	d108      	bne.n	40308e <tcp_pcb_remove+0x5e>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
  40307c:	2300      	movs	r3, #0
  40307e:	7623      	strb	r3, [r4, #24]
  403080:	bd10      	pop	{r4, pc}
  TCP_RMV(pcblist, pcb);
  403082:	4613      	mov	r3, r2
  403084:	e7ea      	b.n	40305c <tcp_pcb_remove+0x2c>
  403086:	2200      	movs	r2, #0
  403088:	4b04      	ldr	r3, [pc, #16]	; (40309c <tcp_pcb_remove+0x6c>)
  40308a:	601a      	str	r2, [r3, #0]
  40308c:	e7e8      	b.n	403060 <tcp_pcb_remove+0x30>
    pcb->flags |= TF_ACK_NOW;
  40308e:	f043 0302 	orr.w	r3, r3, #2
  403092:	77a3      	strb	r3, [r4, #30]
    tcp_output(pcb);
  403094:	4620      	mov	r0, r4
  403096:	4b03      	ldr	r3, [pc, #12]	; (4030a4 <tcp_pcb_remove+0x74>)
  403098:	4798      	blx	r3
  40309a:	e7ef      	b.n	40307c <tcp_pcb_remove+0x4c>
  40309c:	20404970 	.word	0x20404970
  4030a0:	00402c65 	.word	0x00402c65
  4030a4:	00405015 	.word	0x00405015

004030a8 <tcp_close_shutdown>:
{
  4030a8:	b530      	push	{r4, r5, lr}
  4030aa:	b083      	sub	sp, #12
  4030ac:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
  4030ae:	b121      	cbz	r1, 4030ba <tcp_close_shutdown+0x12>
  4030b0:	7e03      	ldrb	r3, [r0, #24]
  4030b2:	2b04      	cmp	r3, #4
  4030b4:	d00b      	beq.n	4030ce <tcp_close_shutdown+0x26>
  4030b6:	2b07      	cmp	r3, #7
  4030b8:	d009      	beq.n	4030ce <tcp_close_shutdown+0x26>
  switch (pcb->state) {
  4030ba:	7e23      	ldrb	r3, [r4, #24]
  4030bc:	2b07      	cmp	r3, #7
  4030be:	f200 80b0 	bhi.w	403222 <tcp_close_shutdown+0x17a>
  4030c2:	e8df f003 	tbb	[pc, r3]
  4030c6:	754e      	.short	0x754e
  4030c8:	ae9a8b7f 	.word	0xae9a8b7f
  4030cc:	a3ae      	.short	0xa3ae
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND)) {
  4030ce:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  4030d0:	b1e3      	cbz	r3, 40310c <tcp_close_shutdown+0x64>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  4030d2:	8ba3      	ldrh	r3, [r4, #28]
  4030d4:	9301      	str	r3, [sp, #4]
  4030d6:	8b63      	ldrh	r3, [r4, #26]
  4030d8:	9300      	str	r3, [sp, #0]
  4030da:	1d23      	adds	r3, r4, #4
  4030dc:	4622      	mov	r2, r4
  4030de:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  4030e0:	6d20      	ldr	r0, [r4, #80]	; 0x50
  4030e2:	4d51      	ldr	r5, [pc, #324]	; (403228 <tcp_close_shutdown+0x180>)
  4030e4:	47a8      	blx	r5
      tcp_pcb_purge(pcb);
  4030e6:	4620      	mov	r0, r4
  4030e8:	4b50      	ldr	r3, [pc, #320]	; (40322c <tcp_close_shutdown+0x184>)
  4030ea:	4798      	blx	r3
      TCP_RMV_ACTIVE(pcb);
  4030ec:	4b50      	ldr	r3, [pc, #320]	; (403230 <tcp_close_shutdown+0x188>)
  4030ee:	681a      	ldr	r2, [r3, #0]
  4030f0:	4294      	cmp	r4, r2
  4030f2:	d011      	beq.n	403118 <tcp_close_shutdown+0x70>
  4030f4:	4b4f      	ldr	r3, [pc, #316]	; (403234 <tcp_close_shutdown+0x18c>)
  4030f6:	601a      	str	r2, [r3, #0]
  4030f8:	b1aa      	cbz	r2, 403126 <tcp_close_shutdown+0x7e>
  4030fa:	68d3      	ldr	r3, [r2, #12]
  4030fc:	429c      	cmp	r4, r3
  4030fe:	d020      	beq.n	403142 <tcp_close_shutdown+0x9a>
  403100:	b30b      	cbz	r3, 403146 <tcp_close_shutdown+0x9e>
  403102:	68da      	ldr	r2, [r3, #12]
  403104:	4294      	cmp	r4, r2
  403106:	d00a      	beq.n	40311e <tcp_close_shutdown+0x76>
  403108:	4613      	mov	r3, r2
  40310a:	e7f9      	b.n	403100 <tcp_close_shutdown+0x58>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND)) {
  40310c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
  40310e:	f640 3368 	movw	r3, #2920	; 0xb68
  403112:	429a      	cmp	r2, r3
  403114:	d1dd      	bne.n	4030d2 <tcp_close_shutdown+0x2a>
  403116:	e7d0      	b.n	4030ba <tcp_close_shutdown+0x12>
      TCP_RMV_ACTIVE(pcb);
  403118:	68d2      	ldr	r2, [r2, #12]
  40311a:	601a      	str	r2, [r3, #0]
  40311c:	e003      	b.n	403126 <tcp_close_shutdown+0x7e>
  40311e:	4a45      	ldr	r2, [pc, #276]	; (403234 <tcp_close_shutdown+0x18c>)
  403120:	6013      	str	r3, [r2, #0]
  403122:	68e2      	ldr	r2, [r4, #12]
  403124:	60da      	str	r2, [r3, #12]
  403126:	2300      	movs	r3, #0
  403128:	60e3      	str	r3, [r4, #12]
  40312a:	2201      	movs	r2, #1
  40312c:	4b42      	ldr	r3, [pc, #264]	; (403238 <tcp_close_shutdown+0x190>)
  40312e:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
  403130:	7e23      	ldrb	r3, [r4, #24]
  403132:	2b04      	cmp	r3, #4
  403134:	d00b      	beq.n	40314e <tcp_close_shutdown+0xa6>
        memp_free(MEMP_TCP_PCB, pcb);
  403136:	4621      	mov	r1, r4
  403138:	2001      	movs	r0, #1
  40313a:	4b40      	ldr	r3, [pc, #256]	; (40323c <tcp_close_shutdown+0x194>)
  40313c:	4798      	blx	r3
      return ERR_OK;
  40313e:	2300      	movs	r3, #0
  403140:	e058      	b.n	4031f4 <tcp_close_shutdown+0x14c>
      TCP_RMV_ACTIVE(pcb);
  403142:	4613      	mov	r3, r2
  403144:	e7ed      	b.n	403122 <tcp_close_shutdown+0x7a>
  403146:	2200      	movs	r2, #0
  403148:	4b3a      	ldr	r3, [pc, #232]	; (403234 <tcp_close_shutdown+0x18c>)
  40314a:	601a      	str	r2, [r3, #0]
  40314c:	e7eb      	b.n	403126 <tcp_close_shutdown+0x7e>
        pcb->state = TIME_WAIT;
  40314e:	230a      	movs	r3, #10
  403150:	7623      	strb	r3, [r4, #24]
        TCP_REG(&tcp_tw_pcbs, pcb);
  403152:	4b3b      	ldr	r3, [pc, #236]	; (403240 <tcp_close_shutdown+0x198>)
  403154:	681a      	ldr	r2, [r3, #0]
  403156:	60e2      	str	r2, [r4, #12]
  403158:	601c      	str	r4, [r3, #0]
  40315a:	4b3a      	ldr	r3, [pc, #232]	; (403244 <tcp_close_shutdown+0x19c>)
  40315c:	4798      	blx	r3
      return ERR_OK;
  40315e:	2300      	movs	r3, #0
  403160:	e048      	b.n	4031f4 <tcp_close_shutdown+0x14c>
    if (pcb->local_port != 0) {
  403162:	8b63      	ldrh	r3, [r4, #26]
  403164:	b1c3      	cbz	r3, 403198 <tcp_close_shutdown+0xf0>
      TCP_RMV(&tcp_bound_pcbs, pcb);
  403166:	4b38      	ldr	r3, [pc, #224]	; (403248 <tcp_close_shutdown+0x1a0>)
  403168:	681a      	ldr	r2, [r3, #0]
  40316a:	4294      	cmp	r4, r2
  40316c:	d00b      	beq.n	403186 <tcp_close_shutdown+0xde>
  40316e:	4b31      	ldr	r3, [pc, #196]	; (403234 <tcp_close_shutdown+0x18c>)
  403170:	601a      	str	r2, [r3, #0]
  403172:	b17a      	cbz	r2, 403194 <tcp_close_shutdown+0xec>
  403174:	68d3      	ldr	r3, [r2, #12]
  403176:	429c      	cmp	r4, r3
  403178:	d014      	beq.n	4031a4 <tcp_close_shutdown+0xfc>
  40317a:	b1ab      	cbz	r3, 4031a8 <tcp_close_shutdown+0x100>
  40317c:	68da      	ldr	r2, [r3, #12]
  40317e:	4294      	cmp	r4, r2
  403180:	d004      	beq.n	40318c <tcp_close_shutdown+0xe4>
  403182:	4613      	mov	r3, r2
  403184:	e7f9      	b.n	40317a <tcp_close_shutdown+0xd2>
  403186:	68d2      	ldr	r2, [r2, #12]
  403188:	601a      	str	r2, [r3, #0]
  40318a:	e003      	b.n	403194 <tcp_close_shutdown+0xec>
  40318c:	4a29      	ldr	r2, [pc, #164]	; (403234 <tcp_close_shutdown+0x18c>)
  40318e:	6013      	str	r3, [r2, #0]
  403190:	68e2      	ldr	r2, [r4, #12]
  403192:	60da      	str	r2, [r3, #12]
  403194:	2300      	movs	r3, #0
  403196:	60e3      	str	r3, [r4, #12]
    memp_free(MEMP_TCP_PCB, pcb);
  403198:	4621      	mov	r1, r4
  40319a:	2001      	movs	r0, #1
  40319c:	4b27      	ldr	r3, [pc, #156]	; (40323c <tcp_close_shutdown+0x194>)
  40319e:	4798      	blx	r3
    err = ERR_OK;
  4031a0:	2300      	movs	r3, #0
    break;
  4031a2:	e027      	b.n	4031f4 <tcp_close_shutdown+0x14c>
      TCP_RMV(&tcp_bound_pcbs, pcb);
  4031a4:	4613      	mov	r3, r2
  4031a6:	e7f3      	b.n	403190 <tcp_close_shutdown+0xe8>
  4031a8:	2200      	movs	r2, #0
  4031aa:	4b22      	ldr	r3, [pc, #136]	; (403234 <tcp_close_shutdown+0x18c>)
  4031ac:	601a      	str	r2, [r3, #0]
  4031ae:	e7f1      	b.n	403194 <tcp_close_shutdown+0xec>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
  4031b0:	4621      	mov	r1, r4
  4031b2:	4826      	ldr	r0, [pc, #152]	; (40324c <tcp_close_shutdown+0x1a4>)
  4031b4:	4b26      	ldr	r3, [pc, #152]	; (403250 <tcp_close_shutdown+0x1a8>)
  4031b6:	4798      	blx	r3
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
  4031b8:	4621      	mov	r1, r4
  4031ba:	2002      	movs	r0, #2
  4031bc:	4b1f      	ldr	r3, [pc, #124]	; (40323c <tcp_close_shutdown+0x194>)
  4031be:	4798      	blx	r3
    err = ERR_OK;
  4031c0:	2300      	movs	r3, #0
    break;
  4031c2:	e017      	b.n	4031f4 <tcp_close_shutdown+0x14c>
    TCP_PCB_REMOVE_ACTIVE(pcb);
  4031c4:	4621      	mov	r1, r4
  4031c6:	481a      	ldr	r0, [pc, #104]	; (403230 <tcp_close_shutdown+0x188>)
  4031c8:	4b21      	ldr	r3, [pc, #132]	; (403250 <tcp_close_shutdown+0x1a8>)
  4031ca:	4798      	blx	r3
  4031cc:	2001      	movs	r0, #1
  4031ce:	4b1a      	ldr	r3, [pc, #104]	; (403238 <tcp_close_shutdown+0x190>)
  4031d0:	7018      	strb	r0, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
  4031d2:	4621      	mov	r1, r4
  4031d4:	4b19      	ldr	r3, [pc, #100]	; (40323c <tcp_close_shutdown+0x194>)
  4031d6:	4798      	blx	r3
    err = ERR_OK;
  4031d8:	2300      	movs	r3, #0
    break;
  4031da:	e00b      	b.n	4031f4 <tcp_close_shutdown+0x14c>
    err = tcp_send_fin(pcb);
  4031dc:	4620      	mov	r0, r4
  4031de:	4b1d      	ldr	r3, [pc, #116]	; (403254 <tcp_close_shutdown+0x1ac>)
  4031e0:	4798      	blx	r3
    if (err == ERR_OK) {
  4031e2:	4603      	mov	r3, r0
  4031e4:	b930      	cbnz	r0, 4031f4 <tcp_close_shutdown+0x14c>
      pcb->state = FIN_WAIT_1;
  4031e6:	2305      	movs	r3, #5
  4031e8:	7623      	strb	r3, [r4, #24]
  if (pcb != NULL && err == ERR_OK) {
  4031ea:	b1c4      	cbz	r4, 40321e <tcp_close_shutdown+0x176>
    tcp_output(pcb);
  4031ec:	4620      	mov	r0, r4
  4031ee:	4b1a      	ldr	r3, [pc, #104]	; (403258 <tcp_close_shutdown+0x1b0>)
  4031f0:	4798      	blx	r3
  4031f2:	2300      	movs	r3, #0
}
  4031f4:	4618      	mov	r0, r3
  4031f6:	b003      	add	sp, #12
  4031f8:	bd30      	pop	{r4, r5, pc}
    err = tcp_send_fin(pcb);
  4031fa:	4620      	mov	r0, r4
  4031fc:	4b15      	ldr	r3, [pc, #84]	; (403254 <tcp_close_shutdown+0x1ac>)
  4031fe:	4798      	blx	r3
    if (err == ERR_OK) {
  403200:	4603      	mov	r3, r0
  403202:	2800      	cmp	r0, #0
  403204:	d1f6      	bne.n	4031f4 <tcp_close_shutdown+0x14c>
      pcb->state = FIN_WAIT_1;
  403206:	2305      	movs	r3, #5
  403208:	7623      	strb	r3, [r4, #24]
  40320a:	e7ee      	b.n	4031ea <tcp_close_shutdown+0x142>
    err = tcp_send_fin(pcb);
  40320c:	4620      	mov	r0, r4
  40320e:	4b11      	ldr	r3, [pc, #68]	; (403254 <tcp_close_shutdown+0x1ac>)
  403210:	4798      	blx	r3
    if (err == ERR_OK) {
  403212:	4603      	mov	r3, r0
  403214:	2800      	cmp	r0, #0
  403216:	d1ed      	bne.n	4031f4 <tcp_close_shutdown+0x14c>
      pcb->state = LAST_ACK;
  403218:	2309      	movs	r3, #9
  40321a:	7623      	strb	r3, [r4, #24]
  40321c:	e7e5      	b.n	4031ea <tcp_close_shutdown+0x142>
  40321e:	2300      	movs	r3, #0
  403220:	e7e8      	b.n	4031f4 <tcp_close_shutdown+0x14c>
    err = ERR_OK;
  403222:	2300      	movs	r3, #0
  403224:	e7e6      	b.n	4031f4 <tcp_close_shutdown+0x14c>
  403226:	bf00      	nop
  403228:	004052ed 	.word	0x004052ed
  40322c:	00402c65 	.word	0x00402c65
  403230:	20404964 	.word	0x20404964
  403234:	20404970 	.word	0x20404970
  403238:	20404960 	.word	0x20404960
  40323c:	00402475 	.word	0x00402475
  403240:	20404978 	.word	0x20404978
  403244:	00402061 	.word	0x00402061
  403248:	20404974 	.word	0x20404974
  40324c:	2040496c 	.word	0x2040496c
  403250:	00403031 	.word	0x00403031
  403254:	00404f4d 	.word	0x00404f4d
  403258:	00405015 	.word	0x00405015

0040325c <tcp_close>:
{
  40325c:	b508      	push	{r3, lr}
  if (pcb->state != LISTEN) {
  40325e:	7e03      	ldrb	r3, [r0, #24]
  403260:	2b01      	cmp	r3, #1
  403262:	d003      	beq.n	40326c <tcp_close+0x10>
    pcb->flags |= TF_RXCLOSED;
  403264:	7f83      	ldrb	r3, [r0, #30]
  403266:	f043 0310 	orr.w	r3, r3, #16
  40326a:	7783      	strb	r3, [r0, #30]
  return tcp_close_shutdown(pcb, 1);
  40326c:	2101      	movs	r1, #1
  40326e:	4b01      	ldr	r3, [pc, #4]	; (403274 <tcp_close+0x18>)
  403270:	4798      	blx	r3
}
  403272:	bd08      	pop	{r3, pc}
  403274:	004030a9 	.word	0x004030a9

00403278 <tcp_recv_null>:
{
  403278:	b510      	push	{r4, lr}
  40327a:	4608      	mov	r0, r1
  if (p != NULL) {
  40327c:	b142      	cbz	r2, 403290 <tcp_recv_null+0x18>
  40327e:	4614      	mov	r4, r2
    tcp_recved(pcb, p->tot_len);
  403280:	8911      	ldrh	r1, [r2, #8]
  403282:	4b06      	ldr	r3, [pc, #24]	; (40329c <tcp_recv_null+0x24>)
  403284:	4798      	blx	r3
    pbuf_free(p);
  403286:	4620      	mov	r0, r4
  403288:	4b05      	ldr	r3, [pc, #20]	; (4032a0 <tcp_recv_null+0x28>)
  40328a:	4798      	blx	r3
  return ERR_OK;
  40328c:	2000      	movs	r0, #0
  40328e:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
  403290:	b10b      	cbz	r3, 403296 <tcp_recv_null+0x1e>
  return ERR_OK;
  403292:	2000      	movs	r0, #0
}
  403294:	bd10      	pop	{r4, pc}
    return tcp_close(pcb);
  403296:	4b03      	ldr	r3, [pc, #12]	; (4032a4 <tcp_recv_null+0x2c>)
  403298:	4798      	blx	r3
  40329a:	bd10      	pop	{r4, pc}
  40329c:	00402b89 	.word	0x00402b89
  4032a0:	0040262d 	.word	0x0040262d
  4032a4:	0040325d 	.word	0x0040325d

004032a8 <tcp_process_refused_data>:
{
  4032a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4032aa:	4604      	mov	r4, r0
  u8_t refused_flags = pcb->refused_data->flags;
  4032ac:	6f86      	ldr	r6, [r0, #120]	; 0x78
  4032ae:	7b77      	ldrb	r7, [r6, #13]
  pcb->refused_data = NULL;
  4032b0:	2300      	movs	r3, #0
  4032b2:	6783      	str	r3, [r0, #120]	; 0x78
  TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
  4032b4:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
  4032b8:	b1e5      	cbz	r5, 4032f4 <tcp_process_refused_data+0x4c>
  4032ba:	4632      	mov	r2, r6
  4032bc:	4601      	mov	r1, r0
  4032be:	6900      	ldr	r0, [r0, #16]
  4032c0:	47a8      	blx	r5
  4032c2:	4605      	mov	r5, r0
  if (err == ERR_OK) {
  4032c4:	b9f5      	cbnz	r5, 403304 <tcp_process_refused_data+0x5c>
    if (refused_flags & PBUF_FLAG_TCP_FIN) {
  4032c6:	f017 0f20 	tst.w	r7, #32
  4032ca:	d020      	beq.n	40330e <tcp_process_refused_data+0x66>
      if (pcb->rcv_wnd != TCP_WND) {
  4032cc:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  4032ce:	f640 3268 	movw	r2, #2920	; 0xb68
  4032d2:	4293      	cmp	r3, r2
  4032d4:	d001      	beq.n	4032da <tcp_process_refused_data+0x32>
        pcb->rcv_wnd++;
  4032d6:	3301      	adds	r3, #1
  4032d8:	85a3      	strh	r3, [r4, #44]	; 0x2c
      TCP_EVENT_CLOSED(pcb, err);
  4032da:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  4032de:	b1b6      	cbz	r6, 40330e <tcp_process_refused_data+0x66>
  4032e0:	2300      	movs	r3, #0
  4032e2:	461a      	mov	r2, r3
  4032e4:	4621      	mov	r1, r4
  4032e6:	6920      	ldr	r0, [r4, #16]
  4032e8:	47b0      	blx	r6
        return ERR_ABRT;
  4032ea:	f110 0f0a 	cmn.w	r0, #10
  4032ee:	bf08      	it	eq
  4032f0:	4605      	moveq	r5, r0
  4032f2:	e00c      	b.n	40330e <tcp_process_refused_data+0x66>
  TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
  4032f4:	2300      	movs	r3, #0
  4032f6:	4632      	mov	r2, r6
  4032f8:	4601      	mov	r1, r0
  4032fa:	4618      	mov	r0, r3
  4032fc:	4d05      	ldr	r5, [pc, #20]	; (403314 <tcp_process_refused_data+0x6c>)
  4032fe:	47a8      	blx	r5
  403300:	4605      	mov	r5, r0
  403302:	e7df      	b.n	4032c4 <tcp_process_refused_data+0x1c>
  } else if (err == ERR_ABRT) {
  403304:	f115 0f0a 	cmn.w	r5, #10
  403308:	d001      	beq.n	40330e <tcp_process_refused_data+0x66>
    pcb->refused_data = refused_data;
  40330a:	67a6      	str	r6, [r4, #120]	; 0x78
  return ERR_OK;
  40330c:	2500      	movs	r5, #0
}
  40330e:	4628      	mov	r0, r5
  403310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403312:	bf00      	nop
  403314:	00403279 	.word	0x00403279

00403318 <tcp_fasttmr>:
{
  403318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
  40331c:	4a18      	ldr	r2, [pc, #96]	; (403380 <tcp_fasttmr+0x68>)
  40331e:	7813      	ldrb	r3, [r2, #0]
  403320:	3301      	adds	r3, #1
  403322:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
  403324:	4f17      	ldr	r7, [pc, #92]	; (403384 <tcp_fasttmr+0x6c>)
    if (pcb->last_timer != tcp_timer_ctr) {
  403326:	4615      	mov	r5, r2
        tcp_output(pcb);
  403328:	f8df 8064 	ldr.w	r8, [pc, #100]	; 403390 <tcp_fasttmr+0x78>
        tcp_active_pcbs_changed = 0;
  40332c:	4e16      	ldr	r6, [pc, #88]	; (403388 <tcp_fasttmr+0x70>)
  pcb = tcp_active_pcbs;
  40332e:	683c      	ldr	r4, [r7, #0]
  while(pcb != NULL) {
  403330:	b31c      	cbz	r4, 40337a <tcp_fasttmr+0x62>
    if (pcb->last_timer != tcp_timer_ctr) {
  403332:	782b      	ldrb	r3, [r5, #0]
  403334:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
  403338:	429a      	cmp	r2, r3
  40333a:	d100      	bne.n	40333e <tcp_fasttmr+0x26>
  40333c:	e7fe      	b.n	40333c <tcp_fasttmr+0x24>
      pcb->last_timer = tcp_timer_ctr;
  40333e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
      if (pcb->flags & TF_ACK_DELAY) {
  403342:	7fa3      	ldrb	r3, [r4, #30]
  403344:	f013 0f01 	tst.w	r3, #1
  403348:	d10d      	bne.n	403366 <tcp_fasttmr+0x4e>
      next = pcb->next;
  40334a:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
  40334e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  403350:	b13b      	cbz	r3, 403362 <tcp_fasttmr+0x4a>
        tcp_active_pcbs_changed = 0;
  403352:	2300      	movs	r3, #0
  403354:	7033      	strb	r3, [r6, #0]
        tcp_process_refused_data(pcb);
  403356:	4620      	mov	r0, r4
  403358:	4b0c      	ldr	r3, [pc, #48]	; (40338c <tcp_fasttmr+0x74>)
  40335a:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
  40335c:	7833      	ldrb	r3, [r6, #0]
  40335e:	2b00      	cmp	r3, #0
  403360:	d1e5      	bne.n	40332e <tcp_fasttmr+0x16>
{
  403362:	464c      	mov	r4, r9
  403364:	e7e4      	b.n	403330 <tcp_fasttmr+0x18>
        tcp_ack_now(pcb);
  403366:	f043 0302 	orr.w	r3, r3, #2
  40336a:	77a3      	strb	r3, [r4, #30]
        tcp_output(pcb);
  40336c:	4620      	mov	r0, r4
  40336e:	47c0      	blx	r8
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  403370:	7fa3      	ldrb	r3, [r4, #30]
  403372:	f023 0303 	bic.w	r3, r3, #3
  403376:	77a3      	strb	r3, [r4, #30]
  403378:	e7e7      	b.n	40334a <tcp_fasttmr+0x32>
  40337a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40337e:	bf00      	nop
  403380:	204025be 	.word	0x204025be
  403384:	20404964 	.word	0x20404964
  403388:	20404960 	.word	0x20404960
  40338c:	004032a9 	.word	0x004032a9
  403390:	00405015 	.word	0x00405015

00403394 <tcp_tmr>:
{
  403394:	b508      	push	{r3, lr}
  tcp_fasttmr();
  403396:	4b07      	ldr	r3, [pc, #28]	; (4033b4 <tcp_tmr+0x20>)
  403398:	4798      	blx	r3
  if (++tcp_timer & 1) {
  40339a:	4a07      	ldr	r2, [pc, #28]	; (4033b8 <tcp_tmr+0x24>)
  40339c:	7813      	ldrb	r3, [r2, #0]
  40339e:	3301      	adds	r3, #1
  4033a0:	b2db      	uxtb	r3, r3
  4033a2:	7013      	strb	r3, [r2, #0]
  4033a4:	f013 0f01 	tst.w	r3, #1
  4033a8:	d100      	bne.n	4033ac <tcp_tmr+0x18>
  4033aa:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
  4033ac:	4b03      	ldr	r3, [pc, #12]	; (4033bc <tcp_tmr+0x28>)
  4033ae:	4798      	blx	r3
}
  4033b0:	e7fb      	b.n	4033aa <tcp_tmr+0x16>
  4033b2:	bf00      	nop
  4033b4:	00403319 	.word	0x00403319
  4033b8:	204025bd 	.word	0x204025bd
  4033bc:	00402cad 	.word	0x00402cad

004033c0 <tcp_abandon>:
{
  4033c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4033c4:	b083      	sub	sp, #12
  4033c6:	4604      	mov	r4, r0
  if (pcb->state == TIME_WAIT) {
  4033c8:	7e03      	ldrb	r3, [r0, #24]
  4033ca:	2b0a      	cmp	r3, #10
  4033cc:	d027      	beq.n	40341e <tcp_abandon+0x5e>
  4033ce:	460e      	mov	r6, r1
    seqno = pcb->snd_nxt;
  4033d0:	f8d0 8050 	ldr.w	r8, [r0, #80]	; 0x50
    ackno = pcb->rcv_nxt;
  4033d4:	f8d0 9028 	ldr.w	r9, [r0, #40]	; 0x28
    errf = pcb->errf;
  4033d8:	f8d0 508c 	ldr.w	r5, [r0, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
  4033dc:	6907      	ldr	r7, [r0, #16]
    TCP_PCB_REMOVE_ACTIVE(pcb);
  4033de:	4601      	mov	r1, r0
  4033e0:	4819      	ldr	r0, [pc, #100]	; (403448 <tcp_abandon+0x88>)
  4033e2:	4b1a      	ldr	r3, [pc, #104]	; (40344c <tcp_abandon+0x8c>)
  4033e4:	4798      	blx	r3
  4033e6:	2201      	movs	r2, #1
  4033e8:	4b19      	ldr	r3, [pc, #100]	; (403450 <tcp_abandon+0x90>)
  4033ea:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
  4033ec:	6f20      	ldr	r0, [r4, #112]	; 0x70
  4033ee:	b108      	cbz	r0, 4033f4 <tcp_abandon+0x34>
      tcp_segs_free(pcb->unacked);
  4033f0:	4b18      	ldr	r3, [pc, #96]	; (403454 <tcp_abandon+0x94>)
  4033f2:	4798      	blx	r3
    if (pcb->unsent != NULL) {
  4033f4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  4033f6:	b108      	cbz	r0, 4033fc <tcp_abandon+0x3c>
      tcp_segs_free(pcb->unsent);
  4033f8:	4b16      	ldr	r3, [pc, #88]	; (403454 <tcp_abandon+0x94>)
  4033fa:	4798      	blx	r3
    if (pcb->ooseq != NULL) {
  4033fc:	6f60      	ldr	r0, [r4, #116]	; 0x74
  4033fe:	b108      	cbz	r0, 403404 <tcp_abandon+0x44>
      tcp_segs_free(pcb->ooseq);
  403400:	4b14      	ldr	r3, [pc, #80]	; (403454 <tcp_abandon+0x94>)
  403402:	4798      	blx	r3
    if (reset) {
  403404:	b9a6      	cbnz	r6, 403430 <tcp_abandon+0x70>
    memp_free(MEMP_TCP_PCB, pcb);
  403406:	4621      	mov	r1, r4
  403408:	2001      	movs	r0, #1
  40340a:	4b13      	ldr	r3, [pc, #76]	; (403458 <tcp_abandon+0x98>)
  40340c:	4798      	blx	r3
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
  40340e:	b11d      	cbz	r5, 403418 <tcp_abandon+0x58>
  403410:	f06f 0109 	mvn.w	r1, #9
  403414:	4638      	mov	r0, r7
  403416:	47a8      	blx	r5
}
  403418:	b003      	add	sp, #12
  40341a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
  40341e:	4601      	mov	r1, r0
  403420:	480e      	ldr	r0, [pc, #56]	; (40345c <tcp_abandon+0x9c>)
  403422:	4b0a      	ldr	r3, [pc, #40]	; (40344c <tcp_abandon+0x8c>)
  403424:	4798      	blx	r3
    memp_free(MEMP_TCP_PCB, pcb);
  403426:	4621      	mov	r1, r4
  403428:	2001      	movs	r0, #1
  40342a:	4b0b      	ldr	r3, [pc, #44]	; (403458 <tcp_abandon+0x98>)
  40342c:	4798      	blx	r3
  40342e:	e7f3      	b.n	403418 <tcp_abandon+0x58>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, pcb->local_port, pcb->remote_port);
  403430:	8ba3      	ldrh	r3, [r4, #28]
  403432:	9301      	str	r3, [sp, #4]
  403434:	8b63      	ldrh	r3, [r4, #26]
  403436:	9300      	str	r3, [sp, #0]
  403438:	1d23      	adds	r3, r4, #4
  40343a:	4622      	mov	r2, r4
  40343c:	4649      	mov	r1, r9
  40343e:	4640      	mov	r0, r8
  403440:	4e07      	ldr	r6, [pc, #28]	; (403460 <tcp_abandon+0xa0>)
  403442:	47b0      	blx	r6
  403444:	e7df      	b.n	403406 <tcp_abandon+0x46>
  403446:	bf00      	nop
  403448:	20404964 	.word	0x20404964
  40344c:	00403031 	.word	0x00403031
  403450:	20404960 	.word	0x20404960
  403454:	00402bf1 	.word	0x00402bf1
  403458:	00402475 	.word	0x00402475
  40345c:	20404978 	.word	0x20404978
  403460:	004052ed 	.word	0x004052ed

00403464 <tcp_abort>:
{
  403464:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
  403466:	2101      	movs	r1, #1
  403468:	4b01      	ldr	r3, [pc, #4]	; (403470 <tcp_abort+0xc>)
  40346a:	4798      	blx	r3
  40346c:	bd08      	pop	{r3, pc}
  40346e:	bf00      	nop
  403470:	004033c1 	.word	0x004033c1

00403474 <tcp_next_iss>:
u32_t
tcp_next_iss(void)
{
  static u32_t iss = 6510;
  
  iss += tcp_ticks;       /* XXX */
  403474:	4b03      	ldr	r3, [pc, #12]	; (403484 <tcp_next_iss+0x10>)
  403476:	6818      	ldr	r0, [r3, #0]
  403478:	4a03      	ldr	r2, [pc, #12]	; (403488 <tcp_next_iss+0x14>)
  40347a:	6812      	ldr	r2, [r2, #0]
  40347c:	4410      	add	r0, r2
  40347e:	6018      	str	r0, [r3, #0]
  return iss;
}
  403480:	4770      	bx	lr
  403482:	bf00      	nop
  403484:	20400008 	.word	0x20400008
  403488:	20404968 	.word	0x20404968

0040348c <tcp_alloc>:
{
  40348c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40348e:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  403490:	2001      	movs	r0, #1
  403492:	4b3d      	ldr	r3, [pc, #244]	; (403588 <tcp_alloc+0xfc>)
  403494:	4798      	blx	r3
  if (pcb == NULL) {
  403496:	4604      	mov	r4, r0
  403498:	2800      	cmp	r0, #0
  40349a:	d039      	beq.n	403510 <tcp_alloc+0x84>
    memset(pcb, 0, sizeof(struct tcp_pcb));
  40349c:	2298      	movs	r2, #152	; 0x98
  40349e:	2100      	movs	r1, #0
  4034a0:	4620      	mov	r0, r4
  4034a2:	4b3a      	ldr	r3, [pc, #232]	; (40358c <tcp_alloc+0x100>)
  4034a4:	4798      	blx	r3
    pcb->prio = prio;
  4034a6:	7665      	strb	r5, [r4, #25]
    pcb->snd_buf = TCP_SND_BUF;
  4034a8:	f640 3368 	movw	r3, #2920	; 0xb68
  4034ac:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    pcb->snd_queuelen = 0;
  4034b0:	2500      	movs	r5, #0
  4034b2:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
    pcb->rcv_wnd = TCP_WND;
  4034b6:	85a3      	strh	r3, [r4, #44]	; 0x2c
    pcb->rcv_ann_wnd = TCP_WND;
  4034b8:	85e3      	strh	r3, [r4, #46]	; 0x2e
    pcb->tos = 0;
  4034ba:	7265      	strb	r5, [r4, #9]
    pcb->ttl = TCP_TTL;
  4034bc:	23ff      	movs	r3, #255	; 0xff
  4034be:	72a3      	strb	r3, [r4, #10]
    pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
  4034c0:	f44f 7306 	mov.w	r3, #536	; 0x218
  4034c4:	86e3      	strh	r3, [r4, #54]	; 0x36
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
  4034c6:	2306      	movs	r3, #6
  4034c8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    pcb->sa = 0;
  4034cc:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
  4034d0:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    pcb->rtime = -1;
  4034d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4034d8:	86a3      	strh	r3, [r4, #52]	; 0x34
    pcb->cwnd = 1;
  4034da:	2301      	movs	r3, #1
  4034dc:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    iss = tcp_next_iss();
  4034e0:	4b2b      	ldr	r3, [pc, #172]	; (403590 <tcp_alloc+0x104>)
  4034e2:	4798      	blx	r3
    pcb->snd_wl2 = iss;
  4034e4:	65a0      	str	r0, [r4, #88]	; 0x58
    pcb->snd_nxt = iss;
  4034e6:	6520      	str	r0, [r4, #80]	; 0x50
    pcb->lastack = iss;
  4034e8:	64a0      	str	r0, [r4, #72]	; 0x48
    pcb->snd_lbb = iss;   
  4034ea:	65e0      	str	r0, [r4, #92]	; 0x5c
    pcb->tmr = tcp_ticks;
  4034ec:	4b29      	ldr	r3, [pc, #164]	; (403594 <tcp_alloc+0x108>)
  4034ee:	681b      	ldr	r3, [r3, #0]
  4034f0:	6263      	str	r3, [r4, #36]	; 0x24
    pcb->last_timer = tcp_timer_ctr;
  4034f2:	4b29      	ldr	r3, [pc, #164]	; (403598 <tcp_alloc+0x10c>)
  4034f4:	781b      	ldrb	r3, [r3, #0]
  4034f6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    pcb->polltmr = 0;
  4034fa:	77e5      	strb	r5, [r4, #31]
    pcb->recv = tcp_recv_null;
  4034fc:	4b27      	ldr	r3, [pc, #156]	; (40359c <tcp_alloc+0x110>)
  4034fe:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
  403502:	4b27      	ldr	r3, [pc, #156]	; (4035a0 <tcp_alloc+0x114>)
  403504:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    pcb->keep_cnt_sent = 0;
  403508:	f884 5096 	strb.w	r5, [r4, #150]	; 0x96
}
  40350c:	4620      	mov	r0, r4
  40350e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  403510:	4b24      	ldr	r3, [pc, #144]	; (4035a4 <tcp_alloc+0x118>)
  403512:	681b      	ldr	r3, [r3, #0]
  403514:	b183      	cbz	r3, 403538 <tcp_alloc+0xac>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  403516:	4a1f      	ldr	r2, [pc, #124]	; (403594 <tcp_alloc+0x108>)
  403518:	6810      	ldr	r0, [r2, #0]
  40351a:	2100      	movs	r1, #0
  40351c:	e001      	b.n	403522 <tcp_alloc+0x96>
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  40351e:	68db      	ldr	r3, [r3, #12]
  403520:	b133      	cbz	r3, 403530 <tcp_alloc+0xa4>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  403522:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  403524:	1a82      	subs	r2, r0, r2
  403526:	428a      	cmp	r2, r1
  403528:	d3f9      	bcc.n	40351e <tcp_alloc+0x92>
      inactivity = tcp_ticks - pcb->tmr;
  40352a:	4611      	mov	r1, r2
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  40352c:	461c      	mov	r4, r3
  40352e:	e7f6      	b.n	40351e <tcp_alloc+0x92>
  if (inactive != NULL) {
  403530:	b114      	cbz	r4, 403538 <tcp_alloc+0xac>
    tcp_abort(inactive);
  403532:	4620      	mov	r0, r4
  403534:	4b1c      	ldr	r3, [pc, #112]	; (4035a8 <tcp_alloc+0x11c>)
  403536:	4798      	blx	r3
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  403538:	2001      	movs	r0, #1
  40353a:	4b13      	ldr	r3, [pc, #76]	; (403588 <tcp_alloc+0xfc>)
  40353c:	4798      	blx	r3
    if (pcb == NULL) {
  40353e:	4604      	mov	r4, r0
  403540:	2800      	cmp	r0, #0
  403542:	d1ab      	bne.n	40349c <tcp_alloc+0x10>
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  403544:	4b19      	ldr	r3, [pc, #100]	; (4035ac <tcp_alloc+0x120>)
  403546:	681b      	ldr	r3, [r3, #0]
  403548:	b1bb      	cbz	r3, 40357a <tcp_alloc+0xee>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  40354a:	4a12      	ldr	r2, [pc, #72]	; (403594 <tcp_alloc+0x108>)
  40354c:	6817      	ldr	r7, [r2, #0]
  40354e:	2600      	movs	r6, #0
  403550:	207f      	movs	r0, #127	; 0x7f
  403552:	e001      	b.n	403558 <tcp_alloc+0xcc>
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  403554:	68db      	ldr	r3, [r3, #12]
  403556:	b163      	cbz	r3, 403572 <tcp_alloc+0xe6>
    if (pcb->prio <= prio &&
  403558:	7e5a      	ldrb	r2, [r3, #25]
  40355a:	4295      	cmp	r5, r2
  40355c:	d3fa      	bcc.n	403554 <tcp_alloc+0xc8>
  40355e:	4282      	cmp	r2, r0
  403560:	d8f8      	bhi.n	403554 <tcp_alloc+0xc8>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  403562:	6a59      	ldr	r1, [r3, #36]	; 0x24
  403564:	1a79      	subs	r1, r7, r1
       pcb->prio <= mprio &&
  403566:	42b1      	cmp	r1, r6
  403568:	d3f4      	bcc.n	403554 <tcp_alloc+0xc8>
      mprio = pcb->prio;
  40356a:	4610      	mov	r0, r2
      inactivity = tcp_ticks - pcb->tmr;
  40356c:	460e      	mov	r6, r1
       pcb->prio <= mprio &&
  40356e:	461c      	mov	r4, r3
  403570:	e7f0      	b.n	403554 <tcp_alloc+0xc8>
  if (inactive != NULL) {
  403572:	b114      	cbz	r4, 40357a <tcp_alloc+0xee>
    tcp_abort(inactive);
  403574:	4620      	mov	r0, r4
  403576:	4b0c      	ldr	r3, [pc, #48]	; (4035a8 <tcp_alloc+0x11c>)
  403578:	4798      	blx	r3
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  40357a:	2001      	movs	r0, #1
  40357c:	4b02      	ldr	r3, [pc, #8]	; (403588 <tcp_alloc+0xfc>)
  40357e:	4798      	blx	r3
  if (pcb != NULL) {
  403580:	4604      	mov	r4, r0
  403582:	2800      	cmp	r0, #0
  403584:	d0c2      	beq.n	40350c <tcp_alloc+0x80>
  403586:	e789      	b.n	40349c <tcp_alloc+0x10>
  403588:	00402455 	.word	0x00402455
  40358c:	00407d25 	.word	0x00407d25
  403590:	00403475 	.word	0x00403475
  403594:	20404968 	.word	0x20404968
  403598:	204025be 	.word	0x204025be
  40359c:	00403279 	.word	0x00403279
  4035a0:	006ddd00 	.word	0x006ddd00
  4035a4:	20404978 	.word	0x20404978
  4035a8:	00403465 	.word	0x00403465
  4035ac:	20404964 	.word	0x20404964

004035b0 <tcp_new>:
{
  4035b0:	b508      	push	{r3, lr}
  return tcp_alloc(TCP_PRIO_NORMAL);
  4035b2:	2040      	movs	r0, #64	; 0x40
  4035b4:	4b01      	ldr	r3, [pc, #4]	; (4035bc <tcp_new+0xc>)
  4035b6:	4798      	blx	r3
}
  4035b8:	bd08      	pop	{r3, pc}
  4035ba:	bf00      	nop
  4035bc:	0040348d 	.word	0x0040348d

004035c0 <tcp_eff_send_mss>:
 * by using ip_route to determin the netif used to send to the address and
 * calculating the minimum of TCP_MSS and that netif's mtu (if set).
 */
u16_t
tcp_eff_send_mss(u16_t sendmss, ip_addr_t *addr)
{
  4035c0:	b510      	push	{r4, lr}
  4035c2:	4604      	mov	r4, r0
  u16_t mss_s;
  struct netif *outif;

  outif = ip_route(addr);
  4035c4:	4608      	mov	r0, r1
  4035c6:	4b07      	ldr	r3, [pc, #28]	; (4035e4 <tcp_eff_send_mss+0x24>)
  4035c8:	4798      	blx	r3
  if ((outif != NULL) && (outif->mtu != 0)) {
  4035ca:	b138      	cbz	r0, 4035dc <tcp_eff_send_mss+0x1c>
  4035cc:	8c80      	ldrh	r0, [r0, #36]	; 0x24
  4035ce:	b138      	cbz	r0, 4035e0 <tcp_eff_send_mss+0x20>
    mss_s = outif->mtu - IP_HLEN - TCP_HLEN;
  4035d0:	3828      	subs	r0, #40	; 0x28
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
  4035d2:	b280      	uxth	r0, r0
  4035d4:	42a0      	cmp	r0, r4
  4035d6:	bf28      	it	cs
  4035d8:	4620      	movcs	r0, r4
  4035da:	bd10      	pop	{r4, pc}
  4035dc:	4620      	mov	r0, r4
  4035de:	bd10      	pop	{r4, pc}
  4035e0:	4620      	mov	r0, r4
  }
  return sendmss;
}
  4035e2:	bd10      	pop	{r4, pc}
  4035e4:	00401569 	.word	0x00401569

004035e8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
  4035e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4035ea:	4605      	mov	r5, r0
  u8_t *opts, opt;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  opts = (u8_t *)tcphdr + TCP_HLEN;
  4035ec:	4b22      	ldr	r3, [pc, #136]	; (403678 <tcp_parseopt+0x90>)
  4035ee:	681c      	ldr	r4, [r3, #0]

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
  4035f0:	89a0      	ldrh	r0, [r4, #12]
  4035f2:	4b22      	ldr	r3, [pc, #136]	; (40367c <tcp_parseopt+0x94>)
  4035f4:	4798      	blx	r3
  4035f6:	f3c0 300f 	ubfx	r0, r0, #12, #16
  4035fa:	2805      	cmp	r0, #5
  4035fc:	d800      	bhi.n	403600 <tcp_parseopt+0x18>
  4035fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
  403600:	4b1d      	ldr	r3, [pc, #116]	; (403678 <tcp_parseopt+0x90>)
  403602:	681b      	ldr	r3, [r3, #0]
  403604:	8998      	ldrh	r0, [r3, #12]
  403606:	4b1d      	ldr	r3, [pc, #116]	; (40367c <tcp_parseopt+0x94>)
  403608:	4798      	blx	r3
  40360a:	0b06      	lsrs	r6, r0, #12
  40360c:	3e05      	subs	r6, #5
  40360e:	00b6      	lsls	r6, r6, #2
  403610:	b2b6      	uxth	r6, r6
    for (c = 0; c < max_c; ) {
  403612:	2e00      	cmp	r6, #0
  403614:	d0f3      	beq.n	4035fe <tcp_parseopt+0x16>
  opts = (u8_t *)tcphdr + TCP_HLEN;
  403616:	f104 0214 	add.w	r2, r4, #20
  40361a:	2300      	movs	r3, #0
          return;
        }
        /* An MSS option with the right option length. */
        mss = (opts[c + 2] << 8) | opts[c + 3];
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
  40361c:	f240 57b3 	movw	r7, #1459	; 0x5b3
  403620:	f240 54b4 	movw	r4, #1460	; 0x5b4
  403624:	e003      	b.n	40362e <tcp_parseopt+0x46>
        ++c;
  403626:	3301      	adds	r3, #1
  403628:	b29b      	uxth	r3, r3
    for (c = 0; c < max_c; ) {
  40362a:	429e      	cmp	r6, r3
  40362c:	d9e7      	bls.n	4035fe <tcp_parseopt+0x16>
      opt = opts[c];
  40362e:	4618      	mov	r0, r3
      switch (opt) {
  403630:	5cd1      	ldrb	r1, [r2, r3]
  403632:	2901      	cmp	r1, #1
  403634:	d0f7      	beq.n	403626 <tcp_parseopt+0x3e>
  403636:	2900      	cmp	r1, #0
  403638:	d0e1      	beq.n	4035fe <tcp_parseopt+0x16>
  40363a:	2902      	cmp	r1, #2
  40363c:	d006      	beq.n	40364c <tcp_parseopt+0x64>
        c += 0x0A;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        if (opts[c + 1] == 0) {
  40363e:	4410      	add	r0, r2
  403640:	7841      	ldrb	r1, [r0, #1]
  403642:	2900      	cmp	r1, #0
  403644:	d0db      	beq.n	4035fe <tcp_parseopt+0x16>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        c += opts[c + 1];
  403646:	440b      	add	r3, r1
  403648:	b29b      	uxth	r3, r3
  40364a:	e7ee      	b.n	40362a <tcp_parseopt+0x42>
        if (opts[c + 1] != 0x04 || c + 0x04 > max_c) {
  40364c:	18d1      	adds	r1, r2, r3
  40364e:	7849      	ldrb	r1, [r1, #1]
  403650:	2904      	cmp	r1, #4
  403652:	d1d4      	bne.n	4035fe <tcp_parseopt+0x16>
  403654:	1d19      	adds	r1, r3, #4
  403656:	42b1      	cmp	r1, r6
  403658:	dcd1      	bgt.n	4035fe <tcp_parseopt+0x16>
        mss = (opts[c + 2] << 8) | opts[c + 3];
  40365a:	4410      	add	r0, r2
  40365c:	f890 e002 	ldrb.w	lr, [r0, #2]
  403660:	78c1      	ldrb	r1, [r0, #3]
  403662:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
  403666:	1e48      	subs	r0, r1, #1
  403668:	b280      	uxth	r0, r0
  40366a:	42b8      	cmp	r0, r7
  40366c:	bf88      	it	hi
  40366e:	4621      	movhi	r1, r4
  403670:	86e9      	strh	r1, [r5, #54]	; 0x36
        c += 0x04;
  403672:	3304      	adds	r3, #4
  403674:	b29b      	uxth	r3, r3
        break;
  403676:	e7d8      	b.n	40362a <tcp_parseopt+0x42>
  403678:	204025e4 	.word	0x204025e4
  40367c:	0040119f 	.word	0x0040119f

00403680 <tcp_oos_insert_segment>:
{
  403680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403684:	4605      	mov	r5, r0
  403686:	4689      	mov	r9, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  403688:	68c3      	ldr	r3, [r0, #12]
  40368a:	8998      	ldrh	r0, [r3, #12]
  40368c:	4b29      	ldr	r3, [pc, #164]	; (403734 <tcp_oos_insert_segment+0xb4>)
  40368e:	4798      	blx	r3
  403690:	f010 0f01 	tst.w	r0, #1
  403694:	d127      	bne.n	4036e6 <tcp_oos_insert_segment+0x66>
    while (next &&
  403696:	f1b9 0f00 	cmp.w	r9, #0
  40369a:	d049      	beq.n	403730 <tcp_oos_insert_segment+0xb0>
           TCP_SEQ_GEQ((seqno + cseg->len),
  40369c:	f8d9 200c 	ldr.w	r2, [r9, #12]
  4036a0:	892b      	ldrh	r3, [r5, #8]
  4036a2:	6851      	ldr	r1, [r2, #4]
  4036a4:	1a5b      	subs	r3, r3, r1
  4036a6:	4924      	ldr	r1, [pc, #144]	; (403738 <tcp_oos_insert_segment+0xb8>)
  4036a8:	6809      	ldr	r1, [r1, #0]
  4036aa:	440b      	add	r3, r1
  4036ac:	f8b9 1008 	ldrh.w	r1, [r9, #8]
  4036b0:	1a5b      	subs	r3, r3, r1
    while (next &&
  4036b2:	2b00      	cmp	r3, #0
  4036b4:	db04      	blt.n	4036c0 <tcp_oos_insert_segment+0x40>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  4036b6:	4f1f      	ldr	r7, [pc, #124]	; (403734 <tcp_oos_insert_segment+0xb4>)
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
  4036b8:	f8df 808c 	ldr.w	r8, [pc, #140]	; 403748 <tcp_oos_insert_segment+0xc8>
      tcp_seg_free(old_seg);
  4036bc:	4e1f      	ldr	r6, [pc, #124]	; (40373c <tcp_oos_insert_segment+0xbc>)
  4036be:	e028      	b.n	403712 <tcp_oos_insert_segment+0x92>
    while (next &&
  4036c0:	464c      	mov	r4, r9
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
  4036c2:	4b1d      	ldr	r3, [pc, #116]	; (403738 <tcp_oos_insert_segment+0xb8>)
  4036c4:	6819      	ldr	r1, [r3, #0]
  4036c6:	68e3      	ldr	r3, [r4, #12]
  4036c8:	685a      	ldr	r2, [r3, #4]
  4036ca:	892b      	ldrh	r3, [r5, #8]
  4036cc:	440b      	add	r3, r1
  4036ce:	1a9b      	subs	r3, r3, r2
    if (next &&
  4036d0:	2b00      	cmp	r3, #0
  4036d2:	dd05      	ble.n	4036e0 <tcp_oos_insert_segment+0x60>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
  4036d4:	1a52      	subs	r2, r2, r1
  4036d6:	b291      	uxth	r1, r2
  4036d8:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
  4036da:	6868      	ldr	r0, [r5, #4]
  4036dc:	4b18      	ldr	r3, [pc, #96]	; (403740 <tcp_oos_insert_segment+0xc0>)
  4036de:	4798      	blx	r3
  cseg->next = next;
  4036e0:	602c      	str	r4, [r5, #0]
}
  4036e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    tcp_segs_free(next);
  4036e6:	4648      	mov	r0, r9
  4036e8:	4b16      	ldr	r3, [pc, #88]	; (403744 <tcp_oos_insert_segment+0xc4>)
  4036ea:	4798      	blx	r3
    next = NULL;
  4036ec:	2400      	movs	r4, #0
  4036ee:	e7f7      	b.n	4036e0 <tcp_oos_insert_segment+0x60>
      next = next->next;
  4036f0:	f8d9 4000 	ldr.w	r4, [r9]
      tcp_seg_free(old_seg);
  4036f4:	4648      	mov	r0, r9
  4036f6:	47b0      	blx	r6
    while (next &&
  4036f8:	b1d4      	cbz	r4, 403730 <tcp_oos_insert_segment+0xb0>
           TCP_SEQ_GEQ((seqno + cseg->len),
  4036fa:	68e2      	ldr	r2, [r4, #12]
  4036fc:	892b      	ldrh	r3, [r5, #8]
  4036fe:	490e      	ldr	r1, [pc, #56]	; (403738 <tcp_oos_insert_segment+0xb8>)
  403700:	6809      	ldr	r1, [r1, #0]
  403702:	440b      	add	r3, r1
  403704:	6851      	ldr	r1, [r2, #4]
  403706:	1a5b      	subs	r3, r3, r1
  403708:	8921      	ldrh	r1, [r4, #8]
  40370a:	1a5b      	subs	r3, r3, r1
    while (next &&
  40370c:	2b00      	cmp	r3, #0
  40370e:	dbd8      	blt.n	4036c2 <tcp_oos_insert_segment+0x42>
      next = next->next;
  403710:	46a1      	mov	r9, r4
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  403712:	8990      	ldrh	r0, [r2, #12]
  403714:	47b8      	blx	r7
  403716:	f010 0f01 	tst.w	r0, #1
  40371a:	d0e9      	beq.n	4036f0 <tcp_oos_insert_segment+0x70>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
  40371c:	f8d5 a00c 	ldr.w	sl, [r5, #12]
  403720:	f8ba 400c 	ldrh.w	r4, [sl, #12]
  403724:	2001      	movs	r0, #1
  403726:	47c0      	blx	r8
  403728:	4320      	orrs	r0, r4
  40372a:	f8aa 000c 	strh.w	r0, [sl, #12]
  40372e:	e7df      	b.n	4036f0 <tcp_oos_insert_segment+0x70>
    next = NULL;
  403730:	2400      	movs	r4, #0
  403732:	e7d5      	b.n	4036e0 <tcp_oos_insert_segment+0x60>
  403734:	0040119f 	.word	0x0040119f
  403738:	204025e0 	.word	0x204025e0
  40373c:	00402bcd 	.word	0x00402bcd
  403740:	004027cd 	.word	0x004027cd
  403744:	00402bf1 	.word	0x00402bf1
  403748:	00401195 	.word	0x00401195

0040374c <tcp_receive>:
{
  40374c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403750:	4604      	mov	r4, r0
  if (flags & TCP_ACK) {
  403752:	4baa      	ldr	r3, [pc, #680]	; (4039fc <tcp_receive+0x2b0>)
  403754:	781b      	ldrb	r3, [r3, #0]
  403756:	f013 0f10 	tst.w	r3, #16
  40375a:	f000 816b 	beq.w	403a34 <tcp_receive+0x2e8>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
  40375e:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
  403762:	6d80      	ldr	r0, [r0, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
  403764:	6d62      	ldr	r2, [r4, #84]	; 0x54
  403766:	4ba6      	ldr	r3, [pc, #664]	; (403a00 <tcp_receive+0x2b4>)
  403768:	681b      	ldr	r3, [r3, #0]
  40376a:	1ad1      	subs	r1, r2, r3
  40376c:	2900      	cmp	r1, #0
  40376e:	db28      	blt.n	4037c2 <tcp_receive+0x76>
  403770:	429a      	cmp	r2, r3
  403772:	d01b      	beq.n	4037ac <tcp_receive+0x60>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
  403774:	4aa3      	ldr	r2, [pc, #652]	; (403a04 <tcp_receive+0x2b8>)
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  403776:	6812      	ldr	r2, [r2, #0]
  403778:	4290      	cmp	r0, r2
  40377a:	d01d      	beq.n	4037b8 <tcp_receive+0x6c>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
  40377c:	4ba1      	ldr	r3, [pc, #644]	; (403a04 <tcp_receive+0x2b8>)
  40377e:	681a      	ldr	r2, [r3, #0]
  403780:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  403782:	1ad1      	subs	r1, r2, r3
  403784:	2900      	cmp	r1, #0
  403786:	dd41      	ble.n	40380c <tcp_receive+0xc0>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)){
  403788:	2901      	cmp	r1, #1
  40378a:	d403      	bmi.n	403794 <tcp_receive+0x48>
  40378c:	6d21      	ldr	r1, [r4, #80]	; 0x50
  40378e:	1a51      	subs	r1, r2, r1
  403790:	2900      	cmp	r1, #0
  403792:	dd6e      	ble.n	403872 <tcp_receive+0x126>
      pcb->acked = 0;
  403794:	2300      	movs	r3, #0
  403796:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    while (pcb->unsent != NULL &&
  40379a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40379c:	2b00      	cmp	r3, #0
  40379e:	f000 8141 	beq.w	403a24 <tcp_receive+0x2d8>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
  4037a2:	4e98      	ldr	r6, [pc, #608]	; (403a04 <tcp_receive+0x2b8>)
  4037a4:	f8df 8278 	ldr.w	r8, [pc, #632]	; 403a20 <tcp_receive+0x2d4>
  4037a8:	4f97      	ldr	r7, [pc, #604]	; (403a08 <tcp_receive+0x2bc>)
  4037aa:	e0f8      	b.n	40399e <tcp_receive+0x252>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  4037ac:	4a95      	ldr	r2, [pc, #596]	; (403a04 <tcp_receive+0x2b8>)
  4037ae:	6812      	ldr	r2, [r2, #0]
  4037b0:	1a82      	subs	r2, r0, r2
  4037b2:	2a00      	cmp	r2, #0
  4037b4:	dade      	bge.n	403774 <tcp_receive+0x28>
  4037b6:	e004      	b.n	4037c2 <tcp_receive+0x76>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
  4037b8:	4a94      	ldr	r2, [pc, #592]	; (403a0c <tcp_receive+0x2c0>)
  4037ba:	6812      	ldr	r2, [r2, #0]
  4037bc:	89d2      	ldrh	r2, [r2, #14]
  4037be:	42aa      	cmp	r2, r5
  4037c0:	d9dc      	bls.n	40377c <tcp_receive+0x30>
      pcb->snd_wnd = tcphdr->wnd;
  4037c2:	4a92      	ldr	r2, [pc, #584]	; (403a0c <tcp_receive+0x2c0>)
  4037c4:	6812      	ldr	r2, [r2, #0]
  4037c6:	89d1      	ldrh	r1, [r2, #14]
  4037c8:	b28e      	uxth	r6, r1
  4037ca:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < tcphdr->wnd) {
  4037ce:	89d2      	ldrh	r2, [r2, #14]
  4037d0:	b291      	uxth	r1, r2
  4037d2:	f8b4 7062 	ldrh.w	r7, [r4, #98]	; 0x62
  4037d6:	428f      	cmp	r7, r1
        pcb->snd_wnd_max = tcphdr->wnd;
  4037d8:	bf38      	it	cc
  4037da:	f8a4 2062 	strhcc.w	r2, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno;
  4037de:	6563      	str	r3, [r4, #84]	; 0x54
      pcb->snd_wl2 = ackno;
  4037e0:	4b88      	ldr	r3, [pc, #544]	; (403a04 <tcp_receive+0x2b8>)
  4037e2:	681b      	ldr	r3, [r3, #0]
  4037e4:	65a3      	str	r3, [r4, #88]	; 0x58
      if (pcb->snd_wnd == 0) {
  4037e6:	b94e      	cbnz	r6, 4037fc <tcp_receive+0xb0>
        if (pcb->persist_backoff == 0) {
  4037e8:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
  4037ec:	2b00      	cmp	r3, #0
  4037ee:	d1c5      	bne.n	40377c <tcp_receive+0x30>
          pcb->persist_cnt = 0;
  4037f0:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          pcb->persist_backoff = 1;
  4037f4:	2301      	movs	r3, #1
  4037f6:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  4037fa:	e7bf      	b.n	40377c <tcp_receive+0x30>
      } else if (pcb->persist_backoff > 0) {
  4037fc:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
  403800:	2b00      	cmp	r3, #0
  403802:	d0bb      	beq.n	40377c <tcp_receive+0x30>
          pcb->persist_backoff = 0;
  403804:	2300      	movs	r3, #0
  403806:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  40380a:	e7b7      	b.n	40377c <tcp_receive+0x30>
      pcb->acked = 0;
  40380c:	2100      	movs	r1, #0
  40380e:	f8a4 1064 	strh.w	r1, [r4, #100]	; 0x64
      if (tcplen == 0) {
  403812:	497f      	ldr	r1, [pc, #508]	; (403a10 <tcp_receive+0x2c4>)
  403814:	8809      	ldrh	r1, [r1, #0]
  403816:	b931      	cbnz	r1, 403826 <tcp_receive+0xda>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
  403818:	4428      	add	r0, r5
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge){
  40381a:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
  40381e:	6da5      	ldr	r5, [r4, #88]	; 0x58
  403820:	4429      	add	r1, r5
  403822:	4288      	cmp	r0, r1
  403824:	d003      	beq.n	40382e <tcp_receive+0xe2>
        pcb->dupacks = 0;
  403826:	2300      	movs	r3, #0
  403828:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  40382c:	e7b5      	b.n	40379a <tcp_receive+0x4e>
          if (pcb->rtime >= 0) {
  40382e:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
            if (pcb->lastack == ackno) {
  403830:	f411 4f00 	tst.w	r1, #32768	; 0x8000
  403834:	d1f7      	bne.n	403826 <tcp_receive+0xda>
  403836:	429a      	cmp	r2, r3
  403838:	d1f5      	bne.n	403826 <tcp_receive+0xda>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
  40383a:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
  40383e:	1c53      	adds	r3, r2, #1
  403840:	b2db      	uxtb	r3, r3
  403842:	429a      	cmp	r2, r3
                ++pcb->dupacks;
  403844:	bf38      	it	cc
  403846:	f884 3047 	strbcc.w	r3, [r4, #71]	; 0x47
              if (pcb->dupacks > 3) {
  40384a:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
  40384e:	2b03      	cmp	r3, #3
  403850:	d909      	bls.n	403866 <tcp_receive+0x11a>
                if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  403852:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
  403856:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  403858:	4413      	add	r3, r2
  40385a:	b29b      	uxth	r3, r3
  40385c:	429a      	cmp	r2, r3
  40385e:	d29c      	bcs.n	40379a <tcp_receive+0x4e>
                  pcb->cwnd += pcb->mss;
  403860:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  403864:	e799      	b.n	40379a <tcp_receive+0x4e>
              } else if (pcb->dupacks == 3) {
  403866:	2b03      	cmp	r3, #3
  403868:	d197      	bne.n	40379a <tcp_receive+0x4e>
                tcp_rexmit_fast(pcb);
  40386a:	4620      	mov	r0, r4
  40386c:	4b69      	ldr	r3, [pc, #420]	; (403a14 <tcp_receive+0x2c8>)
  40386e:	4798      	blx	r3
  403870:	e793      	b.n	40379a <tcp_receive+0x4e>
      if (pcb->flags & TF_INFR) {
  403872:	7fa1      	ldrb	r1, [r4, #30]
  403874:	f011 0f04 	tst.w	r1, #4
  403878:	d006      	beq.n	403888 <tcp_receive+0x13c>
        pcb->flags &= ~TF_INFR;
  40387a:	f021 0104 	bic.w	r1, r1, #4
  40387e:	77a1      	strb	r1, [r4, #30]
        pcb->cwnd = pcb->ssthresh;
  403880:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
  403884:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
      pcb->nrtx = 0;
  403888:	2000      	movs	r0, #0
  40388a:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  40388e:	f9b4 5040 	ldrsh.w	r5, [r4, #64]	; 0x40
  403892:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
  403896:	eb01 01e5 	add.w	r1, r1, r5, asr #3
  40389a:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
      pcb->acked = (u16_t)(ackno - pcb->lastack);
  40389e:	1ad3      	subs	r3, r2, r3
  4038a0:	b29b      	uxth	r3, r3
  4038a2:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      pcb->snd_buf += pcb->acked;
  4038a6:	f8b4 1066 	ldrh.w	r1, [r4, #102]	; 0x66
  4038aa:	440b      	add	r3, r1
  4038ac:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
      pcb->dupacks = 0;
  4038b0:	f884 0047 	strb.w	r0, [r4, #71]	; 0x47
      pcb->lastack = ackno;
  4038b4:	64a2      	str	r2, [r4, #72]	; 0x48
      if (pcb->state >= ESTABLISHED) {
  4038b6:	7e23      	ldrb	r3, [r4, #24]
  4038b8:	2b03      	cmp	r3, #3
  4038ba:	d90c      	bls.n	4038d6 <tcp_receive+0x18a>
        if (pcb->cwnd < pcb->ssthresh) {
  4038bc:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
  4038c0:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
  4038c4:	4293      	cmp	r3, r2
  4038c6:	d90e      	bls.n	4038e6 <tcp_receive+0x19a>
          if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  4038c8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  4038ca:	4413      	add	r3, r2
  4038cc:	b29b      	uxth	r3, r3
  4038ce:	429a      	cmp	r2, r3
            pcb->cwnd += pcb->mss;
  4038d0:	bf38      	it	cc
  4038d2:	f8a4 304c 	strhcc.w	r3, [r4, #76]	; 0x4c
      while (pcb->unacked != NULL &&
  4038d6:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4038d8:	2b00      	cmp	r3, #0
  4038da:	d04b      	beq.n	403974 <tcp_receive+0x228>
             TCP_SEQ_LEQ(ntohl(pcb->unacked->tcphdr->seqno) +
  4038dc:	f8df 8140 	ldr.w	r8, [pc, #320]	; 403a20 <tcp_receive+0x2d4>
  4038e0:	4e49      	ldr	r6, [pc, #292]	; (403a08 <tcp_receive+0x2bc>)
  4038e2:	4f48      	ldr	r7, [pc, #288]	; (403a04 <tcp_receive+0x2b8>)
  4038e4:	e018      	b.n	403918 <tcp_receive+0x1cc>
          u16_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
  4038e6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  4038e8:	fb03 f303 	mul.w	r3, r3, r3
  4038ec:	fb93 f3f2 	sdiv	r3, r3, r2
  4038f0:	4413      	add	r3, r2
  4038f2:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
  4038f4:	429a      	cmp	r2, r3
  4038f6:	d2ee      	bcs.n	4038d6 <tcp_receive+0x18a>
            pcb->cwnd = new_cwnd;
  4038f8:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  4038fc:	e7eb      	b.n	4038d6 <tcp_receive+0x18a>
        pcb->snd_queuelen -= pbuf_clen(next->p);
  4038fe:	6868      	ldr	r0, [r5, #4]
  403900:	4b45      	ldr	r3, [pc, #276]	; (403a18 <tcp_receive+0x2cc>)
  403902:	4798      	blx	r3
  403904:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
  403908:	1a18      	subs	r0, r3, r0
  40390a:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
        tcp_seg_free(next);
  40390e:	4628      	mov	r0, r5
  403910:	4b42      	ldr	r3, [pc, #264]	; (403a1c <tcp_receive+0x2d0>)
  403912:	4798      	blx	r3
      while (pcb->unacked != NULL &&
  403914:	6f23      	ldr	r3, [r4, #112]	; 0x70
  403916:	b36b      	cbz	r3, 403974 <tcp_receive+0x228>
             TCP_SEQ_LEQ(ntohl(pcb->unacked->tcphdr->seqno) +
  403918:	68db      	ldr	r3, [r3, #12]
  40391a:	6858      	ldr	r0, [r3, #4]
  40391c:	47c0      	blx	r8
  40391e:	4605      	mov	r5, r0
  403920:	6f23      	ldr	r3, [r4, #112]	; 0x70
  403922:	f8b3 9008 	ldrh.w	r9, [r3, #8]
  403926:	68db      	ldr	r3, [r3, #12]
  403928:	8998      	ldrh	r0, [r3, #12]
  40392a:	47b0      	blx	r6
  40392c:	f010 0003 	ands.w	r0, r0, #3
  403930:	bf18      	it	ne
  403932:	2001      	movne	r0, #1
  403934:	4448      	add	r0, r9
  403936:	683b      	ldr	r3, [r7, #0]
  403938:	1aed      	subs	r5, r5, r3
  40393a:	4428      	add	r0, r5
      while (pcb->unacked != NULL &&
  40393c:	2800      	cmp	r0, #0
  40393e:	dc12      	bgt.n	403966 <tcp_receive+0x21a>
        next = pcb->unacked;
  403940:	6f25      	ldr	r5, [r4, #112]	; 0x70
        pcb->unacked = pcb->unacked->next;
  403942:	682b      	ldr	r3, [r5, #0]
  403944:	6723      	str	r3, [r4, #112]	; 0x70
        if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
  403946:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
  40394a:	2b00      	cmp	r3, #0
  40394c:	d0d7      	beq.n	4038fe <tcp_receive+0x1b2>
  40394e:	68eb      	ldr	r3, [r5, #12]
  403950:	8998      	ldrh	r0, [r3, #12]
  403952:	47b0      	blx	r6
  403954:	f010 0f01 	tst.w	r0, #1
  403958:	d0d1      	beq.n	4038fe <tcp_receive+0x1b2>
          pcb->acked--;
  40395a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
  40395e:	3b01      	subs	r3, #1
  403960:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  403964:	e7cb      	b.n	4038fe <tcp_receive+0x1b2>
      if(pcb->unacked == NULL)
  403966:	6f23      	ldr	r3, [r4, #112]	; 0x70
  403968:	b123      	cbz	r3, 403974 <tcp_receive+0x228>
        pcb->rtime = 0;
  40396a:	2300      	movs	r3, #0
  40396c:	86a3      	strh	r3, [r4, #52]	; 0x34
      pcb->polltmr = 0;
  40396e:	2300      	movs	r3, #0
  403970:	77e3      	strb	r3, [r4, #31]
  403972:	e712      	b.n	40379a <tcp_receive+0x4e>
        pcb->rtime = -1;
  403974:	f64f 73ff 	movw	r3, #65535	; 0xffff
  403978:	86a3      	strh	r3, [r4, #52]	; 0x34
  40397a:	e7f8      	b.n	40396e <tcp_receive+0x222>
        pcb->unsent_oversize = 0;
  40397c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  403980:	e02c      	b.n	4039dc <tcp_receive+0x290>
      pcb->snd_queuelen -= pbuf_clen(next->p);
  403982:	6868      	ldr	r0, [r5, #4]
  403984:	4b24      	ldr	r3, [pc, #144]	; (403a18 <tcp_receive+0x2cc>)
  403986:	4798      	blx	r3
  403988:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
  40398c:	1a18      	subs	r0, r3, r0
  40398e:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
      tcp_seg_free(next);
  403992:	4628      	mov	r0, r5
  403994:	4b21      	ldr	r3, [pc, #132]	; (403a1c <tcp_receive+0x2d0>)
  403996:	4798      	blx	r3
    while (pcb->unsent != NULL &&
  403998:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40399a:	2b00      	cmp	r3, #0
  40399c:	d042      	beq.n	403a24 <tcp_receive+0x2d8>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
  40399e:	6835      	ldr	r5, [r6, #0]
  4039a0:	68db      	ldr	r3, [r3, #12]
  4039a2:	6858      	ldr	r0, [r3, #4]
  4039a4:	47c0      	blx	r8
  4039a6:	4682      	mov	sl, r0
  4039a8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  4039aa:	f8b3 9008 	ldrh.w	r9, [r3, #8]
  4039ae:	68db      	ldr	r3, [r3, #12]
  4039b0:	8998      	ldrh	r0, [r3, #12]
  4039b2:	47b8      	blx	r7
  4039b4:	eba5 050a 	sub.w	r5, r5, sl
  4039b8:	f010 0003 	ands.w	r0, r0, #3
  4039bc:	bf18      	it	ne
  4039be:	2001      	movne	r0, #1
  4039c0:	4448      	add	r0, r9
  4039c2:	1a2d      	subs	r5, r5, r0
    while (pcb->unsent != NULL &&
  4039c4:	2d00      	cmp	r5, #0
  4039c6:	db2d      	blt.n	403a24 <tcp_receive+0x2d8>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
  4039c8:	6833      	ldr	r3, [r6, #0]
  4039ca:	6d22      	ldr	r2, [r4, #80]	; 0x50
  4039cc:	1a9b      	subs	r3, r3, r2
  4039ce:	2b00      	cmp	r3, #0
  4039d0:	dc28      	bgt.n	403a24 <tcp_receive+0x2d8>
      next = pcb->unsent;
  4039d2:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
      pcb->unsent = pcb->unsent->next;
  4039d4:	682b      	ldr	r3, [r5, #0]
  4039d6:	66e3      	str	r3, [r4, #108]	; 0x6c
      if (pcb->unsent == NULL) {
  4039d8:	2b00      	cmp	r3, #0
  4039da:	d0cf      	beq.n	40397c <tcp_receive+0x230>
      if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
  4039dc:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
  4039e0:	2b00      	cmp	r3, #0
  4039e2:	d0ce      	beq.n	403982 <tcp_receive+0x236>
  4039e4:	68eb      	ldr	r3, [r5, #12]
  4039e6:	8998      	ldrh	r0, [r3, #12]
  4039e8:	47b8      	blx	r7
  4039ea:	f010 0f01 	tst.w	r0, #1
  4039ee:	d0c8      	beq.n	403982 <tcp_receive+0x236>
        pcb->acked--;
  4039f0:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
  4039f4:	3b01      	subs	r3, #1
  4039f6:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  4039fa:	e7c2      	b.n	403982 <tcp_receive+0x236>
  4039fc:	204025c4 	.word	0x204025c4
  403a00:	204025e0 	.word	0x204025e0
  403a04:	204025c0 	.word	0x204025c0
  403a08:	0040119f 	.word	0x0040119f
  403a0c:	204025e4 	.word	0x204025e4
  403a10:	204025e8 	.word	0x204025e8
  403a14:	00405421 	.word	0x00405421
  403a18:	0040282d 	.word	0x0040282d
  403a1c:	00402bcd 	.word	0x00402bcd
  403a20:	004011c1 	.word	0x004011c1
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
  403a24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  403a26:	b12b      	cbz	r3, 403a34 <tcp_receive+0x2e8>
  403a28:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  403a2a:	499f      	ldr	r1, [pc, #636]	; (403ca8 <tcp_receive+0x55c>)
  403a2c:	6809      	ldr	r1, [r1, #0]
  403a2e:	1a52      	subs	r2, r2, r1
  403a30:	2a00      	cmp	r2, #0
  403a32:	db23      	blt.n	403a7c <tcp_receive+0x330>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
  403a34:	4b9d      	ldr	r3, [pc, #628]	; (403cac <tcp_receive+0x560>)
  403a36:	881b      	ldrh	r3, [r3, #0]
  403a38:	2b00      	cmp	r3, #0
  403a3a:	f000 825c 	beq.w	403ef6 <tcp_receive+0x7aa>
  403a3e:	7e22      	ldrb	r2, [r4, #24]
  403a40:	2a06      	cmp	r2, #6
  403a42:	f200 8258 	bhi.w	403ef6 <tcp_receive+0x7aa>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)){
  403a46:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  403a48:	4a99      	ldr	r2, [pc, #612]	; (403cb0 <tcp_receive+0x564>)
  403a4a:	6812      	ldr	r2, [r2, #0]
  403a4c:	1a8d      	subs	r5, r1, r2
  403a4e:	2d01      	cmp	r5, #1
  403a50:	d405      	bmi.n	403a5e <tcp_receive+0x312>
  403a52:	f1c2 0001 	rsb	r0, r2, #1
  403a56:	1ac3      	subs	r3, r0, r3
  403a58:	440b      	add	r3, r1
  403a5a:	2b00      	cmp	r3, #0
  403a5c:	dd2f      	ble.n	403abe <tcp_receive+0x372>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
  403a5e:	1a53      	subs	r3, r2, r1
  403a60:	2b00      	cmp	r3, #0
  403a62:	db56      	blt.n	403b12 <tcp_receive+0x3c6>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
  403a64:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  403a66:	f1c3 0301 	rsb	r3, r3, #1
  403a6a:	4413      	add	r3, r2
  403a6c:	1a5b      	subs	r3, r3, r1
  403a6e:	2b00      	cmp	r3, #0
  403a70:	dd54      	ble.n	403b1c <tcp_receive+0x3d0>
      tcp_send_empty_ack(pcb);
  403a72:	4620      	mov	r0, r4
  403a74:	4b8f      	ldr	r3, [pc, #572]	; (403cb4 <tcp_receive+0x568>)
  403a76:	4798      	blx	r3
  403a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      m = m - (pcb->sa >> 3);
  403a7c:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
      m = (s16_t)(tcp_ticks - pcb->rttest);
  403a80:	4a8d      	ldr	r2, [pc, #564]	; (403cb8 <tcp_receive+0x56c>)
  403a82:	6812      	ldr	r2, [r2, #0]
  403a84:	1ad3      	subs	r3, r2, r3
      m = m - (pcb->sa >> 3);
  403a86:	eba3 03e1 	sub.w	r3, r3, r1, asr #3
  403a8a:	b29b      	uxth	r3, r3
  403a8c:	b218      	sxth	r0, r3
      pcb->sa += m;
  403a8e:	185a      	adds	r2, r3, r1
  403a90:	b212      	sxth	r2, r2
  403a92:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      if (m < 0) {
  403a96:	2800      	cmp	r0, #0
  403a98:	db0e      	blt.n	403ab8 <tcp_receive+0x36c>
      m = m - (pcb->sv >> 2);
  403a9a:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
      pcb->sv += m;
  403a9e:	eba3 03a3 	sub.w	r3, r3, r3, asr #2
  403aa2:	4403      	add	r3, r0
  403aa4:	b29b      	uxth	r3, r3
  403aa6:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  403aaa:	eb03 03e2 	add.w	r3, r3, r2, asr #3
  403aae:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
      pcb->rttest = 0;
  403ab2:	2300      	movs	r3, #0
  403ab4:	63a3      	str	r3, [r4, #56]	; 0x38
  403ab6:	e7bd      	b.n	403a34 <tcp_receive+0x2e8>
        m = -m;
  403ab8:	425b      	negs	r3, r3
  403aba:	b218      	sxth	r0, r3
  403abc:	e7ed      	b.n	403a9a <tcp_receive+0x34e>
      off = pcb->rcv_nxt - seqno;
  403abe:	462b      	mov	r3, r5
      p = inseg.p;
  403ac0:	4a7e      	ldr	r2, [pc, #504]	; (403cbc <tcp_receive+0x570>)
  403ac2:	6850      	ldr	r0, [r2, #4]
      if (inseg.p->len < off) {
  403ac4:	8942      	ldrh	r2, [r0, #10]
  403ac6:	4295      	cmp	r5, r2
  403ac8:	dd1e      	ble.n	403b08 <tcp_receive+0x3bc>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
  403aca:	8901      	ldrh	r1, [r0, #8]
  403acc:	1b49      	subs	r1, r1, r5
  403ace:	b289      	uxth	r1, r1
          p->len = 0;
  403ad0:	2500      	movs	r5, #0
          off -= p->len;
  403ad2:	1a9b      	subs	r3, r3, r2
          p->tot_len = new_tot_len;
  403ad4:	8101      	strh	r1, [r0, #8]
          p->len = 0;
  403ad6:	8145      	strh	r5, [r0, #10]
          p = p->next;
  403ad8:	6800      	ldr	r0, [r0, #0]
        while (p->len < off) {
  403ada:	8942      	ldrh	r2, [r0, #10]
  403adc:	429a      	cmp	r2, r3
  403ade:	dbf8      	blt.n	403ad2 <tcp_receive+0x386>
        if(pbuf_header(p, (s16_t)-off)) {
  403ae0:	425b      	negs	r3, r3
  403ae2:	b219      	sxth	r1, r3
  403ae4:	4b76      	ldr	r3, [pc, #472]	; (403cc0 <tcp_receive+0x574>)
  403ae6:	4798      	blx	r3
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
  403ae8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  403aea:	4974      	ldr	r1, [pc, #464]	; (403cbc <tcp_receive+0x570>)
  403aec:	4870      	ldr	r0, [pc, #448]	; (403cb0 <tcp_receive+0x564>)
  403aee:	6803      	ldr	r3, [r0, #0]
  403af0:	890d      	ldrh	r5, [r1, #8]
  403af2:	442b      	add	r3, r5
  403af4:	1a9b      	subs	r3, r3, r2
  403af6:	810b      	strh	r3, [r1, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
  403af8:	68cb      	ldr	r3, [r1, #12]
  403afa:	6002      	str	r2, [r0, #0]
  403afc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
  403afe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  403b00:	1a53      	subs	r3, r2, r1
  403b02:	2b00      	cmp	r3, #0
  403b04:	daae      	bge.n	403a64 <tcp_receive+0x318>
  403b06:	e7b4      	b.n	403a72 <tcp_receive+0x326>
        if(pbuf_header(inseg.p, (s16_t)-off)) {
  403b08:	4269      	negs	r1, r5
  403b0a:	b209      	sxth	r1, r1
  403b0c:	4b6c      	ldr	r3, [pc, #432]	; (403cc0 <tcp_receive+0x574>)
  403b0e:	4798      	blx	r3
  403b10:	e7ea      	b.n	403ae8 <tcp_receive+0x39c>
        tcp_ack_now(pcb);
  403b12:	7fa3      	ldrb	r3, [r4, #30]
  403b14:	f043 0302 	orr.w	r3, r3, #2
  403b18:	77a3      	strb	r3, [r4, #30]
  403b1a:	e7aa      	b.n	403a72 <tcp_receive+0x326>
      if (pcb->rcv_nxt == seqno) {
  403b1c:	428a      	cmp	r2, r1
  403b1e:	d013      	beq.n	403b48 <tcp_receive+0x3fc>
        tcp_send_empty_ack(pcb);
  403b20:	4620      	mov	r0, r4
  403b22:	4b64      	ldr	r3, [pc, #400]	; (403cb4 <tcp_receive+0x568>)
  403b24:	4798      	blx	r3
        if (pcb->ooseq == NULL) {
  403b26:	6f66      	ldr	r6, [r4, #116]	; 0x74
  403b28:	2e00      	cmp	r6, #0
  403b2a:	f000 812d 	beq.w	403d88 <tcp_receive+0x63c>
            if (seqno == next->tcphdr->seqno) {
  403b2e:	68f1      	ldr	r1, [r6, #12]
  403b30:	684a      	ldr	r2, [r1, #4]
  403b32:	4b5f      	ldr	r3, [pc, #380]	; (403cb0 <tcp_receive+0x564>)
  403b34:	6818      	ldr	r0, [r3, #0]
  403b36:	4282      	cmp	r2, r0
  403b38:	f000 812c 	beq.w	403d94 <tcp_receive+0x648>
  403b3c:	2700      	movs	r7, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
  403b3e:	f100 3eff 	add.w	lr, r0, #4294967295
  403b42:	f100 0c01 	add.w	ip, r0, #1
  403b46:	e148      	b.n	403dda <tcp_receive+0x68e>
        tcplen = TCP_TCPLEN(&inseg);
  403b48:	4b5c      	ldr	r3, [pc, #368]	; (403cbc <tcp_receive+0x570>)
  403b4a:	891d      	ldrh	r5, [r3, #8]
  403b4c:	68db      	ldr	r3, [r3, #12]
  403b4e:	8998      	ldrh	r0, [r3, #12]
  403b50:	4b5c      	ldr	r3, [pc, #368]	; (403cc4 <tcp_receive+0x578>)
  403b52:	4798      	blx	r3
  403b54:	f010 0303 	ands.w	r3, r0, #3
  403b58:	bf18      	it	ne
  403b5a:	2301      	movne	r3, #1
  403b5c:	442b      	add	r3, r5
  403b5e:	b29b      	uxth	r3, r3
  403b60:	4a52      	ldr	r2, [pc, #328]	; (403cac <tcp_receive+0x560>)
  403b62:	8013      	strh	r3, [r2, #0]
        if (tcplen > pcb->rcv_wnd) {
  403b64:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
  403b66:	429a      	cmp	r2, r3
  403b68:	d317      	bcc.n	403b9a <tcp_receive+0x44e>
        if (pcb->ooseq != NULL) {
  403b6a:	6f63      	ldr	r3, [r4, #116]	; 0x74
  403b6c:	2b00      	cmp	r3, #0
  403b6e:	f000 81ef 	beq.w	403f50 <tcp_receive+0x804>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  403b72:	4b52      	ldr	r3, [pc, #328]	; (403cbc <tcp_receive+0x570>)
  403b74:	68db      	ldr	r3, [r3, #12]
  403b76:	8998      	ldrh	r0, [r3, #12]
  403b78:	4b52      	ldr	r3, [pc, #328]	; (403cc4 <tcp_receive+0x578>)
  403b7a:	4798      	blx	r3
  403b7c:	f010 0f01 	tst.w	r0, #1
  403b80:	d042      	beq.n	403c08 <tcp_receive+0x4bc>
            while (pcb->ooseq != NULL) {
  403b82:	6f60      	ldr	r0, [r4, #116]	; 0x74
  403b84:	2800      	cmp	r0, #0
  403b86:	f000 81e3 	beq.w	403f50 <tcp_receive+0x804>
              tcp_seg_free(old_ooseq);
  403b8a:	4d4f      	ldr	r5, [pc, #316]	; (403cc8 <tcp_receive+0x57c>)
              pcb->ooseq = pcb->ooseq->next;
  403b8c:	6803      	ldr	r3, [r0, #0]
  403b8e:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
  403b90:	47a8      	blx	r5
            while (pcb->ooseq != NULL) {
  403b92:	6f60      	ldr	r0, [r4, #116]	; 0x74
  403b94:	2800      	cmp	r0, #0
  403b96:	d1f9      	bne.n	403b8c <tcp_receive+0x440>
  403b98:	e1da      	b.n	403f50 <tcp_receive+0x804>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  403b9a:	4b48      	ldr	r3, [pc, #288]	; (403cbc <tcp_receive+0x570>)
  403b9c:	68db      	ldr	r3, [r3, #12]
  403b9e:	8998      	ldrh	r0, [r3, #12]
  403ba0:	4b48      	ldr	r3, [pc, #288]	; (403cc4 <tcp_receive+0x578>)
  403ba2:	4798      	blx	r3
  403ba4:	f010 0f01 	tst.w	r0, #1
  403ba8:	d11f      	bne.n	403bea <tcp_receive+0x49e>
          inseg.len = pcb->rcv_wnd;
  403baa:	4b44      	ldr	r3, [pc, #272]	; (403cbc <tcp_receive+0x570>)
  403bac:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
  403bae:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  403bb0:	68db      	ldr	r3, [r3, #12]
  403bb2:	8998      	ldrh	r0, [r3, #12]
  403bb4:	4b43      	ldr	r3, [pc, #268]	; (403cc4 <tcp_receive+0x578>)
  403bb6:	4798      	blx	r3
  403bb8:	f010 0f02 	tst.w	r0, #2
  403bbc:	d003      	beq.n	403bc6 <tcp_receive+0x47a>
            inseg.len -= 1;
  403bbe:	4a3f      	ldr	r2, [pc, #252]	; (403cbc <tcp_receive+0x570>)
  403bc0:	8913      	ldrh	r3, [r2, #8]
  403bc2:	3b01      	subs	r3, #1
  403bc4:	8113      	strh	r3, [r2, #8]
          pbuf_realloc(inseg.p, inseg.len);
  403bc6:	4d3d      	ldr	r5, [pc, #244]	; (403cbc <tcp_receive+0x570>)
  403bc8:	8929      	ldrh	r1, [r5, #8]
  403bca:	6868      	ldr	r0, [r5, #4]
  403bcc:	4b3f      	ldr	r3, [pc, #252]	; (403ccc <tcp_receive+0x580>)
  403bce:	4798      	blx	r3
          tcplen = TCP_TCPLEN(&inseg);
  403bd0:	892e      	ldrh	r6, [r5, #8]
  403bd2:	68eb      	ldr	r3, [r5, #12]
  403bd4:	8998      	ldrh	r0, [r3, #12]
  403bd6:	4b3b      	ldr	r3, [pc, #236]	; (403cc4 <tcp_receive+0x578>)
  403bd8:	4798      	blx	r3
  403bda:	f010 0003 	ands.w	r0, r0, #3
  403bde:	bf18      	it	ne
  403be0:	2001      	movne	r0, #1
  403be2:	4406      	add	r6, r0
  403be4:	4b31      	ldr	r3, [pc, #196]	; (403cac <tcp_receive+0x560>)
  403be6:	801e      	strh	r6, [r3, #0]
  403be8:	e7bf      	b.n	403b6a <tcp_receive+0x41e>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) &~ TCP_FIN);
  403bea:	4b34      	ldr	r3, [pc, #208]	; (403cbc <tcp_receive+0x570>)
  403bec:	68de      	ldr	r6, [r3, #12]
  403bee:	89b5      	ldrh	r5, [r6, #12]
  403bf0:	4628      	mov	r0, r5
  403bf2:	4b34      	ldr	r3, [pc, #208]	; (403cc4 <tcp_receive+0x578>)
  403bf4:	4798      	blx	r3
  403bf6:	f000 003e 	and.w	r0, r0, #62	; 0x3e
  403bfa:	4b35      	ldr	r3, [pc, #212]	; (403cd0 <tcp_receive+0x584>)
  403bfc:	4798      	blx	r3
  403bfe:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
  403c02:	4305      	orrs	r5, r0
  403c04:	81b5      	strh	r5, [r6, #12]
  403c06:	e7d0      	b.n	403baa <tcp_receive+0x45e>
            next = pcb->ooseq;
  403c08:	f8d4 9074 	ldr.w	r9, [r4, #116]	; 0x74
            while (next &&
  403c0c:	f1b9 0f00 	cmp.w	r9, #0
  403c10:	f000 819c 	beq.w	403f4c <tcp_receive+0x800>
                   TCP_SEQ_GEQ(seqno + tcplen,
  403c14:	f8d9 200c 	ldr.w	r2, [r9, #12]
  403c18:	4b24      	ldr	r3, [pc, #144]	; (403cac <tcp_receive+0x560>)
  403c1a:	881b      	ldrh	r3, [r3, #0]
  403c1c:	4924      	ldr	r1, [pc, #144]	; (403cb0 <tcp_receive+0x564>)
  403c1e:	6809      	ldr	r1, [r1, #0]
  403c20:	440b      	add	r3, r1
  403c22:	6851      	ldr	r1, [r2, #4]
  403c24:	1a5b      	subs	r3, r3, r1
  403c26:	f8b9 1008 	ldrh.w	r1, [r9, #8]
  403c2a:	1a5b      	subs	r3, r3, r1
            while (next &&
  403c2c:	2b00      	cmp	r3, #0
  403c2e:	f2c0 81c0 	blt.w	403fb2 <tcp_receive+0x866>
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
  403c32:	4e24      	ldr	r6, [pc, #144]	; (403cc4 <tcp_receive+0x578>)
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
  403c34:	4f21      	ldr	r7, [pc, #132]	; (403cbc <tcp_receive+0x570>)
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
  403c36:	f8df 8098 	ldr.w	r8, [pc, #152]	; 403cd0 <tcp_receive+0x584>
  403c3a:	e015      	b.n	403c68 <tcp_receive+0x51c>
              next = next->next;
  403c3c:	f8d9 5000 	ldr.w	r5, [r9]
              tcp_seg_free(prev);
  403c40:	4648      	mov	r0, r9
  403c42:	4b21      	ldr	r3, [pc, #132]	; (403cc8 <tcp_receive+0x57c>)
  403c44:	4798      	blx	r3
            while (next &&
  403c46:	2d00      	cmp	r5, #0
  403c48:	f000 8180 	beq.w	403f4c <tcp_receive+0x800>
                   TCP_SEQ_GEQ(seqno + tcplen,
  403c4c:	68ea      	ldr	r2, [r5, #12]
  403c4e:	4b17      	ldr	r3, [pc, #92]	; (403cac <tcp_receive+0x560>)
  403c50:	881b      	ldrh	r3, [r3, #0]
  403c52:	4917      	ldr	r1, [pc, #92]	; (403cb0 <tcp_receive+0x564>)
  403c54:	6809      	ldr	r1, [r1, #0]
  403c56:	440b      	add	r3, r1
  403c58:	6851      	ldr	r1, [r2, #4]
  403c5a:	1a5b      	subs	r3, r3, r1
  403c5c:	8929      	ldrh	r1, [r5, #8]
  403c5e:	1a5b      	subs	r3, r3, r1
            while (next &&
  403c60:	2b00      	cmp	r3, #0
  403c62:	f2c0 81a7 	blt.w	403fb4 <tcp_receive+0x868>
              next = next->next;
  403c66:	46a9      	mov	r9, r5
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
  403c68:	8990      	ldrh	r0, [r2, #12]
  403c6a:	47b0      	blx	r6
  403c6c:	f010 0f01 	tst.w	r0, #1
  403c70:	d0e4      	beq.n	403c3c <tcp_receive+0x4f0>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
  403c72:	68fb      	ldr	r3, [r7, #12]
  403c74:	8998      	ldrh	r0, [r3, #12]
  403c76:	47b0      	blx	r6
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
  403c78:	f010 0f02 	tst.w	r0, #2
  403c7c:	d1de      	bne.n	403c3c <tcp_receive+0x4f0>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
  403c7e:	f8d7 a00c 	ldr.w	sl, [r7, #12]
  403c82:	f8ba 500c 	ldrh.w	r5, [sl, #12]
  403c86:	2001      	movs	r0, #1
  403c88:	47c0      	blx	r8
  403c8a:	4328      	orrs	r0, r5
  403c8c:	f8aa 000c 	strh.w	r0, [sl, #12]
                tcplen = TCP_TCPLEN(&inseg);
  403c90:	893d      	ldrh	r5, [r7, #8]
  403c92:	68fb      	ldr	r3, [r7, #12]
  403c94:	8998      	ldrh	r0, [r3, #12]
  403c96:	47b0      	blx	r6
  403c98:	f010 0003 	ands.w	r0, r0, #3
  403c9c:	bf18      	it	ne
  403c9e:	2001      	movne	r0, #1
  403ca0:	4405      	add	r5, r0
  403ca2:	4b02      	ldr	r3, [pc, #8]	; (403cac <tcp_receive+0x560>)
  403ca4:	801d      	strh	r5, [r3, #0]
  403ca6:	e7c9      	b.n	403c3c <tcp_receive+0x4f0>
  403ca8:	204025c0 	.word	0x204025c0
  403cac:	204025e8 	.word	0x204025e8
  403cb0:	204025e0 	.word	0x204025e0
  403cb4:	00404f9d 	.word	0x00404f9d
  403cb8:	20404968 	.word	0x20404968
  403cbc:	204025c8 	.word	0x204025c8
  403cc0:	004025bf 	.word	0x004025bf
  403cc4:	0040119f 	.word	0x0040119f
  403cc8:	00402bcd 	.word	0x00402bcd
  403ccc:	004027cd 	.word	0x004027cd
  403cd0:	00401195 	.word	0x00401195
              recv_data = cseg->p;
  403cd4:	4b91      	ldr	r3, [pc, #580]	; (403f1c <tcp_receive+0x7d0>)
  403cd6:	6019      	str	r1, [r3, #0]
            cseg->p = NULL;
  403cd8:	2300      	movs	r3, #0
  403cda:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  403cdc:	68eb      	ldr	r3, [r5, #12]
  403cde:	8998      	ldrh	r0, [r3, #12]
  403ce0:	47b0      	blx	r6
  403ce2:	f010 0f01 	tst.w	r0, #1
  403ce6:	d007      	beq.n	403cf8 <tcp_receive+0x5ac>
            recv_flags |= TF_GOT_FIN;
  403ce8:	4a8d      	ldr	r2, [pc, #564]	; (403f20 <tcp_receive+0x7d4>)
  403cea:	7813      	ldrb	r3, [r2, #0]
  403cec:	f043 0320 	orr.w	r3, r3, #32
  403cf0:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
  403cf2:	7e23      	ldrb	r3, [r4, #24]
  403cf4:	2b04      	cmp	r3, #4
  403cf6:	d034      	beq.n	403d62 <tcp_receive+0x616>
          pcb->ooseq = cseg->next;
  403cf8:	682b      	ldr	r3, [r5, #0]
  403cfa:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
  403cfc:	4628      	mov	r0, r5
  403cfe:	4b89      	ldr	r3, [pc, #548]	; (403f24 <tcp_receive+0x7d8>)
  403d00:	4798      	blx	r3
        while (pcb->ooseq != NULL &&
  403d02:	6f65      	ldr	r5, [r4, #116]	; 0x74
  403d04:	2d00      	cmp	r5, #0
  403d06:	d02f      	beq.n	403d68 <tcp_receive+0x61c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
  403d08:	68eb      	ldr	r3, [r5, #12]
  403d0a:	685a      	ldr	r2, [r3, #4]
        while (pcb->ooseq != NULL &&
  403d0c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  403d0e:	428a      	cmp	r2, r1
  403d10:	d12a      	bne.n	403d68 <tcp_receive+0x61c>
          seqno = pcb->ooseq->tcphdr->seqno;
  403d12:	f8c8 2000 	str.w	r2, [r8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
  403d16:	f8b5 9008 	ldrh.w	r9, [r5, #8]
  403d1a:	8998      	ldrh	r0, [r3, #12]
  403d1c:	47b0      	blx	r6
  403d1e:	f010 0003 	ands.w	r0, r0, #3
  403d22:	bf18      	it	ne
  403d24:	2001      	movne	r0, #1
  403d26:	4448      	add	r0, r9
  403d28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  403d2a:	4418      	add	r0, r3
  403d2c:	62a0      	str	r0, [r4, #40]	; 0x28
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
  403d2e:	f8b5 9008 	ldrh.w	r9, [r5, #8]
  403d32:	68eb      	ldr	r3, [r5, #12]
  403d34:	8998      	ldrh	r0, [r3, #12]
  403d36:	47b0      	blx	r6
  403d38:	f010 0003 	ands.w	r0, r0, #3
  403d3c:	bf18      	it	ne
  403d3e:	2001      	movne	r0, #1
  403d40:	4448      	add	r0, r9
  403d42:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  403d44:	1a18      	subs	r0, r3, r0
  403d46:	85a0      	strh	r0, [r4, #44]	; 0x2c
          tcp_update_rcv_ann_wnd(pcb);
  403d48:	4620      	mov	r0, r4
  403d4a:	47b8      	blx	r7
          if (cseg->p->tot_len > 0) {
  403d4c:	6869      	ldr	r1, [r5, #4]
  403d4e:	890b      	ldrh	r3, [r1, #8]
  403d50:	2b00      	cmp	r3, #0
  403d52:	d0c3      	beq.n	403cdc <tcp_receive+0x590>
            if (recv_data) {
  403d54:	4b71      	ldr	r3, [pc, #452]	; (403f1c <tcp_receive+0x7d0>)
  403d56:	6818      	ldr	r0, [r3, #0]
  403d58:	2800      	cmp	r0, #0
  403d5a:	d0bb      	beq.n	403cd4 <tcp_receive+0x588>
              pbuf_cat(recv_data, cseg->p);
  403d5c:	4b72      	ldr	r3, [pc, #456]	; (403f28 <tcp_receive+0x7dc>)
  403d5e:	4798      	blx	r3
  403d60:	e7ba      	b.n	403cd8 <tcp_receive+0x58c>
              pcb->state = CLOSE_WAIT;
  403d62:	2307      	movs	r3, #7
  403d64:	7623      	strb	r3, [r4, #24]
  403d66:	e7c7      	b.n	403cf8 <tcp_receive+0x5ac>
        tcp_ack(pcb);
  403d68:	7fa3      	ldrb	r3, [r4, #30]
  403d6a:	f013 0f01 	tst.w	r3, #1
  403d6e:	d006      	beq.n	403d7e <tcp_receive+0x632>
  403d70:	f023 0301 	bic.w	r3, r3, #1
  403d74:	f043 0302 	orr.w	r3, r3, #2
  403d78:	77a3      	strb	r3, [r4, #30]
  403d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403d7e:	f043 0301 	orr.w	r3, r3, #1
  403d82:	77a3      	strb	r3, [r4, #30]
  403d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          pcb->ooseq = tcp_seg_copy(&inseg);
  403d88:	4868      	ldr	r0, [pc, #416]	; (403f2c <tcp_receive+0x7e0>)
  403d8a:	4b69      	ldr	r3, [pc, #420]	; (403f30 <tcp_receive+0x7e4>)
  403d8c:	4798      	blx	r3
  403d8e:	6760      	str	r0, [r4, #116]	; 0x74
  403d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (seqno == next->tcphdr->seqno) {
  403d94:	4635      	mov	r5, r6
  403d96:	2600      	movs	r6, #0
              if (inseg.len > next->len) {
  403d98:	4b64      	ldr	r3, [pc, #400]	; (403f2c <tcp_receive+0x7e0>)
  403d9a:	891a      	ldrh	r2, [r3, #8]
  403d9c:	892b      	ldrh	r3, [r5, #8]
  403d9e:	429a      	cmp	r2, r3
  403da0:	d94f      	bls.n	403e42 <tcp_receive+0x6f6>
                cseg = tcp_seg_copy(&inseg);
  403da2:	4862      	ldr	r0, [pc, #392]	; (403f2c <tcp_receive+0x7e0>)
  403da4:	4b62      	ldr	r3, [pc, #392]	; (403f30 <tcp_receive+0x7e4>)
  403da6:	4798      	blx	r3
                if (cseg != NULL) {
  403da8:	4603      	mov	r3, r0
  403daa:	2800      	cmp	r0, #0
  403dac:	d049      	beq.n	403e42 <tcp_receive+0x6f6>
                  if (prev != NULL) {
  403dae:	b136      	cbz	r6, 403dbe <tcp_receive+0x672>
                    prev->next = cseg;
  403db0:	6030      	str	r0, [r6, #0]
                  tcp_oos_insert_segment(cseg, next);
  403db2:	4629      	mov	r1, r5
  403db4:	4618      	mov	r0, r3
  403db6:	4b5f      	ldr	r3, [pc, #380]	; (403f34 <tcp_receive+0x7e8>)
  403db8:	4798      	blx	r3
  403dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    pcb->ooseq = cseg;
  403dbe:	6760      	str	r0, [r4, #116]	; 0x74
  403dc0:	e7f7      	b.n	403db2 <tcp_receive+0x666>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
  403dc2:	1a83      	subs	r3, r0, r2
  403dc4:	2b00      	cmp	r3, #0
  403dc6:	db2f      	blt.n	403e28 <tcp_receive+0x6dc>
              if (next->next == NULL &&
  403dc8:	6835      	ldr	r5, [r6, #0]
  403dca:	2d00      	cmp	r5, #0
  403dcc:	d036      	beq.n	403e3c <tcp_receive+0x6f0>
            if (seqno == next->tcphdr->seqno) {
  403dce:	68e9      	ldr	r1, [r5, #12]
  403dd0:	684a      	ldr	r2, [r1, #4]
  403dd2:	4637      	mov	r7, r6
  403dd4:	4282      	cmp	r2, r0
  403dd6:	d0df      	beq.n	403d98 <tcp_receive+0x64c>
              if (next->next == NULL &&
  403dd8:	462e      	mov	r6, r5
              if (prev == NULL) {
  403dda:	2f00      	cmp	r7, #0
  403ddc:	d0f1      	beq.n	403dc2 <tcp_receive+0x676>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
  403dde:	68fb      	ldr	r3, [r7, #12]
  403de0:	685b      	ldr	r3, [r3, #4]
  403de2:	ebae 0303 	sub.w	r3, lr, r3
  403de6:	2b00      	cmp	r3, #0
  403de8:	dbee      	blt.n	403dc8 <tcp_receive+0x67c>
  403dea:	ebac 0302 	sub.w	r3, ip, r2
  403dee:	2b00      	cmp	r3, #0
  403df0:	dcea      	bgt.n	403dc8 <tcp_receive+0x67c>
                  cseg = tcp_seg_copy(&inseg);
  403df2:	484e      	ldr	r0, [pc, #312]	; (403f2c <tcp_receive+0x7e0>)
  403df4:	4b4e      	ldr	r3, [pc, #312]	; (403f30 <tcp_receive+0x7e4>)
  403df6:	4798      	blx	r3
                  if (cseg != NULL) {
  403df8:	4604      	mov	r4, r0
  403dfa:	b310      	cbz	r0, 403e42 <tcp_receive+0x6f6>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
  403dfc:	68fb      	ldr	r3, [r7, #12]
  403dfe:	6859      	ldr	r1, [r3, #4]
  403e00:	4b4d      	ldr	r3, [pc, #308]	; (403f38 <tcp_receive+0x7ec>)
  403e02:	681b      	ldr	r3, [r3, #0]
  403e04:	893a      	ldrh	r2, [r7, #8]
  403e06:	440a      	add	r2, r1
  403e08:	1ad2      	subs	r2, r2, r3
  403e0a:	2a00      	cmp	r2, #0
  403e0c:	dd05      	ble.n	403e1a <tcp_receive+0x6ce>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
  403e0e:	1a5b      	subs	r3, r3, r1
  403e10:	b299      	uxth	r1, r3
  403e12:	8139      	strh	r1, [r7, #8]
                      pbuf_realloc(prev->p, prev->len);
  403e14:	6878      	ldr	r0, [r7, #4]
  403e16:	4b49      	ldr	r3, [pc, #292]	; (403f3c <tcp_receive+0x7f0>)
  403e18:	4798      	blx	r3
                    prev->next = cseg;
  403e1a:	603c      	str	r4, [r7, #0]
                    tcp_oos_insert_segment(cseg, next);
  403e1c:	4631      	mov	r1, r6
  403e1e:	4620      	mov	r0, r4
  403e20:	4b44      	ldr	r3, [pc, #272]	; (403f34 <tcp_receive+0x7e8>)
  403e22:	4798      	blx	r3
  403e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                  cseg = tcp_seg_copy(&inseg);
  403e28:	4840      	ldr	r0, [pc, #256]	; (403f2c <tcp_receive+0x7e0>)
  403e2a:	4b41      	ldr	r3, [pc, #260]	; (403f30 <tcp_receive+0x7e4>)
  403e2c:	4798      	blx	r3
                  if (cseg != NULL) {
  403e2e:	b140      	cbz	r0, 403e42 <tcp_receive+0x6f6>
                    pcb->ooseq = cseg;
  403e30:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
  403e32:	4631      	mov	r1, r6
  403e34:	4b3f      	ldr	r3, [pc, #252]	; (403f34 <tcp_receive+0x7e8>)
  403e36:	4798      	blx	r3
  403e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
  403e3c:	1a82      	subs	r2, r0, r2
              if (next->next == NULL &&
  403e3e:	2a00      	cmp	r2, #0
  403e40:	dc01      	bgt.n	403e46 <tcp_receive+0x6fa>
  403e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  403e46:	8988      	ldrh	r0, [r1, #12]
  403e48:	4b3d      	ldr	r3, [pc, #244]	; (403f40 <tcp_receive+0x7f4>)
  403e4a:	4798      	blx	r3
  403e4c:	f010 0f01 	tst.w	r0, #1
  403e50:	d1f7      	bne.n	403e42 <tcp_receive+0x6f6>
                next->next = tcp_seg_copy(&inseg);
  403e52:	4836      	ldr	r0, [pc, #216]	; (403f2c <tcp_receive+0x7e0>)
  403e54:	4b36      	ldr	r3, [pc, #216]	; (403f30 <tcp_receive+0x7e4>)
  403e56:	4798      	blx	r3
  403e58:	6030      	str	r0, [r6, #0]
                if (next->next != NULL) {
  403e5a:	2800      	cmp	r0, #0
  403e5c:	d0f1      	beq.n	403e42 <tcp_receive+0x6f6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
  403e5e:	68f3      	ldr	r3, [r6, #12]
  403e60:	6859      	ldr	r1, [r3, #4]
  403e62:	4b35      	ldr	r3, [pc, #212]	; (403f38 <tcp_receive+0x7ec>)
  403e64:	681b      	ldr	r3, [r3, #0]
  403e66:	8932      	ldrh	r2, [r6, #8]
  403e68:	440a      	add	r2, r1
  403e6a:	1ad2      	subs	r2, r2, r3
  403e6c:	2a00      	cmp	r2, #0
  403e6e:	dd05      	ble.n	403e7c <tcp_receive+0x730>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
  403e70:	1a5b      	subs	r3, r3, r1
  403e72:	b299      	uxth	r1, r3
  403e74:	8131      	strh	r1, [r6, #8]
                    pbuf_realloc(next->p, next->len);
  403e76:	6870      	ldr	r0, [r6, #4]
  403e78:	4b30      	ldr	r3, [pc, #192]	; (403f3c <tcp_receive+0x7f0>)
  403e7a:	4798      	blx	r3
                  if ((u32_t)tcplen + seqno > pcb->rcv_nxt + (u32_t)pcb->rcv_wnd) {
  403e7c:	4b31      	ldr	r3, [pc, #196]	; (403f44 <tcp_receive+0x7f8>)
  403e7e:	881a      	ldrh	r2, [r3, #0]
  403e80:	4b2d      	ldr	r3, [pc, #180]	; (403f38 <tcp_receive+0x7ec>)
  403e82:	681b      	ldr	r3, [r3, #0]
  403e84:	441a      	add	r2, r3
  403e86:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  403e88:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  403e8a:	440b      	add	r3, r1
  403e8c:	429a      	cmp	r2, r3
  403e8e:	d9d8      	bls.n	403e42 <tcp_receive+0x6f6>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
  403e90:	6833      	ldr	r3, [r6, #0]
  403e92:	68db      	ldr	r3, [r3, #12]
  403e94:	8998      	ldrh	r0, [r3, #12]
  403e96:	4b2a      	ldr	r3, [pc, #168]	; (403f40 <tcp_receive+0x7f4>)
  403e98:	4798      	blx	r3
  403e9a:	f010 0f01 	tst.w	r0, #1
  403e9e:	d11b      	bne.n	403ed8 <tcp_receive+0x78c>
                    next->next->len = pcb->rcv_nxt + pcb->rcv_wnd - seqno;
  403ea0:	6832      	ldr	r2, [r6, #0]
  403ea2:	4b25      	ldr	r3, [pc, #148]	; (403f38 <tcp_receive+0x7ec>)
  403ea4:	6819      	ldr	r1, [r3, #0]
  403ea6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  403ea8:	1a5b      	subs	r3, r3, r1
  403eaa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  403eac:	440b      	add	r3, r1
  403eae:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
  403eb0:	6833      	ldr	r3, [r6, #0]
  403eb2:	8919      	ldrh	r1, [r3, #8]
  403eb4:	6858      	ldr	r0, [r3, #4]
  403eb6:	4b21      	ldr	r3, [pc, #132]	; (403f3c <tcp_receive+0x7f0>)
  403eb8:	4798      	blx	r3
                    tcplen = TCP_TCPLEN(next->next);
  403eba:	6833      	ldr	r3, [r6, #0]
  403ebc:	891c      	ldrh	r4, [r3, #8]
  403ebe:	68db      	ldr	r3, [r3, #12]
  403ec0:	8998      	ldrh	r0, [r3, #12]
  403ec2:	4b1f      	ldr	r3, [pc, #124]	; (403f40 <tcp_receive+0x7f4>)
  403ec4:	4798      	blx	r3
  403ec6:	f010 0003 	ands.w	r0, r0, #3
  403eca:	bf18      	it	ne
  403ecc:	2001      	movne	r0, #1
  403ece:	4404      	add	r4, r0
  403ed0:	4b1c      	ldr	r3, [pc, #112]	; (403f44 <tcp_receive+0x7f8>)
  403ed2:	801c      	strh	r4, [r3, #0]
  403ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) &~ TCP_FIN);
  403ed8:	6833      	ldr	r3, [r6, #0]
  403eda:	68df      	ldr	r7, [r3, #12]
  403edc:	89bd      	ldrh	r5, [r7, #12]
  403ede:	4628      	mov	r0, r5
  403ee0:	4b17      	ldr	r3, [pc, #92]	; (403f40 <tcp_receive+0x7f4>)
  403ee2:	4798      	blx	r3
  403ee4:	f000 003e 	and.w	r0, r0, #62	; 0x3e
  403ee8:	4b17      	ldr	r3, [pc, #92]	; (403f48 <tcp_receive+0x7fc>)
  403eea:	4798      	blx	r3
  403eec:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
  403ef0:	4305      	orrs	r5, r0
  403ef2:	81bd      	strh	r5, [r7, #12]
  403ef4:	e7d4      	b.n	403ea0 <tcp_receive+0x754>
    if(!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd-1)){
  403ef6:	4b10      	ldr	r3, [pc, #64]	; (403f38 <tcp_receive+0x7ec>)
  403ef8:	681b      	ldr	r3, [r3, #0]
  403efa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  403efc:	1a99      	subs	r1, r3, r2
  403efe:	2900      	cmp	r1, #0
  403f00:	db05      	blt.n	403f0e <tcp_receive+0x7c2>
  403f02:	3301      	adds	r3, #1
  403f04:	1a9b      	subs	r3, r3, r2
  403f06:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
  403f08:	1a9b      	subs	r3, r3, r2
  403f0a:	2b00      	cmp	r3, #0
  403f0c:	dd99      	ble.n	403e42 <tcp_receive+0x6f6>
      tcp_ack_now(pcb);
  403f0e:	7fa3      	ldrb	r3, [r4, #30]
  403f10:	f043 0302 	orr.w	r3, r3, #2
  403f14:	77a3      	strb	r3, [r4, #30]
}
  403f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403f1a:	bf00      	nop
  403f1c:	204025d8 	.word	0x204025d8
  403f20:	204025dc 	.word	0x204025dc
  403f24:	00402bcd 	.word	0x00402bcd
  403f28:	0040284d 	.word	0x0040284d
  403f2c:	204025c8 	.word	0x204025c8
  403f30:	00402c11 	.word	0x00402c11
  403f34:	00403681 	.word	0x00403681
  403f38:	204025e0 	.word	0x204025e0
  403f3c:	004027cd 	.word	0x004027cd
  403f40:	0040119f 	.word	0x0040119f
  403f44:	204025e8 	.word	0x204025e8
  403f48:	00401195 	.word	0x00401195
              next = next->next;
  403f4c:	2500      	movs	r5, #0
            pcb->ooseq = next;
  403f4e:	6765      	str	r5, [r4, #116]	; 0x74
        pcb->rcv_nxt = seqno + tcplen;
  403f50:	4b2d      	ldr	r3, [pc, #180]	; (404008 <tcp_receive+0x8bc>)
  403f52:	881a      	ldrh	r2, [r3, #0]
  403f54:	4b2d      	ldr	r3, [pc, #180]	; (40400c <tcp_receive+0x8c0>)
  403f56:	681b      	ldr	r3, [r3, #0]
  403f58:	4413      	add	r3, r2
  403f5a:	62a3      	str	r3, [r4, #40]	; 0x28
        pcb->rcv_wnd -= tcplen;
  403f5c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  403f5e:	1a9b      	subs	r3, r3, r2
  403f60:	85a3      	strh	r3, [r4, #44]	; 0x2c
        tcp_update_rcv_ann_wnd(pcb);
  403f62:	4620      	mov	r0, r4
  403f64:	4b2a      	ldr	r3, [pc, #168]	; (404010 <tcp_receive+0x8c4>)
  403f66:	4798      	blx	r3
        if (inseg.p->tot_len > 0) {
  403f68:	4b2a      	ldr	r3, [pc, #168]	; (404014 <tcp_receive+0x8c8>)
  403f6a:	685b      	ldr	r3, [r3, #4]
  403f6c:	891a      	ldrh	r2, [r3, #8]
  403f6e:	b122      	cbz	r2, 403f7a <tcp_receive+0x82e>
          recv_data = inseg.p;
  403f70:	4a29      	ldr	r2, [pc, #164]	; (404018 <tcp_receive+0x8cc>)
  403f72:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
  403f74:	2200      	movs	r2, #0
  403f76:	4b27      	ldr	r3, [pc, #156]	; (404014 <tcp_receive+0x8c8>)
  403f78:	605a      	str	r2, [r3, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  403f7a:	4b26      	ldr	r3, [pc, #152]	; (404014 <tcp_receive+0x8c8>)
  403f7c:	68db      	ldr	r3, [r3, #12]
  403f7e:	8998      	ldrh	r0, [r3, #12]
  403f80:	4b26      	ldr	r3, [pc, #152]	; (40401c <tcp_receive+0x8d0>)
  403f82:	4798      	blx	r3
  403f84:	f010 0f01 	tst.w	r0, #1
  403f88:	d004      	beq.n	403f94 <tcp_receive+0x848>
          recv_flags |= TF_GOT_FIN;
  403f8a:	4a25      	ldr	r2, [pc, #148]	; (404020 <tcp_receive+0x8d4>)
  403f8c:	7813      	ldrb	r3, [r2, #0]
  403f8e:	f043 0320 	orr.w	r3, r3, #32
  403f92:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
  403f94:	6f65      	ldr	r5, [r4, #116]	; 0x74
  403f96:	2d00      	cmp	r5, #0
  403f98:	f43f aee6 	beq.w	403d68 <tcp_receive+0x61c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
  403f9c:	68eb      	ldr	r3, [r5, #12]
  403f9e:	685a      	ldr	r2, [r3, #4]
        while (pcb->ooseq != NULL &&
  403fa0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  403fa2:	428a      	cmp	r2, r1
  403fa4:	f47f aee0 	bne.w	403d68 <tcp_receive+0x61c>
          seqno = pcb->ooseq->tcphdr->seqno;
  403fa8:	f8df 8060 	ldr.w	r8, [pc, #96]	; 40400c <tcp_receive+0x8c0>
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
  403fac:	4e1b      	ldr	r6, [pc, #108]	; (40401c <tcp_receive+0x8d0>)
          tcp_update_rcv_ann_wnd(pcb);
  403fae:	4f18      	ldr	r7, [pc, #96]	; (404010 <tcp_receive+0x8c4>)
  403fb0:	e6af      	b.n	403d12 <tcp_receive+0x5c6>
            next = pcb->ooseq;
  403fb2:	464d      	mov	r5, r9
                TCP_SEQ_GT(seqno + tcplen,
  403fb4:	4b15      	ldr	r3, [pc, #84]	; (40400c <tcp_receive+0x8c0>)
  403fb6:	6819      	ldr	r1, [r3, #0]
  403fb8:	68eb      	ldr	r3, [r5, #12]
  403fba:	685a      	ldr	r2, [r3, #4]
  403fbc:	4b12      	ldr	r3, [pc, #72]	; (404008 <tcp_receive+0x8bc>)
  403fbe:	881b      	ldrh	r3, [r3, #0]
  403fc0:	440b      	add	r3, r1
  403fc2:	1a9b      	subs	r3, r3, r2
            if (next &&
  403fc4:	2b00      	cmp	r3, #0
  403fc6:	ddc2      	ble.n	403f4e <tcp_receive+0x802>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
  403fc8:	4b12      	ldr	r3, [pc, #72]	; (404014 <tcp_receive+0x8c8>)
  403fca:	1a52      	subs	r2, r2, r1
  403fcc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  403fce:	68db      	ldr	r3, [r3, #12]
  403fd0:	8998      	ldrh	r0, [r3, #12]
  403fd2:	4b12      	ldr	r3, [pc, #72]	; (40401c <tcp_receive+0x8d0>)
  403fd4:	4798      	blx	r3
  403fd6:	f010 0f02 	tst.w	r0, #2
  403fda:	d003      	beq.n	403fe4 <tcp_receive+0x898>
                inseg.len -= 1;
  403fdc:	4a0d      	ldr	r2, [pc, #52]	; (404014 <tcp_receive+0x8c8>)
  403fde:	8913      	ldrh	r3, [r2, #8]
  403fe0:	3b01      	subs	r3, #1
  403fe2:	8113      	strh	r3, [r2, #8]
              pbuf_realloc(inseg.p, inseg.len);
  403fe4:	4e0b      	ldr	r6, [pc, #44]	; (404014 <tcp_receive+0x8c8>)
  403fe6:	8931      	ldrh	r1, [r6, #8]
  403fe8:	6870      	ldr	r0, [r6, #4]
  403fea:	4b0e      	ldr	r3, [pc, #56]	; (404024 <tcp_receive+0x8d8>)
  403fec:	4798      	blx	r3
              tcplen = TCP_TCPLEN(&inseg);
  403fee:	8937      	ldrh	r7, [r6, #8]
  403ff0:	68f3      	ldr	r3, [r6, #12]
  403ff2:	8998      	ldrh	r0, [r3, #12]
  403ff4:	4b09      	ldr	r3, [pc, #36]	; (40401c <tcp_receive+0x8d0>)
  403ff6:	4798      	blx	r3
  403ff8:	f010 0003 	ands.w	r0, r0, #3
  403ffc:	bf18      	it	ne
  403ffe:	2001      	movne	r0, #1
  404000:	4407      	add	r7, r0
  404002:	4b01      	ldr	r3, [pc, #4]	; (404008 <tcp_receive+0x8bc>)
  404004:	801f      	strh	r7, [r3, #0]
  404006:	e7a2      	b.n	403f4e <tcp_receive+0x802>
  404008:	204025e8 	.word	0x204025e8
  40400c:	204025e0 	.word	0x204025e0
  404010:	00402b4d 	.word	0x00402b4d
  404014:	204025c8 	.word	0x204025c8
  404018:	204025d8 	.word	0x204025d8
  40401c:	0040119f 	.word	0x0040119f
  404020:	204025dc 	.word	0x204025dc
  404024:	004027cd 	.word	0x004027cd

00404028 <tcp_input>:
{
  404028:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40402c:	b083      	sub	sp, #12
  40402e:	4604      	mov	r4, r0
  404030:	460d      	mov	r5, r1
  iphdr = (struct ip_hdr *)p->payload;
  404032:	6843      	ldr	r3, [r0, #4]
  404034:	7819      	ldrb	r1, [r3, #0]
  404036:	f001 010f 	and.w	r1, r1, #15
  tcphdr = (struct tcp_hdr *)((u8_t *)p->payload + IPH_HL(iphdr) * 4);
  40403a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  40403e:	4a85      	ldr	r2, [pc, #532]	; (404254 <tcp_input+0x22c>)
  404040:	6013      	str	r3, [r2, #0]
  if (pbuf_header(p, -((s16_t)(IPH_HL(iphdr) * 4))) || (p->tot_len < sizeof(struct tcp_hdr))) {
  404042:	0089      	lsls	r1, r1, #2
  404044:	4249      	negs	r1, r1
  404046:	4b84      	ldr	r3, [pc, #528]	; (404258 <tcp_input+0x230>)
  404048:	4798      	blx	r3
  40404a:	b910      	cbnz	r0, 404052 <tcp_input+0x2a>
  40404c:	8923      	ldrh	r3, [r4, #8]
  40404e:	2b13      	cmp	r3, #19
  404050:	d805      	bhi.n	40405e <tcp_input+0x36>
  pbuf_free(p);
  404052:	4620      	mov	r0, r4
  404054:	4b81      	ldr	r3, [pc, #516]	; (40425c <tcp_input+0x234>)
  404056:	4798      	blx	r3
}
  404058:	b003      	add	sp, #12
  40405a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
  40405e:	4629      	mov	r1, r5
  404060:	4b7f      	ldr	r3, [pc, #508]	; (404260 <tcp_input+0x238>)
  404062:	6818      	ldr	r0, [r3, #0]
  404064:	4b7f      	ldr	r3, [pc, #508]	; (404264 <tcp_input+0x23c>)
  404066:	4798      	blx	r3
  404068:	2800      	cmp	r0, #0
  40406a:	d1f2      	bne.n	404052 <tcp_input+0x2a>
      ip_addr_ismulticast(&current_iphdr_dest)) {
  40406c:	4b7c      	ldr	r3, [pc, #496]	; (404260 <tcp_input+0x238>)
  40406e:	681b      	ldr	r3, [r3, #0]
  404070:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
  404074:	2be0      	cmp	r3, #224	; 0xe0
  404076:	d0ec      	beq.n	404052 <tcp_input+0x2a>
  if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
  404078:	8923      	ldrh	r3, [r4, #8]
  40407a:	9300      	str	r3, [sp, #0]
  40407c:	2306      	movs	r3, #6
  40407e:	4a78      	ldr	r2, [pc, #480]	; (404260 <tcp_input+0x238>)
  404080:	4979      	ldr	r1, [pc, #484]	; (404268 <tcp_input+0x240>)
  404082:	4620      	mov	r0, r4
  404084:	4d79      	ldr	r5, [pc, #484]	; (40426c <tcp_input+0x244>)
  404086:	47a8      	blx	r5
  404088:	2800      	cmp	r0, #0
  40408a:	d1e2      	bne.n	404052 <tcp_input+0x2a>
  hdrlen = TCPH_HDRLEN(tcphdr);
  40408c:	4b71      	ldr	r3, [pc, #452]	; (404254 <tcp_input+0x22c>)
  40408e:	681b      	ldr	r3, [r3, #0]
  404090:	8998      	ldrh	r0, [r3, #12]
  404092:	4b77      	ldr	r3, [pc, #476]	; (404270 <tcp_input+0x248>)
  404094:	4798      	blx	r3
  404096:	0b00      	lsrs	r0, r0, #12
  if(pbuf_header(p, -(hdrlen * 4))){
  404098:	ebc0 3080 	rsb	r0, r0, r0, lsl #14
  40409c:	0081      	lsls	r1, r0, #2
  40409e:	b209      	sxth	r1, r1
  4040a0:	4620      	mov	r0, r4
  4040a2:	4b6d      	ldr	r3, [pc, #436]	; (404258 <tcp_input+0x230>)
  4040a4:	4798      	blx	r3
  4040a6:	2800      	cmp	r0, #0
  4040a8:	d1d3      	bne.n	404052 <tcp_input+0x2a>
  tcphdr->src = ntohs(tcphdr->src);
  4040aa:	4d6a      	ldr	r5, [pc, #424]	; (404254 <tcp_input+0x22c>)
  4040ac:	682f      	ldr	r7, [r5, #0]
  4040ae:	8838      	ldrh	r0, [r7, #0]
  4040b0:	4e6f      	ldr	r6, [pc, #444]	; (404270 <tcp_input+0x248>)
  4040b2:	47b0      	blx	r6
  4040b4:	8038      	strh	r0, [r7, #0]
  tcphdr->dest = ntohs(tcphdr->dest);
  4040b6:	682f      	ldr	r7, [r5, #0]
  4040b8:	8878      	ldrh	r0, [r7, #2]
  4040ba:	47b0      	blx	r6
  4040bc:	8078      	strh	r0, [r7, #2]
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
  4040be:	682f      	ldr	r7, [r5, #0]
  4040c0:	6878      	ldr	r0, [r7, #4]
  4040c2:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 4042b0 <tcp_input+0x288>
  4040c6:	47c0      	blx	r8
  4040c8:	6078      	str	r0, [r7, #4]
  4040ca:	4b6a      	ldr	r3, [pc, #424]	; (404274 <tcp_input+0x24c>)
  4040cc:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
  4040ce:	682f      	ldr	r7, [r5, #0]
  4040d0:	68b8      	ldr	r0, [r7, #8]
  4040d2:	47c0      	blx	r8
  4040d4:	60b8      	str	r0, [r7, #8]
  4040d6:	4b68      	ldr	r3, [pc, #416]	; (404278 <tcp_input+0x250>)
  4040d8:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = ntohs(tcphdr->wnd);
  4040da:	682f      	ldr	r7, [r5, #0]
  4040dc:	89f8      	ldrh	r0, [r7, #14]
  4040de:	47b0      	blx	r6
  4040e0:	81f8      	strh	r0, [r7, #14]
  flags = TCPH_FLAGS(tcphdr);
  4040e2:	682b      	ldr	r3, [r5, #0]
  4040e4:	8998      	ldrh	r0, [r3, #12]
  4040e6:	47b0      	blx	r6
  4040e8:	fa5f fe80 	uxtb.w	lr, r0
  4040ec:	f00e 023f 	and.w	r2, lr, #63	; 0x3f
  4040f0:	4b62      	ldr	r3, [pc, #392]	; (40427c <tcp_input+0x254>)
  4040f2:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
  4040f4:	f01e 0303 	ands.w	r3, lr, #3
  4040f8:	bf18      	it	ne
  4040fa:	2301      	movne	r3, #1
  4040fc:	8921      	ldrh	r1, [r4, #8]
  4040fe:	440b      	add	r3, r1
  404100:	b299      	uxth	r1, r3
  404102:	4b5f      	ldr	r3, [pc, #380]	; (404280 <tcp_input+0x258>)
  404104:	8019      	strh	r1, [r3, #0]
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  404106:	4b5f      	ldr	r3, [pc, #380]	; (404284 <tcp_input+0x25c>)
  404108:	6818      	ldr	r0, [r3, #0]
  40410a:	2800      	cmp	r0, #0
  40410c:	f000 8085 	beq.w	40421a <tcp_input+0x1f2>
    if (pcb->remote_port == tcphdr->src &&
  404110:	682f      	ldr	r7, [r5, #0]
  404112:	883e      	ldrh	r6, [r7, #0]
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
  404114:	4b54      	ldr	r3, [pc, #336]	; (404268 <tcp_input+0x240>)
  404116:	f8d3 c000 	ldr.w	ip, [r3]
       ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
  40411a:	4b51      	ldr	r3, [pc, #324]	; (404260 <tcp_input+0x238>)
  40411c:	f8d3 8000 	ldr.w	r8, [r3]
  404120:	4605      	mov	r5, r0
  404122:	2200      	movs	r2, #0
  404124:	e004      	b.n	404130 <tcp_input+0x108>
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  404126:	68eb      	ldr	r3, [r5, #12]
  404128:	462a      	mov	r2, r5
  40412a:	2b00      	cmp	r3, #0
  40412c:	d075      	beq.n	40421a <tcp_input+0x1f2>
  40412e:	461d      	mov	r5, r3
    if (pcb->remote_port == tcphdr->src &&
  404130:	8bab      	ldrh	r3, [r5, #28]
  404132:	42b3      	cmp	r3, r6
  404134:	d1f7      	bne.n	404126 <tcp_input+0xfe>
  404136:	f8b5 901a 	ldrh.w	r9, [r5, #26]
  40413a:	887b      	ldrh	r3, [r7, #2]
  40413c:	4599      	cmp	r9, r3
  40413e:	d1f2      	bne.n	404126 <tcp_input+0xfe>
       pcb->local_port == tcphdr->dest &&
  404140:	686b      	ldr	r3, [r5, #4]
  404142:	4563      	cmp	r3, ip
  404144:	d1ef      	bne.n	404126 <tcp_input+0xfe>
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
  404146:	682b      	ldr	r3, [r5, #0]
  404148:	4543      	cmp	r3, r8
  40414a:	d1ec      	bne.n	404126 <tcp_input+0xfe>
      if (prev != NULL) {
  40414c:	b122      	cbz	r2, 404158 <tcp_input+0x130>
        prev->next = pcb->next;
  40414e:	68eb      	ldr	r3, [r5, #12]
  404150:	60d3      	str	r3, [r2, #12]
        pcb->next = tcp_active_pcbs;
  404152:	60e8      	str	r0, [r5, #12]
        tcp_active_pcbs = pcb;
  404154:	4b4b      	ldr	r3, [pc, #300]	; (404284 <tcp_input+0x25c>)
  404156:	601d      	str	r5, [r3, #0]
  if (pcb == NULL) {
  404158:	2d00      	cmp	r5, #0
  40415a:	d05e      	beq.n	40421a <tcp_input+0x1f2>
    inseg.next = NULL;
  40415c:	4b4a      	ldr	r3, [pc, #296]	; (404288 <tcp_input+0x260>)
  40415e:	2200      	movs	r2, #0
  404160:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
  404162:	8921      	ldrh	r1, [r4, #8]
  404164:	8119      	strh	r1, [r3, #8]
    inseg.p = p;
  404166:	605c      	str	r4, [r3, #4]
    inseg.tcphdr = tcphdr;
  404168:	60df      	str	r7, [r3, #12]
    recv_data = NULL;
  40416a:	4b48      	ldr	r3, [pc, #288]	; (40428c <tcp_input+0x264>)
  40416c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
  40416e:	4b48      	ldr	r3, [pc, #288]	; (404290 <tcp_input+0x268>)
  404170:	701a      	strb	r2, [r3, #0]
    if (flags & TCP_PSH) {
  404172:	f01e 0f08 	tst.w	lr, #8
  404176:	d003      	beq.n	404180 <tcp_input+0x158>
      p->flags |= PBUF_FLAG_PUSH;
  404178:	7b63      	ldrb	r3, [r4, #13]
  40417a:	f043 0301 	orr.w	r3, r3, #1
  40417e:	7363      	strb	r3, [r4, #13]
    if (pcb->refused_data != NULL) {
  404180:	6fab      	ldr	r3, [r5, #120]	; 0x78
  404182:	b15b      	cbz	r3, 40419c <tcp_input+0x174>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
  404184:	4628      	mov	r0, r5
  404186:	4b43      	ldr	r3, [pc, #268]	; (404294 <tcp_input+0x26c>)
  404188:	4798      	blx	r3
  40418a:	f110 0f0a 	cmn.w	r0, #10
  40418e:	d034      	beq.n	4041fa <tcp_input+0x1d2>
  404190:	6fab      	ldr	r3, [r5, #120]	; 0x78
  404192:	b11b      	cbz	r3, 40419c <tcp_input+0x174>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
  404194:	4b3a      	ldr	r3, [pc, #232]	; (404280 <tcp_input+0x258>)
  404196:	881b      	ldrh	r3, [r3, #0]
  404198:	2b00      	cmp	r3, #0
  40419a:	d12e      	bne.n	4041fa <tcp_input+0x1d2>
    tcp_input_pcb = pcb;
  40419c:	4b3e      	ldr	r3, [pc, #248]	; (404298 <tcp_input+0x270>)
  40419e:	601d      	str	r5, [r3, #0]
  if (flags & TCP_RST) {
  4041a0:	4b36      	ldr	r3, [pc, #216]	; (40427c <tcp_input+0x254>)
  4041a2:	781b      	ldrb	r3, [r3, #0]
  4041a4:	f013 0f04 	tst.w	r3, #4
  4041a8:	f000 814e 	beq.w	404448 <tcp_input+0x420>
    if (pcb->state == SYN_SENT) {
  4041ac:	7e2b      	ldrb	r3, [r5, #24]
  4041ae:	2b02      	cmp	r3, #2
  4041b0:	f000 8138 	beq.w	404424 <tcp_input+0x3fc>
      if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
  4041b4:	4b2f      	ldr	r3, [pc, #188]	; (404274 <tcp_input+0x24c>)
  4041b6:	681b      	ldr	r3, [r3, #0]
  4041b8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  4041ba:	1a9b      	subs	r3, r3, r2
  4041bc:	d408      	bmi.n	4041d0 <tcp_input+0x1a8>
  4041be:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
  4041c0:	1a9b      	subs	r3, r3, r2
  u8_t acceptable = 0;
  4041c2:	2b00      	cmp	r3, #0
  4041c4:	bfcc      	ite	gt
  4041c6:	2300      	movgt	r3, #0
  4041c8:	2301      	movle	r3, #1
    if (acceptable) {
  4041ca:	2b00      	cmp	r3, #0
  4041cc:	f040 8132 	bne.w	404434 <tcp_input+0x40c>
      if (recv_flags & TF_RESET) {
  4041d0:	4b2f      	ldr	r3, [pc, #188]	; (404290 <tcp_input+0x268>)
  4041d2:	781b      	ldrb	r3, [r3, #0]
  4041d4:	f013 0f08 	tst.w	r3, #8
  4041d8:	f000 837d 	beq.w	4048d6 <tcp_input+0x8ae>
        TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_RST);
  4041dc:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  4041e0:	b11b      	cbz	r3, 4041ea <tcp_input+0x1c2>
  4041e2:	f06f 010a 	mvn.w	r1, #10
  4041e6:	6928      	ldr	r0, [r5, #16]
  4041e8:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
  4041ea:	4629      	mov	r1, r5
  4041ec:	4825      	ldr	r0, [pc, #148]	; (404284 <tcp_input+0x25c>)
  4041ee:	4b2b      	ldr	r3, [pc, #172]	; (40429c <tcp_input+0x274>)
  4041f0:	4798      	blx	r3
        memp_free(MEMP_TCP_PCB, pcb);
  4041f2:	4629      	mov	r1, r5
  4041f4:	2001      	movs	r0, #1
  4041f6:	4b2a      	ldr	r3, [pc, #168]	; (4042a0 <tcp_input+0x278>)
  4041f8:	4798      	blx	r3
    tcp_input_pcb = NULL;
  4041fa:	2300      	movs	r3, #0
  4041fc:	4a26      	ldr	r2, [pc, #152]	; (404298 <tcp_input+0x270>)
  4041fe:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
  404200:	4a22      	ldr	r2, [pc, #136]	; (40428c <tcp_input+0x264>)
  404202:	6013      	str	r3, [r2, #0]
    if (inseg.p != NULL)
  404204:	4b20      	ldr	r3, [pc, #128]	; (404288 <tcp_input+0x260>)
  404206:	6858      	ldr	r0, [r3, #4]
  404208:	2800      	cmp	r0, #0
  40420a:	f43f af25 	beq.w	404058 <tcp_input+0x30>
      pbuf_free(inseg.p);
  40420e:	4b13      	ldr	r3, [pc, #76]	; (40425c <tcp_input+0x234>)
  404210:	4798      	blx	r3
      inseg.p = NULL;
  404212:	2200      	movs	r2, #0
  404214:	4b1c      	ldr	r3, [pc, #112]	; (404288 <tcp_input+0x260>)
  404216:	605a      	str	r2, [r3, #4]
  404218:	e71e      	b.n	404058 <tcp_input+0x30>
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  40421a:	4b22      	ldr	r3, [pc, #136]	; (4042a4 <tcp_input+0x27c>)
  40421c:	6818      	ldr	r0, [r3, #0]
  40421e:	2800      	cmp	r0, #0
  404220:	d073      	beq.n	40430a <tcp_input+0x2e2>
      if (pcb->remote_port == tcphdr->src &&
  404222:	4b0c      	ldr	r3, [pc, #48]	; (404254 <tcp_input+0x22c>)
  404224:	681f      	ldr	r7, [r3, #0]
  404226:	883a      	ldrh	r2, [r7, #0]
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
  404228:	4b0f      	ldr	r3, [pc, #60]	; (404268 <tcp_input+0x240>)
  40422a:	f8d3 8000 	ldr.w	r8, [r3]
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
  40422e:	4b0c      	ldr	r3, [pc, #48]	; (404260 <tcp_input+0x238>)
  404230:	f8d3 c000 	ldr.w	ip, [r3]
  404234:	e040      	b.n	4042b8 <tcp_input+0x290>
  } else if (flags & TCP_FIN) {
  404236:	f01e 0f01 	tst.w	lr, #1
  40423a:	d002      	beq.n	404242 <tcp_input+0x21a>
    pcb->tmr = tcp_ticks;
  40423c:	4b1a      	ldr	r3, [pc, #104]	; (4042a8 <tcp_input+0x280>)
  40423e:	681b      	ldr	r3, [r3, #0]
  404240:	6243      	str	r3, [r0, #36]	; 0x24
  if ((tcplen > 0))  {
  404242:	2900      	cmp	r1, #0
  404244:	d05d      	beq.n	404302 <tcp_input+0x2da>
    pcb->flags |= TF_ACK_NOW;
  404246:	7f83      	ldrb	r3, [r0, #30]
  404248:	f043 0302 	orr.w	r3, r3, #2
  40424c:	7783      	strb	r3, [r0, #30]
    return tcp_output(pcb);
  40424e:	4b17      	ldr	r3, [pc, #92]	; (4042ac <tcp_input+0x284>)
  404250:	4798      	blx	r3
  404252:	e056      	b.n	404302 <tcp_input+0x2da>
  404254:	204025e4 	.word	0x204025e4
  404258:	004025bf 	.word	0x004025bf
  40425c:	0040262d 	.word	0x0040262d
  404260:	20403938 	.word	0x20403938
  404264:	004018a5 	.word	0x004018a5
  404268:	20403930 	.word	0x20403930
  40426c:	0040146d 	.word	0x0040146d
  404270:	0040119f 	.word	0x0040119f
  404274:	204025e0 	.word	0x204025e0
  404278:	204025c0 	.word	0x204025c0
  40427c:	204025c4 	.word	0x204025c4
  404280:	204025e8 	.word	0x204025e8
  404284:	20404964 	.word	0x20404964
  404288:	204025c8 	.word	0x204025c8
  40428c:	204025d8 	.word	0x204025d8
  404290:	204025dc 	.word	0x204025dc
  404294:	004032a9 	.word	0x004032a9
  404298:	2040497c 	.word	0x2040497c
  40429c:	00403031 	.word	0x00403031
  4042a0:	00402475 	.word	0x00402475
  4042a4:	20404978 	.word	0x20404978
  4042a8:	20404968 	.word	0x20404968
  4042ac:	00405015 	.word	0x00405015
  4042b0:	004011c1 	.word	0x004011c1
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  4042b4:	68c0      	ldr	r0, [r0, #12]
  4042b6:	b340      	cbz	r0, 40430a <tcp_input+0x2e2>
      if (pcb->remote_port == tcphdr->src &&
  4042b8:	8b83      	ldrh	r3, [r0, #28]
  4042ba:	4293      	cmp	r3, r2
  4042bc:	d1fa      	bne.n	4042b4 <tcp_input+0x28c>
         pcb->local_port == tcphdr->dest &&
  4042be:	8b45      	ldrh	r5, [r0, #26]
      if (pcb->remote_port == tcphdr->src &&
  4042c0:	887e      	ldrh	r6, [r7, #2]
  4042c2:	42ae      	cmp	r6, r5
  4042c4:	d1f6      	bne.n	4042b4 <tcp_input+0x28c>
         pcb->local_port == tcphdr->dest &&
  4042c6:	6846      	ldr	r6, [r0, #4]
  4042c8:	4546      	cmp	r6, r8
  4042ca:	d1f3      	bne.n	4042b4 <tcp_input+0x28c>
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
  4042cc:	6806      	ldr	r6, [r0, #0]
  4042ce:	4566      	cmp	r6, ip
  4042d0:	d1f0      	bne.n	4042b4 <tcp_input+0x28c>
  if (flags & TCP_RST)  {
  4042d2:	f01e 0f04 	tst.w	lr, #4
  4042d6:	d114      	bne.n	404302 <tcp_input+0x2da>
  if (flags & TCP_SYN) {
  4042d8:	f01e 0f02 	tst.w	lr, #2
  4042dc:	d0ab      	beq.n	404236 <tcp_input+0x20e>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt+pcb->rcv_wnd)) {
  4042de:	4a7e      	ldr	r2, [pc, #504]	; (4044d8 <tcp_input+0x4b0>)
  4042e0:	6816      	ldr	r6, [r2, #0]
  4042e2:	6a82      	ldr	r2, [r0, #40]	; 0x28
  4042e4:	1ab2      	subs	r2, r6, r2
  4042e6:	d4ac      	bmi.n	404242 <tcp_input+0x21a>
  4042e8:	8d87      	ldrh	r7, [r0, #44]	; 0x2c
  4042ea:	1bd2      	subs	r2, r2, r7
  4042ec:	2a00      	cmp	r2, #0
  4042ee:	dca8      	bgt.n	404242 <tcp_input+0x21a>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  4042f0:	9301      	str	r3, [sp, #4]
  4042f2:	9500      	str	r5, [sp, #0]
  4042f4:	4b79      	ldr	r3, [pc, #484]	; (4044dc <tcp_input+0x4b4>)
  4042f6:	4a7a      	ldr	r2, [pc, #488]	; (4044e0 <tcp_input+0x4b8>)
  4042f8:	4431      	add	r1, r6
  4042fa:	487a      	ldr	r0, [pc, #488]	; (4044e4 <tcp_input+0x4bc>)
  4042fc:	6800      	ldr	r0, [r0, #0]
  4042fe:	4d7a      	ldr	r5, [pc, #488]	; (4044e8 <tcp_input+0x4c0>)
  404300:	47a8      	blx	r5
        pbuf_free(p);
  404302:	4620      	mov	r0, r4
  404304:	4b79      	ldr	r3, [pc, #484]	; (4044ec <tcp_input+0x4c4>)
  404306:	4798      	blx	r3
        return;
  404308:	e6a6      	b.n	404058 <tcp_input+0x30>
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  40430a:	4b79      	ldr	r3, [pc, #484]	; (4044f0 <tcp_input+0x4c8>)
  40430c:	f8d3 c000 	ldr.w	ip, [r3]
  404310:	f1bc 0f00 	cmp.w	ip, #0
  404314:	f000 834b 	beq.w	4049ae <tcp_input+0x986>
      if (lpcb->local_port == tcphdr->dest) {
  404318:	4b76      	ldr	r3, [pc, #472]	; (4044f4 <tcp_input+0x4cc>)
  40431a:	681f      	ldr	r7, [r3, #0]
  40431c:	8878      	ldrh	r0, [r7, #2]
        if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest) ||
  40431e:	4b70      	ldr	r3, [pc, #448]	; (4044e0 <tcp_input+0x4b8>)
  404320:	681e      	ldr	r6, [r3, #0]
  404322:	4665      	mov	r5, ip
  404324:	2200      	movs	r2, #0
  404326:	e005      	b.n	404334 <tcp_input+0x30c>
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  404328:	68eb      	ldr	r3, [r5, #12]
  40432a:	462a      	mov	r2, r5
  40432c:	2b00      	cmp	r3, #0
  40432e:	f000 833e 	beq.w	4049ae <tcp_input+0x986>
  404332:	461d      	mov	r5, r3
      if (lpcb->local_port == tcphdr->dest) {
  404334:	8b6b      	ldrh	r3, [r5, #26]
  404336:	4283      	cmp	r3, r0
  404338:	d1f6      	bne.n	404328 <tcp_input+0x300>
        if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest) ||
  40433a:	682b      	ldr	r3, [r5, #0]
  40433c:	42b3      	cmp	r3, r6
  40433e:	d002      	beq.n	404346 <tcp_input+0x31e>
            ip_addr_isany(&(lpcb->local_ip))) {
  404340:	b10d      	cbz	r5, 404346 <tcp_input+0x31e>
  404342:	2b00      	cmp	r3, #0
  404344:	d1f0      	bne.n	404328 <tcp_input+0x300>
    if (lpcb != NULL) {
  404346:	2d00      	cmp	r5, #0
  404348:	f000 8331 	beq.w	4049ae <tcp_input+0x986>
      if (prev != NULL) {
  40434c:	b12a      	cbz	r2, 40435a <tcp_input+0x332>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
  40434e:	68eb      	ldr	r3, [r5, #12]
  404350:	60d3      	str	r3, [r2, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
  404352:	f8c5 c00c 	str.w	ip, [r5, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
  404356:	4b66      	ldr	r3, [pc, #408]	; (4044f0 <tcp_input+0x4c8>)
  404358:	601d      	str	r5, [r3, #0]
  if (flags & TCP_RST) {
  40435a:	f01e 0f04 	tst.w	lr, #4
  40435e:	d105      	bne.n	40436c <tcp_input+0x344>
  if (flags & TCP_ACK) {
  404360:	f01e 0f10 	tst.w	lr, #16
  404364:	d106      	bne.n	404374 <tcp_input+0x34c>
  } else if (flags & TCP_SYN) {
  404366:	f01e 0f02 	tst.w	lr, #2
  40436a:	d111      	bne.n	404390 <tcp_input+0x368>
      pbuf_free(p);
  40436c:	4620      	mov	r0, r4
  40436e:	4b5f      	ldr	r3, [pc, #380]	; (4044ec <tcp_input+0x4c4>)
  404370:	4798      	blx	r3
      return;
  404372:	e671      	b.n	404058 <tcp_input+0x30>
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  404374:	4b58      	ldr	r3, [pc, #352]	; (4044d8 <tcp_input+0x4b0>)
  404376:	6818      	ldr	r0, [r3, #0]
  404378:	883b      	ldrh	r3, [r7, #0]
  40437a:	9301      	str	r3, [sp, #4]
  40437c:	887b      	ldrh	r3, [r7, #2]
  40437e:	9300      	str	r3, [sp, #0]
  404380:	4b56      	ldr	r3, [pc, #344]	; (4044dc <tcp_input+0x4b4>)
  404382:	4a57      	ldr	r2, [pc, #348]	; (4044e0 <tcp_input+0x4b8>)
  404384:	4401      	add	r1, r0
  404386:	4857      	ldr	r0, [pc, #348]	; (4044e4 <tcp_input+0x4bc>)
  404388:	6800      	ldr	r0, [r0, #0]
  40438a:	4d57      	ldr	r5, [pc, #348]	; (4044e8 <tcp_input+0x4c0>)
  40438c:	47a8      	blx	r5
  40438e:	e7ed      	b.n	40436c <tcp_input+0x344>
    npcb = tcp_alloc(pcb->prio);
  404390:	7e68      	ldrb	r0, [r5, #25]
  404392:	4b59      	ldr	r3, [pc, #356]	; (4044f8 <tcp_input+0x4d0>)
  404394:	4798      	blx	r3
    if (npcb == NULL) {
  404396:	4606      	mov	r6, r0
  404398:	2800      	cmp	r0, #0
  40439a:	d0e7      	beq.n	40436c <tcp_input+0x344>
    ip_addr_copy(npcb->local_ip, current_iphdr_dest);
  40439c:	4b50      	ldr	r3, [pc, #320]	; (4044e0 <tcp_input+0x4b8>)
  40439e:	681b      	ldr	r3, [r3, #0]
  4043a0:	6003      	str	r3, [r0, #0]
    npcb->local_port = pcb->local_port;
  4043a2:	8b6b      	ldrh	r3, [r5, #26]
  4043a4:	8343      	strh	r3, [r0, #26]
    ip_addr_copy(npcb->remote_ip, current_iphdr_src);
  4043a6:	4b4d      	ldr	r3, [pc, #308]	; (4044dc <tcp_input+0x4b4>)
  4043a8:	681b      	ldr	r3, [r3, #0]
  4043aa:	6043      	str	r3, [r0, #4]
    npcb->remote_port = tcphdr->src;
  4043ac:	4b51      	ldr	r3, [pc, #324]	; (4044f4 <tcp_input+0x4cc>)
  4043ae:	681a      	ldr	r2, [r3, #0]
  4043b0:	8813      	ldrh	r3, [r2, #0]
  4043b2:	8383      	strh	r3, [r0, #28]
    npcb->state = SYN_RCVD;
  4043b4:	2303      	movs	r3, #3
  4043b6:	7603      	strb	r3, [r0, #24]
    npcb->rcv_nxt = seqno + 1;
  4043b8:	4b47      	ldr	r3, [pc, #284]	; (4044d8 <tcp_input+0x4b0>)
  4043ba:	681b      	ldr	r3, [r3, #0]
  4043bc:	1c59      	adds	r1, r3, #1
  4043be:	6281      	str	r1, [r0, #40]	; 0x28
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
  4043c0:	6301      	str	r1, [r0, #48]	; 0x30
    npcb->snd_wnd = tcphdr->wnd;
  4043c2:	89d1      	ldrh	r1, [r2, #14]
  4043c4:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
    npcb->snd_wnd_max = tcphdr->wnd;
  4043c8:	89d2      	ldrh	r2, [r2, #14]
  4043ca:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
    npcb->ssthresh = npcb->snd_wnd;
  4043ce:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
  4043d2:	3b01      	subs	r3, #1
  4043d4:	6543      	str	r3, [r0, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
  4043d6:	692b      	ldr	r3, [r5, #16]
  4043d8:	6103      	str	r3, [r0, #16]
    npcb->accept = pcb->accept;
  4043da:	696b      	ldr	r3, [r5, #20]
  4043dc:	6143      	str	r3, [r0, #20]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
  4043de:	7a2b      	ldrb	r3, [r5, #8]
  4043e0:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  4043e4:	7203      	strb	r3, [r0, #8]
    TCP_REG_ACTIVE(npcb);
  4043e6:	4b45      	ldr	r3, [pc, #276]	; (4044fc <tcp_input+0x4d4>)
  4043e8:	681a      	ldr	r2, [r3, #0]
  4043ea:	60c2      	str	r2, [r0, #12]
  4043ec:	6018      	str	r0, [r3, #0]
  4043ee:	4b44      	ldr	r3, [pc, #272]	; (404500 <tcp_input+0x4d8>)
  4043f0:	4798      	blx	r3
  4043f2:	2201      	movs	r2, #1
  4043f4:	4b43      	ldr	r3, [pc, #268]	; (404504 <tcp_input+0x4dc>)
  4043f6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
  4043f8:	4630      	mov	r0, r6
  4043fa:	4b43      	ldr	r3, [pc, #268]	; (404508 <tcp_input+0x4e0>)
  4043fc:	4798      	blx	r3
    npcb->mss = tcp_eff_send_mss(npcb->mss, &(npcb->remote_ip));
  4043fe:	1d31      	adds	r1, r6, #4
  404400:	8ef0      	ldrh	r0, [r6, #54]	; 0x36
  404402:	4b42      	ldr	r3, [pc, #264]	; (40450c <tcp_input+0x4e4>)
  404404:	4798      	blx	r3
  404406:	86f0      	strh	r0, [r6, #54]	; 0x36
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
  404408:	2112      	movs	r1, #18
  40440a:	4630      	mov	r0, r6
  40440c:	4b40      	ldr	r3, [pc, #256]	; (404510 <tcp_input+0x4e8>)
  40440e:	4798      	blx	r3
    if (rc != ERR_OK) {
  404410:	b918      	cbnz	r0, 40441a <tcp_input+0x3f2>
    return tcp_output(npcb);
  404412:	4630      	mov	r0, r6
  404414:	4b3f      	ldr	r3, [pc, #252]	; (404514 <tcp_input+0x4ec>)
  404416:	4798      	blx	r3
  404418:	e7a8      	b.n	40436c <tcp_input+0x344>
      tcp_abandon(npcb, 0);
  40441a:	2100      	movs	r1, #0
  40441c:	4630      	mov	r0, r6
  40441e:	4b3e      	ldr	r3, [pc, #248]	; (404518 <tcp_input+0x4f0>)
  404420:	4798      	blx	r3
  404422:	e7a3      	b.n	40436c <tcp_input+0x344>
      if (ackno == pcb->snd_nxt) {
  404424:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  404426:	4a2f      	ldr	r2, [pc, #188]	; (4044e4 <tcp_input+0x4bc>)
  404428:	6812      	ldr	r2, [r2, #0]
  u8_t acceptable = 0;
  40442a:	4293      	cmp	r3, r2
  40442c:	bf14      	ite	ne
  40442e:	2300      	movne	r3, #0
  404430:	2301      	moveq	r3, #1
  404432:	e6ca      	b.n	4041ca <tcp_input+0x1a2>
      recv_flags |= TF_RESET;
  404434:	4a39      	ldr	r2, [pc, #228]	; (40451c <tcp_input+0x4f4>)
  404436:	7813      	ldrb	r3, [r2, #0]
  404438:	f043 0308 	orr.w	r3, r3, #8
  40443c:	7013      	strb	r3, [r2, #0]
      pcb->flags &= ~TF_ACK_DELAY;
  40443e:	7fab      	ldrb	r3, [r5, #30]
  404440:	f023 0301 	bic.w	r3, r3, #1
  404444:	77ab      	strb	r3, [r5, #30]
  404446:	e6c3      	b.n	4041d0 <tcp_input+0x1a8>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) { 
  404448:	f013 0f02 	tst.w	r3, #2
  40444c:	d009      	beq.n	404462 <tcp_input+0x43a>
  40444e:	7e2b      	ldrb	r3, [r5, #24]
  404450:	3b02      	subs	r3, #2
  404452:	b2db      	uxtb	r3, r3
  404454:	2b01      	cmp	r3, #1
  404456:	d904      	bls.n	404462 <tcp_input+0x43a>
    tcp_ack_now(pcb);
  404458:	7fab      	ldrb	r3, [r5, #30]
  40445a:	f043 0302 	orr.w	r3, r3, #2
  40445e:	77ab      	strb	r3, [r5, #30]
  404460:	e6b6      	b.n	4041d0 <tcp_input+0x1a8>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
  404462:	7fab      	ldrb	r3, [r5, #30]
  404464:	f013 0f10 	tst.w	r3, #16
  404468:	d102      	bne.n	404470 <tcp_input+0x448>
    pcb->tmr = tcp_ticks;
  40446a:	4b2d      	ldr	r3, [pc, #180]	; (404520 <tcp_input+0x4f8>)
  40446c:	681b      	ldr	r3, [r3, #0]
  40446e:	626b      	str	r3, [r5, #36]	; 0x24
  pcb->keep_cnt_sent = 0;
  404470:	2300      	movs	r3, #0
  404472:	f885 3096 	strb.w	r3, [r5, #150]	; 0x96
  tcp_parseopt(pcb);
  404476:	4628      	mov	r0, r5
  404478:	4b23      	ldr	r3, [pc, #140]	; (404508 <tcp_input+0x4e0>)
  40447a:	4798      	blx	r3
  switch (pcb->state) {
  40447c:	7e2b      	ldrb	r3, [r5, #24]
  40447e:	3b02      	subs	r3, #2
  404480:	2b07      	cmp	r3, #7
  404482:	f63f aea5 	bhi.w	4041d0 <tcp_input+0x1a8>
  404486:	e8df f013 	tbh	[pc, r3, lsl #1]
  40448a:	0008      	.short	0x0008
  40448c:	010600a8 	.word	0x010600a8
  404490:	016f0116 	.word	0x016f0116
  404494:	01d40106 	.word	0x01d40106
  404498:	0211      	.short	0x0211
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
  40449a:	4b22      	ldr	r3, [pc, #136]	; (404524 <tcp_input+0x4fc>)
  40449c:	781b      	ldrb	r3, [r3, #0]
  40449e:	f003 0312 	and.w	r3, r3, #18
  4044a2:	2b12      	cmp	r3, #18
  4044a4:	d042      	beq.n	40452c <tcp_input+0x504>
    else if (flags & TCP_ACK) {
  4044a6:	4b1f      	ldr	r3, [pc, #124]	; (404524 <tcp_input+0x4fc>)
  4044a8:	781b      	ldrb	r3, [r3, #0]
  4044aa:	f013 0f10 	tst.w	r3, #16
  4044ae:	f43f ae8f 	beq.w	4041d0 <tcp_input+0x1a8>
        tcphdr->dest, tcphdr->src);
  4044b2:	4b10      	ldr	r3, [pc, #64]	; (4044f4 <tcp_input+0x4cc>)
  4044b4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  4044b6:	4a1c      	ldr	r2, [pc, #112]	; (404528 <tcp_input+0x500>)
  4044b8:	8810      	ldrh	r0, [r2, #0]
  4044ba:	4a07      	ldr	r2, [pc, #28]	; (4044d8 <tcp_input+0x4b0>)
  4044bc:	6811      	ldr	r1, [r2, #0]
  4044be:	881a      	ldrh	r2, [r3, #0]
  4044c0:	9201      	str	r2, [sp, #4]
  4044c2:	885b      	ldrh	r3, [r3, #2]
  4044c4:	9300      	str	r3, [sp, #0]
  4044c6:	4b05      	ldr	r3, [pc, #20]	; (4044dc <tcp_input+0x4b4>)
  4044c8:	4a05      	ldr	r2, [pc, #20]	; (4044e0 <tcp_input+0x4b8>)
  4044ca:	4401      	add	r1, r0
  4044cc:	4805      	ldr	r0, [pc, #20]	; (4044e4 <tcp_input+0x4bc>)
  4044ce:	6800      	ldr	r0, [r0, #0]
  4044d0:	4c05      	ldr	r4, [pc, #20]	; (4044e8 <tcp_input+0x4c0>)
  4044d2:	47a0      	blx	r4
  4044d4:	e67c      	b.n	4041d0 <tcp_input+0x1a8>
  4044d6:	bf00      	nop
  4044d8:	204025e0 	.word	0x204025e0
  4044dc:	20403930 	.word	0x20403930
  4044e0:	20403938 	.word	0x20403938
  4044e4:	204025c0 	.word	0x204025c0
  4044e8:	004052ed 	.word	0x004052ed
  4044ec:	0040262d 	.word	0x0040262d
  4044f0:	2040496c 	.word	0x2040496c
  4044f4:	204025e4 	.word	0x204025e4
  4044f8:	0040348d 	.word	0x0040348d
  4044fc:	20404964 	.word	0x20404964
  404500:	00402061 	.word	0x00402061
  404504:	20404960 	.word	0x20404960
  404508:	004035e9 	.word	0x004035e9
  40450c:	004035c1 	.word	0x004035c1
  404510:	00404e79 	.word	0x00404e79
  404514:	00405015 	.word	0x00405015
  404518:	004033c1 	.word	0x004033c1
  40451c:	204025dc 	.word	0x204025dc
  404520:	20404968 	.word	0x20404968
  404524:	204025c4 	.word	0x204025c4
  404528:	204025e8 	.word	0x204025e8
        && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
  40452c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  40452e:	68db      	ldr	r3, [r3, #12]
  404530:	6858      	ldr	r0, [r3, #4]
  404532:	4ba1      	ldr	r3, [pc, #644]	; (4047b8 <tcp_input+0x790>)
  404534:	4798      	blx	r3
  404536:	3001      	adds	r0, #1
  404538:	4ba0      	ldr	r3, [pc, #640]	; (4047bc <tcp_input+0x794>)
  40453a:	681b      	ldr	r3, [r3, #0]
  40453c:	4298      	cmp	r0, r3
  40453e:	d1b2      	bne.n	4044a6 <tcp_input+0x47e>
      pcb->snd_buf++;
  404540:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
  404544:	3301      	adds	r3, #1
  404546:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
      pcb->rcv_nxt = seqno + 1;
  40454a:	4b9d      	ldr	r3, [pc, #628]	; (4047c0 <tcp_input+0x798>)
  40454c:	681b      	ldr	r3, [r3, #0]
  40454e:	1c5a      	adds	r2, r3, #1
  404550:	62aa      	str	r2, [r5, #40]	; 0x28
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
  404552:	632a      	str	r2, [r5, #48]	; 0x30
      pcb->lastack = ackno;
  404554:	64a8      	str	r0, [r5, #72]	; 0x48
      pcb->snd_wnd = tcphdr->wnd;
  404556:	4a9b      	ldr	r2, [pc, #620]	; (4047c4 <tcp_input+0x79c>)
  404558:	6812      	ldr	r2, [r2, #0]
  40455a:	89d1      	ldrh	r1, [r2, #14]
  40455c:	f8a5 1060 	strh.w	r1, [r5, #96]	; 0x60
      pcb->snd_wnd_max = tcphdr->wnd;
  404560:	89d2      	ldrh	r2, [r2, #14]
  404562:	f8a5 2062 	strh.w	r2, [r5, #98]	; 0x62
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
  404566:	3b01      	subs	r3, #1
  404568:	656b      	str	r3, [r5, #84]	; 0x54
      pcb->state = ESTABLISHED;
  40456a:	2304      	movs	r3, #4
  40456c:	762b      	strb	r3, [r5, #24]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &(pcb->remote_ip));
  40456e:	18e9      	adds	r1, r5, r3
  404570:	8ee8      	ldrh	r0, [r5, #54]	; 0x36
  404572:	4b95      	ldr	r3, [pc, #596]	; (4047c8 <tcp_input+0x7a0>)
  404574:	4798      	blx	r3
  404576:	86e8      	strh	r0, [r5, #54]	; 0x36
      pcb->ssthresh = pcb->mss * 10;
  404578:	eb00 0380 	add.w	r3, r0, r0, lsl #2
  40457c:	005b      	lsls	r3, r3, #1
  40457e:	f8a5 304e 	strh.w	r3, [r5, #78]	; 0x4e
      pcb->cwnd = ((pcb->cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
  404582:	f8b5 304c 	ldrh.w	r3, [r5, #76]	; 0x4c
  404586:	2b01      	cmp	r3, #1
  404588:	d101      	bne.n	40458e <tcp_input+0x566>
  40458a:	0040      	lsls	r0, r0, #1
  40458c:	b280      	uxth	r0, r0
  40458e:	f8a5 004c 	strh.w	r0, [r5, #76]	; 0x4c
      --pcb->snd_queuelen;
  404592:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
  404596:	3b01      	subs	r3, #1
  404598:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
      rseg = pcb->unacked;
  40459c:	6f28      	ldr	r0, [r5, #112]	; 0x70
      pcb->unacked = rseg->next;
  40459e:	6803      	ldr	r3, [r0, #0]
  4045a0:	672b      	str	r3, [r5, #112]	; 0x70
      tcp_seg_free(rseg);
  4045a2:	4b8a      	ldr	r3, [pc, #552]	; (4047cc <tcp_input+0x7a4>)
  4045a4:	4798      	blx	r3
      if(pcb->unacked == NULL)
  4045a6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  4045a8:	b993      	cbnz	r3, 4045d0 <tcp_input+0x5a8>
        pcb->rtime = -1;
  4045aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4045ae:	86ab      	strh	r3, [r5, #52]	; 0x34
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
  4045b0:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
  4045b4:	b13b      	cbz	r3, 4045c6 <tcp_input+0x59e>
  4045b6:	2200      	movs	r2, #0
  4045b8:	4629      	mov	r1, r5
  4045ba:	6928      	ldr	r0, [r5, #16]
  4045bc:	4798      	blx	r3
      if (err == ERR_ABRT) {
  4045be:	f110 0f0a 	cmn.w	r0, #10
  4045c2:	f43f ae1a 	beq.w	4041fa <tcp_input+0x1d2>
      tcp_ack_now(pcb);
  4045c6:	7fab      	ldrb	r3, [r5, #30]
  4045c8:	f043 0302 	orr.w	r3, r3, #2
  4045cc:	77ab      	strb	r3, [r5, #30]
  4045ce:	e5ff      	b.n	4041d0 <tcp_input+0x1a8>
        pcb->rtime = 0;
  4045d0:	2300      	movs	r3, #0
  4045d2:	86ab      	strh	r3, [r5, #52]	; 0x34
        pcb->nrtx = 0;
  4045d4:	f885 3046 	strb.w	r3, [r5, #70]	; 0x46
  4045d8:	e7ea      	b.n	4045b0 <tcp_input+0x588>
    if (flags & TCP_ACK) {
  4045da:	4b7d      	ldr	r3, [pc, #500]	; (4047d0 <tcp_input+0x7a8>)
  4045dc:	781b      	ldrb	r3, [r3, #0]
  4045de:	f013 0f10 	tst.w	r3, #16
  4045e2:	d049      	beq.n	404678 <tcp_input+0x650>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  4045e4:	4b75      	ldr	r3, [pc, #468]	; (4047bc <tcp_input+0x794>)
  4045e6:	6818      	ldr	r0, [r3, #0]
  4045e8:	6cab      	ldr	r3, [r5, #72]	; 0x48
  4045ea:	43db      	mvns	r3, r3
  4045ec:	42c3      	cmn	r3, r0
  4045ee:	d433      	bmi.n	404658 <tcp_input+0x630>
  4045f0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  4045f2:	1ac3      	subs	r3, r0, r3
  4045f4:	2b00      	cmp	r3, #0
  4045f6:	dc2f      	bgt.n	404658 <tcp_input+0x630>
        pcb->state = ESTABLISHED;
  4045f8:	2304      	movs	r3, #4
  4045fa:	762b      	strb	r3, [r5, #24]
        TCP_EVENT_ACCEPT(pcb, ERR_OK, err);
  4045fc:	696b      	ldr	r3, [r5, #20]
  4045fe:	b143      	cbz	r3, 404612 <tcp_input+0x5ea>
  404600:	2200      	movs	r2, #0
  404602:	4629      	mov	r1, r5
  404604:	6928      	ldr	r0, [r5, #16]
  404606:	4798      	blx	r3
        if (err != ERR_OK) {
  404608:	b138      	cbz	r0, 40461a <tcp_input+0x5f2>
          if (err != ERR_ABRT) {
  40460a:	f110 0f0a 	cmn.w	r0, #10
  40460e:	f43f adf4 	beq.w	4041fa <tcp_input+0x1d2>
            tcp_abort(pcb);
  404612:	4628      	mov	r0, r5
  404614:	4b6f      	ldr	r3, [pc, #444]	; (4047d4 <tcp_input+0x7ac>)
  404616:	4798      	blx	r3
  404618:	e5ef      	b.n	4041fa <tcp_input+0x1d2>
        old_cwnd = pcb->cwnd;
  40461a:	f8b5 404c 	ldrh.w	r4, [r5, #76]	; 0x4c
        tcp_receive(pcb);
  40461e:	4628      	mov	r0, r5
  404620:	4b6d      	ldr	r3, [pc, #436]	; (4047d8 <tcp_input+0x7b0>)
  404622:	4798      	blx	r3
        if (pcb->acked != 0) {
  404624:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
  404628:	b113      	cbz	r3, 404630 <tcp_input+0x608>
          pcb->acked--;
  40462a:	3b01      	subs	r3, #1
  40462c:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
        pcb->cwnd = ((old_cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
  404630:	2c01      	cmp	r4, #1
  404632:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
  404634:	bf04      	itt	eq
  404636:	005b      	lsleq	r3, r3, #1
  404638:	b29b      	uxtheq	r3, r3
  40463a:	f8a5 304c 	strh.w	r3, [r5, #76]	; 0x4c
        if (recv_flags & TF_GOT_FIN) {
  40463e:	4b67      	ldr	r3, [pc, #412]	; (4047dc <tcp_input+0x7b4>)
  404640:	781b      	ldrb	r3, [r3, #0]
  404642:	f013 0f20 	tst.w	r3, #32
  404646:	f43f adc3 	beq.w	4041d0 <tcp_input+0x1a8>
          tcp_ack_now(pcb);
  40464a:	7fab      	ldrb	r3, [r5, #30]
  40464c:	f043 0302 	orr.w	r3, r3, #2
  404650:	77ab      	strb	r3, [r5, #30]
          pcb->state = CLOSE_WAIT;
  404652:	2307      	movs	r3, #7
  404654:	762b      	strb	r3, [r5, #24]
  404656:	e5bb      	b.n	4041d0 <tcp_input+0x1a8>
                tcphdr->dest, tcphdr->src);
  404658:	4b5a      	ldr	r3, [pc, #360]	; (4047c4 <tcp_input+0x79c>)
  40465a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  40465c:	4a60      	ldr	r2, [pc, #384]	; (4047e0 <tcp_input+0x7b8>)
  40465e:	8814      	ldrh	r4, [r2, #0]
  404660:	4a57      	ldr	r2, [pc, #348]	; (4047c0 <tcp_input+0x798>)
  404662:	6811      	ldr	r1, [r2, #0]
  404664:	881a      	ldrh	r2, [r3, #0]
  404666:	9201      	str	r2, [sp, #4]
  404668:	885b      	ldrh	r3, [r3, #2]
  40466a:	9300      	str	r3, [sp, #0]
  40466c:	4b5d      	ldr	r3, [pc, #372]	; (4047e4 <tcp_input+0x7bc>)
  40466e:	4a5e      	ldr	r2, [pc, #376]	; (4047e8 <tcp_input+0x7c0>)
  404670:	4421      	add	r1, r4
  404672:	4c5e      	ldr	r4, [pc, #376]	; (4047ec <tcp_input+0x7c4>)
  404674:	47a0      	blx	r4
  404676:	e5ab      	b.n	4041d0 <tcp_input+0x1a8>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
  404678:	f013 0f02 	tst.w	r3, #2
  40467c:	f43f ada8 	beq.w	4041d0 <tcp_input+0x1a8>
  404680:	6aab      	ldr	r3, [r5, #40]	; 0x28
  404682:	3b01      	subs	r3, #1
  404684:	4a4e      	ldr	r2, [pc, #312]	; (4047c0 <tcp_input+0x798>)
  404686:	6812      	ldr	r2, [r2, #0]
  404688:	4293      	cmp	r3, r2
  40468a:	f47f ada1 	bne.w	4041d0 <tcp_input+0x1a8>
      tcp_rexmit(pcb);
  40468e:	4628      	mov	r0, r5
  404690:	4b57      	ldr	r3, [pc, #348]	; (4047f0 <tcp_input+0x7c8>)
  404692:	4798      	blx	r3
  404694:	e59c      	b.n	4041d0 <tcp_input+0x1a8>
    tcp_receive(pcb);
  404696:	4628      	mov	r0, r5
  404698:	4b4f      	ldr	r3, [pc, #316]	; (4047d8 <tcp_input+0x7b0>)
  40469a:	4798      	blx	r3
    if (recv_flags & TF_GOT_FIN) { /* passive close */
  40469c:	4b4f      	ldr	r3, [pc, #316]	; (4047dc <tcp_input+0x7b4>)
  40469e:	781b      	ldrb	r3, [r3, #0]
  4046a0:	f013 0f20 	tst.w	r3, #32
  4046a4:	f43f ad94 	beq.w	4041d0 <tcp_input+0x1a8>
      tcp_ack_now(pcb);
  4046a8:	7fab      	ldrb	r3, [r5, #30]
  4046aa:	f043 0302 	orr.w	r3, r3, #2
  4046ae:	77ab      	strb	r3, [r5, #30]
      pcb->state = CLOSE_WAIT;
  4046b0:	2307      	movs	r3, #7
  4046b2:	762b      	strb	r3, [r5, #24]
  4046b4:	e58c      	b.n	4041d0 <tcp_input+0x1a8>
    tcp_receive(pcb);
  4046b6:	4628      	mov	r0, r5
  4046b8:	4b47      	ldr	r3, [pc, #284]	; (4047d8 <tcp_input+0x7b0>)
  4046ba:	4798      	blx	r3
    if (recv_flags & TF_GOT_FIN) {
  4046bc:	4b47      	ldr	r3, [pc, #284]	; (4047dc <tcp_input+0x7b4>)
  4046be:	781b      	ldrb	r3, [r3, #0]
  4046c0:	f013 0f20 	tst.w	r3, #32
  4046c4:	d041      	beq.n	40474a <tcp_input+0x722>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
  4046c6:	4b42      	ldr	r3, [pc, #264]	; (4047d0 <tcp_input+0x7a8>)
  4046c8:	781b      	ldrb	r3, [r3, #0]
  4046ca:	f013 0f10 	tst.w	r3, #16
  4046ce:	d035      	beq.n	40473c <tcp_input+0x714>
  4046d0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4046d2:	4b3a      	ldr	r3, [pc, #232]	; (4047bc <tcp_input+0x794>)
  4046d4:	681b      	ldr	r3, [r3, #0]
  4046d6:	429a      	cmp	r2, r3
  4046d8:	d130      	bne.n	40473c <tcp_input+0x714>
        tcp_ack_now(pcb);
  4046da:	7fab      	ldrb	r3, [r5, #30]
  4046dc:	f043 0302 	orr.w	r3, r3, #2
  4046e0:	77ab      	strb	r3, [r5, #30]
        tcp_pcb_purge(pcb);
  4046e2:	4628      	mov	r0, r5
  4046e4:	4b43      	ldr	r3, [pc, #268]	; (4047f4 <tcp_input+0x7cc>)
  4046e6:	4798      	blx	r3
        TCP_RMV_ACTIVE(pcb);
  4046e8:	4b43      	ldr	r3, [pc, #268]	; (4047f8 <tcp_input+0x7d0>)
  4046ea:	681b      	ldr	r3, [r3, #0]
  4046ec:	42ab      	cmp	r3, r5
  4046ee:	d10e      	bne.n	40470e <tcp_input+0x6e6>
  4046f0:	68ea      	ldr	r2, [r5, #12]
  4046f2:	4b41      	ldr	r3, [pc, #260]	; (4047f8 <tcp_input+0x7d0>)
  4046f4:	601a      	str	r2, [r3, #0]
  4046f6:	2201      	movs	r2, #1
  4046f8:	4b40      	ldr	r3, [pc, #256]	; (4047fc <tcp_input+0x7d4>)
  4046fa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
  4046fc:	230a      	movs	r3, #10
  4046fe:	762b      	strb	r3, [r5, #24]
        TCP_REG(&tcp_tw_pcbs, pcb);
  404700:	4b3f      	ldr	r3, [pc, #252]	; (404800 <tcp_input+0x7d8>)
  404702:	681a      	ldr	r2, [r3, #0]
  404704:	60ea      	str	r2, [r5, #12]
  404706:	601d      	str	r5, [r3, #0]
  404708:	4b3e      	ldr	r3, [pc, #248]	; (404804 <tcp_input+0x7dc>)
  40470a:	4798      	blx	r3
  40470c:	e560      	b.n	4041d0 <tcp_input+0x1a8>
        TCP_RMV_ACTIVE(pcb);
  40470e:	4a3e      	ldr	r2, [pc, #248]	; (404808 <tcp_input+0x7e0>)
  404710:	6013      	str	r3, [r2, #0]
  404712:	2200      	movs	r2, #0
  404714:	2001      	movs	r0, #1
  404716:	b92b      	cbnz	r3, 404724 <tcp_input+0x6fc>
  404718:	2a00      	cmp	r2, #0
  40471a:	d0ec      	beq.n	4046f6 <tcp_input+0x6ce>
  40471c:	2200      	movs	r2, #0
  40471e:	4b3a      	ldr	r3, [pc, #232]	; (404808 <tcp_input+0x7e0>)
  404720:	601a      	str	r2, [r3, #0]
  404722:	e7e8      	b.n	4046f6 <tcp_input+0x6ce>
  404724:	68d9      	ldr	r1, [r3, #12]
  404726:	42a9      	cmp	r1, r5
  404728:	d105      	bne.n	404736 <tcp_input+0x70e>
  40472a:	b10a      	cbz	r2, 404730 <tcp_input+0x708>
  40472c:	4a36      	ldr	r2, [pc, #216]	; (404808 <tcp_input+0x7e0>)
  40472e:	6013      	str	r3, [r2, #0]
  404730:	68ca      	ldr	r2, [r1, #12]
  404732:	60da      	str	r2, [r3, #12]
  404734:	e7df      	b.n	4046f6 <tcp_input+0x6ce>
  404736:	4602      	mov	r2, r0
  404738:	460b      	mov	r3, r1
  40473a:	e7ec      	b.n	404716 <tcp_input+0x6ee>
        tcp_ack_now(pcb);
  40473c:	7fab      	ldrb	r3, [r5, #30]
  40473e:	f043 0302 	orr.w	r3, r3, #2
  404742:	77ab      	strb	r3, [r5, #30]
        pcb->state = CLOSING;
  404744:	2308      	movs	r3, #8
  404746:	762b      	strb	r3, [r5, #24]
  404748:	e542      	b.n	4041d0 <tcp_input+0x1a8>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
  40474a:	4b21      	ldr	r3, [pc, #132]	; (4047d0 <tcp_input+0x7a8>)
  40474c:	781b      	ldrb	r3, [r3, #0]
  40474e:	f013 0f10 	tst.w	r3, #16
  404752:	f43f ad3d 	beq.w	4041d0 <tcp_input+0x1a8>
  404756:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  404758:	4b18      	ldr	r3, [pc, #96]	; (4047bc <tcp_input+0x794>)
  40475a:	681b      	ldr	r3, [r3, #0]
  40475c:	429a      	cmp	r2, r3
  40475e:	f47f ad37 	bne.w	4041d0 <tcp_input+0x1a8>
      pcb->state = FIN_WAIT_2;
  404762:	2306      	movs	r3, #6
  404764:	762b      	strb	r3, [r5, #24]
  404766:	e533      	b.n	4041d0 <tcp_input+0x1a8>
    tcp_receive(pcb);
  404768:	4628      	mov	r0, r5
  40476a:	4b1b      	ldr	r3, [pc, #108]	; (4047d8 <tcp_input+0x7b0>)
  40476c:	4798      	blx	r3
    if (recv_flags & TF_GOT_FIN) {
  40476e:	4b1b      	ldr	r3, [pc, #108]	; (4047dc <tcp_input+0x7b4>)
  404770:	781b      	ldrb	r3, [r3, #0]
  404772:	f013 0f20 	tst.w	r3, #32
  404776:	f43f ad2b 	beq.w	4041d0 <tcp_input+0x1a8>
      tcp_ack_now(pcb);
  40477a:	7fab      	ldrb	r3, [r5, #30]
  40477c:	f043 0302 	orr.w	r3, r3, #2
  404780:	77ab      	strb	r3, [r5, #30]
      tcp_pcb_purge(pcb);
  404782:	4628      	mov	r0, r5
  404784:	4b1b      	ldr	r3, [pc, #108]	; (4047f4 <tcp_input+0x7cc>)
  404786:	4798      	blx	r3
      TCP_RMV_ACTIVE(pcb);
  404788:	4b1b      	ldr	r3, [pc, #108]	; (4047f8 <tcp_input+0x7d0>)
  40478a:	681b      	ldr	r3, [r3, #0]
  40478c:	42ab      	cmp	r3, r5
  40478e:	d10e      	bne.n	4047ae <tcp_input+0x786>
  404790:	68ea      	ldr	r2, [r5, #12]
  404792:	4b19      	ldr	r3, [pc, #100]	; (4047f8 <tcp_input+0x7d0>)
  404794:	601a      	str	r2, [r3, #0]
  404796:	2201      	movs	r2, #1
  404798:	4b18      	ldr	r3, [pc, #96]	; (4047fc <tcp_input+0x7d4>)
  40479a:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
  40479c:	230a      	movs	r3, #10
  40479e:	762b      	strb	r3, [r5, #24]
      TCP_REG(&tcp_tw_pcbs, pcb);
  4047a0:	4b17      	ldr	r3, [pc, #92]	; (404800 <tcp_input+0x7d8>)
  4047a2:	681a      	ldr	r2, [r3, #0]
  4047a4:	60ea      	str	r2, [r5, #12]
  4047a6:	601d      	str	r5, [r3, #0]
  4047a8:	4b16      	ldr	r3, [pc, #88]	; (404804 <tcp_input+0x7dc>)
  4047aa:	4798      	blx	r3
  4047ac:	e510      	b.n	4041d0 <tcp_input+0x1a8>
      TCP_RMV_ACTIVE(pcb);
  4047ae:	4a16      	ldr	r2, [pc, #88]	; (404808 <tcp_input+0x7e0>)
  4047b0:	6013      	str	r3, [r2, #0]
  4047b2:	2200      	movs	r2, #0
  4047b4:	2001      	movs	r0, #1
  4047b6:	e02e      	b.n	404816 <tcp_input+0x7ee>
  4047b8:	004011c1 	.word	0x004011c1
  4047bc:	204025c0 	.word	0x204025c0
  4047c0:	204025e0 	.word	0x204025e0
  4047c4:	204025e4 	.word	0x204025e4
  4047c8:	004035c1 	.word	0x004035c1
  4047cc:	00402bcd 	.word	0x00402bcd
  4047d0:	204025c4 	.word	0x204025c4
  4047d4:	00403465 	.word	0x00403465
  4047d8:	0040374d 	.word	0x0040374d
  4047dc:	204025dc 	.word	0x204025dc
  4047e0:	204025e8 	.word	0x204025e8
  4047e4:	20403930 	.word	0x20403930
  4047e8:	20403938 	.word	0x20403938
  4047ec:	004052ed 	.word	0x004052ed
  4047f0:	004053c5 	.word	0x004053c5
  4047f4:	00402c65 	.word	0x00402c65
  4047f8:	20404964 	.word	0x20404964
  4047fc:	20404960 	.word	0x20404960
  404800:	20404978 	.word	0x20404978
  404804:	00402061 	.word	0x00402061
  404808:	20404970 	.word	0x20404970
  40480c:	68d9      	ldr	r1, [r3, #12]
  40480e:	42a9      	cmp	r1, r5
  404810:	d009      	beq.n	404826 <tcp_input+0x7fe>
  404812:	4602      	mov	r2, r0
  404814:	460b      	mov	r3, r1
  404816:	2b00      	cmp	r3, #0
  404818:	d1f8      	bne.n	40480c <tcp_input+0x7e4>
  40481a:	2a00      	cmp	r2, #0
  40481c:	d0bb      	beq.n	404796 <tcp_input+0x76e>
  40481e:	2200      	movs	r2, #0
  404820:	4b72      	ldr	r3, [pc, #456]	; (4049ec <tcp_input+0x9c4>)
  404822:	601a      	str	r2, [r3, #0]
  404824:	e7b7      	b.n	404796 <tcp_input+0x76e>
  404826:	b10a      	cbz	r2, 40482c <tcp_input+0x804>
  404828:	4a70      	ldr	r2, [pc, #448]	; (4049ec <tcp_input+0x9c4>)
  40482a:	6013      	str	r3, [r2, #0]
  40482c:	68ca      	ldr	r2, [r1, #12]
  40482e:	60da      	str	r2, [r3, #12]
  404830:	e7b1      	b.n	404796 <tcp_input+0x76e>
    tcp_receive(pcb);
  404832:	4628      	mov	r0, r5
  404834:	4b6e      	ldr	r3, [pc, #440]	; (4049f0 <tcp_input+0x9c8>)
  404836:	4798      	blx	r3
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
  404838:	4b6e      	ldr	r3, [pc, #440]	; (4049f4 <tcp_input+0x9cc>)
  40483a:	781b      	ldrb	r3, [r3, #0]
  40483c:	f013 0f10 	tst.w	r3, #16
  404840:	f43f acc6 	beq.w	4041d0 <tcp_input+0x1a8>
  404844:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  404846:	4b6c      	ldr	r3, [pc, #432]	; (4049f8 <tcp_input+0x9d0>)
  404848:	681b      	ldr	r3, [r3, #0]
  40484a:	429a      	cmp	r2, r3
  40484c:	f47f acc0 	bne.w	4041d0 <tcp_input+0x1a8>
      tcp_pcb_purge(pcb);
  404850:	4628      	mov	r0, r5
  404852:	4b6a      	ldr	r3, [pc, #424]	; (4049fc <tcp_input+0x9d4>)
  404854:	4798      	blx	r3
      TCP_RMV_ACTIVE(pcb);
  404856:	4b6a      	ldr	r3, [pc, #424]	; (404a00 <tcp_input+0x9d8>)
  404858:	681b      	ldr	r3, [r3, #0]
  40485a:	42ab      	cmp	r3, r5
  40485c:	d10e      	bne.n	40487c <tcp_input+0x854>
  40485e:	68ea      	ldr	r2, [r5, #12]
  404860:	4b67      	ldr	r3, [pc, #412]	; (404a00 <tcp_input+0x9d8>)
  404862:	601a      	str	r2, [r3, #0]
  404864:	2201      	movs	r2, #1
  404866:	4b67      	ldr	r3, [pc, #412]	; (404a04 <tcp_input+0x9dc>)
  404868:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
  40486a:	230a      	movs	r3, #10
  40486c:	762b      	strb	r3, [r5, #24]
      TCP_REG(&tcp_tw_pcbs, pcb);
  40486e:	4b66      	ldr	r3, [pc, #408]	; (404a08 <tcp_input+0x9e0>)
  404870:	681a      	ldr	r2, [r3, #0]
  404872:	60ea      	str	r2, [r5, #12]
  404874:	601d      	str	r5, [r3, #0]
  404876:	4b65      	ldr	r3, [pc, #404]	; (404a0c <tcp_input+0x9e4>)
  404878:	4798      	blx	r3
  40487a:	e4a9      	b.n	4041d0 <tcp_input+0x1a8>
      TCP_RMV_ACTIVE(pcb);
  40487c:	4a5b      	ldr	r2, [pc, #364]	; (4049ec <tcp_input+0x9c4>)
  40487e:	6013      	str	r3, [r2, #0]
  404880:	2200      	movs	r2, #0
  404882:	2001      	movs	r0, #1
  404884:	e004      	b.n	404890 <tcp_input+0x868>
  404886:	68d9      	ldr	r1, [r3, #12]
  404888:	42a9      	cmp	r1, r5
  40488a:	d009      	beq.n	4048a0 <tcp_input+0x878>
  40488c:	4602      	mov	r2, r0
  40488e:	460b      	mov	r3, r1
  404890:	2b00      	cmp	r3, #0
  404892:	d1f8      	bne.n	404886 <tcp_input+0x85e>
  404894:	2a00      	cmp	r2, #0
  404896:	d0e5      	beq.n	404864 <tcp_input+0x83c>
  404898:	2200      	movs	r2, #0
  40489a:	4b54      	ldr	r3, [pc, #336]	; (4049ec <tcp_input+0x9c4>)
  40489c:	601a      	str	r2, [r3, #0]
  40489e:	e7e1      	b.n	404864 <tcp_input+0x83c>
  4048a0:	b10a      	cbz	r2, 4048a6 <tcp_input+0x87e>
  4048a2:	4a52      	ldr	r2, [pc, #328]	; (4049ec <tcp_input+0x9c4>)
  4048a4:	6013      	str	r3, [r2, #0]
  4048a6:	68ca      	ldr	r2, [r1, #12]
  4048a8:	60da      	str	r2, [r3, #12]
  4048aa:	e7db      	b.n	404864 <tcp_input+0x83c>
    tcp_receive(pcb);
  4048ac:	4628      	mov	r0, r5
  4048ae:	4b50      	ldr	r3, [pc, #320]	; (4049f0 <tcp_input+0x9c8>)
  4048b0:	4798      	blx	r3
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
  4048b2:	4b50      	ldr	r3, [pc, #320]	; (4049f4 <tcp_input+0x9cc>)
  4048b4:	781b      	ldrb	r3, [r3, #0]
  4048b6:	f013 0f10 	tst.w	r3, #16
  4048ba:	f43f ac89 	beq.w	4041d0 <tcp_input+0x1a8>
  4048be:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4048c0:	4b4d      	ldr	r3, [pc, #308]	; (4049f8 <tcp_input+0x9d0>)
  4048c2:	681b      	ldr	r3, [r3, #0]
  4048c4:	429a      	cmp	r2, r3
  4048c6:	f47f ac83 	bne.w	4041d0 <tcp_input+0x1a8>
      recv_flags |= TF_CLOSED;
  4048ca:	4a51      	ldr	r2, [pc, #324]	; (404a10 <tcp_input+0x9e8>)
  4048cc:	7813      	ldrb	r3, [r2, #0]
  4048ce:	f043 0310 	orr.w	r3, r3, #16
  4048d2:	7013      	strb	r3, [r2, #0]
  4048d4:	e47c      	b.n	4041d0 <tcp_input+0x1a8>
      } else if (recv_flags & TF_CLOSED) {
  4048d6:	f013 0f10 	tst.w	r3, #16
  4048da:	d013      	beq.n	404904 <tcp_input+0x8dc>
        if (!(pcb->flags & TF_RXCLOSED)) {
  4048dc:	7fab      	ldrb	r3, [r5, #30]
  4048de:	f013 0f10 	tst.w	r3, #16
  4048e2:	d106      	bne.n	4048f2 <tcp_input+0x8ca>
          TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_CLSD);
  4048e4:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
  4048e8:	b11b      	cbz	r3, 4048f2 <tcp_input+0x8ca>
  4048ea:	f06f 010b 	mvn.w	r1, #11
  4048ee:	6928      	ldr	r0, [r5, #16]
  4048f0:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
  4048f2:	4629      	mov	r1, r5
  4048f4:	4842      	ldr	r0, [pc, #264]	; (404a00 <tcp_input+0x9d8>)
  4048f6:	4b47      	ldr	r3, [pc, #284]	; (404a14 <tcp_input+0x9ec>)
  4048f8:	4798      	blx	r3
        memp_free(MEMP_TCP_PCB, pcb);
  4048fa:	4629      	mov	r1, r5
  4048fc:	2001      	movs	r0, #1
  4048fe:	4b46      	ldr	r3, [pc, #280]	; (404a18 <tcp_input+0x9f0>)
  404900:	4798      	blx	r3
  404902:	e47a      	b.n	4041fa <tcp_input+0x1d2>
        if (pcb->acked > 0) {
  404904:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
  404908:	b142      	cbz	r2, 40491c <tcp_input+0x8f4>
          TCP_EVENT_SENT(pcb, pcb->acked, err);
  40490a:	6feb      	ldr	r3, [r5, #124]	; 0x7c
  40490c:	b133      	cbz	r3, 40491c <tcp_input+0x8f4>
  40490e:	4629      	mov	r1, r5
  404910:	6928      	ldr	r0, [r5, #16]
  404912:	4798      	blx	r3
          if (err == ERR_ABRT) {
  404914:	f110 0f0a 	cmn.w	r0, #10
  404918:	f43f ac6f 	beq.w	4041fa <tcp_input+0x1d2>
        if (recv_data != NULL) {
  40491c:	4b3f      	ldr	r3, [pc, #252]	; (404a1c <tcp_input+0x9f4>)
  40491e:	681a      	ldr	r2, [r3, #0]
  404920:	b1ca      	cbz	r2, 404956 <tcp_input+0x92e>
          if (pcb->flags & TF_RXCLOSED) {
  404922:	7fab      	ldrb	r3, [r5, #30]
  404924:	f013 0f10 	tst.w	r3, #16
  404928:	d006      	beq.n	404938 <tcp_input+0x910>
            pbuf_free(recv_data);
  40492a:	4610      	mov	r0, r2
  40492c:	4b3c      	ldr	r3, [pc, #240]	; (404a20 <tcp_input+0x9f8>)
  40492e:	4798      	blx	r3
            tcp_abort(pcb);
  404930:	4628      	mov	r0, r5
  404932:	4b3c      	ldr	r3, [pc, #240]	; (404a24 <tcp_input+0x9fc>)
  404934:	4798      	blx	r3
            goto aborted;
  404936:	e460      	b.n	4041fa <tcp_input+0x1d2>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
  404938:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
  40493c:	b1ec      	cbz	r4, 40497a <tcp_input+0x952>
  40493e:	2300      	movs	r3, #0
  404940:	4629      	mov	r1, r5
  404942:	6928      	ldr	r0, [r5, #16]
  404944:	47a0      	blx	r4
          if (err == ERR_ABRT) {
  404946:	f110 0f0a 	cmn.w	r0, #10
  40494a:	f43f ac56 	beq.w	4041fa <tcp_input+0x1d2>
          if (err != ERR_OK) {
  40494e:	b110      	cbz	r0, 404956 <tcp_input+0x92e>
            pcb->refused_data = recv_data;
  404950:	4b32      	ldr	r3, [pc, #200]	; (404a1c <tcp_input+0x9f4>)
  404952:	681b      	ldr	r3, [r3, #0]
  404954:	67ab      	str	r3, [r5, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
  404956:	4b2e      	ldr	r3, [pc, #184]	; (404a10 <tcp_input+0x9e8>)
  404958:	781b      	ldrb	r3, [r3, #0]
  40495a:	f013 0f20 	tst.w	r3, #32
  40495e:	d005      	beq.n	40496c <tcp_input+0x944>
          if (pcb->refused_data != NULL) {
  404960:	6fab      	ldr	r3, [r5, #120]	; 0x78
  404962:	b183      	cbz	r3, 404986 <tcp_input+0x95e>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
  404964:	7b5a      	ldrb	r2, [r3, #13]
  404966:	f042 0220 	orr.w	r2, r2, #32
  40496a:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
  40496c:	2200      	movs	r2, #0
  40496e:	4b2e      	ldr	r3, [pc, #184]	; (404a28 <tcp_input+0xa00>)
  404970:	601a      	str	r2, [r3, #0]
        tcp_output(pcb);
  404972:	4628      	mov	r0, r5
  404974:	4b2d      	ldr	r3, [pc, #180]	; (404a2c <tcp_input+0xa04>)
  404976:	4798      	blx	r3
  404978:	e43f      	b.n	4041fa <tcp_input+0x1d2>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
  40497a:	2300      	movs	r3, #0
  40497c:	4629      	mov	r1, r5
  40497e:	4618      	mov	r0, r3
  404980:	4c2b      	ldr	r4, [pc, #172]	; (404a30 <tcp_input+0xa08>)
  404982:	47a0      	blx	r4
  404984:	e7df      	b.n	404946 <tcp_input+0x91e>
            if (pcb->rcv_wnd != TCP_WND) {
  404986:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
  404988:	f640 3268 	movw	r2, #2920	; 0xb68
  40498c:	4293      	cmp	r3, r2
  40498e:	d001      	beq.n	404994 <tcp_input+0x96c>
              pcb->rcv_wnd++;
  404990:	3301      	adds	r3, #1
  404992:	85ab      	strh	r3, [r5, #44]	; 0x2c
            TCP_EVENT_CLOSED(pcb, err);
  404994:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
  404998:	2c00      	cmp	r4, #0
  40499a:	d0e7      	beq.n	40496c <tcp_input+0x944>
  40499c:	2300      	movs	r3, #0
  40499e:	461a      	mov	r2, r3
  4049a0:	4629      	mov	r1, r5
  4049a2:	6928      	ldr	r0, [r5, #16]
  4049a4:	47a0      	blx	r4
            if (err == ERR_ABRT) {
  4049a6:	f110 0f0a 	cmn.w	r0, #10
  4049aa:	d1df      	bne.n	40496c <tcp_input+0x944>
  4049ac:	e425      	b.n	4041fa <tcp_input+0x1d2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
  4049ae:	4b21      	ldr	r3, [pc, #132]	; (404a34 <tcp_input+0xa0c>)
  4049b0:	681b      	ldr	r3, [r3, #0]
  4049b2:	8998      	ldrh	r0, [r3, #12]
  4049b4:	4b20      	ldr	r3, [pc, #128]	; (404a38 <tcp_input+0xa10>)
  4049b6:	4798      	blx	r3
  4049b8:	f010 0f04 	tst.w	r0, #4
  4049bc:	d004      	beq.n	4049c8 <tcp_input+0x9a0>
    pbuf_free(p);
  4049be:	4620      	mov	r0, r4
  4049c0:	4b17      	ldr	r3, [pc, #92]	; (404a20 <tcp_input+0x9f8>)
  4049c2:	4798      	blx	r3
  4049c4:	f7ff bb48 	b.w	404058 <tcp_input+0x30>
        tcphdr->dest, tcphdr->src);
  4049c8:	4b1a      	ldr	r3, [pc, #104]	; (404a34 <tcp_input+0xa0c>)
  4049ca:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen,
  4049cc:	4a1b      	ldr	r2, [pc, #108]	; (404a3c <tcp_input+0xa14>)
  4049ce:	8810      	ldrh	r0, [r2, #0]
  4049d0:	4a1b      	ldr	r2, [pc, #108]	; (404a40 <tcp_input+0xa18>)
  4049d2:	6811      	ldr	r1, [r2, #0]
  4049d4:	881a      	ldrh	r2, [r3, #0]
  4049d6:	9201      	str	r2, [sp, #4]
  4049d8:	885b      	ldrh	r3, [r3, #2]
  4049da:	9300      	str	r3, [sp, #0]
  4049dc:	4b19      	ldr	r3, [pc, #100]	; (404a44 <tcp_input+0xa1c>)
  4049de:	4a1a      	ldr	r2, [pc, #104]	; (404a48 <tcp_input+0xa20>)
  4049e0:	4401      	add	r1, r0
  4049e2:	4805      	ldr	r0, [pc, #20]	; (4049f8 <tcp_input+0x9d0>)
  4049e4:	6800      	ldr	r0, [r0, #0]
  4049e6:	4d19      	ldr	r5, [pc, #100]	; (404a4c <tcp_input+0xa24>)
  4049e8:	47a8      	blx	r5
  4049ea:	e7e8      	b.n	4049be <tcp_input+0x996>
  4049ec:	20404970 	.word	0x20404970
  4049f0:	0040374d 	.word	0x0040374d
  4049f4:	204025c4 	.word	0x204025c4
  4049f8:	204025c0 	.word	0x204025c0
  4049fc:	00402c65 	.word	0x00402c65
  404a00:	20404964 	.word	0x20404964
  404a04:	20404960 	.word	0x20404960
  404a08:	20404978 	.word	0x20404978
  404a0c:	00402061 	.word	0x00402061
  404a10:	204025dc 	.word	0x204025dc
  404a14:	00403031 	.word	0x00403031
  404a18:	00402475 	.word	0x00402475
  404a1c:	204025d8 	.word	0x204025d8
  404a20:	0040262d 	.word	0x0040262d
  404a24:	00403465 	.word	0x00403465
  404a28:	2040497c 	.word	0x2040497c
  404a2c:	00405015 	.word	0x00405015
  404a30:	00403279 	.word	0x00403279
  404a34:	204025e4 	.word	0x204025e4
  404a38:	0040119f 	.word	0x0040119f
  404a3c:	204025e8 	.word	0x204025e8
  404a40:	204025e0 	.word	0x204025e0
  404a44:	20403930 	.word	0x20403930
  404a48:	20403938 	.word	0x20403938
  404a4c:	004052ed 	.word	0x004052ed

00404a50 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
  404a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404a54:	4681      	mov	r9, r0
  404a56:	4688      	mov	r8, r1
  404a58:	4616      	mov	r6, r2
  404a5a:	469a      	mov	sl, r3
  404a5c:	f89d 7020 	ldrb.w	r7, [sp, #32]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
  404a60:	f007 0301 	and.w	r3, r7, #1
  404a64:	f007 0202 	and.w	r2, r7, #2
  404a68:	2a00      	cmp	r2, #0
  404a6a:	bf14      	ite	ne
  404a6c:	250c      	movne	r5, #12
  404a6e:	2500      	moveq	r5, #0
  404a70:	eb05 0583 	add.w	r5, r5, r3, lsl #2

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
  404a74:	2003      	movs	r0, #3
  404a76:	4b23      	ldr	r3, [pc, #140]	; (404b04 <tcp_create_segment+0xb4>)
  404a78:	4798      	blx	r3
  404a7a:	4604      	mov	r4, r0
  404a7c:	2800      	cmp	r0, #0
  404a7e:	d038      	beq.n	404af2 <tcp_create_segment+0xa2>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
    return NULL;
  }
  seg->flags = optflags;
  404a80:	7287      	strb	r7, [r0, #10]
  seg->next = NULL;
  404a82:	2300      	movs	r3, #0
  404a84:	6003      	str	r3, [r0, #0]
  seg->p = p;
  404a86:	f8c0 8004 	str.w	r8, [r0, #4]
  seg->len = p->tot_len - optlen;
  404a8a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
  404a8e:	1b5b      	subs	r3, r3, r5
  404a90:	8103      	strh	r3, [r0, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
  404a92:	2114      	movs	r1, #20
  404a94:	4640      	mov	r0, r8
  404a96:	4b1c      	ldr	r3, [pc, #112]	; (404b08 <tcp_create_segment+0xb8>)
  404a98:	4798      	blx	r3
  404a9a:	bb70      	cbnz	r0, 404afa <tcp_create_segment+0xaa>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
    return NULL;
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
  404a9c:	6863      	ldr	r3, [r4, #4]
  404a9e:	f8d3 8004 	ldr.w	r8, [r3, #4]
  404aa2:	f8c4 800c 	str.w	r8, [r4, #12]
  seg->tcphdr->src = htons(pcb->local_port);
  404aa6:	f8b9 001a 	ldrh.w	r0, [r9, #26]
  404aaa:	4f18      	ldr	r7, [pc, #96]	; (404b0c <tcp_create_segment+0xbc>)
  404aac:	47b8      	blx	r7
  404aae:	f8a8 0000 	strh.w	r0, [r8]
  seg->tcphdr->dest = htons(pcb->remote_port);
  404ab2:	f8d4 800c 	ldr.w	r8, [r4, #12]
  404ab6:	f8b9 001c 	ldrh.w	r0, [r9, #28]
  404aba:	47b8      	blx	r7
  404abc:	f8a8 0002 	strh.w	r0, [r8, #2]
  seg->tcphdr->seqno = htonl(seqno);
  404ac0:	f8d4 800c 	ldr.w	r8, [r4, #12]
  404ac4:	4650      	mov	r0, sl
  404ac6:	4b12      	ldr	r3, [pc, #72]	; (404b10 <tcp_create_segment+0xc0>)
  404ac8:	4798      	blx	r3
  404aca:	f8c8 0004 	str.w	r0, [r8, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
  404ace:	f8d4 800c 	ldr.w	r8, [r4, #12]
  404ad2:	f3c5 0587 	ubfx	r5, r5, #2, #8
  404ad6:	3505      	adds	r5, #5
  404ad8:	ea46 3505 	orr.w	r5, r6, r5, lsl #12
  404adc:	b2a8      	uxth	r0, r5
  404ade:	47b8      	blx	r7
  404ae0:	f8a8 000c 	strh.w	r0, [r8, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
  404ae4:	68e3      	ldr	r3, [r4, #12]
  404ae6:	2200      	movs	r2, #0
  404ae8:	749a      	strb	r2, [r3, #18]
  404aea:	74da      	strb	r2, [r3, #19]
  return seg;
} 
  404aec:	4620      	mov	r0, r4
  404aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
  404af2:	4640      	mov	r0, r8
  404af4:	4b07      	ldr	r3, [pc, #28]	; (404b14 <tcp_create_segment+0xc4>)
  404af6:	4798      	blx	r3
    return NULL;
  404af8:	e7f8      	b.n	404aec <tcp_create_segment+0x9c>
    tcp_seg_free(seg);
  404afa:	4620      	mov	r0, r4
  404afc:	4b06      	ldr	r3, [pc, #24]	; (404b18 <tcp_create_segment+0xc8>)
  404afe:	4798      	blx	r3
    return NULL;
  404b00:	2400      	movs	r4, #0
  404b02:	e7f3      	b.n	404aec <tcp_create_segment+0x9c>
  404b04:	00402455 	.word	0x00402455
  404b08:	004025bf 	.word	0x004025bf
  404b0c:	00401195 	.word	0x00401195
  404b10:	004011a9 	.word	0x004011a9
  404b14:	0040262d 	.word	0x0040262d
  404b18:	00402bcd 	.word	0x00402bcd

00404b1c <tcp_output_alloc_header>:
{
  404b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404b20:	4606      	mov	r6, r0
  404b22:	460c      	mov	r4, r1
  404b24:	4699      	mov	r9, r3
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
  404b26:	3214      	adds	r2, #20
  404b28:	4411      	add	r1, r2
  404b2a:	2200      	movs	r2, #0
  404b2c:	b289      	uxth	r1, r1
  404b2e:	2001      	movs	r0, #1
  404b30:	4b14      	ldr	r3, [pc, #80]	; (404b84 <tcp_output_alloc_header+0x68>)
  404b32:	4798      	blx	r3
  if (p != NULL) {
  404b34:	4680      	mov	r8, r0
  404b36:	b310      	cbz	r0, 404b7e <tcp_output_alloc_header+0x62>
    tcphdr = (struct tcp_hdr *)p->payload;
  404b38:	6845      	ldr	r5, [r0, #4]
    tcphdr->src = htons(pcb->local_port);
  404b3a:	8b70      	ldrh	r0, [r6, #26]
  404b3c:	4f12      	ldr	r7, [pc, #72]	; (404b88 <tcp_output_alloc_header+0x6c>)
  404b3e:	47b8      	blx	r7
  404b40:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = htons(pcb->remote_port);
  404b42:	8bb0      	ldrh	r0, [r6, #28]
  404b44:	47b8      	blx	r7
  404b46:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
  404b48:	f8c5 9004 	str.w	r9, [r5, #4]
    tcphdr->ackno = htonl(pcb->rcv_nxt);
  404b4c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
  404b4e:	4b0f      	ldr	r3, [pc, #60]	; (404b8c <tcp_output_alloc_header+0x70>)
  404b50:	4798      	blx	r3
  404b52:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
  404b54:	08a0      	lsrs	r0, r4, #2
  404b56:	3005      	adds	r0, #5
  404b58:	0300      	lsls	r0, r0, #12
  404b5a:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  404b5e:	f040 0010 	orr.w	r0, r0, #16
  404b62:	47b8      	blx	r7
  404b64:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = htons(pcb->rcv_ann_wnd);
  404b66:	8df0      	ldrh	r0, [r6, #46]	; 0x2e
  404b68:	47b8      	blx	r7
  404b6a:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
  404b6c:	2300      	movs	r3, #0
  404b6e:	742b      	strb	r3, [r5, #16]
  404b70:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
  404b72:	74ab      	strb	r3, [r5, #18]
  404b74:	74eb      	strb	r3, [r5, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  404b76:	8df2      	ldrh	r2, [r6, #46]	; 0x2e
  404b78:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  404b7a:	4413      	add	r3, r2
  404b7c:	6333      	str	r3, [r6, #48]	; 0x30
}
  404b7e:	4640      	mov	r0, r8
  404b80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404b84:	00402685 	.word	0x00402685
  404b88:	00401195 	.word	0x00401195
  404b8c:	004011a9 	.word	0x004011a9

00404b90 <tcp_write>:
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)", 
  404b90:	b359      	cbz	r1, 404bea <tcp_write+0x5a>
{
  404b92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404b96:	b08b      	sub	sp, #44	; 0x2c
  404b98:	460d      	mov	r5, r1
  if ((pcb->state != ESTABLISHED) &&
  404b9a:	7e04      	ldrb	r4, [r0, #24]
      (pcb->state != CLOSE_WAIT) &&
  404b9c:	1ea1      	subs	r1, r4, #2
  404b9e:	b2c9      	uxtb	r1, r1
      (pcb->state != SYN_SENT) &&
  404ba0:	2902      	cmp	r1, #2
  404ba2:	d902      	bls.n	404baa <tcp_write+0x1a>
  404ba4:	2c07      	cmp	r4, #7
  404ba6:	f040 814f 	bne.w	404e48 <tcp_write+0x2b8>
  } else if (len == 0) {
  404baa:	b13a      	cbz	r2, 404bbc <tcp_write+0x2c>
  if (len > pcb->snd_buf) {
  404bac:	f8b0 1066 	ldrh.w	r1, [r0, #102]	; 0x66
  404bb0:	4291      	cmp	r1, r2
  404bb2:	d31b      	bcc.n	404bec <tcp_write+0x5c>
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  404bb4:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
  404bb8:	2907      	cmp	r1, #7
  404bba:	d81e      	bhi.n	404bfa <tcp_write+0x6a>
  404bbc:	9505      	str	r5, [sp, #20]
  404bbe:	9309      	str	r3, [sp, #36]	; 0x24
  404bc0:	4692      	mov	sl, r2
  404bc2:	4604      	mov	r4, r0
  u16_t mss_local = LWIP_MIN(pcb->mss, pcb->snd_wnd_max/2);
  404bc4:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
  404bc8:	085b      	lsrs	r3, r3, #1
  404bca:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
  404bcc:	4293      	cmp	r3, r2
  404bce:	bf28      	it	cs
  404bd0:	4613      	movcs	r3, r2
  404bd2:	9307      	str	r3, [sp, #28]

  err = tcp_write_checks(pcb, len);
  if (err != ERR_OK) {
    return err;
  }
  queuelen = pcb->snd_queuelen;
  404bd4:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
  404bd8:	9304      	str	r3, [sp, #16]
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
  404bda:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
  404bdc:	b9af      	cbnz	r7, 404c0a <tcp_write+0x7a>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
  404bde:	9703      	str	r7, [sp, #12]
  u16_t oversize = 0;
  404be0:	2500      	movs	r5, #0
  u16_t oversize_used = 0;
  404be2:	462e      	mov	r6, r5
  u16_t pos = 0; /* position in 'arg' data */
  404be4:	46a9      	mov	r9, r5
  struct pbuf *concat_p = NULL;
  404be6:	46a8      	mov	r8, r5
  404be8:	e038      	b.n	404c5c <tcp_write+0xcc>
  404bea:	e7fe      	b.n	404bea <tcp_write+0x5a>
    pcb->flags |= TF_NAGLEMEMERR;
  404bec:	7f83      	ldrb	r3, [r0, #30]
  404bee:	f063 037f 	orn	r3, r3, #127	; 0x7f
  404bf2:	7783      	strb	r3, [r0, #30]
    return ERR_MEM;
  404bf4:	f04f 30ff 	mov.w	r0, #4294967295
  404bf8:	e07a      	b.n	404cf0 <tcp_write+0x160>
    pcb->flags |= TF_NAGLEMEMERR;
  404bfa:	7f83      	ldrb	r3, [r0, #30]
  404bfc:	f063 037f 	orn	r3, r3, #127	; 0x7f
  404c00:	7783      	strb	r3, [r0, #30]
    return ERR_MEM;
  404c02:	f04f 30ff 	mov.w	r0, #4294967295
  404c06:	e073      	b.n	404cf0 <tcp_write+0x160>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
         last_unsent = last_unsent->next);
  404c08:	461f      	mov	r7, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  404c0a:	683b      	ldr	r3, [r7, #0]
  404c0c:	2b00      	cmp	r3, #0
  404c0e:	d1fb      	bne.n	404c08 <tcp_write+0x78>
  404c10:	9302      	str	r3, [sp, #8]

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
  404c12:	7abb      	ldrb	r3, [r7, #10]
  404c14:	f003 0001 	and.w	r0, r3, #1
  404c18:	f003 0302 	and.w	r3, r3, #2
  404c1c:	2b00      	cmp	r3, #0
  404c1e:	bf14      	ite	ne
  404c20:	220c      	movne	r2, #12
  404c22:	2200      	moveq	r2, #0
    space = mss_local - (last_unsent->len + unsent_optlen);
  404c24:	893b      	ldrh	r3, [r7, #8]
  404c26:	9907      	ldr	r1, [sp, #28]
  404c28:	1ac9      	subs	r1, r1, r3
  404c2a:	eba1 0180 	sub.w	r1, r1, r0, lsl #2
  404c2e:	1a89      	subs	r1, r1, r2
  404c30:	b289      	uxth	r1, r1
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->unsent_oversize */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
  404c32:	f8b4 606a 	ldrh.w	r6, [r4, #106]	; 0x6a
    if (oversize > 0) {
  404c36:	b1c6      	cbz	r6, 404c6a <tcp_write+0xda>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize_used <= space);
      seg = last_unsent;
      oversize_used = oversize < len ? oversize : len;
  404c38:	4652      	mov	r2, sl
  404c3a:	45b2      	cmp	sl, r6
  404c3c:	bf28      	it	cs
  404c3e:	4632      	movcs	r2, r6
      pos += oversize_used;
      oversize -= oversize_used;
  404c40:	1ab5      	subs	r5, r6, r2
  404c42:	b2ad      	uxth	r5, r5
      space -= oversize_used;
  404c44:	1a89      	subs	r1, r1, r2
  404c46:	b289      	uxth	r1, r1
      pos += oversize_used;
  404c48:	4616      	mov	r6, r2
      space -= oversize_used;
  404c4a:	9703      	str	r7, [sp, #12]
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
  404c4c:	2900      	cmp	r1, #0
  404c4e:	bf18      	it	ne
  404c50:	4556      	cmpne	r6, sl
  404c52:	d200      	bcs.n	404c56 <tcp_write+0xc6>
  404c54:	b96b      	cbnz	r3, 404c72 <tcp_write+0xe2>
  404c56:	46b1      	mov	r9, r6
  struct pbuf *concat_p = NULL;
  404c58:	f04f 0800 	mov.w	r8, #0
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
  404c5c:	45ca      	cmp	sl, r9
  404c5e:	f240 80c5 	bls.w	404dec <tcp_write+0x25c>
  404c62:	2300      	movs	r3, #0
  404c64:	9302      	str	r3, [sp, #8]
  404c66:	9306      	str	r3, [sp, #24]
  404c68:	e04e      	b.n	404d08 <tcp_write+0x178>
    oversize = pcb->unsent_oversize;
  404c6a:	4635      	mov	r5, r6
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
  404c6c:	9a02      	ldr	r2, [sp, #8]
  404c6e:	9203      	str	r2, [sp, #12]
  404c70:	e7ec      	b.n	404c4c <tcp_write+0xbc>
      u16_t seglen = space < len - pos ? space : len - pos;
  404c72:	ebaa 0306 	sub.w	r3, sl, r6
  404c76:	428b      	cmp	r3, r1
  404c78:	bfa8      	it	ge
  404c7a:	460b      	movge	r3, r1
  404c7c:	fa1f f983 	uxth.w	r9, r3
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
  404c80:	2200      	movs	r2, #0
  404c82:	2003      	movs	r0, #3
  404c84:	4b74      	ldr	r3, [pc, #464]	; (404e58 <tcp_write+0x2c8>)
  404c86:	4798      	blx	r3
  if (p == NULL) {
  404c88:	4680      	mov	r8, r0
  404c8a:	2800      	cmp	r0, #0
  404c8c:	f000 80df 	beq.w	404e4e <tcp_write+0x2be>
  *oversize = p->len - length;
  404c90:	8945      	ldrh	r5, [r0, #10]
  404c92:	eba5 0509 	sub.w	r5, r5, r9
  404c96:	b2ad      	uxth	r5, r5
  p->len = p->tot_len = length;
  404c98:	f8a0 9008 	strh.w	r9, [r0, #8]
  404c9c:	f8a0 900a 	strh.w	r9, [r0, #10]
        TCP_DATA_COPY2(concat_p->payload, (u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
  404ca0:	464a      	mov	r2, r9
  404ca2:	9b05      	ldr	r3, [sp, #20]
  404ca4:	1999      	adds	r1, r3, r6
  404ca6:	6840      	ldr	r0, [r0, #4]
  404ca8:	4b6c      	ldr	r3, [pc, #432]	; (404e5c <tcp_write+0x2cc>)
  404caa:	4798      	blx	r3
      pos += seglen;
  404cac:	44b1      	add	r9, r6
  404cae:	fa1f f989 	uxth.w	r9, r9
      queuelen += pbuf_clen(concat_p);
  404cb2:	4640      	mov	r0, r8
  404cb4:	4b6a      	ldr	r3, [pc, #424]	; (404e60 <tcp_write+0x2d0>)
  404cb6:	4798      	blx	r3
  404cb8:	9b04      	ldr	r3, [sp, #16]
  404cba:	4403      	add	r3, r0
  404cbc:	b29b      	uxth	r3, r3
  404cbe:	9304      	str	r3, [sp, #16]
  404cc0:	9703      	str	r7, [sp, #12]
  404cc2:	e7cb      	b.n	404c5c <tcp_write+0xcc>
    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: queue too long %"U16_F" (%"U16_F")\n", queuelen, TCP_SND_QUEUELEN));
      pbuf_free(p);
  404cc4:	4628      	mov	r0, r5
  404cc6:	4b67      	ldr	r3, [pc, #412]	; (404e64 <tcp_write+0x2d4>)
  404cc8:	4798      	blx	r3
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  }

  return ERR_OK;
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
  404cca:	7fa3      	ldrb	r3, [r4, #30]
  404ccc:	f063 037f 	orn	r3, r3, #127	; 0x7f
  404cd0:	77a3      	strb	r3, [r4, #30]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
  404cd2:	f1b8 0f00 	cmp.w	r8, #0
  404cd6:	d002      	beq.n	404cde <tcp_write+0x14e>
    pbuf_free(concat_p);
  404cd8:	4640      	mov	r0, r8
  404cda:	4b62      	ldr	r3, [pc, #392]	; (404e64 <tcp_write+0x2d4>)
  404cdc:	4798      	blx	r3
  }
  if (queue != NULL) {
  404cde:	9b02      	ldr	r3, [sp, #8]
  404ce0:	2b00      	cmp	r3, #0
  404ce2:	f000 80ae 	beq.w	404e42 <tcp_write+0x2b2>
    tcp_segs_free(queue);
  404ce6:	4618      	mov	r0, r3
  404ce8:	4b5f      	ldr	r3, [pc, #380]	; (404e68 <tcp_write+0x2d8>)
  404cea:	4798      	blx	r3
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
  404cec:	f04f 30ff 	mov.w	r0, #4294967295
}
  404cf0:	b00b      	add	sp, #44	; 0x2c
  404cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
  404cf6:	9b03      	ldr	r3, [sp, #12]
  404cf8:	9302      	str	r3, [sp, #8]
    pos += seglen;
  404cfa:	44d9      	add	r9, fp
  404cfc:	fa1f f989 	uxth.w	r9, r9
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
  404d00:	9b03      	ldr	r3, [sp, #12]
  404d02:	9306      	str	r3, [sp, #24]
  while (pos < len) {
  404d04:	45ca      	cmp	sl, r9
  404d06:	d935      	bls.n	404d74 <tcp_write+0x1e4>
    u16_t left = len - pos;
  404d08:	ebaa 0b09 	sub.w	fp, sl, r9
    u16_t seglen = left > max_len ? max_len : left;
  404d0c:	fa1f fb8b 	uxth.w	fp, fp
  404d10:	9907      	ldr	r1, [sp, #28]
  404d12:	458b      	cmp	fp, r1
  404d14:	bf28      	it	cs
  404d16:	468b      	movcs	fp, r1
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
  404d18:	2200      	movs	r2, #0
  404d1a:	4610      	mov	r0, r2
  404d1c:	4b4e      	ldr	r3, [pc, #312]	; (404e58 <tcp_write+0x2c8>)
  404d1e:	4798      	blx	r3
  if (p == NULL) {
  404d20:	4605      	mov	r5, r0
  404d22:	2800      	cmp	r0, #0
  404d24:	d0d1      	beq.n	404cca <tcp_write+0x13a>
  *oversize = p->len - length;
  404d26:	8943      	ldrh	r3, [r0, #10]
  404d28:	9308      	str	r3, [sp, #32]
  p->len = p->tot_len = length;
  404d2a:	f8a0 b008 	strh.w	fp, [r0, #8]
  404d2e:	f8a0 b00a 	strh.w	fp, [r0, #10]
      TCP_DATA_COPY2((char *)p->payload + optlen, (u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
  404d32:	465a      	mov	r2, fp
  404d34:	9b05      	ldr	r3, [sp, #20]
  404d36:	eb03 0109 	add.w	r1, r3, r9
  404d3a:	6840      	ldr	r0, [r0, #4]
  404d3c:	4b47      	ldr	r3, [pc, #284]	; (404e5c <tcp_write+0x2cc>)
  404d3e:	4798      	blx	r3
    queuelen += pbuf_clen(p);
  404d40:	4628      	mov	r0, r5
  404d42:	4b47      	ldr	r3, [pc, #284]	; (404e60 <tcp_write+0x2d0>)
  404d44:	4798      	blx	r3
  404d46:	9b04      	ldr	r3, [sp, #16]
  404d48:	4403      	add	r3, r0
  404d4a:	b29b      	uxth	r3, r3
  404d4c:	9304      	str	r3, [sp, #16]
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  404d4e:	2b08      	cmp	r3, #8
  404d50:	d8b8      	bhi.n	404cc4 <tcp_write+0x134>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
  404d52:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  404d54:	2200      	movs	r2, #0
  404d56:	9200      	str	r2, [sp, #0]
  404d58:	444b      	add	r3, r9
  404d5a:	4629      	mov	r1, r5
  404d5c:	4620      	mov	r0, r4
  404d5e:	4d43      	ldr	r5, [pc, #268]	; (404e6c <tcp_write+0x2dc>)
  404d60:	47a8      	blx	r5
  404d62:	9003      	str	r0, [sp, #12]
  404d64:	2800      	cmp	r0, #0
  404d66:	d0b0      	beq.n	404cca <tcp_write+0x13a>
    if (queue == NULL) {
  404d68:	9b02      	ldr	r3, [sp, #8]
  404d6a:	2b00      	cmp	r3, #0
  404d6c:	d0c3      	beq.n	404cf6 <tcp_write+0x166>
      prev_seg->next = seg;
  404d6e:	9a06      	ldr	r2, [sp, #24]
  404d70:	6010      	str	r0, [r2, #0]
  404d72:	e7c2      	b.n	404cfa <tcp_write+0x16a>
  *oversize = p->len - length;
  404d74:	9b08      	ldr	r3, [sp, #32]
  404d76:	eba3 050b 	sub.w	r5, r3, fp
  404d7a:	b2ad      	uxth	r5, r5
  if (oversize_used > 0) {
  404d7c:	b13e      	cbz	r6, 404d8e <tcp_write+0x1fe>
    for (p = last_unsent->p; p; p = p->next) {
  404d7e:	f8d7 9004 	ldr.w	r9, [r7, #4]
  404d82:	f1b9 0f00 	cmp.w	r9, #0
  404d86:	d150      	bne.n	404e2a <tcp_write+0x29a>
    last_unsent->len += oversize_used;
  404d88:	893b      	ldrh	r3, [r7, #8]
  404d8a:	441e      	add	r6, r3
  404d8c:	813e      	strh	r6, [r7, #8]
  pcb->unsent_oversize = oversize;
  404d8e:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  if (concat_p != NULL) {
  404d92:	f1b8 0f00 	cmp.w	r8, #0
  404d96:	d008      	beq.n	404daa <tcp_write+0x21a>
    pbuf_cat(last_unsent->p, concat_p);
  404d98:	4641      	mov	r1, r8
  404d9a:	6878      	ldr	r0, [r7, #4]
  404d9c:	4b34      	ldr	r3, [pc, #208]	; (404e70 <tcp_write+0x2e0>)
  404d9e:	4798      	blx	r3
    last_unsent->len += concat_p->tot_len;
  404da0:	893b      	ldrh	r3, [r7, #8]
  404da2:	f8b8 2008 	ldrh.w	r2, [r8, #8]
  404da6:	4413      	add	r3, r2
  404da8:	813b      	strh	r3, [r7, #8]
  if (last_unsent == NULL) {
  404daa:	2f00      	cmp	r7, #0
  404dac:	d140      	bne.n	404e30 <tcp_write+0x2a0>
    pcb->unsent = queue;
  404dae:	9b02      	ldr	r3, [sp, #8]
  404db0:	66e3      	str	r3, [r4, #108]	; 0x6c
  pcb->snd_lbb += len;
  404db2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  404db4:	4453      	add	r3, sl
  404db6:	65e3      	str	r3, [r4, #92]	; 0x5c
  pcb->snd_buf -= len;
  404db8:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
  404dbc:	eba3 030a 	sub.w	r3, r3, sl
  404dc0:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
  pcb->snd_queuelen = queuelen;
  404dc4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  404dc8:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
  404dcc:	9b03      	ldr	r3, [sp, #12]
  404dce:	b393      	cbz	r3, 404e36 <tcp_write+0x2a6>
  404dd0:	68dc      	ldr	r4, [r3, #12]
  404dd2:	b394      	cbz	r4, 404e3a <tcp_write+0x2aa>
  404dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404dd6:	f013 0f02 	tst.w	r3, #2
  404dda:	d130      	bne.n	404e3e <tcp_write+0x2ae>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  404ddc:	89a5      	ldrh	r5, [r4, #12]
  404dde:	2008      	movs	r0, #8
  404de0:	4b24      	ldr	r3, [pc, #144]	; (404e74 <tcp_write+0x2e4>)
  404de2:	4798      	blx	r3
  404de4:	4328      	orrs	r0, r5
  404de6:	81a0      	strh	r0, [r4, #12]
  return ERR_OK;
  404de8:	2000      	movs	r0, #0
  404dea:	e781      	b.n	404cf0 <tcp_write+0x160>
  while (pos < len) {
  404dec:	2300      	movs	r3, #0
  404dee:	9302      	str	r3, [sp, #8]
  404df0:	e7c4      	b.n	404d7c <tcp_write+0x1ec>
  404df2:	4699      	mov	r9, r3
      p->tot_len += oversize_used;
  404df4:	f8b9 3008 	ldrh.w	r3, [r9, #8]
  404df8:	4433      	add	r3, r6
  404dfa:	f8a9 3008 	strh.w	r3, [r9, #8]
      if (p->next == NULL) {
  404dfe:	f8d9 3000 	ldr.w	r3, [r9]
  404e02:	2b00      	cmp	r3, #0
  404e04:	d1f5      	bne.n	404df2 <tcp_write+0x262>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
  404e06:	f8b9 300a 	ldrh.w	r3, [r9, #10]
  404e0a:	f8d9 0004 	ldr.w	r0, [r9, #4]
  404e0e:	4632      	mov	r2, r6
  404e10:	9905      	ldr	r1, [sp, #20]
  404e12:	4418      	add	r0, r3
  404e14:	47d8      	blx	fp
        p->len += oversize_used;
  404e16:	f8b9 300a 	ldrh.w	r3, [r9, #10]
  404e1a:	4433      	add	r3, r6
  404e1c:	f8a9 300a 	strh.w	r3, [r9, #10]
    for (p = last_unsent->p; p; p = p->next) {
  404e20:	f8d9 3000 	ldr.w	r3, [r9]
  404e24:	2b00      	cmp	r3, #0
  404e26:	d0af      	beq.n	404d88 <tcp_write+0x1f8>
  404e28:	e7e3      	b.n	404df2 <tcp_write+0x262>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
  404e2a:	f8df b030 	ldr.w	fp, [pc, #48]	; 404e5c <tcp_write+0x2cc>
  404e2e:	e7e1      	b.n	404df4 <tcp_write+0x264>
    last_unsent->next = queue;
  404e30:	9b02      	ldr	r3, [sp, #8]
  404e32:	603b      	str	r3, [r7, #0]
  404e34:	e7bd      	b.n	404db2 <tcp_write+0x222>
  return ERR_OK;
  404e36:	2000      	movs	r0, #0
  404e38:	e75a      	b.n	404cf0 <tcp_write+0x160>
  404e3a:	2000      	movs	r0, #0
  404e3c:	e758      	b.n	404cf0 <tcp_write+0x160>
  404e3e:	2000      	movs	r0, #0
  404e40:	e756      	b.n	404cf0 <tcp_write+0x160>
  return ERR_MEM;
  404e42:	f04f 30ff 	mov.w	r0, #4294967295
  404e46:	e753      	b.n	404cf0 <tcp_write+0x160>
    return ERR_CONN;
  404e48:	f06f 000c 	mvn.w	r0, #12
  404e4c:	e750      	b.n	404cf0 <tcp_write+0x160>
  pcb->flags |= TF_NAGLEMEMERR;
  404e4e:	7fa3      	ldrb	r3, [r4, #30]
  404e50:	f063 037f 	orn	r3, r3, #127	; 0x7f
  404e54:	77a3      	strb	r3, [r4, #30]
  404e56:	e742      	b.n	404cde <tcp_write+0x14e>
  404e58:	00402685 	.word	0x00402685
  404e5c:	00407bf1 	.word	0x00407bf1
  404e60:	0040282d 	.word	0x0040282d
  404e64:	0040262d 	.word	0x0040262d
  404e68:	00402bf1 	.word	0x00402bf1
  404e6c:	00404a51 	.word	0x00404a51
  404e70:	0040284d 	.word	0x0040284d
  404e74:	00401195 	.word	0x00401195

00404e78 <tcp_enqueue_flags>:

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  404e78:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
  404e7c:	2b07      	cmp	r3, #7
  404e7e:	d822      	bhi.n	404ec6 <tcp_enqueue_flags+0x4e>
{
  404e80:	b5f0      	push	{r4, r5, r6, r7, lr}
  404e82:	b083      	sub	sp, #12
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
    return ERR_MEM;
  }

  if (flags & TCP_SYN) {
  404e84:	f001 0302 	and.w	r3, r1, #2
  u8_t optflags = 0;
  404e88:	f3c1 0640 	ubfx	r6, r1, #1, #1
#if LWIP_TCP_TIMESTAMPS
  if ((pcb->flags & TF_TIMESTAMP)) {
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
  404e8c:	2b00      	cmp	r3, #0
  404e8e:	bf14      	ite	ne
  404e90:	2704      	movne	r7, #4
  404e92:	2700      	moveq	r7, #0

  /* tcp_enqueue_flags is always called with either SYN or FIN in flags.
   * We need one available snd_buf byte to do that.
   * This means we can't send FIN while snd_buf==0. A better fix would be to
   * not include SYN and FIN sequence numbers in the snd_buf count. */
  if (pcb->snd_buf == 0) {
  404e94:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
  404e98:	2b00      	cmp	r3, #0
  404e9a:	d04e      	beq.n	404f3a <tcp_enqueue_flags+0xc2>
  404e9c:	460d      	mov	r5, r1
  404e9e:	4604      	mov	r4, r0
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
  }

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
  404ea0:	2200      	movs	r2, #0
  404ea2:	4639      	mov	r1, r7
  404ea4:	4610      	mov	r0, r2
  404ea6:	4b26      	ldr	r3, [pc, #152]	; (404f40 <tcp_enqueue_flags+0xc8>)
  404ea8:	4798      	blx	r3
  404eaa:	4601      	mov	r1, r0
  404eac:	b190      	cbz	r0, 404ed4 <tcp_enqueue_flags+0x5c>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
  404eae:	9600      	str	r6, [sp, #0]
  404eb0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  404eb2:	462a      	mov	r2, r5
  404eb4:	4620      	mov	r0, r4
  404eb6:	4e23      	ldr	r6, [pc, #140]	; (404f44 <tcp_enqueue_flags+0xcc>)
  404eb8:	47b0      	blx	r6
  404eba:	4601      	mov	r1, r0
  404ebc:	b188      	cbz	r0, 404ee2 <tcp_enqueue_flags+0x6a>
               ntohl(seg->tcphdr->seqno),
               ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
  404ebe:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  404ec0:	b9ba      	cbnz	r2, 404ef2 <tcp_enqueue_flags+0x7a>
    pcb->unsent = seg;
  404ec2:	66e0      	str	r0, [r4, #108]	; 0x6c
  404ec4:	e019      	b.n	404efa <tcp_enqueue_flags+0x82>
    pcb->flags |= TF_NAGLEMEMERR;
  404ec6:	7f83      	ldrb	r3, [r0, #30]
  404ec8:	f063 037f 	orn	r3, r3, #127	; 0x7f
  404ecc:	7783      	strb	r3, [r0, #30]
    return ERR_MEM;
  404ece:	f04f 30ff 	mov.w	r0, #4294967295
  404ed2:	4770      	bx	lr
    pcb->flags |= TF_NAGLEMEMERR;
  404ed4:	7fa3      	ldrb	r3, [r4, #30]
  404ed6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  404eda:	77a3      	strb	r3, [r4, #30]
    return ERR_MEM;
  404edc:	f04f 30ff 	mov.w	r0, #4294967295
  404ee0:	e029      	b.n	404f36 <tcp_enqueue_flags+0xbe>
    pcb->flags |= TF_NAGLEMEMERR;
  404ee2:	7fa3      	ldrb	r3, [r4, #30]
  404ee4:	f063 037f 	orn	r3, r3, #127	; 0x7f
  404ee8:	77a3      	strb	r3, [r4, #30]
    return ERR_MEM;
  404eea:	f04f 30ff 	mov.w	r0, #4294967295
  404eee:	e022      	b.n	404f36 <tcp_enqueue_flags+0xbe>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
  404ef0:	461a      	mov	r2, r3
  404ef2:	6813      	ldr	r3, [r2, #0]
  404ef4:	2b00      	cmp	r3, #0
  404ef6:	d1fb      	bne.n	404ef0 <tcp_enqueue_flags+0x78>
    useg->next = seg;
  404ef8:	6011      	str	r1, [r2, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
  404efa:	2300      	movs	r3, #0
  404efc:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
  404f00:	f015 0f03 	tst.w	r5, #3
  404f04:	d007      	beq.n	404f16 <tcp_enqueue_flags+0x9e>
    pcb->snd_lbb++;
  404f06:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  404f08:	3301      	adds	r3, #1
  404f0a:	65e3      	str	r3, [r4, #92]	; 0x5c
    /* optlen does not influence snd_buf */
    pcb->snd_buf--;
  404f0c:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
  404f10:	3b01      	subs	r3, #1
  404f12:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
  }
  if (flags & TCP_FIN) {
  404f16:	f015 0f01 	tst.w	r5, #1
  404f1a:	d003      	beq.n	404f24 <tcp_enqueue_flags+0xac>
    pcb->flags |= TF_FIN;
  404f1c:	7fa3      	ldrb	r3, [r4, #30]
  404f1e:	f043 0320 	orr.w	r3, r3, #32
  404f22:	77a3      	strb	r3, [r4, #30]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
  404f24:	6848      	ldr	r0, [r1, #4]
  404f26:	4b08      	ldr	r3, [pc, #32]	; (404f48 <tcp_enqueue_flags+0xd0>)
  404f28:	4798      	blx	r3
  404f2a:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
  404f2e:	4418      	add	r0, r3
  404f30:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
  404f34:	2000      	movs	r0, #0
}
  404f36:	b003      	add	sp, #12
  404f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_MEM;
  404f3a:	f04f 30ff 	mov.w	r0, #4294967295
  404f3e:	e7fa      	b.n	404f36 <tcp_enqueue_flags+0xbe>
  404f40:	00402685 	.word	0x00402685
  404f44:	00404a51 	.word	0x00404a51
  404f48:	0040282d 	.word	0x0040282d

00404f4c <tcp_send_fin>:
{
  404f4c:	b570      	push	{r4, r5, r6, lr}
  404f4e:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
  404f50:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
  404f52:	b90c      	cbnz	r4, 404f58 <tcp_send_fin+0xc>
  404f54:	e00a      	b.n	404f6c <tcp_send_fin+0x20>
         last_unsent = last_unsent->next);
  404f56:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  404f58:	6823      	ldr	r3, [r4, #0]
  404f5a:	2b00      	cmp	r3, #0
  404f5c:	d1fb      	bne.n	404f56 <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
  404f5e:	68e3      	ldr	r3, [r4, #12]
  404f60:	8998      	ldrh	r0, [r3, #12]
  404f62:	4b0b      	ldr	r3, [pc, #44]	; (404f90 <tcp_send_fin+0x44>)
  404f64:	4798      	blx	r3
  404f66:	f010 0f07 	tst.w	r0, #7
  404f6a:	d004      	beq.n	404f76 <tcp_send_fin+0x2a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
  404f6c:	2101      	movs	r1, #1
  404f6e:	4628      	mov	r0, r5
  404f70:	4b08      	ldr	r3, [pc, #32]	; (404f94 <tcp_send_fin+0x48>)
  404f72:	4798      	blx	r3
}
  404f74:	bd70      	pop	{r4, r5, r6, pc}
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
  404f76:	68e6      	ldr	r6, [r4, #12]
  404f78:	89b4      	ldrh	r4, [r6, #12]
  404f7a:	2001      	movs	r0, #1
  404f7c:	4b06      	ldr	r3, [pc, #24]	; (404f98 <tcp_send_fin+0x4c>)
  404f7e:	4798      	blx	r3
  404f80:	4320      	orrs	r0, r4
  404f82:	81b0      	strh	r0, [r6, #12]
      pcb->flags |= TF_FIN;
  404f84:	7fab      	ldrb	r3, [r5, #30]
  404f86:	f043 0320 	orr.w	r3, r3, #32
  404f8a:	77ab      	strb	r3, [r5, #30]
      return ERR_OK;
  404f8c:	2000      	movs	r0, #0
  404f8e:	bd70      	pop	{r4, r5, r6, pc}
  404f90:	0040119f 	.word	0x0040119f
  404f94:	00404e79 	.word	0x00404e79
  404f98:	00401195 	.word	0x00401195

00404f9c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
  404f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404fa0:	b082      	sub	sp, #8
  404fa2:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, htonl(pcb->snd_nxt));
  404fa4:	6d00      	ldr	r0, [r0, #80]	; 0x50
  404fa6:	4b16      	ldr	r3, [pc, #88]	; (405000 <tcp_send_empty_ack+0x64>)
  404fa8:	4798      	blx	r3
  404faa:	4603      	mov	r3, r0
  404fac:	2200      	movs	r2, #0
  404fae:	4611      	mov	r1, r2
  404fb0:	4620      	mov	r0, r4
  404fb2:	4d14      	ldr	r5, [pc, #80]	; (405004 <tcp_send_empty_ack+0x68>)
  404fb4:	47a8      	blx	r5
  if (p == NULL) {
  404fb6:	b300      	cbz	r0, 404ffa <tcp_send_empty_ack+0x5e>
  404fb8:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  404fba:	6847      	ldr	r7, [r0, #4]
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, 
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  /* remove ACK flags from the PCB, as we send an empty ACK now */
  pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  404fbc:	7fa3      	ldrb	r3, [r4, #30]
  404fbe:	f023 0303 	bic.w	r3, r3, #3
  404fc2:	77a3      	strb	r3, [r4, #30]
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif 

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &(pcb->local_ip), &(pcb->remote_ip),
  404fc4:	1d26      	adds	r6, r4, #4
  404fc6:	8903      	ldrh	r3, [r0, #8]
  404fc8:	9300      	str	r3, [sp, #0]
  404fca:	2306      	movs	r3, #6
  404fcc:	4632      	mov	r2, r6
  404fce:	4621      	mov	r1, r4
  404fd0:	f8df 803c 	ldr.w	r8, [pc, #60]	; 405010 <tcp_send_empty_ack+0x74>
  404fd4:	47c0      	blx	r8
  404fd6:	8238      	strh	r0, [r7, #16]
#endif
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
  404fd8:	7aa3      	ldrb	r3, [r4, #10]
  404fda:	2206      	movs	r2, #6
  404fdc:	9201      	str	r2, [sp, #4]
  404fde:	7a62      	ldrb	r2, [r4, #9]
  404fe0:	9200      	str	r2, [sp, #0]
  404fe2:	4632      	mov	r2, r6
  404fe4:	4621      	mov	r1, r4
  404fe6:	4628      	mov	r0, r5
  404fe8:	4c07      	ldr	r4, [pc, #28]	; (405008 <tcp_send_empty_ack+0x6c>)
  404fea:	47a0      	blx	r4
      IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/
  pbuf_free(p);
  404fec:	4628      	mov	r0, r5
  404fee:	4b07      	ldr	r3, [pc, #28]	; (40500c <tcp_send_empty_ack+0x70>)
  404ff0:	4798      	blx	r3

  return ERR_OK;
  404ff2:	2000      	movs	r0, #0
}
  404ff4:	b002      	add	sp, #8
  404ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_BUF;
  404ffa:	f06f 0001 	mvn.w	r0, #1
  404ffe:	e7f9      	b.n	404ff4 <tcp_send_empty_ack+0x58>
  405000:	004011a9 	.word	0x004011a9
  405004:	00404b1d 	.word	0x00404b1d
  405008:	00401865 	.word	0x00401865
  40500c:	0040262d 	.word	0x0040262d
  405010:	0040146d 	.word	0x0040146d

00405014 <tcp_output>:

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
  405014:	4ba2      	ldr	r3, [pc, #648]	; (4052a0 <tcp_output+0x28c>)
  405016:	681b      	ldr	r3, [r3, #0]
  405018:	4283      	cmp	r3, r0
  40501a:	f000 8165 	beq.w	4052e8 <tcp_output+0x2d4>
{
  40501e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405022:	b085      	sub	sp, #20
  405024:	4605      	mov	r5, r0
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
  405026:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  40502a:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
  40502e:	429a      	cmp	r2, r3
  405030:	bf28      	it	cs
  405032:	461a      	movcs	r2, r3
  405034:	4692      	mov	sl, r2

  seg = pcb->unsent;
  405036:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
  405038:	7f83      	ldrb	r3, [r0, #30]
  40503a:	f013 0f02 	tst.w	r3, #2
  40503e:	d014      	beq.n	40506a <tcp_output+0x56>
  405040:	b17c      	cbz	r4, 405062 <tcp_output+0x4e>
     (seg == NULL ||
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
  405042:	68e3      	ldr	r3, [r4, #12]
  405044:	6858      	ldr	r0, [r3, #4]
  405046:	4b97      	ldr	r3, [pc, #604]	; (4052a4 <tcp_output+0x290>)
  405048:	4798      	blx	r3
  40504a:	8923      	ldrh	r3, [r4, #8]
  40504c:	6caa      	ldr	r2, [r5, #72]	; 0x48
  40504e:	1a9b      	subs	r3, r3, r2
  405050:	4418      	add	r0, r3
     (seg == NULL ||
  405052:	4582      	cmp	sl, r0
  405054:	d305      	bcc.n	405062 <tcp_output+0x4e>
     return tcp_send_empty_ack(pcb);
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
  405056:	f8d5 8070 	ldr.w	r8, [r5, #112]	; 0x70
  if (useg != NULL) {
  40505a:	f1b8 0f00 	cmp.w	r8, #0
  40505e:	d10f      	bne.n	405080 <tcp_output+0x6c>
  405060:	e015      	b.n	40508e <tcp_output+0x7a>
     return tcp_send_empty_ack(pcb);
  405062:	4628      	mov	r0, r5
  405064:	4b90      	ldr	r3, [pc, #576]	; (4052a8 <tcp_output+0x294>)
  405066:	4798      	blx	r3
  405068:	e13b      	b.n	4052e2 <tcp_output+0x2ce>
  useg = pcb->unacked;
  40506a:	f8d0 8070 	ldr.w	r8, [r0, #112]	; 0x70
  if (useg != NULL) {
  40506e:	f1b8 0f00 	cmp.w	r8, #0
  405072:	d105      	bne.n	405080 <tcp_output+0x6c>
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
  405074:	b95c      	cbnz	r4, 40508e <tcp_output+0x7a>
    seg = pcb->unsent;
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
  405076:	2300      	movs	r3, #0
  405078:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
  40507c:	e12c      	b.n	4052d8 <tcp_output+0x2c4>
    for (; useg->next != NULL; useg = useg->next);
  40507e:	4698      	mov	r8, r3
  405080:	f8d8 3000 	ldr.w	r3, [r8]
  405084:	2b00      	cmp	r3, #0
  405086:	d1fa      	bne.n	40507e <tcp_output+0x6a>
  while (seg != NULL &&
  405088:	2c00      	cmp	r4, #0
  40508a:	f000 8121 	beq.w	4052d0 <tcp_output+0x2bc>
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
  40508e:	4e85      	ldr	r6, [pc, #532]	; (4052a4 <tcp_output+0x290>)
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
  405090:	f8df b234 	ldr.w	fp, [pc, #564]	; 4052c8 <tcp_output+0x2b4>
  405094:	e0a2      	b.n	4051dc <tcp_output+0x1c8>
    if((tcp_do_output_nagle(pcb) == 0) &&
  405096:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
  40509a:	b13a      	cbz	r2, 4050ac <tcp_output+0x98>
  40509c:	f8b5 2068 	ldrh.w	r2, [r5, #104]	; 0x68
  4050a0:	2a07      	cmp	r2, #7
  4050a2:	d803      	bhi.n	4050ac <tcp_output+0x98>
  4050a4:	f013 0fa0 	tst.w	r3, #160	; 0xa0
  4050a8:	f000 8112 	beq.w	4052d0 <tcp_output+0x2bc>
    pcb->unsent = seg->next;
  4050ac:	6823      	ldr	r3, [r4, #0]
  4050ae:	66eb      	str	r3, [r5, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
  4050b0:	7e2b      	ldrb	r3, [r5, #24]
  4050b2:	2b02      	cmp	r3, #2
  4050b4:	d00c      	beq.n	4050d0 <tcp_output+0xbc>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
  4050b6:	f8d4 900c 	ldr.w	r9, [r4, #12]
  4050ba:	f8b9 700c 	ldrh.w	r7, [r9, #12]
  4050be:	2010      	movs	r0, #16
  4050c0:	47d8      	blx	fp
  4050c2:	4338      	orrs	r0, r7
  4050c4:	f8a9 000c 	strh.w	r0, [r9, #12]
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  4050c8:	7fab      	ldrb	r3, [r5, #30]
  4050ca:	f023 0303 	bic.w	r3, r3, #3
  4050ce:	77ab      	strb	r3, [r5, #30]
  /** @bug Exclude retransmitted segments from this count. */
  snmp_inc_tcpoutsegs();

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = htonl(pcb->rcv_nxt);
  4050d0:	68e7      	ldr	r7, [r4, #12]
  4050d2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  4050d4:	4b75      	ldr	r3, [pc, #468]	; (4052ac <tcp_output+0x298>)
  4050d6:	4798      	blx	r3
  4050d8:	60b8      	str	r0, [r7, #8]

  /* advertise our receive window size in this TCP segment */
  seg->tcphdr->wnd = htons(pcb->rcv_ann_wnd);
  4050da:	68e7      	ldr	r7, [r4, #12]
  4050dc:	8de8      	ldrh	r0, [r5, #46]	; 0x2e
  4050de:	47d8      	blx	fp
  4050e0:	81f8      	strh	r0, [r7, #14]

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  4050e2:	8dea      	ldrh	r2, [r5, #46]	; 0x2e
  4050e4:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4050e6:	4413      	add	r3, r2
  4050e8:	632b      	str	r3, [r5, #48]	; 0x30

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
  4050ea:	7aa3      	ldrb	r3, [r4, #10]
  4050ec:	f013 0f01 	tst.w	r3, #1
  4050f0:	f040 8094 	bne.w	40521c <tcp_output+0x208>
  }
#endif

  /* Set retransmission timer running if it is not currently enabled 
     This must be set before checking the route. */
  if (pcb->rtime == -1) {
  4050f4:	f9b5 3034 	ldrsh.w	r3, [r5, #52]	; 0x34
  4050f8:	f1b3 3fff 	cmp.w	r3, #4294967295
  4050fc:	f000 809a 	beq.w	405234 <tcp_output+0x220>
    pcb->rtime = 0;
  }

  /* If we don't have a local IP address, we get one by
     calling ip_route(). */
  if (ip_addr_isany(&(pcb->local_ip))) {
  405100:	b10d      	cbz	r5, 405106 <tcp_output+0xf2>
  405102:	682b      	ldr	r3, [r5, #0]
  405104:	b933      	cbnz	r3, 405114 <tcp_output+0x100>
    netif = ip_route(&(pcb->remote_ip));
  405106:	1d28      	adds	r0, r5, #4
  405108:	4b69      	ldr	r3, [pc, #420]	; (4052b0 <tcp_output+0x29c>)
  40510a:	4798      	blx	r3
    if (netif == NULL) {
  40510c:	2800      	cmp	r0, #0
  40510e:	d02e      	beq.n	40516e <tcp_output+0x15a>
      return;
    }
    ip_addr_copy(pcb->local_ip, netif->ip_addr);
  405110:	6843      	ldr	r3, [r0, #4]
  405112:	602b      	str	r3, [r5, #0]
  }

  if (pcb->rttest == 0) {
  405114:	6bab      	ldr	r3, [r5, #56]	; 0x38
  405116:	2b00      	cmp	r3, #0
  405118:	f000 808f 	beq.w	40523a <tcp_output+0x226>
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          htonl(seg->tcphdr->seqno), htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
  40511c:	6862      	ldr	r2, [r4, #4]
  40511e:	68e3      	ldr	r3, [r4, #12]
  405120:	6851      	ldr	r1, [r2, #4]
  405122:	1a5b      	subs	r3, r3, r1
  405124:	b29b      	uxth	r3, r3

  seg->p->len -= len;
  405126:	8951      	ldrh	r1, [r2, #10]
  405128:	1ac9      	subs	r1, r1, r3
  40512a:	8151      	strh	r1, [r2, #10]
  seg->p->tot_len -= len;
  40512c:	6861      	ldr	r1, [r4, #4]
  40512e:	890a      	ldrh	r2, [r1, #8]
  405130:	1ad3      	subs	r3, r2, r3
  405132:	810b      	strh	r3, [r1, #8]

  seg->p->payload = seg->tcphdr;
  405134:	6863      	ldr	r3, [r4, #4]
  405136:	68e2      	ldr	r2, [r4, #12]
  405138:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
  40513a:	68e3      	ldr	r3, [r4, #12]
  40513c:	2200      	movs	r2, #0
  40513e:	741a      	strb	r2, [r3, #16]
  405140:	745a      	strb	r2, [r3, #17]
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
  }
#else /* TCP_CHECKSUM_ON_COPY */
  seg->tcphdr->chksum = inet_chksum_pseudo(seg->p, &(pcb->local_ip),
  405142:	68e7      	ldr	r7, [r4, #12]
  405144:	6860      	ldr	r0, [r4, #4]
  405146:	1d2a      	adds	r2, r5, #4
  405148:	8903      	ldrh	r3, [r0, #8]
  40514a:	9300      	str	r3, [sp, #0]
  40514c:	2306      	movs	r3, #6
  40514e:	9203      	str	r2, [sp, #12]
  405150:	4629      	mov	r1, r5
  405152:	f8df 9178 	ldr.w	r9, [pc, #376]	; 4052cc <tcp_output+0x2b8>
  405156:	47c8      	blx	r9
  405158:	8238      	strh	r0, [r7, #16]

#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
  40515a:	7aab      	ldrb	r3, [r5, #10]
  40515c:	6860      	ldr	r0, [r4, #4]
  40515e:	2206      	movs	r2, #6
  405160:	9201      	str	r2, [sp, #4]
  405162:	7a6a      	ldrb	r2, [r5, #9]
  405164:	9200      	str	r2, [sp, #0]
  405166:	9a03      	ldr	r2, [sp, #12]
  405168:	4629      	mov	r1, r5
  40516a:	4f52      	ldr	r7, [pc, #328]	; (4052b4 <tcp_output+0x2a0>)
  40516c:	47b8      	blx	r7
    snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
  40516e:	68e3      	ldr	r3, [r4, #12]
  405170:	6858      	ldr	r0, [r3, #4]
  405172:	47b0      	blx	r6
  405174:	4607      	mov	r7, r0
  405176:	f8b4 9008 	ldrh.w	r9, [r4, #8]
  40517a:	68e3      	ldr	r3, [r4, #12]
  40517c:	8998      	ldrh	r0, [r3, #12]
  40517e:	4b4e      	ldr	r3, [pc, #312]	; (4052b8 <tcp_output+0x2a4>)
  405180:	4798      	blx	r3
  405182:	f010 0003 	ands.w	r0, r0, #3
  405186:	bf18      	it	ne
  405188:	2001      	movne	r0, #1
  40518a:	4448      	add	r0, r9
  40518c:	4407      	add	r7, r0
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
  40518e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  405190:	1bdb      	subs	r3, r3, r7
  405192:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
  405194:	bfb8      	it	lt
  405196:	652f      	strlt	r7, [r5, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
  405198:	8927      	ldrh	r7, [r4, #8]
  40519a:	68e3      	ldr	r3, [r4, #12]
  40519c:	8998      	ldrh	r0, [r3, #12]
  40519e:	4b46      	ldr	r3, [pc, #280]	; (4052b8 <tcp_output+0x2a4>)
  4051a0:	4798      	blx	r3
  4051a2:	f010 0003 	ands.w	r0, r0, #3
  4051a6:	bf18      	it	ne
  4051a8:	2001      	movne	r0, #1
  4051aa:	42f8      	cmn	r0, r7
  4051ac:	d073      	beq.n	405296 <tcp_output+0x282>
      seg->next = NULL;
  4051ae:	2300      	movs	r3, #0
  4051b0:	6023      	str	r3, [r4, #0]
      if (pcb->unacked == NULL) {
  4051b2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  4051b4:	2b00      	cmp	r3, #0
  4051b6:	d048      	beq.n	40524a <tcp_output+0x236>
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
  4051b8:	68e3      	ldr	r3, [r4, #12]
  4051ba:	6858      	ldr	r0, [r3, #4]
  4051bc:	47b0      	blx	r6
  4051be:	4607      	mov	r7, r0
  4051c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
  4051c4:	6858      	ldr	r0, [r3, #4]
  4051c6:	47b0      	blx	r6
  4051c8:	1a38      	subs	r0, r7, r0
  4051ca:	2800      	cmp	r0, #0
  4051cc:	db40      	blt.n	405250 <tcp_output+0x23c>
          useg->next = seg;
  4051ce:	f8c8 4000 	str.w	r4, [r8]
  4051d2:	46a0      	mov	r8, r4
    seg = pcb->unsent;
  4051d4:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  while (seg != NULL &&
  4051d6:	2c00      	cmp	r4, #0
  4051d8:	f43f af4d 	beq.w	405076 <tcp_output+0x62>
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
  4051dc:	68e3      	ldr	r3, [r4, #12]
  4051de:	6858      	ldr	r0, [r3, #4]
  4051e0:	47b0      	blx	r6
  4051e2:	6cab      	ldr	r3, [r5, #72]	; 0x48
  4051e4:	1ac0      	subs	r0, r0, r3
  4051e6:	8923      	ldrh	r3, [r4, #8]
  4051e8:	4418      	add	r0, r3
  while (seg != NULL &&
  4051ea:	4582      	cmp	sl, r0
  4051ec:	d370      	bcc.n	4052d0 <tcp_output+0x2bc>
    if((tcp_do_output_nagle(pcb) == 0) &&
  4051ee:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  4051f0:	2b00      	cmp	r3, #0
  4051f2:	f43f af5b 	beq.w	4050ac <tcp_output+0x98>
  4051f6:	7fab      	ldrb	r3, [r5, #30]
  4051f8:	f013 0f44 	tst.w	r3, #68	; 0x44
  4051fc:	f47f af56 	bne.w	4050ac <tcp_output+0x98>
  405200:	6eea      	ldr	r2, [r5, #108]	; 0x6c
  405202:	2a00      	cmp	r2, #0
  405204:	f43f af47 	beq.w	405096 <tcp_output+0x82>
  405208:	6811      	ldr	r1, [r2, #0]
  40520a:	2900      	cmp	r1, #0
  40520c:	f47f af4e 	bne.w	4050ac <tcp_output+0x98>
  405210:	8911      	ldrh	r1, [r2, #8]
  405212:	8eea      	ldrh	r2, [r5, #54]	; 0x36
  405214:	4291      	cmp	r1, r2
  405216:	f4bf af49 	bcs.w	4050ac <tcp_output+0x98>
  40521a:	e73c      	b.n	405096 <tcp_output+0x82>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  40521c:	68e7      	ldr	r7, [r4, #12]
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->remote_ip);
  40521e:	1d29      	adds	r1, r5, #4
  405220:	f240 50b4 	movw	r0, #1460	; 0x5b4
  405224:	4b25      	ldr	r3, [pc, #148]	; (4052bc <tcp_output+0x2a8>)
  405226:	4798      	blx	r3
    *opts = TCP_BUILD_MSS_OPTION(mss);
  405228:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
  40522c:	4b1f      	ldr	r3, [pc, #124]	; (4052ac <tcp_output+0x298>)
  40522e:	4798      	blx	r3
  405230:	6178      	str	r0, [r7, #20]
  405232:	e75f      	b.n	4050f4 <tcp_output+0xe0>
    pcb->rtime = 0;
  405234:	2300      	movs	r3, #0
  405236:	86ab      	strh	r3, [r5, #52]	; 0x34
  405238:	e762      	b.n	405100 <tcp_output+0xec>
    pcb->rttest = tcp_ticks;
  40523a:	4b21      	ldr	r3, [pc, #132]	; (4052c0 <tcp_output+0x2ac>)
  40523c:	681b      	ldr	r3, [r3, #0]
  40523e:	63ab      	str	r3, [r5, #56]	; 0x38
    pcb->rtseq = ntohl(seg->tcphdr->seqno);
  405240:	68e3      	ldr	r3, [r4, #12]
  405242:	6858      	ldr	r0, [r3, #4]
  405244:	47b0      	blx	r6
  405246:	63e8      	str	r0, [r5, #60]	; 0x3c
  405248:	e768      	b.n	40511c <tcp_output+0x108>
        pcb->unacked = seg;
  40524a:	672c      	str	r4, [r5, #112]	; 0x70
  40524c:	46a0      	mov	r8, r4
  40524e:	e7c1      	b.n	4051d4 <tcp_output+0x1c0>
          struct tcp_seg **cur_seg = &(pcb->unacked);
  405250:	f105 0970 	add.w	r9, r5, #112	; 0x70
          while (*cur_seg &&
  405254:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  405256:	b1c3      	cbz	r3, 40528a <tcp_output+0x276>
  405258:	4622      	mov	r2, r4
  40525a:	464c      	mov	r4, r9
  40525c:	4691      	mov	r9, r2
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
  40525e:	68db      	ldr	r3, [r3, #12]
  405260:	6858      	ldr	r0, [r3, #4]
  405262:	47b0      	blx	r6
  405264:	4607      	mov	r7, r0
  405266:	f8d9 300c 	ldr.w	r3, [r9, #12]
  40526a:	6858      	ldr	r0, [r3, #4]
  40526c:	47b0      	blx	r6
  40526e:	1a38      	subs	r0, r7, r0
          while (*cur_seg &&
  405270:	2800      	cmp	r0, #0
  405272:	da07      	bge.n	405284 <tcp_output+0x270>
              cur_seg = &((*cur_seg)->next );
  405274:	6824      	ldr	r4, [r4, #0]
          while (*cur_seg &&
  405276:	6823      	ldr	r3, [r4, #0]
  405278:	2b00      	cmp	r3, #0
  40527a:	d1f0      	bne.n	40525e <tcp_output+0x24a>
  40527c:	464b      	mov	r3, r9
  40527e:	46a1      	mov	r9, r4
  405280:	461c      	mov	r4, r3
  405282:	e002      	b.n	40528a <tcp_output+0x276>
  405284:	464b      	mov	r3, r9
  405286:	46a1      	mov	r9, r4
  405288:	461c      	mov	r4, r3
          seg->next = (*cur_seg);
  40528a:	f8d9 3000 	ldr.w	r3, [r9]
  40528e:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
  405290:	f8c9 4000 	str.w	r4, [r9]
  405294:	e79e      	b.n	4051d4 <tcp_output+0x1c0>
      tcp_seg_free(seg);
  405296:	4620      	mov	r0, r4
  405298:	4b0a      	ldr	r3, [pc, #40]	; (4052c4 <tcp_output+0x2b0>)
  40529a:	4798      	blx	r3
  40529c:	e79a      	b.n	4051d4 <tcp_output+0x1c0>
  40529e:	bf00      	nop
  4052a0:	2040497c 	.word	0x2040497c
  4052a4:	004011c1 	.word	0x004011c1
  4052a8:	00404f9d 	.word	0x00404f9d
  4052ac:	004011a9 	.word	0x004011a9
  4052b0:	00401569 	.word	0x00401569
  4052b4:	00401865 	.word	0x00401865
  4052b8:	0040119f 	.word	0x0040119f
  4052bc:	004035c1 	.word	0x004035c1
  4052c0:	20404968 	.word	0x20404968
  4052c4:	00402bcd 	.word	0x00402bcd
  4052c8:	00401195 	.word	0x00401195
  4052cc:	0040146d 	.word	0x0040146d
  if (pcb->unsent == NULL) {
  4052d0:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
  4052d2:	2b00      	cmp	r3, #0
  4052d4:	f43f aecf 	beq.w	405076 <tcp_output+0x62>
  pcb->flags &= ~TF_NAGLEMEMERR;
  4052d8:	7fab      	ldrb	r3, [r5, #30]
  4052da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4052de:	77ab      	strb	r3, [r5, #30]
  return ERR_OK;
  4052e0:	2000      	movs	r0, #0
}
  4052e2:	b005      	add	sp, #20
  4052e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return ERR_OK;
  4052e8:	2000      	movs	r0, #0
  4052ea:	4770      	bx	lr

004052ec <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  ip_addr_t *local_ip, ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
  4052ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4052f0:	b083      	sub	sp, #12
  4052f2:	4681      	mov	r9, r0
  4052f4:	468a      	mov	sl, r1
  4052f6:	4693      	mov	fp, r2
  4052f8:	4698      	mov	r8, r3
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
  4052fa:	2200      	movs	r2, #0
  4052fc:	2114      	movs	r1, #20
  4052fe:	2001      	movs	r0, #1
  405300:	4b1d      	ldr	r3, [pc, #116]	; (405378 <tcp_rst+0x8c>)
  405302:	4798      	blx	r3
  if (p == NULL) {
  405304:	2800      	cmp	r0, #0
  405306:	d033      	beq.n	405370 <tcp_rst+0x84>
  405308:	4605      	mov	r5, r0
      return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
  40530a:	6844      	ldr	r4, [r0, #4]
  tcphdr->src = htons(local_port);
  40530c:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
  405310:	4e1a      	ldr	r6, [pc, #104]	; (40537c <tcp_rst+0x90>)
  405312:	47b0      	blx	r6
  405314:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = htons(remote_port);
  405316:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
  40531a:	47b0      	blx	r6
  40531c:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = htonl(seqno);
  40531e:	4648      	mov	r0, r9
  405320:	4f17      	ldr	r7, [pc, #92]	; (405380 <tcp_rst+0x94>)
  405322:	47b8      	blx	r7
  405324:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = htonl(ackno);
  405326:	4650      	mov	r0, sl
  405328:	47b8      	blx	r7
  40532a:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
  40532c:	f245 0014 	movw	r0, #20500	; 0x5014
  405330:	47b0      	blx	r6
  405332:	81a0      	strh	r0, [r4, #12]
  tcphdr->wnd = PP_HTONS(TCP_WND);
  405334:	2600      	movs	r6, #0
  405336:	230b      	movs	r3, #11
  405338:	73a3      	strb	r3, [r4, #14]
  40533a:	2368      	movs	r3, #104	; 0x68
  40533c:	73e3      	strb	r3, [r4, #15]
  tcphdr->chksum = 0;
  40533e:	7426      	strb	r6, [r4, #16]
  405340:	7466      	strb	r6, [r4, #17]
  tcphdr->urgp = 0;
  405342:	74a6      	strb	r6, [r4, #18]
  405344:	74e6      	strb	r6, [r4, #19]

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, local_ip, remote_ip,
  405346:	892b      	ldrh	r3, [r5, #8]
  405348:	9300      	str	r3, [sp, #0]
  40534a:	2306      	movs	r3, #6
  40534c:	4642      	mov	r2, r8
  40534e:	4659      	mov	r1, fp
  405350:	4628      	mov	r0, r5
  405352:	4f0c      	ldr	r7, [pc, #48]	; (405384 <tcp_rst+0x98>)
  405354:	47b8      	blx	r7
  405356:	8220      	strh	r0, [r4, #16]
              IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
  snmp_inc_tcpoutrsts();
   /* Send output with hardcoded TTL since we have no access to the pcb */
  ip_output(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP);
  405358:	2306      	movs	r3, #6
  40535a:	9301      	str	r3, [sp, #4]
  40535c:	9600      	str	r6, [sp, #0]
  40535e:	23ff      	movs	r3, #255	; 0xff
  405360:	4642      	mov	r2, r8
  405362:	4659      	mov	r1, fp
  405364:	4628      	mov	r0, r5
  405366:	4c08      	ldr	r4, [pc, #32]	; (405388 <tcp_rst+0x9c>)
  405368:	47a0      	blx	r4
  pbuf_free(p);
  40536a:	4628      	mov	r0, r5
  40536c:	4b07      	ldr	r3, [pc, #28]	; (40538c <tcp_rst+0xa0>)
  40536e:	4798      	blx	r3
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
  405370:	b003      	add	sp, #12
  405372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405376:	bf00      	nop
  405378:	00402685 	.word	0x00402685
  40537c:	00401195 	.word	0x00401195
  405380:	004011a9 	.word	0x004011a9
  405384:	0040146d 	.word	0x0040146d
  405388:	00401865 	.word	0x00401865
  40538c:	0040262d 	.word	0x0040262d

00405390 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
  405390:	6f02      	ldr	r2, [r0, #112]	; 0x70
  405392:	b10a      	cbz	r2, 405398 <tcp_rexmit_rto+0x8>
{
  405394:	b508      	push	{r3, lr}
  405396:	e001      	b.n	40539c <tcp_rexmit_rto+0xc>
  405398:	4770      	bx	lr
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
  40539a:	461a      	mov	r2, r3
  40539c:	6813      	ldr	r3, [r2, #0]
  40539e:	2b00      	cmp	r3, #0
  4053a0:	d1fb      	bne.n	40539a <tcp_rexmit_rto+0xa>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
  4053a2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  4053a4:	6013      	str	r3, [r2, #0]
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  4053a6:	6f03      	ldr	r3, [r0, #112]	; 0x70
  4053a8:	66c3      	str	r3, [r0, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
  4053aa:	2200      	movs	r2, #0
  4053ac:	6702      	str	r2, [r0, #112]	; 0x70
  /* last unsent hasn't changed, no need to reset unsent_oversize */

  /* increment number of retransmissions */
  ++pcb->nrtx;
  4053ae:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
  4053b2:	3301      	adds	r3, #1
  4053b4:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
  4053b8:	6382      	str	r2, [r0, #56]	; 0x38

  /* Do the actual retransmission */
  tcp_output(pcb);
  4053ba:	4b01      	ldr	r3, [pc, #4]	; (4053c0 <tcp_rexmit_rto+0x30>)
  4053bc:	4798      	blx	r3
  4053be:	bd08      	pop	{r3, pc}
  4053c0:	00405015 	.word	0x00405015

004053c4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
  4053c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
  4053c8:	6f07      	ldr	r7, [r0, #112]	; 0x70
  4053ca:	b317      	cbz	r7, 405412 <tcp_rexmit+0x4e>
  4053cc:	4680      	mov	r8, r0
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
  4053ce:	683b      	ldr	r3, [r7, #0]
  4053d0:	6703      	str	r3, [r0, #112]	; 0x70

  cur_seg = &(pcb->unsent);
  4053d2:	f100 056c 	add.w	r5, r0, #108	; 0x6c
  while (*cur_seg &&
  4053d6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  4053d8:	b173      	cbz	r3, 4053f8 <tcp_rexmit+0x34>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
  4053da:	4e10      	ldr	r6, [pc, #64]	; (40541c <tcp_rexmit+0x58>)
  4053dc:	68db      	ldr	r3, [r3, #12]
  4053de:	6858      	ldr	r0, [r3, #4]
  4053e0:	47b0      	blx	r6
  4053e2:	4604      	mov	r4, r0
  4053e4:	68fb      	ldr	r3, [r7, #12]
  4053e6:	6858      	ldr	r0, [r3, #4]
  4053e8:	47b0      	blx	r6
  4053ea:	1a20      	subs	r0, r4, r0
  while (*cur_seg &&
  4053ec:	2800      	cmp	r0, #0
  4053ee:	da03      	bge.n	4053f8 <tcp_rexmit+0x34>
      cur_seg = &((*cur_seg)->next );
  4053f0:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
  4053f2:	682b      	ldr	r3, [r5, #0]
  4053f4:	2b00      	cmp	r3, #0
  4053f6:	d1f1      	bne.n	4053dc <tcp_rexmit+0x18>
  }
  seg->next = *cur_seg;
  4053f8:	682b      	ldr	r3, [r5, #0]
  4053fa:	603b      	str	r3, [r7, #0]
  *cur_seg = seg;
  4053fc:	602f      	str	r7, [r5, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
  4053fe:	683b      	ldr	r3, [r7, #0]
  405400:	b14b      	cbz	r3, 405416 <tcp_rexmit+0x52>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  }
#endif /* TCP_OVERSIZE */

  ++pcb->nrtx;
  405402:	f898 3046 	ldrb.w	r3, [r8, #70]	; 0x46
  405406:	3301      	adds	r3, #1
  405408:	f888 3046 	strb.w	r3, [r8, #70]	; 0x46

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
  40540c:	2300      	movs	r3, #0
  40540e:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  405412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pcb->unsent_oversize = 0;
  405416:	f8a8 306a 	strh.w	r3, [r8, #106]	; 0x6a
  40541a:	e7f2      	b.n	405402 <tcp_rexmit+0x3e>
  40541c:	004011c1 	.word	0x004011c1

00405420 <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void 
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
  405420:	6f03      	ldr	r3, [r0, #112]	; 0x70
  405422:	b11b      	cbz	r3, 40542c <tcp_rexmit_fast+0xc>
  405424:	7f83      	ldrb	r3, [r0, #30]
  405426:	f013 0f04 	tst.w	r3, #4
  40542a:	d000      	beq.n	40542e <tcp_rexmit_fast+0xe>
  40542c:	4770      	bx	lr
{
  40542e:	b510      	push	{r4, lr}
  405430:	4604      	mov	r4, r0
    LWIP_DEBUGF(TCP_FR_DEBUG, 
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
  405432:	4b12      	ldr	r3, [pc, #72]	; (40547c <tcp_rexmit_fast+0x5c>)
  405434:	4798      	blx	r3

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    if (pcb->cwnd > pcb->snd_wnd) {
  405436:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
  40543a:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
  40543e:	4293      	cmp	r3, r2
  405440:	d917      	bls.n	405472 <tcp_rexmit_fast+0x52>
      pcb->ssthresh = pcb->snd_wnd / 2;
  405442:	0852      	lsrs	r2, r2, #1
  405444:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
    } else {
      pcb->ssthresh = pcb->cwnd / 2;
    }
    
    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < 2*pcb->mss) {
  405448:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  40544a:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
  40544e:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
  405452:	da02      	bge.n	40545a <tcp_rexmit_fast+0x3a>
      LWIP_DEBUGF(TCP_FR_DEBUG, 
                  ("tcp_receive: The minimum value for ssthresh %"U16_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, 2*pcb->mss));
      pcb->ssthresh = 2*pcb->mss;
  405454:	005a      	lsls	r2, r3, #1
  405456:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
    }
    
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
  40545a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40545e:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
  405462:	4413      	add	r3, r2
  405464:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    pcb->flags |= TF_INFR;
  405468:	7fa3      	ldrb	r3, [r4, #30]
  40546a:	f043 0304 	orr.w	r3, r3, #4
  40546e:	77a3      	strb	r3, [r4, #30]
  405470:	bd10      	pop	{r4, pc}
      pcb->ssthresh = pcb->cwnd / 2;
  405472:	085b      	lsrs	r3, r3, #1
  405474:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  405478:	e7e6      	b.n	405448 <tcp_rexmit_fast+0x28>
  40547a:	bf00      	nop
  40547c:	004053c5 	.word	0x004053c5

00405480 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
void
tcp_keepalive(struct tcp_pcb *pcb)
{
  405480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405484:	b082      	sub	sp, #8
  405486:	4604      	mov	r4, r0
                          ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
                          tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));
   
  p = tcp_output_alloc_header(pcb, 0, 0, htonl(pcb->snd_nxt - 1));
  405488:	6d00      	ldr	r0, [r0, #80]	; 0x50
  40548a:	3801      	subs	r0, #1
  40548c:	4b12      	ldr	r3, [pc, #72]	; (4054d8 <tcp_keepalive+0x58>)
  40548e:	4798      	blx	r3
  405490:	4603      	mov	r3, r0
  405492:	2200      	movs	r2, #0
  405494:	4611      	mov	r1, r2
  405496:	4620      	mov	r0, r4
  405498:	4d10      	ldr	r5, [pc, #64]	; (4054dc <tcp_keepalive+0x5c>)
  40549a:	47a8      	blx	r5
  if(p == NULL) {
  40549c:	b1c0      	cbz	r0, 4054d0 <tcp_keepalive+0x50>
  40549e:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_DEBUG, 
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  4054a0:	6847      	ldr	r7, [r0, #4]

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
  4054a2:	1d26      	adds	r6, r4, #4
  4054a4:	8903      	ldrh	r3, [r0, #8]
  4054a6:	9300      	str	r3, [sp, #0]
  4054a8:	2306      	movs	r3, #6
  4054aa:	4632      	mov	r2, r6
  4054ac:	4621      	mov	r1, r4
  4054ae:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4054e8 <tcp_keepalive+0x68>
  4054b2:	47c0      	blx	r8
  4054b4:	8238      	strh	r0, [r7, #16]
  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
  4054b6:	7aa3      	ldrb	r3, [r4, #10]
  4054b8:	2206      	movs	r2, #6
  4054ba:	9201      	str	r2, [sp, #4]
  4054bc:	2200      	movs	r2, #0
  4054be:	9200      	str	r2, [sp, #0]
  4054c0:	4632      	mov	r2, r6
  4054c2:	4621      	mov	r1, r4
  4054c4:	4628      	mov	r0, r5
  4054c6:	4c06      	ldr	r4, [pc, #24]	; (4054e0 <tcp_keepalive+0x60>)
  4054c8:	47a0      	blx	r4
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
  4054ca:	4628      	mov	r0, r5
  4054cc:	4b05      	ldr	r3, [pc, #20]	; (4054e4 <tcp_keepalive+0x64>)
  4054ce:	4798      	blx	r3

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
  4054d0:	b002      	add	sp, #8
  4054d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4054d6:	bf00      	nop
  4054d8:	004011a9 	.word	0x004011a9
  4054dc:	00404b1d 	.word	0x00404b1d
  4054e0:	00401865 	.word	0x00401865
  4054e4:	0040262d 	.word	0x0040262d
  4054e8:	0040146d 	.word	0x0040146d

004054ec <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
void
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
  4054ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4054f0:	b082      	sub	sp, #8
  LWIP_DEBUGF(TCP_DEBUG, 
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
               tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));

  seg = pcb->unacked;
  4054f2:	6f05      	ldr	r5, [r0, #112]	; 0x70

  if(seg == NULL) {
  4054f4:	b1fd      	cbz	r5, 405536 <tcp_zero_window_probe+0x4a>
  4054f6:	4604      	mov	r4, r0
  }
  if(seg == NULL) {
    return;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
  4054f8:	68eb      	ldr	r3, [r5, #12]
  4054fa:	8998      	ldrh	r0, [r3, #12]
  4054fc:	4b26      	ldr	r3, [pc, #152]	; (405598 <tcp_zero_window_probe+0xac>)
  4054fe:	4798      	blx	r3
  405500:	f010 0f01 	tst.w	r0, #1
  405504:	d001      	beq.n	40550a <tcp_zero_window_probe+0x1e>
  405506:	892b      	ldrh	r3, [r5, #8]
  405508:	b1c3      	cbz	r3, 40553c <tcp_zero_window_probe+0x50>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
  40550a:	68eb      	ldr	r3, [r5, #12]
  40550c:	685b      	ldr	r3, [r3, #4]
  40550e:	2201      	movs	r2, #1
  405510:	2100      	movs	r1, #0
  405512:	4620      	mov	r0, r4
  405514:	4e21      	ldr	r6, [pc, #132]	; (40559c <tcp_zero_window_probe+0xb0>)
  405516:	47b0      	blx	r6
  if(p == NULL) {
  405518:	4606      	mov	r6, r0
  40551a:	2800      	cmp	r0, #0
  40551c:	d039      	beq.n	405592 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  40551e:	6877      	ldr	r7, [r6, #4]
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  405520:	6868      	ldr	r0, [r5, #4]
  405522:	8903      	ldrh	r3, [r0, #8]
  405524:	892a      	ldrh	r2, [r5, #8]
  405526:	1a9b      	subs	r3, r3, r2
  405528:	b29b      	uxth	r3, r3
  40552a:	2201      	movs	r2, #1
  40552c:	f107 0114 	add.w	r1, r7, #20
  405530:	4d1b      	ldr	r5, [pc, #108]	; (4055a0 <tcp_zero_window_probe+0xb4>)
  405532:	47a8      	blx	r5
  405534:	e015      	b.n	405562 <tcp_zero_window_probe+0x76>
    seg = pcb->unsent;
  405536:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
  if(seg == NULL) {
  405538:	b35d      	cbz	r5, 405592 <tcp_zero_window_probe+0xa6>
  40553a:	e7dc      	b.n	4054f6 <tcp_zero_window_probe+0xa>
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
  40553c:	68eb      	ldr	r3, [r5, #12]
  40553e:	685b      	ldr	r3, [r3, #4]
  405540:	2200      	movs	r2, #0
  405542:	4611      	mov	r1, r2
  405544:	4620      	mov	r0, r4
  405546:	4d15      	ldr	r5, [pc, #84]	; (40559c <tcp_zero_window_probe+0xb0>)
  405548:	47a8      	blx	r5
  if(p == NULL) {
  40554a:	4606      	mov	r6, r0
  40554c:	b308      	cbz	r0, 405592 <tcp_zero_window_probe+0xa6>
  tcphdr = (struct tcp_hdr *)p->payload;
  40554e:	6877      	ldr	r7, [r6, #4]
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
  405550:	f9b7 500c 	ldrsh.w	r5, [r7, #12]
  405554:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
  405558:	2011      	movs	r0, #17
  40555a:	4b12      	ldr	r3, [pc, #72]	; (4055a4 <tcp_zero_window_probe+0xb8>)
  40555c:	4798      	blx	r3
  40555e:	4328      	orrs	r0, r5
  405560:	81b8      	strh	r0, [r7, #12]
  }

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
  405562:	1d25      	adds	r5, r4, #4
  405564:	8933      	ldrh	r3, [r6, #8]
  405566:	9300      	str	r3, [sp, #0]
  405568:	2306      	movs	r3, #6
  40556a:	462a      	mov	r2, r5
  40556c:	4621      	mov	r1, r4
  40556e:	4630      	mov	r0, r6
  405570:	f8df 803c 	ldr.w	r8, [pc, #60]	; 4055b0 <tcp_zero_window_probe+0xc4>
  405574:	47c0      	blx	r8
  405576:	8238      	strh	r0, [r7, #16]
  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
  405578:	7aa3      	ldrb	r3, [r4, #10]
  40557a:	2206      	movs	r2, #6
  40557c:	9201      	str	r2, [sp, #4]
  40557e:	2200      	movs	r2, #0
  405580:	9200      	str	r2, [sp, #0]
  405582:	462a      	mov	r2, r5
  405584:	4621      	mov	r1, r4
  405586:	4630      	mov	r0, r6
  405588:	4c07      	ldr	r4, [pc, #28]	; (4055a8 <tcp_zero_window_probe+0xbc>)
  40558a:	47a0      	blx	r4
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
  40558c:	4630      	mov	r0, r6
  40558e:	4b07      	ldr	r3, [pc, #28]	; (4055ac <tcp_zero_window_probe+0xc0>)
  405590:	4798      	blx	r3

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
  405592:	b002      	add	sp, #8
  405594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405598:	0040119f 	.word	0x0040119f
  40559c:	00404b1d 	.word	0x00404b1d
  4055a0:	00402931 	.word	0x00402931
  4055a4:	00401195 	.word	0x00401195
  4055a8:	00401865 	.word	0x00401865
  4055ac:	0040262d 	.word	0x0040262d
  4055b0:	0040146d 	.word	0x0040146d

004055b4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
  4055b4:	4770      	bx	lr
	...

004055b8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
  4055b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4055bc:	b085      	sub	sp, #20
  4055be:	4604      	mov	r4, r0
  4055c0:	4689      	mov	r9, r1

  PERF_START;

  UDP_STATS_INC(udp.recv);

  iphdr = (struct ip_hdr *)p->payload;
  4055c2:	f8d0 8004 	ldr.w	r8, [r0, #4]
  4055c6:	f898 1000 	ldrb.w	r1, [r8]
  4055ca:	f001 010f 	and.w	r1, r1, #15

  /* Check minimum length (IP header + UDP header)
   * and move payload pointer to UDP header */
  if (p->tot_len < (IPH_HL(iphdr) * 4 + UDP_HLEN) || pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4))) {
  4055ce:	8903      	ldrh	r3, [r0, #8]
  4055d0:	1c8a      	adds	r2, r1, #2
  4055d2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
  4055d6:	db04      	blt.n	4055e2 <udp_input+0x2a>
  4055d8:	0089      	lsls	r1, r1, #2
  4055da:	4249      	negs	r1, r1
  4055dc:	4b59      	ldr	r3, [pc, #356]	; (405744 <udp_input+0x18c>)
  4055de:	4798      	blx	r3
  4055e0:	b128      	cbz	r0, 4055ee <udp_input+0x36>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    snmp_inc_udpinerrors();
    pbuf_free(p);
  4055e2:	4620      	mov	r0, r4
  4055e4:	4b58      	ldr	r3, [pc, #352]	; (405748 <udp_input+0x190>)
  4055e6:	4798      	blx	r3
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
}
  4055e8:	b005      	add	sp, #20
  4055ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  udphdr = (struct udp_hdr *)p->payload;
  4055ee:	f8d4 a004 	ldr.w	sl, [r4, #4]
  broadcast = ip_addr_isbroadcast(&current_iphdr_dest, inp);
  4055f2:	4649      	mov	r1, r9
  4055f4:	4b55      	ldr	r3, [pc, #340]	; (40574c <udp_input+0x194>)
  4055f6:	6818      	ldr	r0, [r3, #0]
  4055f8:	4b55      	ldr	r3, [pc, #340]	; (405750 <udp_input+0x198>)
  4055fa:	4798      	blx	r3
  4055fc:	4607      	mov	r7, r0
  src = ntohs(udphdr->src);
  4055fe:	f8ba 0000 	ldrh.w	r0, [sl]
  405602:	4e54      	ldr	r6, [pc, #336]	; (405754 <udp_input+0x19c>)
  405604:	47b0      	blx	r6
  405606:	4605      	mov	r5, r0
  dest = ntohs(udphdr->dest);
  405608:	f8ba 0002 	ldrh.w	r0, [sl, #2]
  40560c:	47b0      	blx	r6
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  40560e:	4b52      	ldr	r3, [pc, #328]	; (405758 <udp_input+0x1a0>)
  405610:	f8d3 e000 	ldr.w	lr, [r3]
  405614:	f1be 0f00 	cmp.w	lr, #0
  405618:	d042      	beq.n	4056a0 <udp_input+0xe8>
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
  40561a:	4b4c      	ldr	r3, [pc, #304]	; (40574c <udp_input+0x194>)
  40561c:	f8d3 c000 	ldr.w	ip, [r3]
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
  405620:	4b4e      	ldr	r3, [pc, #312]	; (40575c <udp_input+0x1a4>)
  405622:	f8d3 b000 	ldr.w	fp, [r3]
  405626:	4673      	mov	r3, lr
  405628:	2600      	movs	r6, #0
  40562a:	4632      	mov	r2, r6
  40562c:	9403      	str	r4, [sp, #12]
  40562e:	e07c      	b.n	40572a <udp_input+0x172>
          if ((uncon_pcb == NULL) && 
  405630:	7c19      	ldrb	r1, [r3, #16]
  405632:	f001 0104 	and.w	r1, r1, #4
  405636:	2900      	cmp	r1, #0
  405638:	bf08      	it	eq
  40563a:	461e      	moveq	r6, r3
  40563c:	e06d      	b.n	40571a <udp_input+0x162>
          (pcb->remote_port == src) &&
  40563e:	f113 0f04 	cmn.w	r3, #4
  405642:	d003      	beq.n	40564c <udp_input+0x94>
          (ip_addr_isany(&pcb->remote_ip) ||
  405644:	6859      	ldr	r1, [r3, #4]
  405646:	b109      	cbz	r1, 40564c <udp_input+0x94>
  405648:	4559      	cmp	r1, fp
  40564a:	d169      	bne.n	405720 <udp_input+0x168>
  40564c:	9c03      	ldr	r4, [sp, #12]
        if (prev != NULL) {
  40564e:	b12a      	cbz	r2, 40565c <udp_input+0xa4>
          prev->next = pcb->next;
  405650:	68d9      	ldr	r1, [r3, #12]
  405652:	60d1      	str	r1, [r2, #12]
          pcb->next = udp_pcbs;
  405654:	f8c3 e00c 	str.w	lr, [r3, #12]
          udp_pcbs = pcb;
  405658:	4a3f      	ldr	r2, [pc, #252]	; (405758 <udp_input+0x1a0>)
  40565a:	6013      	str	r3, [r2, #0]
    if (pcb == NULL) {
  40565c:	b113      	cbz	r3, 405664 <udp_input+0xac>
  40565e:	461e      	mov	r6, r3
  405660:	e001      	b.n	405666 <udp_input+0xae>
  405662:	9c03      	ldr	r4, [sp, #12]
  if (pcb != NULL || ip_addr_cmp(&inp->ip_addr, &current_iphdr_dest)) {
  405664:	b1e6      	cbz	r6, 4056a0 <udp_input+0xe8>
      if (udphdr->chksum != 0) {
  405666:	f8ba 3006 	ldrh.w	r3, [sl, #6]
  40566a:	b14b      	cbz	r3, 405680 <udp_input+0xc8>
        if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
  40566c:	8923      	ldrh	r3, [r4, #8]
  40566e:	9300      	str	r3, [sp, #0]
  405670:	2311      	movs	r3, #17
  405672:	4a36      	ldr	r2, [pc, #216]	; (40574c <udp_input+0x194>)
  405674:	4939      	ldr	r1, [pc, #228]	; (40575c <udp_input+0x1a4>)
  405676:	4620      	mov	r0, r4
  405678:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 405764 <udp_input+0x1ac>
  40567c:	47c8      	blx	r9
  40567e:	b9d8      	cbnz	r0, 4056b8 <udp_input+0x100>
    if(pbuf_header(p, -UDP_HLEN)) {
  405680:	f06f 0107 	mvn.w	r1, #7
  405684:	4620      	mov	r0, r4
  405686:	4b2f      	ldr	r3, [pc, #188]	; (405744 <udp_input+0x18c>)
  405688:	4798      	blx	r3
  40568a:	b9c8      	cbnz	r0, 4056c0 <udp_input+0x108>
    if (pcb != NULL) {
  40568c:	b306      	cbz	r6, 4056d0 <udp_input+0x118>
      if (pcb->recv != NULL) {
  40568e:	69b7      	ldr	r7, [r6, #24]
  405690:	b1d7      	cbz	r7, 4056c8 <udp_input+0x110>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
  405692:	69f0      	ldr	r0, [r6, #28]
  405694:	9500      	str	r5, [sp, #0]
  405696:	4b31      	ldr	r3, [pc, #196]	; (40575c <udp_input+0x1a4>)
  405698:	4622      	mov	r2, r4
  40569a:	4631      	mov	r1, r6
  40569c:	47b8      	blx	r7
  40569e:	e7a3      	b.n	4055e8 <udp_input+0x30>
  if (pcb != NULL || ip_addr_cmp(&inp->ip_addr, &current_iphdr_dest)) {
  4056a0:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4056a4:	4b29      	ldr	r3, [pc, #164]	; (40574c <udp_input+0x194>)
  4056a6:	681b      	ldr	r3, [r3, #0]
  4056a8:	429a      	cmp	r2, r3
  4056aa:	d003      	beq.n	4056b4 <udp_input+0xfc>
    pbuf_free(p);
  4056ac:	4620      	mov	r0, r4
  4056ae:	4b26      	ldr	r3, [pc, #152]	; (405748 <udp_input+0x190>)
  4056b0:	4798      	blx	r3
}
  4056b2:	e799      	b.n	4055e8 <udp_input+0x30>
  4056b4:	2600      	movs	r6, #0
  4056b6:	e7d6      	b.n	405666 <udp_input+0xae>
          pbuf_free(p);
  4056b8:	4620      	mov	r0, r4
  4056ba:	4b23      	ldr	r3, [pc, #140]	; (405748 <udp_input+0x190>)
  4056bc:	4798      	blx	r3
          goto end;
  4056be:	e793      	b.n	4055e8 <udp_input+0x30>
      pbuf_free(p);
  4056c0:	4620      	mov	r0, r4
  4056c2:	4b21      	ldr	r3, [pc, #132]	; (405748 <udp_input+0x190>)
  4056c4:	4798      	blx	r3
      goto end;
  4056c6:	e78f      	b.n	4055e8 <udp_input+0x30>
        pbuf_free(p);
  4056c8:	4620      	mov	r0, r4
  4056ca:	4b1f      	ldr	r3, [pc, #124]	; (405748 <udp_input+0x190>)
  4056cc:	4798      	blx	r3
        goto end;
  4056ce:	e78b      	b.n	4055e8 <udp_input+0x30>
      if (!broadcast &&
  4056d0:	b997      	cbnz	r7, 4056f8 <udp_input+0x140>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
  4056d2:	4b1e      	ldr	r3, [pc, #120]	; (40574c <udp_input+0x194>)
  4056d4:	681b      	ldr	r3, [r3, #0]
  4056d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!broadcast &&
  4056da:	2be0      	cmp	r3, #224	; 0xe0
  4056dc:	d00c      	beq.n	4056f8 <udp_input+0x140>
        pbuf_header(p, (IPH_HL(iphdr) * 4) + UDP_HLEN);
  4056de:	f898 1000 	ldrb.w	r1, [r8]
  4056e2:	f001 010f 	and.w	r1, r1, #15
  4056e6:	3102      	adds	r1, #2
  4056e8:	0089      	lsls	r1, r1, #2
  4056ea:	4620      	mov	r0, r4
  4056ec:	4b15      	ldr	r3, [pc, #84]	; (405744 <udp_input+0x18c>)
  4056ee:	4798      	blx	r3
        icmp_dest_unreach(p, ICMP_DUR_PORT);
  4056f0:	2103      	movs	r1, #3
  4056f2:	4620      	mov	r0, r4
  4056f4:	4b1a      	ldr	r3, [pc, #104]	; (405760 <udp_input+0x1a8>)
  4056f6:	4798      	blx	r3
      pbuf_free(p);
  4056f8:	4620      	mov	r0, r4
  4056fa:	4b13      	ldr	r3, [pc, #76]	; (405748 <udp_input+0x190>)
  4056fc:	4798      	blx	r3
  4056fe:	e773      	b.n	4055e8 <udp_input+0x30>
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
  405700:	6819      	ldr	r1, [r3, #0]
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
  405702:	458c      	cmp	ip, r1
  405704:	d007      	beq.n	405716 <udp_input+0x15e>
             (ip_addr_isany(&pcb->local_ip) ||
  405706:	b131      	cbz	r1, 405716 <udp_input+0x15e>
  405708:	b12b      	cbz	r3, 405716 <udp_input+0x15e>
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
  40570a:	ea8c 0401 	eor.w	r4, ip, r1
             (ip_addr_isany(&pcb->local_ip) ||
  40570e:	f8d9 1008 	ldr.w	r1, [r9, #8]
  405712:	420c      	tst	r4, r1
  405714:	d104      	bne.n	405720 <udp_input+0x168>
          if ((uncon_pcb == NULL) && 
  405716:	2e00      	cmp	r6, #0
  405718:	d08a      	beq.n	405630 <udp_input+0x78>
      if ((local_match != 0) &&
  40571a:	8a99      	ldrh	r1, [r3, #20]
  40571c:	42a9      	cmp	r1, r5
  40571e:	d08e      	beq.n	40563e <udp_input+0x86>
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  405720:	68d9      	ldr	r1, [r3, #12]
  405722:	461a      	mov	r2, r3
  405724:	2900      	cmp	r1, #0
  405726:	d09c      	beq.n	405662 <udp_input+0xaa>
  405728:	460b      	mov	r3, r1
      if (pcb->local_port == dest) {
  40572a:	8a59      	ldrh	r1, [r3, #18]
  40572c:	4281      	cmp	r1, r0
  40572e:	d1f7      	bne.n	405720 <udp_input+0x168>
        if (
  405730:	2f00      	cmp	r7, #0
  405732:	d1e5      	bne.n	405700 <udp_input+0x148>
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
  405734:	2b00      	cmp	r3, #0
  405736:	d0ee      	beq.n	405716 <udp_input+0x15e>
  405738:	6819      	ldr	r1, [r3, #0]
  40573a:	2900      	cmp	r1, #0
  40573c:	d0eb      	beq.n	405716 <udp_input+0x15e>
  40573e:	4561      	cmp	r1, ip
  405740:	d1ee      	bne.n	405720 <udp_input+0x168>
  405742:	e7e8      	b.n	405716 <udp_input+0x15e>
  405744:	004025bf 	.word	0x004025bf
  405748:	0040262d 	.word	0x0040262d
  40574c:	20403938 	.word	0x20403938
  405750:	004018a5 	.word	0x004018a5
  405754:	0040119f 	.word	0x0040119f
  405758:	20404980 	.word	0x20404980
  40575c:	20403930 	.word	0x20403930
  405760:	004013d1 	.word	0x004013d1
  405764:	0040146d 	.word	0x0040146d

00405768 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
  405768:	b510      	push	{r4, lr}
  40576a:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  snmp_delete_arpidx_tree(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
  40576c:	eb00 0280 	add.w	r2, r0, r0, lsl #2
  405770:	4b09      	ldr	r3, [pc, #36]	; (405798 <etharp_free_entry+0x30>)
  405772:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  405776:	b138      	cbz	r0, 405788 <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
  405778:	4b08      	ldr	r3, [pc, #32]	; (40579c <etharp_free_entry+0x34>)
  40577a:	4798      	blx	r3
    arp_table[i].q = NULL;
  40577c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  405780:	009b      	lsls	r3, r3, #2
  405782:	2100      	movs	r1, #0
  405784:	4a04      	ldr	r2, [pc, #16]	; (405798 <etharp_free_entry+0x30>)
  405786:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
  405788:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40578c:	4b02      	ldr	r3, [pc, #8]	; (405798 <etharp_free_entry+0x30>)
  40578e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
  405792:	2300      	movs	r3, #0
  405794:	74a3      	strb	r3, [r4, #18]
  405796:	bd10      	pop	{r4, pc}
  405798:	204025ec 	.word	0x204025ec
  40579c:	0040262d 	.word	0x0040262d

004057a0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(ip_addr_t *ipaddr, u8_t flags)
{
  4057a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4057a4:	b083      	sub	sp, #12
  4057a6:	4a3a      	ldr	r2, [pc, #232]	; (405890 <etharp_find_entry+0xf0>)
  4057a8:	2300      	movs	r3, #0
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0, age_pending = 0, age_stable = 0;
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  /* its age */
  u8_t age_queue = 0;
  4057aa:	4698      	mov	r8, r3
  s8_t old_queue = ARP_TABLE_SIZE;
  4057ac:	260a      	movs	r6, #10
  u8_t i = 0, age_pending = 0, age_stable = 0;
  4057ae:	469e      	mov	lr, r3
  4057b0:	469b      	mov	fp, r3
  s8_t empty = ARP_TABLE_SIZE;
  4057b2:	4634      	mov	r4, r6
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  4057b4:	46b4      	mov	ip, r6
  4057b6:	46b1      	mov	r9, r6
  4057b8:	9101      	str	r1, [sp, #4]
  4057ba:	e014      	b.n	4057e6 <etharp_find_entry+0x46>
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
  4057bc:	b17f      	cbz	r7, 4057de <etharp_find_entry+0x3e>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip_addr_cmp(ipaddr, &arp_table[i].ipaddr)) {
  4057be:	b120      	cbz	r0, 4057ca <etharp_find_entry+0x2a>
  4057c0:	6801      	ldr	r1, [r0, #0]
  4057c2:	468a      	mov	sl, r1
  4057c4:	6869      	ldr	r1, [r5, #4]
  4057c6:	458a      	cmp	sl, r1
  4057c8:	d015      	beq.n	4057f6 <etharp_find_entry+0x56>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
  4057ca:	2f01      	cmp	r7, #1
  4057cc:	d015      	beq.n	4057fa <etharp_find_entry+0x5a>
            old_pending = i;
            age_pending = arp_table[i].ctime;
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
  4057ce:	2f01      	cmp	r7, #1
  4057d0:	d905      	bls.n	4057de <etharp_find_entry+0x3e>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
  4057d2:	7ced      	ldrb	r5, [r5, #19]
  4057d4:	4575      	cmp	r5, lr
  4057d6:	d302      	bcc.n	4057de <etharp_find_entry+0x3e>
            old_stable = i;
  4057d8:	fa4f fc83 	sxtb.w	ip, r3
            age_stable = arp_table[i].ctime;
  4057dc:	46ae      	mov	lr, r5
  4057de:	3301      	adds	r3, #1
  4057e0:	3214      	adds	r2, #20
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  4057e2:	2b0a      	cmp	r3, #10
  4057e4:	d018      	beq.n	405818 <etharp_find_entry+0x78>
  4057e6:	4615      	mov	r5, r2
    u8_t state = arp_table[i].state;
  4057e8:	7c97      	ldrb	r7, [r2, #18]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
  4057ea:	2c0a      	cmp	r4, #10
  4057ec:	d1e6      	bne.n	4057bc <etharp_find_entry+0x1c>
  4057ee:	2f00      	cmp	r7, #0
  4057f0:	d1e4      	bne.n	4057bc <etharp_find_entry+0x1c>
      empty = i;
  4057f2:	b25c      	sxtb	r4, r3
  4057f4:	e7f3      	b.n	4057de <etharp_find_entry+0x3e>
        return i;
  4057f6:	b258      	sxtb	r0, r3
  4057f8:	e028      	b.n	40584c <etharp_find_entry+0xac>
        if (arp_table[i].q != NULL) {
  4057fa:	682f      	ldr	r7, [r5, #0]
  4057fc:	b12f      	cbz	r7, 40580a <etharp_find_entry+0x6a>
          if (arp_table[i].ctime >= age_queue) {
  4057fe:	7ced      	ldrb	r5, [r5, #19]
  405800:	4545      	cmp	r5, r8
  405802:	d3ec      	bcc.n	4057de <etharp_find_entry+0x3e>
            old_queue = i;
  405804:	b25e      	sxtb	r6, r3
            age_queue = arp_table[i].ctime;
  405806:	46a8      	mov	r8, r5
  405808:	e7e9      	b.n	4057de <etharp_find_entry+0x3e>
          if (arp_table[i].ctime >= age_pending) {
  40580a:	7ced      	ldrb	r5, [r5, #19]
  40580c:	455d      	cmp	r5, fp
  40580e:	d3e6      	bcc.n	4057de <etharp_find_entry+0x3e>
            old_pending = i;
  405810:	fa4f f983 	sxtb.w	r9, r3
            age_pending = arp_table[i].ctime;
  405814:	46ab      	mov	fp, r5
  405816:	e7e2      	b.n	4057de <etharp_find_entry+0x3e>
  405818:	9901      	ldr	r1, [sp, #4]
    }
  }
  /* { we have no match } => try to create a new entry */
   
  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
  40581a:	f011 0f02 	tst.w	r1, #2
  40581e:	d12e      	bne.n	40587e <etharp_find_entry+0xde>
  405820:	4605      	mov	r5, r0
  405822:	2c0a      	cmp	r4, #10
  405824:	d015      	beq.n	405852 <etharp_find_entry+0xb2>
   * 
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */ 

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
  405826:	2c09      	cmp	r4, #9
  405828:	dc16      	bgt.n	405858 <etharp_find_entry+0xb8>
    i = empty;
  40582a:	b2e4      	uxtb	r4, r4
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
  40582c:	b135      	cbz	r5, 40583c <etharp_find_entry+0x9c>
    /* set IP address */
    ip_addr_copy(arp_table[i].ipaddr, *ipaddr);
  40582e:	6829      	ldr	r1, [r5, #0]
  405830:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  405834:	4a16      	ldr	r2, [pc, #88]	; (405890 <etharp_find_entry+0xf0>)
  405836:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40583a:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
  40583c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  405840:	4b13      	ldr	r3, [pc, #76]	; (405890 <etharp_find_entry+0xf0>)
  405842:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  405846:	2200      	movs	r2, #0
  405848:	74da      	strb	r2, [r3, #19]
  return (err_t)i;
  40584a:	b260      	sxtb	r0, r4
}
  40584c:	b003      	add	sp, #12
  40584e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
  405852:	f011 0f01 	tst.w	r1, #1
  405856:	d015      	beq.n	405884 <etharp_find_entry+0xe4>
    if (old_stable < ARP_TABLE_SIZE) {
  405858:	f1bc 0f09 	cmp.w	ip, #9
  40585c:	dc05      	bgt.n	40586a <etharp_find_entry+0xca>
      i = old_stable;
  40585e:	fa5f f48c 	uxtb.w	r4, ip
    etharp_free_entry(i);
  405862:	4620      	mov	r0, r4
  405864:	4b0b      	ldr	r3, [pc, #44]	; (405894 <etharp_find_entry+0xf4>)
  405866:	4798      	blx	r3
  405868:	e7e0      	b.n	40582c <etharp_find_entry+0x8c>
    } else if (old_pending < ARP_TABLE_SIZE) {
  40586a:	f1b9 0f09 	cmp.w	r9, #9
  40586e:	dc02      	bgt.n	405876 <etharp_find_entry+0xd6>
      i = old_pending;
  405870:	fa5f f489 	uxtb.w	r4, r9
  405874:	e7f5      	b.n	405862 <etharp_find_entry+0xc2>
    } else if (old_queue < ARP_TABLE_SIZE) {
  405876:	2e09      	cmp	r6, #9
  405878:	dc07      	bgt.n	40588a <etharp_find_entry+0xea>
      i = old_queue;
  40587a:	b2f4      	uxtb	r4, r6
  40587c:	e7f1      	b.n	405862 <etharp_find_entry+0xc2>
    return (s8_t)ERR_MEM;
  40587e:	f04f 30ff 	mov.w	r0, #4294967295
  405882:	e7e3      	b.n	40584c <etharp_find_entry+0xac>
  405884:	f04f 30ff 	mov.w	r0, #4294967295
  405888:	e7e0      	b.n	40584c <etharp_find_entry+0xac>
      return (s8_t)ERR_MEM;
  40588a:	f04f 30ff 	mov.w	r0, #4294967295
  40588e:	e7dd      	b.n	40584c <etharp_find_entry+0xac>
  405890:	204025ec 	.word	0x204025ec
  405894:	00405769 	.word	0x00405769

00405898 <etharp_send_ip>:
 * @params dst the destination MAC address to be copied into the ethernet header
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
static err_t
etharp_send_ip(struct netif *netif, struct pbuf *p, struct eth_addr *src, struct eth_addr *dst)
{
  405898:	b538      	push	{r3, r4, r5, lr}
  struct eth_hdr *ethhdr = (struct eth_hdr *)p->payload;
  40589a:	684c      	ldr	r4, [r1, #4]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
              (netif->hwaddr_len == ETHARP_HWADDR_LEN));
  ETHADDR32_COPY(&ethhdr->dest, dst);
  40589c:	681d      	ldr	r5, [r3, #0]
  40589e:	6025      	str	r5, [r4, #0]
  4058a0:	889b      	ldrh	r3, [r3, #4]
  4058a2:	80a3      	strh	r3, [r4, #4]
  ETHADDR16_COPY(&ethhdr->src, src);
  4058a4:	6813      	ldr	r3, [r2, #0]
  4058a6:	f8c4 3006 	str.w	r3, [r4, #6]
  4058aa:	8893      	ldrh	r3, [r2, #4]
  4058ac:	8163      	strh	r3, [r4, #10]
  ethhdr->type = PP_HTONS(ETHTYPE_IP);
  4058ae:	2308      	movs	r3, #8
  4058b0:	7323      	strb	r3, [r4, #12]
  4058b2:	2300      	movs	r3, #0
  4058b4:	7363      	strb	r3, [r4, #13]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_send_ip: sending packet %p\n", (void *)p));
  /* send the packet */
  return netif->linkoutput(netif, p);
  4058b6:	6983      	ldr	r3, [r0, #24]
  4058b8:	4798      	blx	r3
}
  4058ba:	bd38      	pop	{r3, r4, r5, pc}

004058bc <etharp_tmr>:
{
  4058bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4058be:	4c0f      	ldr	r4, [pc, #60]	; (4058fc <etharp_tmr+0x40>)
  4058c0:	2500      	movs	r5, #0
        etharp_free_entry(i);
  4058c2:	4e0f      	ldr	r6, [pc, #60]	; (405900 <etharp_tmr+0x44>)
        arp_table[i].state = ETHARP_STATE_STABLE;
  4058c4:	2702      	movs	r7, #2
  4058c6:	e006      	b.n	4058d6 <etharp_tmr+0x1a>
      else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING) {
  4058c8:	2a03      	cmp	r2, #3
        arp_table[i].state = ETHARP_STATE_STABLE;
  4058ca:	bf08      	it	eq
  4058cc:	748f      	strbeq	r7, [r1, #18]
  4058ce:	3501      	adds	r5, #1
  4058d0:	3414      	adds	r4, #20
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  4058d2:	2d0a      	cmp	r5, #10
  4058d4:	d010      	beq.n	4058f8 <etharp_tmr+0x3c>
    u8_t state = arp_table[i].state;
  4058d6:	4628      	mov	r0, r5
  4058d8:	4621      	mov	r1, r4
  4058da:	7ca2      	ldrb	r2, [r4, #18]
    if (state != ETHARP_STATE_EMPTY
  4058dc:	2a00      	cmp	r2, #0
  4058de:	d0f6      	beq.n	4058ce <etharp_tmr+0x12>
      arp_table[i].ctime++;
  4058e0:	7ce3      	ldrb	r3, [r4, #19]
  4058e2:	3301      	adds	r3, #1
  4058e4:	b2db      	uxtb	r3, r3
  4058e6:	74e3      	strb	r3, [r4, #19]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
  4058e8:	2bef      	cmp	r3, #239	; 0xef
  4058ea:	d803      	bhi.n	4058f4 <etharp_tmr+0x38>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
  4058ec:	2b01      	cmp	r3, #1
  4058ee:	d9eb      	bls.n	4058c8 <etharp_tmr+0xc>
  4058f0:	2a01      	cmp	r2, #1
  4058f2:	d1e9      	bne.n	4058c8 <etharp_tmr+0xc>
        etharp_free_entry(i);
  4058f4:	47b0      	blx	r6
  4058f6:	e7ea      	b.n	4058ce <etharp_tmr+0x12>
}
  4058f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4058fa:	bf00      	nop
  4058fc:	204025ec 	.word	0x204025ec
  405900:	00405769 	.word	0x00405769

00405904 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, ip_addr_t *ipaddr)
{
  405904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405908:	4605      	mov	r5, r0
  40590a:	4688      	mov	r8, r1
  p = pbuf_alloc(PBUF_RAW, SIZEOF_ETHARP_PACKET, PBUF_RAM);
  40590c:	2200      	movs	r2, #0
  40590e:	212a      	movs	r1, #42	; 0x2a
  405910:	2003      	movs	r0, #3
  405912:	4b22      	ldr	r3, [pc, #136]	; (40599c <etharp_request+0x98>)
  405914:	4798      	blx	r3
  if (p == NULL) {
  405916:	2800      	cmp	r0, #0
  405918:	d03c      	beq.n	405994 <etharp_request+0x90>
  40591a:	4607      	mov	r7, r0
  ethhdr = (struct eth_hdr *)p->payload;
  40591c:	6844      	ldr	r4, [r0, #4]
  hdr->opcode = htons(opcode);
  40591e:	2001      	movs	r0, #1
  405920:	4b1f      	ldr	r3, [pc, #124]	; (4059a0 <etharp_request+0x9c>)
  405922:	4798      	blx	r3
  405924:	82a0      	strh	r0, [r4, #20]
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
  405926:	f8d5 3027 	ldr.w	r3, [r5, #39]	; 0x27
  40592a:	f8c4 3016 	str.w	r3, [r4, #22]
  40592e:	f8b5 302b 	ldrh.w	r3, [r5, #43]	; 0x2b
  405932:	8363      	strh	r3, [r4, #26]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
  405934:	4b1b      	ldr	r3, [pc, #108]	; (4059a4 <etharp_request+0xa0>)
  405936:	6818      	ldr	r0, [r3, #0]
  405938:	6220      	str	r0, [r4, #32]
  40593a:	889b      	ldrh	r3, [r3, #4]
  40593c:	84a3      	strh	r3, [r4, #36]	; 0x24
  ETHADDR16_COPY(&ethhdr->dest, ethdst_addr);
  40593e:	4b1a      	ldr	r3, [pc, #104]	; (4059a8 <etharp_request+0xa4>)
  405940:	6818      	ldr	r0, [r3, #0]
  405942:	6020      	str	r0, [r4, #0]
  405944:	889b      	ldrh	r3, [r3, #4]
  405946:	80a3      	strh	r3, [r4, #4]
  ETHADDR16_COPY(&ethhdr->src, ethsrc_addr);
  405948:	f8d5 3027 	ldr.w	r3, [r5, #39]	; 0x27
  40594c:	f8c4 3006 	str.w	r3, [r4, #6]
  405950:	f8b5 302b 	ldrh.w	r3, [r5, #43]	; 0x2b
  405954:	8163      	strh	r3, [r4, #10]
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
  405956:	686b      	ldr	r3, [r5, #4]
  405958:	61e3      	str	r3, [r4, #28]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
  40595a:	f8d8 3000 	ldr.w	r3, [r8]
  40595e:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
  405962:	2200      	movs	r2, #0
  405964:	73a2      	strb	r2, [r4, #14]
  405966:	2301      	movs	r3, #1
  405968:	73e3      	strb	r3, [r4, #15]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
  40596a:	2308      	movs	r3, #8
  40596c:	7423      	strb	r3, [r4, #16]
  40596e:	7462      	strb	r2, [r4, #17]
  hdr->hwlen = ETHARP_HWADDR_LEN;
  405970:	2206      	movs	r2, #6
  405972:	74a2      	strb	r2, [r4, #18]
  hdr->protolen = sizeof(ip_addr_t);
  405974:	2204      	movs	r2, #4
  405976:	74e2      	strb	r2, [r4, #19]
  ethhdr->type = PP_HTONS(ETHTYPE_ARP);
  405978:	7323      	strb	r3, [r4, #12]
  40597a:	2306      	movs	r3, #6
  40597c:	7363      	strb	r3, [r4, #13]
  result = netif->linkoutput(netif, p);
  40597e:	69ab      	ldr	r3, [r5, #24]
  405980:	4639      	mov	r1, r7
  405982:	4628      	mov	r0, r5
  405984:	4798      	blx	r3
  405986:	4604      	mov	r4, r0
  pbuf_free(p);
  405988:	4638      	mov	r0, r7
  40598a:	4b08      	ldr	r3, [pc, #32]	; (4059ac <etharp_request+0xa8>)
  40598c:	4798      	blx	r3
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
                    (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
                    ipaddr, ARP_REQUEST);
}
  40598e:	4620      	mov	r0, r4
  405990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
  405994:	f04f 34ff 	mov.w	r4, #4294967295
  405998:	e7f9      	b.n	40598e <etharp_request+0x8a>
  40599a:	bf00      	nop
  40599c:	00402685 	.word	0x00402685
  4059a0:	00401195 	.word	0x00401195
  4059a4:	0040e920 	.word	0x0040e920
  4059a8:	0040e918 	.word	0x0040e918
  4059ac:	0040262d 	.word	0x0040262d

004059b0 <etharp_output_to_arp_index>:
{
  4059b0:	b570      	push	{r4, r5, r6, lr}
  4059b2:	4605      	mov	r5, r0
  4059b4:	460e      	mov	r6, r1
  4059b6:	4614      	mov	r4, r2
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
  4059b8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4059bc:	4b15      	ldr	r3, [pc, #84]	; (405a14 <etharp_output_to_arp_index+0x64>)
  4059be:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4059c2:	7c9b      	ldrb	r3, [r3, #18]
  4059c4:	2b02      	cmp	r3, #2
  4059c6:	d00c      	beq.n	4059e2 <etharp_output_to_arp_index+0x32>
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
  4059c8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4059cc:	4b11      	ldr	r3, [pc, #68]	; (405a14 <etharp_output_to_arp_index+0x64>)
  4059ce:	eb03 0384 	add.w	r3, r3, r4, lsl #2
  4059d2:	330c      	adds	r3, #12
  4059d4:	f105 0227 	add.w	r2, r5, #39	; 0x27
  4059d8:	4631      	mov	r1, r6
  4059da:	4628      	mov	r0, r5
  4059dc:	4c0e      	ldr	r4, [pc, #56]	; (405a18 <etharp_output_to_arp_index+0x68>)
  4059de:	47a0      	blx	r4
}
  4059e0:	bd70      	pop	{r4, r5, r6, pc}
      (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED)) {
  4059e2:	4613      	mov	r3, r2
  4059e4:	4a0b      	ldr	r2, [pc, #44]	; (405a14 <etharp_output_to_arp_index+0x64>)
  4059e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
  4059ea:	7cdb      	ldrb	r3, [r3, #19]
  4059ec:	2be3      	cmp	r3, #227	; 0xe3
  4059ee:	d9eb      	bls.n	4059c8 <etharp_output_to_arp_index+0x18>
    if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
  4059f0:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  4059f4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  4059f8:	3104      	adds	r1, #4
  4059fa:	4b08      	ldr	r3, [pc, #32]	; (405a1c <etharp_output_to_arp_index+0x6c>)
  4059fc:	4798      	blx	r3
  4059fe:	2800      	cmp	r0, #0
  405a00:	d1e2      	bne.n	4059c8 <etharp_output_to_arp_index+0x18>
      arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING;
  405a02:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  405a06:	4a03      	ldr	r2, [pc, #12]	; (405a14 <etharp_output_to_arp_index+0x64>)
  405a08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  405a0c:	2203      	movs	r2, #3
  405a0e:	749a      	strb	r2, [r3, #18]
  405a10:	e7da      	b.n	4059c8 <etharp_output_to_arp_index+0x18>
  405a12:	bf00      	nop
  405a14:	204025ec 	.word	0x204025ec
  405a18:	00405899 	.word	0x00405899
  405a1c:	00405905 	.word	0x00405905

00405a20 <etharp_query>:
{
  405a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405a24:	4607      	mov	r7, r0
  405a26:	460d      	mov	r5, r1
  405a28:	4616      	mov	r6, r2
  if (ip_addr_isbroadcast(ipaddr, netif) ||
  405a2a:	4601      	mov	r1, r0
  405a2c:	6828      	ldr	r0, [r5, #0]
  405a2e:	4b4c      	ldr	r3, [pc, #304]	; (405b60 <etharp_query+0x140>)
  405a30:	4798      	blx	r3
  405a32:	2800      	cmp	r0, #0
  405a34:	d16b      	bne.n	405b0e <etharp_query+0xee>
      ip_addr_ismulticast(ipaddr) ||
  405a36:	682b      	ldr	r3, [r5, #0]
      ip_addr_isany(ipaddr)) {
  405a38:	2b00      	cmp	r3, #0
  405a3a:	bf18      	it	ne
  405a3c:	2d00      	cmpne	r5, #0
  405a3e:	d06a      	beq.n	405b16 <etharp_query+0xf6>
      ip_addr_ismulticast(ipaddr) ||
  405a40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip_addr_isany(ipaddr)) {
  405a44:	2be0      	cmp	r3, #224	; 0xe0
  405a46:	d066      	beq.n	405b16 <etharp_query+0xf6>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD);
  405a48:	2101      	movs	r1, #1
  405a4a:	4628      	mov	r0, r5
  405a4c:	4b45      	ldr	r3, [pc, #276]	; (405b64 <etharp_query+0x144>)
  405a4e:	4798      	blx	r3
  if (i < 0) {
  405a50:	1e04      	subs	r4, r0, #0
  405a52:	db64      	blt.n	405b1e <etharp_query+0xfe>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
  405a54:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  405a58:	4a43      	ldr	r2, [pc, #268]	; (405b68 <etharp_query+0x148>)
  405a5a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  405a5e:	7c9b      	ldrb	r3, [r3, #18]
  405a60:	b993      	cbnz	r3, 405a88 <etharp_query+0x68>
    arp_table[i].state = ETHARP_STATE_PENDING;
  405a62:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  405a66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  405a6a:	2201      	movs	r2, #1
  405a6c:	749a      	strb	r2, [r3, #18]
  if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
  405a6e:	fab6 f886 	clz	r8, r6
  405a72:	ea4f 1858 	mov.w	r8, r8, lsr #5
    result = etharp_request(netif, ipaddr);
  405a76:	4629      	mov	r1, r5
  405a78:	4638      	mov	r0, r7
  405a7a:	4b3c      	ldr	r3, [pc, #240]	; (405b6c <etharp_query+0x14c>)
  405a7c:	4798      	blx	r3
    if (q == NULL) {
  405a7e:	f1b8 0f00 	cmp.w	r8, #0
  405a82:	d00c      	beq.n	405a9e <etharp_query+0x7e>
  405a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
  405a88:	fab6 f886 	clz	r8, r6
  405a8c:	ea4f 1858 	mov.w	r8, r8, lsr #5
  405a90:	2b01      	cmp	r3, #1
  405a92:	d0f0      	beq.n	405a76 <etharp_query+0x56>
  405a94:	f1b8 0f00 	cmp.w	r8, #0
  405a98:	d1ed      	bne.n	405a76 <etharp_query+0x56>
  err_t result = ERR_MEM;
  405a9a:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
  405a9e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  405aa2:	4a31      	ldr	r2, [pc, #196]	; (405b68 <etharp_query+0x148>)
  405aa4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  405aa8:	7c9b      	ldrb	r3, [r3, #18]
  405aaa:	2b01      	cmp	r3, #1
  405aac:	d803      	bhi.n	405ab6 <etharp_query+0x96>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
  405aae:	2b01      	cmp	r3, #1
  405ab0:	d010      	beq.n	405ad4 <etharp_query+0xb4>
}
  405ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ETHARP_SET_HINT(netif, i);
  405ab6:	4b2e      	ldr	r3, [pc, #184]	; (405b70 <etharp_query+0x150>)
  405ab8:	701c      	strb	r4, [r3, #0]
    result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
  405aba:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  405abe:	eb02 0384 	add.w	r3, r2, r4, lsl #2
  405ac2:	330c      	adds	r3, #12
  405ac4:	f107 0227 	add.w	r2, r7, #39	; 0x27
  405ac8:	4631      	mov	r1, r6
  405aca:	4638      	mov	r0, r7
  405acc:	4c29      	ldr	r4, [pc, #164]	; (405b74 <etharp_query+0x154>)
  405ace:	47a0      	blx	r4
  405ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (p) {
  405ad4:	b346      	cbz	r6, 405b28 <etharp_query+0x108>
      if(p->type != PBUF_ROM) {
  405ad6:	7b33      	ldrb	r3, [r6, #12]
  405ad8:	2b01      	cmp	r3, #1
  405ada:	d123      	bne.n	405b24 <etharp_query+0x104>
  405adc:	4633      	mov	r3, r6
      p = p->next;
  405ade:	681b      	ldr	r3, [r3, #0]
    while (p) {
  405ae0:	b34b      	cbz	r3, 405b36 <etharp_query+0x116>
      if(p->type != PBUF_ROM) {
  405ae2:	7b1a      	ldrb	r2, [r3, #12]
  405ae4:	2a01      	cmp	r2, #1
  405ae6:	d0fa      	beq.n	405ade <etharp_query+0xbe>
      p = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
  405ae8:	2200      	movs	r2, #0
  405aea:	8919      	ldrh	r1, [r3, #8]
  405aec:	2003      	movs	r0, #3
  405aee:	4b22      	ldr	r3, [pc, #136]	; (405b78 <etharp_query+0x158>)
  405af0:	4798      	blx	r3
      if(p != NULL) {
  405af2:	4605      	mov	r5, r0
  405af4:	b138      	cbz	r0, 405b06 <etharp_query+0xe6>
        if (pbuf_copy(p, q) != ERR_OK) {
  405af6:	4631      	mov	r1, r6
  405af8:	4628      	mov	r0, r5
  405afa:	4b20      	ldr	r3, [pc, #128]	; (405b7c <etharp_query+0x15c>)
  405afc:	4798      	blx	r3
  405afe:	b1f0      	cbz	r0, 405b3e <etharp_query+0x11e>
          pbuf_free(p);
  405b00:	4628      	mov	r0, r5
  405b02:	4b1f      	ldr	r3, [pc, #124]	; (405b80 <etharp_query+0x160>)
  405b04:	4798      	blx	r3
      result = ERR_MEM;
  405b06:	f04f 30ff 	mov.w	r0, #4294967295
  405b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_ARG;
  405b0e:	f06f 000d 	mvn.w	r0, #13
  405b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405b16:	f06f 000d 	mvn.w	r0, #13
  405b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (err_t)i;
  405b1e:	4620      	mov	r0, r4
  405b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(p->type != PBUF_ROM) {
  405b24:	4633      	mov	r3, r6
  405b26:	e7df      	b.n	405ae8 <etharp_query+0xc8>
      pbuf_ref(p);
  405b28:	4630      	mov	r0, r6
  405b2a:	4b16      	ldr	r3, [pc, #88]	; (405b84 <etharp_query+0x164>)
  405b2c:	4798      	blx	r3
      result = ERR_MEM;
  405b2e:	f04f 30ff 	mov.w	r0, #4294967295
  405b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pbuf_ref(p);
  405b36:	4630      	mov	r0, r6
  405b38:	4b12      	ldr	r3, [pc, #72]	; (405b84 <etharp_query+0x164>)
  405b3a:	4798      	blx	r3
      p = q;
  405b3c:	4635      	mov	r5, r6
      if (arp_table[i].q != NULL) {
  405b3e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  405b42:	4a09      	ldr	r2, [pc, #36]	; (405b68 <etharp_query+0x148>)
  405b44:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  405b48:	b108      	cbz	r0, 405b4e <etharp_query+0x12e>
        pbuf_free(arp_table[i].q);
  405b4a:	4b0d      	ldr	r3, [pc, #52]	; (405b80 <etharp_query+0x160>)
  405b4c:	4798      	blx	r3
      arp_table[i].q = p;
  405b4e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  405b52:	4a05      	ldr	r2, [pc, #20]	; (405b68 <etharp_query+0x148>)
  405b54:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
      result = ERR_OK;
  405b58:	2000      	movs	r0, #0
  405b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405b5e:	bf00      	nop
  405b60:	004018a5 	.word	0x004018a5
  405b64:	004057a1 	.word	0x004057a1
  405b68:	204025ec 	.word	0x204025ec
  405b6c:	00405905 	.word	0x00405905
  405b70:	204026b4 	.word	0x204026b4
  405b74:	00405899 	.word	0x00405899
  405b78:	00402685 	.word	0x00402685
  405b7c:	00402881 	.word	0x00402881
  405b80:	0040262d 	.word	0x0040262d
  405b84:	00402843 	.word	0x00402843

00405b88 <etharp_output>:
{
  405b88:	b570      	push	{r4, r5, r6, lr}
  405b8a:	b082      	sub	sp, #8
  405b8c:	4605      	mov	r5, r0
  405b8e:	460e      	mov	r6, r1
  405b90:	4614      	mov	r4, r2
  if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
  405b92:	210e      	movs	r1, #14
  405b94:	4630      	mov	r0, r6
  405b96:	4b3d      	ldr	r3, [pc, #244]	; (405c8c <etharp_output+0x104>)
  405b98:	4798      	blx	r3
  405b9a:	2800      	cmp	r0, #0
  405b9c:	d16c      	bne.n	405c78 <etharp_output+0xf0>
  if (ip_addr_isbroadcast(ipaddr, netif)) {
  405b9e:	4629      	mov	r1, r5
  405ba0:	6820      	ldr	r0, [r4, #0]
  405ba2:	4b3b      	ldr	r3, [pc, #236]	; (405c90 <etharp_output+0x108>)
  405ba4:	4798      	blx	r3
  405ba6:	2800      	cmp	r0, #0
  405ba8:	d15d      	bne.n	405c66 <etharp_output+0xde>
  } else if (ip_addr_ismulticast(ipaddr)) {
  405baa:	6823      	ldr	r3, [r4, #0]
  405bac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  405bb0:	2ae0      	cmp	r2, #224	; 0xe0
  405bb2:	d024      	beq.n	405bfe <etharp_output+0x76>
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
  405bb4:	686a      	ldr	r2, [r5, #4]
  405bb6:	405a      	eors	r2, r3
  405bb8:	68a9      	ldr	r1, [r5, #8]
  405bba:	420a      	tst	r2, r1
  405bbc:	d00a      	beq.n	405bd4 <etharp_output+0x4c>
        !ip_addr_islinklocal(ipaddr)) {
  405bbe:	b29b      	uxth	r3, r3
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
  405bc0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
  405bc4:	4293      	cmp	r3, r2
  405bc6:	d005      	beq.n	405bd4 <etharp_output+0x4c>
        if (!ip_addr_isany(&netif->gw)) {
  405bc8:	f115 040c 	adds.w	r4, r5, #12
  405bcc:	d057      	beq.n	405c7e <etharp_output+0xf6>
  405bce:	68eb      	ldr	r3, [r5, #12]
  405bd0:	2b00      	cmp	r3, #0
  405bd2:	d057      	beq.n	405c84 <etharp_output+0xfc>
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  405bd4:	4b2f      	ldr	r3, [pc, #188]	; (405c94 <etharp_output+0x10c>)
  405bd6:	781a      	ldrb	r2, [r3, #0]
  405bd8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  405bdc:	4b2e      	ldr	r3, [pc, #184]	; (405c98 <etharp_output+0x110>)
  405bde:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  405be2:	7c9b      	ldrb	r3, [r3, #18]
  405be4:	2b01      	cmp	r3, #1
  405be6:	d907      	bls.n	405bf8 <etharp_output+0x70>
            (ip_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
  405be8:	460b      	mov	r3, r1
  405bea:	492b      	ldr	r1, [pc, #172]	; (405c98 <etharp_output+0x110>)
  405bec:	eb01 0383 	add.w	r3, r1, r3, lsl #2
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  405bf0:	6821      	ldr	r1, [r4, #0]
  405bf2:	685b      	ldr	r3, [r3, #4]
  405bf4:	4299      	cmp	r1, r3
  405bf6:	d018      	beq.n	405c2a <etharp_output+0xa2>
  405bf8:	4b27      	ldr	r3, [pc, #156]	; (405c98 <etharp_output+0x110>)
{
  405bfa:	2200      	movs	r2, #0
  405bfc:	e01e      	b.n	405c3c <etharp_output+0xb4>
    mcastaddr.addr[0] = LL_MULTICAST_ADDR_0;
  405bfe:	2301      	movs	r3, #1
  405c00:	f88d 3000 	strb.w	r3, [sp]
    mcastaddr.addr[1] = LL_MULTICAST_ADDR_1;
  405c04:	2300      	movs	r3, #0
  405c06:	f88d 3001 	strb.w	r3, [sp, #1]
    mcastaddr.addr[2] = LL_MULTICAST_ADDR_2;
  405c0a:	235e      	movs	r3, #94	; 0x5e
  405c0c:	f88d 3002 	strb.w	r3, [sp, #2]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
  405c10:	7863      	ldrb	r3, [r4, #1]
  405c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  405c16:	f88d 3003 	strb.w	r3, [sp, #3]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
  405c1a:	78a3      	ldrb	r3, [r4, #2]
  405c1c:	f88d 3004 	strb.w	r3, [sp, #4]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
  405c20:	78e3      	ldrb	r3, [r4, #3]
  405c22:	f88d 3005 	strb.w	r3, [sp, #5]
    dest = &mcastaddr;
  405c26:	466b      	mov	r3, sp
  405c28:	e01e      	b.n	405c68 <etharp_output+0xe0>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
  405c2a:	4631      	mov	r1, r6
  405c2c:	4628      	mov	r0, r5
  405c2e:	4b1b      	ldr	r3, [pc, #108]	; (405c9c <etharp_output+0x114>)
  405c30:	4798      	blx	r3
  405c32:	e01f      	b.n	405c74 <etharp_output+0xec>
  405c34:	3201      	adds	r2, #1
  405c36:	3314      	adds	r3, #20
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
  405c38:	2a0a      	cmp	r2, #10
  405c3a:	d00e      	beq.n	405c5a <etharp_output+0xd2>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
  405c3c:	7c99      	ldrb	r1, [r3, #18]
  405c3e:	2901      	cmp	r1, #1
  405c40:	d9f8      	bls.n	405c34 <etharp_output+0xac>
  405c42:	6820      	ldr	r0, [r4, #0]
  405c44:	6859      	ldr	r1, [r3, #4]
  405c46:	4288      	cmp	r0, r1
  405c48:	d1f4      	bne.n	405c34 <etharp_output+0xac>
        ETHARP_SET_HINT(netif, i);
  405c4a:	b2d2      	uxtb	r2, r2
  405c4c:	4b11      	ldr	r3, [pc, #68]	; (405c94 <etharp_output+0x10c>)
  405c4e:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
  405c50:	4631      	mov	r1, r6
  405c52:	4628      	mov	r0, r5
  405c54:	4b11      	ldr	r3, [pc, #68]	; (405c9c <etharp_output+0x114>)
  405c56:	4798      	blx	r3
  405c58:	e00c      	b.n	405c74 <etharp_output+0xec>
    return etharp_query(netif, dst_addr, q);
  405c5a:	4632      	mov	r2, r6
  405c5c:	4621      	mov	r1, r4
  405c5e:	4628      	mov	r0, r5
  405c60:	4b0f      	ldr	r3, [pc, #60]	; (405ca0 <etharp_output+0x118>)
  405c62:	4798      	blx	r3
  405c64:	e006      	b.n	405c74 <etharp_output+0xec>
    dest = (struct eth_addr *)&ethbroadcast;
  405c66:	4b0f      	ldr	r3, [pc, #60]	; (405ca4 <etharp_output+0x11c>)
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
  405c68:	f105 0227 	add.w	r2, r5, #39	; 0x27
  405c6c:	4631      	mov	r1, r6
  405c6e:	4628      	mov	r0, r5
  405c70:	4c0d      	ldr	r4, [pc, #52]	; (405ca8 <etharp_output+0x120>)
  405c72:	47a0      	blx	r4
}
  405c74:	b002      	add	sp, #8
  405c76:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_BUF;
  405c78:	f06f 0001 	mvn.w	r0, #1
  405c7c:	e7fa      	b.n	405c74 <etharp_output+0xec>
          return ERR_RTE;
  405c7e:	f06f 0003 	mvn.w	r0, #3
  405c82:	e7f7      	b.n	405c74 <etharp_output+0xec>
  405c84:	f06f 0003 	mvn.w	r0, #3
  405c88:	e7f4      	b.n	405c74 <etharp_output+0xec>
  405c8a:	bf00      	nop
  405c8c:	004025bf 	.word	0x004025bf
  405c90:	004018a5 	.word	0x004018a5
  405c94:	204026b4 	.word	0x204026b4
  405c98:	204025ec 	.word	0x204025ec
  405c9c:	004059b1 	.word	0x004059b1
  405ca0:	00405a21 	.word	0x00405a21
  405ca4:	0040e918 	.word	0x0040e918
  405ca8:	00405899 	.word	0x00405899

00405cac <ethernet_input>:
 * @param p the recevied packet, p->payload pointing to the ethernet header
 * @param netif the network interface on which the packet was received
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
  405cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405cb0:	b083      	sub	sp, #12
  405cb2:	4604      	mov	r4, r0
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
  405cb4:	8947      	ldrh	r7, [r0, #10]
  405cb6:	2f0e      	cmp	r7, #14
  405cb8:	d919      	bls.n	405cee <ethernet_input+0x42>
  405cba:	460e      	mov	r6, r1
    ETHARP_STATS_INC(etharp.drop);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
  405cbc:	6845      	ldr	r5, [r0, #4]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0], (unsigned)ethhdr->src.addr[1], (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3], (unsigned)ethhdr->src.addr[4], (unsigned)ethhdr->src.addr[5],
     (unsigned)htons(ethhdr->type)));

  type = ethhdr->type;
  405cbe:	f8b5 800c 	ldrh.w	r8, [r5, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
  405cc2:	782b      	ldrb	r3, [r5, #0]
  405cc4:	f013 0f01 	tst.w	r3, #1
  405cc8:	d00b      	beq.n	405ce2 <ethernet_input+0x36>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_MULTICAST_ADDR_0) {
  405cca:	2b01      	cmp	r3, #1
  405ccc:	d016      	beq.n	405cfc <ethernet_input+0x50>
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
          (ethhdr->dest.addr[2] == LL_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
      }
    } else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
  405cce:	2206      	movs	r2, #6
  405cd0:	496d      	ldr	r1, [pc, #436]	; (405e88 <ethernet_input+0x1dc>)
  405cd2:	4628      	mov	r0, r5
  405cd4:	4b6d      	ldr	r3, [pc, #436]	; (405e8c <ethernet_input+0x1e0>)
  405cd6:	4798      	blx	r3
  405cd8:	b918      	cbnz	r0, 405ce2 <ethernet_input+0x36>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
  405cda:	7b63      	ldrb	r3, [r4, #13]
  405cdc:	f043 0308 	orr.w	r3, r3, #8
  405ce0:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
  405ce2:	f1b8 0f08 	cmp.w	r8, #8
  405ce6:	d014      	beq.n	405d12 <ethernet_input+0x66>
  405ce8:	f5b8 6fc1 	cmp.w	r8, #1544	; 0x608
  405cec:	d022      	beq.n	405d34 <ethernet_input+0x88>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
  405cee:	4620      	mov	r0, r4
  405cf0:	4b67      	ldr	r3, [pc, #412]	; (405e90 <ethernet_input+0x1e4>)
  405cf2:	4798      	blx	r3
  return ERR_OK;
}
  405cf4:	2000      	movs	r0, #0
  405cf6:	b003      	add	sp, #12
  405cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
  405cfc:	786b      	ldrb	r3, [r5, #1]
  405cfe:	2b00      	cmp	r3, #0
  405d00:	d1ef      	bne.n	405ce2 <ethernet_input+0x36>
  405d02:	78ab      	ldrb	r3, [r5, #2]
  405d04:	2b5e      	cmp	r3, #94	; 0x5e
  405d06:	d1ec      	bne.n	405ce2 <ethernet_input+0x36>
        p->flags |= PBUF_FLAG_LLMCAST;
  405d08:	7b43      	ldrb	r3, [r0, #13]
  405d0a:	f043 0310 	orr.w	r3, r3, #16
  405d0e:	7343      	strb	r3, [r0, #13]
  405d10:	e7e7      	b.n	405ce2 <ethernet_input+0x36>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  405d12:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
  405d16:	f013 0f20 	tst.w	r3, #32
  405d1a:	d0e8      	beq.n	405cee <ethernet_input+0x42>
      if(pbuf_header(p, -ip_hdr_offset)) {
  405d1c:	f06f 010d 	mvn.w	r1, #13
  405d20:	4620      	mov	r0, r4
  405d22:	4b5c      	ldr	r3, [pc, #368]	; (405e94 <ethernet_input+0x1e8>)
  405d24:	4798      	blx	r3
  405d26:	2800      	cmp	r0, #0
  405d28:	d1e1      	bne.n	405cee <ethernet_input+0x42>
        ip_input(p, netif);
  405d2a:	4631      	mov	r1, r6
  405d2c:	4620      	mov	r0, r4
  405d2e:	4b5a      	ldr	r3, [pc, #360]	; (405e98 <ethernet_input+0x1ec>)
  405d30:	4798      	blx	r3
      break;
  405d32:	e7df      	b.n	405cf4 <ethernet_input+0x48>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  405d34:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
  405d38:	f013 0f20 	tst.w	r3, #32
  405d3c:	d0d7      	beq.n	405cee <ethernet_input+0x42>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  405d3e:	b17e      	cbz	r6, 405d60 <ethernet_input+0xb4>
  if (p->len < SIZEOF_ETHARP_PACKET) {
  405d40:	2f29      	cmp	r7, #41	; 0x29
  405d42:	d90e      	bls.n	405d62 <ethernet_input+0xb6>
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
  405d44:	89eb      	ldrh	r3, [r5, #14]
  405d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  405d4a:	d105      	bne.n	405d58 <ethernet_input+0xac>
  405d4c:	7cab      	ldrb	r3, [r5, #18]
  405d4e:	2b06      	cmp	r3, #6
  405d50:	d102      	bne.n	405d58 <ethernet_input+0xac>
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
  405d52:	7ceb      	ldrb	r3, [r5, #19]
  405d54:	2b04      	cmp	r3, #4
  405d56:	d008      	beq.n	405d6a <ethernet_input+0xbe>
    pbuf_free(p);
  405d58:	4620      	mov	r0, r4
  405d5a:	4b4d      	ldr	r3, [pc, #308]	; (405e90 <ethernet_input+0x1e4>)
  405d5c:	4798      	blx	r3
  405d5e:	e7c9      	b.n	405cf4 <ethernet_input+0x48>
  405d60:	e7fe      	b.n	405d60 <ethernet_input+0xb4>
    pbuf_free(p);
  405d62:	4620      	mov	r0, r4
  405d64:	4b4a      	ldr	r3, [pc, #296]	; (405e90 <ethernet_input+0x1e4>)
  405d66:	4798      	blx	r3
  405d68:	e7c4      	b.n	405cf4 <ethernet_input+0x48>
      (hdr->protolen != sizeof(ip_addr_t)) ||
  405d6a:	8a2b      	ldrh	r3, [r5, #16]
  405d6c:	2b08      	cmp	r3, #8
  405d6e:	d1f3      	bne.n	405d58 <ethernet_input+0xac>
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
  405d70:	69e8      	ldr	r0, [r5, #28]
  405d72:	9001      	str	r0, [sp, #4]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
  405d74:	f8d5 2026 	ldr.w	r2, [r5, #38]	; 0x26
  if (ip_addr_isany(&netif->ip_addr)) {
  405d78:	f116 0f04 	cmn.w	r6, #4
  405d7c:	d07d      	beq.n	405e7a <ethernet_input+0x1ce>
  405d7e:	6873      	ldr	r3, [r6, #4]
  405d80:	2b00      	cmp	r3, #0
  405d82:	d07a      	beq.n	405e7a <ethernet_input+0x1ce>
    for_us = (u8_t)ip_addr_cmp(&dipaddr, &(netif->ip_addr));
  405d84:	429a      	cmp	r2, r3
  405d86:	bf0c      	ite	eq
  405d88:	f04f 0901 	moveq.w	r9, #1
  405d8c:	f04f 0900 	movne.w	r9, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
  405d90:	f105 0716 	add.w	r7, r5, #22
  405d94:	d06d      	beq.n	405e72 <ethernet_input+0x1c6>
  405d96:	f04f 0a02 	mov.w	sl, #2
      etharp_arp_input(netif, (struct eth_addr*)(netif->hwaddr), p);
  405d9a:	f106 0827 	add.w	r8, r6, #39	; 0x27
  if (ip_addr_isany(ipaddr) ||
  405d9e:	2800      	cmp	r0, #0
  405da0:	d03a      	beq.n	405e18 <ethernet_input+0x16c>
      ip_addr_isbroadcast(ipaddr, netif) ||
  405da2:	4631      	mov	r1, r6
  405da4:	4b3d      	ldr	r3, [pc, #244]	; (405e9c <ethernet_input+0x1f0>)
  405da6:	4798      	blx	r3
  if (ip_addr_isany(ipaddr) ||
  405da8:	bbb0      	cbnz	r0, 405e18 <ethernet_input+0x16c>
      ip_addr_ismulticast(ipaddr)) {
  405daa:	9b01      	ldr	r3, [sp, #4]
  405dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip_addr_isbroadcast(ipaddr, netif) ||
  405db0:	2be0      	cmp	r3, #224	; 0xe0
  405db2:	d031      	beq.n	405e18 <ethernet_input+0x16c>
  i = etharp_find_entry(ipaddr, flags);
  405db4:	4651      	mov	r1, sl
  405db6:	a801      	add	r0, sp, #4
  405db8:	4b39      	ldr	r3, [pc, #228]	; (405ea0 <ethernet_input+0x1f4>)
  405dba:	4798      	blx	r3
  if (i < 0) {
  405dbc:	1e03      	subs	r3, r0, #0
  405dbe:	db2b      	blt.n	405e18 <ethernet_input+0x16c>
    arp_table[i].state = ETHARP_STATE_STABLE;
  405dc0:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 405ea8 <ethernet_input+0x1fc>
  405dc4:	009a      	lsls	r2, r3, #2
  405dc6:	18d1      	adds	r1, r2, r3
  405dc8:	0089      	lsls	r1, r1, #2
  405dca:	eb0e 0c01 	add.w	ip, lr, r1
  405dce:	2002      	movs	r0, #2
  405dd0:	f88c 0012 	strb.w	r0, [ip, #18]
  arp_table[i].netif = netif;
  405dd4:	f8cc 6008 	str.w	r6, [ip, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
  405dd8:	460a      	mov	r2, r1
  405dda:	320c      	adds	r2, #12
  405ddc:	eb0e 0a02 	add.w	sl, lr, r2
  405de0:	6838      	ldr	r0, [r7, #0]
  405de2:	f84e 0002 	str.w	r0, [lr, r2]
  405de6:	88ba      	ldrh	r2, [r7, #4]
  405de8:	f8aa 2004 	strh.w	r2, [sl, #4]
  arp_table[i].ctime = 0;
  405dec:	2200      	movs	r2, #0
  405dee:	f88c 2013 	strb.w	r2, [ip, #19]
  if (arp_table[i].q != NULL) {
  405df2:	f85e a001 	ldr.w	sl, [lr, r1]
  405df6:	f1ba 0f00 	cmp.w	sl, #0
  405dfa:	d00d      	beq.n	405e18 <ethernet_input+0x16c>
    arp_table[i].q = NULL;
  405dfc:	460b      	mov	r3, r1
  405dfe:	4611      	mov	r1, r2
  405e00:	f84e 1003 	str.w	r1, [lr, r3]
    etharp_send_ip(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr);
  405e04:	463b      	mov	r3, r7
  405e06:	4642      	mov	r2, r8
  405e08:	4651      	mov	r1, sl
  405e0a:	4630      	mov	r0, r6
  405e0c:	f8df b09c 	ldr.w	fp, [pc, #156]	; 405eac <ethernet_input+0x200>
  405e10:	47d8      	blx	fp
    pbuf_free(p);
  405e12:	4650      	mov	r0, sl
  405e14:	4b1e      	ldr	r3, [pc, #120]	; (405e90 <ethernet_input+0x1e4>)
  405e16:	4798      	blx	r3
  switch (hdr->opcode) {
  405e18:	8aab      	ldrh	r3, [r5, #20]
  405e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  405e1e:	d124      	bne.n	405e6a <ethernet_input+0x1be>
    if (for_us) {
  405e20:	f1b9 0f00 	cmp.w	r9, #0
  405e24:	d021      	beq.n	405e6a <ethernet_input+0x1be>
      hdr->opcode = htons(ARP_REPLY);
  405e26:	2002      	movs	r0, #2
  405e28:	4b1e      	ldr	r3, [pc, #120]	; (405ea4 <ethernet_input+0x1f8>)
  405e2a:	4798      	blx	r3
  405e2c:	82a8      	strh	r0, [r5, #20]
      IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
  405e2e:	69eb      	ldr	r3, [r5, #28]
  405e30:	f8c5 3026 	str.w	r3, [r5, #38]	; 0x26
      IPADDR2_COPY(&hdr->sipaddr, &netif->ip_addr);
  405e34:	6873      	ldr	r3, [r6, #4]
  405e36:	61eb      	str	r3, [r5, #28]
      ETHADDR16_COPY(&hdr->dhwaddr, &hdr->shwaddr);
  405e38:	683b      	ldr	r3, [r7, #0]
  405e3a:	622b      	str	r3, [r5, #32]
  405e3c:	88bb      	ldrh	r3, [r7, #4]
  405e3e:	84ab      	strh	r3, [r5, #36]	; 0x24
      ETHADDR16_COPY(&ethhdr->dest, &hdr->shwaddr);
  405e40:	683b      	ldr	r3, [r7, #0]
  405e42:	602b      	str	r3, [r5, #0]
  405e44:	88bb      	ldrh	r3, [r7, #4]
  405e46:	80ab      	strh	r3, [r5, #4]
      ETHADDR16_COPY(&hdr->shwaddr, ethaddr);
  405e48:	f8d8 3000 	ldr.w	r3, [r8]
  405e4c:	603b      	str	r3, [r7, #0]
  405e4e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
  405e52:	80bb      	strh	r3, [r7, #4]
      ETHADDR16_COPY(&ethhdr->src, ethaddr);
  405e54:	f8d8 3000 	ldr.w	r3, [r8]
  405e58:	f8c5 3006 	str.w	r3, [r5, #6]
  405e5c:	f8b8 3004 	ldrh.w	r3, [r8, #4]
  405e60:	816b      	strh	r3, [r5, #10]
      netif->linkoutput(netif, p);
  405e62:	69b3      	ldr	r3, [r6, #24]
  405e64:	4621      	mov	r1, r4
  405e66:	4630      	mov	r0, r6
  405e68:	4798      	blx	r3
  pbuf_free(p);
  405e6a:	4620      	mov	r0, r4
  405e6c:	4b08      	ldr	r3, [pc, #32]	; (405e90 <ethernet_input+0x1e4>)
  405e6e:	4798      	blx	r3
  405e70:	e740      	b.n	405cf4 <ethernet_input+0x48>
    for_us = (u8_t)ip_addr_cmp(&dipaddr, &(netif->ip_addr));
  405e72:	f04f 0901 	mov.w	r9, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
  405e76:	46ca      	mov	sl, r9
  405e78:	e78f      	b.n	405d9a <ethernet_input+0xee>
  405e7a:	f105 0716 	add.w	r7, r5, #22
  405e7e:	f04f 0900 	mov.w	r9, #0
  405e82:	f04f 0a02 	mov.w	sl, #2
  405e86:	e788      	b.n	405d9a <ethernet_input+0xee>
  405e88:	0040e918 	.word	0x0040e918
  405e8c:	00407b91 	.word	0x00407b91
  405e90:	0040262d 	.word	0x0040262d
  405e94:	004025bf 	.word	0x004025bf
  405e98:	004015ad 	.word	0x004015ad
  405e9c:	004018a5 	.word	0x004018a5
  405ea0:	004057a1 	.word	0x004057a1
  405ea4:	00401195 	.word	0x00401195
  405ea8:	204025ec 	.word	0x204025ec
  405eac:	00405899 	.word	0x00405899

00405eb0 <gmac_rx_populate_queue>:
 * (since the lsb are used as status bits by GMAC).
 *
 * \param p_gmac_dev Pointer to driver data structure.
 */
static void gmac_rx_populate_queue(struct gmac_device *p_gmac_dev)
{
  405eb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405eb4:	4607      	mov	r7, r0
  405eb6:	f100 0430 	add.w	r4, r0, #48	; 0x30
  405eba:	4606      	mov	r6, r0
	uint32_t ul_index = 0;
	struct pbuf *p = 0;

	/* Set up the RX descriptors. */
	for (ul_index = 0; ul_index < GMAC_RX_BUFFERS; ul_index++) {
  405ebc:	2500      	movs	r5, #0
		if (p_gmac_dev->rx_pbuf[ul_index] == 0) {

			/* Allocate a new pbuf with the maximum size. */
			p = pbuf_alloc(PBUF_RAW, (u16_t) GMAC_FRAME_LENTGH_MAX, PBUF_POOL);
  405ebe:	f04f 0b03 	mov.w	fp, #3
  405ec2:	f44f 6ac0 	mov.w	sl, #1536	; 0x600
  405ec6:	f8df 9044 	ldr.w	r9, [pc, #68]	; 405f0c <gmac_rx_populate_queue+0x5c>
  405eca:	46a0      	mov	r8, r4
		if (p_gmac_dev->rx_pbuf[ul_index] == 0) {
  405ecc:	6823      	ldr	r3, [r4, #0]
  405ece:	b133      	cbz	r3, 405ede <gmac_rx_populate_queue+0x2e>
	for (ul_index = 0; ul_index < GMAC_RX_BUFFERS; ul_index++) {
  405ed0:	3501      	adds	r5, #1
  405ed2:	3404      	adds	r4, #4
  405ed4:	3608      	adds	r6, #8
  405ed6:	2d03      	cmp	r5, #3
  405ed8:	d1f7      	bne.n	405eca <gmac_rx_populate_queue+0x1a>
  405eda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			p = pbuf_alloc(PBUF_RAW, (u16_t) GMAC_FRAME_LENTGH_MAX, PBUF_POOL);
  405ede:	465a      	mov	r2, fp
  405ee0:	4651      	mov	r1, sl
  405ee2:	4658      	mov	r0, fp
  405ee4:	47c8      	blx	r9
			if (p == NULL) {
  405ee6:	4603      	mov	r3, r0
  405ee8:	2800      	cmp	r0, #0
  405eea:	d0f6      	beq.n	405eda <gmac_rx_populate_queue+0x2a>

			/* Make sure that the payload buffer is properly aligned. */
			LWIP_ASSERT("gmac_rx_populate_queue: unaligned p->payload buffer address",
					(((uint32_t)p->payload & 0xFFFFFFFC) == (uint32_t)p->payload));

			if (ul_index == GMAC_RX_BUFFERS - 1)
  405eec:	2d02      	cmp	r5, #2
  405eee:	d007      	beq.n	405f00 <gmac_rx_populate_queue+0x50>
				p_gmac_dev->rx_desc[ul_index].addr.val = (u32_t) p->payload | GMAC_RXD_WRAP;
			else
				p_gmac_dev->rx_desc[ul_index].addr.val = (u32_t) p->payload;
  405ef0:	6842      	ldr	r2, [r0, #4]
  405ef2:	f847 2035 	str.w	r2, [r7, r5, lsl #3]

			/* Reset status value. */
			p_gmac_dev->rx_desc[ul_index].status.val = 0;
  405ef6:	2200      	movs	r2, #0
  405ef8:	6072      	str	r2, [r6, #4]

			/* Save pbuf pointer to be sent to lwIP upper layer. */
			p_gmac_dev->rx_pbuf[ul_index] = p;
  405efa:	f8c8 3000 	str.w	r3, [r8]
  405efe:	e7e7      	b.n	405ed0 <gmac_rx_populate_queue+0x20>
				p_gmac_dev->rx_desc[ul_index].addr.val = (u32_t) p->payload | GMAC_RXD_WRAP;
  405f00:	6842      	ldr	r2, [r0, #4]
  405f02:	f042 0202 	orr.w	r2, r2, #2
  405f06:	613a      	str	r2, [r7, #16]
  405f08:	e7f5      	b.n	405ef6 <gmac_rx_populate_queue+0x46>
  405f0a:	bf00      	nop
  405f0c:	00402685 	.word	0x00402685

00405f10 <gmac_low_level_output>:
 *
 * \return ERR_OK if the packet could be sent.
 * an err_t value if the packet couldn't be sent.
 */
static err_t gmac_low_level_output(struct netif *netif, struct pbuf *p)
{
  405f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct gmac_device *ps_gmac_dev = netif->state;
  405f14:	6a07      	ldr	r7, [r0, #32]
	return p_gmac->GMAC_TSR;
  405f16:	4b1c      	ldr	r3, [pc, #112]	; (405f88 <gmac_low_level_output+0x78>)
  405f18:	695b      	ldr	r3, [r3, #20]
		gmac_clear_tx_status(GMAC, GMAC_TX_ERRORS);

		gmac_enable_transmit(GMAC, true);
	}

	buffer = (uint8_t*)ps_gmac_dev->tx_desc[ps_gmac_dev->us_tx_idx].addr;
  405f1a:	f241 230c 	movw	r3, #4620	; 0x120c
  405f1e:	58fb      	ldr	r3, [r7, r3]
  405f20:	3303      	adds	r3, #3
  405f22:	f857 5033 	ldr.w	r5, [r7, r3, lsl #3]

	/* Copy pbuf chain into TX buffer. */
	for (q = p; q != NULL; q = q->next) {
  405f26:	4688      	mov	r8, r1
  405f28:	b151      	cbz	r1, 405f40 <gmac_low_level_output+0x30>
  405f2a:	460c      	mov	r4, r1
		memcpy(buffer, q->payload, q->len);
  405f2c:	4e17      	ldr	r6, [pc, #92]	; (405f8c <gmac_low_level_output+0x7c>)
  405f2e:	8962      	ldrh	r2, [r4, #10]
  405f30:	6861      	ldr	r1, [r4, #4]
  405f32:	4628      	mov	r0, r5
  405f34:	47b0      	blx	r6
		buffer += q->len;
  405f36:	8963      	ldrh	r3, [r4, #10]
  405f38:	441d      	add	r5, r3
	for (q = p; q != NULL; q = q->next) {
  405f3a:	6824      	ldr	r4, [r4, #0]
  405f3c:	2c00      	cmp	r4, #0
  405f3e:	d1f6      	bne.n	405f2e <gmac_low_level_output+0x1e>
	}

	/* Set len and mark the buffer to be sent by GMAC. */
	ps_gmac_dev->tx_desc[ps_gmac_dev->us_tx_idx].status.bm.b_len = p->tot_len;
  405f40:	f241 210c 	movw	r1, #4620	; 0x120c
  405f44:	587a      	ldr	r2, [r7, r1]
  405f46:	1cd3      	adds	r3, r2, #3
  405f48:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
  405f4c:	8898      	ldrh	r0, [r3, #4]
  405f4e:	f8b8 4008 	ldrh.w	r4, [r8, #8]
  405f52:	f364 000d 	bfi	r0, r4, #0, #14
  405f56:	8098      	strh	r0, [r3, #4]
	ps_gmac_dev->tx_desc[ps_gmac_dev->us_tx_idx].status.bm.b_used = 0;
  405f58:	79d8      	ldrb	r0, [r3, #7]
  405f5a:	f36f 10c7 	bfc	r0, #7, #1
  405f5e:	71d8      	strb	r0, [r3, #7]

	LWIP_DEBUGF(NETIF_DEBUG,
			("gmac_low_level_output: DMA buffer sent, size=%d [idx=%u]\n",
			p->tot_len, ps_gmac_dev->us_tx_idx));

	ps_gmac_dev->us_tx_idx = (ps_gmac_dev->us_tx_idx + 1) % GMAC_TX_BUFFERS;
  405f60:	3201      	adds	r2, #1
  405f62:	4b0b      	ldr	r3, [pc, #44]	; (405f90 <gmac_low_level_output+0x80>)
  405f64:	fba3 0302 	umull	r0, r3, r3, r2
  405f68:	085b      	lsrs	r3, r3, #1
  405f6a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  405f6e:	1ad3      	subs	r3, r2, r3
  405f70:	507b      	str	r3, [r7, r1]
  __ASM volatile ("dsb");
  405f72:	f3bf 8f4f 	dsb	sy
	p_gmac->GMAC_NCR |= GMAC_NCR_TSTART;
  405f76:	4a04      	ldr	r2, [pc, #16]	; (405f88 <gmac_low_level_output+0x78>)
  405f78:	6813      	ldr	r3, [r2, #0]
  405f7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  405f7e:	6013      	str	r3, [r2, #0]
	lwip_tx_count += p->tot_len;
#endif
	LINK_STATS_INC(link.xmit);

	return ERR_OK;
}
  405f80:	2000      	movs	r0, #0
  405f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405f86:	bf00      	nop
  405f88:	40050000 	.word	0x40050000
  405f8c:	00407bf1 	.word	0x00407bf1
  405f90:	aaaaaaab 	.word	0xaaaaaaab

00405f94 <GMAC_Handler>:
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  405f94:	2280      	movs	r2, #128	; 0x80
  405f96:	4b02      	ldr	r3, [pc, #8]	; (405fa0 <GMAC_Handler+0xc>)
  405f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  405f9c:	4770      	bx	lr
  405f9e:	bf00      	nop
  405fa0:	e000e100 	.word	0xe000e100

00405fa4 <ethernetif_input>:
 * input function is called.
 *
 * \param netif the lwIP network interface structure for this ethernetif.
 */
void ethernetif_input(struct netif *netif)
{
  405fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct gmac_device *ps_gmac_dev = netif->state;
  405fa8:	6a04      	ldr	r4, [r0, #32]
	gmac_rx_descriptor_t *p_rx = &ps_gmac_dev->rx_desc[ps_gmac_dev->us_rx_idx];
  405faa:	f241 2308 	movw	r3, #4616	; 0x1208
  405fae:	f854 8003 	ldr.w	r8, [r4, r3]
	return p_gmac->GMAC_RSR;
  405fb2:	4b24      	ldr	r3, [pc, #144]	; (406044 <ethernetif_input+0xa0>)
  405fb4:	6a1b      	ldr	r3, [r3, #32]
  405fb6:	eb04 02c8 	add.w	r2, r4, r8, lsl #3
	if ((p_rx->addr.val & GMAC_RXD_OWNERSHIP) == GMAC_RXD_OWNERSHIP) {
  405fba:	f854 3038 	ldr.w	r3, [r4, r8, lsl #3]
  405fbe:	f013 0f01 	tst.w	r3, #1
  405fc2:	d032      	beq.n	40602a <ethernetif_input+0x86>
  405fc4:	4606      	mov	r6, r0
		p = ps_gmac_dev->rx_pbuf[ps_gmac_dev->us_rx_idx];
  405fc6:	f108 030c 	add.w	r3, r8, #12
  405fca:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
		length = p_rx->status.val & GMAC_RXD_LEN_MASK;
  405fce:	6853      	ldr	r3, [r2, #4]
		p->len = length;
  405fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
  405fd4:	816b      	strh	r3, [r5, #10]
		ps_gmac_dev->rx_pbuf[ps_gmac_dev->us_rx_idx] = 0;
  405fd6:	f241 2708 	movw	r7, #4616	; 0x1208
  405fda:	59e2      	ldr	r2, [r4, r7]
  405fdc:	320c      	adds	r2, #12
  405fde:	2100      	movs	r1, #0
  405fe0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
		p->tot_len = length;
  405fe4:	812b      	strh	r3, [r5, #8]
		gmac_rx_populate_queue(ps_gmac_dev);
  405fe6:	4620      	mov	r0, r4
  405fe8:	4b17      	ldr	r3, [pc, #92]	; (406048 <ethernetif_input+0xa4>)
  405fea:	4798      	blx	r3
		p_rx->addr.val &= ~(GMAC_RXD_OWNERSHIP);
  405fec:	f854 3038 	ldr.w	r3, [r4, r8, lsl #3]
  405ff0:	f023 0301 	bic.w	r3, r3, #1
  405ff4:	f844 3038 	str.w	r3, [r4, r8, lsl #3]
		ps_gmac_dev->us_rx_idx = (ps_gmac_dev->us_rx_idx + 1) % GMAC_RX_BUFFERS;
  405ff8:	59e2      	ldr	r2, [r4, r7]
  405ffa:	3201      	adds	r2, #1
  405ffc:	4b13      	ldr	r3, [pc, #76]	; (40604c <ethernetif_input+0xa8>)
  405ffe:	fba3 1302 	umull	r1, r3, r3, r2
  406002:	085b      	lsrs	r3, r3, #1
  406004:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  406008:	1ad3      	subs	r3, r2, r3
  40600a:	51e3      	str	r3, [r4, r7]
	struct eth_hdr *ethhdr;
	struct pbuf *p;

	/* Move received packet into a new pbuf. */
	p = gmac_low_level_input(netif);
	if (p == NULL)
  40600c:	b16d      	cbz	r5, 40602a <ethernetif_input+0x86>
		return;

	/* Points to packet payload, which starts with an Ethernet header. */
	ethhdr = p->payload;

	switch (htons(ethhdr->type)) {
  40600e:	686b      	ldr	r3, [r5, #4]
  406010:	8998      	ldrh	r0, [r3, #12]
  406012:	4b0f      	ldr	r3, [pc, #60]	; (406050 <ethernetif_input+0xac>)
  406014:	4798      	blx	r3
  406016:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
  40601a:	d008      	beq.n	40602e <ethernetif_input+0x8a>
  40601c:	f640 0306 	movw	r3, #2054	; 0x806
  406020:	4298      	cmp	r0, r3
  406022:	d004      	beq.n	40602e <ethernetif_input+0x8a>
			}
			break;

		default:
			/* Free buffer. */
			pbuf_free(p);
  406024:	4628      	mov	r0, r5
  406026:	4b0b      	ldr	r3, [pc, #44]	; (406054 <ethernetif_input+0xb0>)
  406028:	4798      	blx	r3
  40602a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (netif->input(p, netif) != ERR_OK) {
  40602e:	6933      	ldr	r3, [r6, #16]
  406030:	4631      	mov	r1, r6
  406032:	4628      	mov	r0, r5
  406034:	4798      	blx	r3
  406036:	2800      	cmp	r0, #0
  406038:	d0f7      	beq.n	40602a <ethernetif_input+0x86>
				pbuf_free(p);
  40603a:	4628      	mov	r0, r5
  40603c:	4b05      	ldr	r3, [pc, #20]	; (406054 <ethernetif_input+0xb0>)
  40603e:	4798      	blx	r3
  406040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406044:	40050000 	.word	0x40050000
  406048:	00405eb1 	.word	0x00405eb1
  40604c:	aaaaaaab 	.word	0xaaaaaaab
  406050:	00401195 	.word	0x00401195
  406054:	0040262d 	.word	0x0040262d

00406058 <ethernetif_init>:
 * \return ERR_OK if the loopif is initialized.
 * ERR_MEM if private data couldn't be allocated.
 * any other err_t on error.
 */
err_t ethernetif_init(struct netif *netif)
{
  406058:	b5f0      	push	{r4, r5, r6, r7, lr}
  40605a:	b083      	sub	sp, #12
  40605c:	4606      	mov	r6, r0
	LWIP_ASSERT("netif != NULL", (netif != NULL));

	gs_gmac_dev.netif = netif;
  40605e:	4b7a      	ldr	r3, [pc, #488]	; (406248 <ethernetif_init+0x1f0>)
  406060:	f241 2210 	movw	r2, #4624	; 0x1210
  406064:	5098      	str	r0, [r3, r2]
	 */
#if LWIP_SNMP
	NETIF_INIT_SNMP(netif, snmp_ifType_ethernet_csmacd, NET_LINK_SPEED);
#endif /* LWIP_SNMP */

	netif->state = &gs_gmac_dev;
  406066:	6203      	str	r3, [r0, #32]
	netif->name[0] = IFNAME0;
  406068:	2365      	movs	r3, #101	; 0x65
  40606a:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
	netif->name[1] = IFNAME1;
  40606e:	236e      	movs	r3, #110	; 0x6e
  406070:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f

	/* We directly use etharp_output() here to save a function call.
	 * You can instead declare your own function an call etharp_output()
	 * from it if you have to do some checks before sending (e.g. if link
	 * is available...) */
	netif->output = etharp_output;
  406074:	4b75      	ldr	r3, [pc, #468]	; (40624c <ethernetif_init+0x1f4>)
  406076:	6143      	str	r3, [r0, #20]
	netif->linkoutput = gmac_low_level_output;
  406078:	4b75      	ldr	r3, [pc, #468]	; (406250 <ethernetif_init+0x1f8>)
  40607a:	6183      	str	r3, [r0, #24]
	netif->hwaddr_len = sizeof(gs_uc_mac_address);
  40607c:	2306      	movs	r3, #6
  40607e:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
	netif->hwaddr[0] = gs_uc_mac_address[0];
  406082:	2300      	movs	r3, #0
  406084:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
	netif->hwaddr[1] = gs_uc_mac_address[1];
  406088:	2304      	movs	r3, #4
  40608a:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	netif->hwaddr[2] = gs_uc_mac_address[2];
  40608e:	2325      	movs	r3, #37	; 0x25
  406090:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
	netif->hwaddr[3] = gs_uc_mac_address[3];
  406094:	231c      	movs	r3, #28
  406096:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
	netif->hwaddr[4] = gs_uc_mac_address[4];
  40609a:	23a0      	movs	r3, #160	; 0xa0
  40609c:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
	netif->hwaddr[5] = gs_uc_mac_address[5];
  4060a0:	2302      	movs	r3, #2
  4060a2:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
	netif->mtu = NET_MTU;
  4060a6:	f240 53dc 	movw	r3, #1500	; 0x5dc
  4060aa:	8483      	strh	r3, [r0, #36]	; 0x24
	netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP
  4060ac:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
  4060b0:	f043 0322 	orr.w	r3, r3, #34	; 0x22
  4060b4:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	ul_delay = sysclk_get_cpu_hz() / 1000 / 3 * 400;
  4060b8:	4b66      	ldr	r3, [pc, #408]	; (406254 <ethernetif_init+0x1fc>)
  4060ba:	9301      	str	r3, [sp, #4]
	while (ul_delay--) {
  4060bc:	9b01      	ldr	r3, [sp, #4]
  4060be:	1e5a      	subs	r2, r3, #1
  4060c0:	9201      	str	r2, [sp, #4]
  4060c2:	2b00      	cmp	r3, #0
  4060c4:	d1fa      	bne.n	4060bc <ethernetif_init+0x64>
	pmc_enable_periph_clk(ID_GMAC);
  4060c6:	2027      	movs	r0, #39	; 0x27
  4060c8:	4b63      	ldr	r3, [pc, #396]	; (406258 <ethernetif_init+0x200>)
  4060ca:	4798      	blx	r3
	p_gmac->GMAC_NCR = ul_ncr;
  4060cc:	4c63      	ldr	r4, [pc, #396]	; (40625c <ethernetif_init+0x204>)
  4060ce:	2700      	movs	r7, #0
  4060d0:	6027      	str	r7, [r4, #0]
	p_gmac->GMAC_IDR = ul_source;
  4060d2:	f04f 32ff 	mov.w	r2, #4294967295
  4060d6:	62e2      	str	r2, [r4, #44]	; 0x2c
	p_gmac->GMAC_NCR |= GMAC_NCR_CLRSTAT;
  4060d8:	6823      	ldr	r3, [r4, #0]
  4060da:	f043 0320 	orr.w	r3, r3, #32
  4060de:	6023      	str	r3, [r4, #0]
	p_gmac->GMAC_RSR = ul_status;
  4060e0:	230f      	movs	r3, #15
  4060e2:	6223      	str	r3, [r4, #32]
	p_gmac->GMAC_TSR = ul_status;
  4060e4:	f240 133f 	movw	r3, #319	; 0x13f
  4060e8:	6163      	str	r3, [r4, #20]
	return p_gmac->GMAC_ISR;
  4060ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_CAF;
  4060ec:	6863      	ldr	r3, [r4, #4]
  4060ee:	f023 0310 	bic.w	r3, r3, #16
  4060f2:	6063      	str	r3, [r4, #4]
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_NBC;
  4060f4:	6863      	ldr	r3, [r4, #4]
  4060f6:	f023 0320 	bic.w	r3, r3, #32
  4060fa:	6063      	str	r3, [r4, #4]
	p_gmac->GMAC_DCFGR = (p_gmac->GMAC_DCFGR & ~GMAC_DCFGR_DRBS_Msk)
  4060fc:	6923      	ldr	r3, [r4, #16]
  4060fe:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
			| GMAC_DCFGR_DRBS(ul_code);
  406102:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
	p_gmac->GMAC_DCFGR = (p_gmac->GMAC_DCFGR & ~GMAC_DCFGR_DRBS_Msk)
  406106:	6123      	str	r3, [r4, #16]
 *
 * \return Interrupt status.
 */
static inline uint32_t gmac_get_priority_interrupt_status(Gmac* p_gmac, gmac_quelist_t queue_idx)
{
	return p_gmac->GMAC_ISRPQ[queue_idx - 1];
  406108:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
  40610c:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
  406110:	f8d4 3408 	ldr.w	r3, [r4, #1032]	; 0x408
  406114:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
  406118:	f8d4 3410 	ldr.w	r3, [r4, #1040]	; 0x410
	gs_tx_desc_null.addr = (uint32_t)0xFFFFFFFF;
  40611c:	4b50      	ldr	r3, [pc, #320]	; (406260 <ethernetif_init+0x208>)
  40611e:	601a      	str	r2, [r3, #0]
	gs_tx_desc_null.status.val = GMAC_TXD_WRAP | GMAC_TXD_USED;
  406120:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
  406124:	605a      	str	r2, [r3, #4]
 * \param p_gmac   Pointer to the GMAC instance.
 * \param queue_idx   Index of queue, start from 1
 */
static inline void gmac_set_tx_priority_queue(Gmac* p_gmac, uint32_t ul_addr, gmac_quelist_t queue_idx)
{
    p_gmac->GMAC_TBQBAPQ[queue_idx - 1] = GMAC_TBQB_ADDR_Msk & ul_addr;
  406126:	f023 0303 	bic.w	r3, r3, #3
  40612a:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  40612e:	f8c4 3444 	str.w	r3, [r4, #1092]	; 0x444
  406132:	f8c4 3448 	str.w	r3, [r4, #1096]	; 0x448
  406136:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
  40613a:	f8c4 3450 	str.w	r3, [r4, #1104]	; 0x450
	gs_rx_desc_null.addr.val |= GMAC_RXD_WRAP;
  40613e:	4b49      	ldr	r3, [pc, #292]	; (406264 <ethernetif_init+0x20c>)
  406140:	f06f 0201 	mvn.w	r2, #1
  406144:	601a      	str	r2, [r3, #0]
	gs_rx_desc_null.status.val = 0;
  406146:	605f      	str	r7, [r3, #4]
 * \param p_gmac   Pointer to the GMAC instance.
 * \param queue_idx   Index of queue, start from 1
 */
static inline void gmac_set_rx_priority_queue(Gmac* p_gmac, uint32_t ul_addr, gmac_quelist_t queue_idx)
{
    p_gmac->GMAC_RBQBAPQ[queue_idx - 1] = GMAC_RBQB_ADDR_Msk & ul_addr;
  406148:	f023 0303 	bic.w	r3, r3, #3
  40614c:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
  406150:	f8c4 3484 	str.w	r3, [r4, #1156]	; 0x484
  406154:	f8c4 3488 	str.w	r3, [r4, #1160]	; 0x488
  406158:	f8c4 348c 	str.w	r3, [r4, #1164]	; 0x48c
  40615c:	f8c4 3490 	str.w	r3, [r4, #1168]	; 0x490
	ps_gmac_dev->us_rx_idx = 0;
  406160:	4d39      	ldr	r5, [pc, #228]	; (406248 <ethernetif_init+0x1f0>)
  406162:	f241 2308 	movw	r3, #4616	; 0x1208
  406166:	50ef      	str	r7, [r5, r3]
		ps_gmac_dev->rx_pbuf[ul_index] = 0;
  406168:	632f      	str	r7, [r5, #48]	; 0x30
		ps_gmac_dev->rx_desc[ul_index].addr.val = 0;
  40616a:	602f      	str	r7, [r5, #0]
		ps_gmac_dev->rx_desc[ul_index].status.val = 0;
  40616c:	606f      	str	r7, [r5, #4]
		ps_gmac_dev->rx_pbuf[ul_index] = 0;
  40616e:	636f      	str	r7, [r5, #52]	; 0x34
		ps_gmac_dev->rx_desc[ul_index].addr.val = 0;
  406170:	60af      	str	r7, [r5, #8]
		ps_gmac_dev->rx_desc[ul_index].status.val = 0;
  406172:	60ef      	str	r7, [r5, #12]
		ps_gmac_dev->rx_pbuf[ul_index] = 0;
  406174:	63af      	str	r7, [r5, #56]	; 0x38
		ps_gmac_dev->rx_desc[ul_index].status.val = 0;
  406176:	616f      	str	r7, [r5, #20]
	ps_gmac_dev->rx_desc[ul_index - 1].addr.val |= GMAC_RXD_WRAP;
  406178:	2302      	movs	r3, #2
  40617a:	612b      	str	r3, [r5, #16]
	gmac_rx_populate_queue(ps_gmac_dev);
  40617c:	4628      	mov	r0, r5
  40617e:	4b3a      	ldr	r3, [pc, #232]	; (406268 <ethernetif_init+0x210>)
  406180:	4798      	blx	r3
	p_gmac->GMAC_RBQB = GMAC_RBQB_ADDR_Msk & ul_addr;
  406182:	f025 0303 	bic.w	r3, r5, #3
  406186:	61a3      	str	r3, [r4, #24]
	ps_gmac_dev->us_tx_idx = 0;
  406188:	f241 230c 	movw	r3, #4620	; 0x120c
  40618c:	50ef      	str	r7, [r5, r3]
		ps_gmac_dev->tx_desc[ul_index].addr = (uint32_t)&ps_gmac_dev->tx_buf[ul_index][0];
  40618e:	f105 033c 	add.w	r3, r5, #60	; 0x3c
  406192:	61ab      	str	r3, [r5, #24]
		ps_gmac_dev->tx_desc[ul_index].status.val = GMAC_TXD_USED | GMAC_TXD_LAST;
  406194:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
  406198:	61eb      	str	r3, [r5, #28]
		ps_gmac_dev->tx_desc[ul_index].addr = (uint32_t)&ps_gmac_dev->tx_buf[ul_index][0];
  40619a:	f205 622a 	addw	r2, r5, #1578	; 0x62a
  40619e:	622a      	str	r2, [r5, #32]
		ps_gmac_dev->tx_desc[ul_index].status.val = GMAC_TXD_USED | GMAC_TXD_LAST;
  4061a0:	626b      	str	r3, [r5, #36]	; 0x24
		ps_gmac_dev->tx_desc[ul_index].addr = (uint32_t)&ps_gmac_dev->tx_buf[ul_index][0];
  4061a2:	f605 4318 	addw	r3, r5, #3096	; 0xc18
  4061a6:	62ab      	str	r3, [r5, #40]	; 0x28
	ps_gmac_dev->tx_desc[ul_index - 1].status.val |= GMAC_TXD_WRAP;
  4061a8:	4b30      	ldr	r3, [pc, #192]	; (40626c <ethernetif_init+0x214>)
  4061aa:	62eb      	str	r3, [r5, #44]	; 0x2c
	gmac_set_tx_queue(GMAC, (uint32_t) &ps_gmac_dev->tx_desc[0]);
  4061ac:	3518      	adds	r5, #24
	p_gmac->GMAC_TBQB = GMAC_TBQB_ADDR_Msk & ul_addr;
  4061ae:	f025 0503 	bic.w	r5, r5, #3
  4061b2:	61e5      	str	r5, [r4, #28]
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
  4061b4:	6823      	ldr	r3, [r4, #0]
  4061b6:	f043 0308 	orr.w	r3, r3, #8
  4061ba:	6023      	str	r3, [r4, #0]
		p_gmac->GMAC_NCR |= GMAC_NCR_RXEN;
  4061bc:	6823      	ldr	r3, [r4, #0]
  4061be:	f043 0304 	orr.w	r3, r3, #4
  4061c2:	6023      	str	r3, [r4, #0]
		p_gmac->GMAC_NCR |= GMAC_NCR_WESTAT;
  4061c4:	6823      	ldr	r3, [r4, #0]
  4061c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4061ca:	6023      	str	r3, [r4, #0]
	p_gmac->GMAC_IER = ul_source;
  4061cc:	62a7      	str	r7, [r4, #40]	; 0x28
	p_gmac->GMAC_SA[uc_index].GMAC_SAB = (p_mac_addr[3] << 24)
  4061ce:	f896 202a 	ldrb.w	r2, [r6, #42]	; 0x2a
			| (p_mac_addr[2] << 16)
  4061d2:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
  4061d6:	041b      	lsls	r3, r3, #16
  4061d8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
			| (p_mac_addr[0]);
  4061dc:	f896 2027 	ldrb.w	r2, [r6, #39]	; 0x27
  4061e0:	4313      	orrs	r3, r2
			| (p_mac_addr[1] << 8)
  4061e2:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
			| (p_mac_addr[0]);
  4061e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	p_gmac->GMAC_SA[uc_index].GMAC_SAB = (p_mac_addr[3] << 24)
  4061ea:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	p_gmac->GMAC_SA[uc_index].GMAC_SAT = (p_mac_addr[5] << 8)
  4061ee:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
			| (p_mac_addr[4]);
  4061f2:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
  4061f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	p_gmac->GMAC_SA[uc_index].GMAC_SAT = (p_mac_addr[5] << 8)
  4061fa:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4061fe:	4b1c      	ldr	r3, [pc, #112]	; (406270 <ethernetif_init+0x218>)
  406200:	f883 7327 	strb.w	r7, [r3, #807]	; 0x327
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  406204:	2280      	movs	r2, #128	; 0x80
  406206:	605a      	str	r2, [r3, #4]
	if (ethernet_phy_init(GMAC, BOARD_GMAC_PHY_ADDR, sysclk_get_cpu_hz()) != GMAC_OK) {
  406208:	f102 620f 	add.w	r2, r2, #149946368	; 0x8f00000
  40620c:	f502 4251 	add.w	r2, r2, #53504	; 0xd100
  406210:	4639      	mov	r1, r7
  406212:	4620      	mov	r0, r4
  406214:	4b17      	ldr	r3, [pc, #92]	; (406274 <ethernetif_init+0x21c>)
  406216:	4798      	blx	r3
  406218:	b110      	cbz	r0, 406220 <ethernetif_init+0x1c8>
	if (id == 0)
		return ERR_MEM;
#endif

	return ERR_OK;
}
  40621a:	2000      	movs	r0, #0
  40621c:	b003      	add	sp, #12
  40621e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (ethernet_phy_auto_negotiate(GMAC, BOARD_GMAC_PHY_ADDR) != GMAC_OK) {
  406220:	4639      	mov	r1, r7
  406222:	4620      	mov	r0, r4
  406224:	4b14      	ldr	r3, [pc, #80]	; (406278 <ethernetif_init+0x220>)
  406226:	4798      	blx	r3
  406228:	2800      	cmp	r0, #0
  40622a:	d1f6      	bne.n	40621a <ethernetif_init+0x1c2>
	while (ethernet_phy_set_link(GMAC, BOARD_GMAC_PHY_ADDR, 1) != GMAC_OK) {
  40622c:	2201      	movs	r2, #1
  40622e:	4639      	mov	r1, r7
  406230:	4620      	mov	r0, r4
  406232:	4b12      	ldr	r3, [pc, #72]	; (40627c <ethernetif_init+0x224>)
  406234:	4798      	blx	r3
  406236:	2800      	cmp	r0, #0
  406238:	d1ef      	bne.n	40621a <ethernetif_init+0x1c2>
	netif->flags |= NETIF_FLAG_LINK_UP;
  40623a:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
  40623e:	f043 0310 	orr.w	r3, r3, #16
  406242:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
  406246:	e7e8      	b.n	40621a <ethernetif_init+0x1c2>
  406248:	204026b8 	.word	0x204026b8
  40624c:	00405b89 	.word	0x00405b89
  406250:	00405f11 	.word	0x00405f11
  406254:	01312d00 	.word	0x01312d00
  406258:	00400ce9 	.word	0x00400ce9
  40625c:	40050000 	.word	0x40050000
  406260:	204038d8 	.word	0x204038d8
  406264:	204038d0 	.word	0x204038d0
  406268:	00405eb1 	.word	0x00405eb1
  40626c:	c0008000 	.word	0xc0008000
  406270:	e000e100 	.word	0xe000e100
  406274:	004006d5 	.word	0x004006d5
  406278:	004004d9 	.word	0x004004d9
  40627c:	004003e5 	.word	0x004003e5

00406280 <status_callback>:
 * is up.
 *
 * \param netif The network interface instance.
 */
void status_callback(struct netif *netif)
{
  406280:	b500      	push	{lr}
  406282:	b087      	sub	sp, #28
	int8_t c_mess[20];
	if (netif_is_up(netif)) {
  406284:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
  406288:	f013 0f01 	tst.w	r3, #1
  40628c:	d105      	bne.n	40629a <status_callback+0x1a>
		strcpy((char*)c_mess, "IP=");
		strcat((char*)c_mess, inet_ntoa(*(struct in_addr *)&(netif->ip_addr)));
		printf("Network up %s\r\n", (char const*)c_mess);
	} else {
		printf("Network down\r\n");
  40628e:	480a      	ldr	r0, [pc, #40]	; (4062b8 <status_callback+0x38>)
  406290:	4b0a      	ldr	r3, [pc, #40]	; (4062bc <status_callback+0x3c>)
  406292:	4798      	blx	r3
	}
}
  406294:	b007      	add	sp, #28
  406296:	f85d fb04 	ldr.w	pc, [sp], #4
		strcpy((char*)c_mess, "IP=");
  40629a:	4b09      	ldr	r3, [pc, #36]	; (4062c0 <status_callback+0x40>)
  40629c:	9301      	str	r3, [sp, #4]
		strcat((char*)c_mess, inet_ntoa(*(struct in_addr *)&(netif->ip_addr)));
  40629e:	3004      	adds	r0, #4
  4062a0:	4b08      	ldr	r3, [pc, #32]	; (4062c4 <status_callback+0x44>)
  4062a2:	4798      	blx	r3
  4062a4:	4601      	mov	r1, r0
  4062a6:	a801      	add	r0, sp, #4
  4062a8:	4b07      	ldr	r3, [pc, #28]	; (4062c8 <status_callback+0x48>)
  4062aa:	4798      	blx	r3
		printf("Network up %s\r\n", (char const*)c_mess);
  4062ac:	a901      	add	r1, sp, #4
  4062ae:	4807      	ldr	r0, [pc, #28]	; (4062cc <status_callback+0x4c>)
  4062b0:	4b07      	ldr	r3, [pc, #28]	; (4062d0 <status_callback+0x50>)
  4062b2:	4798      	blx	r3
  4062b4:	e7ee      	b.n	406294 <status_callback+0x14>
  4062b6:	bf00      	nop
  4062b8:	0040e990 	.word	0x0040e990
  4062bc:	00407e85 	.word	0x00407e85
  4062c0:	003d5049 	.word	0x003d5049
  4062c4:	004019a1 	.word	0x004019a1
  4062c8:	00408081 	.word	0x00408081
  4062cc:	0040e980 	.word	0x0040e980
  4062d0:	00407dc1 	.word	0x00407dc1

004062d4 <init_ethernet>:
{
  4062d4:	b570      	push	{r4, r5, r6, lr}
  4062d6:	b088      	sub	sp, #32
	lwip_init();
  4062d8:	4b15      	ldr	r3, [pc, #84]	; (406330 <init_ethernet+0x5c>)
  4062da:	4798      	blx	r3
	printf("----lwIP initialized\r\n");
  4062dc:	4815      	ldr	r0, [pc, #84]	; (406334 <init_ethernet+0x60>)
  4062de:	4d16      	ldr	r5, [pc, #88]	; (406338 <init_ethernet+0x64>)
  4062e0:	47a8      	blx	r5
	IP4_ADDR(&x_ip_addr, ETHERNET_CONF_IPADDR0, ETHERNET_CONF_IPADDR1,
  4062e2:	4b16      	ldr	r3, [pc, #88]	; (40633c <init_ethernet+0x68>)
  4062e4:	9305      	str	r3, [sp, #20]
	IP4_ADDR(&x_net_mask, ETHERNET_CONF_NET_MASK0, ETHERNET_CONF_NET_MASK1,
  4062e6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
  4062ea:	9306      	str	r3, [sp, #24]
	IP4_ADDR(&x_gateway, ETHERNET_CONF_GATEWAY_ADDR0,
  4062ec:	ab08      	add	r3, sp, #32
  4062ee:	4a14      	ldr	r2, [pc, #80]	; (406340 <init_ethernet+0x6c>)
  4062f0:	f843 2d04 	str.w	r2, [r3, #-4]!
	if (NULL == netif_add(&gs_net_if, &x_ip_addr, &x_net_mask, &x_gateway, NULL,
  4062f4:	4c13      	ldr	r4, [pc, #76]	; (406344 <init_ethernet+0x70>)
  4062f6:	4a14      	ldr	r2, [pc, #80]	; (406348 <init_ethernet+0x74>)
  4062f8:	9202      	str	r2, [sp, #8]
  4062fa:	4a14      	ldr	r2, [pc, #80]	; (40634c <init_ethernet+0x78>)
  4062fc:	9201      	str	r2, [sp, #4]
  4062fe:	2200      	movs	r2, #0
  406300:	9200      	str	r2, [sp, #0]
  406302:	aa06      	add	r2, sp, #24
  406304:	a905      	add	r1, sp, #20
  406306:	4620      	mov	r0, r4
  406308:	4e11      	ldr	r6, [pc, #68]	; (406350 <init_ethernet+0x7c>)
  40630a:	47b0      	blx	r6
	netif_set_default(&gs_net_if);
  40630c:	4620      	mov	r0, r4
  40630e:	4b11      	ldr	r3, [pc, #68]	; (406354 <init_ethernet+0x80>)
  406310:	4798      	blx	r3
	netif_set_status_callback(&gs_net_if, status_callback);
  406312:	4911      	ldr	r1, [pc, #68]	; (406358 <init_ethernet+0x84>)
  406314:	4620      	mov	r0, r4
  406316:	4b11      	ldr	r3, [pc, #68]	; (40635c <init_ethernet+0x88>)
  406318:	4798      	blx	r3
	netif_set_up(&gs_net_if);
  40631a:	4620      	mov	r0, r4
  40631c:	4b10      	ldr	r3, [pc, #64]	; (406360 <init_ethernet+0x8c>)
  40631e:	4798      	blx	r3
	printf("Static IP Address Assigned\r\n");
  406320:	4810      	ldr	r0, [pc, #64]	; (406364 <init_ethernet+0x90>)
  406322:	47a8      	blx	r5
	printf("----Ethernet interface configured\r\n");
  406324:	4810      	ldr	r0, [pc, #64]	; (406368 <init_ethernet+0x94>)
  406326:	47a8      	blx	r5
	sys_init_timing();
  406328:	4b10      	ldr	r3, [pc, #64]	; (40636c <init_ethernet+0x98>)
  40632a:	4798      	blx	r3
}
  40632c:	b008      	add	sp, #32
  40632e:	bd70      	pop	{r4, r5, r6, pc}
  406330:	00401fad 	.word	0x00401fad
  406334:	0040e928 	.word	0x0040e928
  406338:	00407e85 	.word	0x00407e85
  40633c:	6400a8c0 	.word	0x6400a8c0
  406340:	fa00a8c0 	.word	0xfa00a8c0
  406344:	20404984 	.word	0x20404984
  406348:	00405cad 	.word	0x00405cad
  40634c:	00406059 	.word	0x00406059
  406350:	00402521 	.word	0x00402521
  406354:	00402571 	.word	0x00402571
  406358:	00406281 	.word	0x00406281
  40635c:	004025b9 	.word	0x004025b9
  406360:	0040257d 	.word	0x0040257d
  406364:	0040e940 	.word	0x0040e940
  406368:	0040e95c 	.word	0x0040e95c
  40636c:	00406719 	.word	0x00406719

00406370 <ethernet_task>:

/**
 * \brief Process incoming ethernet frames, then update timers.
 */
void ethernet_task(void)
{
  406370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Poll the network interface driver for incoming ethernet frames. */
	ethernetif_input(&gs_net_if);
  406372:	4814      	ldr	r0, [pc, #80]	; (4063c4 <ethernet_task+0x54>)
  406374:	4b14      	ldr	r3, [pc, #80]	; (4063c8 <ethernet_task+0x58>)
  406376:	4798      	blx	r3
	ul_cur_time = sys_get_ms();
  406378:	4b14      	ldr	r3, [pc, #80]	; (4063cc <ethernet_task+0x5c>)
  40637a:	4798      	blx	r3
	if (ul_cur_time >= ul_last_time) {
  40637c:	4b14      	ldr	r3, [pc, #80]	; (4063d0 <ethernet_task+0x60>)
  40637e:	681d      	ldr	r5, [r3, #0]
  406380:	42a8      	cmp	r0, r5
  406382:	d307      	bcc.n	406394 <ethernet_task+0x24>
		ul_time_diff = ul_cur_time - ul_last_time;
  406384:	1b45      	subs	r5, r0, r5
	if (ul_time_diff) {
  406386:	b1dd      	cbz	r5, 4063c0 <ethernet_task+0x50>
		ul_last_time = ul_cur_time;
  406388:	4b11      	ldr	r3, [pc, #68]	; (4063d0 <ethernet_task+0x60>)
  40638a:	6018      	str	r0, [r3, #0]
  40638c:	4c11      	ldr	r4, [pc, #68]	; (4063d4 <ethernet_task+0x64>)
  40638e:	f104 0724 	add.w	r7, r4, #36	; 0x24
  406392:	e009      	b.n	4063a8 <ethernet_task+0x38>
		ul_time_diff = 0xFFFFFFFF - ul_last_time + ul_cur_time;
  406394:	43ed      	mvns	r5, r5
  406396:	4405      	add	r5, r0
  406398:	e7f5      	b.n	406386 <ethernet_task+0x16>
				p_tmr_inf->timer -= p_tmr_inf->timer_interval;
  40639a:	6833      	ldr	r3, [r6, #0]
  40639c:	6872      	ldr	r2, [r6, #4]
  40639e:	1a9b      	subs	r3, r3, r2
  4063a0:	6033      	str	r3, [r6, #0]
  4063a2:	340c      	adds	r4, #12
		for (ul_idx_timer = 0;
  4063a4:	42bc      	cmp	r4, r7
  4063a6:	d00b      	beq.n	4063c0 <ethernet_task+0x50>
  4063a8:	4626      	mov	r6, r4
			p_tmr_inf->timer += ul_time_diff;
  4063aa:	6823      	ldr	r3, [r4, #0]
  4063ac:	442b      	add	r3, r5
  4063ae:	6023      	str	r3, [r4, #0]
			if (p_tmr_inf->timer > p_tmr_inf->timer_interval) {
  4063b0:	6862      	ldr	r2, [r4, #4]
  4063b2:	4293      	cmp	r3, r2
  4063b4:	d9f5      	bls.n	4063a2 <ethernet_task+0x32>
				if (p_tmr_inf->timer_func) {
  4063b6:	68a3      	ldr	r3, [r4, #8]
  4063b8:	2b00      	cmp	r3, #0
  4063ba:	d0ee      	beq.n	40639a <ethernet_task+0x2a>
					p_tmr_inf->timer_func();
  4063bc:	4798      	blx	r3
  4063be:	e7ec      	b.n	40639a <ethernet_task+0x2a>
  4063c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4063c2:	bf00      	nop
  4063c4:	20404984 	.word	0x20404984
  4063c8:	00405fa5 	.word	0x00405fa5
  4063cc:	004067ad 	.word	0x004067ad
  4063d0:	204038e0 	.word	0x204038e0
  4063d4:	20400010 	.word	0x20400010

004063d8 <echo_error>:
	struct echo_state *es;
	
	LWIP_UNUSED_ARG(err);
	
	es = (struct echo_state *)arg;
	if(es!=NULL)
  4063d8:	b118      	cbz	r0, 4063e2 <echo_error+0xa>
{
  4063da:	b508      	push	{r3, lr}
	{
		mem_free(es);
  4063dc:	4b01      	ldr	r3, [pc, #4]	; (4063e4 <echo_error+0xc>)
  4063de:	4798      	blx	r3
  4063e0:	bd08      	pop	{r3, pc}
  4063e2:	4770      	bx	lr
  4063e4:	00402195 	.word	0x00402195

004063e8 <echo_accept>:
{
  4063e8:	b570      	push	{r4, r5, r6, lr}
  4063ea:	460c      	mov	r4, r1
	tcp_setprio(newpcb, TCP_PRIO_MIN);
  4063ec:	2101      	movs	r1, #1
  4063ee:	4620      	mov	r0, r4
  4063f0:	4b12      	ldr	r3, [pc, #72]	; (40643c <echo_accept+0x54>)
  4063f2:	4798      	blx	r3
	es = (struct echo_state *)mem_malloc(sizeof(struct echo_state));
  4063f4:	200c      	movs	r0, #12
  4063f6:	4b12      	ldr	r3, [pc, #72]	; (406440 <echo_accept+0x58>)
  4063f8:	4798      	blx	r3
	if(es !=NULL)
  4063fa:	b1e0      	cbz	r0, 406436 <echo_accept+0x4e>
  4063fc:	4606      	mov	r6, r0
		es->state = ES_ACCEPTED;
  4063fe:	2301      	movs	r3, #1
  406400:	7003      	strb	r3, [r0, #0]
		printf(">>ES_ACCEPTED\r\n");
  406402:	4810      	ldr	r0, [pc, #64]	; (406444 <echo_accept+0x5c>)
  406404:	4b10      	ldr	r3, [pc, #64]	; (406448 <echo_accept+0x60>)
  406406:	4798      	blx	r3
		es->pcb = newpcb;
  406408:	6074      	str	r4, [r6, #4]
		es->retries = 0;
  40640a:	2500      	movs	r5, #0
  40640c:	7075      	strb	r5, [r6, #1]
		es->p = NULL;
  40640e:	60b5      	str	r5, [r6, #8]
		tcp_arg(newpcb, es);
  406410:	4631      	mov	r1, r6
  406412:	4620      	mov	r0, r4
  406414:	4b0d      	ldr	r3, [pc, #52]	; (40644c <echo_accept+0x64>)
  406416:	4798      	blx	r3
		tcp_recv(newpcb, echo_recv);
  406418:	490d      	ldr	r1, [pc, #52]	; (406450 <echo_accept+0x68>)
  40641a:	4620      	mov	r0, r4
  40641c:	4b0d      	ldr	r3, [pc, #52]	; (406454 <echo_accept+0x6c>)
  40641e:	4798      	blx	r3
		tcp_err(newpcb, echo_error);
  406420:	490d      	ldr	r1, [pc, #52]	; (406458 <echo_accept+0x70>)
  406422:	4620      	mov	r0, r4
  406424:	4b0d      	ldr	r3, [pc, #52]	; (40645c <echo_accept+0x74>)
  406426:	4798      	blx	r3
		tcp_poll(newpcb, echo_poll, 0);
  406428:	462a      	mov	r2, r5
  40642a:	490d      	ldr	r1, [pc, #52]	; (406460 <echo_accept+0x78>)
  40642c:	4620      	mov	r0, r4
  40642e:	4b0d      	ldr	r3, [pc, #52]	; (406464 <echo_accept+0x7c>)
  406430:	4798      	blx	r3
		ret_err = ERR_OK;
  406432:	4628      	mov	r0, r5
  406434:	bd70      	pop	{r4, r5, r6, pc}
		ret_err = ERR_MEM;
  406436:	f04f 30ff 	mov.w	r0, #4294967295
}
  40643a:	bd70      	pop	{r4, r5, r6, pc}
  40643c:	00402c0d 	.word	0x00402c0d
  406440:	004022fd 	.word	0x004022fd
  406444:	0040e9a0 	.word	0x0040e9a0
  406448:	00407e85 	.word	0x00407e85
  40644c:	00402c41 	.word	0x00402c41
  406450:	004065a5 	.word	0x004065a5
  406454:	00402c45 	.word	0x00402c45
  406458:	004063d9 	.word	0x004063d9
  40645c:	00402c4f 	.word	0x00402c4f
  406460:	00406529 	.word	0x00406529
  406464:	00402c59 	.word	0x00402c59

00406468 <echo_init>:
{
  406468:	b510      	push	{r4, lr}
	echo_pcb = tcp_new();
  40646a:	4b0e      	ldr	r3, [pc, #56]	; (4064a4 <echo_init+0x3c>)
  40646c:	4798      	blx	r3
  40646e:	4b0e      	ldr	r3, [pc, #56]	; (4064a8 <echo_init+0x40>)
  406470:	6018      	str	r0, [r3, #0]
	if(echo_pcb != NULL)
  406472:	b190      	cbz	r0, 40649a <echo_init+0x32>
		err = tcp_bind(echo_pcb, IP_ADDR_ANY, 7);
  406474:	2207      	movs	r2, #7
  406476:	490d      	ldr	r1, [pc, #52]	; (4064ac <echo_init+0x44>)
  406478:	4b0d      	ldr	r3, [pc, #52]	; (4064b0 <echo_init+0x48>)
  40647a:	4798      	blx	r3
		if(err==ERR_OK)
  40647c:	b948      	cbnz	r0, 406492 <echo_init+0x2a>
			echo_pcb = tcp_listen(echo_pcb);
  40647e:	4c0a      	ldr	r4, [pc, #40]	; (4064a8 <echo_init+0x40>)
  406480:	21ff      	movs	r1, #255	; 0xff
  406482:	6820      	ldr	r0, [r4, #0]
  406484:	4b0b      	ldr	r3, [pc, #44]	; (4064b4 <echo_init+0x4c>)
  406486:	4798      	blx	r3
  406488:	6020      	str	r0, [r4, #0]
			tcp_accept(echo_pcb, echo_accept);
  40648a:	490b      	ldr	r1, [pc, #44]	; (4064b8 <echo_init+0x50>)
  40648c:	4b0b      	ldr	r3, [pc, #44]	; (4064bc <echo_init+0x54>)
  40648e:	4798      	blx	r3
  406490:	bd10      	pop	{r4, pc}
			printf("!!! TCP BIND ERROR !!!\r\n");
  406492:	480b      	ldr	r0, [pc, #44]	; (4064c0 <echo_init+0x58>)
  406494:	4b0b      	ldr	r3, [pc, #44]	; (4064c4 <echo_init+0x5c>)
  406496:	4798      	blx	r3
  406498:	bd10      	pop	{r4, pc}
		printf("!!! TCP NEW ERROR !!!\r\n");	
  40649a:	480b      	ldr	r0, [pc, #44]	; (4064c8 <echo_init+0x60>)
  40649c:	4b09      	ldr	r3, [pc, #36]	; (4064c4 <echo_init+0x5c>)
  40649e:	4798      	blx	r3
  4064a0:	bd10      	pop	{r4, pc}
  4064a2:	bf00      	nop
  4064a4:	004035b1 	.word	0x004035b1
  4064a8:	204038e4 	.word	0x204038e4
  4064ac:	0040e8cc 	.word	0x0040e8cc
  4064b0:	00402a05 	.word	0x00402a05
  4064b4:	00402a91 	.word	0x00402a91
  4064b8:	004063e9 	.word	0x004063e9
  4064bc:	00402c55 	.word	0x00402c55
  4064c0:	0040e9b0 	.word	0x0040e9b0
  4064c4:	00407e85 	.word	0x00407e85
  4064c8:	0040e9c8 	.word	0x0040e9c8

004064cc <echo_send>:
	}
	return ERR_OK;
}

void echo_send(struct tcp_pcb *tpcb, struct echo_state *es)
{
  4064cc:	b538      	push	{r3, r4, r5, lr}
  4064ce:	4605      	mov	r5, r0
  4064d0:	460c      	mov	r4, r1
	printf(">>>ECHO SEND");
  4064d2:	480e      	ldr	r0, [pc, #56]	; (40650c <echo_send+0x40>)
  4064d4:	4b0e      	ldr	r3, [pc, #56]	; (406510 <echo_send+0x44>)
  4064d6:	4798      	blx	r3
	struct pbuf *ptr;
	err_t wr_err = ERR_OK;
	
	while ((wr_err==ERR_OK)&&
			(sendBufferIndex!=0) &&
  4064d8:	4b0e      	ldr	r3, [pc, #56]	; (406514 <echo_send+0x48>)
  4064da:	781a      	ldrb	r2, [r3, #0]
	while ((wr_err==ERR_OK)&&
  4064dc:	b19a      	cbz	r2, 406506 <echo_send+0x3a>
			(sendBufferIndex <= tcp_sndbuf(tpcb)))
  4064de:	b292      	uxth	r2, r2
			(sendBufferIndex!=0) &&
  4064e0:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
  4064e4:	4293      	cmp	r3, r2
  4064e6:	d30e      	bcc.n	406506 <echo_send+0x3a>
	{
		//ptr = es->p;
		
		// enqueue data for transmission 
		wr_err = tcp_write(tpcb, sendBuffer, sendBufferIndex, 1);
  4064e8:	2301      	movs	r3, #1
  4064ea:	490b      	ldr	r1, [pc, #44]	; (406518 <echo_send+0x4c>)
  4064ec:	4628      	mov	r0, r5
  4064ee:	4d0b      	ldr	r5, [pc, #44]	; (40651c <echo_send+0x50>)
  4064f0:	47a8      	blx	r5
		sendBufferIndex = 0;
  4064f2:	2200      	movs	r2, #0
  4064f4:	4b07      	ldr	r3, [pc, #28]	; (406514 <echo_send+0x48>)
  4064f6:	701a      	strb	r2, [r3, #0]
		if(wr_err ==ERR_OK)
  4064f8:	b128      	cbz	r0, 406506 <echo_send+0x3a>
			while(freed == 0);
			// we can read more data now
			tcp_recved(tpcb, plen);
			*/
		}
		else if(wr_err==ERR_MEM)
  4064fa:	f1b0 3fff 	cmp.w	r0, #4294967295
  4064fe:	d003      	beq.n	406508 <echo_send+0x3c>
			es->p = ptr;
		}
		else
		{
			// other problem ? //
			printf("!!! ECHO SEND ERROR !!!\r\n");
  406500:	4807      	ldr	r0, [pc, #28]	; (406520 <echo_send+0x54>)
  406502:	4b08      	ldr	r3, [pc, #32]	; (406524 <echo_send+0x58>)
  406504:	4798      	blx	r3
  406506:	bd38      	pop	{r3, r4, r5, pc}
			es->p = ptr;
  406508:	60a2      	str	r2, [r4, #8]
  40650a:	bd38      	pop	{r3, r4, r5, pc}
  40650c:	0040ea00 	.word	0x0040ea00
  406510:	00407dc1 	.word	0x00407dc1
  406514:	204049b9 	.word	0x204049b9
  406518:	204049bc 	.word	0x204049bc
  40651c:	00404b91 	.word	0x00404b91
  406520:	0040ea10 	.word	0x0040ea10
  406524:	00407e85 	.word	0x00407e85

00406528 <echo_poll>:
{
  406528:	b508      	push	{r3, lr}
	if(sendBufferIndex>0)
  40652a:	4b05      	ldr	r3, [pc, #20]	; (406540 <echo_poll+0x18>)
  40652c:	781b      	ldrb	r3, [r3, #0]
  40652e:	b90b      	cbnz	r3, 406534 <echo_poll+0xc>
}
  406530:	2000      	movs	r0, #0
  406532:	bd08      	pop	{r3, pc}
  406534:	4608      	mov	r0, r1
		echo_send(tpcb, es);
  406536:	2100      	movs	r1, #0
  406538:	4b02      	ldr	r3, [pc, #8]	; (406544 <echo_poll+0x1c>)
  40653a:	4798      	blx	r3
  40653c:	e7f8      	b.n	406530 <echo_poll+0x8>
  40653e:	bf00      	nop
  406540:	204049b9 	.word	0x204049b9
  406544:	004064cd 	.word	0x004064cd

00406548 <echo_close>:
		}
	}
}

void echo_close(struct tcp_pcb *tpcb, struct echo_state *es)
{
  406548:	b538      	push	{r3, r4, r5, lr}
  40654a:	4604      	mov	r4, r0
  40654c:	460d      	mov	r5, r1
	tcp_arg(tpcb, NULL);
  40654e:	2100      	movs	r1, #0
  406550:	4b0d      	ldr	r3, [pc, #52]	; (406588 <echo_close+0x40>)
  406552:	4798      	blx	r3
	tcp_sent(tpcb, NULL);
  406554:	2100      	movs	r1, #0
  406556:	4620      	mov	r0, r4
  406558:	4b0c      	ldr	r3, [pc, #48]	; (40658c <echo_close+0x44>)
  40655a:	4798      	blx	r3
	tcp_recv(tpcb, NULL);
  40655c:	2100      	movs	r1, #0
  40655e:	4620      	mov	r0, r4
  406560:	4b0b      	ldr	r3, [pc, #44]	; (406590 <echo_close+0x48>)
  406562:	4798      	blx	r3
	tcp_err(tpcb, NULL);
  406564:	2100      	movs	r1, #0
  406566:	4620      	mov	r0, r4
  406568:	4b0a      	ldr	r3, [pc, #40]	; (406594 <echo_close+0x4c>)
  40656a:	4798      	blx	r3
	tcp_poll(tpcb, NULL, 0);
  40656c:	2200      	movs	r2, #0
  40656e:	4611      	mov	r1, r2
  406570:	4620      	mov	r0, r4
  406572:	4b09      	ldr	r3, [pc, #36]	; (406598 <echo_close+0x50>)
  406574:	4798      	blx	r3
	
	if(es != NULL)
  406576:	b115      	cbz	r5, 40657e <echo_close+0x36>
	{
		mem_free(es);
  406578:	4628      	mov	r0, r5
  40657a:	4b08      	ldr	r3, [pc, #32]	; (40659c <echo_close+0x54>)
  40657c:	4798      	blx	r3
	}
	tcp_close(tpcb);
  40657e:	4620      	mov	r0, r4
  406580:	4b07      	ldr	r3, [pc, #28]	; (4065a0 <echo_close+0x58>)
  406582:	4798      	blx	r3
  406584:	bd38      	pop	{r3, r4, r5, pc}
  406586:	bf00      	nop
  406588:	00402c41 	.word	0x00402c41
  40658c:	00402c4b 	.word	0x00402c4b
  406590:	00402c45 	.word	0x00402c45
  406594:	00402c4f 	.word	0x00402c4f
  406598:	00402c59 	.word	0x00402c59
  40659c:	00402195 	.word	0x00402195
  4065a0:	0040325d 	.word	0x0040325d

004065a4 <echo_recv>:
{
  4065a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4065a6:	4606      	mov	r6, r0
  4065a8:	460f      	mov	r7, r1
	if (p == NULL)
  4065aa:	b192      	cbz	r2, 4065d2 <echo_recv+0x2e>
  4065ac:	461c      	mov	r4, r3
  4065ae:	4615      	mov	r5, r2
	else if(err != ERR_OK)
  4065b0:	bb33      	cbnz	r3, 406600 <echo_recv+0x5c>
	else if(es->state == ES_ACCEPTED)
  4065b2:	7803      	ldrb	r3, [r0, #0]
  4065b4:	2b01      	cmp	r3, #1
  4065b6:	d02a      	beq.n	40660e <echo_recv+0x6a>
	else if(es->state == ES_RECEIVED)
  4065b8:	2b02      	cmp	r3, #2
  4065ba:	d03f      	beq.n	40663c <echo_recv+0x98>
		tcp_recved(tpcb, p->tot_len);
  4065bc:	8911      	ldrh	r1, [r2, #8]
  4065be:	4638      	mov	r0, r7
  4065c0:	4b31      	ldr	r3, [pc, #196]	; (406688 <echo_recv+0xe4>)
  4065c2:	4798      	blx	r3
		es->p = NULL;
  4065c4:	2300      	movs	r3, #0
  4065c6:	60b3      	str	r3, [r6, #8]
		pbuf_free(p);
  4065c8:	4628      	mov	r0, r5
  4065ca:	4b30      	ldr	r3, [pc, #192]	; (40668c <echo_recv+0xe8>)
  4065cc:	4798      	blx	r3
		ret_err = ERR_OK;
  4065ce:	4620      	mov	r0, r4
}
  4065d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		es->state = ES_CLOSING;
  4065d2:	2303      	movs	r3, #3
  4065d4:	7003      	strb	r3, [r0, #0]
		printf(">>ES_CLOSING\r\n");
  4065d6:	482e      	ldr	r0, [pc, #184]	; (406690 <echo_recv+0xec>)
  4065d8:	4b2e      	ldr	r3, [pc, #184]	; (406694 <echo_recv+0xf0>)
  4065da:	4798      	blx	r3
		if(es->p==NULL)
  4065dc:	68b3      	ldr	r3, [r6, #8]
  4065de:	b14b      	cbz	r3, 4065f4 <echo_recv+0x50>
			tcp_sent(tpcb, echo_sent);
  4065e0:	492d      	ldr	r1, [pc, #180]	; (406698 <echo_recv+0xf4>)
  4065e2:	4638      	mov	r0, r7
  4065e4:	4b2d      	ldr	r3, [pc, #180]	; (40669c <echo_recv+0xf8>)
  4065e6:	4798      	blx	r3
			echo_send(tpcb, es);
  4065e8:	4631      	mov	r1, r6
  4065ea:	4638      	mov	r0, r7
  4065ec:	4b2c      	ldr	r3, [pc, #176]	; (4066a0 <echo_recv+0xfc>)
  4065ee:	4798      	blx	r3
		ret_err = ERR_OK;
  4065f0:	2000      	movs	r0, #0
  4065f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			echo_close(tpcb,es);
  4065f4:	4631      	mov	r1, r6
  4065f6:	4638      	mov	r0, r7
  4065f8:	4b2a      	ldr	r3, [pc, #168]	; (4066a4 <echo_recv+0x100>)
  4065fa:	4798      	blx	r3
		ret_err = ERR_OK;
  4065fc:	2000      	movs	r0, #0
  4065fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			es->p = NULL;
  406600:	2300      	movs	r3, #0
  406602:	6083      	str	r3, [r0, #8]
			pbuf_free(p);
  406604:	4610      	mov	r0, r2
  406606:	4b21      	ldr	r3, [pc, #132]	; (40668c <echo_recv+0xe8>)
  406608:	4798      	blx	r3
		ret_err = err;
  40660a:	4620      	mov	r0, r4
  40660c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		es->state = ES_RECEIVED;
  40660e:	2302      	movs	r3, #2
  406610:	7003      	strb	r3, [r0, #0]
		printf(">>ES_RECEIVED\r\n");
  406612:	4825      	ldr	r0, [pc, #148]	; (4066a8 <echo_recv+0x104>)
  406614:	4b1f      	ldr	r3, [pc, #124]	; (406694 <echo_recv+0xf0>)
  406616:	4798      	blx	r3
		pbuf_copy_partial(p, receiveBuffer + receiveBufferIndex, p->tot_len, 0);
  406618:	4e24      	ldr	r6, [pc, #144]	; (4066ac <echo_recv+0x108>)
  40661a:	7831      	ldrb	r1, [r6, #0]
  40661c:	2300      	movs	r3, #0
  40661e:	892a      	ldrh	r2, [r5, #8]
  406620:	4823      	ldr	r0, [pc, #140]	; (4066b0 <echo_recv+0x10c>)
  406622:	4401      	add	r1, r0
  406624:	4628      	mov	r0, r5
  406626:	4f23      	ldr	r7, [pc, #140]	; (4066b4 <echo_recv+0x110>)
  406628:	47b8      	blx	r7
		receiveBufferIndex += p->tot_len;
  40662a:	7a2a      	ldrb	r2, [r5, #8]
  40662c:	7833      	ldrb	r3, [r6, #0]
  40662e:	4413      	add	r3, r2
  406630:	7033      	strb	r3, [r6, #0]
		pbuf_free(p);
  406632:	4628      	mov	r0, r5
  406634:	4b15      	ldr	r3, [pc, #84]	; (40668c <echo_recv+0xe8>)
  406636:	4798      	blx	r3
		ret_err = ERR_OK;
  406638:	4620      	mov	r0, r4
  40663a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(es->p == NULL)
  40663c:	6883      	ldr	r3, [r0, #8]
  40663e:	b18b      	cbz	r3, 406664 <echo_recv+0xc0>
			pbuf_copy_partial(p, receiveBuffer + receiveBufferIndex, p->tot_len, 0);
  406640:	4e1a      	ldr	r6, [pc, #104]	; (4066ac <echo_recv+0x108>)
  406642:	7831      	ldrb	r1, [r6, #0]
  406644:	2300      	movs	r3, #0
  406646:	8912      	ldrh	r2, [r2, #8]
  406648:	4819      	ldr	r0, [pc, #100]	; (4066b0 <echo_recv+0x10c>)
  40664a:	4401      	add	r1, r0
  40664c:	4628      	mov	r0, r5
  40664e:	4f19      	ldr	r7, [pc, #100]	; (4066b4 <echo_recv+0x110>)
  406650:	47b8      	blx	r7
			receiveBufferIndex += p->tot_len;
  406652:	7a2a      	ldrb	r2, [r5, #8]
  406654:	7833      	ldrb	r3, [r6, #0]
  406656:	4413      	add	r3, r2
  406658:	7033      	strb	r3, [r6, #0]
			pbuf_free(p);
  40665a:	4628      	mov	r0, r5
  40665c:	4b0b      	ldr	r3, [pc, #44]	; (40668c <echo_recv+0xe8>)
  40665e:	4798      	blx	r3
		ret_err = ERR_OK;
  406660:	4620      	mov	r0, r4
  406662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pbuf_copy_partial(p, receiveBuffer + receiveBufferIndex, p->tot_len, 0);
  406664:	4e11      	ldr	r6, [pc, #68]	; (4066ac <echo_recv+0x108>)
  406666:	7831      	ldrb	r1, [r6, #0]
  406668:	8912      	ldrh	r2, [r2, #8]
  40666a:	4811      	ldr	r0, [pc, #68]	; (4066b0 <echo_recv+0x10c>)
  40666c:	4401      	add	r1, r0
  40666e:	4628      	mov	r0, r5
  406670:	4f10      	ldr	r7, [pc, #64]	; (4066b4 <echo_recv+0x110>)
  406672:	47b8      	blx	r7
			receiveBufferIndex += p->tot_len;
  406674:	7a2a      	ldrb	r2, [r5, #8]
  406676:	7833      	ldrb	r3, [r6, #0]
  406678:	4413      	add	r3, r2
  40667a:	7033      	strb	r3, [r6, #0]
			pbuf_free(p);
  40667c:	4628      	mov	r0, r5
  40667e:	4b03      	ldr	r3, [pc, #12]	; (40668c <echo_recv+0xe8>)
  406680:	4798      	blx	r3
		ret_err = ERR_OK;
  406682:	4620      	mov	r0, r4
  406684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406686:	bf00      	nop
  406688:	00402b89 	.word	0x00402b89
  40668c:	0040262d 	.word	0x0040262d
  406690:	0040e9e0 	.word	0x0040e9e0
  406694:	00407e85 	.word	0x00407e85
  406698:	004066b9 	.word	0x004066b9
  40669c:	00402c4b 	.word	0x00402c4b
  4066a0:	004064cd 	.word	0x004064cd
  4066a4:	00406549 	.word	0x00406549
  4066a8:	0040e9f0 	.word	0x0040e9f0
  4066ac:	204049b8 	.word	0x204049b8
  4066b0:	20404a00 	.word	0x20404a00
  4066b4:	00402931 	.word	0x00402931

004066b8 <echo_sent>:
{
  4066b8:	b538      	push	{r3, r4, r5, lr}
  4066ba:	4604      	mov	r4, r0
  4066bc:	460d      	mov	r5, r1
	es->retries = 0;
  4066be:	2300      	movs	r3, #0
  4066c0:	7043      	strb	r3, [r0, #1]
	if(es->p !=NULL)
  4066c2:	6883      	ldr	r3, [r0, #8]
  4066c4:	b14b      	cbz	r3, 4066da <echo_sent+0x22>
		tcp_sent(tpcb, echo_sent);
  4066c6:	4909      	ldr	r1, [pc, #36]	; (4066ec <echo_sent+0x34>)
  4066c8:	4628      	mov	r0, r5
  4066ca:	4b09      	ldr	r3, [pc, #36]	; (4066f0 <echo_sent+0x38>)
  4066cc:	4798      	blx	r3
		echo_send(tpcb, es);
  4066ce:	4621      	mov	r1, r4
  4066d0:	4628      	mov	r0, r5
  4066d2:	4b08      	ldr	r3, [pc, #32]	; (4066f4 <echo_sent+0x3c>)
  4066d4:	4798      	blx	r3
}
  4066d6:	2000      	movs	r0, #0
  4066d8:	bd38      	pop	{r3, r4, r5, pc}
		if(es->state == ES_CLOSING)
  4066da:	7803      	ldrb	r3, [r0, #0]
  4066dc:	2b03      	cmp	r3, #3
  4066de:	d1fa      	bne.n	4066d6 <echo_sent+0x1e>
			echo_close(tpcb, es);
  4066e0:	4601      	mov	r1, r0
  4066e2:	4628      	mov	r0, r5
  4066e4:	4b04      	ldr	r3, [pc, #16]	; (4066f8 <echo_sent+0x40>)
  4066e6:	4798      	blx	r3
  4066e8:	e7f5      	b.n	4066d6 <echo_sent+0x1e>
  4066ea:	bf00      	nop
  4066ec:	004066b9 	.word	0x004066b9
  4066f0:	00402c4b 	.word	0x00402c4b
  4066f4:	004064cd 	.word	0x004064cd
  4066f8:	00406549 	.word	0x00406549

004066fc <TC0_Handler>:

/**
 * TC0 Interrupt handler.
 */
void TC0_Handler(void)
{
  4066fc:	b082      	sub	sp, #8
	/* Remove warnings. */
	volatile uint32_t ul_dummy;

	/* Clear status bit to acknowledge interrupt. */
	ul_dummy = TC0->TC_CHANNEL[0].TC_SR;
  4066fe:	4b04      	ldr	r3, [pc, #16]	; (406710 <TC0_Handler+0x14>)
  406700:	6a1b      	ldr	r3, [r3, #32]
  406702:	9301      	str	r3, [sp, #4]

	/* Increase tick. */
	gs_ul_clk_tick++;
  406704:	4a03      	ldr	r2, [pc, #12]	; (406714 <TC0_Handler+0x18>)
  406706:	6813      	ldr	r3, [r2, #0]
  406708:	3301      	adds	r3, #1
  40670a:	6013      	str	r3, [r2, #0]
}
  40670c:	b002      	add	sp, #8
  40670e:	4770      	bx	lr
  406710:	4000c000 	.word	0x4000c000
  406714:	204038e8 	.word	0x204038e8

00406718 <sys_init_timing>:

/**
 * \brief Initialize the timer counter (TC0).
 */
void sys_init_timing(void)
{
  406718:	b570      	push	{r4, r5, r6, lr}
  40671a:	b084      	sub	sp, #16
	uint32_t ul_div;
	uint32_t ul_tcclks;

	/* Clear tick value. */
	gs_ul_clk_tick = 0;
  40671c:	2500      	movs	r5, #0
  40671e:	4b18      	ldr	r3, [pc, #96]	; (406780 <sys_init_timing+0x68>)
  406720:	601d      	str	r5, [r3, #0]

	/* Configure PMC. */
	pmc_enable_periph_clk(ID_TC0);
  406722:	2017      	movs	r0, #23
  406724:	4b17      	ldr	r3, [pc, #92]	; (406784 <sys_init_timing+0x6c>)
  406726:	4798      	blx	r3

	/* Configure TC for a 1kHz frequency and trigger on RC compare. */
	tc_find_mck_divisor(1000,
  406728:	4c17      	ldr	r4, [pc, #92]	; (406788 <sys_init_timing+0x70>)
  40672a:	9400      	str	r4, [sp, #0]
  40672c:	ab02      	add	r3, sp, #8
  40672e:	aa03      	add	r2, sp, #12
  406730:	4621      	mov	r1, r4
  406732:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  406736:	4e15      	ldr	r6, [pc, #84]	; (40678c <sys_init_timing+0x74>)
  406738:	47b0      	blx	r6
			sysclk_get_main_hz(), &ul_div, &ul_tcclks,
			sysclk_get_main_hz());
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  40673a:	4e15      	ldr	r6, [pc, #84]	; (406790 <sys_init_timing+0x78>)
  40673c:	9a02      	ldr	r2, [sp, #8]
  40673e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  406742:	4629      	mov	r1, r5
  406744:	4630      	mov	r0, r6
  406746:	4b13      	ldr	r3, [pc, #76]	; (406794 <sys_init_timing+0x7c>)
  406748:	4798      	blx	r3
	tc_write_rc(TC0, 0, (sysclk_get_main_hz() / ul_div) / 1000);
  40674a:	9a03      	ldr	r2, [sp, #12]
  40674c:	fbb4 f4f2 	udiv	r4, r4, r2
  406750:	4a11      	ldr	r2, [pc, #68]	; (406798 <sys_init_timing+0x80>)
  406752:	fba2 3204 	umull	r3, r2, r2, r4
  406756:	0992      	lsrs	r2, r2, #6
  406758:	4629      	mov	r1, r5
  40675a:	4630      	mov	r0, r6
  40675c:	4b0f      	ldr	r3, [pc, #60]	; (40679c <sys_init_timing+0x84>)
  40675e:	4798      	blx	r3
  406760:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  406764:	4b0e      	ldr	r3, [pc, #56]	; (4067a0 <sys_init_timing+0x88>)
  406766:	601a      	str	r2, [r3, #0]

	/* Configure and enable interrupt on RC compare. */
	NVIC_EnableIRQ((IRQn_Type)ID_TC0);
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  406768:	2210      	movs	r2, #16
  40676a:	4629      	mov	r1, r5
  40676c:	4630      	mov	r0, r6
  40676e:	4b0d      	ldr	r3, [pc, #52]	; (4067a4 <sys_init_timing+0x8c>)
  406770:	4798      	blx	r3

	/* Start timer. */
	tc_start(TC0, 0);
  406772:	4629      	mov	r1, r5
  406774:	4630      	mov	r0, r6
  406776:	4b0c      	ldr	r3, [pc, #48]	; (4067a8 <sys_init_timing+0x90>)
  406778:	4798      	blx	r3
}
  40677a:	b004      	add	sp, #16
  40677c:	bd70      	pop	{r4, r5, r6, pc}
  40677e:	bf00      	nop
  406780:	204038e8 	.word	0x204038e8
  406784:	00400ce9 	.word	0x00400ce9
  406788:	11e1a300 	.word	0x11e1a300
  40678c:	00400d3b 	.word	0x00400d3b
  406790:	4000c000 	.word	0x4000c000
  406794:	00400d09 	.word	0x00400d09
  406798:	10624dd3 	.word	0x10624dd3
  40679c:	00400d2b 	.word	0x00400d2b
  4067a0:	e000e100 	.word	0xe000e100
  4067a4:	00400d33 	.word	0x00400d33
  4067a8:	00400d23 	.word	0x00400d23

004067ac <sys_get_ms>:
/**
 * \brief Return the number of timer ticks (ms).
 */
uint32_t sys_get_ms(void)
{
	return gs_ul_clk_tick;
  4067ac:	4b01      	ldr	r3, [pc, #4]	; (4067b4 <sys_get_ms+0x8>)
  4067ae:	6818      	ldr	r0, [r3, #0]
}
  4067b0:	4770      	bx	lr
  4067b2:	bf00      	nop
  4067b4:	204038e8 	.word	0x204038e8

004067b8 <sys_now>:
	return gs_ul_clk_tick;
  4067b8:	4b01      	ldr	r3, [pc, #4]	; (4067c0 <sys_now+0x8>)
  4067ba:	6818      	ldr	r0, [r3, #0]

#if ((LWIP_VERSION) != ((1U << 24) | (3U << 16) | (2U << 8) | (LWIP_VERSION_RC)))
u32_t sys_now(void)
{
	return (sys_get_ms());
}
  4067bc:	4770      	bx	lr
  4067be:	bf00      	nop
  4067c0:	204038e8 	.word	0x204038e8

004067c4 <ioport_set_pin_mode>:
	return 1U << (pin & 0x1F);
  4067c4:	f000 031f 	and.w	r3, r0, #31
  4067c8:	2201      	movs	r2, #1
  4067ca:	409a      	lsls	r2, r3
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4067cc:	4b1a      	ldr	r3, [pc, #104]	; (406838 <ioport_set_pin_mode+0x74>)
  4067ce:	eb03 1050 	add.w	r0, r3, r0, lsr #5
  4067d2:	0240      	lsls	r0, r0, #9
	if (mode & IOPORT_MODE_PULLUP) {
  4067d4:	f011 0f08 	tst.w	r1, #8
  4067d8:	d022      	beq.n	406820 <ioport_set_pin_mode+0x5c>
		base->PIO_PUER = mask;
  4067da:	6642      	str	r2, [r0, #100]	; 0x64
	if (mode & IOPORT_MODE_PULLDOWN) {
  4067dc:	f011 0f10 	tst.w	r1, #16
  4067e0:	d020      	beq.n	406824 <ioport_set_pin_mode+0x60>
		base->PIO_PPDER = mask;
  4067e2:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4067e6:	f011 0f20 	tst.w	r1, #32
  4067ea:	d01e      	beq.n	40682a <ioport_set_pin_mode+0x66>
		base->PIO_MDER = mask;
  4067ec:	6502      	str	r2, [r0, #80]	; 0x50
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  4067ee:	f011 0fc0 	tst.w	r1, #192	; 0xc0
  4067f2:	d01c      	beq.n	40682e <ioport_set_pin_mode+0x6a>
		base->PIO_IFER = mask;
  4067f4:	6202      	str	r2, [r0, #32]
	if (mode & IOPORT_MODE_DEBOUNCE) {
  4067f6:	f011 0f80 	tst.w	r1, #128	; 0x80
  4067fa:	d01a      	beq.n	406832 <ioport_set_pin_mode+0x6e>
		base->PIO_IFSCER = mask;
  4067fc:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
	if (mode & IOPORT_MODE_MUX_BIT0) {
  406800:	f011 0f01 	tst.w	r1, #1
		base->PIO_ABCDSR[0] |= mask;
  406804:	6f03      	ldr	r3, [r0, #112]	; 0x70
  406806:	bf14      	ite	ne
  406808:	4313      	orrne	r3, r2
		base->PIO_ABCDSR[0] &= ~mask;
  40680a:	4393      	biceq	r3, r2
  40680c:	6703      	str	r3, [r0, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
  40680e:	f011 0f02 	tst.w	r1, #2
		base->PIO_ABCDSR[1] |= mask;
  406812:	6f43      	ldr	r3, [r0, #116]	; 0x74
  406814:	bf14      	ite	ne
  406816:	431a      	orrne	r2, r3
		base->PIO_ABCDSR[1] &= ~mask;
  406818:	ea23 0202 	biceq.w	r2, r3, r2
  40681c:	6742      	str	r2, [r0, #116]	; 0x74
  40681e:	4770      	bx	lr
		base->PIO_PUDR = mask;
  406820:	6602      	str	r2, [r0, #96]	; 0x60
  406822:	e7db      	b.n	4067dc <ioport_set_pin_mode+0x18>
		base->PIO_PPDDR = mask;
  406824:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  406828:	e7dd      	b.n	4067e6 <ioport_set_pin_mode+0x22>
		base->PIO_MDDR = mask;
  40682a:	6542      	str	r2, [r0, #84]	; 0x54
  40682c:	e7df      	b.n	4067ee <ioport_set_pin_mode+0x2a>
		base->PIO_IFDR = mask;
  40682e:	6242      	str	r2, [r0, #36]	; 0x24
  406830:	e7e1      	b.n	4067f6 <ioport_set_pin_mode+0x32>
		base->PIO_IFSCDR = mask;
  406832:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  406836:	e7e3      	b.n	406800 <ioport_set_pin_mode+0x3c>
  406838:	00200707 	.word	0x00200707

0040683c <waitCount>:
	ul_cur_ticks = g_ul_ms_ticks;
	while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
}

static void waitCount(uint32_t ticks)
{
  40683c:	b082      	sub	sp, #8
	for(uint32_t volatile i = ticks; i>0; i--)
  40683e:	9001      	str	r0, [sp, #4]
  406840:	9b01      	ldr	r3, [sp, #4]
  406842:	b12b      	cbz	r3, 406850 <waitCount+0x14>
  406844:	9b01      	ldr	r3, [sp, #4]
  406846:	3b01      	subs	r3, #1
  406848:	9301      	str	r3, [sp, #4]
  40684a:	9b01      	ldr	r3, [sp, #4]
  40684c:	2b00      	cmp	r3, #0
  40684e:	d1f9      	bne.n	406844 <waitCount+0x8>
	{
	}
}
  406850:	b002      	add	sp, #8
  406852:	4770      	bx	lr

00406854 <counterio_pulse_pin>:

static void counterio_pulse_pin(uint8_t pin, uint8_t direction, uint32_t wait)
{
  406854:	b538      	push	{r3, r4, r5, lr}
  406856:	4603      	mov	r3, r0
  406858:	4610      	mov	r0, r2
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40685a:	4c0b      	ldr	r4, [pc, #44]	; (406888 <counterio_pulse_pin+0x34>)
  40685c:	eb04 1453 	add.w	r4, r4, r3, lsr #5
  406860:	0264      	lsls	r4, r4, #9
	if (level) {
  406862:	b141      	cbz	r1, 406876 <counterio_pulse_pin+0x22>
	return 1U << (pin & 0x1F);
  406864:	f003 031f 	and.w	r3, r3, #31
  406868:	2501      	movs	r5, #1
  40686a:	409d      	lsls	r5, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40686c:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(pin, direction);
	waitCount(wait);
  40686e:	4b07      	ldr	r3, [pc, #28]	; (40688c <counterio_pulse_pin+0x38>)
  406870:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  406872:	6365      	str	r5, [r4, #52]	; 0x34
  406874:	bd38      	pop	{r3, r4, r5, pc}
	return 1U << (pin & 0x1F);
  406876:	f003 031f 	and.w	r3, r3, #31
  40687a:	2501      	movs	r5, #1
  40687c:	409d      	lsls	r5, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40687e:	6365      	str	r5, [r4, #52]	; 0x34
  406880:	4b02      	ldr	r3, [pc, #8]	; (40688c <counterio_pulse_pin+0x38>)
  406882:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  406884:	6325      	str	r5, [r4, #48]	; 0x30
  406886:	bd38      	pop	{r3, r4, r5, pc}
  406888:	00200707 	.word	0x00200707
  40688c:	0040683d 	.word	0x0040683d

00406890 <CountReady_Handler>:


static void CountReady_Handler(uint32_t id, uint32_t mask)
{
#if READ_MODE
	if(ID_PIOA == id){
  406890:	280a      	cmp	r0, #10
  406892:	d008      	beq.n	4068a6 <CountReady_Handler+0x16>
		if(SIGNAL2A_READY_MASK == (mask & SIGNAL2A_READY_MASK)){
			a_flag = true;
		}
	}

	if(ID_PIOC ==id){
  406894:	280c      	cmp	r0, #12
  406896:	d105      	bne.n	4068a4 <CountReady_Handler+0x14>
		if(SIGNAL1B_READY_MASK == (mask & SIGNAL1B_READY_MASK)){

		}
		if(SIGNAL2B_READY_MASK == (mask & SIGNAL2B_READY_MASK)){
  406898:	f411 7f00 	tst.w	r1, #512	; 0x200
  40689c:	d002      	beq.n	4068a4 <CountReady_Handler+0x14>
			b_flag = true;
  40689e:	2201      	movs	r2, #1
  4068a0:	4b07      	ldr	r3, [pc, #28]	; (4068c0 <CountReady_Handler+0x30>)
  4068a2:	701a      	strb	r2, [r3, #0]
  4068a4:	4770      	bx	lr
		if(SIGNAL1A_READY_MASK == (mask & SIGNAL1A_READY_MASK)){
  4068a6:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
  4068aa:	d002      	beq.n	4068b2 <CountReady_Handler+0x22>
			calibration_flag = true;
  4068ac:	2201      	movs	r2, #1
  4068ae:	4b05      	ldr	r3, [pc, #20]	; (4068c4 <CountReady_Handler+0x34>)
  4068b0:	701a      	strb	r2, [r3, #0]
		if(SIGNAL2A_READY_MASK == (mask & SIGNAL2A_READY_MASK)){
  4068b2:	f411 2f80 	tst.w	r1, #262144	; 0x40000
  4068b6:	d0f5      	beq.n	4068a4 <CountReady_Handler+0x14>
			a_flag = true;
  4068b8:	2201      	movs	r2, #1
  4068ba:	4b03      	ldr	r3, [pc, #12]	; (4068c8 <CountReady_Handler+0x38>)
  4068bc:	701a      	strb	r2, [r3, #0]
  4068be:	4770      	bx	lr
  4068c0:	20404a21 	.word	0x20404a21
  4068c4:	20404a48 	.word	0x20404a48
  4068c8:	20404a22 	.word	0x20404a22

004068cc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4068cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4068ce:	b083      	sub	sp, #12
  4068d0:	4605      	mov	r5, r0
  4068d2:	460c      	mov	r4, r1
	uint32_t val = 0;
  4068d4:	2300      	movs	r3, #0
  4068d6:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4068d8:	4b2a      	ldr	r3, [pc, #168]	; (406984 <usart_serial_getchar+0xb8>)
  4068da:	4298      	cmp	r0, r3
  4068dc:	d013      	beq.n	406906 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4068de:	4b2a      	ldr	r3, [pc, #168]	; (406988 <usart_serial_getchar+0xbc>)
  4068e0:	4298      	cmp	r0, r3
  4068e2:	d018      	beq.n	406916 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4068e4:	4b29      	ldr	r3, [pc, #164]	; (40698c <usart_serial_getchar+0xc0>)
  4068e6:	4298      	cmp	r0, r3
  4068e8:	d01d      	beq.n	406926 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4068ea:	4b29      	ldr	r3, [pc, #164]	; (406990 <usart_serial_getchar+0xc4>)
  4068ec:	429d      	cmp	r5, r3
  4068ee:	d022      	beq.n	406936 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4068f0:	4b28      	ldr	r3, [pc, #160]	; (406994 <usart_serial_getchar+0xc8>)
  4068f2:	429d      	cmp	r5, r3
  4068f4:	d027      	beq.n	406946 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4068f6:	4b28      	ldr	r3, [pc, #160]	; (406998 <usart_serial_getchar+0xcc>)
  4068f8:	429d      	cmp	r5, r3
  4068fa:	d02e      	beq.n	40695a <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4068fc:	4b27      	ldr	r3, [pc, #156]	; (40699c <usart_serial_getchar+0xd0>)
  4068fe:	429d      	cmp	r5, r3
  406900:	d035      	beq.n	40696e <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  406902:	b003      	add	sp, #12
  406904:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  406906:	461f      	mov	r7, r3
  406908:	4e25      	ldr	r6, [pc, #148]	; (4069a0 <usart_serial_getchar+0xd4>)
  40690a:	4621      	mov	r1, r4
  40690c:	4638      	mov	r0, r7
  40690e:	47b0      	blx	r6
  406910:	2800      	cmp	r0, #0
  406912:	d1fa      	bne.n	40690a <usart_serial_getchar+0x3e>
  406914:	e7e9      	b.n	4068ea <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  406916:	461f      	mov	r7, r3
  406918:	4e21      	ldr	r6, [pc, #132]	; (4069a0 <usart_serial_getchar+0xd4>)
  40691a:	4621      	mov	r1, r4
  40691c:	4638      	mov	r0, r7
  40691e:	47b0      	blx	r6
  406920:	2800      	cmp	r0, #0
  406922:	d1fa      	bne.n	40691a <usart_serial_getchar+0x4e>
  406924:	e7e4      	b.n	4068f0 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  406926:	461f      	mov	r7, r3
  406928:	4e1d      	ldr	r6, [pc, #116]	; (4069a0 <usart_serial_getchar+0xd4>)
  40692a:	4621      	mov	r1, r4
  40692c:	4638      	mov	r0, r7
  40692e:	47b0      	blx	r6
  406930:	2800      	cmp	r0, #0
  406932:	d1fa      	bne.n	40692a <usart_serial_getchar+0x5e>
  406934:	e7df      	b.n	4068f6 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  406936:	461f      	mov	r7, r3
  406938:	4e19      	ldr	r6, [pc, #100]	; (4069a0 <usart_serial_getchar+0xd4>)
  40693a:	4621      	mov	r1, r4
  40693c:	4638      	mov	r0, r7
  40693e:	47b0      	blx	r6
  406940:	2800      	cmp	r0, #0
  406942:	d1fa      	bne.n	40693a <usart_serial_getchar+0x6e>
  406944:	e7da      	b.n	4068fc <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  406946:	461e      	mov	r6, r3
  406948:	4d16      	ldr	r5, [pc, #88]	; (4069a4 <usart_serial_getchar+0xd8>)
  40694a:	a901      	add	r1, sp, #4
  40694c:	4630      	mov	r0, r6
  40694e:	47a8      	blx	r5
  406950:	2800      	cmp	r0, #0
  406952:	d1fa      	bne.n	40694a <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  406954:	9b01      	ldr	r3, [sp, #4]
  406956:	7023      	strb	r3, [r4, #0]
  406958:	e7d3      	b.n	406902 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40695a:	461e      	mov	r6, r3
  40695c:	4d11      	ldr	r5, [pc, #68]	; (4069a4 <usart_serial_getchar+0xd8>)
  40695e:	a901      	add	r1, sp, #4
  406960:	4630      	mov	r0, r6
  406962:	47a8      	blx	r5
  406964:	2800      	cmp	r0, #0
  406966:	d1fa      	bne.n	40695e <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  406968:	9b01      	ldr	r3, [sp, #4]
  40696a:	7023      	strb	r3, [r4, #0]
  40696c:	e7c9      	b.n	406902 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40696e:	461e      	mov	r6, r3
  406970:	4d0c      	ldr	r5, [pc, #48]	; (4069a4 <usart_serial_getchar+0xd8>)
  406972:	a901      	add	r1, sp, #4
  406974:	4630      	mov	r0, r6
  406976:	47a8      	blx	r5
  406978:	2800      	cmp	r0, #0
  40697a:	d1fa      	bne.n	406972 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  40697c:	9b01      	ldr	r3, [sp, #4]
  40697e:	7023      	strb	r3, [r4, #0]
}
  406980:	e7bf      	b.n	406902 <usart_serial_getchar+0x36>
  406982:	bf00      	nop
  406984:	400e0800 	.word	0x400e0800
  406988:	400e0a00 	.word	0x400e0a00
  40698c:	400e1a00 	.word	0x400e1a00
  406990:	400e1c00 	.word	0x400e1c00
  406994:	40024000 	.word	0x40024000
  406998:	40028000 	.word	0x40028000
  40699c:	4002c000 	.word	0x4002c000
  4069a0:	00400dbd 	.word	0x00400dbd
  4069a4:	00400ecb 	.word	0x00400ecb

004069a8 <usart_serial_putchar>:
{
  4069a8:	b570      	push	{r4, r5, r6, lr}
  4069aa:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  4069ac:	4b2a      	ldr	r3, [pc, #168]	; (406a58 <usart_serial_putchar+0xb0>)
  4069ae:	4298      	cmp	r0, r3
  4069b0:	d013      	beq.n	4069da <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  4069b2:	4b2a      	ldr	r3, [pc, #168]	; (406a5c <usart_serial_putchar+0xb4>)
  4069b4:	4298      	cmp	r0, r3
  4069b6:	d019      	beq.n	4069ec <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  4069b8:	4b29      	ldr	r3, [pc, #164]	; (406a60 <usart_serial_putchar+0xb8>)
  4069ba:	4298      	cmp	r0, r3
  4069bc:	d01f      	beq.n	4069fe <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  4069be:	4b29      	ldr	r3, [pc, #164]	; (406a64 <usart_serial_putchar+0xbc>)
  4069c0:	4298      	cmp	r0, r3
  4069c2:	d025      	beq.n	406a10 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  4069c4:	4b28      	ldr	r3, [pc, #160]	; (406a68 <usart_serial_putchar+0xc0>)
  4069c6:	4298      	cmp	r0, r3
  4069c8:	d02b      	beq.n	406a22 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  4069ca:	4b28      	ldr	r3, [pc, #160]	; (406a6c <usart_serial_putchar+0xc4>)
  4069cc:	4298      	cmp	r0, r3
  4069ce:	d031      	beq.n	406a34 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  4069d0:	4b27      	ldr	r3, [pc, #156]	; (406a70 <usart_serial_putchar+0xc8>)
  4069d2:	4298      	cmp	r0, r3
  4069d4:	d037      	beq.n	406a46 <usart_serial_putchar+0x9e>
	return 0;
  4069d6:	2000      	movs	r0, #0
}
  4069d8:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4069da:	461e      	mov	r6, r3
  4069dc:	4d25      	ldr	r5, [pc, #148]	; (406a74 <usart_serial_putchar+0xcc>)
  4069de:	4621      	mov	r1, r4
  4069e0:	4630      	mov	r0, r6
  4069e2:	47a8      	blx	r5
  4069e4:	2800      	cmp	r0, #0
  4069e6:	d1fa      	bne.n	4069de <usart_serial_putchar+0x36>
		return 1;
  4069e8:	2001      	movs	r0, #1
  4069ea:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4069ec:	461e      	mov	r6, r3
  4069ee:	4d21      	ldr	r5, [pc, #132]	; (406a74 <usart_serial_putchar+0xcc>)
  4069f0:	4621      	mov	r1, r4
  4069f2:	4630      	mov	r0, r6
  4069f4:	47a8      	blx	r5
  4069f6:	2800      	cmp	r0, #0
  4069f8:	d1fa      	bne.n	4069f0 <usart_serial_putchar+0x48>
		return 1;
  4069fa:	2001      	movs	r0, #1
  4069fc:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4069fe:	461e      	mov	r6, r3
  406a00:	4d1c      	ldr	r5, [pc, #112]	; (406a74 <usart_serial_putchar+0xcc>)
  406a02:	4621      	mov	r1, r4
  406a04:	4630      	mov	r0, r6
  406a06:	47a8      	blx	r5
  406a08:	2800      	cmp	r0, #0
  406a0a:	d1fa      	bne.n	406a02 <usart_serial_putchar+0x5a>
		return 1;
  406a0c:	2001      	movs	r0, #1
  406a0e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  406a10:	461e      	mov	r6, r3
  406a12:	4d18      	ldr	r5, [pc, #96]	; (406a74 <usart_serial_putchar+0xcc>)
  406a14:	4621      	mov	r1, r4
  406a16:	4630      	mov	r0, r6
  406a18:	47a8      	blx	r5
  406a1a:	2800      	cmp	r0, #0
  406a1c:	d1fa      	bne.n	406a14 <usart_serial_putchar+0x6c>
		return 1;
  406a1e:	2001      	movs	r0, #1
  406a20:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  406a22:	461e      	mov	r6, r3
  406a24:	4d14      	ldr	r5, [pc, #80]	; (406a78 <usart_serial_putchar+0xd0>)
  406a26:	4621      	mov	r1, r4
  406a28:	4630      	mov	r0, r6
  406a2a:	47a8      	blx	r5
  406a2c:	2800      	cmp	r0, #0
  406a2e:	d1fa      	bne.n	406a26 <usart_serial_putchar+0x7e>
		return 1;
  406a30:	2001      	movs	r0, #1
  406a32:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  406a34:	461e      	mov	r6, r3
  406a36:	4d10      	ldr	r5, [pc, #64]	; (406a78 <usart_serial_putchar+0xd0>)
  406a38:	4621      	mov	r1, r4
  406a3a:	4630      	mov	r0, r6
  406a3c:	47a8      	blx	r5
  406a3e:	2800      	cmp	r0, #0
  406a40:	d1fa      	bne.n	406a38 <usart_serial_putchar+0x90>
		return 1;
  406a42:	2001      	movs	r0, #1
  406a44:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  406a46:	461e      	mov	r6, r3
  406a48:	4d0b      	ldr	r5, [pc, #44]	; (406a78 <usart_serial_putchar+0xd0>)
  406a4a:	4621      	mov	r1, r4
  406a4c:	4630      	mov	r0, r6
  406a4e:	47a8      	blx	r5
  406a50:	2800      	cmp	r0, #0
  406a52:	d1fa      	bne.n	406a4a <usart_serial_putchar+0xa2>
		return 1;
  406a54:	2001      	movs	r0, #1
  406a56:	bd70      	pop	{r4, r5, r6, pc}
  406a58:	400e0800 	.word	0x400e0800
  406a5c:	400e0a00 	.word	0x400e0a00
  406a60:	400e1a00 	.word	0x400e1a00
  406a64:	400e1c00 	.word	0x400e1c00
  406a68:	40024000 	.word	0x40024000
  406a6c:	40028000 	.word	0x40028000
  406a70:	4002c000 	.word	0x4002c000
  406a74:	00400dab 	.word	0x00400dab
  406a78:	00400eb5 	.word	0x00400eb5

00406a7c <readCounterByte>:
{
  406a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406a80:	b087      	sub	sp, #28
  406a82:	4606      	mov	r6, r0
  406a84:	468b      	mov	fp, r1
  406a86:	9301      	str	r3, [sp, #4]
	uint8_t volatile readByte = 0;
  406a88:	2300      	movs	r3, #0
  406a8a:	f88d 3017 	strb.w	r3, [sp, #23]
	uint8_t volatile bit = 0;
  406a8e:	f88d 3016 	strb.w	r3, [sp, #22]
  406a92:	468e      	mov	lr, r1
  406a94:	1d0f      	adds	r7, r1, #4
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406a96:	4d44      	ldr	r5, [pc, #272]	; (406ba8 <readCounterByte+0x12c>)
	return 1U << (pin & 0x1F);
  406a98:	2401      	movs	r4, #1
		if(i==byte){
  406a9a:	eba1 030e 	sub.w	r3, r1, lr
  406a9e:	b2db      	uxtb	r3, r3
  406aa0:	429a      	cmp	r2, r3
  406aa2:	d076      	beq.n	406b92 <readCounterByte+0x116>
			ioport_set_pin_level(selectPins[i], HIGH);
  406aa4:	780b      	ldrb	r3, [r1, #0]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406aa6:	eb05 1053 	add.w	r0, r5, r3, lsr #5
  406aaa:	0240      	lsls	r0, r0, #9
	return 1U << (pin & 0x1F);
  406aac:	f003 031f 	and.w	r3, r3, #31
  406ab0:	fa04 f303 	lsl.w	r3, r4, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  406ab4:	6303      	str	r3, [r0, #48]	; 0x30
  406ab6:	3101      	adds	r1, #1
	for (uint8_t i = 0; i<4; i++)
  406ab8:	42b9      	cmp	r1, r7
  406aba:	d1ee      	bne.n	406a9a <readCounterByte+0x1e>
	waitCount(PULSE_LENGTH);
  406abc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  406ac0:	4b3a      	ldr	r3, [pc, #232]	; (406bac <readCounterByte+0x130>)
  406ac2:	4798      	blx	r3
  406ac4:	1e74      	subs	r4, r6, #1
  406ac6:	f10d 0513 	add.w	r5, sp, #19
  406aca:	f106 0a07 	add.w	sl, r6, #7
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406ace:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 406ba8 <readCounterByte+0x12c>
		sprintf(tempString, "%u", bit);
  406ad2:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 406bb8 <readCounterByte+0x13c>
  406ad6:	4f36      	ldr	r7, [pc, #216]	; (406bb0 <readCounterByte+0x134>)
		bit = ioport_get_pin_level(outputPins[i]);
  406ad8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  406adc:	eb09 1253 	add.w	r2, r9, r3, lsr #5
  406ae0:	0252      	lsls	r2, r2, #9
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  406ae2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  406ae4:	f003 031f 	and.w	r3, r3, #31
  406ae8:	2201      	movs	r2, #1
  406aea:	fa02 f303 	lsl.w	r3, r2, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  406aee:	420b      	tst	r3, r1
  406af0:	bf14      	ite	ne
  406af2:	4613      	movne	r3, r2
  406af4:	2300      	moveq	r3, #0
  406af6:	f88d 3016 	strb.w	r3, [sp, #22]
		readByte = readByte | (bit<<i);
  406afa:	f89d 2016 	ldrb.w	r2, [sp, #22]
  406afe:	b2d2      	uxtb	r2, r2
  406b00:	f89d 3017 	ldrb.w	r3, [sp, #23]
  406b04:	1ba1      	subs	r1, r4, r6
  406b06:	408a      	lsls	r2, r1
  406b08:	4313      	orrs	r3, r2
  406b0a:	b2db      	uxtb	r3, r3
  406b0c:	f88d 3017 	strb.w	r3, [sp, #23]
		sprintf(tempString, "%u", bit);
  406b10:	f89d 2016 	ldrb.w	r2, [sp, #22]
  406b14:	4641      	mov	r1, r8
  406b16:	a802      	add	r0, sp, #8
  406b18:	47b8      	blx	r7
		bitString[7-i]= tempString[0];
  406b1a:	f89d 3008 	ldrb.w	r3, [sp, #8]
  406b1e:	f805 3901 	strb.w	r3, [r5], #-1
	for (uint8_t i=0; i<8; i++)
  406b22:	4554      	cmp	r4, sl
  406b24:	d1d8      	bne.n	406ad8 <readCounterByte+0x5c>
	bitString[8]='\0';
  406b26:	2300      	movs	r3, #0
  406b28:	f88d 3014 	strb.w	r3, [sp, #20]
	ioport_set_pin_level(selectPins[0],HIGH);
  406b2c:	f89b 2000 	ldrb.w	r2, [fp]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406b30:	4b1d      	ldr	r3, [pc, #116]	; (406ba8 <readCounterByte+0x12c>)
  406b32:	eb03 1052 	add.w	r0, r3, r2, lsr #5
  406b36:	0240      	lsls	r0, r0, #9
	return 1U << (pin & 0x1F);
  406b38:	f002 011f 	and.w	r1, r2, #31
  406b3c:	2201      	movs	r2, #1
  406b3e:	fa02 f101 	lsl.w	r1, r2, r1
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  406b42:	6301      	str	r1, [r0, #48]	; 0x30
	ioport_set_pin_level(selectPins[1],HIGH);
  406b44:	f89b 1001 	ldrb.w	r1, [fp, #1]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406b48:	eb03 1051 	add.w	r0, r3, r1, lsr #5
  406b4c:	0240      	lsls	r0, r0, #9
	return 1U << (pin & 0x1F);
  406b4e:	f001 011f 	and.w	r1, r1, #31
  406b52:	fa02 f101 	lsl.w	r1, r2, r1
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  406b56:	6301      	str	r1, [r0, #48]	; 0x30
	ioport_set_pin_level(selectPins[2],HIGH);
  406b58:	f89b 1002 	ldrb.w	r1, [fp, #2]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406b5c:	eb03 1051 	add.w	r0, r3, r1, lsr #5
  406b60:	0240      	lsls	r0, r0, #9
	return 1U << (pin & 0x1F);
  406b62:	f001 011f 	and.w	r1, r1, #31
  406b66:	fa02 f101 	lsl.w	r1, r2, r1
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  406b6a:	6301      	str	r1, [r0, #48]	; 0x30
	ioport_set_pin_level(selectPins[3],HIGH);
  406b6c:	f89b 1003 	ldrb.w	r1, [fp, #3]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406b70:	eb03 1351 	add.w	r3, r3, r1, lsr #5
  406b74:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
  406b76:	f001 011f 	and.w	r1, r1, #31
  406b7a:	408a      	lsls	r2, r1
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  406b7c:	631a      	str	r2, [r3, #48]	; 0x30
	strncpy(p_binaryString, bitString, 9);
  406b7e:	2209      	movs	r2, #9
  406b80:	a903      	add	r1, sp, #12
  406b82:	9801      	ldr	r0, [sp, #4]
  406b84:	4b0b      	ldr	r3, [pc, #44]	; (406bb4 <readCounterByte+0x138>)
  406b86:	4798      	blx	r3
	return readByte;
  406b88:	f89d 0017 	ldrb.w	r0, [sp, #23]
}
  406b8c:	b007      	add	sp, #28
  406b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ioport_set_pin_level(selectPins[i], LOW);
  406b92:	780b      	ldrb	r3, [r1, #0]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406b94:	eb05 1053 	add.w	r0, r5, r3, lsr #5
  406b98:	0240      	lsls	r0, r0, #9
	return 1U << (pin & 0x1F);
  406b9a:	f003 031f 	and.w	r3, r3, #31
  406b9e:	fa04 f303 	lsl.w	r3, r4, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  406ba2:	6343      	str	r3, [r0, #52]	; 0x34
  406ba4:	e787      	b.n	406ab6 <readCounterByte+0x3a>
  406ba6:	bf00      	nop
  406ba8:	00200707 	.word	0x00200707
  406bac:	0040683d 	.word	0x0040683d
  406bb0:	00408035 	.word	0x00408035
  406bb4:	0040825d 	.word	0x0040825d
  406bb8:	0040ecd0 	.word	0x0040ecd0

00406bbc <printCountValue>:
static void printCountValue(struct counter cntr){
  406bbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406bc0:	b089      	sub	sp, #36	; 0x24
  406bc2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
	a_flag = 0;
  406bc6:	2500      	movs	r5, #0
  406bc8:	4b2e      	ldr	r3, [pc, #184]	; (406c84 <printCountValue+0xc8>)
  406bca:	701d      	strb	r5, [r3, #0]
	b_flag = 0;
  406bcc:	4b2e      	ldr	r3, [pc, #184]	; (406c88 <printCountValue+0xcc>)
  406bce:	701d      	strb	r5, [r3, #0]
	char bitString[9] = "";
  406bd0:	9505      	str	r5, [sp, #20]
  406bd2:	9506      	str	r5, [sp, #24]
  406bd4:	f88d 501c 	strb.w	r5, [sp, #28]
	counterio_pulse_pin(cntr.registerClkPin, HIGH, 10000);
  406bd8:	f242 7210 	movw	r2, #10000	; 0x2710
  406bdc:	2101      	movs	r1, #1
  406bde:	f89d 000c 	ldrb.w	r0, [sp, #12]
  406be2:	4b2a      	ldr	r3, [pc, #168]	; (406c8c <printCountValue+0xd0>)
  406be4:	4798      	blx	r3
	waitCount(PULSE_LENGTH);
  406be6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  406bea:	4b29      	ldr	r3, [pc, #164]	; (406c90 <printCountValue+0xd4>)
  406bec:	4798      	blx	r3
  406bee:	462c      	mov	r4, r5
		readByte = readCounterByte(cntr.outputPins, cntr.selectPins, byteIndex, p_bitString);
  406bf0:	4f28      	ldr	r7, [pc, #160]	; (406c94 <printCountValue+0xd8>)
		waitCount(PULSE_LENGTH);
  406bf2:	4e27      	ldr	r6, [pc, #156]	; (406c90 <printCountValue+0xd4>)
		readByte = readCounterByte(cntr.outputPins, cntr.selectPins, byteIndex, p_bitString);
  406bf4:	ab05      	add	r3, sp, #20
  406bf6:	b2e2      	uxtb	r2, r4
  406bf8:	4669      	mov	r1, sp
  406bfa:	a801      	add	r0, sp, #4
  406bfc:	47b8      	blx	r7
		readCount += ((uint32_t) readByte) << (8*byteIndex);
  406bfe:	00e3      	lsls	r3, r4, #3
  406c00:	4098      	lsls	r0, r3
  406c02:	4405      	add	r5, r0
		waitCount(PULSE_LENGTH);
  406c04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  406c08:	47b0      	blx	r6
  406c0a:	3401      	adds	r4, #1
	for(uint8_t byteIndex = 0; byteIndex<4; byteIndex++)
  406c0c:	2c04      	cmp	r4, #4
  406c0e:	d1f1      	bne.n	406bf4 <printCountValue+0x38>
	counterio_pulse_pin(cntr.clearPin, LOW, 10000);
  406c10:	f242 7210 	movw	r2, #10000	; 0x2710
  406c14:	2100      	movs	r1, #0
  406c16:	f89d 000d 	ldrb.w	r0, [sp, #13]
  406c1a:	4b1c      	ldr	r3, [pc, #112]	; (406c8c <printCountValue+0xd0>)
  406c1c:	4798      	blx	r3
	if(readCount > calibrationCount){
  406c1e:	4b1e      	ldr	r3, [pc, #120]	; (406c98 <printCountValue+0xdc>)
  406c20:	681b      	ldr	r3, [r3, #0]
  406c22:	429d      	cmp	r5, r3
  406c24:	d827      	bhi.n	406c76 <printCountValue+0xba>
	printf("[%c] Count: %u\r\n", cntr.label, readCount);
  406c26:	462a      	mov	r2, r5
  406c28:	f89d 100e 	ldrb.w	r1, [sp, #14]
  406c2c:	481b      	ldr	r0, [pc, #108]	; (406c9c <printCountValue+0xe0>)
  406c2e:	4e1c      	ldr	r6, [pc, #112]	; (406ca0 <printCountValue+0xe4>)
  406c30:	47b0      	blx	r6
	rawDeltaT = (double) readCount * OSCILLATOR_PERIOD;
  406c32:	4628      	mov	r0, r5
  406c34:	4b1b      	ldr	r3, [pc, #108]	; (406ca4 <printCountValue+0xe8>)
  406c36:	4798      	blx	r3
  406c38:	4680      	mov	r8, r0
  406c3a:	4689      	mov	r9, r1
	adjustedDeltaT = (double) readCount * calibrationFactor * OSCILLATOR_PERIOD;
  406c3c:	4c1a      	ldr	r4, [pc, #104]	; (406ca8 <printCountValue+0xec>)
  406c3e:	4b1b      	ldr	r3, [pc, #108]	; (406cac <printCountValue+0xf0>)
  406c40:	e9d3 2300 	ldrd	r2, r3, [r3]
  406c44:	47a0      	blx	r4
  406c46:	2200      	movs	r2, #0
  406c48:	4b19      	ldr	r3, [pc, #100]	; (406cb0 <printCountValue+0xf4>)
  406c4a:	47a0      	blx	r4
  406c4c:	4d19      	ldr	r5, [pc, #100]	; (406cb4 <printCountValue+0xf8>)
  406c4e:	47a8      	blx	r5
  406c50:	4b19      	ldr	r3, [pc, #100]	; (406cb8 <printCountValue+0xfc>)
  406c52:	6018      	str	r0, [r3, #0]
	rawDeltaT = (double) readCount * OSCILLATOR_PERIOD;
  406c54:	2200      	movs	r2, #0
  406c56:	4b16      	ldr	r3, [pc, #88]	; (406cb0 <printCountValue+0xf4>)
  406c58:	4640      	mov	r0, r8
  406c5a:	4649      	mov	r1, r9
  406c5c:	47a0      	blx	r4
  406c5e:	47a8      	blx	r5
	printf("[%c] raw delta-t: %uns\r\n", cntr.label, rawDeltaT);
  406c60:	4602      	mov	r2, r0
  406c62:	f89d 100e 	ldrb.w	r1, [sp, #14]
  406c66:	4815      	ldr	r0, [pc, #84]	; (406cbc <printCountValue+0x100>)
  406c68:	47b0      	blx	r6
	printf("\r\n");
  406c6a:	4815      	ldr	r0, [pc, #84]	; (406cc0 <printCountValue+0x104>)
  406c6c:	4b15      	ldr	r3, [pc, #84]	; (406cc4 <printCountValue+0x108>)
  406c6e:	4798      	blx	r3
}
  406c70:	b009      	add	sp, #36	; 0x24
  406c72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printf("!InvalidCount\r\n");
  406c76:	4814      	ldr	r0, [pc, #80]	; (406cc8 <printCountValue+0x10c>)
  406c78:	4b12      	ldr	r3, [pc, #72]	; (406cc4 <printCountValue+0x108>)
  406c7a:	4798      	blx	r3
		readCount -= calibrationCount;
  406c7c:	4b06      	ldr	r3, [pc, #24]	; (406c98 <printCountValue+0xdc>)
  406c7e:	681b      	ldr	r3, [r3, #0]
  406c80:	1aed      	subs	r5, r5, r3
  406c82:	e7d0      	b.n	406c26 <printCountValue+0x6a>
  406c84:	20404a22 	.word	0x20404a22
  406c88:	20404a21 	.word	0x20404a21
  406c8c:	00406855 	.word	0x00406855
  406c90:	0040683d 	.word	0x0040683d
  406c94:	00406a7d 	.word	0x00406a7d
  406c98:	20404a40 	.word	0x20404a40
  406c9c:	0040eca0 	.word	0x0040eca0
  406ca0:	00407dc1 	.word	0x00407dc1
  406ca4:	004075f1 	.word	0x004075f1
  406ca8:	004076dd 	.word	0x004076dd
  406cac:	20404a28 	.word	0x20404a28
  406cb0:	40340000 	.word	0x40340000
  406cb4:	00407b01 	.word	0x00407b01
  406cb8:	20404a38 	.word	0x20404a38
  406cbc:	0040ecb4 	.word	0x0040ecb4
  406cc0:	0040ec0c 	.word	0x0040ec0c
  406cc4:	00407e85 	.word	0x00407e85
  406cc8:	0040ec90 	.word	0x0040ec90

00406ccc <SysTick_Handler>:
 *  Increments the g_ul_ms_ticks counter.
 */
// [main_systick_handler]
void SysTick_Handler(void)
{
	g_ul_ms_ticks++;
  406ccc:	4a02      	ldr	r2, [pc, #8]	; (406cd8 <SysTick_Handler+0xc>)
  406cce:	6813      	ldr	r3, [r2, #0]
  406cd0:	3301      	adds	r3, #1
  406cd2:	6013      	str	r3, [r2, #0]
  406cd4:	4770      	bx	lr
  406cd6:	bf00      	nop
  406cd8:	204038ec 	.word	0x204038ec
  406cdc:	00000000 	.word	0x00000000

00406ce0 <main>:
/**
 * \brief Main program function. Configure the hardware, initialize lwIP
 * TCP/IP stack, and start HTTP service.
 */
int main(void)
{
  406ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406ce4:	b08d      	sub	sp, #52	; 0x34
	/* Global variable init */
	sendBufferIndex = 0;
  406ce6:	2400      	movs	r4, #0
  406ce8:	4bc6      	ldr	r3, [pc, #792]	; (407004 <main+0x324>)
  406cea:	701c      	strb	r4, [r3, #0]
	receiveBufferIndex = 0;
  406cec:	4bc6      	ldr	r3, [pc, #792]	; (407008 <main+0x328>)
  406cee:	701c      	strb	r4, [r3, #0]
	
	/* Initialize the SAM system. */
	sysclk_init();
  406cf0:	4bc6      	ldr	r3, [pc, #792]	; (40700c <main+0x32c>)
  406cf2:	4798      	blx	r3
	board_init();
  406cf4:	4bc6      	ldr	r3, [pc, #792]	; (407010 <main+0x330>)
  406cf6:	4798      	blx	r3
  406cf8:	200e      	movs	r0, #14
  406cfa:	4ec6      	ldr	r6, [pc, #792]	; (407014 <main+0x334>)
  406cfc:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  406cfe:	4dc6      	ldr	r5, [pc, #792]	; (407018 <main+0x338>)
  406d00:	4bc6      	ldr	r3, [pc, #792]	; (40701c <main+0x33c>)
  406d02:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  406d04:	4ac6      	ldr	r2, [pc, #792]	; (407020 <main+0x340>)
  406d06:	4bc7      	ldr	r3, [pc, #796]	; (407024 <main+0x344>)
  406d08:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  406d0a:	4ac7      	ldr	r2, [pc, #796]	; (407028 <main+0x348>)
  406d0c:	4bc7      	ldr	r3, [pc, #796]	; (40702c <main+0x34c>)
  406d0e:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  406d10:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  406d14:	9306      	str	r3, [sp, #24]
	usart_settings.char_length = opt->charlength;
  406d16:	23c0      	movs	r3, #192	; 0xc0
  406d18:	9307      	str	r3, [sp, #28]
	usart_settings.parity_type = opt->paritytype;
  406d1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  406d1e:	9308      	str	r3, [sp, #32]
	usart_settings.stop_bits= opt->stopbits;
  406d20:	9409      	str	r4, [sp, #36]	; 0x24
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  406d22:	940a      	str	r4, [sp, #40]	; 0x28
  406d24:	200e      	movs	r0, #14
  406d26:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  406d28:	4ac1      	ldr	r2, [pc, #772]	; (407030 <main+0x350>)
  406d2a:	a906      	add	r1, sp, #24
  406d2c:	4628      	mov	r0, r5
  406d2e:	4bc1      	ldr	r3, [pc, #772]	; (407034 <main+0x354>)
  406d30:	4798      	blx	r3
		usart_enable_tx(p_usart);
  406d32:	4628      	mov	r0, r5
  406d34:	4bc0      	ldr	r3, [pc, #768]	; (407038 <main+0x358>)
  406d36:	4798      	blx	r3
		usart_enable_rx(p_usart);
  406d38:	4628      	mov	r0, r5
  406d3a:	4bc0      	ldr	r3, [pc, #768]	; (40703c <main+0x35c>)
  406d3c:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  406d3e:	4ec0      	ldr	r6, [pc, #768]	; (407040 <main+0x360>)
  406d40:	6833      	ldr	r3, [r6, #0]
  406d42:	4621      	mov	r1, r4
  406d44:	6898      	ldr	r0, [r3, #8]
  406d46:	4dbf      	ldr	r5, [pc, #764]	; (407044 <main+0x364>)
  406d48:	47a8      	blx	r5
	setbuf(stdin, NULL);
  406d4a:	6833      	ldr	r3, [r6, #0]
  406d4c:	4621      	mov	r1, r4
  406d4e:	6858      	ldr	r0, [r3, #4]
  406d50:	47a8      	blx	r5
	setbuf(stdout, NULL);
  406d52:	6833      	ldr	r3, [r6, #0]
  406d54:	4621      	mov	r1, r4
  406d56:	6898      	ldr	r0, [r3, #8]
  406d58:	47a8      	blx	r5

	/* Configure debug UART */
	configure_console();

	printf("--- Console configured\r\n");
  406d5a:	48bb      	ldr	r0, [pc, #748]	; (407048 <main+0x368>)
  406d5c:	4cbb      	ldr	r4, [pc, #748]	; (40704c <main+0x36c>)
  406d5e:	47a0      	blx	r4
	printf("--- READ_MODE: %u", READ_MODE);
  406d60:	2101      	movs	r1, #1
  406d62:	48bb      	ldr	r0, [pc, #748]	; (407050 <main+0x370>)
  406d64:	4bbb      	ldr	r3, [pc, #748]	; (407054 <main+0x374>)
  406d66:	4798      	blx	r3

	/* Bring up the Ethernet interface & initialize timer0, channel0. */
	init_ethernet();
  406d68:	4bbb      	ldr	r3, [pc, #748]	; (407058 <main+0x378>)
  406d6a:	4798      	blx	r3
	
	printf("--- Ethernet initialized\r\n");
  406d6c:	48bb      	ldr	r0, [pc, #748]	; (40705c <main+0x37c>)
  406d6e:	47a0      	blx	r4

	/* Bring up the web server. */
	//httpd_init();
	echo_init();
  406d70:	4bbb      	ldr	r3, [pc, #748]	; (407060 <main+0x380>)
  406d72:	4798      	blx	r3
	printf("--- HTTP initialized\r\n");
  406d74:	48bb      	ldr	r0, [pc, #748]	; (407064 <main+0x384>)
  406d76:	47a0      	blx	r4
  406d78:	4dbb      	ldr	r5, [pc, #748]	; (407068 <main+0x388>)
  406d7a:	1d2c      	adds	r4, r5, #4
  406d7c:	f8df 831c 	ldr.w	r8, [pc, #796]	; 40709c <main+0x3bc>
  406d80:	f8df c31c 	ldr.w	ip, [pc, #796]	; 4070a0 <main+0x3c0>
  406d84:	350c      	adds	r5, #12
  406d86:	46a6      	mov	lr, r4
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406d88:	4fb8      	ldr	r7, [pc, #736]	; (40706c <main+0x38c>)
	return 1U << (pin & 0x1F);
  406d8a:	2601      	movs	r6, #1
	
	
	// ---- IO SETUP ----
	for(uint8_t i = 0; i < 8 ; i++){
		ioport_set_pin_dir(counterA.outputPins[i], IOPORT_DIR_INPUT);
  406d8c:	f81e 3b01 	ldrb.w	r3, [lr], #1
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406d90:	eb07 1a53 	add.w	sl, r7, r3, lsr #5
  406d94:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
	return 1U << (pin & 0x1F);
  406d98:	f003 031f 	and.w	r3, r3, #31
  406d9c:	fa06 f103 	lsl.w	r1, r6, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406da0:	f8ca 1014 	str.w	r1, [sl, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406da4:	f8ca 10a0 	str.w	r1, [sl, #160]	; 0xa0
		ioport_set_pin_dir(counterB.outputPins[i], IOPORT_DIR_INPUT);
  406da8:	f818 3b01 	ldrb.w	r3, [r8], #1
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406dac:	eb07 1953 	add.w	r9, r7, r3, lsr #5
  406db0:	ea4f 2949 	mov.w	r9, r9, lsl #9
	return 1U << (pin & 0x1F);
  406db4:	f003 031f 	and.w	r3, r3, #31
  406db8:	fa06 f203 	lsl.w	r2, r6, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406dbc:	f8c9 2014 	str.w	r2, [r9, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406dc0:	f8c9 20a0 	str.w	r2, [r9, #160]	; 0xa0
		ioport_set_pin_dir(counterC.outputPins[i], IOPORT_DIR_INPUT);
  406dc4:	f81c 3b01 	ldrb.w	r3, [ip], #1
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406dc8:	eb07 1053 	add.w	r0, r7, r3, lsr #5
  406dcc:	0240      	lsls	r0, r0, #9
	return 1U << (pin & 0x1F);
  406dce:	f003 031f 	and.w	r3, r3, #31
  406dd2:	fa06 f303 	lsl.w	r3, r6, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406dd6:	6143      	str	r3, [r0, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406dd8:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
		base->PIO_PUDR = mask;
  406ddc:	f8ca 1060 	str.w	r1, [sl, #96]	; 0x60
		base->PIO_PPDER = mask;
  406de0:	f8ca 1094 	str.w	r1, [sl, #148]	; 0x94
		base->PIO_MDDR = mask;
  406de4:	f8ca 1054 	str.w	r1, [sl, #84]	; 0x54
		base->PIO_IFDR = mask;
  406de8:	f8ca 1024 	str.w	r1, [sl, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406dec:	f8ca 1080 	str.w	r1, [sl, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406df0:	f8da b070 	ldr.w	fp, [sl, #112]	; 0x70
  406df4:	43c9      	mvns	r1, r1
  406df6:	ea0b 0b01 	and.w	fp, fp, r1
  406dfa:	f8ca b070 	str.w	fp, [sl, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406dfe:	f8da b074 	ldr.w	fp, [sl, #116]	; 0x74
  406e02:	ea01 010b 	and.w	r1, r1, fp
  406e06:	f8ca 1074 	str.w	r1, [sl, #116]	; 0x74
		base->PIO_PUDR = mask;
  406e0a:	f8c9 2060 	str.w	r2, [r9, #96]	; 0x60
		base->PIO_PPDER = mask;
  406e0e:	f8c9 2094 	str.w	r2, [r9, #148]	; 0x94
		base->PIO_MDDR = mask;
  406e12:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
		base->PIO_IFDR = mask;
  406e16:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406e1a:	f8c9 2080 	str.w	r2, [r9, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406e1e:	f8d9 1070 	ldr.w	r1, [r9, #112]	; 0x70
  406e22:	43d2      	mvns	r2, r2
  406e24:	4011      	ands	r1, r2
  406e26:	f8c9 1070 	str.w	r1, [r9, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406e2a:	f8d9 1074 	ldr.w	r1, [r9, #116]	; 0x74
  406e2e:	400a      	ands	r2, r1
  406e30:	f8c9 2074 	str.w	r2, [r9, #116]	; 0x74
		base->PIO_PUDR = mask;
  406e34:	6603      	str	r3, [r0, #96]	; 0x60
		base->PIO_PPDER = mask;
  406e36:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
		base->PIO_MDDR = mask;
  406e3a:	6543      	str	r3, [r0, #84]	; 0x54
		base->PIO_IFDR = mask;
  406e3c:	6243      	str	r3, [r0, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  406e3e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  406e42:	6f02      	ldr	r2, [r0, #112]	; 0x70
  406e44:	43db      	mvns	r3, r3
  406e46:	401a      	ands	r2, r3
  406e48:	6702      	str	r2, [r0, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  406e4a:	6f42      	ldr	r2, [r0, #116]	; 0x74
  406e4c:	4013      	ands	r3, r2
  406e4e:	6743      	str	r3, [r0, #116]	; 0x74
	for(uint8_t i = 0; i < 8 ; i++){
  406e50:	45ae      	cmp	lr, r5
  406e52:	d19b      	bne.n	406d8c <main+0xac>
		ioport_set_pin_mode(counterA.outputPins[i], IOPORT_MODE_PULLDOWN);
		ioport_set_pin_mode(counterB.outputPins[i], IOPORT_MODE_PULLDOWN);
		ioport_set_pin_mode(counterC.outputPins[i], IOPORT_MODE_PULLDOWN);
	}
	
	printf("--- Counter data pins configured\r\n");
  406e54:	4886      	ldr	r0, [pc, #536]	; (407070 <main+0x390>)
  406e56:	4b7d      	ldr	r3, [pc, #500]	; (40704c <main+0x36c>)
  406e58:	4798      	blx	r3
  406e5a:	4883      	ldr	r0, [pc, #524]	; (407068 <main+0x388>)
  406e5c:	4e85      	ldr	r6, [pc, #532]	; (407074 <main+0x394>)
  406e5e:	4d86      	ldr	r5, [pc, #536]	; (407078 <main+0x398>)
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406e60:	4982      	ldr	r1, [pc, #520]	; (40706c <main+0x38c>)
	return 1U << (pin & 0x1F);
  406e62:	2201      	movs	r2, #1
	
	for(uint8_t i = 0; i < 4 ; i++){
		ioport_set_pin_dir(counterA.selectPins[i], IOPORT_DIR_OUTPUT);
  406e64:	f810 3b01 	ldrb.w	r3, [r0], #1
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406e68:	eb01 1753 	add.w	r7, r1, r3, lsr #5
  406e6c:	027f      	lsls	r7, r7, #9
	return 1U << (pin & 0x1F);
  406e6e:	f003 031f 	and.w	r3, r3, #31
  406e72:	fa02 f303 	lsl.w	r3, r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  406e76:	613b      	str	r3, [r7, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406e78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		ioport_set_pin_dir(counterB.selectPins[i], IOPORT_DIR_OUTPUT);
  406e7c:	f816 3b01 	ldrb.w	r3, [r6], #1
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406e80:	eb01 1753 	add.w	r7, r1, r3, lsr #5
  406e84:	027f      	lsls	r7, r7, #9
	return 1U << (pin & 0x1F);
  406e86:	f003 031f 	and.w	r3, r3, #31
  406e8a:	fa02 f303 	lsl.w	r3, r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  406e8e:	613b      	str	r3, [r7, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406e90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		ioport_set_pin_dir(counterC.selectPins[i], IOPORT_DIR_OUTPUT);
  406e94:	f815 3b01 	ldrb.w	r3, [r5], #1
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406e98:	eb01 1753 	add.w	r7, r1, r3, lsr #5
  406e9c:	027f      	lsls	r7, r7, #9
	return 1U << (pin & 0x1F);
  406e9e:	f003 031f 	and.w	r3, r3, #31
  406ea2:	fa02 f303 	lsl.w	r3, r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  406ea6:	613b      	str	r3, [r7, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406ea8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	for(uint8_t i = 0; i < 4 ; i++){
  406eac:	42a0      	cmp	r0, r4
  406eae:	d1d9      	bne.n	406e64 <main+0x184>
	}
	
	printf("--- Counter select pins configured\r\n");
  406eb0:	4872      	ldr	r0, [pc, #456]	; (40707c <main+0x39c>)
  406eb2:	4e66      	ldr	r6, [pc, #408]	; (40704c <main+0x36c>)
  406eb4:	47b0      	blx	r6
	
	ioport_set_pin_dir(counterA.registerClkPin, IOPORT_DIR_OUTPUT);
  406eb6:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 407068 <main+0x388>
  406eba:	f89a 300c 	ldrb.w	r3, [sl, #12]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406ebe:	4c6b      	ldr	r4, [pc, #428]	; (40706c <main+0x38c>)
  406ec0:	eb04 1253 	add.w	r2, r4, r3, lsr #5
  406ec4:	0252      	lsls	r2, r2, #9
	return 1U << (pin & 0x1F);
  406ec6:	f003 031f 	and.w	r3, r3, #31
  406eca:	2501      	movs	r5, #1
  406ecc:	fa05 f303 	lsl.w	r3, r5, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  406ed0:	6113      	str	r3, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406ed2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	ioport_set_pin_dir(counterB.registerClkPin, IOPORT_DIR_OUTPUT);
  406ed6:	f8df 919c 	ldr.w	r9, [pc, #412]	; 407074 <main+0x394>
  406eda:	f899 300c 	ldrb.w	r3, [r9, #12]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406ede:	eb04 1253 	add.w	r2, r4, r3, lsr #5
  406ee2:	0252      	lsls	r2, r2, #9
	return 1U << (pin & 0x1F);
  406ee4:	f003 031f 	and.w	r3, r3, #31
  406ee8:	fa05 f303 	lsl.w	r3, r5, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  406eec:	6113      	str	r3, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406eee:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	ioport_set_pin_dir(counterC.registerClkPin, IOPORT_DIR_OUTPUT);
  406ef2:	f8df 8184 	ldr.w	r8, [pc, #388]	; 407078 <main+0x398>
  406ef6:	f898 300c 	ldrb.w	r3, [r8, #12]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406efa:	eb04 1253 	add.w	r2, r4, r3, lsr #5
  406efe:	0252      	lsls	r2, r2, #9
	return 1U << (pin & 0x1F);
  406f00:	f003 031f 	and.w	r3, r3, #31
  406f04:	fa05 f303 	lsl.w	r3, r5, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  406f08:	6113      	str	r3, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406f0a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	
	printf("--- Counter register clock pins configured\r\n");
  406f0e:	485c      	ldr	r0, [pc, #368]	; (407080 <main+0x3a0>)
  406f10:	47b0      	blx	r6
	
	ioport_set_pin_dir(counterA.clearPin, IOPORT_DIR_OUTPUT);
  406f12:	f89a 000d 	ldrb.w	r0, [sl, #13]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406f16:	eb04 1350 	add.w	r3, r4, r0, lsr #5
  406f1a:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
  406f1c:	f000 021f 	and.w	r2, r0, #31
  406f20:	fa05 f202 	lsl.w	r2, r5, r2
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  406f24:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406f26:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_mode(counterA.clearPin, IOPORT_MODE_PULLDOWN);
  406f2a:	2110      	movs	r1, #16
  406f2c:	4f55      	ldr	r7, [pc, #340]	; (407084 <main+0x3a4>)
  406f2e:	47b8      	blx	r7
	ioport_set_pin_dir(counterB.clearPin, IOPORT_DIR_OUTPUT);
  406f30:	f899 000d 	ldrb.w	r0, [r9, #13]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406f34:	eb04 1350 	add.w	r3, r4, r0, lsr #5
  406f38:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
  406f3a:	f000 021f 	and.w	r2, r0, #31
  406f3e:	fa05 f202 	lsl.w	r2, r5, r2
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  406f42:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406f44:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_mode(counterB.clearPin, IOPORT_MODE_PULLDOWN);
  406f48:	2110      	movs	r1, #16
  406f4a:	47b8      	blx	r7
	ioport_set_pin_dir(counterC.clearPin, IOPORT_DIR_OUTPUT);
  406f4c:	f898 000d 	ldrb.w	r0, [r8, #13]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406f50:	eb04 1350 	add.w	r3, r4, r0, lsr #5
  406f54:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
  406f56:	f000 021f 	and.w	r2, r0, #31
  406f5a:	fa05 f202 	lsl.w	r2, r5, r2
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  406f5e:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406f60:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_mode(counterC.clearPin, IOPORT_MODE_PULLDOWN);
  406f64:	2110      	movs	r1, #16
  406f66:	47b8      	blx	r7
	
	ioport_set_pin_level(counterA.clearPin, HIGH);
  406f68:	f89a 300d 	ldrb.w	r3, [sl, #13]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406f6c:	eb04 1253 	add.w	r2, r4, r3, lsr #5
  406f70:	0252      	lsls	r2, r2, #9
	return 1U << (pin & 0x1F);
  406f72:	f003 031f 	and.w	r3, r3, #31
  406f76:	fa05 f303 	lsl.w	r3, r5, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  406f7a:	6313      	str	r3, [r2, #48]	; 0x30
	ioport_set_pin_level(counterB.clearPin, HIGH);
  406f7c:	f899 300d 	ldrb.w	r3, [r9, #13]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406f80:	eb04 1253 	add.w	r2, r4, r3, lsr #5
  406f84:	0252      	lsls	r2, r2, #9
	return 1U << (pin & 0x1F);
  406f86:	f003 031f 	and.w	r3, r3, #31
  406f8a:	fa05 f303 	lsl.w	r3, r5, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  406f8e:	6313      	str	r3, [r2, #48]	; 0x30
	ioport_set_pin_level(counterC.clearPin, HIGH);
  406f90:	f898 200d 	ldrb.w	r2, [r8, #13]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406f94:	eb04 1352 	add.w	r3, r4, r2, lsr #5
  406f98:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
  406f9a:	f002 021f 	and.w	r2, r2, #31
  406f9e:	4095      	lsls	r5, r2
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  406fa0:	631d      	str	r5, [r3, #48]	; 0x30
	
	printf("--- Counter clear pins configured\r\n");
  406fa2:	4839      	ldr	r0, [pc, #228]	; (407088 <main+0x3a8>)
  406fa4:	47b0      	blx	r6
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406fa6:	4d39      	ldr	r5, [pc, #228]	; (40708c <main+0x3ac>)
  406fa8:	f44f 0b80 	mov.w	fp, #4194304	; 0x400000
  406fac:	f8c5 b014 	str.w	fp, [r5, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406fb0:	f8c5 b0a0 	str.w	fp, [r5, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406fb4:	f44f 2a80 	mov.w	sl, #262144	; 0x40000
  406fb8:	f8c5 a014 	str.w	sl, [r5, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406fbc:	f8c5 a0a0 	str.w	sl, [r5, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406fc0:	4c33      	ldr	r4, [pc, #204]	; (407090 <main+0x3b0>)
  406fc2:	f44f 4980 	mov.w	r9, #16384	; 0x4000
  406fc6:	f8c4 9014 	str.w	r9, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406fca:	f8c4 90a0 	str.w	r9, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  406fce:	f44f 7800 	mov.w	r8, #512	; 0x200
  406fd2:	f8c4 8014 	str.w	r8, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  406fd6:	f8c4 80a0 	str.w	r8, [r4, #160]	; 0xa0
	ioport_set_pin_dir(SIGNAL1A_READY_PIN, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(SIGNAL2A_READY_PIN, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(SIGNAL1B_READY_PIN, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(SIGNAL2B_READY_PIN, IOPORT_DIR_INPUT);
	
	printf("--- Set signal ready pin direction\r\n");
  406fda:	482e      	ldr	r0, [pc, #184]	; (407094 <main+0x3b4>)
  406fdc:	47b0      	blx	r6
	
	ioport_set_pin_mode(SIGNAL1A_READY_PIN, (IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE) );
  406fde:	2188      	movs	r1, #136	; 0x88
  406fe0:	2016      	movs	r0, #22
  406fe2:	47b8      	blx	r7
	ioport_set_pin_mode(SIGNAL2A_READY_PIN, (IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE) );
  406fe4:	2188      	movs	r1, #136	; 0x88
  406fe6:	2012      	movs	r0, #18
  406fe8:	47b8      	blx	r7
	ioport_set_pin_mode(SIGNAL1B_READY_PIN, (IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE) );
  406fea:	2188      	movs	r1, #136	; 0x88
  406fec:	204e      	movs	r0, #78	; 0x4e
  406fee:	47b8      	blx	r7
	ioport_set_pin_mode(SIGNAL2B_READY_PIN, (IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE) );
  406ff0:	2188      	movs	r1, #136	; 0x88
  406ff2:	2049      	movs	r0, #73	; 0x49
  406ff4:	47b8      	blx	r7
	
	printf("--- Set signal ready pin mode\r\n");
  406ff6:	4828      	ldr	r0, [pc, #160]	; (407098 <main+0x3b8>)
  406ff8:	47b0      	blx	r6
		base->PIO_ESR = mask;
  406ffa:	f8c5 b0c0 	str.w	fp, [r5, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  406ffe:	f8c5 b0d4 	str.w	fp, [r5, #212]	; 0xd4
  407002:	e04f      	b.n	4070a4 <main+0x3c4>
  407004:	204049b9 	.word	0x204049b9
  407008:	204049b8 	.word	0x204049b8
  40700c:	004001d5 	.word	0x004001d5
  407010:	004002d5 	.word	0x004002d5
  407014:	00400ce9 	.word	0x00400ce9
  407018:	40028000 	.word	0x40028000
  40701c:	2040392c 	.word	0x2040392c
  407020:	004069a9 	.word	0x004069a9
  407024:	20403928 	.word	0x20403928
  407028:	004068cd 	.word	0x004068cd
  40702c:	20403924 	.word	0x20403924
  407030:	047868c0 	.word	0x047868c0
  407034:	00400e55 	.word	0x00400e55
  407038:	00400ea9 	.word	0x00400ea9
  40703c:	00400eaf 	.word	0x00400eaf
  407040:	20400064 	.word	0x20400064
  407044:	00407e95 	.word	0x00407e95
  407048:	0040ea2c 	.word	0x0040ea2c
  40704c:	00407e85 	.word	0x00407e85
  407050:	0040ea44 	.word	0x0040ea44
  407054:	00407dc1 	.word	0x00407dc1
  407058:	004062d5 	.word	0x004062d5
  40705c:	0040ea58 	.word	0x0040ea58
  407060:	00406469 	.word	0x00406469
  407064:	0040ea74 	.word	0x0040ea74
  407068:	20400034 	.word	0x20400034
  40706c:	00200707 	.word	0x00200707
  407070:	0040ea8c 	.word	0x0040ea8c
  407074:	20400044 	.word	0x20400044
  407078:	20400054 	.word	0x20400054
  40707c:	0040eab0 	.word	0x0040eab0
  407080:	0040ead4 	.word	0x0040ead4
  407084:	004067c5 	.word	0x004067c5
  407088:	0040eb00 	.word	0x0040eb00
  40708c:	400e0e00 	.word	0x400e0e00
  407090:	400e1200 	.word	0x400e1200
  407094:	0040eb24 	.word	0x0040eb24
  407098:	0040eb48 	.word	0x0040eb48
  40709c:	20400048 	.word	0x20400048
  4070a0:	20400058 	.word	0x20400058
	base->PIO_AIMER = mask;
  4070a4:	f8c5 b0b0 	str.w	fp, [r5, #176]	; 0xb0
		base->PIO_ESR = mask;
  4070a8:	f8c5 a0c0 	str.w	sl, [r5, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4070ac:	f8c5 a0d4 	str.w	sl, [r5, #212]	; 0xd4
	base->PIO_AIMER = mask;
  4070b0:	f8c5 a0b0 	str.w	sl, [r5, #176]	; 0xb0
		base->PIO_ESR = mask;
  4070b4:	f8c4 90c0 	str.w	r9, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4070b8:	f8c4 90d4 	str.w	r9, [r4, #212]	; 0xd4
	base->PIO_AIMER = mask;
  4070bc:	f8c4 90b0 	str.w	r9, [r4, #176]	; 0xb0
		base->PIO_ESR = mask;
  4070c0:	f8c4 80c0 	str.w	r8, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4070c4:	f8c4 80d4 	str.w	r8, [r4, #212]	; 0xd4
	base->PIO_AIMER = mask;
  4070c8:	f8c4 80b0 	str.w	r8, [r4, #176]	; 0xb0
	ioport_set_pin_sense_mode(SIGNAL1A_READY_PIN, (IOPORT_SENSE_RISING));
	ioport_set_pin_sense_mode(SIGNAL2A_READY_PIN, (IOPORT_SENSE_RISING));
	ioport_set_pin_sense_mode(SIGNAL1B_READY_PIN, (IOPORT_SENSE_RISING));
	ioport_set_pin_sense_mode(SIGNAL2B_READY_PIN, (IOPORT_SENSE_RISING));
	
	printf("--- Set signal ready pin sense\r\n");
  4070cc:	4878      	ldr	r0, [pc, #480]	; (4072b0 <main+0x5d0>)
  4070ce:	47b0      	blx	r6
	
	//pio_handler_set(PIOA, ID_PIOA, (SIGNAL1A_READY_MASK | SIGNAL2A_READY_MASK), (PIO_PULLUP | PIO_DEBOUNCE | PIO_IT_RISE_EDGE), CountReady_Handler);
	pio_handler_set(PIOA, ID_PIOA, SIGNAL1A_READY_MASK, (PIO_PULLUP | PIO_DEBOUNCE | PIO_IT_RISE_EDGE), CountReady_Handler);
  4070d0:	4f78      	ldr	r7, [pc, #480]	; (4072b4 <main+0x5d4>)
  4070d2:	9700      	str	r7, [sp, #0]
  4070d4:	2379      	movs	r3, #121	; 0x79
  4070d6:	465a      	mov	r2, fp
  4070d8:	210a      	movs	r1, #10
  4070da:	4628      	mov	r0, r5
  4070dc:	f8df b284 	ldr.w	fp, [pc, #644]	; 407364 <main+0x684>
  4070e0:	47d8      	blx	fp
	pio_handler_set(PIOA, ID_PIOA, SIGNAL2A_READY_MASK, (PIO_PULLUP | PIO_DEBOUNCE | PIO_IT_RISE_EDGE), CountReady_Handler);
  4070e2:	9700      	str	r7, [sp, #0]
  4070e4:	2379      	movs	r3, #121	; 0x79
  4070e6:	4652      	mov	r2, sl
  4070e8:	210a      	movs	r1, #10
  4070ea:	4628      	mov	r0, r5
  4070ec:	47d8      	blx	fp
	//pio_handler_set(PIOC, ID_PIOC, (SIGNAL1B_READY_MASK | SIGNAL2B_READY_MASK), (PIO_PULLUP | PIO_DEBOUNCE | PIO_IT_RISE_EDGE), CountReady_Handler);
	pio_handler_set(PIOC, ID_PIOC, SIGNAL1B_READY_MASK, (PIO_PULLUP | PIO_DEBOUNCE | PIO_IT_RISE_EDGE), CountReady_Handler);
  4070ee:	9700      	str	r7, [sp, #0]
  4070f0:	2379      	movs	r3, #121	; 0x79
  4070f2:	464a      	mov	r2, r9
  4070f4:	210c      	movs	r1, #12
  4070f6:	4620      	mov	r0, r4
  4070f8:	47d8      	blx	fp
	pio_handler_set(PIOC, ID_PIOC, SIGNAL2B_READY_MASK, (PIO_PULLUP | PIO_DEBOUNCE | PIO_IT_RISE_EDGE), CountReady_Handler);
  4070fa:	9700      	str	r7, [sp, #0]
  4070fc:	2379      	movs	r3, #121	; 0x79
  4070fe:	4642      	mov	r2, r8
  407100:	210c      	movs	r1, #12
  407102:	4620      	mov	r0, r4
  407104:	47d8      	blx	fp
	
	printf("--- Set signal ready handler\r\n");
  407106:	486c      	ldr	r0, [pc, #432]	; (4072b8 <main+0x5d8>)
  407108:	47b0      	blx	r6
  40710a:	4b6c      	ldr	r3, [pc, #432]	; (4072bc <main+0x5dc>)
  40710c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  407110:	601a      	str	r2, [r3, #0]
  407112:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  407116:	601a      	str	r2, [r3, #0]
	
	NVIC_EnableIRQ((IRQn_Type) ID_PIOA);
	NVIC_EnableIRQ((IRQn_Type) ID_PIOC);
	
	printf("--- Enabled IRQ\r\n");
  407118:	4869      	ldr	r0, [pc, #420]	; (4072c0 <main+0x5e0>)
  40711a:	47b0      	blx	r6
	
	pio_handler_set_priority(PIOA, (IRQn_Type) ID_PIOA, IRQ_PRIOR_PIO);
  40711c:	2200      	movs	r2, #0
  40711e:	210a      	movs	r1, #10
  407120:	4628      	mov	r0, r5
  407122:	4f68      	ldr	r7, [pc, #416]	; (4072c4 <main+0x5e4>)
  407124:	47b8      	blx	r7
	pio_handler_set_priority(PIOC, (IRQn_Type) ID_PIOB, IRQ_PRIOR_PIO);
  407126:	2200      	movs	r2, #0
  407128:	210b      	movs	r1, #11
  40712a:	4620      	mov	r0, r4
  40712c:	47b8      	blx	r7
	
	printf("--- Set handler priority\r\n");
  40712e:	4866      	ldr	r0, [pc, #408]	; (4072c8 <main+0x5e8>)
  407130:	47b0      	blx	r6
	
	pio_enable_interrupt(PIOA, (SIGNAL1A_READY_MASK | SIGNAL2A_READY_MASK));
  407132:	f44f 0188 	mov.w	r1, #4456448	; 0x440000
  407136:	4628      	mov	r0, r5
  407138:	4d64      	ldr	r5, [pc, #400]	; (4072cc <main+0x5ec>)
  40713a:	47a8      	blx	r5
	pio_enable_interrupt(PIOC, (SIGNAL1B_READY_MASK | SIGNAL2B_READY_MASK));
  40713c:	f44f 4184 	mov.w	r1, #16896	; 0x4200
  407140:	4620      	mov	r0, r4
  407142:	47a8      	blx	r5
	
	printf("--- Enabled interrupt\r\n");
  407144:	4862      	ldr	r0, [pc, #392]	; (4072d0 <main+0x5f0>)
  407146:	47b0      	blx	r6
	printf("--- Enabled interrupt\r\n");
#endif


	// ---- Signal Flags ----
	sig1A_flag = false;
  407148:	2300      	movs	r3, #0
  40714a:	4a62      	ldr	r2, [pc, #392]	; (4072d4 <main+0x5f4>)
  40714c:	7013      	strb	r3, [r2, #0]
	sig2A_flag = false;
  40714e:	4a62      	ldr	r2, [pc, #392]	; (4072d8 <main+0x5f8>)
  407150:	7013      	strb	r3, [r2, #0]
	sig1B_flag = false;
  407152:	4a62      	ldr	r2, [pc, #392]	; (4072dc <main+0x5fc>)
  407154:	7013      	strb	r3, [r2, #0]
	sig2B_flag = false;
  407156:	4a62      	ldr	r2, [pc, #392]	; (4072e0 <main+0x600>)
  407158:	7013      	strb	r3, [r2, #0]
	calibration_flag = false;
  40715a:	4a62      	ldr	r2, [pc, #392]	; (4072e4 <main+0x604>)
  40715c:	7013      	strb	r3, [r2, #0]
	
	calibrationCount = 0;
  40715e:	4a62      	ldr	r2, [pc, #392]	; (4072e8 <main+0x608>)
  407160:	6013      	str	r3, [r2, #0]
	calibrationFactor = 0.0;
  407162:	2000      	movs	r0, #0
  407164:	2100      	movs	r1, #0
  407166:	4a61      	ldr	r2, [pc, #388]	; (4072ec <main+0x60c>)
  407168:	e9c2 0100 	strd	r0, r1, [r2]
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  40716c:	4a60      	ldr	r2, [pc, #384]	; (4072f0 <main+0x610>)
  40716e:	4961      	ldr	r1, [pc, #388]	; (4072f4 <main+0x614>)
  407170:	6051      	str	r1, [r2, #4]
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  407172:	20e0      	movs	r0, #224	; 0xe0
  407174:	4960      	ldr	r1, [pc, #384]	; (4072f8 <main+0x618>)
  407176:	f881 0023 	strb.w	r0, [r1, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  40717a:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  40717c:	2307      	movs	r3, #7
  40717e:	6013      	str	r3, [r2, #0]
	if (SysTick_Config(sysclk_get_cpu_hz() / 1000)) {
		printf("!F! Systick configuration error\r\n\r\n");
		while (1);
	}

	printf("--- Starting Main Loop ---\r\n\r\n");
  407180:	485e      	ldr	r0, [pc, #376]	; (4072fc <main+0x61c>)
  407182:	47b0      	blx	r6
	
	while (true){
	#if (READ_MODE)
		if(a_flag){
  407184:	4f5e      	ldr	r7, [pc, #376]	; (407300 <main+0x620>)
			a_flag = false;
			b_flag = false;
  407186:	4e5f      	ldr	r6, [pc, #380]	; (407304 <main+0x624>)
		calibrationFactor = 50000000/ (double)calibrationCount;
  407188:	f20f 191c 	addw	r9, pc, #284	; 0x11c
  40718c:	e9d9 8900 	ldrd	r8, r9, [r9]
  407190:	e05d      	b.n	40724e <main+0x56e>
			a_flag = false;
  407192:	2300      	movs	r3, #0
  407194:	703b      	strb	r3, [r7, #0]
			b_flag = false;
  407196:	7033      	strb	r3, [r6, #0]
			printCountValue(counterA);
  407198:	4b5b      	ldr	r3, [pc, #364]	; (407308 <main+0x628>)
  40719a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40719c:	4c5b      	ldr	r4, [pc, #364]	; (40730c <main+0x62c>)
  40719e:	47a0      	blx	r4
  4071a0:	e058      	b.n	407254 <main+0x574>
		}
		if(b_flag){
			a_flag = false;
  4071a2:	2300      	movs	r3, #0
  4071a4:	703b      	strb	r3, [r7, #0]
			b_flag = false;
  4071a6:	7033      	strb	r3, [r6, #0]
			printCountValue(counterB);
  4071a8:	4b59      	ldr	r3, [pc, #356]	; (407310 <main+0x630>)
  4071aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4071ac:	4c57      	ldr	r4, [pc, #348]	; (40730c <main+0x62c>)
  4071ae:	47a0      	blx	r4
  4071b0:	e053      	b.n	40725a <main+0x57a>
		}
		if(calibration_flag){
			calibration_flag = false;
  4071b2:	2500      	movs	r5, #0
  4071b4:	4b4b      	ldr	r3, [pc, #300]	; (4072e4 <main+0x604>)
  4071b6:	701d      	strb	r5, [r3, #0]
  4071b8:	4b56      	ldr	r3, [pc, #344]	; (407314 <main+0x634>)
  4071ba:	ac06      	add	r4, sp, #24
  4071bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4071be:	c407      	stmia	r4!, {r0, r1, r2}
  4071c0:	f824 3b02 	strh.w	r3, [r4], #2
  4071c4:	0c1b      	lsrs	r3, r3, #16
  4071c6:	7023      	strb	r3, [r4, #0]
	char bitString[9] = "";
  4071c8:	9503      	str	r5, [sp, #12]
  4071ca:	9504      	str	r5, [sp, #16]
  4071cc:	f88d 5014 	strb.w	r5, [sp, #20]
	counterio_pulse_pin(cntr.registerClkPin, HIGH, 10000);
  4071d0:	f242 7210 	movw	r2, #10000	; 0x2710
  4071d4:	2101      	movs	r1, #1
  4071d6:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
  4071da:	4b4f      	ldr	r3, [pc, #316]	; (407318 <main+0x638>)
  4071dc:	4798      	blx	r3
	waitCount(PULSE_LENGTH);
  4071de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  4071e2:	4b4e      	ldr	r3, [pc, #312]	; (40731c <main+0x63c>)
  4071e4:	4798      	blx	r3
  4071e6:	462c      	mov	r4, r5
		readByte = readCounterByte(cntr.outputPins, cntr.selectPins, byteIndex, p_bitString);
  4071e8:	f8df b17c 	ldr.w	fp, [pc, #380]	; 407368 <main+0x688>
		waitCount(PULSE_LENGTH);
  4071ec:	f8df a12c 	ldr.w	sl, [pc, #300]	; 40731c <main+0x63c>
		readByte = readCounterByte(cntr.outputPins, cntr.selectPins, byteIndex, p_bitString);
  4071f0:	ab03      	add	r3, sp, #12
  4071f2:	b2e2      	uxtb	r2, r4
  4071f4:	a906      	add	r1, sp, #24
  4071f6:	a807      	add	r0, sp, #28
  4071f8:	47d8      	blx	fp
		readCount += ((uint32_t) readByte) << (8*byteIndex);
  4071fa:	00e3      	lsls	r3, r4, #3
  4071fc:	4098      	lsls	r0, r3
  4071fe:	4405      	add	r5, r0
		waitCount(PULSE_LENGTH);
  407200:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  407204:	47d0      	blx	sl
  407206:	3401      	adds	r4, #1
	for(uint8_t byteIndex = 0; byteIndex<4; byteIndex++)
  407208:	2c04      	cmp	r4, #4
  40720a:	d1f1      	bne.n	4071f0 <main+0x510>
	counterio_pulse_pin(cntr.clearPin, LOW, 10000);
  40720c:	f242 7210 	movw	r2, #10000	; 0x2710
  407210:	2100      	movs	r1, #0
  407212:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
  407216:	4b40      	ldr	r3, [pc, #256]	; (407318 <main+0x638>)
  407218:	4798      	blx	r3
	if(readCount != 0){
  40721a:	b315      	cbz	r5, 407262 <main+0x582>
		calibrationCount = readCount;
  40721c:	4b32      	ldr	r3, [pc, #200]	; (4072e8 <main+0x608>)
  40721e:	601d      	str	r5, [r3, #0]
		calibrationFactor = 50000000/ (double)calibrationCount;
  407220:	4628      	mov	r0, r5
  407222:	4b3f      	ldr	r3, [pc, #252]	; (407320 <main+0x640>)
  407224:	4798      	blx	r3
  407226:	4602      	mov	r2, r0
  407228:	460b      	mov	r3, r1
  40722a:	4640      	mov	r0, r8
  40722c:	4649      	mov	r1, r9
  40722e:	4c3d      	ldr	r4, [pc, #244]	; (407324 <main+0x644>)
  407230:	47a0      	blx	r4
  407232:	4b2e      	ldr	r3, [pc, #184]	; (4072ec <main+0x60c>)
  407234:	e9c3 0100 	strd	r0, r1, [r3]
  407238:	e013      	b.n	407262 <main+0x582>
				strcpy(sendBuffer, "word0001horse002cheetah3kitten04human005chicken6llama007desk0008");
				sendBufferIndex = 64;
			}
			
			// Clean up receive buffer
			memset(receiveBuffer, '\0', sizeof(receiveBuffer));
  40723a:	2220      	movs	r2, #32
  40723c:	2100      	movs	r1, #0
  40723e:	483a      	ldr	r0, [pc, #232]	; (407328 <main+0x648>)
  407240:	4b3a      	ldr	r3, [pc, #232]	; (40732c <main+0x64c>)
  407242:	4798      	blx	r3
			receiveBufferIndex = 0;
  407244:	2200      	movs	r2, #0
  407246:	4b3a      	ldr	r3, [pc, #232]	; (407330 <main+0x650>)
  407248:	701a      	strb	r2, [r3, #0]
		}
		ethernet_task();
  40724a:	4b3a      	ldr	r3, [pc, #232]	; (407334 <main+0x654>)
  40724c:	4798      	blx	r3
		if(a_flag){
  40724e:	783b      	ldrb	r3, [r7, #0]
  407250:	2b00      	cmp	r3, #0
  407252:	d19e      	bne.n	407192 <main+0x4b2>
		if(b_flag){
  407254:	7833      	ldrb	r3, [r6, #0]
  407256:	2b00      	cmp	r3, #0
  407258:	d1a3      	bne.n	4071a2 <main+0x4c2>
		if(calibration_flag){
  40725a:	4b22      	ldr	r3, [pc, #136]	; (4072e4 <main+0x604>)
  40725c:	781b      	ldrb	r3, [r3, #0]
  40725e:	2b00      	cmp	r3, #0
  407260:	d1a7      	bne.n	4071b2 <main+0x4d2>
		if(receiveBufferIndex>0){
  407262:	4b33      	ldr	r3, [pc, #204]	; (407330 <main+0x650>)
  407264:	781b      	ldrb	r3, [r3, #0]
  407266:	2b00      	cmp	r3, #0
  407268:	d0ef      	beq.n	40724a <main+0x56a>
			receiveBuffer[receiveBufferIndex] = '\0';
  40726a:	4c2f      	ldr	r4, [pc, #188]	; (407328 <main+0x648>)
  40726c:	2200      	movs	r2, #0
  40726e:	54e2      	strb	r2, [r4, r3]
			printf("Receive Buffer: %s", receiveBuffer);
  407270:	4621      	mov	r1, r4
  407272:	4831      	ldr	r0, [pc, #196]	; (407338 <main+0x658>)
  407274:	4b31      	ldr	r3, [pc, #196]	; (40733c <main+0x65c>)
  407276:	4798      	blx	r3
			printf("\r\n\r\n");
  407278:	4831      	ldr	r0, [pc, #196]	; (407340 <main+0x660>)
  40727a:	4b32      	ldr	r3, [pc, #200]	; (407344 <main+0x664>)
  40727c:	4798      	blx	r3
			char * cmdString = strstr(receiveBuffer, "gimme");
  40727e:	4932      	ldr	r1, [pc, #200]	; (407348 <main+0x668>)
  407280:	4620      	mov	r0, r4
  407282:	4b32      	ldr	r3, [pc, #200]	; (40734c <main+0x66c>)
  407284:	4798      	blx	r3
			if(cmdString)
  407286:	2800      	cmp	r0, #0
  407288:	d0d7      	beq.n	40723a <main+0x55a>
				printf("---Command acknowledged---\r\n");
  40728a:	4831      	ldr	r0, [pc, #196]	; (407350 <main+0x670>)
  40728c:	4b2d      	ldr	r3, [pc, #180]	; (407344 <main+0x664>)
  40728e:	4798      	blx	r3
				strcpy(sendBuffer, "word0001horse002cheetah3kitten04human005chicken6llama007desk0008");
  407290:	2241      	movs	r2, #65	; 0x41
  407292:	4930      	ldr	r1, [pc, #192]	; (407354 <main+0x674>)
  407294:	4830      	ldr	r0, [pc, #192]	; (407358 <main+0x678>)
  407296:	4b31      	ldr	r3, [pc, #196]	; (40735c <main+0x67c>)
  407298:	4798      	blx	r3
				sendBufferIndex = 64;
  40729a:	2240      	movs	r2, #64	; 0x40
  40729c:	4b30      	ldr	r3, [pc, #192]	; (407360 <main+0x680>)
  40729e:	701a      	strb	r2, [r3, #0]
  4072a0:	e7cb      	b.n	40723a <main+0x55a>
  4072a2:	bf00      	nop
  4072a4:	f3af 8000 	nop.w
  4072a8:	00000000 	.word	0x00000000
  4072ac:	4187d784 	.word	0x4187d784
  4072b0:	0040eb68 	.word	0x0040eb68
  4072b4:	00406891 	.word	0x00406891
  4072b8:	0040eb88 	.word	0x0040eb88
  4072bc:	e000e100 	.word	0xe000e100
  4072c0:	0040eba8 	.word	0x0040eba8
  4072c4:	00400b45 	.word	0x00400b45
  4072c8:	0040ebbc 	.word	0x0040ebbc
  4072cc:	00400a0f 	.word	0x00400a0f
  4072d0:	0040ebd8 	.word	0x0040ebd8
  4072d4:	20404a30 	.word	0x20404a30
  4072d8:	20404a34 	.word	0x20404a34
  4072dc:	20404a44 	.word	0x20404a44
  4072e0:	20404a31 	.word	0x20404a31
  4072e4:	20404a48 	.word	0x20404a48
  4072e8:	20404a40 	.word	0x20404a40
  4072ec:	20404a28 	.word	0x20404a28
  4072f0:	e000e010 	.word	0xe000e010
  4072f4:	000249ef 	.word	0x000249ef
  4072f8:	e000ed00 	.word	0xe000ed00
  4072fc:	0040ebf0 	.word	0x0040ebf0
  407300:	20404a22 	.word	0x20404a22
  407304:	20404a21 	.word	0x20404a21
  407308:	20400034 	.word	0x20400034
  40730c:	00406bbd 	.word	0x00406bbd
  407310:	20400044 	.word	0x20400044
  407314:	20400054 	.word	0x20400054
  407318:	00406855 	.word	0x00406855
  40731c:	0040683d 	.word	0x0040683d
  407320:	004075f1 	.word	0x004075f1
  407324:	00407931 	.word	0x00407931
  407328:	20404a00 	.word	0x20404a00
  40732c:	00407d25 	.word	0x00407d25
  407330:	204049b8 	.word	0x204049b8
  407334:	00406371 	.word	0x00406371
  407338:	0040ec10 	.word	0x0040ec10
  40733c:	00407dc1 	.word	0x00407dc1
  407340:	0040ec24 	.word	0x0040ec24
  407344:	00407e85 	.word	0x00407e85
  407348:	0040ec28 	.word	0x0040ec28
  40734c:	00408571 	.word	0x00408571
  407350:	0040ec30 	.word	0x0040ec30
  407354:	0040ec4c 	.word	0x0040ec4c
  407358:	204049bc 	.word	0x204049bc
  40735c:	00407bf1 	.word	0x00407bf1
  407360:	204049b9 	.word	0x204049b9
  407364:	00400a71 	.word	0x00400a71
  407368:	00406a7d 	.word	0x00406a7d

0040736c <__aeabi_drsub>:
  40736c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  407370:	e002      	b.n	407378 <__adddf3>
  407372:	bf00      	nop

00407374 <__aeabi_dsub>:
  407374:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00407378 <__adddf3>:
  407378:	b530      	push	{r4, r5, lr}
  40737a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40737e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  407382:	ea94 0f05 	teq	r4, r5
  407386:	bf08      	it	eq
  407388:	ea90 0f02 	teqeq	r0, r2
  40738c:	bf1f      	itttt	ne
  40738e:	ea54 0c00 	orrsne.w	ip, r4, r0
  407392:	ea55 0c02 	orrsne.w	ip, r5, r2
  407396:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40739a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40739e:	f000 80e2 	beq.w	407566 <__adddf3+0x1ee>
  4073a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4073a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4073aa:	bfb8      	it	lt
  4073ac:	426d      	neglt	r5, r5
  4073ae:	dd0c      	ble.n	4073ca <__adddf3+0x52>
  4073b0:	442c      	add	r4, r5
  4073b2:	ea80 0202 	eor.w	r2, r0, r2
  4073b6:	ea81 0303 	eor.w	r3, r1, r3
  4073ba:	ea82 0000 	eor.w	r0, r2, r0
  4073be:	ea83 0101 	eor.w	r1, r3, r1
  4073c2:	ea80 0202 	eor.w	r2, r0, r2
  4073c6:	ea81 0303 	eor.w	r3, r1, r3
  4073ca:	2d36      	cmp	r5, #54	; 0x36
  4073cc:	bf88      	it	hi
  4073ce:	bd30      	pophi	{r4, r5, pc}
  4073d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4073d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4073d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4073dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4073e0:	d002      	beq.n	4073e8 <__adddf3+0x70>
  4073e2:	4240      	negs	r0, r0
  4073e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4073e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4073ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4073f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4073f4:	d002      	beq.n	4073fc <__adddf3+0x84>
  4073f6:	4252      	negs	r2, r2
  4073f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4073fc:	ea94 0f05 	teq	r4, r5
  407400:	f000 80a7 	beq.w	407552 <__adddf3+0x1da>
  407404:	f1a4 0401 	sub.w	r4, r4, #1
  407408:	f1d5 0e20 	rsbs	lr, r5, #32
  40740c:	db0d      	blt.n	40742a <__adddf3+0xb2>
  40740e:	fa02 fc0e 	lsl.w	ip, r2, lr
  407412:	fa22 f205 	lsr.w	r2, r2, r5
  407416:	1880      	adds	r0, r0, r2
  407418:	f141 0100 	adc.w	r1, r1, #0
  40741c:	fa03 f20e 	lsl.w	r2, r3, lr
  407420:	1880      	adds	r0, r0, r2
  407422:	fa43 f305 	asr.w	r3, r3, r5
  407426:	4159      	adcs	r1, r3
  407428:	e00e      	b.n	407448 <__adddf3+0xd0>
  40742a:	f1a5 0520 	sub.w	r5, r5, #32
  40742e:	f10e 0e20 	add.w	lr, lr, #32
  407432:	2a01      	cmp	r2, #1
  407434:	fa03 fc0e 	lsl.w	ip, r3, lr
  407438:	bf28      	it	cs
  40743a:	f04c 0c02 	orrcs.w	ip, ip, #2
  40743e:	fa43 f305 	asr.w	r3, r3, r5
  407442:	18c0      	adds	r0, r0, r3
  407444:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  407448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40744c:	d507      	bpl.n	40745e <__adddf3+0xe6>
  40744e:	f04f 0e00 	mov.w	lr, #0
  407452:	f1dc 0c00 	rsbs	ip, ip, #0
  407456:	eb7e 0000 	sbcs.w	r0, lr, r0
  40745a:	eb6e 0101 	sbc.w	r1, lr, r1
  40745e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  407462:	d31b      	bcc.n	40749c <__adddf3+0x124>
  407464:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  407468:	d30c      	bcc.n	407484 <__adddf3+0x10c>
  40746a:	0849      	lsrs	r1, r1, #1
  40746c:	ea5f 0030 	movs.w	r0, r0, rrx
  407470:	ea4f 0c3c 	mov.w	ip, ip, rrx
  407474:	f104 0401 	add.w	r4, r4, #1
  407478:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40747c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  407480:	f080 809a 	bcs.w	4075b8 <__adddf3+0x240>
  407484:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  407488:	bf08      	it	eq
  40748a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40748e:	f150 0000 	adcs.w	r0, r0, #0
  407492:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407496:	ea41 0105 	orr.w	r1, r1, r5
  40749a:	bd30      	pop	{r4, r5, pc}
  40749c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4074a0:	4140      	adcs	r0, r0
  4074a2:	eb41 0101 	adc.w	r1, r1, r1
  4074a6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4074aa:	f1a4 0401 	sub.w	r4, r4, #1
  4074ae:	d1e9      	bne.n	407484 <__adddf3+0x10c>
  4074b0:	f091 0f00 	teq	r1, #0
  4074b4:	bf04      	itt	eq
  4074b6:	4601      	moveq	r1, r0
  4074b8:	2000      	moveq	r0, #0
  4074ba:	fab1 f381 	clz	r3, r1
  4074be:	bf08      	it	eq
  4074c0:	3320      	addeq	r3, #32
  4074c2:	f1a3 030b 	sub.w	r3, r3, #11
  4074c6:	f1b3 0220 	subs.w	r2, r3, #32
  4074ca:	da0c      	bge.n	4074e6 <__adddf3+0x16e>
  4074cc:	320c      	adds	r2, #12
  4074ce:	dd08      	ble.n	4074e2 <__adddf3+0x16a>
  4074d0:	f102 0c14 	add.w	ip, r2, #20
  4074d4:	f1c2 020c 	rsb	r2, r2, #12
  4074d8:	fa01 f00c 	lsl.w	r0, r1, ip
  4074dc:	fa21 f102 	lsr.w	r1, r1, r2
  4074e0:	e00c      	b.n	4074fc <__adddf3+0x184>
  4074e2:	f102 0214 	add.w	r2, r2, #20
  4074e6:	bfd8      	it	le
  4074e8:	f1c2 0c20 	rsble	ip, r2, #32
  4074ec:	fa01 f102 	lsl.w	r1, r1, r2
  4074f0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4074f4:	bfdc      	itt	le
  4074f6:	ea41 010c 	orrle.w	r1, r1, ip
  4074fa:	4090      	lslle	r0, r2
  4074fc:	1ae4      	subs	r4, r4, r3
  4074fe:	bfa2      	ittt	ge
  407500:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  407504:	4329      	orrge	r1, r5
  407506:	bd30      	popge	{r4, r5, pc}
  407508:	ea6f 0404 	mvn.w	r4, r4
  40750c:	3c1f      	subs	r4, #31
  40750e:	da1c      	bge.n	40754a <__adddf3+0x1d2>
  407510:	340c      	adds	r4, #12
  407512:	dc0e      	bgt.n	407532 <__adddf3+0x1ba>
  407514:	f104 0414 	add.w	r4, r4, #20
  407518:	f1c4 0220 	rsb	r2, r4, #32
  40751c:	fa20 f004 	lsr.w	r0, r0, r4
  407520:	fa01 f302 	lsl.w	r3, r1, r2
  407524:	ea40 0003 	orr.w	r0, r0, r3
  407528:	fa21 f304 	lsr.w	r3, r1, r4
  40752c:	ea45 0103 	orr.w	r1, r5, r3
  407530:	bd30      	pop	{r4, r5, pc}
  407532:	f1c4 040c 	rsb	r4, r4, #12
  407536:	f1c4 0220 	rsb	r2, r4, #32
  40753a:	fa20 f002 	lsr.w	r0, r0, r2
  40753e:	fa01 f304 	lsl.w	r3, r1, r4
  407542:	ea40 0003 	orr.w	r0, r0, r3
  407546:	4629      	mov	r1, r5
  407548:	bd30      	pop	{r4, r5, pc}
  40754a:	fa21 f004 	lsr.w	r0, r1, r4
  40754e:	4629      	mov	r1, r5
  407550:	bd30      	pop	{r4, r5, pc}
  407552:	f094 0f00 	teq	r4, #0
  407556:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40755a:	bf06      	itte	eq
  40755c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  407560:	3401      	addeq	r4, #1
  407562:	3d01      	subne	r5, #1
  407564:	e74e      	b.n	407404 <__adddf3+0x8c>
  407566:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40756a:	bf18      	it	ne
  40756c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407570:	d029      	beq.n	4075c6 <__adddf3+0x24e>
  407572:	ea94 0f05 	teq	r4, r5
  407576:	bf08      	it	eq
  407578:	ea90 0f02 	teqeq	r0, r2
  40757c:	d005      	beq.n	40758a <__adddf3+0x212>
  40757e:	ea54 0c00 	orrs.w	ip, r4, r0
  407582:	bf04      	itt	eq
  407584:	4619      	moveq	r1, r3
  407586:	4610      	moveq	r0, r2
  407588:	bd30      	pop	{r4, r5, pc}
  40758a:	ea91 0f03 	teq	r1, r3
  40758e:	bf1e      	ittt	ne
  407590:	2100      	movne	r1, #0
  407592:	2000      	movne	r0, #0
  407594:	bd30      	popne	{r4, r5, pc}
  407596:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40759a:	d105      	bne.n	4075a8 <__adddf3+0x230>
  40759c:	0040      	lsls	r0, r0, #1
  40759e:	4149      	adcs	r1, r1
  4075a0:	bf28      	it	cs
  4075a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4075a6:	bd30      	pop	{r4, r5, pc}
  4075a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4075ac:	bf3c      	itt	cc
  4075ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4075b2:	bd30      	popcc	{r4, r5, pc}
  4075b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4075b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4075bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4075c0:	f04f 0000 	mov.w	r0, #0
  4075c4:	bd30      	pop	{r4, r5, pc}
  4075c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4075ca:	bf1a      	itte	ne
  4075cc:	4619      	movne	r1, r3
  4075ce:	4610      	movne	r0, r2
  4075d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4075d4:	bf1c      	itt	ne
  4075d6:	460b      	movne	r3, r1
  4075d8:	4602      	movne	r2, r0
  4075da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4075de:	bf06      	itte	eq
  4075e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4075e4:	ea91 0f03 	teqeq	r1, r3
  4075e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4075ec:	bd30      	pop	{r4, r5, pc}
  4075ee:	bf00      	nop

004075f0 <__aeabi_ui2d>:
  4075f0:	f090 0f00 	teq	r0, #0
  4075f4:	bf04      	itt	eq
  4075f6:	2100      	moveq	r1, #0
  4075f8:	4770      	bxeq	lr
  4075fa:	b530      	push	{r4, r5, lr}
  4075fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407600:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407604:	f04f 0500 	mov.w	r5, #0
  407608:	f04f 0100 	mov.w	r1, #0
  40760c:	e750      	b.n	4074b0 <__adddf3+0x138>
  40760e:	bf00      	nop

00407610 <__aeabi_i2d>:
  407610:	f090 0f00 	teq	r0, #0
  407614:	bf04      	itt	eq
  407616:	2100      	moveq	r1, #0
  407618:	4770      	bxeq	lr
  40761a:	b530      	push	{r4, r5, lr}
  40761c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407620:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407624:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  407628:	bf48      	it	mi
  40762a:	4240      	negmi	r0, r0
  40762c:	f04f 0100 	mov.w	r1, #0
  407630:	e73e      	b.n	4074b0 <__adddf3+0x138>
  407632:	bf00      	nop

00407634 <__aeabi_f2d>:
  407634:	0042      	lsls	r2, r0, #1
  407636:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40763a:	ea4f 0131 	mov.w	r1, r1, rrx
  40763e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  407642:	bf1f      	itttt	ne
  407644:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  407648:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40764c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  407650:	4770      	bxne	lr
  407652:	f092 0f00 	teq	r2, #0
  407656:	bf14      	ite	ne
  407658:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40765c:	4770      	bxeq	lr
  40765e:	b530      	push	{r4, r5, lr}
  407660:	f44f 7460 	mov.w	r4, #896	; 0x380
  407664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40766c:	e720      	b.n	4074b0 <__adddf3+0x138>
  40766e:	bf00      	nop

00407670 <__aeabi_ul2d>:
  407670:	ea50 0201 	orrs.w	r2, r0, r1
  407674:	bf08      	it	eq
  407676:	4770      	bxeq	lr
  407678:	b530      	push	{r4, r5, lr}
  40767a:	f04f 0500 	mov.w	r5, #0
  40767e:	e00a      	b.n	407696 <__aeabi_l2d+0x16>

00407680 <__aeabi_l2d>:
  407680:	ea50 0201 	orrs.w	r2, r0, r1
  407684:	bf08      	it	eq
  407686:	4770      	bxeq	lr
  407688:	b530      	push	{r4, r5, lr}
  40768a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40768e:	d502      	bpl.n	407696 <__aeabi_l2d+0x16>
  407690:	4240      	negs	r0, r0
  407692:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407696:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40769a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40769e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4076a2:	f43f aedc 	beq.w	40745e <__adddf3+0xe6>
  4076a6:	f04f 0203 	mov.w	r2, #3
  4076aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4076ae:	bf18      	it	ne
  4076b0:	3203      	addne	r2, #3
  4076b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4076b6:	bf18      	it	ne
  4076b8:	3203      	addne	r2, #3
  4076ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4076be:	f1c2 0320 	rsb	r3, r2, #32
  4076c2:	fa00 fc03 	lsl.w	ip, r0, r3
  4076c6:	fa20 f002 	lsr.w	r0, r0, r2
  4076ca:	fa01 fe03 	lsl.w	lr, r1, r3
  4076ce:	ea40 000e 	orr.w	r0, r0, lr
  4076d2:	fa21 f102 	lsr.w	r1, r1, r2
  4076d6:	4414      	add	r4, r2
  4076d8:	e6c1      	b.n	40745e <__adddf3+0xe6>
  4076da:	bf00      	nop

004076dc <__aeabi_dmul>:
  4076dc:	b570      	push	{r4, r5, r6, lr}
  4076de:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4076e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4076e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4076ea:	bf1d      	ittte	ne
  4076ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4076f0:	ea94 0f0c 	teqne	r4, ip
  4076f4:	ea95 0f0c 	teqne	r5, ip
  4076f8:	f000 f8de 	bleq	4078b8 <__aeabi_dmul+0x1dc>
  4076fc:	442c      	add	r4, r5
  4076fe:	ea81 0603 	eor.w	r6, r1, r3
  407702:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  407706:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40770a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40770e:	bf18      	it	ne
  407710:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  407714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407718:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40771c:	d038      	beq.n	407790 <__aeabi_dmul+0xb4>
  40771e:	fba0 ce02 	umull	ip, lr, r0, r2
  407722:	f04f 0500 	mov.w	r5, #0
  407726:	fbe1 e502 	umlal	lr, r5, r1, r2
  40772a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40772e:	fbe0 e503 	umlal	lr, r5, r0, r3
  407732:	f04f 0600 	mov.w	r6, #0
  407736:	fbe1 5603 	umlal	r5, r6, r1, r3
  40773a:	f09c 0f00 	teq	ip, #0
  40773e:	bf18      	it	ne
  407740:	f04e 0e01 	orrne.w	lr, lr, #1
  407744:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  407748:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40774c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  407750:	d204      	bcs.n	40775c <__aeabi_dmul+0x80>
  407752:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  407756:	416d      	adcs	r5, r5
  407758:	eb46 0606 	adc.w	r6, r6, r6
  40775c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  407760:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  407764:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  407768:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40776c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407770:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407774:	bf88      	it	hi
  407776:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40777a:	d81e      	bhi.n	4077ba <__aeabi_dmul+0xde>
  40777c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  407780:	bf08      	it	eq
  407782:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  407786:	f150 0000 	adcs.w	r0, r0, #0
  40778a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40778e:	bd70      	pop	{r4, r5, r6, pc}
  407790:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  407794:	ea46 0101 	orr.w	r1, r6, r1
  407798:	ea40 0002 	orr.w	r0, r0, r2
  40779c:	ea81 0103 	eor.w	r1, r1, r3
  4077a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4077a4:	bfc2      	ittt	gt
  4077a6:	ebd4 050c 	rsbsgt	r5, r4, ip
  4077aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4077ae:	bd70      	popgt	{r4, r5, r6, pc}
  4077b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4077b4:	f04f 0e00 	mov.w	lr, #0
  4077b8:	3c01      	subs	r4, #1
  4077ba:	f300 80ab 	bgt.w	407914 <__aeabi_dmul+0x238>
  4077be:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4077c2:	bfde      	ittt	le
  4077c4:	2000      	movle	r0, #0
  4077c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4077ca:	bd70      	pople	{r4, r5, r6, pc}
  4077cc:	f1c4 0400 	rsb	r4, r4, #0
  4077d0:	3c20      	subs	r4, #32
  4077d2:	da35      	bge.n	407840 <__aeabi_dmul+0x164>
  4077d4:	340c      	adds	r4, #12
  4077d6:	dc1b      	bgt.n	407810 <__aeabi_dmul+0x134>
  4077d8:	f104 0414 	add.w	r4, r4, #20
  4077dc:	f1c4 0520 	rsb	r5, r4, #32
  4077e0:	fa00 f305 	lsl.w	r3, r0, r5
  4077e4:	fa20 f004 	lsr.w	r0, r0, r4
  4077e8:	fa01 f205 	lsl.w	r2, r1, r5
  4077ec:	ea40 0002 	orr.w	r0, r0, r2
  4077f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4077f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4077f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4077fc:	fa21 f604 	lsr.w	r6, r1, r4
  407800:	eb42 0106 	adc.w	r1, r2, r6
  407804:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407808:	bf08      	it	eq
  40780a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40780e:	bd70      	pop	{r4, r5, r6, pc}
  407810:	f1c4 040c 	rsb	r4, r4, #12
  407814:	f1c4 0520 	rsb	r5, r4, #32
  407818:	fa00 f304 	lsl.w	r3, r0, r4
  40781c:	fa20 f005 	lsr.w	r0, r0, r5
  407820:	fa01 f204 	lsl.w	r2, r1, r4
  407824:	ea40 0002 	orr.w	r0, r0, r2
  407828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40782c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407830:	f141 0100 	adc.w	r1, r1, #0
  407834:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407838:	bf08      	it	eq
  40783a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40783e:	bd70      	pop	{r4, r5, r6, pc}
  407840:	f1c4 0520 	rsb	r5, r4, #32
  407844:	fa00 f205 	lsl.w	r2, r0, r5
  407848:	ea4e 0e02 	orr.w	lr, lr, r2
  40784c:	fa20 f304 	lsr.w	r3, r0, r4
  407850:	fa01 f205 	lsl.w	r2, r1, r5
  407854:	ea43 0302 	orr.w	r3, r3, r2
  407858:	fa21 f004 	lsr.w	r0, r1, r4
  40785c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407860:	fa21 f204 	lsr.w	r2, r1, r4
  407864:	ea20 0002 	bic.w	r0, r0, r2
  407868:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40786c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407870:	bf08      	it	eq
  407872:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407876:	bd70      	pop	{r4, r5, r6, pc}
  407878:	f094 0f00 	teq	r4, #0
  40787c:	d10f      	bne.n	40789e <__aeabi_dmul+0x1c2>
  40787e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  407882:	0040      	lsls	r0, r0, #1
  407884:	eb41 0101 	adc.w	r1, r1, r1
  407888:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40788c:	bf08      	it	eq
  40788e:	3c01      	subeq	r4, #1
  407890:	d0f7      	beq.n	407882 <__aeabi_dmul+0x1a6>
  407892:	ea41 0106 	orr.w	r1, r1, r6
  407896:	f095 0f00 	teq	r5, #0
  40789a:	bf18      	it	ne
  40789c:	4770      	bxne	lr
  40789e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4078a2:	0052      	lsls	r2, r2, #1
  4078a4:	eb43 0303 	adc.w	r3, r3, r3
  4078a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4078ac:	bf08      	it	eq
  4078ae:	3d01      	subeq	r5, #1
  4078b0:	d0f7      	beq.n	4078a2 <__aeabi_dmul+0x1c6>
  4078b2:	ea43 0306 	orr.w	r3, r3, r6
  4078b6:	4770      	bx	lr
  4078b8:	ea94 0f0c 	teq	r4, ip
  4078bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4078c0:	bf18      	it	ne
  4078c2:	ea95 0f0c 	teqne	r5, ip
  4078c6:	d00c      	beq.n	4078e2 <__aeabi_dmul+0x206>
  4078c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4078cc:	bf18      	it	ne
  4078ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4078d2:	d1d1      	bne.n	407878 <__aeabi_dmul+0x19c>
  4078d4:	ea81 0103 	eor.w	r1, r1, r3
  4078d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4078dc:	f04f 0000 	mov.w	r0, #0
  4078e0:	bd70      	pop	{r4, r5, r6, pc}
  4078e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4078e6:	bf06      	itte	eq
  4078e8:	4610      	moveq	r0, r2
  4078ea:	4619      	moveq	r1, r3
  4078ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4078f0:	d019      	beq.n	407926 <__aeabi_dmul+0x24a>
  4078f2:	ea94 0f0c 	teq	r4, ip
  4078f6:	d102      	bne.n	4078fe <__aeabi_dmul+0x222>
  4078f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4078fc:	d113      	bne.n	407926 <__aeabi_dmul+0x24a>
  4078fe:	ea95 0f0c 	teq	r5, ip
  407902:	d105      	bne.n	407910 <__aeabi_dmul+0x234>
  407904:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  407908:	bf1c      	itt	ne
  40790a:	4610      	movne	r0, r2
  40790c:	4619      	movne	r1, r3
  40790e:	d10a      	bne.n	407926 <__aeabi_dmul+0x24a>
  407910:	ea81 0103 	eor.w	r1, r1, r3
  407914:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407918:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40791c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407920:	f04f 0000 	mov.w	r0, #0
  407924:	bd70      	pop	{r4, r5, r6, pc}
  407926:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40792a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40792e:	bd70      	pop	{r4, r5, r6, pc}

00407930 <__aeabi_ddiv>:
  407930:	b570      	push	{r4, r5, r6, lr}
  407932:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407936:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40793a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40793e:	bf1d      	ittte	ne
  407940:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407944:	ea94 0f0c 	teqne	r4, ip
  407948:	ea95 0f0c 	teqne	r5, ip
  40794c:	f000 f8a7 	bleq	407a9e <__aeabi_ddiv+0x16e>
  407950:	eba4 0405 	sub.w	r4, r4, r5
  407954:	ea81 0e03 	eor.w	lr, r1, r3
  407958:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40795c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407960:	f000 8088 	beq.w	407a74 <__aeabi_ddiv+0x144>
  407964:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407968:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40796c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  407970:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  407974:	ea4f 2202 	mov.w	r2, r2, lsl #8
  407978:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40797c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  407980:	ea4f 2600 	mov.w	r6, r0, lsl #8
  407984:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  407988:	429d      	cmp	r5, r3
  40798a:	bf08      	it	eq
  40798c:	4296      	cmpeq	r6, r2
  40798e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  407992:	f504 7440 	add.w	r4, r4, #768	; 0x300
  407996:	d202      	bcs.n	40799e <__aeabi_ddiv+0x6e>
  407998:	085b      	lsrs	r3, r3, #1
  40799a:	ea4f 0232 	mov.w	r2, r2, rrx
  40799e:	1ab6      	subs	r6, r6, r2
  4079a0:	eb65 0503 	sbc.w	r5, r5, r3
  4079a4:	085b      	lsrs	r3, r3, #1
  4079a6:	ea4f 0232 	mov.w	r2, r2, rrx
  4079aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4079ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4079b2:	ebb6 0e02 	subs.w	lr, r6, r2
  4079b6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4079ba:	bf22      	ittt	cs
  4079bc:	1ab6      	subcs	r6, r6, r2
  4079be:	4675      	movcs	r5, lr
  4079c0:	ea40 000c 	orrcs.w	r0, r0, ip
  4079c4:	085b      	lsrs	r3, r3, #1
  4079c6:	ea4f 0232 	mov.w	r2, r2, rrx
  4079ca:	ebb6 0e02 	subs.w	lr, r6, r2
  4079ce:	eb75 0e03 	sbcs.w	lr, r5, r3
  4079d2:	bf22      	ittt	cs
  4079d4:	1ab6      	subcs	r6, r6, r2
  4079d6:	4675      	movcs	r5, lr
  4079d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4079dc:	085b      	lsrs	r3, r3, #1
  4079de:	ea4f 0232 	mov.w	r2, r2, rrx
  4079e2:	ebb6 0e02 	subs.w	lr, r6, r2
  4079e6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4079ea:	bf22      	ittt	cs
  4079ec:	1ab6      	subcs	r6, r6, r2
  4079ee:	4675      	movcs	r5, lr
  4079f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4079f4:	085b      	lsrs	r3, r3, #1
  4079f6:	ea4f 0232 	mov.w	r2, r2, rrx
  4079fa:	ebb6 0e02 	subs.w	lr, r6, r2
  4079fe:	eb75 0e03 	sbcs.w	lr, r5, r3
  407a02:	bf22      	ittt	cs
  407a04:	1ab6      	subcs	r6, r6, r2
  407a06:	4675      	movcs	r5, lr
  407a08:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  407a0c:	ea55 0e06 	orrs.w	lr, r5, r6
  407a10:	d018      	beq.n	407a44 <__aeabi_ddiv+0x114>
  407a12:	ea4f 1505 	mov.w	r5, r5, lsl #4
  407a16:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  407a1a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  407a1e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  407a22:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  407a26:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  407a2a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  407a2e:	d1c0      	bne.n	4079b2 <__aeabi_ddiv+0x82>
  407a30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407a34:	d10b      	bne.n	407a4e <__aeabi_ddiv+0x11e>
  407a36:	ea41 0100 	orr.w	r1, r1, r0
  407a3a:	f04f 0000 	mov.w	r0, #0
  407a3e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  407a42:	e7b6      	b.n	4079b2 <__aeabi_ddiv+0x82>
  407a44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407a48:	bf04      	itt	eq
  407a4a:	4301      	orreq	r1, r0
  407a4c:	2000      	moveq	r0, #0
  407a4e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407a52:	bf88      	it	hi
  407a54:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407a58:	f63f aeaf 	bhi.w	4077ba <__aeabi_dmul+0xde>
  407a5c:	ebb5 0c03 	subs.w	ip, r5, r3
  407a60:	bf04      	itt	eq
  407a62:	ebb6 0c02 	subseq.w	ip, r6, r2
  407a66:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  407a6a:	f150 0000 	adcs.w	r0, r0, #0
  407a6e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407a72:	bd70      	pop	{r4, r5, r6, pc}
  407a74:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  407a78:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  407a7c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  407a80:	bfc2      	ittt	gt
  407a82:	ebd4 050c 	rsbsgt	r5, r4, ip
  407a86:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  407a8a:	bd70      	popgt	{r4, r5, r6, pc}
  407a8c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407a90:	f04f 0e00 	mov.w	lr, #0
  407a94:	3c01      	subs	r4, #1
  407a96:	e690      	b.n	4077ba <__aeabi_dmul+0xde>
  407a98:	ea45 0e06 	orr.w	lr, r5, r6
  407a9c:	e68d      	b.n	4077ba <__aeabi_dmul+0xde>
  407a9e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407aa2:	ea94 0f0c 	teq	r4, ip
  407aa6:	bf08      	it	eq
  407aa8:	ea95 0f0c 	teqeq	r5, ip
  407aac:	f43f af3b 	beq.w	407926 <__aeabi_dmul+0x24a>
  407ab0:	ea94 0f0c 	teq	r4, ip
  407ab4:	d10a      	bne.n	407acc <__aeabi_ddiv+0x19c>
  407ab6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  407aba:	f47f af34 	bne.w	407926 <__aeabi_dmul+0x24a>
  407abe:	ea95 0f0c 	teq	r5, ip
  407ac2:	f47f af25 	bne.w	407910 <__aeabi_dmul+0x234>
  407ac6:	4610      	mov	r0, r2
  407ac8:	4619      	mov	r1, r3
  407aca:	e72c      	b.n	407926 <__aeabi_dmul+0x24a>
  407acc:	ea95 0f0c 	teq	r5, ip
  407ad0:	d106      	bne.n	407ae0 <__aeabi_ddiv+0x1b0>
  407ad2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  407ad6:	f43f aefd 	beq.w	4078d4 <__aeabi_dmul+0x1f8>
  407ada:	4610      	mov	r0, r2
  407adc:	4619      	mov	r1, r3
  407ade:	e722      	b.n	407926 <__aeabi_dmul+0x24a>
  407ae0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407ae4:	bf18      	it	ne
  407ae6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407aea:	f47f aec5 	bne.w	407878 <__aeabi_dmul+0x19c>
  407aee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  407af2:	f47f af0d 	bne.w	407910 <__aeabi_dmul+0x234>
  407af6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  407afa:	f47f aeeb 	bne.w	4078d4 <__aeabi_dmul+0x1f8>
  407afe:	e712      	b.n	407926 <__aeabi_dmul+0x24a>

00407b00 <__aeabi_d2uiz>:
  407b00:	004a      	lsls	r2, r1, #1
  407b02:	d211      	bcs.n	407b28 <__aeabi_d2uiz+0x28>
  407b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  407b08:	d211      	bcs.n	407b2e <__aeabi_d2uiz+0x2e>
  407b0a:	d50d      	bpl.n	407b28 <__aeabi_d2uiz+0x28>
  407b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  407b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  407b14:	d40e      	bmi.n	407b34 <__aeabi_d2uiz+0x34>
  407b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  407b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  407b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  407b22:	fa23 f002 	lsr.w	r0, r3, r2
  407b26:	4770      	bx	lr
  407b28:	f04f 0000 	mov.w	r0, #0
  407b2c:	4770      	bx	lr
  407b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  407b32:	d102      	bne.n	407b3a <__aeabi_d2uiz+0x3a>
  407b34:	f04f 30ff 	mov.w	r0, #4294967295
  407b38:	4770      	bx	lr
  407b3a:	f04f 0000 	mov.w	r0, #0
  407b3e:	4770      	bx	lr

00407b40 <__libc_init_array>:
  407b40:	b570      	push	{r4, r5, r6, lr}
  407b42:	4e0f      	ldr	r6, [pc, #60]	; (407b80 <__libc_init_array+0x40>)
  407b44:	4d0f      	ldr	r5, [pc, #60]	; (407b84 <__libc_init_array+0x44>)
  407b46:	1b76      	subs	r6, r6, r5
  407b48:	10b6      	asrs	r6, r6, #2
  407b4a:	bf18      	it	ne
  407b4c:	2400      	movne	r4, #0
  407b4e:	d005      	beq.n	407b5c <__libc_init_array+0x1c>
  407b50:	3401      	adds	r4, #1
  407b52:	f855 3b04 	ldr.w	r3, [r5], #4
  407b56:	4798      	blx	r3
  407b58:	42a6      	cmp	r6, r4
  407b5a:	d1f9      	bne.n	407b50 <__libc_init_array+0x10>
  407b5c:	4e0a      	ldr	r6, [pc, #40]	; (407b88 <__libc_init_array+0x48>)
  407b5e:	4d0b      	ldr	r5, [pc, #44]	; (407b8c <__libc_init_array+0x4c>)
  407b60:	1b76      	subs	r6, r6, r5
  407b62:	f007 fa0d 	bl	40ef80 <_init>
  407b66:	10b6      	asrs	r6, r6, #2
  407b68:	bf18      	it	ne
  407b6a:	2400      	movne	r4, #0
  407b6c:	d006      	beq.n	407b7c <__libc_init_array+0x3c>
  407b6e:	3401      	adds	r4, #1
  407b70:	f855 3b04 	ldr.w	r3, [r5], #4
  407b74:	4798      	blx	r3
  407b76:	42a6      	cmp	r6, r4
  407b78:	d1f9      	bne.n	407b6e <__libc_init_array+0x2e>
  407b7a:	bd70      	pop	{r4, r5, r6, pc}
  407b7c:	bd70      	pop	{r4, r5, r6, pc}
  407b7e:	bf00      	nop
  407b80:	0040ef8c 	.word	0x0040ef8c
  407b84:	0040ef8c 	.word	0x0040ef8c
  407b88:	0040ef94 	.word	0x0040ef94
  407b8c:	0040ef8c 	.word	0x0040ef8c

00407b90 <memcmp>:
  407b90:	2a03      	cmp	r2, #3
  407b92:	b470      	push	{r4, r5, r6}
  407b94:	d922      	bls.n	407bdc <memcmp+0x4c>
  407b96:	ea40 0301 	orr.w	r3, r0, r1
  407b9a:	079b      	lsls	r3, r3, #30
  407b9c:	d011      	beq.n	407bc2 <memcmp+0x32>
  407b9e:	7803      	ldrb	r3, [r0, #0]
  407ba0:	780c      	ldrb	r4, [r1, #0]
  407ba2:	42a3      	cmp	r3, r4
  407ba4:	d11d      	bne.n	407be2 <memcmp+0x52>
  407ba6:	440a      	add	r2, r1
  407ba8:	3101      	adds	r1, #1
  407baa:	e005      	b.n	407bb8 <memcmp+0x28>
  407bac:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  407bb0:	f811 4b01 	ldrb.w	r4, [r1], #1
  407bb4:	42a3      	cmp	r3, r4
  407bb6:	d114      	bne.n	407be2 <memcmp+0x52>
  407bb8:	4291      	cmp	r1, r2
  407bba:	d1f7      	bne.n	407bac <memcmp+0x1c>
  407bbc:	2000      	movs	r0, #0
  407bbe:	bc70      	pop	{r4, r5, r6}
  407bc0:	4770      	bx	lr
  407bc2:	680d      	ldr	r5, [r1, #0]
  407bc4:	6806      	ldr	r6, [r0, #0]
  407bc6:	42ae      	cmp	r6, r5
  407bc8:	460c      	mov	r4, r1
  407bca:	4603      	mov	r3, r0
  407bcc:	f101 0104 	add.w	r1, r1, #4
  407bd0:	f100 0004 	add.w	r0, r0, #4
  407bd4:	d108      	bne.n	407be8 <memcmp+0x58>
  407bd6:	3a04      	subs	r2, #4
  407bd8:	2a03      	cmp	r2, #3
  407bda:	d8f2      	bhi.n	407bc2 <memcmp+0x32>
  407bdc:	2a00      	cmp	r2, #0
  407bde:	d1de      	bne.n	407b9e <memcmp+0xe>
  407be0:	e7ec      	b.n	407bbc <memcmp+0x2c>
  407be2:	1b18      	subs	r0, r3, r4
  407be4:	bc70      	pop	{r4, r5, r6}
  407be6:	4770      	bx	lr
  407be8:	4621      	mov	r1, r4
  407bea:	4618      	mov	r0, r3
  407bec:	e7d7      	b.n	407b9e <memcmp+0xe>
  407bee:	bf00      	nop

00407bf0 <memcpy>:
  407bf0:	4684      	mov	ip, r0
  407bf2:	ea41 0300 	orr.w	r3, r1, r0
  407bf6:	f013 0303 	ands.w	r3, r3, #3
  407bfa:	d16d      	bne.n	407cd8 <memcpy+0xe8>
  407bfc:	3a40      	subs	r2, #64	; 0x40
  407bfe:	d341      	bcc.n	407c84 <memcpy+0x94>
  407c00:	f851 3b04 	ldr.w	r3, [r1], #4
  407c04:	f840 3b04 	str.w	r3, [r0], #4
  407c08:	f851 3b04 	ldr.w	r3, [r1], #4
  407c0c:	f840 3b04 	str.w	r3, [r0], #4
  407c10:	f851 3b04 	ldr.w	r3, [r1], #4
  407c14:	f840 3b04 	str.w	r3, [r0], #4
  407c18:	f851 3b04 	ldr.w	r3, [r1], #4
  407c1c:	f840 3b04 	str.w	r3, [r0], #4
  407c20:	f851 3b04 	ldr.w	r3, [r1], #4
  407c24:	f840 3b04 	str.w	r3, [r0], #4
  407c28:	f851 3b04 	ldr.w	r3, [r1], #4
  407c2c:	f840 3b04 	str.w	r3, [r0], #4
  407c30:	f851 3b04 	ldr.w	r3, [r1], #4
  407c34:	f840 3b04 	str.w	r3, [r0], #4
  407c38:	f851 3b04 	ldr.w	r3, [r1], #4
  407c3c:	f840 3b04 	str.w	r3, [r0], #4
  407c40:	f851 3b04 	ldr.w	r3, [r1], #4
  407c44:	f840 3b04 	str.w	r3, [r0], #4
  407c48:	f851 3b04 	ldr.w	r3, [r1], #4
  407c4c:	f840 3b04 	str.w	r3, [r0], #4
  407c50:	f851 3b04 	ldr.w	r3, [r1], #4
  407c54:	f840 3b04 	str.w	r3, [r0], #4
  407c58:	f851 3b04 	ldr.w	r3, [r1], #4
  407c5c:	f840 3b04 	str.w	r3, [r0], #4
  407c60:	f851 3b04 	ldr.w	r3, [r1], #4
  407c64:	f840 3b04 	str.w	r3, [r0], #4
  407c68:	f851 3b04 	ldr.w	r3, [r1], #4
  407c6c:	f840 3b04 	str.w	r3, [r0], #4
  407c70:	f851 3b04 	ldr.w	r3, [r1], #4
  407c74:	f840 3b04 	str.w	r3, [r0], #4
  407c78:	f851 3b04 	ldr.w	r3, [r1], #4
  407c7c:	f840 3b04 	str.w	r3, [r0], #4
  407c80:	3a40      	subs	r2, #64	; 0x40
  407c82:	d2bd      	bcs.n	407c00 <memcpy+0x10>
  407c84:	3230      	adds	r2, #48	; 0x30
  407c86:	d311      	bcc.n	407cac <memcpy+0xbc>
  407c88:	f851 3b04 	ldr.w	r3, [r1], #4
  407c8c:	f840 3b04 	str.w	r3, [r0], #4
  407c90:	f851 3b04 	ldr.w	r3, [r1], #4
  407c94:	f840 3b04 	str.w	r3, [r0], #4
  407c98:	f851 3b04 	ldr.w	r3, [r1], #4
  407c9c:	f840 3b04 	str.w	r3, [r0], #4
  407ca0:	f851 3b04 	ldr.w	r3, [r1], #4
  407ca4:	f840 3b04 	str.w	r3, [r0], #4
  407ca8:	3a10      	subs	r2, #16
  407caa:	d2ed      	bcs.n	407c88 <memcpy+0x98>
  407cac:	320c      	adds	r2, #12
  407cae:	d305      	bcc.n	407cbc <memcpy+0xcc>
  407cb0:	f851 3b04 	ldr.w	r3, [r1], #4
  407cb4:	f840 3b04 	str.w	r3, [r0], #4
  407cb8:	3a04      	subs	r2, #4
  407cba:	d2f9      	bcs.n	407cb0 <memcpy+0xc0>
  407cbc:	3204      	adds	r2, #4
  407cbe:	d008      	beq.n	407cd2 <memcpy+0xe2>
  407cc0:	07d2      	lsls	r2, r2, #31
  407cc2:	bf1c      	itt	ne
  407cc4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  407cc8:	f800 3b01 	strbne.w	r3, [r0], #1
  407ccc:	d301      	bcc.n	407cd2 <memcpy+0xe2>
  407cce:	880b      	ldrh	r3, [r1, #0]
  407cd0:	8003      	strh	r3, [r0, #0]
  407cd2:	4660      	mov	r0, ip
  407cd4:	4770      	bx	lr
  407cd6:	bf00      	nop
  407cd8:	2a08      	cmp	r2, #8
  407cda:	d313      	bcc.n	407d04 <memcpy+0x114>
  407cdc:	078b      	lsls	r3, r1, #30
  407cde:	d08d      	beq.n	407bfc <memcpy+0xc>
  407ce0:	f010 0303 	ands.w	r3, r0, #3
  407ce4:	d08a      	beq.n	407bfc <memcpy+0xc>
  407ce6:	f1c3 0304 	rsb	r3, r3, #4
  407cea:	1ad2      	subs	r2, r2, r3
  407cec:	07db      	lsls	r3, r3, #31
  407cee:	bf1c      	itt	ne
  407cf0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  407cf4:	f800 3b01 	strbne.w	r3, [r0], #1
  407cf8:	d380      	bcc.n	407bfc <memcpy+0xc>
  407cfa:	f831 3b02 	ldrh.w	r3, [r1], #2
  407cfe:	f820 3b02 	strh.w	r3, [r0], #2
  407d02:	e77b      	b.n	407bfc <memcpy+0xc>
  407d04:	3a04      	subs	r2, #4
  407d06:	d3d9      	bcc.n	407cbc <memcpy+0xcc>
  407d08:	3a01      	subs	r2, #1
  407d0a:	f811 3b01 	ldrb.w	r3, [r1], #1
  407d0e:	f800 3b01 	strb.w	r3, [r0], #1
  407d12:	d2f9      	bcs.n	407d08 <memcpy+0x118>
  407d14:	780b      	ldrb	r3, [r1, #0]
  407d16:	7003      	strb	r3, [r0, #0]
  407d18:	784b      	ldrb	r3, [r1, #1]
  407d1a:	7043      	strb	r3, [r0, #1]
  407d1c:	788b      	ldrb	r3, [r1, #2]
  407d1e:	7083      	strb	r3, [r0, #2]
  407d20:	4660      	mov	r0, ip
  407d22:	4770      	bx	lr

00407d24 <memset>:
  407d24:	b470      	push	{r4, r5, r6}
  407d26:	0786      	lsls	r6, r0, #30
  407d28:	d046      	beq.n	407db8 <memset+0x94>
  407d2a:	1e54      	subs	r4, r2, #1
  407d2c:	2a00      	cmp	r2, #0
  407d2e:	d041      	beq.n	407db4 <memset+0x90>
  407d30:	b2ca      	uxtb	r2, r1
  407d32:	4603      	mov	r3, r0
  407d34:	e002      	b.n	407d3c <memset+0x18>
  407d36:	f114 34ff 	adds.w	r4, r4, #4294967295
  407d3a:	d33b      	bcc.n	407db4 <memset+0x90>
  407d3c:	f803 2b01 	strb.w	r2, [r3], #1
  407d40:	079d      	lsls	r5, r3, #30
  407d42:	d1f8      	bne.n	407d36 <memset+0x12>
  407d44:	2c03      	cmp	r4, #3
  407d46:	d92e      	bls.n	407da6 <memset+0x82>
  407d48:	b2cd      	uxtb	r5, r1
  407d4a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  407d4e:	2c0f      	cmp	r4, #15
  407d50:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  407d54:	d919      	bls.n	407d8a <memset+0x66>
  407d56:	f103 0210 	add.w	r2, r3, #16
  407d5a:	4626      	mov	r6, r4
  407d5c:	3e10      	subs	r6, #16
  407d5e:	2e0f      	cmp	r6, #15
  407d60:	f842 5c10 	str.w	r5, [r2, #-16]
  407d64:	f842 5c0c 	str.w	r5, [r2, #-12]
  407d68:	f842 5c08 	str.w	r5, [r2, #-8]
  407d6c:	f842 5c04 	str.w	r5, [r2, #-4]
  407d70:	f102 0210 	add.w	r2, r2, #16
  407d74:	d8f2      	bhi.n	407d5c <memset+0x38>
  407d76:	f1a4 0210 	sub.w	r2, r4, #16
  407d7a:	f022 020f 	bic.w	r2, r2, #15
  407d7e:	f004 040f 	and.w	r4, r4, #15
  407d82:	3210      	adds	r2, #16
  407d84:	2c03      	cmp	r4, #3
  407d86:	4413      	add	r3, r2
  407d88:	d90d      	bls.n	407da6 <memset+0x82>
  407d8a:	461e      	mov	r6, r3
  407d8c:	4622      	mov	r2, r4
  407d8e:	3a04      	subs	r2, #4
  407d90:	2a03      	cmp	r2, #3
  407d92:	f846 5b04 	str.w	r5, [r6], #4
  407d96:	d8fa      	bhi.n	407d8e <memset+0x6a>
  407d98:	1f22      	subs	r2, r4, #4
  407d9a:	f022 0203 	bic.w	r2, r2, #3
  407d9e:	3204      	adds	r2, #4
  407da0:	4413      	add	r3, r2
  407da2:	f004 0403 	and.w	r4, r4, #3
  407da6:	b12c      	cbz	r4, 407db4 <memset+0x90>
  407da8:	b2c9      	uxtb	r1, r1
  407daa:	441c      	add	r4, r3
  407dac:	f803 1b01 	strb.w	r1, [r3], #1
  407db0:	429c      	cmp	r4, r3
  407db2:	d1fb      	bne.n	407dac <memset+0x88>
  407db4:	bc70      	pop	{r4, r5, r6}
  407db6:	4770      	bx	lr
  407db8:	4614      	mov	r4, r2
  407dba:	4603      	mov	r3, r0
  407dbc:	e7c2      	b.n	407d44 <memset+0x20>
  407dbe:	bf00      	nop

00407dc0 <printf>:
  407dc0:	b40f      	push	{r0, r1, r2, r3}
  407dc2:	b500      	push	{lr}
  407dc4:	4907      	ldr	r1, [pc, #28]	; (407de4 <printf+0x24>)
  407dc6:	b083      	sub	sp, #12
  407dc8:	ab04      	add	r3, sp, #16
  407dca:	6808      	ldr	r0, [r1, #0]
  407dcc:	f853 2b04 	ldr.w	r2, [r3], #4
  407dd0:	6881      	ldr	r1, [r0, #8]
  407dd2:	9301      	str	r3, [sp, #4]
  407dd4:	f001 ff06 	bl	409be4 <_vfprintf_r>
  407dd8:	b003      	add	sp, #12
  407dda:	f85d eb04 	ldr.w	lr, [sp], #4
  407dde:	b004      	add	sp, #16
  407de0:	4770      	bx	lr
  407de2:	bf00      	nop
  407de4:	20400064 	.word	0x20400064

00407de8 <_puts_r>:
  407de8:	b5f0      	push	{r4, r5, r6, r7, lr}
  407dea:	4605      	mov	r5, r0
  407dec:	b089      	sub	sp, #36	; 0x24
  407dee:	4608      	mov	r0, r1
  407df0:	460c      	mov	r4, r1
  407df2:	f000 f9c5 	bl	408180 <strlen>
  407df6:	6bab      	ldr	r3, [r5, #56]	; 0x38
  407df8:	4f21      	ldr	r7, [pc, #132]	; (407e80 <_puts_r+0x98>)
  407dfa:	9404      	str	r4, [sp, #16]
  407dfc:	2601      	movs	r6, #1
  407dfe:	1c44      	adds	r4, r0, #1
  407e00:	a904      	add	r1, sp, #16
  407e02:	2202      	movs	r2, #2
  407e04:	9403      	str	r4, [sp, #12]
  407e06:	9005      	str	r0, [sp, #20]
  407e08:	68ac      	ldr	r4, [r5, #8]
  407e0a:	9706      	str	r7, [sp, #24]
  407e0c:	9607      	str	r6, [sp, #28]
  407e0e:	9101      	str	r1, [sp, #4]
  407e10:	9202      	str	r2, [sp, #8]
  407e12:	b353      	cbz	r3, 407e6a <_puts_r+0x82>
  407e14:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407e16:	f013 0f01 	tst.w	r3, #1
  407e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407e1e:	b29a      	uxth	r2, r3
  407e20:	d101      	bne.n	407e26 <_puts_r+0x3e>
  407e22:	0590      	lsls	r0, r2, #22
  407e24:	d525      	bpl.n	407e72 <_puts_r+0x8a>
  407e26:	0491      	lsls	r1, r2, #18
  407e28:	d406      	bmi.n	407e38 <_puts_r+0x50>
  407e2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  407e2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  407e30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  407e34:	81a3      	strh	r3, [r4, #12]
  407e36:	6662      	str	r2, [r4, #100]	; 0x64
  407e38:	4628      	mov	r0, r5
  407e3a:	aa01      	add	r2, sp, #4
  407e3c:	4621      	mov	r1, r4
  407e3e:	f004 fc71 	bl	40c724 <__sfvwrite_r>
  407e42:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407e44:	2800      	cmp	r0, #0
  407e46:	bf0c      	ite	eq
  407e48:	250a      	moveq	r5, #10
  407e4a:	f04f 35ff 	movne.w	r5, #4294967295
  407e4e:	07da      	lsls	r2, r3, #31
  407e50:	d402      	bmi.n	407e58 <_puts_r+0x70>
  407e52:	89a3      	ldrh	r3, [r4, #12]
  407e54:	059b      	lsls	r3, r3, #22
  407e56:	d502      	bpl.n	407e5e <_puts_r+0x76>
  407e58:	4628      	mov	r0, r5
  407e5a:	b009      	add	sp, #36	; 0x24
  407e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407e5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407e60:	f004 fe16 	bl	40ca90 <__retarget_lock_release_recursive>
  407e64:	4628      	mov	r0, r5
  407e66:	b009      	add	sp, #36	; 0x24
  407e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407e6a:	4628      	mov	r0, r5
  407e6c:	f004 fad2 	bl	40c414 <__sinit>
  407e70:	e7d0      	b.n	407e14 <_puts_r+0x2c>
  407e72:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407e74:	f004 fe0a 	bl	40ca8c <__retarget_lock_acquire_recursive>
  407e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407e7c:	b29a      	uxth	r2, r3
  407e7e:	e7d2      	b.n	407e26 <_puts_r+0x3e>
  407e80:	0040ecd8 	.word	0x0040ecd8

00407e84 <puts>:
  407e84:	4b02      	ldr	r3, [pc, #8]	; (407e90 <puts+0xc>)
  407e86:	4601      	mov	r1, r0
  407e88:	6818      	ldr	r0, [r3, #0]
  407e8a:	f7ff bfad 	b.w	407de8 <_puts_r>
  407e8e:	bf00      	nop
  407e90:	20400064 	.word	0x20400064

00407e94 <setbuf>:
  407e94:	2900      	cmp	r1, #0
  407e96:	bf0c      	ite	eq
  407e98:	2202      	moveq	r2, #2
  407e9a:	2200      	movne	r2, #0
  407e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407ea0:	f000 b800 	b.w	407ea4 <setvbuf>

00407ea4 <setvbuf>:
  407ea4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  407ea8:	4c61      	ldr	r4, [pc, #388]	; (408030 <setvbuf+0x18c>)
  407eaa:	6825      	ldr	r5, [r4, #0]
  407eac:	b083      	sub	sp, #12
  407eae:	4604      	mov	r4, r0
  407eb0:	460f      	mov	r7, r1
  407eb2:	4690      	mov	r8, r2
  407eb4:	461e      	mov	r6, r3
  407eb6:	b115      	cbz	r5, 407ebe <setvbuf+0x1a>
  407eb8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  407eba:	2b00      	cmp	r3, #0
  407ebc:	d064      	beq.n	407f88 <setvbuf+0xe4>
  407ebe:	f1b8 0f02 	cmp.w	r8, #2
  407ec2:	d006      	beq.n	407ed2 <setvbuf+0x2e>
  407ec4:	f1b8 0f01 	cmp.w	r8, #1
  407ec8:	f200 809f 	bhi.w	40800a <setvbuf+0x166>
  407ecc:	2e00      	cmp	r6, #0
  407ece:	f2c0 809c 	blt.w	40800a <setvbuf+0x166>
  407ed2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407ed4:	07d8      	lsls	r0, r3, #31
  407ed6:	d534      	bpl.n	407f42 <setvbuf+0x9e>
  407ed8:	4621      	mov	r1, r4
  407eda:	4628      	mov	r0, r5
  407edc:	f004 fa42 	bl	40c364 <_fflush_r>
  407ee0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  407ee2:	b141      	cbz	r1, 407ef6 <setvbuf+0x52>
  407ee4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407ee8:	4299      	cmp	r1, r3
  407eea:	d002      	beq.n	407ef2 <setvbuf+0x4e>
  407eec:	4628      	mov	r0, r5
  407eee:	f004 fb33 	bl	40c558 <_free_r>
  407ef2:	2300      	movs	r3, #0
  407ef4:	6323      	str	r3, [r4, #48]	; 0x30
  407ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407efa:	2200      	movs	r2, #0
  407efc:	61a2      	str	r2, [r4, #24]
  407efe:	6062      	str	r2, [r4, #4]
  407f00:	061a      	lsls	r2, r3, #24
  407f02:	d43a      	bmi.n	407f7a <setvbuf+0xd6>
  407f04:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  407f08:	f023 0303 	bic.w	r3, r3, #3
  407f0c:	f1b8 0f02 	cmp.w	r8, #2
  407f10:	81a3      	strh	r3, [r4, #12]
  407f12:	d01d      	beq.n	407f50 <setvbuf+0xac>
  407f14:	ab01      	add	r3, sp, #4
  407f16:	466a      	mov	r2, sp
  407f18:	4621      	mov	r1, r4
  407f1a:	4628      	mov	r0, r5
  407f1c:	f004 fdba 	bl	40ca94 <__swhatbuf_r>
  407f20:	89a3      	ldrh	r3, [r4, #12]
  407f22:	4318      	orrs	r0, r3
  407f24:	81a0      	strh	r0, [r4, #12]
  407f26:	2e00      	cmp	r6, #0
  407f28:	d132      	bne.n	407f90 <setvbuf+0xec>
  407f2a:	9e00      	ldr	r6, [sp, #0]
  407f2c:	4630      	mov	r0, r6
  407f2e:	f004 fe29 	bl	40cb84 <malloc>
  407f32:	4607      	mov	r7, r0
  407f34:	2800      	cmp	r0, #0
  407f36:	d06b      	beq.n	408010 <setvbuf+0x16c>
  407f38:	89a3      	ldrh	r3, [r4, #12]
  407f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407f3e:	81a3      	strh	r3, [r4, #12]
  407f40:	e028      	b.n	407f94 <setvbuf+0xf0>
  407f42:	89a3      	ldrh	r3, [r4, #12]
  407f44:	0599      	lsls	r1, r3, #22
  407f46:	d4c7      	bmi.n	407ed8 <setvbuf+0x34>
  407f48:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407f4a:	f004 fd9f 	bl	40ca8c <__retarget_lock_acquire_recursive>
  407f4e:	e7c3      	b.n	407ed8 <setvbuf+0x34>
  407f50:	2500      	movs	r5, #0
  407f52:	6e61      	ldr	r1, [r4, #100]	; 0x64
  407f54:	2600      	movs	r6, #0
  407f56:	f104 0243 	add.w	r2, r4, #67	; 0x43
  407f5a:	f043 0302 	orr.w	r3, r3, #2
  407f5e:	2001      	movs	r0, #1
  407f60:	60a6      	str	r6, [r4, #8]
  407f62:	07ce      	lsls	r6, r1, #31
  407f64:	81a3      	strh	r3, [r4, #12]
  407f66:	6022      	str	r2, [r4, #0]
  407f68:	6122      	str	r2, [r4, #16]
  407f6a:	6160      	str	r0, [r4, #20]
  407f6c:	d401      	bmi.n	407f72 <setvbuf+0xce>
  407f6e:	0598      	lsls	r0, r3, #22
  407f70:	d53e      	bpl.n	407ff0 <setvbuf+0x14c>
  407f72:	4628      	mov	r0, r5
  407f74:	b003      	add	sp, #12
  407f76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407f7a:	6921      	ldr	r1, [r4, #16]
  407f7c:	4628      	mov	r0, r5
  407f7e:	f004 faeb 	bl	40c558 <_free_r>
  407f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407f86:	e7bd      	b.n	407f04 <setvbuf+0x60>
  407f88:	4628      	mov	r0, r5
  407f8a:	f004 fa43 	bl	40c414 <__sinit>
  407f8e:	e796      	b.n	407ebe <setvbuf+0x1a>
  407f90:	2f00      	cmp	r7, #0
  407f92:	d0cb      	beq.n	407f2c <setvbuf+0x88>
  407f94:	6bab      	ldr	r3, [r5, #56]	; 0x38
  407f96:	2b00      	cmp	r3, #0
  407f98:	d033      	beq.n	408002 <setvbuf+0x15e>
  407f9a:	9b00      	ldr	r3, [sp, #0]
  407f9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407fa0:	6027      	str	r7, [r4, #0]
  407fa2:	429e      	cmp	r6, r3
  407fa4:	bf1c      	itt	ne
  407fa6:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  407faa:	81a2      	strhne	r2, [r4, #12]
  407fac:	f1b8 0f01 	cmp.w	r8, #1
  407fb0:	bf04      	itt	eq
  407fb2:	f042 0201 	orreq.w	r2, r2, #1
  407fb6:	81a2      	strheq	r2, [r4, #12]
  407fb8:	b292      	uxth	r2, r2
  407fba:	f012 0308 	ands.w	r3, r2, #8
  407fbe:	6127      	str	r7, [r4, #16]
  407fc0:	6166      	str	r6, [r4, #20]
  407fc2:	d00e      	beq.n	407fe2 <setvbuf+0x13e>
  407fc4:	07d1      	lsls	r1, r2, #31
  407fc6:	d51a      	bpl.n	407ffe <setvbuf+0x15a>
  407fc8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  407fca:	4276      	negs	r6, r6
  407fcc:	2300      	movs	r3, #0
  407fce:	f015 0501 	ands.w	r5, r5, #1
  407fd2:	61a6      	str	r6, [r4, #24]
  407fd4:	60a3      	str	r3, [r4, #8]
  407fd6:	d009      	beq.n	407fec <setvbuf+0x148>
  407fd8:	2500      	movs	r5, #0
  407fda:	4628      	mov	r0, r5
  407fdc:	b003      	add	sp, #12
  407fde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407fe2:	60a3      	str	r3, [r4, #8]
  407fe4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  407fe6:	f015 0501 	ands.w	r5, r5, #1
  407fea:	d1f5      	bne.n	407fd8 <setvbuf+0x134>
  407fec:	0593      	lsls	r3, r2, #22
  407fee:	d4c0      	bmi.n	407f72 <setvbuf+0xce>
  407ff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407ff2:	f004 fd4d 	bl	40ca90 <__retarget_lock_release_recursive>
  407ff6:	4628      	mov	r0, r5
  407ff8:	b003      	add	sp, #12
  407ffa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407ffe:	60a6      	str	r6, [r4, #8]
  408000:	e7f0      	b.n	407fe4 <setvbuf+0x140>
  408002:	4628      	mov	r0, r5
  408004:	f004 fa06 	bl	40c414 <__sinit>
  408008:	e7c7      	b.n	407f9a <setvbuf+0xf6>
  40800a:	f04f 35ff 	mov.w	r5, #4294967295
  40800e:	e7b0      	b.n	407f72 <setvbuf+0xce>
  408010:	f8dd 9000 	ldr.w	r9, [sp]
  408014:	45b1      	cmp	r9, r6
  408016:	d004      	beq.n	408022 <setvbuf+0x17e>
  408018:	4648      	mov	r0, r9
  40801a:	f004 fdb3 	bl	40cb84 <malloc>
  40801e:	4607      	mov	r7, r0
  408020:	b920      	cbnz	r0, 40802c <setvbuf+0x188>
  408022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408026:	f04f 35ff 	mov.w	r5, #4294967295
  40802a:	e792      	b.n	407f52 <setvbuf+0xae>
  40802c:	464e      	mov	r6, r9
  40802e:	e783      	b.n	407f38 <setvbuf+0x94>
  408030:	20400064 	.word	0x20400064

00408034 <sprintf>:
  408034:	b40e      	push	{r1, r2, r3}
  408036:	b5f0      	push	{r4, r5, r6, r7, lr}
  408038:	b09c      	sub	sp, #112	; 0x70
  40803a:	ab21      	add	r3, sp, #132	; 0x84
  40803c:	490f      	ldr	r1, [pc, #60]	; (40807c <sprintf+0x48>)
  40803e:	f853 2b04 	ldr.w	r2, [r3], #4
  408042:	9301      	str	r3, [sp, #4]
  408044:	4605      	mov	r5, r0
  408046:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40804a:	6808      	ldr	r0, [r1, #0]
  40804c:	9502      	str	r5, [sp, #8]
  40804e:	f44f 7702 	mov.w	r7, #520	; 0x208
  408052:	f64f 76ff 	movw	r6, #65535	; 0xffff
  408056:	a902      	add	r1, sp, #8
  408058:	9506      	str	r5, [sp, #24]
  40805a:	f8ad 7014 	strh.w	r7, [sp, #20]
  40805e:	9404      	str	r4, [sp, #16]
  408060:	9407      	str	r4, [sp, #28]
  408062:	f8ad 6016 	strh.w	r6, [sp, #22]
  408066:	f000 fb8f 	bl	408788 <_svfprintf_r>
  40806a:	9b02      	ldr	r3, [sp, #8]
  40806c:	2200      	movs	r2, #0
  40806e:	701a      	strb	r2, [r3, #0]
  408070:	b01c      	add	sp, #112	; 0x70
  408072:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  408076:	b003      	add	sp, #12
  408078:	4770      	bx	lr
  40807a:	bf00      	nop
  40807c:	20400064 	.word	0x20400064

00408080 <strcat>:
  408080:	0783      	lsls	r3, r0, #30
  408082:	b510      	push	{r4, lr}
  408084:	4604      	mov	r4, r0
  408086:	d110      	bne.n	4080aa <strcat+0x2a>
  408088:	6802      	ldr	r2, [r0, #0]
  40808a:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  40808e:	ea23 0302 	bic.w	r3, r3, r2
  408092:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  408096:	d108      	bne.n	4080aa <strcat+0x2a>
  408098:	f850 2f04 	ldr.w	r2, [r0, #4]!
  40809c:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  4080a0:	ea23 0302 	bic.w	r3, r3, r2
  4080a4:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  4080a8:	d0f6      	beq.n	408098 <strcat+0x18>
  4080aa:	7803      	ldrb	r3, [r0, #0]
  4080ac:	b11b      	cbz	r3, 4080b6 <strcat+0x36>
  4080ae:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4080b2:	2b00      	cmp	r3, #0
  4080b4:	d1fb      	bne.n	4080ae <strcat+0x2e>
  4080b6:	f000 f803 	bl	4080c0 <strcpy>
  4080ba:	4620      	mov	r0, r4
  4080bc:	bd10      	pop	{r4, pc}
  4080be:	bf00      	nop

004080c0 <strcpy>:
  4080c0:	ea80 0201 	eor.w	r2, r0, r1
  4080c4:	4684      	mov	ip, r0
  4080c6:	f012 0f03 	tst.w	r2, #3
  4080ca:	d14f      	bne.n	40816c <strcpy+0xac>
  4080cc:	f011 0f03 	tst.w	r1, #3
  4080d0:	d132      	bne.n	408138 <strcpy+0x78>
  4080d2:	f84d 4d04 	str.w	r4, [sp, #-4]!
  4080d6:	f011 0f04 	tst.w	r1, #4
  4080da:	f851 3b04 	ldr.w	r3, [r1], #4
  4080de:	d00b      	beq.n	4080f8 <strcpy+0x38>
  4080e0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  4080e4:	439a      	bics	r2, r3
  4080e6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4080ea:	bf04      	itt	eq
  4080ec:	f84c 3b04 	streq.w	r3, [ip], #4
  4080f0:	f851 3b04 	ldreq.w	r3, [r1], #4
  4080f4:	d116      	bne.n	408124 <strcpy+0x64>
  4080f6:	bf00      	nop
  4080f8:	f851 4b04 	ldr.w	r4, [r1], #4
  4080fc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  408100:	439a      	bics	r2, r3
  408102:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  408106:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  40810a:	d10b      	bne.n	408124 <strcpy+0x64>
  40810c:	f84c 3b04 	str.w	r3, [ip], #4
  408110:	43a2      	bics	r2, r4
  408112:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  408116:	bf04      	itt	eq
  408118:	f851 3b04 	ldreq.w	r3, [r1], #4
  40811c:	f84c 4b04 	streq.w	r4, [ip], #4
  408120:	d0ea      	beq.n	4080f8 <strcpy+0x38>
  408122:	4623      	mov	r3, r4
  408124:	f80c 3b01 	strb.w	r3, [ip], #1
  408128:	f013 0fff 	tst.w	r3, #255	; 0xff
  40812c:	ea4f 2333 	mov.w	r3, r3, ror #8
  408130:	d1f8      	bne.n	408124 <strcpy+0x64>
  408132:	f85d 4b04 	ldr.w	r4, [sp], #4
  408136:	4770      	bx	lr
  408138:	f011 0f01 	tst.w	r1, #1
  40813c:	d006      	beq.n	40814c <strcpy+0x8c>
  40813e:	f811 2b01 	ldrb.w	r2, [r1], #1
  408142:	f80c 2b01 	strb.w	r2, [ip], #1
  408146:	2a00      	cmp	r2, #0
  408148:	bf08      	it	eq
  40814a:	4770      	bxeq	lr
  40814c:	f011 0f02 	tst.w	r1, #2
  408150:	d0bf      	beq.n	4080d2 <strcpy+0x12>
  408152:	f831 2b02 	ldrh.w	r2, [r1], #2
  408156:	f012 0fff 	tst.w	r2, #255	; 0xff
  40815a:	bf16      	itet	ne
  40815c:	f82c 2b02 	strhne.w	r2, [ip], #2
  408160:	f88c 2000 	strbeq.w	r2, [ip]
  408164:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  408168:	d1b3      	bne.n	4080d2 <strcpy+0x12>
  40816a:	4770      	bx	lr
  40816c:	f811 2b01 	ldrb.w	r2, [r1], #1
  408170:	f80c 2b01 	strb.w	r2, [ip], #1
  408174:	2a00      	cmp	r2, #0
  408176:	d1f9      	bne.n	40816c <strcpy+0xac>
  408178:	4770      	bx	lr
  40817a:	bf00      	nop
  40817c:	0000      	movs	r0, r0
	...

00408180 <strlen>:
  408180:	f890 f000 	pld	[r0]
  408184:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  408188:	f020 0107 	bic.w	r1, r0, #7
  40818c:	f06f 0c00 	mvn.w	ip, #0
  408190:	f010 0407 	ands.w	r4, r0, #7
  408194:	f891 f020 	pld	[r1, #32]
  408198:	f040 8049 	bne.w	40822e <strlen+0xae>
  40819c:	f04f 0400 	mov.w	r4, #0
  4081a0:	f06f 0007 	mvn.w	r0, #7
  4081a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4081a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4081ac:	f100 0008 	add.w	r0, r0, #8
  4081b0:	fa82 f24c 	uadd8	r2, r2, ip
  4081b4:	faa4 f28c 	sel	r2, r4, ip
  4081b8:	fa83 f34c 	uadd8	r3, r3, ip
  4081bc:	faa2 f38c 	sel	r3, r2, ip
  4081c0:	bb4b      	cbnz	r3, 408216 <strlen+0x96>
  4081c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4081c6:	fa82 f24c 	uadd8	r2, r2, ip
  4081ca:	f100 0008 	add.w	r0, r0, #8
  4081ce:	faa4 f28c 	sel	r2, r4, ip
  4081d2:	fa83 f34c 	uadd8	r3, r3, ip
  4081d6:	faa2 f38c 	sel	r3, r2, ip
  4081da:	b9e3      	cbnz	r3, 408216 <strlen+0x96>
  4081dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4081e0:	fa82 f24c 	uadd8	r2, r2, ip
  4081e4:	f100 0008 	add.w	r0, r0, #8
  4081e8:	faa4 f28c 	sel	r2, r4, ip
  4081ec:	fa83 f34c 	uadd8	r3, r3, ip
  4081f0:	faa2 f38c 	sel	r3, r2, ip
  4081f4:	b97b      	cbnz	r3, 408216 <strlen+0x96>
  4081f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4081fa:	f101 0120 	add.w	r1, r1, #32
  4081fe:	fa82 f24c 	uadd8	r2, r2, ip
  408202:	f100 0008 	add.w	r0, r0, #8
  408206:	faa4 f28c 	sel	r2, r4, ip
  40820a:	fa83 f34c 	uadd8	r3, r3, ip
  40820e:	faa2 f38c 	sel	r3, r2, ip
  408212:	2b00      	cmp	r3, #0
  408214:	d0c6      	beq.n	4081a4 <strlen+0x24>
  408216:	2a00      	cmp	r2, #0
  408218:	bf04      	itt	eq
  40821a:	3004      	addeq	r0, #4
  40821c:	461a      	moveq	r2, r3
  40821e:	ba12      	rev	r2, r2
  408220:	fab2 f282 	clz	r2, r2
  408224:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  408228:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40822c:	4770      	bx	lr
  40822e:	e9d1 2300 	ldrd	r2, r3, [r1]
  408232:	f004 0503 	and.w	r5, r4, #3
  408236:	f1c4 0000 	rsb	r0, r4, #0
  40823a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40823e:	f014 0f04 	tst.w	r4, #4
  408242:	f891 f040 	pld	[r1, #64]	; 0x40
  408246:	fa0c f505 	lsl.w	r5, ip, r5
  40824a:	ea62 0205 	orn	r2, r2, r5
  40824e:	bf1c      	itt	ne
  408250:	ea63 0305 	ornne	r3, r3, r5
  408254:	4662      	movne	r2, ip
  408256:	f04f 0400 	mov.w	r4, #0
  40825a:	e7a9      	b.n	4081b0 <strlen+0x30>

0040825c <strncpy>:
  40825c:	ea40 0301 	orr.w	r3, r0, r1
  408260:	f013 0f03 	tst.w	r3, #3
  408264:	b470      	push	{r4, r5, r6}
  408266:	4603      	mov	r3, r0
  408268:	d024      	beq.n	4082b4 <strncpy+0x58>
  40826a:	b1a2      	cbz	r2, 408296 <strncpy+0x3a>
  40826c:	780c      	ldrb	r4, [r1, #0]
  40826e:	701c      	strb	r4, [r3, #0]
  408270:	3a01      	subs	r2, #1
  408272:	3301      	adds	r3, #1
  408274:	3101      	adds	r1, #1
  408276:	b13c      	cbz	r4, 408288 <strncpy+0x2c>
  408278:	b16a      	cbz	r2, 408296 <strncpy+0x3a>
  40827a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40827e:	f803 4b01 	strb.w	r4, [r3], #1
  408282:	3a01      	subs	r2, #1
  408284:	2c00      	cmp	r4, #0
  408286:	d1f7      	bne.n	408278 <strncpy+0x1c>
  408288:	b12a      	cbz	r2, 408296 <strncpy+0x3a>
  40828a:	441a      	add	r2, r3
  40828c:	2100      	movs	r1, #0
  40828e:	f803 1b01 	strb.w	r1, [r3], #1
  408292:	429a      	cmp	r2, r3
  408294:	d1fb      	bne.n	40828e <strncpy+0x32>
  408296:	bc70      	pop	{r4, r5, r6}
  408298:	4770      	bx	lr
  40829a:	460e      	mov	r6, r1
  40829c:	f851 5b04 	ldr.w	r5, [r1], #4
  4082a0:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
  4082a4:	ea24 0405 	bic.w	r4, r4, r5
  4082a8:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  4082ac:	d105      	bne.n	4082ba <strncpy+0x5e>
  4082ae:	f843 5b04 	str.w	r5, [r3], #4
  4082b2:	3a04      	subs	r2, #4
  4082b4:	2a03      	cmp	r2, #3
  4082b6:	d8f0      	bhi.n	40829a <strncpy+0x3e>
  4082b8:	e7d7      	b.n	40826a <strncpy+0xe>
  4082ba:	4631      	mov	r1, r6
  4082bc:	e7d6      	b.n	40826c <strncpy+0x10>
  4082be:	bf00      	nop

004082c0 <critical_factorization>:
  4082c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4082c4:	f04f 0e01 	mov.w	lr, #1
  4082c8:	4674      	mov	r4, lr
  4082ca:	2500      	movs	r5, #0
  4082cc:	f04f 36ff 	mov.w	r6, #4294967295
  4082d0:	192b      	adds	r3, r5, r4
  4082d2:	428b      	cmp	r3, r1
  4082d4:	eb00 0706 	add.w	r7, r0, r6
  4082d8:	d20d      	bcs.n	4082f6 <critical_factorization+0x36>
  4082da:	5d3f      	ldrb	r7, [r7, r4]
  4082dc:	f810 c003 	ldrb.w	ip, [r0, r3]
  4082e0:	45bc      	cmp	ip, r7
  4082e2:	d22d      	bcs.n	408340 <critical_factorization+0x80>
  4082e4:	461d      	mov	r5, r3
  4082e6:	2401      	movs	r4, #1
  4082e8:	eba3 0e06 	sub.w	lr, r3, r6
  4082ec:	192b      	adds	r3, r5, r4
  4082ee:	428b      	cmp	r3, r1
  4082f0:	eb00 0706 	add.w	r7, r0, r6
  4082f4:	d3f1      	bcc.n	4082da <critical_factorization+0x1a>
  4082f6:	f04f 0801 	mov.w	r8, #1
  4082fa:	f8c2 e000 	str.w	lr, [r2]
  4082fe:	4644      	mov	r4, r8
  408300:	2500      	movs	r5, #0
  408302:	f04f 37ff 	mov.w	r7, #4294967295
  408306:	192b      	adds	r3, r5, r4
  408308:	4299      	cmp	r1, r3
  40830a:	eb00 0e07 	add.w	lr, r0, r7
  40830e:	d90e      	bls.n	40832e <critical_factorization+0x6e>
  408310:	f81e e004 	ldrb.w	lr, [lr, r4]
  408314:	f810 c003 	ldrb.w	ip, [r0, r3]
  408318:	45f4      	cmp	ip, lr
  40831a:	d918      	bls.n	40834e <critical_factorization+0x8e>
  40831c:	461d      	mov	r5, r3
  40831e:	2401      	movs	r4, #1
  408320:	eba3 0807 	sub.w	r8, r3, r7
  408324:	192b      	adds	r3, r5, r4
  408326:	4299      	cmp	r1, r3
  408328:	eb00 0e07 	add.w	lr, r0, r7
  40832c:	d8f0      	bhi.n	408310 <critical_factorization+0x50>
  40832e:	3701      	adds	r7, #1
  408330:	1c70      	adds	r0, r6, #1
  408332:	4287      	cmp	r7, r0
  408334:	bf24      	itt	cs
  408336:	f8c2 8000 	strcs.w	r8, [r2]
  40833a:	4638      	movcs	r0, r7
  40833c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408340:	d00c      	beq.n	40835c <critical_factorization+0x9c>
  408342:	f04f 0e01 	mov.w	lr, #1
  408346:	462e      	mov	r6, r5
  408348:	4674      	mov	r4, lr
  40834a:	4475      	add	r5, lr
  40834c:	e7c0      	b.n	4082d0 <critical_factorization+0x10>
  40834e:	d00b      	beq.n	408368 <critical_factorization+0xa8>
  408350:	f04f 0801 	mov.w	r8, #1
  408354:	462f      	mov	r7, r5
  408356:	4644      	mov	r4, r8
  408358:	4445      	add	r5, r8
  40835a:	e7d4      	b.n	408306 <critical_factorization+0x46>
  40835c:	4574      	cmp	r4, lr
  40835e:	bf12      	itee	ne
  408360:	3401      	addne	r4, #1
  408362:	461d      	moveq	r5, r3
  408364:	2401      	moveq	r4, #1
  408366:	e7b3      	b.n	4082d0 <critical_factorization+0x10>
  408368:	4544      	cmp	r4, r8
  40836a:	bf12      	itee	ne
  40836c:	3401      	addne	r4, #1
  40836e:	461d      	moveq	r5, r3
  408370:	2401      	moveq	r4, #1
  408372:	e7c8      	b.n	408306 <critical_factorization+0x46>

00408374 <two_way_long_needle>:
  408374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408378:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  40837c:	4616      	mov	r6, r2
  40837e:	4605      	mov	r5, r0
  408380:	468b      	mov	fp, r1
  408382:	4610      	mov	r0, r2
  408384:	4619      	mov	r1, r3
  408386:	aa03      	add	r2, sp, #12
  408388:	461c      	mov	r4, r3
  40838a:	f7ff ff99 	bl	4082c0 <critical_factorization>
  40838e:	ab03      	add	r3, sp, #12
  408390:	4681      	mov	r9, r0
  408392:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  408396:	f843 4f04 	str.w	r4, [r3, #4]!
  40839a:	4293      	cmp	r3, r2
  40839c:	d1fb      	bne.n	408396 <two_way_long_needle+0x22>
  40839e:	b14c      	cbz	r4, 4083b4 <two_way_long_needle+0x40>
  4083a0:	1e63      	subs	r3, r4, #1
  4083a2:	1e72      	subs	r2, r6, #1
  4083a4:	a804      	add	r0, sp, #16
  4083a6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  4083aa:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  4083ae:	f113 33ff 	adds.w	r3, r3, #4294967295
  4083b2:	d2f8      	bcs.n	4083a6 <two_way_long_needle+0x32>
  4083b4:	9903      	ldr	r1, [sp, #12]
  4083b6:	464a      	mov	r2, r9
  4083b8:	4431      	add	r1, r6
  4083ba:	4630      	mov	r0, r6
  4083bc:	f7ff fbe8 	bl	407b90 <memcmp>
  4083c0:	2800      	cmp	r0, #0
  4083c2:	d16f      	bne.n	4084a4 <two_way_long_needle+0x130>
  4083c4:	f109 33ff 	add.w	r3, r9, #4294967295
  4083c8:	9300      	str	r3, [sp, #0]
  4083ca:	18f3      	adds	r3, r6, r3
  4083cc:	4682      	mov	sl, r0
  4083ce:	9301      	str	r3, [sp, #4]
  4083d0:	4623      	mov	r3, r4
  4083d2:	4680      	mov	r8, r0
  4083d4:	4654      	mov	r4, sl
  4083d6:	4658      	mov	r0, fp
  4083d8:	469a      	mov	sl, r3
  4083da:	eb08 070a 	add.w	r7, r8, sl
  4083de:	1a3a      	subs	r2, r7, r0
  4083e0:	2100      	movs	r1, #0
  4083e2:	4428      	add	r0, r5
  4083e4:	f004 fe8c 	bl	40d100 <memchr>
  4083e8:	2800      	cmp	r0, #0
  4083ea:	d156      	bne.n	40849a <two_way_long_needle+0x126>
  4083ec:	2f00      	cmp	r7, #0
  4083ee:	d054      	beq.n	40849a <two_way_long_needle+0x126>
  4083f0:	19eb      	adds	r3, r5, r7
  4083f2:	aa04      	add	r2, sp, #16
  4083f4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  4083f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4083fc:	b14b      	cbz	r3, 408412 <two_way_long_needle+0x9e>
  4083fe:	b124      	cbz	r4, 40840a <two_way_long_needle+0x96>
  408400:	9a03      	ldr	r2, [sp, #12]
  408402:	4293      	cmp	r3, r2
  408404:	d201      	bcs.n	40840a <two_way_long_needle+0x96>
  408406:	ebaa 0302 	sub.w	r3, sl, r2
  40840a:	4498      	add	r8, r3
  40840c:	2400      	movs	r4, #0
  40840e:	4638      	mov	r0, r7
  408410:	e7e3      	b.n	4083da <two_way_long_needle+0x66>
  408412:	454c      	cmp	r4, r9
  408414:	4623      	mov	r3, r4
  408416:	f10a 3eff 	add.w	lr, sl, #4294967295
  40841a:	bf38      	it	cc
  40841c:	464b      	movcc	r3, r9
  40841e:	4573      	cmp	r3, lr
  408420:	d213      	bcs.n	40844a <two_way_long_needle+0xd6>
  408422:	eb08 0203 	add.w	r2, r8, r3
  408426:	f816 c003 	ldrb.w	ip, [r6, r3]
  40842a:	5ca8      	ldrb	r0, [r5, r2]
  40842c:	4584      	cmp	ip, r0
  40842e:	442a      	add	r2, r5
  408430:	eb06 0103 	add.w	r1, r6, r3
  408434:	d006      	beq.n	408444 <two_way_long_needle+0xd0>
  408436:	e02c      	b.n	408492 <two_way_long_needle+0x11e>
  408438:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  40843c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  408440:	4584      	cmp	ip, r0
  408442:	d126      	bne.n	408492 <two_way_long_needle+0x11e>
  408444:	3301      	adds	r3, #1
  408446:	4573      	cmp	r3, lr
  408448:	d3f6      	bcc.n	408438 <two_way_long_needle+0xc4>
  40844a:	454c      	cmp	r4, r9
  40844c:	9900      	ldr	r1, [sp, #0]
  40844e:	f080 8089 	bcs.w	408564 <two_way_long_needle+0x1f0>
  408452:	9b00      	ldr	r3, [sp, #0]
  408454:	eb08 0203 	add.w	r2, r8, r3
  408458:	9b01      	ldr	r3, [sp, #4]
  40845a:	5ca8      	ldrb	r0, [r5, r2]
  40845c:	781b      	ldrb	r3, [r3, #0]
  40845e:	4298      	cmp	r0, r3
  408460:	442a      	add	r2, r5
  408462:	d17f      	bne.n	408564 <two_way_long_needle+0x1f0>
  408464:	9801      	ldr	r0, [sp, #4]
  408466:	f104 3bff 	add.w	fp, r4, #4294967295
  40846a:	e006      	b.n	40847a <two_way_long_needle+0x106>
  40846c:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  408470:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  408474:	45f4      	cmp	ip, lr
  408476:	d103      	bne.n	408480 <two_way_long_needle+0x10c>
  408478:	4619      	mov	r1, r3
  40847a:	1e4b      	subs	r3, r1, #1
  40847c:	459b      	cmp	fp, r3
  40847e:	d1f5      	bne.n	40846c <two_way_long_needle+0xf8>
  408480:	3401      	adds	r4, #1
  408482:	428c      	cmp	r4, r1
  408484:	d870      	bhi.n	408568 <two_way_long_needle+0x1f4>
  408486:	9c03      	ldr	r4, [sp, #12]
  408488:	4638      	mov	r0, r7
  40848a:	44a0      	add	r8, r4
  40848c:	ebaa 0404 	sub.w	r4, sl, r4
  408490:	e7a3      	b.n	4083da <two_way_long_needle+0x66>
  408492:	f1c9 0201 	rsb	r2, r9, #1
  408496:	4490      	add	r8, r2
  408498:	e7b7      	b.n	40840a <two_way_long_needle+0x96>
  40849a:	2000      	movs	r0, #0
  40849c:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  4084a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4084a4:	eba4 0309 	sub.w	r3, r4, r9
  4084a8:	454b      	cmp	r3, r9
  4084aa:	bf38      	it	cc
  4084ac:	464b      	movcc	r3, r9
  4084ae:	3301      	adds	r3, #1
  4084b0:	f109 38ff 	add.w	r8, r9, #4294967295
  4084b4:	9303      	str	r3, [sp, #12]
  4084b6:	eb06 0308 	add.w	r3, r6, r8
  4084ba:	4658      	mov	r0, fp
  4084bc:	f04f 0a00 	mov.w	sl, #0
  4084c0:	46cb      	mov	fp, r9
  4084c2:	4699      	mov	r9, r3
  4084c4:	eb0a 0704 	add.w	r7, sl, r4
  4084c8:	1a3a      	subs	r2, r7, r0
  4084ca:	2100      	movs	r1, #0
  4084cc:	4428      	add	r0, r5
  4084ce:	f004 fe17 	bl	40d100 <memchr>
  4084d2:	2800      	cmp	r0, #0
  4084d4:	d1e1      	bne.n	40849a <two_way_long_needle+0x126>
  4084d6:	2f00      	cmp	r7, #0
  4084d8:	d0df      	beq.n	40849a <two_way_long_needle+0x126>
  4084da:	19eb      	adds	r3, r5, r7
  4084dc:	aa04      	add	r2, sp, #16
  4084de:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  4084e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4084e6:	bba3      	cbnz	r3, 408552 <two_way_long_needle+0x1de>
  4084e8:	1e61      	subs	r1, r4, #1
  4084ea:	458b      	cmp	fp, r1
  4084ec:	d215      	bcs.n	40851a <two_way_long_needle+0x1a6>
  4084ee:	eb0a 020b 	add.w	r2, sl, fp
  4084f2:	f816 300b 	ldrb.w	r3, [r6, fp]
  4084f6:	f815 e002 	ldrb.w	lr, [r5, r2]
  4084fa:	459e      	cmp	lr, r3
  4084fc:	442a      	add	r2, r5
  4084fe:	eb06 000b 	add.w	r0, r6, fp
  408502:	465b      	mov	r3, fp
  408504:	d006      	beq.n	408514 <two_way_long_needle+0x1a0>
  408506:	e027      	b.n	408558 <two_way_long_needle+0x1e4>
  408508:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  40850c:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  408510:	45f4      	cmp	ip, lr
  408512:	d121      	bne.n	408558 <two_way_long_needle+0x1e4>
  408514:	3301      	adds	r3, #1
  408516:	428b      	cmp	r3, r1
  408518:	d3f6      	bcc.n	408508 <two_way_long_needle+0x194>
  40851a:	f1b8 3fff 	cmp.w	r8, #4294967295
  40851e:	d011      	beq.n	408544 <two_way_long_needle+0x1d0>
  408520:	eb0a 0208 	add.w	r2, sl, r8
  408524:	f899 1000 	ldrb.w	r1, [r9]
  408528:	5cab      	ldrb	r3, [r5, r2]
  40852a:	4299      	cmp	r1, r3
  40852c:	442a      	add	r2, r5
  40852e:	d10f      	bne.n	408550 <two_way_long_needle+0x1dc>
  408530:	464b      	mov	r3, r9
  408532:	e005      	b.n	408540 <two_way_long_needle+0x1cc>
  408534:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  408538:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  40853c:	4288      	cmp	r0, r1
  40853e:	d107      	bne.n	408550 <two_way_long_needle+0x1dc>
  408540:	42b3      	cmp	r3, r6
  408542:	d1f7      	bne.n	408534 <two_way_long_needle+0x1c0>
  408544:	eb05 000a 	add.w	r0, r5, sl
  408548:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  40854c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408550:	9b03      	ldr	r3, [sp, #12]
  408552:	449a      	add	sl, r3
  408554:	4638      	mov	r0, r7
  408556:	e7b5      	b.n	4084c4 <two_way_long_needle+0x150>
  408558:	f1cb 0201 	rsb	r2, fp, #1
  40855c:	4492      	add	sl, r2
  40855e:	449a      	add	sl, r3
  408560:	4638      	mov	r0, r7
  408562:	e7af      	b.n	4084c4 <two_way_long_needle+0x150>
  408564:	4649      	mov	r1, r9
  408566:	e78b      	b.n	408480 <two_way_long_needle+0x10c>
  408568:	eb05 0008 	add.w	r0, r5, r8
  40856c:	e796      	b.n	40849c <two_way_long_needle+0x128>
  40856e:	bf00      	nop

00408570 <strstr>:
  408570:	7802      	ldrb	r2, [r0, #0]
  408572:	2a00      	cmp	r2, #0
  408574:	f000 8101 	beq.w	40877a <strstr+0x20a>
  408578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40857c:	f891 8000 	ldrb.w	r8, [r1]
  408580:	b085      	sub	sp, #20
  408582:	4644      	mov	r4, r8
  408584:	f1b8 0f00 	cmp.w	r8, #0
  408588:	d016      	beq.n	4085b8 <strstr+0x48>
  40858a:	4686      	mov	lr, r0
  40858c:	f101 0c01 	add.w	ip, r1, #1
  408590:	2701      	movs	r7, #1
  408592:	e003      	b.n	40859c <strstr+0x2c>
  408594:	f813 4b01 	ldrb.w	r4, [r3], #1
  408598:	b16c      	cbz	r4, 4085b6 <strstr+0x46>
  40859a:	469c      	mov	ip, r3
  40859c:	42a2      	cmp	r2, r4
  40859e:	bf14      	ite	ne
  4085a0:	2700      	movne	r7, #0
  4085a2:	f007 0701 	andeq.w	r7, r7, #1
  4085a6:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  4085aa:	4663      	mov	r3, ip
  4085ac:	2a00      	cmp	r2, #0
  4085ae:	d1f1      	bne.n	408594 <strstr+0x24>
  4085b0:	f89c 3000 	ldrb.w	r3, [ip]
  4085b4:	b9fb      	cbnz	r3, 4085f6 <strstr+0x86>
  4085b6:	b117      	cbz	r7, 4085be <strstr+0x4e>
  4085b8:	b005      	add	sp, #20
  4085ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4085be:	460e      	mov	r6, r1
  4085c0:	4605      	mov	r5, r0
  4085c2:	4641      	mov	r1, r8
  4085c4:	3001      	adds	r0, #1
  4085c6:	ebac 0406 	sub.w	r4, ip, r6
  4085ca:	f005 fb4f 	bl	40dc6c <strchr>
  4085ce:	4607      	mov	r7, r0
  4085d0:	b188      	cbz	r0, 4085f6 <strstr+0x86>
  4085d2:	2c01      	cmp	r4, #1
  4085d4:	d0f0      	beq.n	4085b8 <strstr+0x48>
  4085d6:	1928      	adds	r0, r5, r4
  4085d8:	4287      	cmp	r7, r0
  4085da:	bf94      	ite	ls
  4085dc:	1bc1      	subls	r1, r0, r7
  4085de:	2101      	movhi	r1, #1
  4085e0:	2c1f      	cmp	r4, #31
  4085e2:	468b      	mov	fp, r1
  4085e4:	d90b      	bls.n	4085fe <strstr+0x8e>
  4085e6:	4623      	mov	r3, r4
  4085e8:	4632      	mov	r2, r6
  4085ea:	4638      	mov	r0, r7
  4085ec:	f7ff fec2 	bl	408374 <two_way_long_needle>
  4085f0:	b005      	add	sp, #20
  4085f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4085f6:	2000      	movs	r0, #0
  4085f8:	b005      	add	sp, #20
  4085fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4085fe:	aa03      	add	r2, sp, #12
  408600:	4621      	mov	r1, r4
  408602:	4630      	mov	r0, r6
  408604:	f7ff fe5c 	bl	4082c0 <critical_factorization>
  408608:	9903      	ldr	r1, [sp, #12]
  40860a:	4680      	mov	r8, r0
  40860c:	4602      	mov	r2, r0
  40860e:	4431      	add	r1, r6
  408610:	4630      	mov	r0, r6
  408612:	f7ff fabd 	bl	407b90 <memcmp>
  408616:	2800      	cmp	r0, #0
  408618:	d157      	bne.n	4086ca <strstr+0x15a>
  40861a:	f108 33ff 	add.w	r3, r8, #4294967295
  40861e:	9300      	str	r3, [sp, #0]
  408620:	18f3      	adds	r3, r6, r3
  408622:	4681      	mov	r9, r0
  408624:	4605      	mov	r5, r0
  408626:	9301      	str	r3, [sp, #4]
  408628:	4658      	mov	r0, fp
  40862a:	46b2      	mov	sl, r6
  40862c:	1966      	adds	r6, r4, r5
  40862e:	1a32      	subs	r2, r6, r0
  408630:	2100      	movs	r1, #0
  408632:	4438      	add	r0, r7
  408634:	f004 fd64 	bl	40d100 <memchr>
  408638:	2800      	cmp	r0, #0
  40863a:	d1dc      	bne.n	4085f6 <strstr+0x86>
  40863c:	2e00      	cmp	r6, #0
  40863e:	d0da      	beq.n	4085f6 <strstr+0x86>
  408640:	45c8      	cmp	r8, r9
  408642:	4643      	mov	r3, r8
  408644:	bf38      	it	cc
  408646:	464b      	movcc	r3, r9
  408648:	429c      	cmp	r4, r3
  40864a:	d912      	bls.n	408672 <strstr+0x102>
  40864c:	195a      	adds	r2, r3, r5
  40864e:	f81a 1003 	ldrb.w	r1, [sl, r3]
  408652:	5cb8      	ldrb	r0, [r7, r2]
  408654:	4281      	cmp	r1, r0
  408656:	443a      	add	r2, r7
  408658:	eb0a 0e03 	add.w	lr, sl, r3
  40865c:	d006      	beq.n	40866c <strstr+0xfc>
  40865e:	e02c      	b.n	4086ba <strstr+0x14a>
  408660:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  408664:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  408668:	4288      	cmp	r0, r1
  40866a:	d126      	bne.n	4086ba <strstr+0x14a>
  40866c:	3301      	adds	r3, #1
  40866e:	429c      	cmp	r4, r3
  408670:	d1f6      	bne.n	408660 <strstr+0xf0>
  408672:	45c8      	cmp	r8, r9
  408674:	9900      	ldr	r1, [sp, #0]
  408676:	f240 8083 	bls.w	408780 <strstr+0x210>
  40867a:	9b00      	ldr	r3, [sp, #0]
  40867c:	18ea      	adds	r2, r5, r3
  40867e:	9b01      	ldr	r3, [sp, #4]
  408680:	5cb8      	ldrb	r0, [r7, r2]
  408682:	781b      	ldrb	r3, [r3, #0]
  408684:	4298      	cmp	r0, r3
  408686:	443a      	add	r2, r7
  408688:	d17a      	bne.n	408780 <strstr+0x210>
  40868a:	9801      	ldr	r0, [sp, #4]
  40868c:	f109 3bff 	add.w	fp, r9, #4294967295
  408690:	e006      	b.n	4086a0 <strstr+0x130>
  408692:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  408696:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  40869a:	45f4      	cmp	ip, lr
  40869c:	d103      	bne.n	4086a6 <strstr+0x136>
  40869e:	4619      	mov	r1, r3
  4086a0:	1e4b      	subs	r3, r1, #1
  4086a2:	455b      	cmp	r3, fp
  4086a4:	d1f5      	bne.n	408692 <strstr+0x122>
  4086a6:	f109 0901 	add.w	r9, r9, #1
  4086aa:	4589      	cmp	r9, r1
  4086ac:	d857      	bhi.n	40875e <strstr+0x1ee>
  4086ae:	9b03      	ldr	r3, [sp, #12]
  4086b0:	4630      	mov	r0, r6
  4086b2:	441d      	add	r5, r3
  4086b4:	eba4 0903 	sub.w	r9, r4, r3
  4086b8:	e7b8      	b.n	40862c <strstr+0xbc>
  4086ba:	f1c8 0201 	rsb	r2, r8, #1
  4086be:	4415      	add	r5, r2
  4086c0:	441d      	add	r5, r3
  4086c2:	f04f 0900 	mov.w	r9, #0
  4086c6:	4630      	mov	r0, r6
  4086c8:	e7b0      	b.n	40862c <strstr+0xbc>
  4086ca:	eba4 0308 	sub.w	r3, r4, r8
  4086ce:	4543      	cmp	r3, r8
  4086d0:	bf38      	it	cc
  4086d2:	4643      	movcc	r3, r8
  4086d4:	3301      	adds	r3, #1
  4086d6:	f108 39ff 	add.w	r9, r8, #4294967295
  4086da:	9303      	str	r3, [sp, #12]
  4086dc:	eb06 0309 	add.w	r3, r6, r9
  4086e0:	4658      	mov	r0, fp
  4086e2:	2500      	movs	r5, #0
  4086e4:	46bb      	mov	fp, r7
  4086e6:	469a      	mov	sl, r3
  4086e8:	1967      	adds	r7, r4, r5
  4086ea:	1a3a      	subs	r2, r7, r0
  4086ec:	2100      	movs	r1, #0
  4086ee:	4458      	add	r0, fp
  4086f0:	f004 fd06 	bl	40d100 <memchr>
  4086f4:	2800      	cmp	r0, #0
  4086f6:	f47f af7e 	bne.w	4085f6 <strstr+0x86>
  4086fa:	2f00      	cmp	r7, #0
  4086fc:	f43f af7b 	beq.w	4085f6 <strstr+0x86>
  408700:	4544      	cmp	r4, r8
  408702:	d915      	bls.n	408730 <strstr+0x1c0>
  408704:	eb08 0205 	add.w	r2, r8, r5
  408708:	f816 3008 	ldrb.w	r3, [r6, r8]
  40870c:	f81b 0002 	ldrb.w	r0, [fp, r2]
  408710:	4298      	cmp	r0, r3
  408712:	445a      	add	r2, fp
  408714:	eb06 0108 	add.w	r1, r6, r8
  408718:	4643      	mov	r3, r8
  40871a:	d006      	beq.n	40872a <strstr+0x1ba>
  40871c:	e023      	b.n	408766 <strstr+0x1f6>
  40871e:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  408722:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  408726:	4586      	cmp	lr, r0
  408728:	d11d      	bne.n	408766 <strstr+0x1f6>
  40872a:	3301      	adds	r3, #1
  40872c:	429c      	cmp	r4, r3
  40872e:	d1f6      	bne.n	40871e <strstr+0x1ae>
  408730:	f1b9 3fff 	cmp.w	r9, #4294967295
  408734:	d012      	beq.n	40875c <strstr+0x1ec>
  408736:	eb05 0209 	add.w	r2, r5, r9
  40873a:	f89a 3000 	ldrb.w	r3, [sl]
  40873e:	f81b 1002 	ldrb.w	r1, [fp, r2]
  408742:	4299      	cmp	r1, r3
  408744:	445a      	add	r2, fp
  408746:	d114      	bne.n	408772 <strstr+0x202>
  408748:	4653      	mov	r3, sl
  40874a:	e005      	b.n	408758 <strstr+0x1e8>
  40874c:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  408750:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  408754:	4288      	cmp	r0, r1
  408756:	d10c      	bne.n	408772 <strstr+0x202>
  408758:	42b3      	cmp	r3, r6
  40875a:	d1f7      	bne.n	40874c <strstr+0x1dc>
  40875c:	465f      	mov	r7, fp
  40875e:	1978      	adds	r0, r7, r5
  408760:	b005      	add	sp, #20
  408762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408766:	f1c8 0201 	rsb	r2, r8, #1
  40876a:	4415      	add	r5, r2
  40876c:	441d      	add	r5, r3
  40876e:	4638      	mov	r0, r7
  408770:	e7ba      	b.n	4086e8 <strstr+0x178>
  408772:	9b03      	ldr	r3, [sp, #12]
  408774:	4638      	mov	r0, r7
  408776:	441d      	add	r5, r3
  408778:	e7b6      	b.n	4086e8 <strstr+0x178>
  40877a:	780b      	ldrb	r3, [r1, #0]
  40877c:	b913      	cbnz	r3, 408784 <strstr+0x214>
  40877e:	4770      	bx	lr
  408780:	4641      	mov	r1, r8
  408782:	e790      	b.n	4086a6 <strstr+0x136>
  408784:	2000      	movs	r0, #0
  408786:	4770      	bx	lr

00408788 <_svfprintf_r>:
  408788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40878c:	b0c3      	sub	sp, #268	; 0x10c
  40878e:	460c      	mov	r4, r1
  408790:	910b      	str	r1, [sp, #44]	; 0x2c
  408792:	4692      	mov	sl, r2
  408794:	930f      	str	r3, [sp, #60]	; 0x3c
  408796:	900c      	str	r0, [sp, #48]	; 0x30
  408798:	f004 f966 	bl	40ca68 <_localeconv_r>
  40879c:	6803      	ldr	r3, [r0, #0]
  40879e:	931a      	str	r3, [sp, #104]	; 0x68
  4087a0:	4618      	mov	r0, r3
  4087a2:	f7ff fced 	bl	408180 <strlen>
  4087a6:	89a3      	ldrh	r3, [r4, #12]
  4087a8:	9019      	str	r0, [sp, #100]	; 0x64
  4087aa:	0619      	lsls	r1, r3, #24
  4087ac:	d503      	bpl.n	4087b6 <_svfprintf_r+0x2e>
  4087ae:	6923      	ldr	r3, [r4, #16]
  4087b0:	2b00      	cmp	r3, #0
  4087b2:	f001 8003 	beq.w	4097bc <_svfprintf_r+0x1034>
  4087b6:	2300      	movs	r3, #0
  4087b8:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  4087bc:	9313      	str	r3, [sp, #76]	; 0x4c
  4087be:	9315      	str	r3, [sp, #84]	; 0x54
  4087c0:	9314      	str	r3, [sp, #80]	; 0x50
  4087c2:	9327      	str	r3, [sp, #156]	; 0x9c
  4087c4:	9326      	str	r3, [sp, #152]	; 0x98
  4087c6:	9318      	str	r3, [sp, #96]	; 0x60
  4087c8:	931b      	str	r3, [sp, #108]	; 0x6c
  4087ca:	9309      	str	r3, [sp, #36]	; 0x24
  4087cc:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  4087d0:	46c8      	mov	r8, r9
  4087d2:	9316      	str	r3, [sp, #88]	; 0x58
  4087d4:	9317      	str	r3, [sp, #92]	; 0x5c
  4087d6:	f89a 3000 	ldrb.w	r3, [sl]
  4087da:	4654      	mov	r4, sl
  4087dc:	b1e3      	cbz	r3, 408818 <_svfprintf_r+0x90>
  4087de:	2b25      	cmp	r3, #37	; 0x25
  4087e0:	d102      	bne.n	4087e8 <_svfprintf_r+0x60>
  4087e2:	e019      	b.n	408818 <_svfprintf_r+0x90>
  4087e4:	2b25      	cmp	r3, #37	; 0x25
  4087e6:	d003      	beq.n	4087f0 <_svfprintf_r+0x68>
  4087e8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4087ec:	2b00      	cmp	r3, #0
  4087ee:	d1f9      	bne.n	4087e4 <_svfprintf_r+0x5c>
  4087f0:	eba4 050a 	sub.w	r5, r4, sl
  4087f4:	b185      	cbz	r5, 408818 <_svfprintf_r+0x90>
  4087f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4087f8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4087fa:	f8c8 a000 	str.w	sl, [r8]
  4087fe:	3301      	adds	r3, #1
  408800:	442a      	add	r2, r5
  408802:	2b07      	cmp	r3, #7
  408804:	f8c8 5004 	str.w	r5, [r8, #4]
  408808:	9227      	str	r2, [sp, #156]	; 0x9c
  40880a:	9326      	str	r3, [sp, #152]	; 0x98
  40880c:	dc7f      	bgt.n	40890e <_svfprintf_r+0x186>
  40880e:	f108 0808 	add.w	r8, r8, #8
  408812:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408814:	442b      	add	r3, r5
  408816:	9309      	str	r3, [sp, #36]	; 0x24
  408818:	7823      	ldrb	r3, [r4, #0]
  40881a:	2b00      	cmp	r3, #0
  40881c:	d07f      	beq.n	40891e <_svfprintf_r+0x196>
  40881e:	2300      	movs	r3, #0
  408820:	461a      	mov	r2, r3
  408822:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  408826:	4619      	mov	r1, r3
  408828:	930d      	str	r3, [sp, #52]	; 0x34
  40882a:	469b      	mov	fp, r3
  40882c:	f04f 30ff 	mov.w	r0, #4294967295
  408830:	7863      	ldrb	r3, [r4, #1]
  408832:	900a      	str	r0, [sp, #40]	; 0x28
  408834:	f104 0a01 	add.w	sl, r4, #1
  408838:	f10a 0a01 	add.w	sl, sl, #1
  40883c:	f1a3 0020 	sub.w	r0, r3, #32
  408840:	2858      	cmp	r0, #88	; 0x58
  408842:	f200 83c1 	bhi.w	408fc8 <_svfprintf_r+0x840>
  408846:	e8df f010 	tbh	[pc, r0, lsl #1]
  40884a:	0238      	.short	0x0238
  40884c:	03bf03bf 	.word	0x03bf03bf
  408850:	03bf0240 	.word	0x03bf0240
  408854:	03bf03bf 	.word	0x03bf03bf
  408858:	03bf03bf 	.word	0x03bf03bf
  40885c:	024503bf 	.word	0x024503bf
  408860:	03bf0203 	.word	0x03bf0203
  408864:	026b005d 	.word	0x026b005d
  408868:	028603bf 	.word	0x028603bf
  40886c:	039d039d 	.word	0x039d039d
  408870:	039d039d 	.word	0x039d039d
  408874:	039d039d 	.word	0x039d039d
  408878:	039d039d 	.word	0x039d039d
  40887c:	03bf039d 	.word	0x03bf039d
  408880:	03bf03bf 	.word	0x03bf03bf
  408884:	03bf03bf 	.word	0x03bf03bf
  408888:	03bf03bf 	.word	0x03bf03bf
  40888c:	03bf03bf 	.word	0x03bf03bf
  408890:	033703bf 	.word	0x033703bf
  408894:	03bf0357 	.word	0x03bf0357
  408898:	03bf0357 	.word	0x03bf0357
  40889c:	03bf03bf 	.word	0x03bf03bf
  4088a0:	039803bf 	.word	0x039803bf
  4088a4:	03bf03bf 	.word	0x03bf03bf
  4088a8:	03bf03ad 	.word	0x03bf03ad
  4088ac:	03bf03bf 	.word	0x03bf03bf
  4088b0:	03bf03bf 	.word	0x03bf03bf
  4088b4:	03bf0259 	.word	0x03bf0259
  4088b8:	031e03bf 	.word	0x031e03bf
  4088bc:	03bf03bf 	.word	0x03bf03bf
  4088c0:	03bf03bf 	.word	0x03bf03bf
  4088c4:	03bf03bf 	.word	0x03bf03bf
  4088c8:	03bf03bf 	.word	0x03bf03bf
  4088cc:	03bf03bf 	.word	0x03bf03bf
  4088d0:	02db02c6 	.word	0x02db02c6
  4088d4:	03570357 	.word	0x03570357
  4088d8:	028b0357 	.word	0x028b0357
  4088dc:	03bf02db 	.word	0x03bf02db
  4088e0:	029003bf 	.word	0x029003bf
  4088e4:	029d03bf 	.word	0x029d03bf
  4088e8:	02b401cc 	.word	0x02b401cc
  4088ec:	03bf0208 	.word	0x03bf0208
  4088f0:	03bf01e1 	.word	0x03bf01e1
  4088f4:	03bf007e 	.word	0x03bf007e
  4088f8:	020d03bf 	.word	0x020d03bf
  4088fc:	980d      	ldr	r0, [sp, #52]	; 0x34
  4088fe:	930f      	str	r3, [sp, #60]	; 0x3c
  408900:	4240      	negs	r0, r0
  408902:	900d      	str	r0, [sp, #52]	; 0x34
  408904:	f04b 0b04 	orr.w	fp, fp, #4
  408908:	f89a 3000 	ldrb.w	r3, [sl]
  40890c:	e794      	b.n	408838 <_svfprintf_r+0xb0>
  40890e:	aa25      	add	r2, sp, #148	; 0x94
  408910:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408912:	980c      	ldr	r0, [sp, #48]	; 0x30
  408914:	f005 fa1e 	bl	40dd54 <__ssprint_r>
  408918:	b940      	cbnz	r0, 40892c <_svfprintf_r+0x1a4>
  40891a:	46c8      	mov	r8, r9
  40891c:	e779      	b.n	408812 <_svfprintf_r+0x8a>
  40891e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  408920:	b123      	cbz	r3, 40892c <_svfprintf_r+0x1a4>
  408922:	980c      	ldr	r0, [sp, #48]	; 0x30
  408924:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408926:	aa25      	add	r2, sp, #148	; 0x94
  408928:	f005 fa14 	bl	40dd54 <__ssprint_r>
  40892c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40892e:	899b      	ldrh	r3, [r3, #12]
  408930:	f013 0f40 	tst.w	r3, #64	; 0x40
  408934:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408936:	bf18      	it	ne
  408938:	f04f 33ff 	movne.w	r3, #4294967295
  40893c:	9309      	str	r3, [sp, #36]	; 0x24
  40893e:	9809      	ldr	r0, [sp, #36]	; 0x24
  408940:	b043      	add	sp, #268	; 0x10c
  408942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408946:	f01b 0f20 	tst.w	fp, #32
  40894a:	9311      	str	r3, [sp, #68]	; 0x44
  40894c:	f040 81dd 	bne.w	408d0a <_svfprintf_r+0x582>
  408950:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408952:	f01b 0f10 	tst.w	fp, #16
  408956:	4613      	mov	r3, r2
  408958:	f040 856e 	bne.w	409438 <_svfprintf_r+0xcb0>
  40895c:	f01b 0f40 	tst.w	fp, #64	; 0x40
  408960:	f000 856a 	beq.w	409438 <_svfprintf_r+0xcb0>
  408964:	8814      	ldrh	r4, [r2, #0]
  408966:	3204      	adds	r2, #4
  408968:	2500      	movs	r5, #0
  40896a:	2301      	movs	r3, #1
  40896c:	920f      	str	r2, [sp, #60]	; 0x3c
  40896e:	2700      	movs	r7, #0
  408970:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  408974:	990a      	ldr	r1, [sp, #40]	; 0x28
  408976:	1c4a      	adds	r2, r1, #1
  408978:	f000 8265 	beq.w	408e46 <_svfprintf_r+0x6be>
  40897c:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  408980:	9207      	str	r2, [sp, #28]
  408982:	ea54 0205 	orrs.w	r2, r4, r5
  408986:	f040 8264 	bne.w	408e52 <_svfprintf_r+0x6ca>
  40898a:	2900      	cmp	r1, #0
  40898c:	f040 843c 	bne.w	409208 <_svfprintf_r+0xa80>
  408990:	2b00      	cmp	r3, #0
  408992:	f040 84d7 	bne.w	409344 <_svfprintf_r+0xbbc>
  408996:	f01b 0301 	ands.w	r3, fp, #1
  40899a:	930e      	str	r3, [sp, #56]	; 0x38
  40899c:	f000 8604 	beq.w	4095a8 <_svfprintf_r+0xe20>
  4089a0:	ae42      	add	r6, sp, #264	; 0x108
  4089a2:	2330      	movs	r3, #48	; 0x30
  4089a4:	f806 3d41 	strb.w	r3, [r6, #-65]!
  4089a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4089aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4089ac:	4293      	cmp	r3, r2
  4089ae:	bfb8      	it	lt
  4089b0:	4613      	movlt	r3, r2
  4089b2:	9308      	str	r3, [sp, #32]
  4089b4:	2300      	movs	r3, #0
  4089b6:	9312      	str	r3, [sp, #72]	; 0x48
  4089b8:	b117      	cbz	r7, 4089c0 <_svfprintf_r+0x238>
  4089ba:	9b08      	ldr	r3, [sp, #32]
  4089bc:	3301      	adds	r3, #1
  4089be:	9308      	str	r3, [sp, #32]
  4089c0:	9b07      	ldr	r3, [sp, #28]
  4089c2:	f013 0302 	ands.w	r3, r3, #2
  4089c6:	9310      	str	r3, [sp, #64]	; 0x40
  4089c8:	d002      	beq.n	4089d0 <_svfprintf_r+0x248>
  4089ca:	9b08      	ldr	r3, [sp, #32]
  4089cc:	3302      	adds	r3, #2
  4089ce:	9308      	str	r3, [sp, #32]
  4089d0:	9b07      	ldr	r3, [sp, #28]
  4089d2:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  4089d6:	f040 830e 	bne.w	408ff6 <_svfprintf_r+0x86e>
  4089da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4089dc:	9a08      	ldr	r2, [sp, #32]
  4089de:	eba3 0b02 	sub.w	fp, r3, r2
  4089e2:	f1bb 0f00 	cmp.w	fp, #0
  4089e6:	f340 8306 	ble.w	408ff6 <_svfprintf_r+0x86e>
  4089ea:	f1bb 0f10 	cmp.w	fp, #16
  4089ee:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4089f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4089f2:	dd29      	ble.n	408a48 <_svfprintf_r+0x2c0>
  4089f4:	4643      	mov	r3, r8
  4089f6:	4621      	mov	r1, r4
  4089f8:	46a8      	mov	r8, r5
  4089fa:	2710      	movs	r7, #16
  4089fc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4089fe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  408a00:	e006      	b.n	408a10 <_svfprintf_r+0x288>
  408a02:	f1ab 0b10 	sub.w	fp, fp, #16
  408a06:	f1bb 0f10 	cmp.w	fp, #16
  408a0a:	f103 0308 	add.w	r3, r3, #8
  408a0e:	dd18      	ble.n	408a42 <_svfprintf_r+0x2ba>
  408a10:	3201      	adds	r2, #1
  408a12:	48b7      	ldr	r0, [pc, #732]	; (408cf0 <_svfprintf_r+0x568>)
  408a14:	9226      	str	r2, [sp, #152]	; 0x98
  408a16:	3110      	adds	r1, #16
  408a18:	2a07      	cmp	r2, #7
  408a1a:	9127      	str	r1, [sp, #156]	; 0x9c
  408a1c:	e883 0081 	stmia.w	r3, {r0, r7}
  408a20:	ddef      	ble.n	408a02 <_svfprintf_r+0x27a>
  408a22:	aa25      	add	r2, sp, #148	; 0x94
  408a24:	4629      	mov	r1, r5
  408a26:	4620      	mov	r0, r4
  408a28:	f005 f994 	bl	40dd54 <__ssprint_r>
  408a2c:	2800      	cmp	r0, #0
  408a2e:	f47f af7d 	bne.w	40892c <_svfprintf_r+0x1a4>
  408a32:	f1ab 0b10 	sub.w	fp, fp, #16
  408a36:	f1bb 0f10 	cmp.w	fp, #16
  408a3a:	9927      	ldr	r1, [sp, #156]	; 0x9c
  408a3c:	9a26      	ldr	r2, [sp, #152]	; 0x98
  408a3e:	464b      	mov	r3, r9
  408a40:	dce6      	bgt.n	408a10 <_svfprintf_r+0x288>
  408a42:	4645      	mov	r5, r8
  408a44:	460c      	mov	r4, r1
  408a46:	4698      	mov	r8, r3
  408a48:	3201      	adds	r2, #1
  408a4a:	4ba9      	ldr	r3, [pc, #676]	; (408cf0 <_svfprintf_r+0x568>)
  408a4c:	9226      	str	r2, [sp, #152]	; 0x98
  408a4e:	445c      	add	r4, fp
  408a50:	2a07      	cmp	r2, #7
  408a52:	9427      	str	r4, [sp, #156]	; 0x9c
  408a54:	e888 0808 	stmia.w	r8, {r3, fp}
  408a58:	f300 8498 	bgt.w	40938c <_svfprintf_r+0xc04>
  408a5c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  408a60:	f108 0808 	add.w	r8, r8, #8
  408a64:	b177      	cbz	r7, 408a84 <_svfprintf_r+0x2fc>
  408a66:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408a68:	3301      	adds	r3, #1
  408a6a:	3401      	adds	r4, #1
  408a6c:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  408a70:	2201      	movs	r2, #1
  408a72:	2b07      	cmp	r3, #7
  408a74:	9427      	str	r4, [sp, #156]	; 0x9c
  408a76:	9326      	str	r3, [sp, #152]	; 0x98
  408a78:	e888 0006 	stmia.w	r8, {r1, r2}
  408a7c:	f300 83db 	bgt.w	409236 <_svfprintf_r+0xaae>
  408a80:	f108 0808 	add.w	r8, r8, #8
  408a84:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408a86:	b16b      	cbz	r3, 408aa4 <_svfprintf_r+0x31c>
  408a88:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408a8a:	3301      	adds	r3, #1
  408a8c:	3402      	adds	r4, #2
  408a8e:	a91e      	add	r1, sp, #120	; 0x78
  408a90:	2202      	movs	r2, #2
  408a92:	2b07      	cmp	r3, #7
  408a94:	9427      	str	r4, [sp, #156]	; 0x9c
  408a96:	9326      	str	r3, [sp, #152]	; 0x98
  408a98:	e888 0006 	stmia.w	r8, {r1, r2}
  408a9c:	f300 83d6 	bgt.w	40924c <_svfprintf_r+0xac4>
  408aa0:	f108 0808 	add.w	r8, r8, #8
  408aa4:	2d80      	cmp	r5, #128	; 0x80
  408aa6:	f000 8315 	beq.w	4090d4 <_svfprintf_r+0x94c>
  408aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408aac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408aae:	1a9f      	subs	r7, r3, r2
  408ab0:	2f00      	cmp	r7, #0
  408ab2:	dd36      	ble.n	408b22 <_svfprintf_r+0x39a>
  408ab4:	2f10      	cmp	r7, #16
  408ab6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408ab8:	4d8e      	ldr	r5, [pc, #568]	; (408cf4 <_svfprintf_r+0x56c>)
  408aba:	dd27      	ble.n	408b0c <_svfprintf_r+0x384>
  408abc:	4642      	mov	r2, r8
  408abe:	4621      	mov	r1, r4
  408ac0:	46b0      	mov	r8, r6
  408ac2:	f04f 0b10 	mov.w	fp, #16
  408ac6:	462e      	mov	r6, r5
  408ac8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  408aca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  408acc:	e004      	b.n	408ad8 <_svfprintf_r+0x350>
  408ace:	3f10      	subs	r7, #16
  408ad0:	2f10      	cmp	r7, #16
  408ad2:	f102 0208 	add.w	r2, r2, #8
  408ad6:	dd15      	ble.n	408b04 <_svfprintf_r+0x37c>
  408ad8:	3301      	adds	r3, #1
  408ada:	3110      	adds	r1, #16
  408adc:	2b07      	cmp	r3, #7
  408ade:	9127      	str	r1, [sp, #156]	; 0x9c
  408ae0:	9326      	str	r3, [sp, #152]	; 0x98
  408ae2:	e882 0840 	stmia.w	r2, {r6, fp}
  408ae6:	ddf2      	ble.n	408ace <_svfprintf_r+0x346>
  408ae8:	aa25      	add	r2, sp, #148	; 0x94
  408aea:	4629      	mov	r1, r5
  408aec:	4620      	mov	r0, r4
  408aee:	f005 f931 	bl	40dd54 <__ssprint_r>
  408af2:	2800      	cmp	r0, #0
  408af4:	f47f af1a 	bne.w	40892c <_svfprintf_r+0x1a4>
  408af8:	3f10      	subs	r7, #16
  408afa:	2f10      	cmp	r7, #16
  408afc:	9927      	ldr	r1, [sp, #156]	; 0x9c
  408afe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408b00:	464a      	mov	r2, r9
  408b02:	dce9      	bgt.n	408ad8 <_svfprintf_r+0x350>
  408b04:	4635      	mov	r5, r6
  408b06:	460c      	mov	r4, r1
  408b08:	4646      	mov	r6, r8
  408b0a:	4690      	mov	r8, r2
  408b0c:	3301      	adds	r3, #1
  408b0e:	443c      	add	r4, r7
  408b10:	2b07      	cmp	r3, #7
  408b12:	9427      	str	r4, [sp, #156]	; 0x9c
  408b14:	9326      	str	r3, [sp, #152]	; 0x98
  408b16:	e888 00a0 	stmia.w	r8, {r5, r7}
  408b1a:	f300 8381 	bgt.w	409220 <_svfprintf_r+0xa98>
  408b1e:	f108 0808 	add.w	r8, r8, #8
  408b22:	9b07      	ldr	r3, [sp, #28]
  408b24:	05df      	lsls	r7, r3, #23
  408b26:	f100 8268 	bmi.w	408ffa <_svfprintf_r+0x872>
  408b2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408b2c:	990e      	ldr	r1, [sp, #56]	; 0x38
  408b2e:	f8c8 6000 	str.w	r6, [r8]
  408b32:	3301      	adds	r3, #1
  408b34:	440c      	add	r4, r1
  408b36:	2b07      	cmp	r3, #7
  408b38:	9427      	str	r4, [sp, #156]	; 0x9c
  408b3a:	f8c8 1004 	str.w	r1, [r8, #4]
  408b3e:	9326      	str	r3, [sp, #152]	; 0x98
  408b40:	f300 834d 	bgt.w	4091de <_svfprintf_r+0xa56>
  408b44:	f108 0808 	add.w	r8, r8, #8
  408b48:	9b07      	ldr	r3, [sp, #28]
  408b4a:	075b      	lsls	r3, r3, #29
  408b4c:	d53a      	bpl.n	408bc4 <_svfprintf_r+0x43c>
  408b4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408b50:	9a08      	ldr	r2, [sp, #32]
  408b52:	1a9d      	subs	r5, r3, r2
  408b54:	2d00      	cmp	r5, #0
  408b56:	dd35      	ble.n	408bc4 <_svfprintf_r+0x43c>
  408b58:	2d10      	cmp	r5, #16
  408b5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408b5c:	dd20      	ble.n	408ba0 <_svfprintf_r+0x418>
  408b5e:	2610      	movs	r6, #16
  408b60:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  408b62:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  408b66:	e004      	b.n	408b72 <_svfprintf_r+0x3ea>
  408b68:	3d10      	subs	r5, #16
  408b6a:	2d10      	cmp	r5, #16
  408b6c:	f108 0808 	add.w	r8, r8, #8
  408b70:	dd16      	ble.n	408ba0 <_svfprintf_r+0x418>
  408b72:	3301      	adds	r3, #1
  408b74:	4a5e      	ldr	r2, [pc, #376]	; (408cf0 <_svfprintf_r+0x568>)
  408b76:	9326      	str	r3, [sp, #152]	; 0x98
  408b78:	3410      	adds	r4, #16
  408b7a:	2b07      	cmp	r3, #7
  408b7c:	9427      	str	r4, [sp, #156]	; 0x9c
  408b7e:	e888 0044 	stmia.w	r8, {r2, r6}
  408b82:	ddf1      	ble.n	408b68 <_svfprintf_r+0x3e0>
  408b84:	aa25      	add	r2, sp, #148	; 0x94
  408b86:	4659      	mov	r1, fp
  408b88:	4638      	mov	r0, r7
  408b8a:	f005 f8e3 	bl	40dd54 <__ssprint_r>
  408b8e:	2800      	cmp	r0, #0
  408b90:	f47f aecc 	bne.w	40892c <_svfprintf_r+0x1a4>
  408b94:	3d10      	subs	r5, #16
  408b96:	2d10      	cmp	r5, #16
  408b98:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408b9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408b9c:	46c8      	mov	r8, r9
  408b9e:	dce8      	bgt.n	408b72 <_svfprintf_r+0x3ea>
  408ba0:	3301      	adds	r3, #1
  408ba2:	4a53      	ldr	r2, [pc, #332]	; (408cf0 <_svfprintf_r+0x568>)
  408ba4:	9326      	str	r3, [sp, #152]	; 0x98
  408ba6:	442c      	add	r4, r5
  408ba8:	2b07      	cmp	r3, #7
  408baa:	9427      	str	r4, [sp, #156]	; 0x9c
  408bac:	e888 0024 	stmia.w	r8, {r2, r5}
  408bb0:	dd08      	ble.n	408bc4 <_svfprintf_r+0x43c>
  408bb2:	aa25      	add	r2, sp, #148	; 0x94
  408bb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408bb6:	980c      	ldr	r0, [sp, #48]	; 0x30
  408bb8:	f005 f8cc 	bl	40dd54 <__ssprint_r>
  408bbc:	2800      	cmp	r0, #0
  408bbe:	f47f aeb5 	bne.w	40892c <_svfprintf_r+0x1a4>
  408bc2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408bc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  408bc8:	9908      	ldr	r1, [sp, #32]
  408bca:	428a      	cmp	r2, r1
  408bcc:	bfac      	ite	ge
  408bce:	189b      	addge	r3, r3, r2
  408bd0:	185b      	addlt	r3, r3, r1
  408bd2:	9309      	str	r3, [sp, #36]	; 0x24
  408bd4:	2c00      	cmp	r4, #0
  408bd6:	f040 830d 	bne.w	4091f4 <_svfprintf_r+0xa6c>
  408bda:	2300      	movs	r3, #0
  408bdc:	9326      	str	r3, [sp, #152]	; 0x98
  408bde:	46c8      	mov	r8, r9
  408be0:	e5f9      	b.n	4087d6 <_svfprintf_r+0x4e>
  408be2:	9311      	str	r3, [sp, #68]	; 0x44
  408be4:	f01b 0320 	ands.w	r3, fp, #32
  408be8:	f040 81e3 	bne.w	408fb2 <_svfprintf_r+0x82a>
  408bec:	f01b 0210 	ands.w	r2, fp, #16
  408bf0:	f040 842e 	bne.w	409450 <_svfprintf_r+0xcc8>
  408bf4:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  408bf8:	f000 842a 	beq.w	409450 <_svfprintf_r+0xcc8>
  408bfc:	990f      	ldr	r1, [sp, #60]	; 0x3c
  408bfe:	4613      	mov	r3, r2
  408c00:	460a      	mov	r2, r1
  408c02:	3204      	adds	r2, #4
  408c04:	880c      	ldrh	r4, [r1, #0]
  408c06:	920f      	str	r2, [sp, #60]	; 0x3c
  408c08:	2500      	movs	r5, #0
  408c0a:	e6b0      	b.n	40896e <_svfprintf_r+0x1e6>
  408c0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408c0e:	9311      	str	r3, [sp, #68]	; 0x44
  408c10:	6816      	ldr	r6, [r2, #0]
  408c12:	2400      	movs	r4, #0
  408c14:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  408c18:	1d15      	adds	r5, r2, #4
  408c1a:	2e00      	cmp	r6, #0
  408c1c:	f000 86a7 	beq.w	40996e <_svfprintf_r+0x11e6>
  408c20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  408c22:	1c53      	adds	r3, r2, #1
  408c24:	f000 8609 	beq.w	40983a <_svfprintf_r+0x10b2>
  408c28:	4621      	mov	r1, r4
  408c2a:	4630      	mov	r0, r6
  408c2c:	f004 fa68 	bl	40d100 <memchr>
  408c30:	2800      	cmp	r0, #0
  408c32:	f000 86e1 	beq.w	4099f8 <_svfprintf_r+0x1270>
  408c36:	1b83      	subs	r3, r0, r6
  408c38:	930e      	str	r3, [sp, #56]	; 0x38
  408c3a:	940a      	str	r4, [sp, #40]	; 0x28
  408c3c:	950f      	str	r5, [sp, #60]	; 0x3c
  408c3e:	f8cd b01c 	str.w	fp, [sp, #28]
  408c42:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408c46:	9308      	str	r3, [sp, #32]
  408c48:	9412      	str	r4, [sp, #72]	; 0x48
  408c4a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  408c4e:	e6b3      	b.n	4089b8 <_svfprintf_r+0x230>
  408c50:	f89a 3000 	ldrb.w	r3, [sl]
  408c54:	2201      	movs	r2, #1
  408c56:	212b      	movs	r1, #43	; 0x2b
  408c58:	e5ee      	b.n	408838 <_svfprintf_r+0xb0>
  408c5a:	f04b 0b20 	orr.w	fp, fp, #32
  408c5e:	f89a 3000 	ldrb.w	r3, [sl]
  408c62:	e5e9      	b.n	408838 <_svfprintf_r+0xb0>
  408c64:	9311      	str	r3, [sp, #68]	; 0x44
  408c66:	2a00      	cmp	r2, #0
  408c68:	f040 8795 	bne.w	409b96 <_svfprintf_r+0x140e>
  408c6c:	4b22      	ldr	r3, [pc, #136]	; (408cf8 <_svfprintf_r+0x570>)
  408c6e:	9318      	str	r3, [sp, #96]	; 0x60
  408c70:	f01b 0f20 	tst.w	fp, #32
  408c74:	f040 8111 	bne.w	408e9a <_svfprintf_r+0x712>
  408c78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408c7a:	f01b 0f10 	tst.w	fp, #16
  408c7e:	4613      	mov	r3, r2
  408c80:	f040 83e1 	bne.w	409446 <_svfprintf_r+0xcbe>
  408c84:	f01b 0f40 	tst.w	fp, #64	; 0x40
  408c88:	f000 83dd 	beq.w	409446 <_svfprintf_r+0xcbe>
  408c8c:	3304      	adds	r3, #4
  408c8e:	8814      	ldrh	r4, [r2, #0]
  408c90:	930f      	str	r3, [sp, #60]	; 0x3c
  408c92:	2500      	movs	r5, #0
  408c94:	f01b 0f01 	tst.w	fp, #1
  408c98:	f000 810c 	beq.w	408eb4 <_svfprintf_r+0x72c>
  408c9c:	ea54 0305 	orrs.w	r3, r4, r5
  408ca0:	f000 8108 	beq.w	408eb4 <_svfprintf_r+0x72c>
  408ca4:	2330      	movs	r3, #48	; 0x30
  408ca6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  408caa:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  408cae:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  408cb2:	f04b 0b02 	orr.w	fp, fp, #2
  408cb6:	2302      	movs	r3, #2
  408cb8:	e659      	b.n	40896e <_svfprintf_r+0x1e6>
  408cba:	f89a 3000 	ldrb.w	r3, [sl]
  408cbe:	2900      	cmp	r1, #0
  408cc0:	f47f adba 	bne.w	408838 <_svfprintf_r+0xb0>
  408cc4:	2201      	movs	r2, #1
  408cc6:	2120      	movs	r1, #32
  408cc8:	e5b6      	b.n	408838 <_svfprintf_r+0xb0>
  408cca:	f04b 0b01 	orr.w	fp, fp, #1
  408cce:	f89a 3000 	ldrb.w	r3, [sl]
  408cd2:	e5b1      	b.n	408838 <_svfprintf_r+0xb0>
  408cd4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  408cd6:	6823      	ldr	r3, [r4, #0]
  408cd8:	930d      	str	r3, [sp, #52]	; 0x34
  408cda:	4618      	mov	r0, r3
  408cdc:	2800      	cmp	r0, #0
  408cde:	4623      	mov	r3, r4
  408ce0:	f103 0304 	add.w	r3, r3, #4
  408ce4:	f6ff ae0a 	blt.w	4088fc <_svfprintf_r+0x174>
  408ce8:	930f      	str	r3, [sp, #60]	; 0x3c
  408cea:	f89a 3000 	ldrb.w	r3, [sl]
  408cee:	e5a3      	b.n	408838 <_svfprintf_r+0xb0>
  408cf0:	0040ed20 	.word	0x0040ed20
  408cf4:	0040ed30 	.word	0x0040ed30
  408cf8:	0040ed00 	.word	0x0040ed00
  408cfc:	f04b 0b10 	orr.w	fp, fp, #16
  408d00:	f01b 0f20 	tst.w	fp, #32
  408d04:	9311      	str	r3, [sp, #68]	; 0x44
  408d06:	f43f ae23 	beq.w	408950 <_svfprintf_r+0x1c8>
  408d0a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  408d0c:	3507      	adds	r5, #7
  408d0e:	f025 0307 	bic.w	r3, r5, #7
  408d12:	f103 0208 	add.w	r2, r3, #8
  408d16:	e9d3 4500 	ldrd	r4, r5, [r3]
  408d1a:	920f      	str	r2, [sp, #60]	; 0x3c
  408d1c:	2301      	movs	r3, #1
  408d1e:	e626      	b.n	40896e <_svfprintf_r+0x1e6>
  408d20:	f89a 3000 	ldrb.w	r3, [sl]
  408d24:	2b2a      	cmp	r3, #42	; 0x2a
  408d26:	f10a 0401 	add.w	r4, sl, #1
  408d2a:	f000 8727 	beq.w	409b7c <_svfprintf_r+0x13f4>
  408d2e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  408d32:	2809      	cmp	r0, #9
  408d34:	46a2      	mov	sl, r4
  408d36:	f200 86ad 	bhi.w	409a94 <_svfprintf_r+0x130c>
  408d3a:	2300      	movs	r3, #0
  408d3c:	461c      	mov	r4, r3
  408d3e:	f81a 3b01 	ldrb.w	r3, [sl], #1
  408d42:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  408d46:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  408d4a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  408d4e:	2809      	cmp	r0, #9
  408d50:	d9f5      	bls.n	408d3e <_svfprintf_r+0x5b6>
  408d52:	940a      	str	r4, [sp, #40]	; 0x28
  408d54:	e572      	b.n	40883c <_svfprintf_r+0xb4>
  408d56:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  408d5a:	f89a 3000 	ldrb.w	r3, [sl]
  408d5e:	e56b      	b.n	408838 <_svfprintf_r+0xb0>
  408d60:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  408d64:	f89a 3000 	ldrb.w	r3, [sl]
  408d68:	e566      	b.n	408838 <_svfprintf_r+0xb0>
  408d6a:	f89a 3000 	ldrb.w	r3, [sl]
  408d6e:	2b6c      	cmp	r3, #108	; 0x6c
  408d70:	bf03      	ittte	eq
  408d72:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  408d76:	f04b 0b20 	orreq.w	fp, fp, #32
  408d7a:	f10a 0a01 	addeq.w	sl, sl, #1
  408d7e:	f04b 0b10 	orrne.w	fp, fp, #16
  408d82:	e559      	b.n	408838 <_svfprintf_r+0xb0>
  408d84:	2a00      	cmp	r2, #0
  408d86:	f040 8711 	bne.w	409bac <_svfprintf_r+0x1424>
  408d8a:	f01b 0f20 	tst.w	fp, #32
  408d8e:	f040 84f9 	bne.w	409784 <_svfprintf_r+0xffc>
  408d92:	f01b 0f10 	tst.w	fp, #16
  408d96:	f040 84ac 	bne.w	4096f2 <_svfprintf_r+0xf6a>
  408d9a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  408d9e:	f000 84a8 	beq.w	4096f2 <_svfprintf_r+0xf6a>
  408da2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  408da4:	6813      	ldr	r3, [r2, #0]
  408da6:	3204      	adds	r2, #4
  408da8:	920f      	str	r2, [sp, #60]	; 0x3c
  408daa:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  408dae:	801a      	strh	r2, [r3, #0]
  408db0:	e511      	b.n	4087d6 <_svfprintf_r+0x4e>
  408db2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  408db4:	4bb3      	ldr	r3, [pc, #716]	; (409084 <_svfprintf_r+0x8fc>)
  408db6:	680c      	ldr	r4, [r1, #0]
  408db8:	9318      	str	r3, [sp, #96]	; 0x60
  408dba:	2230      	movs	r2, #48	; 0x30
  408dbc:	2378      	movs	r3, #120	; 0x78
  408dbe:	3104      	adds	r1, #4
  408dc0:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  408dc4:	9311      	str	r3, [sp, #68]	; 0x44
  408dc6:	f04b 0b02 	orr.w	fp, fp, #2
  408dca:	910f      	str	r1, [sp, #60]	; 0x3c
  408dcc:	2500      	movs	r5, #0
  408dce:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  408dd2:	2302      	movs	r3, #2
  408dd4:	e5cb      	b.n	40896e <_svfprintf_r+0x1e6>
  408dd6:	990f      	ldr	r1, [sp, #60]	; 0x3c
  408dd8:	9311      	str	r3, [sp, #68]	; 0x44
  408dda:	680a      	ldr	r2, [r1, #0]
  408ddc:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  408de0:	2300      	movs	r3, #0
  408de2:	460a      	mov	r2, r1
  408de4:	461f      	mov	r7, r3
  408de6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  408dea:	3204      	adds	r2, #4
  408dec:	2301      	movs	r3, #1
  408dee:	9308      	str	r3, [sp, #32]
  408df0:	f8cd b01c 	str.w	fp, [sp, #28]
  408df4:	970a      	str	r7, [sp, #40]	; 0x28
  408df6:	9712      	str	r7, [sp, #72]	; 0x48
  408df8:	920f      	str	r2, [sp, #60]	; 0x3c
  408dfa:	930e      	str	r3, [sp, #56]	; 0x38
  408dfc:	ae28      	add	r6, sp, #160	; 0xa0
  408dfe:	e5df      	b.n	4089c0 <_svfprintf_r+0x238>
  408e00:	9311      	str	r3, [sp, #68]	; 0x44
  408e02:	2a00      	cmp	r2, #0
  408e04:	f040 86ea 	bne.w	409bdc <_svfprintf_r+0x1454>
  408e08:	f01b 0f20 	tst.w	fp, #32
  408e0c:	d15d      	bne.n	408eca <_svfprintf_r+0x742>
  408e0e:	f01b 0f10 	tst.w	fp, #16
  408e12:	f040 8308 	bne.w	409426 <_svfprintf_r+0xc9e>
  408e16:	f01b 0f40 	tst.w	fp, #64	; 0x40
  408e1a:	f000 8304 	beq.w	409426 <_svfprintf_r+0xc9e>
  408e1e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  408e20:	f9b1 4000 	ldrsh.w	r4, [r1]
  408e24:	3104      	adds	r1, #4
  408e26:	17e5      	asrs	r5, r4, #31
  408e28:	4622      	mov	r2, r4
  408e2a:	462b      	mov	r3, r5
  408e2c:	910f      	str	r1, [sp, #60]	; 0x3c
  408e2e:	2a00      	cmp	r2, #0
  408e30:	f173 0300 	sbcs.w	r3, r3, #0
  408e34:	db58      	blt.n	408ee8 <_svfprintf_r+0x760>
  408e36:	990a      	ldr	r1, [sp, #40]	; 0x28
  408e38:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  408e3c:	1c4a      	adds	r2, r1, #1
  408e3e:	f04f 0301 	mov.w	r3, #1
  408e42:	f47f ad9b 	bne.w	40897c <_svfprintf_r+0x1f4>
  408e46:	ea54 0205 	orrs.w	r2, r4, r5
  408e4a:	f000 81df 	beq.w	40920c <_svfprintf_r+0xa84>
  408e4e:	f8cd b01c 	str.w	fp, [sp, #28]
  408e52:	2b01      	cmp	r3, #1
  408e54:	f000 827b 	beq.w	40934e <_svfprintf_r+0xbc6>
  408e58:	2b02      	cmp	r3, #2
  408e5a:	f040 8206 	bne.w	40926a <_svfprintf_r+0xae2>
  408e5e:	9818      	ldr	r0, [sp, #96]	; 0x60
  408e60:	464e      	mov	r6, r9
  408e62:	0923      	lsrs	r3, r4, #4
  408e64:	f004 010f 	and.w	r1, r4, #15
  408e68:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  408e6c:	092a      	lsrs	r2, r5, #4
  408e6e:	461c      	mov	r4, r3
  408e70:	4615      	mov	r5, r2
  408e72:	5c43      	ldrb	r3, [r0, r1]
  408e74:	f806 3d01 	strb.w	r3, [r6, #-1]!
  408e78:	ea54 0305 	orrs.w	r3, r4, r5
  408e7c:	d1f1      	bne.n	408e62 <_svfprintf_r+0x6da>
  408e7e:	eba9 0306 	sub.w	r3, r9, r6
  408e82:	930e      	str	r3, [sp, #56]	; 0x38
  408e84:	e590      	b.n	4089a8 <_svfprintf_r+0x220>
  408e86:	9311      	str	r3, [sp, #68]	; 0x44
  408e88:	2a00      	cmp	r2, #0
  408e8a:	f040 86a3 	bne.w	409bd4 <_svfprintf_r+0x144c>
  408e8e:	4b7e      	ldr	r3, [pc, #504]	; (409088 <_svfprintf_r+0x900>)
  408e90:	9318      	str	r3, [sp, #96]	; 0x60
  408e92:	f01b 0f20 	tst.w	fp, #32
  408e96:	f43f aeef 	beq.w	408c78 <_svfprintf_r+0x4f0>
  408e9a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  408e9c:	3507      	adds	r5, #7
  408e9e:	f025 0307 	bic.w	r3, r5, #7
  408ea2:	f103 0208 	add.w	r2, r3, #8
  408ea6:	f01b 0f01 	tst.w	fp, #1
  408eaa:	920f      	str	r2, [sp, #60]	; 0x3c
  408eac:	e9d3 4500 	ldrd	r4, r5, [r3]
  408eb0:	f47f aef4 	bne.w	408c9c <_svfprintf_r+0x514>
  408eb4:	2302      	movs	r3, #2
  408eb6:	e55a      	b.n	40896e <_svfprintf_r+0x1e6>
  408eb8:	9311      	str	r3, [sp, #68]	; 0x44
  408eba:	2a00      	cmp	r2, #0
  408ebc:	f040 8686 	bne.w	409bcc <_svfprintf_r+0x1444>
  408ec0:	f04b 0b10 	orr.w	fp, fp, #16
  408ec4:	f01b 0f20 	tst.w	fp, #32
  408ec8:	d0a1      	beq.n	408e0e <_svfprintf_r+0x686>
  408eca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  408ecc:	3507      	adds	r5, #7
  408ece:	f025 0507 	bic.w	r5, r5, #7
  408ed2:	e9d5 2300 	ldrd	r2, r3, [r5]
  408ed6:	2a00      	cmp	r2, #0
  408ed8:	f105 0108 	add.w	r1, r5, #8
  408edc:	461d      	mov	r5, r3
  408ede:	f173 0300 	sbcs.w	r3, r3, #0
  408ee2:	910f      	str	r1, [sp, #60]	; 0x3c
  408ee4:	4614      	mov	r4, r2
  408ee6:	daa6      	bge.n	408e36 <_svfprintf_r+0x6ae>
  408ee8:	272d      	movs	r7, #45	; 0x2d
  408eea:	4264      	negs	r4, r4
  408eec:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  408ef0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  408ef4:	2301      	movs	r3, #1
  408ef6:	e53d      	b.n	408974 <_svfprintf_r+0x1ec>
  408ef8:	9311      	str	r3, [sp, #68]	; 0x44
  408efa:	2a00      	cmp	r2, #0
  408efc:	f040 8662 	bne.w	409bc4 <_svfprintf_r+0x143c>
  408f00:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  408f02:	3507      	adds	r5, #7
  408f04:	f025 0307 	bic.w	r3, r5, #7
  408f08:	f103 0208 	add.w	r2, r3, #8
  408f0c:	920f      	str	r2, [sp, #60]	; 0x3c
  408f0e:	681a      	ldr	r2, [r3, #0]
  408f10:	9215      	str	r2, [sp, #84]	; 0x54
  408f12:	685b      	ldr	r3, [r3, #4]
  408f14:	9314      	str	r3, [sp, #80]	; 0x50
  408f16:	9b14      	ldr	r3, [sp, #80]	; 0x50
  408f18:	9d15      	ldr	r5, [sp, #84]	; 0x54
  408f1a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  408f1e:	4628      	mov	r0, r5
  408f20:	4621      	mov	r1, r4
  408f22:	f04f 32ff 	mov.w	r2, #4294967295
  408f26:	4b59      	ldr	r3, [pc, #356]	; (40908c <_svfprintf_r+0x904>)
  408f28:	f005 fb0a 	bl	40e540 <__aeabi_dcmpun>
  408f2c:	2800      	cmp	r0, #0
  408f2e:	f040 834a 	bne.w	4095c6 <_svfprintf_r+0xe3e>
  408f32:	4628      	mov	r0, r5
  408f34:	4621      	mov	r1, r4
  408f36:	f04f 32ff 	mov.w	r2, #4294967295
  408f3a:	4b54      	ldr	r3, [pc, #336]	; (40908c <_svfprintf_r+0x904>)
  408f3c:	f005 fae2 	bl	40e504 <__aeabi_dcmple>
  408f40:	2800      	cmp	r0, #0
  408f42:	f040 8340 	bne.w	4095c6 <_svfprintf_r+0xe3e>
  408f46:	a815      	add	r0, sp, #84	; 0x54
  408f48:	c80d      	ldmia	r0, {r0, r2, r3}
  408f4a:	9914      	ldr	r1, [sp, #80]	; 0x50
  408f4c:	f005 fad0 	bl	40e4f0 <__aeabi_dcmplt>
  408f50:	2800      	cmp	r0, #0
  408f52:	f040 8530 	bne.w	4099b6 <_svfprintf_r+0x122e>
  408f56:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  408f5a:	4e4d      	ldr	r6, [pc, #308]	; (409090 <_svfprintf_r+0x908>)
  408f5c:	4b4d      	ldr	r3, [pc, #308]	; (409094 <_svfprintf_r+0x90c>)
  408f5e:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  408f62:	9007      	str	r0, [sp, #28]
  408f64:	9811      	ldr	r0, [sp, #68]	; 0x44
  408f66:	2203      	movs	r2, #3
  408f68:	2100      	movs	r1, #0
  408f6a:	9208      	str	r2, [sp, #32]
  408f6c:	910a      	str	r1, [sp, #40]	; 0x28
  408f6e:	2847      	cmp	r0, #71	; 0x47
  408f70:	bfd8      	it	le
  408f72:	461e      	movle	r6, r3
  408f74:	920e      	str	r2, [sp, #56]	; 0x38
  408f76:	9112      	str	r1, [sp, #72]	; 0x48
  408f78:	e51e      	b.n	4089b8 <_svfprintf_r+0x230>
  408f7a:	f04b 0b08 	orr.w	fp, fp, #8
  408f7e:	f89a 3000 	ldrb.w	r3, [sl]
  408f82:	e459      	b.n	408838 <_svfprintf_r+0xb0>
  408f84:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  408f88:	2300      	movs	r3, #0
  408f8a:	461c      	mov	r4, r3
  408f8c:	f81a 3b01 	ldrb.w	r3, [sl], #1
  408f90:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  408f94:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  408f98:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  408f9c:	2809      	cmp	r0, #9
  408f9e:	d9f5      	bls.n	408f8c <_svfprintf_r+0x804>
  408fa0:	940d      	str	r4, [sp, #52]	; 0x34
  408fa2:	e44b      	b.n	40883c <_svfprintf_r+0xb4>
  408fa4:	f04b 0b10 	orr.w	fp, fp, #16
  408fa8:	9311      	str	r3, [sp, #68]	; 0x44
  408faa:	f01b 0320 	ands.w	r3, fp, #32
  408fae:	f43f ae1d 	beq.w	408bec <_svfprintf_r+0x464>
  408fb2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  408fb4:	3507      	adds	r5, #7
  408fb6:	f025 0307 	bic.w	r3, r5, #7
  408fba:	f103 0208 	add.w	r2, r3, #8
  408fbe:	e9d3 4500 	ldrd	r4, r5, [r3]
  408fc2:	920f      	str	r2, [sp, #60]	; 0x3c
  408fc4:	2300      	movs	r3, #0
  408fc6:	e4d2      	b.n	40896e <_svfprintf_r+0x1e6>
  408fc8:	9311      	str	r3, [sp, #68]	; 0x44
  408fca:	2a00      	cmp	r2, #0
  408fcc:	f040 85e7 	bne.w	409b9e <_svfprintf_r+0x1416>
  408fd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408fd2:	2a00      	cmp	r2, #0
  408fd4:	f43f aca3 	beq.w	40891e <_svfprintf_r+0x196>
  408fd8:	2300      	movs	r3, #0
  408fda:	2101      	movs	r1, #1
  408fdc:	461f      	mov	r7, r3
  408fde:	9108      	str	r1, [sp, #32]
  408fe0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  408fe4:	f8cd b01c 	str.w	fp, [sp, #28]
  408fe8:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  408fec:	930a      	str	r3, [sp, #40]	; 0x28
  408fee:	9312      	str	r3, [sp, #72]	; 0x48
  408ff0:	910e      	str	r1, [sp, #56]	; 0x38
  408ff2:	ae28      	add	r6, sp, #160	; 0xa0
  408ff4:	e4e4      	b.n	4089c0 <_svfprintf_r+0x238>
  408ff6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408ff8:	e534      	b.n	408a64 <_svfprintf_r+0x2dc>
  408ffa:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408ffc:	2b65      	cmp	r3, #101	; 0x65
  408ffe:	f340 80a7 	ble.w	409150 <_svfprintf_r+0x9c8>
  409002:	a815      	add	r0, sp, #84	; 0x54
  409004:	c80d      	ldmia	r0, {r0, r2, r3}
  409006:	9914      	ldr	r1, [sp, #80]	; 0x50
  409008:	f005 fa68 	bl	40e4dc <__aeabi_dcmpeq>
  40900c:	2800      	cmp	r0, #0
  40900e:	f000 8150 	beq.w	4092b2 <_svfprintf_r+0xb2a>
  409012:	9b26      	ldr	r3, [sp, #152]	; 0x98
  409014:	4a20      	ldr	r2, [pc, #128]	; (409098 <_svfprintf_r+0x910>)
  409016:	f8c8 2000 	str.w	r2, [r8]
  40901a:	3301      	adds	r3, #1
  40901c:	3401      	adds	r4, #1
  40901e:	2201      	movs	r2, #1
  409020:	2b07      	cmp	r3, #7
  409022:	9427      	str	r4, [sp, #156]	; 0x9c
  409024:	9326      	str	r3, [sp, #152]	; 0x98
  409026:	f8c8 2004 	str.w	r2, [r8, #4]
  40902a:	f300 836a 	bgt.w	409702 <_svfprintf_r+0xf7a>
  40902e:	f108 0808 	add.w	r8, r8, #8
  409032:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  409034:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  409036:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  409038:	4293      	cmp	r3, r2
  40903a:	db03      	blt.n	409044 <_svfprintf_r+0x8bc>
  40903c:	9b07      	ldr	r3, [sp, #28]
  40903e:	07dd      	lsls	r5, r3, #31
  409040:	f57f ad82 	bpl.w	408b48 <_svfprintf_r+0x3c0>
  409044:	9b26      	ldr	r3, [sp, #152]	; 0x98
  409046:	9919      	ldr	r1, [sp, #100]	; 0x64
  409048:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40904a:	f8c8 2000 	str.w	r2, [r8]
  40904e:	3301      	adds	r3, #1
  409050:	440c      	add	r4, r1
  409052:	2b07      	cmp	r3, #7
  409054:	f8c8 1004 	str.w	r1, [r8, #4]
  409058:	9427      	str	r4, [sp, #156]	; 0x9c
  40905a:	9326      	str	r3, [sp, #152]	; 0x98
  40905c:	f300 839e 	bgt.w	40979c <_svfprintf_r+0x1014>
  409060:	f108 0808 	add.w	r8, r8, #8
  409064:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  409066:	1e5e      	subs	r6, r3, #1
  409068:	2e00      	cmp	r6, #0
  40906a:	f77f ad6d 	ble.w	408b48 <_svfprintf_r+0x3c0>
  40906e:	2e10      	cmp	r6, #16
  409070:	9b26      	ldr	r3, [sp, #152]	; 0x98
  409072:	4d0a      	ldr	r5, [pc, #40]	; (40909c <_svfprintf_r+0x914>)
  409074:	f340 81f5 	ble.w	409462 <_svfprintf_r+0xcda>
  409078:	4622      	mov	r2, r4
  40907a:	2710      	movs	r7, #16
  40907c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  409080:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  409082:	e013      	b.n	4090ac <_svfprintf_r+0x924>
  409084:	0040ed00 	.word	0x0040ed00
  409088:	0040ecec 	.word	0x0040ecec
  40908c:	7fefffff 	.word	0x7fefffff
  409090:	0040ece0 	.word	0x0040ece0
  409094:	0040ecdc 	.word	0x0040ecdc
  409098:	0040ed1c 	.word	0x0040ed1c
  40909c:	0040ed30 	.word	0x0040ed30
  4090a0:	f108 0808 	add.w	r8, r8, #8
  4090a4:	3e10      	subs	r6, #16
  4090a6:	2e10      	cmp	r6, #16
  4090a8:	f340 81da 	ble.w	409460 <_svfprintf_r+0xcd8>
  4090ac:	3301      	adds	r3, #1
  4090ae:	3210      	adds	r2, #16
  4090b0:	2b07      	cmp	r3, #7
  4090b2:	9227      	str	r2, [sp, #156]	; 0x9c
  4090b4:	9326      	str	r3, [sp, #152]	; 0x98
  4090b6:	e888 00a0 	stmia.w	r8, {r5, r7}
  4090ba:	ddf1      	ble.n	4090a0 <_svfprintf_r+0x918>
  4090bc:	aa25      	add	r2, sp, #148	; 0x94
  4090be:	4621      	mov	r1, r4
  4090c0:	4658      	mov	r0, fp
  4090c2:	f004 fe47 	bl	40dd54 <__ssprint_r>
  4090c6:	2800      	cmp	r0, #0
  4090c8:	f47f ac30 	bne.w	40892c <_svfprintf_r+0x1a4>
  4090cc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4090ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4090d0:	46c8      	mov	r8, r9
  4090d2:	e7e7      	b.n	4090a4 <_svfprintf_r+0x91c>
  4090d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4090d6:	9a08      	ldr	r2, [sp, #32]
  4090d8:	1a9f      	subs	r7, r3, r2
  4090da:	2f00      	cmp	r7, #0
  4090dc:	f77f ace5 	ble.w	408aaa <_svfprintf_r+0x322>
  4090e0:	2f10      	cmp	r7, #16
  4090e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4090e4:	4db6      	ldr	r5, [pc, #728]	; (4093c0 <_svfprintf_r+0xc38>)
  4090e6:	dd27      	ble.n	409138 <_svfprintf_r+0x9b0>
  4090e8:	4642      	mov	r2, r8
  4090ea:	4621      	mov	r1, r4
  4090ec:	46b0      	mov	r8, r6
  4090ee:	f04f 0b10 	mov.w	fp, #16
  4090f2:	462e      	mov	r6, r5
  4090f4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4090f6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4090f8:	e004      	b.n	409104 <_svfprintf_r+0x97c>
  4090fa:	3f10      	subs	r7, #16
  4090fc:	2f10      	cmp	r7, #16
  4090fe:	f102 0208 	add.w	r2, r2, #8
  409102:	dd15      	ble.n	409130 <_svfprintf_r+0x9a8>
  409104:	3301      	adds	r3, #1
  409106:	3110      	adds	r1, #16
  409108:	2b07      	cmp	r3, #7
  40910a:	9127      	str	r1, [sp, #156]	; 0x9c
  40910c:	9326      	str	r3, [sp, #152]	; 0x98
  40910e:	e882 0840 	stmia.w	r2, {r6, fp}
  409112:	ddf2      	ble.n	4090fa <_svfprintf_r+0x972>
  409114:	aa25      	add	r2, sp, #148	; 0x94
  409116:	4629      	mov	r1, r5
  409118:	4620      	mov	r0, r4
  40911a:	f004 fe1b 	bl	40dd54 <__ssprint_r>
  40911e:	2800      	cmp	r0, #0
  409120:	f47f ac04 	bne.w	40892c <_svfprintf_r+0x1a4>
  409124:	3f10      	subs	r7, #16
  409126:	2f10      	cmp	r7, #16
  409128:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40912a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40912c:	464a      	mov	r2, r9
  40912e:	dce9      	bgt.n	409104 <_svfprintf_r+0x97c>
  409130:	4635      	mov	r5, r6
  409132:	460c      	mov	r4, r1
  409134:	4646      	mov	r6, r8
  409136:	4690      	mov	r8, r2
  409138:	3301      	adds	r3, #1
  40913a:	443c      	add	r4, r7
  40913c:	2b07      	cmp	r3, #7
  40913e:	9427      	str	r4, [sp, #156]	; 0x9c
  409140:	9326      	str	r3, [sp, #152]	; 0x98
  409142:	e888 00a0 	stmia.w	r8, {r5, r7}
  409146:	f300 8232 	bgt.w	4095ae <_svfprintf_r+0xe26>
  40914a:	f108 0808 	add.w	r8, r8, #8
  40914e:	e4ac      	b.n	408aaa <_svfprintf_r+0x322>
  409150:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  409152:	9f26      	ldr	r7, [sp, #152]	; 0x98
  409154:	2b01      	cmp	r3, #1
  409156:	f340 81fe 	ble.w	409556 <_svfprintf_r+0xdce>
  40915a:	3701      	adds	r7, #1
  40915c:	3401      	adds	r4, #1
  40915e:	2301      	movs	r3, #1
  409160:	2f07      	cmp	r7, #7
  409162:	9427      	str	r4, [sp, #156]	; 0x9c
  409164:	9726      	str	r7, [sp, #152]	; 0x98
  409166:	f8c8 6000 	str.w	r6, [r8]
  40916a:	f8c8 3004 	str.w	r3, [r8, #4]
  40916e:	f300 8203 	bgt.w	409578 <_svfprintf_r+0xdf0>
  409172:	f108 0808 	add.w	r8, r8, #8
  409176:	9a19      	ldr	r2, [sp, #100]	; 0x64
  409178:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40917a:	f8c8 3000 	str.w	r3, [r8]
  40917e:	3701      	adds	r7, #1
  409180:	4414      	add	r4, r2
  409182:	2f07      	cmp	r7, #7
  409184:	9427      	str	r4, [sp, #156]	; 0x9c
  409186:	9726      	str	r7, [sp, #152]	; 0x98
  409188:	f8c8 2004 	str.w	r2, [r8, #4]
  40918c:	f300 8200 	bgt.w	409590 <_svfprintf_r+0xe08>
  409190:	f108 0808 	add.w	r8, r8, #8
  409194:	a815      	add	r0, sp, #84	; 0x54
  409196:	c80d      	ldmia	r0, {r0, r2, r3}
  409198:	9914      	ldr	r1, [sp, #80]	; 0x50
  40919a:	f005 f99f 	bl	40e4dc <__aeabi_dcmpeq>
  40919e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4091a0:	2800      	cmp	r0, #0
  4091a2:	f040 8101 	bne.w	4093a8 <_svfprintf_r+0xc20>
  4091a6:	3b01      	subs	r3, #1
  4091a8:	3701      	adds	r7, #1
  4091aa:	3601      	adds	r6, #1
  4091ac:	441c      	add	r4, r3
  4091ae:	2f07      	cmp	r7, #7
  4091b0:	9726      	str	r7, [sp, #152]	; 0x98
  4091b2:	9427      	str	r4, [sp, #156]	; 0x9c
  4091b4:	f8c8 6000 	str.w	r6, [r8]
  4091b8:	f8c8 3004 	str.w	r3, [r8, #4]
  4091bc:	f300 8127 	bgt.w	40940e <_svfprintf_r+0xc86>
  4091c0:	f108 0808 	add.w	r8, r8, #8
  4091c4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  4091c6:	f8c8 2004 	str.w	r2, [r8, #4]
  4091ca:	3701      	adds	r7, #1
  4091cc:	4414      	add	r4, r2
  4091ce:	ab21      	add	r3, sp, #132	; 0x84
  4091d0:	2f07      	cmp	r7, #7
  4091d2:	9427      	str	r4, [sp, #156]	; 0x9c
  4091d4:	9726      	str	r7, [sp, #152]	; 0x98
  4091d6:	f8c8 3000 	str.w	r3, [r8]
  4091da:	f77f acb3 	ble.w	408b44 <_svfprintf_r+0x3bc>
  4091de:	aa25      	add	r2, sp, #148	; 0x94
  4091e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4091e2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4091e4:	f004 fdb6 	bl	40dd54 <__ssprint_r>
  4091e8:	2800      	cmp	r0, #0
  4091ea:	f47f ab9f 	bne.w	40892c <_svfprintf_r+0x1a4>
  4091ee:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4091f0:	46c8      	mov	r8, r9
  4091f2:	e4a9      	b.n	408b48 <_svfprintf_r+0x3c0>
  4091f4:	aa25      	add	r2, sp, #148	; 0x94
  4091f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4091f8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4091fa:	f004 fdab 	bl	40dd54 <__ssprint_r>
  4091fe:	2800      	cmp	r0, #0
  409200:	f43f aceb 	beq.w	408bda <_svfprintf_r+0x452>
  409204:	f7ff bb92 	b.w	40892c <_svfprintf_r+0x1a4>
  409208:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40920c:	2b01      	cmp	r3, #1
  40920e:	f000 8134 	beq.w	40947a <_svfprintf_r+0xcf2>
  409212:	2b02      	cmp	r3, #2
  409214:	d125      	bne.n	409262 <_svfprintf_r+0xada>
  409216:	f8cd b01c 	str.w	fp, [sp, #28]
  40921a:	2400      	movs	r4, #0
  40921c:	2500      	movs	r5, #0
  40921e:	e61e      	b.n	408e5e <_svfprintf_r+0x6d6>
  409220:	aa25      	add	r2, sp, #148	; 0x94
  409222:	990b      	ldr	r1, [sp, #44]	; 0x2c
  409224:	980c      	ldr	r0, [sp, #48]	; 0x30
  409226:	f004 fd95 	bl	40dd54 <__ssprint_r>
  40922a:	2800      	cmp	r0, #0
  40922c:	f47f ab7e 	bne.w	40892c <_svfprintf_r+0x1a4>
  409230:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  409232:	46c8      	mov	r8, r9
  409234:	e475      	b.n	408b22 <_svfprintf_r+0x39a>
  409236:	aa25      	add	r2, sp, #148	; 0x94
  409238:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40923a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40923c:	f004 fd8a 	bl	40dd54 <__ssprint_r>
  409240:	2800      	cmp	r0, #0
  409242:	f47f ab73 	bne.w	40892c <_svfprintf_r+0x1a4>
  409246:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  409248:	46c8      	mov	r8, r9
  40924a:	e41b      	b.n	408a84 <_svfprintf_r+0x2fc>
  40924c:	aa25      	add	r2, sp, #148	; 0x94
  40924e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  409250:	980c      	ldr	r0, [sp, #48]	; 0x30
  409252:	f004 fd7f 	bl	40dd54 <__ssprint_r>
  409256:	2800      	cmp	r0, #0
  409258:	f47f ab68 	bne.w	40892c <_svfprintf_r+0x1a4>
  40925c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40925e:	46c8      	mov	r8, r9
  409260:	e420      	b.n	408aa4 <_svfprintf_r+0x31c>
  409262:	f8cd b01c 	str.w	fp, [sp, #28]
  409266:	2400      	movs	r4, #0
  409268:	2500      	movs	r5, #0
  40926a:	4649      	mov	r1, r9
  40926c:	e000      	b.n	409270 <_svfprintf_r+0xae8>
  40926e:	4631      	mov	r1, r6
  409270:	08e2      	lsrs	r2, r4, #3
  409272:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  409276:	08e8      	lsrs	r0, r5, #3
  409278:	f004 0307 	and.w	r3, r4, #7
  40927c:	4605      	mov	r5, r0
  40927e:	4614      	mov	r4, r2
  409280:	3330      	adds	r3, #48	; 0x30
  409282:	ea54 0205 	orrs.w	r2, r4, r5
  409286:	f801 3c01 	strb.w	r3, [r1, #-1]
  40928a:	f101 36ff 	add.w	r6, r1, #4294967295
  40928e:	d1ee      	bne.n	40926e <_svfprintf_r+0xae6>
  409290:	9a07      	ldr	r2, [sp, #28]
  409292:	07d2      	lsls	r2, r2, #31
  409294:	f57f adf3 	bpl.w	408e7e <_svfprintf_r+0x6f6>
  409298:	2b30      	cmp	r3, #48	; 0x30
  40929a:	f43f adf0 	beq.w	408e7e <_svfprintf_r+0x6f6>
  40929e:	3902      	subs	r1, #2
  4092a0:	2330      	movs	r3, #48	; 0x30
  4092a2:	f806 3c01 	strb.w	r3, [r6, #-1]
  4092a6:	eba9 0301 	sub.w	r3, r9, r1
  4092aa:	930e      	str	r3, [sp, #56]	; 0x38
  4092ac:	460e      	mov	r6, r1
  4092ae:	f7ff bb7b 	b.w	4089a8 <_svfprintf_r+0x220>
  4092b2:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4092b4:	2900      	cmp	r1, #0
  4092b6:	f340 822e 	ble.w	409716 <_svfprintf_r+0xf8e>
  4092ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4092bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4092be:	4293      	cmp	r3, r2
  4092c0:	bfa8      	it	ge
  4092c2:	4613      	movge	r3, r2
  4092c4:	2b00      	cmp	r3, #0
  4092c6:	461f      	mov	r7, r3
  4092c8:	dd0d      	ble.n	4092e6 <_svfprintf_r+0xb5e>
  4092ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4092cc:	f8c8 6000 	str.w	r6, [r8]
  4092d0:	3301      	adds	r3, #1
  4092d2:	443c      	add	r4, r7
  4092d4:	2b07      	cmp	r3, #7
  4092d6:	9427      	str	r4, [sp, #156]	; 0x9c
  4092d8:	f8c8 7004 	str.w	r7, [r8, #4]
  4092dc:	9326      	str	r3, [sp, #152]	; 0x98
  4092de:	f300 831f 	bgt.w	409920 <_svfprintf_r+0x1198>
  4092e2:	f108 0808 	add.w	r8, r8, #8
  4092e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4092e8:	2f00      	cmp	r7, #0
  4092ea:	bfa8      	it	ge
  4092ec:	1bdb      	subge	r3, r3, r7
  4092ee:	2b00      	cmp	r3, #0
  4092f0:	461f      	mov	r7, r3
  4092f2:	f340 80d6 	ble.w	4094a2 <_svfprintf_r+0xd1a>
  4092f6:	2f10      	cmp	r7, #16
  4092f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4092fa:	4d31      	ldr	r5, [pc, #196]	; (4093c0 <_svfprintf_r+0xc38>)
  4092fc:	f340 81ed 	ble.w	4096da <_svfprintf_r+0xf52>
  409300:	4642      	mov	r2, r8
  409302:	4621      	mov	r1, r4
  409304:	46b0      	mov	r8, r6
  409306:	f04f 0b10 	mov.w	fp, #16
  40930a:	462e      	mov	r6, r5
  40930c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40930e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  409310:	e004      	b.n	40931c <_svfprintf_r+0xb94>
  409312:	3208      	adds	r2, #8
  409314:	3f10      	subs	r7, #16
  409316:	2f10      	cmp	r7, #16
  409318:	f340 81db 	ble.w	4096d2 <_svfprintf_r+0xf4a>
  40931c:	3301      	adds	r3, #1
  40931e:	3110      	adds	r1, #16
  409320:	2b07      	cmp	r3, #7
  409322:	9127      	str	r1, [sp, #156]	; 0x9c
  409324:	9326      	str	r3, [sp, #152]	; 0x98
  409326:	e882 0840 	stmia.w	r2, {r6, fp}
  40932a:	ddf2      	ble.n	409312 <_svfprintf_r+0xb8a>
  40932c:	aa25      	add	r2, sp, #148	; 0x94
  40932e:	4629      	mov	r1, r5
  409330:	4620      	mov	r0, r4
  409332:	f004 fd0f 	bl	40dd54 <__ssprint_r>
  409336:	2800      	cmp	r0, #0
  409338:	f47f aaf8 	bne.w	40892c <_svfprintf_r+0x1a4>
  40933c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40933e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  409340:	464a      	mov	r2, r9
  409342:	e7e7      	b.n	409314 <_svfprintf_r+0xb8c>
  409344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409346:	930e      	str	r3, [sp, #56]	; 0x38
  409348:	464e      	mov	r6, r9
  40934a:	f7ff bb2d 	b.w	4089a8 <_svfprintf_r+0x220>
  40934e:	2d00      	cmp	r5, #0
  409350:	bf08      	it	eq
  409352:	2c0a      	cmpeq	r4, #10
  409354:	f0c0 808f 	bcc.w	409476 <_svfprintf_r+0xcee>
  409358:	464e      	mov	r6, r9
  40935a:	4620      	mov	r0, r4
  40935c:	4629      	mov	r1, r5
  40935e:	220a      	movs	r2, #10
  409360:	2300      	movs	r3, #0
  409362:	f005 f92b 	bl	40e5bc <__aeabi_uldivmod>
  409366:	3230      	adds	r2, #48	; 0x30
  409368:	f806 2d01 	strb.w	r2, [r6, #-1]!
  40936c:	4620      	mov	r0, r4
  40936e:	4629      	mov	r1, r5
  409370:	2300      	movs	r3, #0
  409372:	220a      	movs	r2, #10
  409374:	f005 f922 	bl	40e5bc <__aeabi_uldivmod>
  409378:	4604      	mov	r4, r0
  40937a:	460d      	mov	r5, r1
  40937c:	ea54 0305 	orrs.w	r3, r4, r5
  409380:	d1eb      	bne.n	40935a <_svfprintf_r+0xbd2>
  409382:	eba9 0306 	sub.w	r3, r9, r6
  409386:	930e      	str	r3, [sp, #56]	; 0x38
  409388:	f7ff bb0e 	b.w	4089a8 <_svfprintf_r+0x220>
  40938c:	aa25      	add	r2, sp, #148	; 0x94
  40938e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  409390:	980c      	ldr	r0, [sp, #48]	; 0x30
  409392:	f004 fcdf 	bl	40dd54 <__ssprint_r>
  409396:	2800      	cmp	r0, #0
  409398:	f47f aac8 	bne.w	40892c <_svfprintf_r+0x1a4>
  40939c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4093a0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4093a2:	46c8      	mov	r8, r9
  4093a4:	f7ff bb5e 	b.w	408a64 <_svfprintf_r+0x2dc>
  4093a8:	1e5e      	subs	r6, r3, #1
  4093aa:	2e00      	cmp	r6, #0
  4093ac:	f77f af0a 	ble.w	4091c4 <_svfprintf_r+0xa3c>
  4093b0:	2e10      	cmp	r6, #16
  4093b2:	4d03      	ldr	r5, [pc, #12]	; (4093c0 <_svfprintf_r+0xc38>)
  4093b4:	dd22      	ble.n	4093fc <_svfprintf_r+0xc74>
  4093b6:	4622      	mov	r2, r4
  4093b8:	f04f 0b10 	mov.w	fp, #16
  4093bc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4093be:	e006      	b.n	4093ce <_svfprintf_r+0xc46>
  4093c0:	0040ed30 	.word	0x0040ed30
  4093c4:	3e10      	subs	r6, #16
  4093c6:	2e10      	cmp	r6, #16
  4093c8:	f108 0808 	add.w	r8, r8, #8
  4093cc:	dd15      	ble.n	4093fa <_svfprintf_r+0xc72>
  4093ce:	3701      	adds	r7, #1
  4093d0:	3210      	adds	r2, #16
  4093d2:	2f07      	cmp	r7, #7
  4093d4:	9227      	str	r2, [sp, #156]	; 0x9c
  4093d6:	9726      	str	r7, [sp, #152]	; 0x98
  4093d8:	e888 0820 	stmia.w	r8, {r5, fp}
  4093dc:	ddf2      	ble.n	4093c4 <_svfprintf_r+0xc3c>
  4093de:	aa25      	add	r2, sp, #148	; 0x94
  4093e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4093e2:	4620      	mov	r0, r4
  4093e4:	f004 fcb6 	bl	40dd54 <__ssprint_r>
  4093e8:	2800      	cmp	r0, #0
  4093ea:	f47f aa9f 	bne.w	40892c <_svfprintf_r+0x1a4>
  4093ee:	3e10      	subs	r6, #16
  4093f0:	2e10      	cmp	r6, #16
  4093f2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4093f4:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4093f6:	46c8      	mov	r8, r9
  4093f8:	dce9      	bgt.n	4093ce <_svfprintf_r+0xc46>
  4093fa:	4614      	mov	r4, r2
  4093fc:	3701      	adds	r7, #1
  4093fe:	4434      	add	r4, r6
  409400:	2f07      	cmp	r7, #7
  409402:	9427      	str	r4, [sp, #156]	; 0x9c
  409404:	9726      	str	r7, [sp, #152]	; 0x98
  409406:	e888 0060 	stmia.w	r8, {r5, r6}
  40940a:	f77f aed9 	ble.w	4091c0 <_svfprintf_r+0xa38>
  40940e:	aa25      	add	r2, sp, #148	; 0x94
  409410:	990b      	ldr	r1, [sp, #44]	; 0x2c
  409412:	980c      	ldr	r0, [sp, #48]	; 0x30
  409414:	f004 fc9e 	bl	40dd54 <__ssprint_r>
  409418:	2800      	cmp	r0, #0
  40941a:	f47f aa87 	bne.w	40892c <_svfprintf_r+0x1a4>
  40941e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  409420:	9f26      	ldr	r7, [sp, #152]	; 0x98
  409422:	46c8      	mov	r8, r9
  409424:	e6ce      	b.n	4091c4 <_svfprintf_r+0xa3c>
  409426:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409428:	6814      	ldr	r4, [r2, #0]
  40942a:	4613      	mov	r3, r2
  40942c:	3304      	adds	r3, #4
  40942e:	17e5      	asrs	r5, r4, #31
  409430:	930f      	str	r3, [sp, #60]	; 0x3c
  409432:	4622      	mov	r2, r4
  409434:	462b      	mov	r3, r5
  409436:	e4fa      	b.n	408e2e <_svfprintf_r+0x6a6>
  409438:	3204      	adds	r2, #4
  40943a:	681c      	ldr	r4, [r3, #0]
  40943c:	920f      	str	r2, [sp, #60]	; 0x3c
  40943e:	2301      	movs	r3, #1
  409440:	2500      	movs	r5, #0
  409442:	f7ff ba94 	b.w	40896e <_svfprintf_r+0x1e6>
  409446:	681c      	ldr	r4, [r3, #0]
  409448:	3304      	adds	r3, #4
  40944a:	930f      	str	r3, [sp, #60]	; 0x3c
  40944c:	2500      	movs	r5, #0
  40944e:	e421      	b.n	408c94 <_svfprintf_r+0x50c>
  409450:	990f      	ldr	r1, [sp, #60]	; 0x3c
  409452:	460a      	mov	r2, r1
  409454:	3204      	adds	r2, #4
  409456:	680c      	ldr	r4, [r1, #0]
  409458:	920f      	str	r2, [sp, #60]	; 0x3c
  40945a:	2500      	movs	r5, #0
  40945c:	f7ff ba87 	b.w	40896e <_svfprintf_r+0x1e6>
  409460:	4614      	mov	r4, r2
  409462:	3301      	adds	r3, #1
  409464:	4434      	add	r4, r6
  409466:	2b07      	cmp	r3, #7
  409468:	9427      	str	r4, [sp, #156]	; 0x9c
  40946a:	9326      	str	r3, [sp, #152]	; 0x98
  40946c:	e888 0060 	stmia.w	r8, {r5, r6}
  409470:	f77f ab68 	ble.w	408b44 <_svfprintf_r+0x3bc>
  409474:	e6b3      	b.n	4091de <_svfprintf_r+0xa56>
  409476:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40947a:	f8cd b01c 	str.w	fp, [sp, #28]
  40947e:	ae42      	add	r6, sp, #264	; 0x108
  409480:	3430      	adds	r4, #48	; 0x30
  409482:	2301      	movs	r3, #1
  409484:	f806 4d41 	strb.w	r4, [r6, #-65]!
  409488:	930e      	str	r3, [sp, #56]	; 0x38
  40948a:	f7ff ba8d 	b.w	4089a8 <_svfprintf_r+0x220>
  40948e:	aa25      	add	r2, sp, #148	; 0x94
  409490:	990b      	ldr	r1, [sp, #44]	; 0x2c
  409492:	980c      	ldr	r0, [sp, #48]	; 0x30
  409494:	f004 fc5e 	bl	40dd54 <__ssprint_r>
  409498:	2800      	cmp	r0, #0
  40949a:	f47f aa47 	bne.w	40892c <_svfprintf_r+0x1a4>
  40949e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4094a0:	46c8      	mov	r8, r9
  4094a2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4094a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4094a6:	429a      	cmp	r2, r3
  4094a8:	db44      	blt.n	409534 <_svfprintf_r+0xdac>
  4094aa:	9b07      	ldr	r3, [sp, #28]
  4094ac:	07d9      	lsls	r1, r3, #31
  4094ae:	d441      	bmi.n	409534 <_svfprintf_r+0xdac>
  4094b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4094b2:	9812      	ldr	r0, [sp, #72]	; 0x48
  4094b4:	1a9a      	subs	r2, r3, r2
  4094b6:	1a1d      	subs	r5, r3, r0
  4094b8:	4295      	cmp	r5, r2
  4094ba:	bfa8      	it	ge
  4094bc:	4615      	movge	r5, r2
  4094be:	2d00      	cmp	r5, #0
  4094c0:	dd0e      	ble.n	4094e0 <_svfprintf_r+0xd58>
  4094c2:	9926      	ldr	r1, [sp, #152]	; 0x98
  4094c4:	f8c8 5004 	str.w	r5, [r8, #4]
  4094c8:	3101      	adds	r1, #1
  4094ca:	4406      	add	r6, r0
  4094cc:	442c      	add	r4, r5
  4094ce:	2907      	cmp	r1, #7
  4094d0:	f8c8 6000 	str.w	r6, [r8]
  4094d4:	9427      	str	r4, [sp, #156]	; 0x9c
  4094d6:	9126      	str	r1, [sp, #152]	; 0x98
  4094d8:	f300 823b 	bgt.w	409952 <_svfprintf_r+0x11ca>
  4094dc:	f108 0808 	add.w	r8, r8, #8
  4094e0:	2d00      	cmp	r5, #0
  4094e2:	bfac      	ite	ge
  4094e4:	1b56      	subge	r6, r2, r5
  4094e6:	4616      	movlt	r6, r2
  4094e8:	2e00      	cmp	r6, #0
  4094ea:	f77f ab2d 	ble.w	408b48 <_svfprintf_r+0x3c0>
  4094ee:	2e10      	cmp	r6, #16
  4094f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4094f2:	4db0      	ldr	r5, [pc, #704]	; (4097b4 <_svfprintf_r+0x102c>)
  4094f4:	ddb5      	ble.n	409462 <_svfprintf_r+0xcda>
  4094f6:	4622      	mov	r2, r4
  4094f8:	2710      	movs	r7, #16
  4094fa:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4094fe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  409500:	e004      	b.n	40950c <_svfprintf_r+0xd84>
  409502:	f108 0808 	add.w	r8, r8, #8
  409506:	3e10      	subs	r6, #16
  409508:	2e10      	cmp	r6, #16
  40950a:	dda9      	ble.n	409460 <_svfprintf_r+0xcd8>
  40950c:	3301      	adds	r3, #1
  40950e:	3210      	adds	r2, #16
  409510:	2b07      	cmp	r3, #7
  409512:	9227      	str	r2, [sp, #156]	; 0x9c
  409514:	9326      	str	r3, [sp, #152]	; 0x98
  409516:	e888 00a0 	stmia.w	r8, {r5, r7}
  40951a:	ddf2      	ble.n	409502 <_svfprintf_r+0xd7a>
  40951c:	aa25      	add	r2, sp, #148	; 0x94
  40951e:	4621      	mov	r1, r4
  409520:	4658      	mov	r0, fp
  409522:	f004 fc17 	bl	40dd54 <__ssprint_r>
  409526:	2800      	cmp	r0, #0
  409528:	f47f aa00 	bne.w	40892c <_svfprintf_r+0x1a4>
  40952c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40952e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  409530:	46c8      	mov	r8, r9
  409532:	e7e8      	b.n	409506 <_svfprintf_r+0xd7e>
  409534:	9b26      	ldr	r3, [sp, #152]	; 0x98
  409536:	9819      	ldr	r0, [sp, #100]	; 0x64
  409538:	991a      	ldr	r1, [sp, #104]	; 0x68
  40953a:	f8c8 1000 	str.w	r1, [r8]
  40953e:	3301      	adds	r3, #1
  409540:	4404      	add	r4, r0
  409542:	2b07      	cmp	r3, #7
  409544:	9427      	str	r4, [sp, #156]	; 0x9c
  409546:	f8c8 0004 	str.w	r0, [r8, #4]
  40954a:	9326      	str	r3, [sp, #152]	; 0x98
  40954c:	f300 81f5 	bgt.w	40993a <_svfprintf_r+0x11b2>
  409550:	f108 0808 	add.w	r8, r8, #8
  409554:	e7ac      	b.n	4094b0 <_svfprintf_r+0xd28>
  409556:	9b07      	ldr	r3, [sp, #28]
  409558:	07da      	lsls	r2, r3, #31
  40955a:	f53f adfe 	bmi.w	40915a <_svfprintf_r+0x9d2>
  40955e:	3701      	adds	r7, #1
  409560:	3401      	adds	r4, #1
  409562:	2301      	movs	r3, #1
  409564:	2f07      	cmp	r7, #7
  409566:	9427      	str	r4, [sp, #156]	; 0x9c
  409568:	9726      	str	r7, [sp, #152]	; 0x98
  40956a:	f8c8 6000 	str.w	r6, [r8]
  40956e:	f8c8 3004 	str.w	r3, [r8, #4]
  409572:	f77f ae25 	ble.w	4091c0 <_svfprintf_r+0xa38>
  409576:	e74a      	b.n	40940e <_svfprintf_r+0xc86>
  409578:	aa25      	add	r2, sp, #148	; 0x94
  40957a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40957c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40957e:	f004 fbe9 	bl	40dd54 <__ssprint_r>
  409582:	2800      	cmp	r0, #0
  409584:	f47f a9d2 	bne.w	40892c <_svfprintf_r+0x1a4>
  409588:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40958a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40958c:	46c8      	mov	r8, r9
  40958e:	e5f2      	b.n	409176 <_svfprintf_r+0x9ee>
  409590:	aa25      	add	r2, sp, #148	; 0x94
  409592:	990b      	ldr	r1, [sp, #44]	; 0x2c
  409594:	980c      	ldr	r0, [sp, #48]	; 0x30
  409596:	f004 fbdd 	bl	40dd54 <__ssprint_r>
  40959a:	2800      	cmp	r0, #0
  40959c:	f47f a9c6 	bne.w	40892c <_svfprintf_r+0x1a4>
  4095a0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4095a2:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4095a4:	46c8      	mov	r8, r9
  4095a6:	e5f5      	b.n	409194 <_svfprintf_r+0xa0c>
  4095a8:	464e      	mov	r6, r9
  4095aa:	f7ff b9fd 	b.w	4089a8 <_svfprintf_r+0x220>
  4095ae:	aa25      	add	r2, sp, #148	; 0x94
  4095b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4095b2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4095b4:	f004 fbce 	bl	40dd54 <__ssprint_r>
  4095b8:	2800      	cmp	r0, #0
  4095ba:	f47f a9b7 	bne.w	40892c <_svfprintf_r+0x1a4>
  4095be:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4095c0:	46c8      	mov	r8, r9
  4095c2:	f7ff ba72 	b.w	408aaa <_svfprintf_r+0x322>
  4095c6:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4095c8:	4622      	mov	r2, r4
  4095ca:	4620      	mov	r0, r4
  4095cc:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4095ce:	4623      	mov	r3, r4
  4095d0:	4621      	mov	r1, r4
  4095d2:	f004 ffb5 	bl	40e540 <__aeabi_dcmpun>
  4095d6:	2800      	cmp	r0, #0
  4095d8:	f040 8286 	bne.w	409ae8 <_svfprintf_r+0x1360>
  4095dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4095de:	3301      	adds	r3, #1
  4095e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4095e2:	f023 0320 	bic.w	r3, r3, #32
  4095e6:	930e      	str	r3, [sp, #56]	; 0x38
  4095e8:	f000 81e2 	beq.w	4099b0 <_svfprintf_r+0x1228>
  4095ec:	2b47      	cmp	r3, #71	; 0x47
  4095ee:	f000 811e 	beq.w	40982e <_svfprintf_r+0x10a6>
  4095f2:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  4095f6:	9307      	str	r3, [sp, #28]
  4095f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4095fa:	1e1f      	subs	r7, r3, #0
  4095fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4095fe:	9308      	str	r3, [sp, #32]
  409600:	bfbb      	ittet	lt
  409602:	463b      	movlt	r3, r7
  409604:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  409608:	2300      	movge	r3, #0
  40960a:	232d      	movlt	r3, #45	; 0x2d
  40960c:	9310      	str	r3, [sp, #64]	; 0x40
  40960e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  409610:	2b66      	cmp	r3, #102	; 0x66
  409612:	f000 81bb 	beq.w	40998c <_svfprintf_r+0x1204>
  409616:	2b46      	cmp	r3, #70	; 0x46
  409618:	f000 80df 	beq.w	4097da <_svfprintf_r+0x1052>
  40961c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40961e:	9a08      	ldr	r2, [sp, #32]
  409620:	2b45      	cmp	r3, #69	; 0x45
  409622:	bf0c      	ite	eq
  409624:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  409626:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  409628:	a823      	add	r0, sp, #140	; 0x8c
  40962a:	a920      	add	r1, sp, #128	; 0x80
  40962c:	bf08      	it	eq
  40962e:	1c5d      	addeq	r5, r3, #1
  409630:	9004      	str	r0, [sp, #16]
  409632:	9103      	str	r1, [sp, #12]
  409634:	a81f      	add	r0, sp, #124	; 0x7c
  409636:	2102      	movs	r1, #2
  409638:	463b      	mov	r3, r7
  40963a:	9002      	str	r0, [sp, #8]
  40963c:	9501      	str	r5, [sp, #4]
  40963e:	9100      	str	r1, [sp, #0]
  409640:	980c      	ldr	r0, [sp, #48]	; 0x30
  409642:	f001 fec5 	bl	40b3d0 <_dtoa_r>
  409646:	9b11      	ldr	r3, [sp, #68]	; 0x44
  409648:	2b67      	cmp	r3, #103	; 0x67
  40964a:	4606      	mov	r6, r0
  40964c:	f040 81e0 	bne.w	409a10 <_svfprintf_r+0x1288>
  409650:	f01b 0f01 	tst.w	fp, #1
  409654:	f000 8246 	beq.w	409ae4 <_svfprintf_r+0x135c>
  409658:	1974      	adds	r4, r6, r5
  40965a:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40965c:	9808      	ldr	r0, [sp, #32]
  40965e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  409660:	4639      	mov	r1, r7
  409662:	f004 ff3b 	bl	40e4dc <__aeabi_dcmpeq>
  409666:	2800      	cmp	r0, #0
  409668:	f040 8165 	bne.w	409936 <_svfprintf_r+0x11ae>
  40966c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40966e:	42a3      	cmp	r3, r4
  409670:	d206      	bcs.n	409680 <_svfprintf_r+0xef8>
  409672:	2130      	movs	r1, #48	; 0x30
  409674:	1c5a      	adds	r2, r3, #1
  409676:	9223      	str	r2, [sp, #140]	; 0x8c
  409678:	7019      	strb	r1, [r3, #0]
  40967a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40967c:	429c      	cmp	r4, r3
  40967e:	d8f9      	bhi.n	409674 <_svfprintf_r+0xeec>
  409680:	1b9b      	subs	r3, r3, r6
  409682:	9313      	str	r3, [sp, #76]	; 0x4c
  409684:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409686:	2b47      	cmp	r3, #71	; 0x47
  409688:	f000 80e9 	beq.w	40985e <_svfprintf_r+0x10d6>
  40968c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40968e:	2b65      	cmp	r3, #101	; 0x65
  409690:	f340 81cd 	ble.w	409a2e <_svfprintf_r+0x12a6>
  409694:	9b11      	ldr	r3, [sp, #68]	; 0x44
  409696:	2b66      	cmp	r3, #102	; 0x66
  409698:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40969a:	9312      	str	r3, [sp, #72]	; 0x48
  40969c:	f000 819e 	beq.w	4099dc <_svfprintf_r+0x1254>
  4096a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4096a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4096a4:	4619      	mov	r1, r3
  4096a6:	4291      	cmp	r1, r2
  4096a8:	f300 818a 	bgt.w	4099c0 <_svfprintf_r+0x1238>
  4096ac:	f01b 0f01 	tst.w	fp, #1
  4096b0:	f040 8213 	bne.w	409ada <_svfprintf_r+0x1352>
  4096b4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4096b8:	9308      	str	r3, [sp, #32]
  4096ba:	2367      	movs	r3, #103	; 0x67
  4096bc:	920e      	str	r2, [sp, #56]	; 0x38
  4096be:	9311      	str	r3, [sp, #68]	; 0x44
  4096c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4096c2:	2b00      	cmp	r3, #0
  4096c4:	f040 80c4 	bne.w	409850 <_svfprintf_r+0x10c8>
  4096c8:	930a      	str	r3, [sp, #40]	; 0x28
  4096ca:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4096ce:	f7ff b973 	b.w	4089b8 <_svfprintf_r+0x230>
  4096d2:	4635      	mov	r5, r6
  4096d4:	460c      	mov	r4, r1
  4096d6:	4646      	mov	r6, r8
  4096d8:	4690      	mov	r8, r2
  4096da:	3301      	adds	r3, #1
  4096dc:	443c      	add	r4, r7
  4096de:	2b07      	cmp	r3, #7
  4096e0:	9427      	str	r4, [sp, #156]	; 0x9c
  4096e2:	9326      	str	r3, [sp, #152]	; 0x98
  4096e4:	e888 00a0 	stmia.w	r8, {r5, r7}
  4096e8:	f73f aed1 	bgt.w	40948e <_svfprintf_r+0xd06>
  4096ec:	f108 0808 	add.w	r8, r8, #8
  4096f0:	e6d7      	b.n	4094a2 <_svfprintf_r+0xd1a>
  4096f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4096f4:	6813      	ldr	r3, [r2, #0]
  4096f6:	3204      	adds	r2, #4
  4096f8:	920f      	str	r2, [sp, #60]	; 0x3c
  4096fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4096fc:	601a      	str	r2, [r3, #0]
  4096fe:	f7ff b86a 	b.w	4087d6 <_svfprintf_r+0x4e>
  409702:	aa25      	add	r2, sp, #148	; 0x94
  409704:	990b      	ldr	r1, [sp, #44]	; 0x2c
  409706:	980c      	ldr	r0, [sp, #48]	; 0x30
  409708:	f004 fb24 	bl	40dd54 <__ssprint_r>
  40970c:	2800      	cmp	r0, #0
  40970e:	f47f a90d 	bne.w	40892c <_svfprintf_r+0x1a4>
  409712:	46c8      	mov	r8, r9
  409714:	e48d      	b.n	409032 <_svfprintf_r+0x8aa>
  409716:	9b26      	ldr	r3, [sp, #152]	; 0x98
  409718:	4a27      	ldr	r2, [pc, #156]	; (4097b8 <_svfprintf_r+0x1030>)
  40971a:	f8c8 2000 	str.w	r2, [r8]
  40971e:	3301      	adds	r3, #1
  409720:	3401      	adds	r4, #1
  409722:	2201      	movs	r2, #1
  409724:	2b07      	cmp	r3, #7
  409726:	9427      	str	r4, [sp, #156]	; 0x9c
  409728:	9326      	str	r3, [sp, #152]	; 0x98
  40972a:	f8c8 2004 	str.w	r2, [r8, #4]
  40972e:	dc72      	bgt.n	409816 <_svfprintf_r+0x108e>
  409730:	f108 0808 	add.w	r8, r8, #8
  409734:	b929      	cbnz	r1, 409742 <_svfprintf_r+0xfba>
  409736:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  409738:	b91b      	cbnz	r3, 409742 <_svfprintf_r+0xfba>
  40973a:	9b07      	ldr	r3, [sp, #28]
  40973c:	07d8      	lsls	r0, r3, #31
  40973e:	f57f aa03 	bpl.w	408b48 <_svfprintf_r+0x3c0>
  409742:	9b26      	ldr	r3, [sp, #152]	; 0x98
  409744:	9819      	ldr	r0, [sp, #100]	; 0x64
  409746:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  409748:	f8c8 2000 	str.w	r2, [r8]
  40974c:	3301      	adds	r3, #1
  40974e:	4602      	mov	r2, r0
  409750:	4422      	add	r2, r4
  409752:	2b07      	cmp	r3, #7
  409754:	9227      	str	r2, [sp, #156]	; 0x9c
  409756:	f8c8 0004 	str.w	r0, [r8, #4]
  40975a:	9326      	str	r3, [sp, #152]	; 0x98
  40975c:	f300 818d 	bgt.w	409a7a <_svfprintf_r+0x12f2>
  409760:	f108 0808 	add.w	r8, r8, #8
  409764:	2900      	cmp	r1, #0
  409766:	f2c0 8165 	blt.w	409a34 <_svfprintf_r+0x12ac>
  40976a:	9913      	ldr	r1, [sp, #76]	; 0x4c
  40976c:	f8c8 6000 	str.w	r6, [r8]
  409770:	3301      	adds	r3, #1
  409772:	188c      	adds	r4, r1, r2
  409774:	2b07      	cmp	r3, #7
  409776:	9427      	str	r4, [sp, #156]	; 0x9c
  409778:	9326      	str	r3, [sp, #152]	; 0x98
  40977a:	f8c8 1004 	str.w	r1, [r8, #4]
  40977e:	f77f a9e1 	ble.w	408b44 <_svfprintf_r+0x3bc>
  409782:	e52c      	b.n	4091de <_svfprintf_r+0xa56>
  409784:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409786:	9909      	ldr	r1, [sp, #36]	; 0x24
  409788:	6813      	ldr	r3, [r2, #0]
  40978a:	17cd      	asrs	r5, r1, #31
  40978c:	4608      	mov	r0, r1
  40978e:	3204      	adds	r2, #4
  409790:	4629      	mov	r1, r5
  409792:	920f      	str	r2, [sp, #60]	; 0x3c
  409794:	e9c3 0100 	strd	r0, r1, [r3]
  409798:	f7ff b81d 	b.w	4087d6 <_svfprintf_r+0x4e>
  40979c:	aa25      	add	r2, sp, #148	; 0x94
  40979e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4097a0:	980c      	ldr	r0, [sp, #48]	; 0x30
  4097a2:	f004 fad7 	bl	40dd54 <__ssprint_r>
  4097a6:	2800      	cmp	r0, #0
  4097a8:	f47f a8c0 	bne.w	40892c <_svfprintf_r+0x1a4>
  4097ac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4097ae:	46c8      	mov	r8, r9
  4097b0:	e458      	b.n	409064 <_svfprintf_r+0x8dc>
  4097b2:	bf00      	nop
  4097b4:	0040ed30 	.word	0x0040ed30
  4097b8:	0040ed1c 	.word	0x0040ed1c
  4097bc:	2140      	movs	r1, #64	; 0x40
  4097be:	980c      	ldr	r0, [sp, #48]	; 0x30
  4097c0:	f003 f9e8 	bl	40cb94 <_malloc_r>
  4097c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4097c6:	6010      	str	r0, [r2, #0]
  4097c8:	6110      	str	r0, [r2, #16]
  4097ca:	2800      	cmp	r0, #0
  4097cc:	f000 81f2 	beq.w	409bb4 <_svfprintf_r+0x142c>
  4097d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4097d2:	2340      	movs	r3, #64	; 0x40
  4097d4:	6153      	str	r3, [r2, #20]
  4097d6:	f7fe bfee 	b.w	4087b6 <_svfprintf_r+0x2e>
  4097da:	a823      	add	r0, sp, #140	; 0x8c
  4097dc:	a920      	add	r1, sp, #128	; 0x80
  4097de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4097e0:	9004      	str	r0, [sp, #16]
  4097e2:	9103      	str	r1, [sp, #12]
  4097e4:	a81f      	add	r0, sp, #124	; 0x7c
  4097e6:	2103      	movs	r1, #3
  4097e8:	9002      	str	r0, [sp, #8]
  4097ea:	9a08      	ldr	r2, [sp, #32]
  4097ec:	9401      	str	r4, [sp, #4]
  4097ee:	463b      	mov	r3, r7
  4097f0:	9100      	str	r1, [sp, #0]
  4097f2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4097f4:	f001 fdec 	bl	40b3d0 <_dtoa_r>
  4097f8:	4625      	mov	r5, r4
  4097fa:	4606      	mov	r6, r0
  4097fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4097fe:	2b46      	cmp	r3, #70	; 0x46
  409800:	eb06 0405 	add.w	r4, r6, r5
  409804:	f47f af29 	bne.w	40965a <_svfprintf_r+0xed2>
  409808:	7833      	ldrb	r3, [r6, #0]
  40980a:	2b30      	cmp	r3, #48	; 0x30
  40980c:	f000 8178 	beq.w	409b00 <_svfprintf_r+0x1378>
  409810:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  409812:	442c      	add	r4, r5
  409814:	e721      	b.n	40965a <_svfprintf_r+0xed2>
  409816:	aa25      	add	r2, sp, #148	; 0x94
  409818:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40981a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40981c:	f004 fa9a 	bl	40dd54 <__ssprint_r>
  409820:	2800      	cmp	r0, #0
  409822:	f47f a883 	bne.w	40892c <_svfprintf_r+0x1a4>
  409826:	991f      	ldr	r1, [sp, #124]	; 0x7c
  409828:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40982a:	46c8      	mov	r8, r9
  40982c:	e782      	b.n	409734 <_svfprintf_r+0xfac>
  40982e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409830:	2b00      	cmp	r3, #0
  409832:	bf08      	it	eq
  409834:	2301      	moveq	r3, #1
  409836:	930a      	str	r3, [sp, #40]	; 0x28
  409838:	e6db      	b.n	4095f2 <_svfprintf_r+0xe6a>
  40983a:	4630      	mov	r0, r6
  40983c:	940a      	str	r4, [sp, #40]	; 0x28
  40983e:	f7fe fc9f 	bl	408180 <strlen>
  409842:	950f      	str	r5, [sp, #60]	; 0x3c
  409844:	900e      	str	r0, [sp, #56]	; 0x38
  409846:	f8cd b01c 	str.w	fp, [sp, #28]
  40984a:	4603      	mov	r3, r0
  40984c:	f7ff b9f9 	b.w	408c42 <_svfprintf_r+0x4ba>
  409850:	272d      	movs	r7, #45	; 0x2d
  409852:	2300      	movs	r3, #0
  409854:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  409858:	930a      	str	r3, [sp, #40]	; 0x28
  40985a:	f7ff b8ae 	b.w	4089ba <_svfprintf_r+0x232>
  40985e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  409860:	9312      	str	r3, [sp, #72]	; 0x48
  409862:	461a      	mov	r2, r3
  409864:	3303      	adds	r3, #3
  409866:	db04      	blt.n	409872 <_svfprintf_r+0x10ea>
  409868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40986a:	4619      	mov	r1, r3
  40986c:	4291      	cmp	r1, r2
  40986e:	f6bf af17 	bge.w	4096a0 <_svfprintf_r+0xf18>
  409872:	9b11      	ldr	r3, [sp, #68]	; 0x44
  409874:	3b02      	subs	r3, #2
  409876:	9311      	str	r3, [sp, #68]	; 0x44
  409878:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  40987c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  409880:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409882:	3b01      	subs	r3, #1
  409884:	2b00      	cmp	r3, #0
  409886:	931f      	str	r3, [sp, #124]	; 0x7c
  409888:	bfbd      	ittte	lt
  40988a:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  40988c:	f1c3 0301 	rsblt	r3, r3, #1
  409890:	222d      	movlt	r2, #45	; 0x2d
  409892:	222b      	movge	r2, #43	; 0x2b
  409894:	2b09      	cmp	r3, #9
  409896:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  40989a:	f340 8116 	ble.w	409aca <_svfprintf_r+0x1342>
  40989e:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  4098a2:	4620      	mov	r0, r4
  4098a4:	4dab      	ldr	r5, [pc, #684]	; (409b54 <_svfprintf_r+0x13cc>)
  4098a6:	e000      	b.n	4098aa <_svfprintf_r+0x1122>
  4098a8:	4610      	mov	r0, r2
  4098aa:	fb85 1203 	smull	r1, r2, r5, r3
  4098ae:	17d9      	asrs	r1, r3, #31
  4098b0:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  4098b4:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4098b8:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  4098bc:	3230      	adds	r2, #48	; 0x30
  4098be:	2909      	cmp	r1, #9
  4098c0:	f800 2c01 	strb.w	r2, [r0, #-1]
  4098c4:	460b      	mov	r3, r1
  4098c6:	f100 32ff 	add.w	r2, r0, #4294967295
  4098ca:	dced      	bgt.n	4098a8 <_svfprintf_r+0x1120>
  4098cc:	3330      	adds	r3, #48	; 0x30
  4098ce:	3802      	subs	r0, #2
  4098d0:	b2d9      	uxtb	r1, r3
  4098d2:	4284      	cmp	r4, r0
  4098d4:	f802 1c01 	strb.w	r1, [r2, #-1]
  4098d8:	f240 8165 	bls.w	409ba6 <_svfprintf_r+0x141e>
  4098dc:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  4098e0:	4613      	mov	r3, r2
  4098e2:	e001      	b.n	4098e8 <_svfprintf_r+0x1160>
  4098e4:	f813 1b01 	ldrb.w	r1, [r3], #1
  4098e8:	f800 1b01 	strb.w	r1, [r0], #1
  4098ec:	42a3      	cmp	r3, r4
  4098ee:	d1f9      	bne.n	4098e4 <_svfprintf_r+0x115c>
  4098f0:	3301      	adds	r3, #1
  4098f2:	1a9b      	subs	r3, r3, r2
  4098f4:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  4098f8:	4413      	add	r3, r2
  4098fa:	aa21      	add	r2, sp, #132	; 0x84
  4098fc:	1a9b      	subs	r3, r3, r2
  4098fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  409900:	931b      	str	r3, [sp, #108]	; 0x6c
  409902:	2a01      	cmp	r2, #1
  409904:	4413      	add	r3, r2
  409906:	930e      	str	r3, [sp, #56]	; 0x38
  409908:	f340 8119 	ble.w	409b3e <_svfprintf_r+0x13b6>
  40990c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40990e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  409910:	4413      	add	r3, r2
  409912:	930e      	str	r3, [sp, #56]	; 0x38
  409914:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  409918:	9308      	str	r3, [sp, #32]
  40991a:	2300      	movs	r3, #0
  40991c:	9312      	str	r3, [sp, #72]	; 0x48
  40991e:	e6cf      	b.n	4096c0 <_svfprintf_r+0xf38>
  409920:	aa25      	add	r2, sp, #148	; 0x94
  409922:	990b      	ldr	r1, [sp, #44]	; 0x2c
  409924:	980c      	ldr	r0, [sp, #48]	; 0x30
  409926:	f004 fa15 	bl	40dd54 <__ssprint_r>
  40992a:	2800      	cmp	r0, #0
  40992c:	f47e affe 	bne.w	40892c <_svfprintf_r+0x1a4>
  409930:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  409932:	46c8      	mov	r8, r9
  409934:	e4d7      	b.n	4092e6 <_svfprintf_r+0xb5e>
  409936:	4623      	mov	r3, r4
  409938:	e6a2      	b.n	409680 <_svfprintf_r+0xef8>
  40993a:	aa25      	add	r2, sp, #148	; 0x94
  40993c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40993e:	980c      	ldr	r0, [sp, #48]	; 0x30
  409940:	f004 fa08 	bl	40dd54 <__ssprint_r>
  409944:	2800      	cmp	r0, #0
  409946:	f47e aff1 	bne.w	40892c <_svfprintf_r+0x1a4>
  40994a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40994c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40994e:	46c8      	mov	r8, r9
  409950:	e5ae      	b.n	4094b0 <_svfprintf_r+0xd28>
  409952:	aa25      	add	r2, sp, #148	; 0x94
  409954:	990b      	ldr	r1, [sp, #44]	; 0x2c
  409956:	980c      	ldr	r0, [sp, #48]	; 0x30
  409958:	f004 f9fc 	bl	40dd54 <__ssprint_r>
  40995c:	2800      	cmp	r0, #0
  40995e:	f47e afe5 	bne.w	40892c <_svfprintf_r+0x1a4>
  409962:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  409964:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  409966:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  409968:	1a9a      	subs	r2, r3, r2
  40996a:	46c8      	mov	r8, r9
  40996c:	e5b8      	b.n	4094e0 <_svfprintf_r+0xd58>
  40996e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409970:	9612      	str	r6, [sp, #72]	; 0x48
  409972:	2b06      	cmp	r3, #6
  409974:	bf28      	it	cs
  409976:	2306      	movcs	r3, #6
  409978:	960a      	str	r6, [sp, #40]	; 0x28
  40997a:	4637      	mov	r7, r6
  40997c:	9308      	str	r3, [sp, #32]
  40997e:	950f      	str	r5, [sp, #60]	; 0x3c
  409980:	f8cd b01c 	str.w	fp, [sp, #28]
  409984:	930e      	str	r3, [sp, #56]	; 0x38
  409986:	4e74      	ldr	r6, [pc, #464]	; (409b58 <_svfprintf_r+0x13d0>)
  409988:	f7ff b816 	b.w	4089b8 <_svfprintf_r+0x230>
  40998c:	a823      	add	r0, sp, #140	; 0x8c
  40998e:	a920      	add	r1, sp, #128	; 0x80
  409990:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  409992:	9004      	str	r0, [sp, #16]
  409994:	9103      	str	r1, [sp, #12]
  409996:	a81f      	add	r0, sp, #124	; 0x7c
  409998:	2103      	movs	r1, #3
  40999a:	9002      	str	r0, [sp, #8]
  40999c:	9a08      	ldr	r2, [sp, #32]
  40999e:	9501      	str	r5, [sp, #4]
  4099a0:	463b      	mov	r3, r7
  4099a2:	9100      	str	r1, [sp, #0]
  4099a4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4099a6:	f001 fd13 	bl	40b3d0 <_dtoa_r>
  4099aa:	4606      	mov	r6, r0
  4099ac:	1944      	adds	r4, r0, r5
  4099ae:	e72b      	b.n	409808 <_svfprintf_r+0x1080>
  4099b0:	2306      	movs	r3, #6
  4099b2:	930a      	str	r3, [sp, #40]	; 0x28
  4099b4:	e61d      	b.n	4095f2 <_svfprintf_r+0xe6a>
  4099b6:	272d      	movs	r7, #45	; 0x2d
  4099b8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4099bc:	f7ff bacd 	b.w	408f5a <_svfprintf_r+0x7d2>
  4099c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4099c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4099c4:	4413      	add	r3, r2
  4099c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4099c8:	930e      	str	r3, [sp, #56]	; 0x38
  4099ca:	2a00      	cmp	r2, #0
  4099cc:	f340 80b0 	ble.w	409b30 <_svfprintf_r+0x13a8>
  4099d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4099d4:	9308      	str	r3, [sp, #32]
  4099d6:	2367      	movs	r3, #103	; 0x67
  4099d8:	9311      	str	r3, [sp, #68]	; 0x44
  4099da:	e671      	b.n	4096c0 <_svfprintf_r+0xf38>
  4099dc:	2b00      	cmp	r3, #0
  4099de:	f340 80c3 	ble.w	409b68 <_svfprintf_r+0x13e0>
  4099e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4099e4:	2a00      	cmp	r2, #0
  4099e6:	f040 8099 	bne.w	409b1c <_svfprintf_r+0x1394>
  4099ea:	f01b 0f01 	tst.w	fp, #1
  4099ee:	f040 8095 	bne.w	409b1c <_svfprintf_r+0x1394>
  4099f2:	9308      	str	r3, [sp, #32]
  4099f4:	930e      	str	r3, [sp, #56]	; 0x38
  4099f6:	e663      	b.n	4096c0 <_svfprintf_r+0xf38>
  4099f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4099fa:	9308      	str	r3, [sp, #32]
  4099fc:	930e      	str	r3, [sp, #56]	; 0x38
  4099fe:	900a      	str	r0, [sp, #40]	; 0x28
  409a00:	950f      	str	r5, [sp, #60]	; 0x3c
  409a02:	f8cd b01c 	str.w	fp, [sp, #28]
  409a06:	9012      	str	r0, [sp, #72]	; 0x48
  409a08:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  409a0c:	f7fe bfd4 	b.w	4089b8 <_svfprintf_r+0x230>
  409a10:	9b11      	ldr	r3, [sp, #68]	; 0x44
  409a12:	2b47      	cmp	r3, #71	; 0x47
  409a14:	f47f ae20 	bne.w	409658 <_svfprintf_r+0xed0>
  409a18:	f01b 0f01 	tst.w	fp, #1
  409a1c:	f47f aeee 	bne.w	4097fc <_svfprintf_r+0x1074>
  409a20:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  409a22:	1b9b      	subs	r3, r3, r6
  409a24:	9313      	str	r3, [sp, #76]	; 0x4c
  409a26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409a28:	2b47      	cmp	r3, #71	; 0x47
  409a2a:	f43f af18 	beq.w	40985e <_svfprintf_r+0x10d6>
  409a2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  409a30:	9312      	str	r3, [sp, #72]	; 0x48
  409a32:	e721      	b.n	409878 <_svfprintf_r+0x10f0>
  409a34:	424f      	negs	r7, r1
  409a36:	3110      	adds	r1, #16
  409a38:	4d48      	ldr	r5, [pc, #288]	; (409b5c <_svfprintf_r+0x13d4>)
  409a3a:	da2f      	bge.n	409a9c <_svfprintf_r+0x1314>
  409a3c:	2410      	movs	r4, #16
  409a3e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  409a42:	e004      	b.n	409a4e <_svfprintf_r+0x12c6>
  409a44:	f108 0808 	add.w	r8, r8, #8
  409a48:	3f10      	subs	r7, #16
  409a4a:	2f10      	cmp	r7, #16
  409a4c:	dd26      	ble.n	409a9c <_svfprintf_r+0x1314>
  409a4e:	3301      	adds	r3, #1
  409a50:	3210      	adds	r2, #16
  409a52:	2b07      	cmp	r3, #7
  409a54:	9227      	str	r2, [sp, #156]	; 0x9c
  409a56:	9326      	str	r3, [sp, #152]	; 0x98
  409a58:	f8c8 5000 	str.w	r5, [r8]
  409a5c:	f8c8 4004 	str.w	r4, [r8, #4]
  409a60:	ddf0      	ble.n	409a44 <_svfprintf_r+0x12bc>
  409a62:	aa25      	add	r2, sp, #148	; 0x94
  409a64:	990b      	ldr	r1, [sp, #44]	; 0x2c
  409a66:	4658      	mov	r0, fp
  409a68:	f004 f974 	bl	40dd54 <__ssprint_r>
  409a6c:	2800      	cmp	r0, #0
  409a6e:	f47e af5d 	bne.w	40892c <_svfprintf_r+0x1a4>
  409a72:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  409a74:	9b26      	ldr	r3, [sp, #152]	; 0x98
  409a76:	46c8      	mov	r8, r9
  409a78:	e7e6      	b.n	409a48 <_svfprintf_r+0x12c0>
  409a7a:	aa25      	add	r2, sp, #148	; 0x94
  409a7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  409a7e:	980c      	ldr	r0, [sp, #48]	; 0x30
  409a80:	f004 f968 	bl	40dd54 <__ssprint_r>
  409a84:	2800      	cmp	r0, #0
  409a86:	f47e af51 	bne.w	40892c <_svfprintf_r+0x1a4>
  409a8a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  409a8c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  409a8e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  409a90:	46c8      	mov	r8, r9
  409a92:	e667      	b.n	409764 <_svfprintf_r+0xfdc>
  409a94:	2000      	movs	r0, #0
  409a96:	900a      	str	r0, [sp, #40]	; 0x28
  409a98:	f7fe bed0 	b.w	40883c <_svfprintf_r+0xb4>
  409a9c:	3301      	adds	r3, #1
  409a9e:	443a      	add	r2, r7
  409aa0:	2b07      	cmp	r3, #7
  409aa2:	e888 00a0 	stmia.w	r8, {r5, r7}
  409aa6:	9227      	str	r2, [sp, #156]	; 0x9c
  409aa8:	9326      	str	r3, [sp, #152]	; 0x98
  409aaa:	f108 0808 	add.w	r8, r8, #8
  409aae:	f77f ae5c 	ble.w	40976a <_svfprintf_r+0xfe2>
  409ab2:	aa25      	add	r2, sp, #148	; 0x94
  409ab4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  409ab6:	980c      	ldr	r0, [sp, #48]	; 0x30
  409ab8:	f004 f94c 	bl	40dd54 <__ssprint_r>
  409abc:	2800      	cmp	r0, #0
  409abe:	f47e af35 	bne.w	40892c <_svfprintf_r+0x1a4>
  409ac2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  409ac4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  409ac6:	46c8      	mov	r8, r9
  409ac8:	e64f      	b.n	40976a <_svfprintf_r+0xfe2>
  409aca:	3330      	adds	r3, #48	; 0x30
  409acc:	2230      	movs	r2, #48	; 0x30
  409ace:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  409ad2:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  409ad6:	ab22      	add	r3, sp, #136	; 0x88
  409ad8:	e70f      	b.n	4098fa <_svfprintf_r+0x1172>
  409ada:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409adc:	9a19      	ldr	r2, [sp, #100]	; 0x64
  409ade:	4413      	add	r3, r2
  409ae0:	930e      	str	r3, [sp, #56]	; 0x38
  409ae2:	e775      	b.n	4099d0 <_svfprintf_r+0x1248>
  409ae4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  409ae6:	e5cb      	b.n	409680 <_svfprintf_r+0xef8>
  409ae8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  409aea:	4e1d      	ldr	r6, [pc, #116]	; (409b60 <_svfprintf_r+0x13d8>)
  409aec:	2b00      	cmp	r3, #0
  409aee:	bfb6      	itet	lt
  409af0:	272d      	movlt	r7, #45	; 0x2d
  409af2:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  409af6:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  409afa:	4b1a      	ldr	r3, [pc, #104]	; (409b64 <_svfprintf_r+0x13dc>)
  409afc:	f7ff ba2f 	b.w	408f5e <_svfprintf_r+0x7d6>
  409b00:	9a16      	ldr	r2, [sp, #88]	; 0x58
  409b02:	9808      	ldr	r0, [sp, #32]
  409b04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  409b06:	4639      	mov	r1, r7
  409b08:	f004 fce8 	bl	40e4dc <__aeabi_dcmpeq>
  409b0c:	2800      	cmp	r0, #0
  409b0e:	f47f ae7f 	bne.w	409810 <_svfprintf_r+0x1088>
  409b12:	f1c5 0501 	rsb	r5, r5, #1
  409b16:	951f      	str	r5, [sp, #124]	; 0x7c
  409b18:	442c      	add	r4, r5
  409b1a:	e59e      	b.n	40965a <_svfprintf_r+0xed2>
  409b1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409b1e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  409b20:	4413      	add	r3, r2
  409b22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  409b24:	441a      	add	r2, r3
  409b26:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  409b2a:	920e      	str	r2, [sp, #56]	; 0x38
  409b2c:	9308      	str	r3, [sp, #32]
  409b2e:	e5c7      	b.n	4096c0 <_svfprintf_r+0xf38>
  409b30:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409b32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  409b34:	f1c3 0301 	rsb	r3, r3, #1
  409b38:	441a      	add	r2, r3
  409b3a:	4613      	mov	r3, r2
  409b3c:	e7d0      	b.n	409ae0 <_svfprintf_r+0x1358>
  409b3e:	f01b 0301 	ands.w	r3, fp, #1
  409b42:	9312      	str	r3, [sp, #72]	; 0x48
  409b44:	f47f aee2 	bne.w	40990c <_svfprintf_r+0x1184>
  409b48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409b4a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  409b4e:	9308      	str	r3, [sp, #32]
  409b50:	e5b6      	b.n	4096c0 <_svfprintf_r+0xf38>
  409b52:	bf00      	nop
  409b54:	66666667 	.word	0x66666667
  409b58:	0040ed14 	.word	0x0040ed14
  409b5c:	0040ed30 	.word	0x0040ed30
  409b60:	0040ece8 	.word	0x0040ece8
  409b64:	0040ece4 	.word	0x0040ece4
  409b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409b6a:	b913      	cbnz	r3, 409b72 <_svfprintf_r+0x13ea>
  409b6c:	f01b 0f01 	tst.w	fp, #1
  409b70:	d002      	beq.n	409b78 <_svfprintf_r+0x13f0>
  409b72:	9b19      	ldr	r3, [sp, #100]	; 0x64
  409b74:	3301      	adds	r3, #1
  409b76:	e7d4      	b.n	409b22 <_svfprintf_r+0x139a>
  409b78:	2301      	movs	r3, #1
  409b7a:	e73a      	b.n	4099f2 <_svfprintf_r+0x126a>
  409b7c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  409b7e:	f89a 3001 	ldrb.w	r3, [sl, #1]
  409b82:	6828      	ldr	r0, [r5, #0]
  409b84:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  409b88:	900a      	str	r0, [sp, #40]	; 0x28
  409b8a:	4628      	mov	r0, r5
  409b8c:	3004      	adds	r0, #4
  409b8e:	46a2      	mov	sl, r4
  409b90:	900f      	str	r0, [sp, #60]	; 0x3c
  409b92:	f7fe be51 	b.w	408838 <_svfprintf_r+0xb0>
  409b96:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  409b9a:	f7ff b867 	b.w	408c6c <_svfprintf_r+0x4e4>
  409b9e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  409ba2:	f7ff ba15 	b.w	408fd0 <_svfprintf_r+0x848>
  409ba6:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  409baa:	e6a6      	b.n	4098fa <_svfprintf_r+0x1172>
  409bac:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  409bb0:	f7ff b8eb 	b.w	408d8a <_svfprintf_r+0x602>
  409bb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  409bb6:	230c      	movs	r3, #12
  409bb8:	6013      	str	r3, [r2, #0]
  409bba:	f04f 33ff 	mov.w	r3, #4294967295
  409bbe:	9309      	str	r3, [sp, #36]	; 0x24
  409bc0:	f7fe bebd 	b.w	40893e <_svfprintf_r+0x1b6>
  409bc4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  409bc8:	f7ff b99a 	b.w	408f00 <_svfprintf_r+0x778>
  409bcc:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  409bd0:	f7ff b976 	b.w	408ec0 <_svfprintf_r+0x738>
  409bd4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  409bd8:	f7ff b959 	b.w	408e8e <_svfprintf_r+0x706>
  409bdc:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  409be0:	f7ff b912 	b.w	408e08 <_svfprintf_r+0x680>

00409be4 <_vfprintf_r>:
  409be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409be8:	b0c1      	sub	sp, #260	; 0x104
  409bea:	461d      	mov	r5, r3
  409bec:	468a      	mov	sl, r1
  409bee:	4691      	mov	r9, r2
  409bf0:	4604      	mov	r4, r0
  409bf2:	9008      	str	r0, [sp, #32]
  409bf4:	f002 ff38 	bl	40ca68 <_localeconv_r>
  409bf8:	6803      	ldr	r3, [r0, #0]
  409bfa:	9315      	str	r3, [sp, #84]	; 0x54
  409bfc:	4618      	mov	r0, r3
  409bfe:	f7fe fabf 	bl	408180 <strlen>
  409c02:	950e      	str	r5, [sp, #56]	; 0x38
  409c04:	9014      	str	r0, [sp, #80]	; 0x50
  409c06:	b11c      	cbz	r4, 409c10 <_vfprintf_r+0x2c>
  409c08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  409c0a:	2b00      	cmp	r3, #0
  409c0c:	f000 825f 	beq.w	40a0ce <_vfprintf_r+0x4ea>
  409c10:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  409c14:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  409c18:	f013 0f01 	tst.w	r3, #1
  409c1c:	b293      	uxth	r3, r2
  409c1e:	d102      	bne.n	409c26 <_vfprintf_r+0x42>
  409c20:	0599      	lsls	r1, r3, #22
  409c22:	f140 8275 	bpl.w	40a110 <_vfprintf_r+0x52c>
  409c26:	049f      	lsls	r7, r3, #18
  409c28:	d40a      	bmi.n	409c40 <_vfprintf_r+0x5c>
  409c2a:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
  409c2e:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
  409c32:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  409c36:	f8aa 300c 	strh.w	r3, [sl, #12]
  409c3a:	f8ca 1064 	str.w	r1, [sl, #100]	; 0x64
  409c3e:	b29b      	uxth	r3, r3
  409c40:	071e      	lsls	r6, r3, #28
  409c42:	f140 8223 	bpl.w	40a08c <_vfprintf_r+0x4a8>
  409c46:	f8da 2010 	ldr.w	r2, [sl, #16]
  409c4a:	2a00      	cmp	r2, #0
  409c4c:	f000 821e 	beq.w	40a08c <_vfprintf_r+0x4a8>
  409c50:	f003 021a 	and.w	r2, r3, #26
  409c54:	2a0a      	cmp	r2, #10
  409c56:	f000 823e 	beq.w	40a0d6 <_vfprintf_r+0x4f2>
  409c5a:	2300      	movs	r3, #0
  409c5c:	4618      	mov	r0, r3
  409c5e:	9311      	str	r3, [sp, #68]	; 0x44
  409c60:	9313      	str	r3, [sp, #76]	; 0x4c
  409c62:	9312      	str	r3, [sp, #72]	; 0x48
  409c64:	9325      	str	r3, [sp, #148]	; 0x94
  409c66:	9324      	str	r3, [sp, #144]	; 0x90
  409c68:	9318      	str	r3, [sp, #96]	; 0x60
  409c6a:	9319      	str	r3, [sp, #100]	; 0x64
  409c6c:	930b      	str	r3, [sp, #44]	; 0x2c
  409c6e:	ab30      	add	r3, sp, #192	; 0xc0
  409c70:	9323      	str	r3, [sp, #140]	; 0x8c
  409c72:	4698      	mov	r8, r3
  409c74:	9016      	str	r0, [sp, #88]	; 0x58
  409c76:	9017      	str	r0, [sp, #92]	; 0x5c
  409c78:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  409c7c:	f899 3000 	ldrb.w	r3, [r9]
  409c80:	464c      	mov	r4, r9
  409c82:	b1eb      	cbz	r3, 409cc0 <_vfprintf_r+0xdc>
  409c84:	2b25      	cmp	r3, #37	; 0x25
  409c86:	d102      	bne.n	409c8e <_vfprintf_r+0xaa>
  409c88:	e01a      	b.n	409cc0 <_vfprintf_r+0xdc>
  409c8a:	2b25      	cmp	r3, #37	; 0x25
  409c8c:	d003      	beq.n	409c96 <_vfprintf_r+0xb2>
  409c8e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  409c92:	2b00      	cmp	r3, #0
  409c94:	d1f9      	bne.n	409c8a <_vfprintf_r+0xa6>
  409c96:	eba4 0509 	sub.w	r5, r4, r9
  409c9a:	b18d      	cbz	r5, 409cc0 <_vfprintf_r+0xdc>
  409c9c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409c9e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  409ca0:	f8c8 9000 	str.w	r9, [r8]
  409ca4:	3301      	adds	r3, #1
  409ca6:	442a      	add	r2, r5
  409ca8:	2b07      	cmp	r3, #7
  409caa:	f8c8 5004 	str.w	r5, [r8, #4]
  409cae:	9225      	str	r2, [sp, #148]	; 0x94
  409cb0:	9324      	str	r3, [sp, #144]	; 0x90
  409cb2:	f300 8201 	bgt.w	40a0b8 <_vfprintf_r+0x4d4>
  409cb6:	f108 0808 	add.w	r8, r8, #8
  409cba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409cbc:	442b      	add	r3, r5
  409cbe:	930b      	str	r3, [sp, #44]	; 0x2c
  409cc0:	7823      	ldrb	r3, [r4, #0]
  409cc2:	2b00      	cmp	r3, #0
  409cc4:	f000 83f0 	beq.w	40a4a8 <_vfprintf_r+0x8c4>
  409cc8:	2300      	movs	r3, #0
  409cca:	461a      	mov	r2, r3
  409ccc:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  409cd0:	4619      	mov	r1, r3
  409cd2:	930c      	str	r3, [sp, #48]	; 0x30
  409cd4:	469b      	mov	fp, r3
  409cd6:	7866      	ldrb	r6, [r4, #1]
  409cd8:	f04f 33ff 	mov.w	r3, #4294967295
  409cdc:	f104 0901 	add.w	r9, r4, #1
  409ce0:	9309      	str	r3, [sp, #36]	; 0x24
  409ce2:	f109 0901 	add.w	r9, r9, #1
  409ce6:	f1a6 0320 	sub.w	r3, r6, #32
  409cea:	2b58      	cmp	r3, #88	; 0x58
  409cec:	f200 83bf 	bhi.w	40a46e <_vfprintf_r+0x88a>
  409cf0:	e8df f013 	tbh	[pc, r3, lsl #1]
  409cf4:	03bd02e0 	.word	0x03bd02e0
  409cf8:	034f03bd 	.word	0x034f03bd
  409cfc:	03bd03bd 	.word	0x03bd03bd
  409d00:	03bd03bd 	.word	0x03bd03bd
  409d04:	03bd03bd 	.word	0x03bd03bd
  409d08:	03080354 	.word	0x03080354
  409d0c:	021a03bd 	.word	0x021a03bd
  409d10:	03bd02e8 	.word	0x03bd02e8
  409d14:	033a0303 	.word	0x033a0303
  409d18:	033a033a 	.word	0x033a033a
  409d1c:	033a033a 	.word	0x033a033a
  409d20:	033a033a 	.word	0x033a033a
  409d24:	033a033a 	.word	0x033a033a
  409d28:	03bd03bd 	.word	0x03bd03bd
  409d2c:	03bd03bd 	.word	0x03bd03bd
  409d30:	03bd03bd 	.word	0x03bd03bd
  409d34:	03bd03bd 	.word	0x03bd03bd
  409d38:	03bd03bd 	.word	0x03bd03bd
  409d3c:	03620349 	.word	0x03620349
  409d40:	036203bd 	.word	0x036203bd
  409d44:	03bd03bd 	.word	0x03bd03bd
  409d48:	03bd03bd 	.word	0x03bd03bd
  409d4c:	03bd03a2 	.word	0x03bd03a2
  409d50:	006f03bd 	.word	0x006f03bd
  409d54:	03bd03bd 	.word	0x03bd03bd
  409d58:	03bd03bd 	.word	0x03bd03bd
  409d5c:	005903bd 	.word	0x005903bd
  409d60:	03bd03bd 	.word	0x03bd03bd
  409d64:	03bd031e 	.word	0x03bd031e
  409d68:	03bd03bd 	.word	0x03bd03bd
  409d6c:	03bd03bd 	.word	0x03bd03bd
  409d70:	03bd03bd 	.word	0x03bd03bd
  409d74:	03bd03bd 	.word	0x03bd03bd
  409d78:	032403bd 	.word	0x032403bd
  409d7c:	03620273 	.word	0x03620273
  409d80:	03620362 	.word	0x03620362
  409d84:	027302b7 	.word	0x027302b7
  409d88:	03bd03bd 	.word	0x03bd03bd
  409d8c:	03bd02bc 	.word	0x03bd02bc
  409d90:	007102c9 	.word	0x007102c9
  409d94:	0247030d 	.word	0x0247030d
  409d98:	025203bd 	.word	0x025203bd
  409d9c:	005b03bd 	.word	0x005b03bd
  409da0:	03bd03bd 	.word	0x03bd03bd
  409da4:	021f      	.short	0x021f
  409da6:	f04b 0b10 	orr.w	fp, fp, #16
  409daa:	f01b 0f20 	tst.w	fp, #32
  409dae:	f040 8353 	bne.w	40a458 <_vfprintf_r+0x874>
  409db2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  409db4:	f01b 0f10 	tst.w	fp, #16
  409db8:	4613      	mov	r3, r2
  409dba:	f040 85b4 	bne.w	40a926 <_vfprintf_r+0xd42>
  409dbe:	f01b 0f40 	tst.w	fp, #64	; 0x40
  409dc2:	f000 85b0 	beq.w	40a926 <_vfprintf_r+0xd42>
  409dc6:	8814      	ldrh	r4, [r2, #0]
  409dc8:	3204      	adds	r2, #4
  409dca:	2500      	movs	r5, #0
  409dcc:	2301      	movs	r3, #1
  409dce:	920e      	str	r2, [sp, #56]	; 0x38
  409dd0:	e014      	b.n	409dfc <_vfprintf_r+0x218>
  409dd2:	f04b 0b10 	orr.w	fp, fp, #16
  409dd6:	f01b 0320 	ands.w	r3, fp, #32
  409dda:	f040 8332 	bne.w	40a442 <_vfprintf_r+0x85e>
  409dde:	f01b 0210 	ands.w	r2, fp, #16
  409de2:	f040 8589 	bne.w	40a8f8 <_vfprintf_r+0xd14>
  409de6:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  409dea:	f000 8585 	beq.w	40a8f8 <_vfprintf_r+0xd14>
  409dee:	990e      	ldr	r1, [sp, #56]	; 0x38
  409df0:	4613      	mov	r3, r2
  409df2:	460a      	mov	r2, r1
  409df4:	3204      	adds	r2, #4
  409df6:	880c      	ldrh	r4, [r1, #0]
  409df8:	920e      	str	r2, [sp, #56]	; 0x38
  409dfa:	2500      	movs	r5, #0
  409dfc:	f04f 0a00 	mov.w	sl, #0
  409e00:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  409e04:	9909      	ldr	r1, [sp, #36]	; 0x24
  409e06:	1c4a      	adds	r2, r1, #1
  409e08:	f000 820b 	beq.w	40a222 <_vfprintf_r+0x63e>
  409e0c:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  409e10:	9206      	str	r2, [sp, #24]
  409e12:	ea54 0205 	orrs.w	r2, r4, r5
  409e16:	f040 820a 	bne.w	40a22e <_vfprintf_r+0x64a>
  409e1a:	2900      	cmp	r1, #0
  409e1c:	f040 846f 	bne.w	40a6fe <_vfprintf_r+0xb1a>
  409e20:	2b00      	cmp	r3, #0
  409e22:	f040 852d 	bne.w	40a880 <_vfprintf_r+0xc9c>
  409e26:	f01b 0301 	ands.w	r3, fp, #1
  409e2a:	930d      	str	r3, [sp, #52]	; 0x34
  409e2c:	f000 8668 	beq.w	40ab00 <_vfprintf_r+0xf1c>
  409e30:	af40      	add	r7, sp, #256	; 0x100
  409e32:	2330      	movs	r3, #48	; 0x30
  409e34:	f807 3d41 	strb.w	r3, [r7, #-65]!
  409e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409e3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  409e3c:	4293      	cmp	r3, r2
  409e3e:	bfb8      	it	lt
  409e40:	4613      	movlt	r3, r2
  409e42:	9307      	str	r3, [sp, #28]
  409e44:	2300      	movs	r3, #0
  409e46:	9310      	str	r3, [sp, #64]	; 0x40
  409e48:	f1ba 0f00 	cmp.w	sl, #0
  409e4c:	d002      	beq.n	409e54 <_vfprintf_r+0x270>
  409e4e:	9b07      	ldr	r3, [sp, #28]
  409e50:	3301      	adds	r3, #1
  409e52:	9307      	str	r3, [sp, #28]
  409e54:	9b06      	ldr	r3, [sp, #24]
  409e56:	f013 0302 	ands.w	r3, r3, #2
  409e5a:	930f      	str	r3, [sp, #60]	; 0x3c
  409e5c:	d002      	beq.n	409e64 <_vfprintf_r+0x280>
  409e5e:	9b07      	ldr	r3, [sp, #28]
  409e60:	3302      	adds	r3, #2
  409e62:	9307      	str	r3, [sp, #28]
  409e64:	9b06      	ldr	r3, [sp, #24]
  409e66:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  409e6a:	f040 831b 	bne.w	40a4a4 <_vfprintf_r+0x8c0>
  409e6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409e70:	9a07      	ldr	r2, [sp, #28]
  409e72:	eba3 0b02 	sub.w	fp, r3, r2
  409e76:	f1bb 0f00 	cmp.w	fp, #0
  409e7a:	f340 8313 	ble.w	40a4a4 <_vfprintf_r+0x8c0>
  409e7e:	f1bb 0f10 	cmp.w	fp, #16
  409e82:	9925      	ldr	r1, [sp, #148]	; 0x94
  409e84:	9a24      	ldr	r2, [sp, #144]	; 0x90
  409e86:	dd28      	ble.n	409eda <_vfprintf_r+0x2f6>
  409e88:	4643      	mov	r3, r8
  409e8a:	2410      	movs	r4, #16
  409e8c:	46a8      	mov	r8, r5
  409e8e:	f8dd a020 	ldr.w	sl, [sp, #32]
  409e92:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  409e94:	e006      	b.n	409ea4 <_vfprintf_r+0x2c0>
  409e96:	f1ab 0b10 	sub.w	fp, fp, #16
  409e9a:	f1bb 0f10 	cmp.w	fp, #16
  409e9e:	f103 0308 	add.w	r3, r3, #8
  409ea2:	dd18      	ble.n	409ed6 <_vfprintf_r+0x2f2>
  409ea4:	3201      	adds	r2, #1
  409ea6:	48b9      	ldr	r0, [pc, #740]	; (40a18c <_vfprintf_r+0x5a8>)
  409ea8:	9224      	str	r2, [sp, #144]	; 0x90
  409eaa:	3110      	adds	r1, #16
  409eac:	2a07      	cmp	r2, #7
  409eae:	9125      	str	r1, [sp, #148]	; 0x94
  409eb0:	e883 0011 	stmia.w	r3, {r0, r4}
  409eb4:	ddef      	ble.n	409e96 <_vfprintf_r+0x2b2>
  409eb6:	aa23      	add	r2, sp, #140	; 0x8c
  409eb8:	4629      	mov	r1, r5
  409eba:	4650      	mov	r0, sl
  409ebc:	f004 f808 	bl	40ded0 <__sprint_r>
  409ec0:	2800      	cmp	r0, #0
  409ec2:	f040 836a 	bne.w	40a59a <_vfprintf_r+0x9b6>
  409ec6:	f1ab 0b10 	sub.w	fp, fp, #16
  409eca:	f1bb 0f10 	cmp.w	fp, #16
  409ece:	9925      	ldr	r1, [sp, #148]	; 0x94
  409ed0:	9a24      	ldr	r2, [sp, #144]	; 0x90
  409ed2:	ab30      	add	r3, sp, #192	; 0xc0
  409ed4:	dce6      	bgt.n	409ea4 <_vfprintf_r+0x2c0>
  409ed6:	4645      	mov	r5, r8
  409ed8:	4698      	mov	r8, r3
  409eda:	3201      	adds	r2, #1
  409edc:	4bab      	ldr	r3, [pc, #684]	; (40a18c <_vfprintf_r+0x5a8>)
  409ede:	9224      	str	r2, [sp, #144]	; 0x90
  409ee0:	eb0b 0401 	add.w	r4, fp, r1
  409ee4:	2a07      	cmp	r2, #7
  409ee6:	9425      	str	r4, [sp, #148]	; 0x94
  409ee8:	e888 0808 	stmia.w	r8, {r3, fp}
  409eec:	f300 84cd 	bgt.w	40a88a <_vfprintf_r+0xca6>
  409ef0:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  409ef4:	f108 0808 	add.w	r8, r8, #8
  409ef8:	f1ba 0f00 	cmp.w	sl, #0
  409efc:	d00e      	beq.n	409f1c <_vfprintf_r+0x338>
  409efe:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409f00:	3301      	adds	r3, #1
  409f02:	3401      	adds	r4, #1
  409f04:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  409f08:	2201      	movs	r2, #1
  409f0a:	2b07      	cmp	r3, #7
  409f0c:	9425      	str	r4, [sp, #148]	; 0x94
  409f0e:	9324      	str	r3, [sp, #144]	; 0x90
  409f10:	e888 0006 	stmia.w	r8, {r1, r2}
  409f14:	f300 840a 	bgt.w	40a72c <_vfprintf_r+0xb48>
  409f18:	f108 0808 	add.w	r8, r8, #8
  409f1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409f1e:	b16b      	cbz	r3, 409f3c <_vfprintf_r+0x358>
  409f20:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409f22:	3301      	adds	r3, #1
  409f24:	3402      	adds	r4, #2
  409f26:	a91c      	add	r1, sp, #112	; 0x70
  409f28:	2202      	movs	r2, #2
  409f2a:	2b07      	cmp	r3, #7
  409f2c:	9425      	str	r4, [sp, #148]	; 0x94
  409f2e:	9324      	str	r3, [sp, #144]	; 0x90
  409f30:	e888 0006 	stmia.w	r8, {r1, r2}
  409f34:	f300 8406 	bgt.w	40a744 <_vfprintf_r+0xb60>
  409f38:	f108 0808 	add.w	r8, r8, #8
  409f3c:	2d80      	cmp	r5, #128	; 0x80
  409f3e:	f000 832e 	beq.w	40a59e <_vfprintf_r+0x9ba>
  409f42:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409f44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  409f46:	eba3 0a02 	sub.w	sl, r3, r2
  409f4a:	f1ba 0f00 	cmp.w	sl, #0
  409f4e:	dd3b      	ble.n	409fc8 <_vfprintf_r+0x3e4>
  409f50:	f1ba 0f10 	cmp.w	sl, #16
  409f54:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409f56:	4d8e      	ldr	r5, [pc, #568]	; (40a190 <_vfprintf_r+0x5ac>)
  409f58:	dd2b      	ble.n	409fb2 <_vfprintf_r+0x3ce>
  409f5a:	4642      	mov	r2, r8
  409f5c:	4621      	mov	r1, r4
  409f5e:	46b0      	mov	r8, r6
  409f60:	f04f 0b10 	mov.w	fp, #16
  409f64:	462e      	mov	r6, r5
  409f66:	9c08      	ldr	r4, [sp, #32]
  409f68:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  409f6a:	e006      	b.n	409f7a <_vfprintf_r+0x396>
  409f6c:	f1aa 0a10 	sub.w	sl, sl, #16
  409f70:	f1ba 0f10 	cmp.w	sl, #16
  409f74:	f102 0208 	add.w	r2, r2, #8
  409f78:	dd17      	ble.n	409faa <_vfprintf_r+0x3c6>
  409f7a:	3301      	adds	r3, #1
  409f7c:	3110      	adds	r1, #16
  409f7e:	2b07      	cmp	r3, #7
  409f80:	9125      	str	r1, [sp, #148]	; 0x94
  409f82:	9324      	str	r3, [sp, #144]	; 0x90
  409f84:	e882 0840 	stmia.w	r2, {r6, fp}
  409f88:	ddf0      	ble.n	409f6c <_vfprintf_r+0x388>
  409f8a:	aa23      	add	r2, sp, #140	; 0x8c
  409f8c:	4629      	mov	r1, r5
  409f8e:	4620      	mov	r0, r4
  409f90:	f003 ff9e 	bl	40ded0 <__sprint_r>
  409f94:	2800      	cmp	r0, #0
  409f96:	f040 8300 	bne.w	40a59a <_vfprintf_r+0x9b6>
  409f9a:	f1aa 0a10 	sub.w	sl, sl, #16
  409f9e:	f1ba 0f10 	cmp.w	sl, #16
  409fa2:	9925      	ldr	r1, [sp, #148]	; 0x94
  409fa4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409fa6:	aa30      	add	r2, sp, #192	; 0xc0
  409fa8:	dce7      	bgt.n	409f7a <_vfprintf_r+0x396>
  409faa:	4635      	mov	r5, r6
  409fac:	460c      	mov	r4, r1
  409fae:	4646      	mov	r6, r8
  409fb0:	4690      	mov	r8, r2
  409fb2:	3301      	adds	r3, #1
  409fb4:	4454      	add	r4, sl
  409fb6:	2b07      	cmp	r3, #7
  409fb8:	9425      	str	r4, [sp, #148]	; 0x94
  409fba:	9324      	str	r3, [sp, #144]	; 0x90
  409fbc:	e888 0420 	stmia.w	r8, {r5, sl}
  409fc0:	f300 83a9 	bgt.w	40a716 <_vfprintf_r+0xb32>
  409fc4:	f108 0808 	add.w	r8, r8, #8
  409fc8:	9b06      	ldr	r3, [sp, #24]
  409fca:	05db      	lsls	r3, r3, #23
  409fcc:	f100 8285 	bmi.w	40a4da <_vfprintf_r+0x8f6>
  409fd0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409fd2:	990d      	ldr	r1, [sp, #52]	; 0x34
  409fd4:	f8c8 7000 	str.w	r7, [r8]
  409fd8:	3301      	adds	r3, #1
  409fda:	440c      	add	r4, r1
  409fdc:	2b07      	cmp	r3, #7
  409fde:	9425      	str	r4, [sp, #148]	; 0x94
  409fe0:	f8c8 1004 	str.w	r1, [r8, #4]
  409fe4:	9324      	str	r3, [sp, #144]	; 0x90
  409fe6:	f300 8375 	bgt.w	40a6d4 <_vfprintf_r+0xaf0>
  409fea:	f108 0808 	add.w	r8, r8, #8
  409fee:	9b06      	ldr	r3, [sp, #24]
  409ff0:	0759      	lsls	r1, r3, #29
  409ff2:	d53b      	bpl.n	40a06c <_vfprintf_r+0x488>
  409ff4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409ff6:	9a07      	ldr	r2, [sp, #28]
  409ff8:	1a9d      	subs	r5, r3, r2
  409ffa:	2d00      	cmp	r5, #0
  409ffc:	dd36      	ble.n	40a06c <_vfprintf_r+0x488>
  409ffe:	2d10      	cmp	r5, #16
  40a000:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a002:	dd21      	ble.n	40a048 <_vfprintf_r+0x464>
  40a004:	2610      	movs	r6, #16
  40a006:	9f08      	ldr	r7, [sp, #32]
  40a008:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  40a00c:	e004      	b.n	40a018 <_vfprintf_r+0x434>
  40a00e:	3d10      	subs	r5, #16
  40a010:	2d10      	cmp	r5, #16
  40a012:	f108 0808 	add.w	r8, r8, #8
  40a016:	dd17      	ble.n	40a048 <_vfprintf_r+0x464>
  40a018:	3301      	adds	r3, #1
  40a01a:	4a5c      	ldr	r2, [pc, #368]	; (40a18c <_vfprintf_r+0x5a8>)
  40a01c:	9324      	str	r3, [sp, #144]	; 0x90
  40a01e:	3410      	adds	r4, #16
  40a020:	2b07      	cmp	r3, #7
  40a022:	9425      	str	r4, [sp, #148]	; 0x94
  40a024:	e888 0044 	stmia.w	r8, {r2, r6}
  40a028:	ddf1      	ble.n	40a00e <_vfprintf_r+0x42a>
  40a02a:	aa23      	add	r2, sp, #140	; 0x8c
  40a02c:	4651      	mov	r1, sl
  40a02e:	4638      	mov	r0, r7
  40a030:	f003 ff4e 	bl	40ded0 <__sprint_r>
  40a034:	2800      	cmp	r0, #0
  40a036:	f040 823f 	bne.w	40a4b8 <_vfprintf_r+0x8d4>
  40a03a:	3d10      	subs	r5, #16
  40a03c:	2d10      	cmp	r5, #16
  40a03e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40a040:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a042:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40a046:	dce7      	bgt.n	40a018 <_vfprintf_r+0x434>
  40a048:	3301      	adds	r3, #1
  40a04a:	4a50      	ldr	r2, [pc, #320]	; (40a18c <_vfprintf_r+0x5a8>)
  40a04c:	9324      	str	r3, [sp, #144]	; 0x90
  40a04e:	442c      	add	r4, r5
  40a050:	2b07      	cmp	r3, #7
  40a052:	9425      	str	r4, [sp, #148]	; 0x94
  40a054:	e888 0024 	stmia.w	r8, {r2, r5}
  40a058:	dd08      	ble.n	40a06c <_vfprintf_r+0x488>
  40a05a:	aa23      	add	r2, sp, #140	; 0x8c
  40a05c:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a05e:	9808      	ldr	r0, [sp, #32]
  40a060:	f003 ff36 	bl	40ded0 <__sprint_r>
  40a064:	2800      	cmp	r0, #0
  40a066:	f040 8347 	bne.w	40a6f8 <_vfprintf_r+0xb14>
  40a06a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40a06c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40a06e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40a070:	9907      	ldr	r1, [sp, #28]
  40a072:	428a      	cmp	r2, r1
  40a074:	bfac      	ite	ge
  40a076:	189b      	addge	r3, r3, r2
  40a078:	185b      	addlt	r3, r3, r1
  40a07a:	930b      	str	r3, [sp, #44]	; 0x2c
  40a07c:	2c00      	cmp	r4, #0
  40a07e:	f040 8333 	bne.w	40a6e8 <_vfprintf_r+0xb04>
  40a082:	2300      	movs	r3, #0
  40a084:	9324      	str	r3, [sp, #144]	; 0x90
  40a086:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40a08a:	e5f7      	b.n	409c7c <_vfprintf_r+0x98>
  40a08c:	4651      	mov	r1, sl
  40a08e:	9808      	ldr	r0, [sp, #32]
  40a090:	f001 f896 	bl	40b1c0 <__swsetup_r>
  40a094:	2800      	cmp	r0, #0
  40a096:	d038      	beq.n	40a10a <_vfprintf_r+0x526>
  40a098:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  40a09c:	07dd      	lsls	r5, r3, #31
  40a09e:	d404      	bmi.n	40a0aa <_vfprintf_r+0x4c6>
  40a0a0:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  40a0a4:	059c      	lsls	r4, r3, #22
  40a0a6:	f140 85ca 	bpl.w	40ac3e <_vfprintf_r+0x105a>
  40a0aa:	f04f 33ff 	mov.w	r3, #4294967295
  40a0ae:	930b      	str	r3, [sp, #44]	; 0x2c
  40a0b0:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40a0b2:	b041      	add	sp, #260	; 0x104
  40a0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a0b8:	aa23      	add	r2, sp, #140	; 0x8c
  40a0ba:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a0bc:	9808      	ldr	r0, [sp, #32]
  40a0be:	f003 ff07 	bl	40ded0 <__sprint_r>
  40a0c2:	2800      	cmp	r0, #0
  40a0c4:	f040 8318 	bne.w	40a6f8 <_vfprintf_r+0xb14>
  40a0c8:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40a0cc:	e5f5      	b.n	409cba <_vfprintf_r+0xd6>
  40a0ce:	9808      	ldr	r0, [sp, #32]
  40a0d0:	f002 f9a0 	bl	40c414 <__sinit>
  40a0d4:	e59c      	b.n	409c10 <_vfprintf_r+0x2c>
  40a0d6:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
  40a0da:	2a00      	cmp	r2, #0
  40a0dc:	f6ff adbd 	blt.w	409c5a <_vfprintf_r+0x76>
  40a0e0:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
  40a0e4:	07d0      	lsls	r0, r2, #31
  40a0e6:	d405      	bmi.n	40a0f4 <_vfprintf_r+0x510>
  40a0e8:	0599      	lsls	r1, r3, #22
  40a0ea:	d403      	bmi.n	40a0f4 <_vfprintf_r+0x510>
  40a0ec:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  40a0f0:	f002 fcce 	bl	40ca90 <__retarget_lock_release_recursive>
  40a0f4:	462b      	mov	r3, r5
  40a0f6:	464a      	mov	r2, r9
  40a0f8:	4651      	mov	r1, sl
  40a0fa:	9808      	ldr	r0, [sp, #32]
  40a0fc:	f001 f81e 	bl	40b13c <__sbprintf>
  40a100:	900b      	str	r0, [sp, #44]	; 0x2c
  40a102:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40a104:	b041      	add	sp, #260	; 0x104
  40a106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a10a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  40a10e:	e59f      	b.n	409c50 <_vfprintf_r+0x6c>
  40a110:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  40a114:	f002 fcba 	bl	40ca8c <__retarget_lock_acquire_recursive>
  40a118:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  40a11c:	b293      	uxth	r3, r2
  40a11e:	e582      	b.n	409c26 <_vfprintf_r+0x42>
  40a120:	980c      	ldr	r0, [sp, #48]	; 0x30
  40a122:	930e      	str	r3, [sp, #56]	; 0x38
  40a124:	4240      	negs	r0, r0
  40a126:	900c      	str	r0, [sp, #48]	; 0x30
  40a128:	f04b 0b04 	orr.w	fp, fp, #4
  40a12c:	f899 6000 	ldrb.w	r6, [r9]
  40a130:	e5d7      	b.n	409ce2 <_vfprintf_r+0xfe>
  40a132:	2a00      	cmp	r2, #0
  40a134:	f040 87df 	bne.w	40b0f6 <_vfprintf_r+0x1512>
  40a138:	4b16      	ldr	r3, [pc, #88]	; (40a194 <_vfprintf_r+0x5b0>)
  40a13a:	9318      	str	r3, [sp, #96]	; 0x60
  40a13c:	f01b 0f20 	tst.w	fp, #32
  40a140:	f040 84b9 	bne.w	40aab6 <_vfprintf_r+0xed2>
  40a144:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40a146:	f01b 0f10 	tst.w	fp, #16
  40a14a:	4613      	mov	r3, r2
  40a14c:	f040 83dc 	bne.w	40a908 <_vfprintf_r+0xd24>
  40a150:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40a154:	f000 83d8 	beq.w	40a908 <_vfprintf_r+0xd24>
  40a158:	3304      	adds	r3, #4
  40a15a:	8814      	ldrh	r4, [r2, #0]
  40a15c:	930e      	str	r3, [sp, #56]	; 0x38
  40a15e:	2500      	movs	r5, #0
  40a160:	f01b 0f01 	tst.w	fp, #1
  40a164:	f000 8322 	beq.w	40a7ac <_vfprintf_r+0xbc8>
  40a168:	ea54 0305 	orrs.w	r3, r4, r5
  40a16c:	f000 831e 	beq.w	40a7ac <_vfprintf_r+0xbc8>
  40a170:	2330      	movs	r3, #48	; 0x30
  40a172:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  40a176:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  40a17a:	f04b 0b02 	orr.w	fp, fp, #2
  40a17e:	2302      	movs	r3, #2
  40a180:	e63c      	b.n	409dfc <_vfprintf_r+0x218>
  40a182:	f04b 0b20 	orr.w	fp, fp, #32
  40a186:	f899 6000 	ldrb.w	r6, [r9]
  40a18a:	e5aa      	b.n	409ce2 <_vfprintf_r+0xfe>
  40a18c:	0040ed40 	.word	0x0040ed40
  40a190:	0040ed50 	.word	0x0040ed50
  40a194:	0040ed00 	.word	0x0040ed00
  40a198:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40a19a:	6817      	ldr	r7, [r2, #0]
  40a19c:	2400      	movs	r4, #0
  40a19e:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  40a1a2:	1d15      	adds	r5, r2, #4
  40a1a4:	2f00      	cmp	r7, #0
  40a1a6:	f000 864e 	beq.w	40ae46 <_vfprintf_r+0x1262>
  40a1aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40a1ac:	1c53      	adds	r3, r2, #1
  40a1ae:	f000 85cc 	beq.w	40ad4a <_vfprintf_r+0x1166>
  40a1b2:	4621      	mov	r1, r4
  40a1b4:	4638      	mov	r0, r7
  40a1b6:	f002 ffa3 	bl	40d100 <memchr>
  40a1ba:	2800      	cmp	r0, #0
  40a1bc:	f000 8697 	beq.w	40aeee <_vfprintf_r+0x130a>
  40a1c0:	1bc3      	subs	r3, r0, r7
  40a1c2:	930d      	str	r3, [sp, #52]	; 0x34
  40a1c4:	9409      	str	r4, [sp, #36]	; 0x24
  40a1c6:	950e      	str	r5, [sp, #56]	; 0x38
  40a1c8:	f8cd b018 	str.w	fp, [sp, #24]
  40a1cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40a1d0:	9307      	str	r3, [sp, #28]
  40a1d2:	9410      	str	r4, [sp, #64]	; 0x40
  40a1d4:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  40a1d8:	e636      	b.n	409e48 <_vfprintf_r+0x264>
  40a1da:	2a00      	cmp	r2, #0
  40a1dc:	f040 8796 	bne.w	40b10c <_vfprintf_r+0x1528>
  40a1e0:	f01b 0f20 	tst.w	fp, #32
  40a1e4:	f040 845a 	bne.w	40aa9c <_vfprintf_r+0xeb8>
  40a1e8:	f01b 0f10 	tst.w	fp, #16
  40a1ec:	f040 83a2 	bne.w	40a934 <_vfprintf_r+0xd50>
  40a1f0:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40a1f4:	f000 839e 	beq.w	40a934 <_vfprintf_r+0xd50>
  40a1f8:	990e      	ldr	r1, [sp, #56]	; 0x38
  40a1fa:	f9b1 4000 	ldrsh.w	r4, [r1]
  40a1fe:	3104      	adds	r1, #4
  40a200:	17e5      	asrs	r5, r4, #31
  40a202:	4622      	mov	r2, r4
  40a204:	462b      	mov	r3, r5
  40a206:	910e      	str	r1, [sp, #56]	; 0x38
  40a208:	2a00      	cmp	r2, #0
  40a20a:	f173 0300 	sbcs.w	r3, r3, #0
  40a20e:	f2c0 8487 	blt.w	40ab20 <_vfprintf_r+0xf3c>
  40a212:	9909      	ldr	r1, [sp, #36]	; 0x24
  40a214:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  40a218:	1c4a      	adds	r2, r1, #1
  40a21a:	f04f 0301 	mov.w	r3, #1
  40a21e:	f47f adf5 	bne.w	409e0c <_vfprintf_r+0x228>
  40a222:	ea54 0205 	orrs.w	r2, r4, r5
  40a226:	f000 826c 	beq.w	40a702 <_vfprintf_r+0xb1e>
  40a22a:	f8cd b018 	str.w	fp, [sp, #24]
  40a22e:	2b01      	cmp	r3, #1
  40a230:	f000 8308 	beq.w	40a844 <_vfprintf_r+0xc60>
  40a234:	2b02      	cmp	r3, #2
  40a236:	f040 8295 	bne.w	40a764 <_vfprintf_r+0xb80>
  40a23a:	9818      	ldr	r0, [sp, #96]	; 0x60
  40a23c:	af30      	add	r7, sp, #192	; 0xc0
  40a23e:	0923      	lsrs	r3, r4, #4
  40a240:	f004 010f 	and.w	r1, r4, #15
  40a244:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  40a248:	092a      	lsrs	r2, r5, #4
  40a24a:	461c      	mov	r4, r3
  40a24c:	4615      	mov	r5, r2
  40a24e:	5c43      	ldrb	r3, [r0, r1]
  40a250:	f807 3d01 	strb.w	r3, [r7, #-1]!
  40a254:	ea54 0305 	orrs.w	r3, r4, r5
  40a258:	d1f1      	bne.n	40a23e <_vfprintf_r+0x65a>
  40a25a:	ab30      	add	r3, sp, #192	; 0xc0
  40a25c:	1bdb      	subs	r3, r3, r7
  40a25e:	930d      	str	r3, [sp, #52]	; 0x34
  40a260:	e5ea      	b.n	409e38 <_vfprintf_r+0x254>
  40a262:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  40a266:	f899 6000 	ldrb.w	r6, [r9]
  40a26a:	e53a      	b.n	409ce2 <_vfprintf_r+0xfe>
  40a26c:	f899 6000 	ldrb.w	r6, [r9]
  40a270:	2e6c      	cmp	r6, #108	; 0x6c
  40a272:	bf03      	ittte	eq
  40a274:	f899 6001 	ldrbeq.w	r6, [r9, #1]
  40a278:	f04b 0b20 	orreq.w	fp, fp, #32
  40a27c:	f109 0901 	addeq.w	r9, r9, #1
  40a280:	f04b 0b10 	orrne.w	fp, fp, #16
  40a284:	e52d      	b.n	409ce2 <_vfprintf_r+0xfe>
  40a286:	2a00      	cmp	r2, #0
  40a288:	f040 874c 	bne.w	40b124 <_vfprintf_r+0x1540>
  40a28c:	f01b 0f20 	tst.w	fp, #32
  40a290:	f040 853f 	bne.w	40ad12 <_vfprintf_r+0x112e>
  40a294:	f01b 0f10 	tst.w	fp, #16
  40a298:	f040 80fc 	bne.w	40a494 <_vfprintf_r+0x8b0>
  40a29c:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40a2a0:	f000 80f8 	beq.w	40a494 <_vfprintf_r+0x8b0>
  40a2a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40a2a6:	6813      	ldr	r3, [r2, #0]
  40a2a8:	3204      	adds	r2, #4
  40a2aa:	920e      	str	r2, [sp, #56]	; 0x38
  40a2ac:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  40a2b0:	801a      	strh	r2, [r3, #0]
  40a2b2:	e4e3      	b.n	409c7c <_vfprintf_r+0x98>
  40a2b4:	f899 6000 	ldrb.w	r6, [r9]
  40a2b8:	2900      	cmp	r1, #0
  40a2ba:	f47f ad12 	bne.w	409ce2 <_vfprintf_r+0xfe>
  40a2be:	2201      	movs	r2, #1
  40a2c0:	2120      	movs	r1, #32
  40a2c2:	e50e      	b.n	409ce2 <_vfprintf_r+0xfe>
  40a2c4:	f899 6000 	ldrb.w	r6, [r9]
  40a2c8:	2e2a      	cmp	r6, #42	; 0x2a
  40a2ca:	f109 0001 	add.w	r0, r9, #1
  40a2ce:	f000 86f1 	beq.w	40b0b4 <_vfprintf_r+0x14d0>
  40a2d2:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  40a2d6:	2b09      	cmp	r3, #9
  40a2d8:	4681      	mov	r9, r0
  40a2da:	bf98      	it	ls
  40a2dc:	2000      	movls	r0, #0
  40a2de:	f200 863d 	bhi.w	40af5c <_vfprintf_r+0x1378>
  40a2e2:	f819 6b01 	ldrb.w	r6, [r9], #1
  40a2e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40a2ea:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  40a2ee:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  40a2f2:	2b09      	cmp	r3, #9
  40a2f4:	d9f5      	bls.n	40a2e2 <_vfprintf_r+0x6fe>
  40a2f6:	9009      	str	r0, [sp, #36]	; 0x24
  40a2f8:	e4f5      	b.n	409ce6 <_vfprintf_r+0x102>
  40a2fa:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  40a2fe:	f899 6000 	ldrb.w	r6, [r9]
  40a302:	e4ee      	b.n	409ce2 <_vfprintf_r+0xfe>
  40a304:	f899 6000 	ldrb.w	r6, [r9]
  40a308:	2201      	movs	r2, #1
  40a30a:	212b      	movs	r1, #43	; 0x2b
  40a30c:	e4e9      	b.n	409ce2 <_vfprintf_r+0xfe>
  40a30e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40a310:	4bae      	ldr	r3, [pc, #696]	; (40a5cc <_vfprintf_r+0x9e8>)
  40a312:	6814      	ldr	r4, [r2, #0]
  40a314:	9318      	str	r3, [sp, #96]	; 0x60
  40a316:	2678      	movs	r6, #120	; 0x78
  40a318:	2330      	movs	r3, #48	; 0x30
  40a31a:	3204      	adds	r2, #4
  40a31c:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  40a320:	f04b 0b02 	orr.w	fp, fp, #2
  40a324:	920e      	str	r2, [sp, #56]	; 0x38
  40a326:	2500      	movs	r5, #0
  40a328:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  40a32c:	2302      	movs	r3, #2
  40a32e:	e565      	b.n	409dfc <_vfprintf_r+0x218>
  40a330:	2a00      	cmp	r2, #0
  40a332:	f040 86e4 	bne.w	40b0fe <_vfprintf_r+0x151a>
  40a336:	4ba6      	ldr	r3, [pc, #664]	; (40a5d0 <_vfprintf_r+0x9ec>)
  40a338:	9318      	str	r3, [sp, #96]	; 0x60
  40a33a:	e6ff      	b.n	40a13c <_vfprintf_r+0x558>
  40a33c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40a33e:	f8cd b018 	str.w	fp, [sp, #24]
  40a342:	680a      	ldr	r2, [r1, #0]
  40a344:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  40a348:	2300      	movs	r3, #0
  40a34a:	460a      	mov	r2, r1
  40a34c:	469a      	mov	sl, r3
  40a34e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40a352:	3204      	adds	r2, #4
  40a354:	2301      	movs	r3, #1
  40a356:	9307      	str	r3, [sp, #28]
  40a358:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  40a35c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  40a360:	920e      	str	r2, [sp, #56]	; 0x38
  40a362:	930d      	str	r3, [sp, #52]	; 0x34
  40a364:	af26      	add	r7, sp, #152	; 0x98
  40a366:	e575      	b.n	409e54 <_vfprintf_r+0x270>
  40a368:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  40a36c:	2000      	movs	r0, #0
  40a36e:	f819 6b01 	ldrb.w	r6, [r9], #1
  40a372:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40a376:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  40a37a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  40a37e:	2b09      	cmp	r3, #9
  40a380:	d9f5      	bls.n	40a36e <_vfprintf_r+0x78a>
  40a382:	900c      	str	r0, [sp, #48]	; 0x30
  40a384:	e4af      	b.n	409ce6 <_vfprintf_r+0x102>
  40a386:	2a00      	cmp	r2, #0
  40a388:	f040 86c8 	bne.w	40b11c <_vfprintf_r+0x1538>
  40a38c:	f04b 0b10 	orr.w	fp, fp, #16
  40a390:	e726      	b.n	40a1e0 <_vfprintf_r+0x5fc>
  40a392:	f04b 0b01 	orr.w	fp, fp, #1
  40a396:	f899 6000 	ldrb.w	r6, [r9]
  40a39a:	e4a2      	b.n	409ce2 <_vfprintf_r+0xfe>
  40a39c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40a39e:	6823      	ldr	r3, [r4, #0]
  40a3a0:	930c      	str	r3, [sp, #48]	; 0x30
  40a3a2:	4618      	mov	r0, r3
  40a3a4:	2800      	cmp	r0, #0
  40a3a6:	4623      	mov	r3, r4
  40a3a8:	f103 0304 	add.w	r3, r3, #4
  40a3ac:	f6ff aeb8 	blt.w	40a120 <_vfprintf_r+0x53c>
  40a3b0:	930e      	str	r3, [sp, #56]	; 0x38
  40a3b2:	f899 6000 	ldrb.w	r6, [r9]
  40a3b6:	e494      	b.n	409ce2 <_vfprintf_r+0xfe>
  40a3b8:	2a00      	cmp	r2, #0
  40a3ba:	f040 86b7 	bne.w	40b12c <_vfprintf_r+0x1548>
  40a3be:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40a3c0:	3507      	adds	r5, #7
  40a3c2:	f025 0307 	bic.w	r3, r5, #7
  40a3c6:	f103 0208 	add.w	r2, r3, #8
  40a3ca:	920e      	str	r2, [sp, #56]	; 0x38
  40a3cc:	681a      	ldr	r2, [r3, #0]
  40a3ce:	9213      	str	r2, [sp, #76]	; 0x4c
  40a3d0:	685b      	ldr	r3, [r3, #4]
  40a3d2:	9312      	str	r3, [sp, #72]	; 0x48
  40a3d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40a3d6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  40a3d8:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  40a3dc:	4628      	mov	r0, r5
  40a3de:	4621      	mov	r1, r4
  40a3e0:	f04f 32ff 	mov.w	r2, #4294967295
  40a3e4:	4b7b      	ldr	r3, [pc, #492]	; (40a5d4 <_vfprintf_r+0x9f0>)
  40a3e6:	f004 f8ab 	bl	40e540 <__aeabi_dcmpun>
  40a3ea:	2800      	cmp	r0, #0
  40a3ec:	f040 83a2 	bne.w	40ab34 <_vfprintf_r+0xf50>
  40a3f0:	4628      	mov	r0, r5
  40a3f2:	4621      	mov	r1, r4
  40a3f4:	f04f 32ff 	mov.w	r2, #4294967295
  40a3f8:	4b76      	ldr	r3, [pc, #472]	; (40a5d4 <_vfprintf_r+0x9f0>)
  40a3fa:	f004 f883 	bl	40e504 <__aeabi_dcmple>
  40a3fe:	2800      	cmp	r0, #0
  40a400:	f040 8398 	bne.w	40ab34 <_vfprintf_r+0xf50>
  40a404:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40a406:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40a408:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40a40a:	9912      	ldr	r1, [sp, #72]	; 0x48
  40a40c:	f004 f870 	bl	40e4f0 <__aeabi_dcmplt>
  40a410:	2800      	cmp	r0, #0
  40a412:	f040 8435 	bne.w	40ac80 <_vfprintf_r+0x109c>
  40a416:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  40a41a:	4f6f      	ldr	r7, [pc, #444]	; (40a5d8 <_vfprintf_r+0x9f4>)
  40a41c:	4b6f      	ldr	r3, [pc, #444]	; (40a5dc <_vfprintf_r+0x9f8>)
  40a41e:	2203      	movs	r2, #3
  40a420:	2100      	movs	r1, #0
  40a422:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  40a426:	9207      	str	r2, [sp, #28]
  40a428:	9109      	str	r1, [sp, #36]	; 0x24
  40a42a:	9006      	str	r0, [sp, #24]
  40a42c:	2e47      	cmp	r6, #71	; 0x47
  40a42e:	bfd8      	it	le
  40a430:	461f      	movle	r7, r3
  40a432:	920d      	str	r2, [sp, #52]	; 0x34
  40a434:	9110      	str	r1, [sp, #64]	; 0x40
  40a436:	e507      	b.n	409e48 <_vfprintf_r+0x264>
  40a438:	f04b 0b08 	orr.w	fp, fp, #8
  40a43c:	f899 6000 	ldrb.w	r6, [r9]
  40a440:	e44f      	b.n	409ce2 <_vfprintf_r+0xfe>
  40a442:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40a444:	3507      	adds	r5, #7
  40a446:	f025 0307 	bic.w	r3, r5, #7
  40a44a:	f103 0208 	add.w	r2, r3, #8
  40a44e:	e9d3 4500 	ldrd	r4, r5, [r3]
  40a452:	920e      	str	r2, [sp, #56]	; 0x38
  40a454:	2300      	movs	r3, #0
  40a456:	e4d1      	b.n	409dfc <_vfprintf_r+0x218>
  40a458:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40a45a:	3507      	adds	r5, #7
  40a45c:	f025 0307 	bic.w	r3, r5, #7
  40a460:	f103 0208 	add.w	r2, r3, #8
  40a464:	e9d3 4500 	ldrd	r4, r5, [r3]
  40a468:	920e      	str	r2, [sp, #56]	; 0x38
  40a46a:	2301      	movs	r3, #1
  40a46c:	e4c6      	b.n	409dfc <_vfprintf_r+0x218>
  40a46e:	2a00      	cmp	r2, #0
  40a470:	f040 8650 	bne.w	40b114 <_vfprintf_r+0x1530>
  40a474:	b1c6      	cbz	r6, 40a4a8 <_vfprintf_r+0x8c4>
  40a476:	2300      	movs	r3, #0
  40a478:	2201      	movs	r2, #1
  40a47a:	469a      	mov	sl, r3
  40a47c:	9207      	str	r2, [sp, #28]
  40a47e:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  40a482:	f8cd b018 	str.w	fp, [sp, #24]
  40a486:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40a48a:	9309      	str	r3, [sp, #36]	; 0x24
  40a48c:	9310      	str	r3, [sp, #64]	; 0x40
  40a48e:	920d      	str	r2, [sp, #52]	; 0x34
  40a490:	af26      	add	r7, sp, #152	; 0x98
  40a492:	e4df      	b.n	409e54 <_vfprintf_r+0x270>
  40a494:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40a496:	6813      	ldr	r3, [r2, #0]
  40a498:	3204      	adds	r2, #4
  40a49a:	920e      	str	r2, [sp, #56]	; 0x38
  40a49c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40a49e:	601a      	str	r2, [r3, #0]
  40a4a0:	f7ff bbec 	b.w	409c7c <_vfprintf_r+0x98>
  40a4a4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40a4a6:	e527      	b.n	409ef8 <_vfprintf_r+0x314>
  40a4a8:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40a4aa:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  40a4ae:	2b00      	cmp	r3, #0
  40a4b0:	f040 8594 	bne.w	40afdc <_vfprintf_r+0x13f8>
  40a4b4:	2300      	movs	r3, #0
  40a4b6:	9324      	str	r3, [sp, #144]	; 0x90
  40a4b8:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  40a4bc:	f013 0f01 	tst.w	r3, #1
  40a4c0:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  40a4c4:	d102      	bne.n	40a4cc <_vfprintf_r+0x8e8>
  40a4c6:	059a      	lsls	r2, r3, #22
  40a4c8:	f140 8249 	bpl.w	40a95e <_vfprintf_r+0xd7a>
  40a4cc:	065b      	lsls	r3, r3, #25
  40a4ce:	f53f adec 	bmi.w	40a0aa <_vfprintf_r+0x4c6>
  40a4d2:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40a4d4:	b041      	add	sp, #260	; 0x104
  40a4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a4da:	2e65      	cmp	r6, #101	; 0x65
  40a4dc:	f340 80b2 	ble.w	40a644 <_vfprintf_r+0xa60>
  40a4e0:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40a4e2:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40a4e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40a4e6:	9912      	ldr	r1, [sp, #72]	; 0x48
  40a4e8:	f003 fff8 	bl	40e4dc <__aeabi_dcmpeq>
  40a4ec:	2800      	cmp	r0, #0
  40a4ee:	f000 8160 	beq.w	40a7b2 <_vfprintf_r+0xbce>
  40a4f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a4f4:	4a3a      	ldr	r2, [pc, #232]	; (40a5e0 <_vfprintf_r+0x9fc>)
  40a4f6:	f8c8 2000 	str.w	r2, [r8]
  40a4fa:	3301      	adds	r3, #1
  40a4fc:	3401      	adds	r4, #1
  40a4fe:	2201      	movs	r2, #1
  40a500:	2b07      	cmp	r3, #7
  40a502:	9425      	str	r4, [sp, #148]	; 0x94
  40a504:	9324      	str	r3, [sp, #144]	; 0x90
  40a506:	f8c8 2004 	str.w	r2, [r8, #4]
  40a50a:	f300 83bf 	bgt.w	40ac8c <_vfprintf_r+0x10a8>
  40a50e:	f108 0808 	add.w	r8, r8, #8
  40a512:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40a514:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40a516:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40a518:	4293      	cmp	r3, r2
  40a51a:	db03      	blt.n	40a524 <_vfprintf_r+0x940>
  40a51c:	9b06      	ldr	r3, [sp, #24]
  40a51e:	07df      	lsls	r7, r3, #31
  40a520:	f57f ad65 	bpl.w	409fee <_vfprintf_r+0x40a>
  40a524:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a526:	9914      	ldr	r1, [sp, #80]	; 0x50
  40a528:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40a52a:	f8c8 2000 	str.w	r2, [r8]
  40a52e:	3301      	adds	r3, #1
  40a530:	440c      	add	r4, r1
  40a532:	2b07      	cmp	r3, #7
  40a534:	f8c8 1004 	str.w	r1, [r8, #4]
  40a538:	9425      	str	r4, [sp, #148]	; 0x94
  40a53a:	9324      	str	r3, [sp, #144]	; 0x90
  40a53c:	f300 83f8 	bgt.w	40ad30 <_vfprintf_r+0x114c>
  40a540:	f108 0808 	add.w	r8, r8, #8
  40a544:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40a546:	1e5e      	subs	r6, r3, #1
  40a548:	2e00      	cmp	r6, #0
  40a54a:	f77f ad50 	ble.w	409fee <_vfprintf_r+0x40a>
  40a54e:	2e10      	cmp	r6, #16
  40a550:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a552:	4d24      	ldr	r5, [pc, #144]	; (40a5e4 <_vfprintf_r+0xa00>)
  40a554:	f340 81dd 	ble.w	40a912 <_vfprintf_r+0xd2e>
  40a558:	2710      	movs	r7, #16
  40a55a:	f8dd a020 	ldr.w	sl, [sp, #32]
  40a55e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40a562:	e005      	b.n	40a570 <_vfprintf_r+0x98c>
  40a564:	f108 0808 	add.w	r8, r8, #8
  40a568:	3e10      	subs	r6, #16
  40a56a:	2e10      	cmp	r6, #16
  40a56c:	f340 81d1 	ble.w	40a912 <_vfprintf_r+0xd2e>
  40a570:	3301      	adds	r3, #1
  40a572:	3410      	adds	r4, #16
  40a574:	2b07      	cmp	r3, #7
  40a576:	9425      	str	r4, [sp, #148]	; 0x94
  40a578:	9324      	str	r3, [sp, #144]	; 0x90
  40a57a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40a57e:	ddf1      	ble.n	40a564 <_vfprintf_r+0x980>
  40a580:	aa23      	add	r2, sp, #140	; 0x8c
  40a582:	4659      	mov	r1, fp
  40a584:	4650      	mov	r0, sl
  40a586:	f003 fca3 	bl	40ded0 <__sprint_r>
  40a58a:	2800      	cmp	r0, #0
  40a58c:	f040 83cd 	bne.w	40ad2a <_vfprintf_r+0x1146>
  40a590:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40a592:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a594:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40a598:	e7e6      	b.n	40a568 <_vfprintf_r+0x984>
  40a59a:	46aa      	mov	sl, r5
  40a59c:	e78c      	b.n	40a4b8 <_vfprintf_r+0x8d4>
  40a59e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40a5a0:	9a07      	ldr	r2, [sp, #28]
  40a5a2:	eba3 0a02 	sub.w	sl, r3, r2
  40a5a6:	f1ba 0f00 	cmp.w	sl, #0
  40a5aa:	f77f acca 	ble.w	409f42 <_vfprintf_r+0x35e>
  40a5ae:	f1ba 0f10 	cmp.w	sl, #16
  40a5b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a5b4:	4d0b      	ldr	r5, [pc, #44]	; (40a5e4 <_vfprintf_r+0xa00>)
  40a5b6:	dd39      	ble.n	40a62c <_vfprintf_r+0xa48>
  40a5b8:	4642      	mov	r2, r8
  40a5ba:	4621      	mov	r1, r4
  40a5bc:	46b0      	mov	r8, r6
  40a5be:	f04f 0b10 	mov.w	fp, #16
  40a5c2:	462e      	mov	r6, r5
  40a5c4:	9c08      	ldr	r4, [sp, #32]
  40a5c6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40a5c8:	e015      	b.n	40a5f6 <_vfprintf_r+0xa12>
  40a5ca:	bf00      	nop
  40a5cc:	0040ed00 	.word	0x0040ed00
  40a5d0:	0040ecec 	.word	0x0040ecec
  40a5d4:	7fefffff 	.word	0x7fefffff
  40a5d8:	0040ece0 	.word	0x0040ece0
  40a5dc:	0040ecdc 	.word	0x0040ecdc
  40a5e0:	0040ed1c 	.word	0x0040ed1c
  40a5e4:	0040ed50 	.word	0x0040ed50
  40a5e8:	f1aa 0a10 	sub.w	sl, sl, #16
  40a5ec:	f1ba 0f10 	cmp.w	sl, #16
  40a5f0:	f102 0208 	add.w	r2, r2, #8
  40a5f4:	dd16      	ble.n	40a624 <_vfprintf_r+0xa40>
  40a5f6:	3301      	adds	r3, #1
  40a5f8:	3110      	adds	r1, #16
  40a5fa:	2b07      	cmp	r3, #7
  40a5fc:	9125      	str	r1, [sp, #148]	; 0x94
  40a5fe:	9324      	str	r3, [sp, #144]	; 0x90
  40a600:	e882 0840 	stmia.w	r2, {r6, fp}
  40a604:	ddf0      	ble.n	40a5e8 <_vfprintf_r+0xa04>
  40a606:	aa23      	add	r2, sp, #140	; 0x8c
  40a608:	4629      	mov	r1, r5
  40a60a:	4620      	mov	r0, r4
  40a60c:	f003 fc60 	bl	40ded0 <__sprint_r>
  40a610:	2800      	cmp	r0, #0
  40a612:	d1c2      	bne.n	40a59a <_vfprintf_r+0x9b6>
  40a614:	f1aa 0a10 	sub.w	sl, sl, #16
  40a618:	f1ba 0f10 	cmp.w	sl, #16
  40a61c:	9925      	ldr	r1, [sp, #148]	; 0x94
  40a61e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a620:	aa30      	add	r2, sp, #192	; 0xc0
  40a622:	dce8      	bgt.n	40a5f6 <_vfprintf_r+0xa12>
  40a624:	4635      	mov	r5, r6
  40a626:	460c      	mov	r4, r1
  40a628:	4646      	mov	r6, r8
  40a62a:	4690      	mov	r8, r2
  40a62c:	3301      	adds	r3, #1
  40a62e:	4454      	add	r4, sl
  40a630:	2b07      	cmp	r3, #7
  40a632:	9425      	str	r4, [sp, #148]	; 0x94
  40a634:	9324      	str	r3, [sp, #144]	; 0x90
  40a636:	e888 0420 	stmia.w	r8, {r5, sl}
  40a63a:	f300 8264 	bgt.w	40ab06 <_vfprintf_r+0xf22>
  40a63e:	f108 0808 	add.w	r8, r8, #8
  40a642:	e47e      	b.n	409f42 <_vfprintf_r+0x35e>
  40a644:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40a646:	9e24      	ldr	r6, [sp, #144]	; 0x90
  40a648:	2b01      	cmp	r3, #1
  40a64a:	f340 81fd 	ble.w	40aa48 <_vfprintf_r+0xe64>
  40a64e:	3601      	adds	r6, #1
  40a650:	3401      	adds	r4, #1
  40a652:	2301      	movs	r3, #1
  40a654:	2e07      	cmp	r6, #7
  40a656:	9425      	str	r4, [sp, #148]	; 0x94
  40a658:	9624      	str	r6, [sp, #144]	; 0x90
  40a65a:	f8c8 7000 	str.w	r7, [r8]
  40a65e:	f8c8 3004 	str.w	r3, [r8, #4]
  40a662:	f300 820e 	bgt.w	40aa82 <_vfprintf_r+0xe9e>
  40a666:	f108 0808 	add.w	r8, r8, #8
  40a66a:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40a66c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40a66e:	f8c8 3000 	str.w	r3, [r8]
  40a672:	3601      	adds	r6, #1
  40a674:	4414      	add	r4, r2
  40a676:	2e07      	cmp	r6, #7
  40a678:	9425      	str	r4, [sp, #148]	; 0x94
  40a67a:	9624      	str	r6, [sp, #144]	; 0x90
  40a67c:	f8c8 2004 	str.w	r2, [r8, #4]
  40a680:	f300 822e 	bgt.w	40aae0 <_vfprintf_r+0xefc>
  40a684:	f108 0808 	add.w	r8, r8, #8
  40a688:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40a68a:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40a68c:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40a68e:	9912      	ldr	r1, [sp, #72]	; 0x48
  40a690:	f003 ff24 	bl	40e4dc <__aeabi_dcmpeq>
  40a694:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40a696:	2800      	cmp	r0, #0
  40a698:	f040 8106 	bne.w	40a8a8 <_vfprintf_r+0xcc4>
  40a69c:	3b01      	subs	r3, #1
  40a69e:	3601      	adds	r6, #1
  40a6a0:	3701      	adds	r7, #1
  40a6a2:	441c      	add	r4, r3
  40a6a4:	2e07      	cmp	r6, #7
  40a6a6:	9624      	str	r6, [sp, #144]	; 0x90
  40a6a8:	9425      	str	r4, [sp, #148]	; 0x94
  40a6aa:	f8c8 7000 	str.w	r7, [r8]
  40a6ae:	f8c8 3004 	str.w	r3, [r8, #4]
  40a6b2:	f300 81d9 	bgt.w	40aa68 <_vfprintf_r+0xe84>
  40a6b6:	f108 0808 	add.w	r8, r8, #8
  40a6ba:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40a6bc:	f8c8 2004 	str.w	r2, [r8, #4]
  40a6c0:	3601      	adds	r6, #1
  40a6c2:	4414      	add	r4, r2
  40a6c4:	ab1f      	add	r3, sp, #124	; 0x7c
  40a6c6:	2e07      	cmp	r6, #7
  40a6c8:	9425      	str	r4, [sp, #148]	; 0x94
  40a6ca:	9624      	str	r6, [sp, #144]	; 0x90
  40a6cc:	f8c8 3000 	str.w	r3, [r8]
  40a6d0:	f77f ac8b 	ble.w	409fea <_vfprintf_r+0x406>
  40a6d4:	aa23      	add	r2, sp, #140	; 0x8c
  40a6d6:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a6d8:	9808      	ldr	r0, [sp, #32]
  40a6da:	f003 fbf9 	bl	40ded0 <__sprint_r>
  40a6de:	b958      	cbnz	r0, 40a6f8 <_vfprintf_r+0xb14>
  40a6e0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40a6e2:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40a6e6:	e482      	b.n	409fee <_vfprintf_r+0x40a>
  40a6e8:	aa23      	add	r2, sp, #140	; 0x8c
  40a6ea:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a6ec:	9808      	ldr	r0, [sp, #32]
  40a6ee:	f003 fbef 	bl	40ded0 <__sprint_r>
  40a6f2:	2800      	cmp	r0, #0
  40a6f4:	f43f acc5 	beq.w	40a082 <_vfprintf_r+0x49e>
  40a6f8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  40a6fc:	e6dc      	b.n	40a4b8 <_vfprintf_r+0x8d4>
  40a6fe:	f8dd b018 	ldr.w	fp, [sp, #24]
  40a702:	2b01      	cmp	r3, #1
  40a704:	f000 8121 	beq.w	40a94a <_vfprintf_r+0xd66>
  40a708:	2b02      	cmp	r3, #2
  40a70a:	d127      	bne.n	40a75c <_vfprintf_r+0xb78>
  40a70c:	f8cd b018 	str.w	fp, [sp, #24]
  40a710:	2400      	movs	r4, #0
  40a712:	2500      	movs	r5, #0
  40a714:	e591      	b.n	40a23a <_vfprintf_r+0x656>
  40a716:	aa23      	add	r2, sp, #140	; 0x8c
  40a718:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a71a:	9808      	ldr	r0, [sp, #32]
  40a71c:	f003 fbd8 	bl	40ded0 <__sprint_r>
  40a720:	2800      	cmp	r0, #0
  40a722:	d1e9      	bne.n	40a6f8 <_vfprintf_r+0xb14>
  40a724:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40a726:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40a72a:	e44d      	b.n	409fc8 <_vfprintf_r+0x3e4>
  40a72c:	aa23      	add	r2, sp, #140	; 0x8c
  40a72e:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a730:	9808      	ldr	r0, [sp, #32]
  40a732:	f003 fbcd 	bl	40ded0 <__sprint_r>
  40a736:	2800      	cmp	r0, #0
  40a738:	d1de      	bne.n	40a6f8 <_vfprintf_r+0xb14>
  40a73a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40a73c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40a740:	f7ff bbec 	b.w	409f1c <_vfprintf_r+0x338>
  40a744:	aa23      	add	r2, sp, #140	; 0x8c
  40a746:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a748:	9808      	ldr	r0, [sp, #32]
  40a74a:	f003 fbc1 	bl	40ded0 <__sprint_r>
  40a74e:	2800      	cmp	r0, #0
  40a750:	d1d2      	bne.n	40a6f8 <_vfprintf_r+0xb14>
  40a752:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40a754:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40a758:	f7ff bbf0 	b.w	409f3c <_vfprintf_r+0x358>
  40a75c:	f8cd b018 	str.w	fp, [sp, #24]
  40a760:	2400      	movs	r4, #0
  40a762:	2500      	movs	r5, #0
  40a764:	a930      	add	r1, sp, #192	; 0xc0
  40a766:	e000      	b.n	40a76a <_vfprintf_r+0xb86>
  40a768:	4639      	mov	r1, r7
  40a76a:	08e2      	lsrs	r2, r4, #3
  40a76c:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40a770:	08e8      	lsrs	r0, r5, #3
  40a772:	f004 0307 	and.w	r3, r4, #7
  40a776:	4605      	mov	r5, r0
  40a778:	4614      	mov	r4, r2
  40a77a:	3330      	adds	r3, #48	; 0x30
  40a77c:	ea54 0205 	orrs.w	r2, r4, r5
  40a780:	f801 3c01 	strb.w	r3, [r1, #-1]
  40a784:	f101 37ff 	add.w	r7, r1, #4294967295
  40a788:	d1ee      	bne.n	40a768 <_vfprintf_r+0xb84>
  40a78a:	9a06      	ldr	r2, [sp, #24]
  40a78c:	07d2      	lsls	r2, r2, #31
  40a78e:	f57f ad64 	bpl.w	40a25a <_vfprintf_r+0x676>
  40a792:	2b30      	cmp	r3, #48	; 0x30
  40a794:	f43f ad61 	beq.w	40a25a <_vfprintf_r+0x676>
  40a798:	2330      	movs	r3, #48	; 0x30
  40a79a:	3902      	subs	r1, #2
  40a79c:	f807 3c01 	strb.w	r3, [r7, #-1]
  40a7a0:	ab30      	add	r3, sp, #192	; 0xc0
  40a7a2:	1a5b      	subs	r3, r3, r1
  40a7a4:	930d      	str	r3, [sp, #52]	; 0x34
  40a7a6:	460f      	mov	r7, r1
  40a7a8:	f7ff bb46 	b.w	409e38 <_vfprintf_r+0x254>
  40a7ac:	2302      	movs	r3, #2
  40a7ae:	f7ff bb25 	b.w	409dfc <_vfprintf_r+0x218>
  40a7b2:	991d      	ldr	r1, [sp, #116]	; 0x74
  40a7b4:	2900      	cmp	r1, #0
  40a7b6:	f340 8274 	ble.w	40aca2 <_vfprintf_r+0x10be>
  40a7ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40a7bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40a7be:	4293      	cmp	r3, r2
  40a7c0:	bfa8      	it	ge
  40a7c2:	4613      	movge	r3, r2
  40a7c4:	2b00      	cmp	r3, #0
  40a7c6:	461e      	mov	r6, r3
  40a7c8:	dd0d      	ble.n	40a7e6 <_vfprintf_r+0xc02>
  40a7ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a7cc:	f8c8 7000 	str.w	r7, [r8]
  40a7d0:	3301      	adds	r3, #1
  40a7d2:	4434      	add	r4, r6
  40a7d4:	2b07      	cmp	r3, #7
  40a7d6:	9425      	str	r4, [sp, #148]	; 0x94
  40a7d8:	f8c8 6004 	str.w	r6, [r8, #4]
  40a7dc:	9324      	str	r3, [sp, #144]	; 0x90
  40a7de:	f300 8324 	bgt.w	40ae2a <_vfprintf_r+0x1246>
  40a7e2:	f108 0808 	add.w	r8, r8, #8
  40a7e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40a7e8:	2e00      	cmp	r6, #0
  40a7ea:	bfa8      	it	ge
  40a7ec:	1b9b      	subge	r3, r3, r6
  40a7ee:	2b00      	cmp	r3, #0
  40a7f0:	461e      	mov	r6, r3
  40a7f2:	f340 80d0 	ble.w	40a996 <_vfprintf_r+0xdb2>
  40a7f6:	2e10      	cmp	r6, #16
  40a7f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a7fa:	4dc0      	ldr	r5, [pc, #768]	; (40aafc <_vfprintf_r+0xf18>)
  40a7fc:	f340 80b7 	ble.w	40a96e <_vfprintf_r+0xd8a>
  40a800:	4622      	mov	r2, r4
  40a802:	f04f 0a10 	mov.w	sl, #16
  40a806:	f8dd b020 	ldr.w	fp, [sp, #32]
  40a80a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40a80c:	e005      	b.n	40a81a <_vfprintf_r+0xc36>
  40a80e:	f108 0808 	add.w	r8, r8, #8
  40a812:	3e10      	subs	r6, #16
  40a814:	2e10      	cmp	r6, #16
  40a816:	f340 80a9 	ble.w	40a96c <_vfprintf_r+0xd88>
  40a81a:	3301      	adds	r3, #1
  40a81c:	3210      	adds	r2, #16
  40a81e:	2b07      	cmp	r3, #7
  40a820:	9225      	str	r2, [sp, #148]	; 0x94
  40a822:	9324      	str	r3, [sp, #144]	; 0x90
  40a824:	e888 0420 	stmia.w	r8, {r5, sl}
  40a828:	ddf1      	ble.n	40a80e <_vfprintf_r+0xc2a>
  40a82a:	aa23      	add	r2, sp, #140	; 0x8c
  40a82c:	4621      	mov	r1, r4
  40a82e:	4658      	mov	r0, fp
  40a830:	f003 fb4e 	bl	40ded0 <__sprint_r>
  40a834:	2800      	cmp	r0, #0
  40a836:	f040 8324 	bne.w	40ae82 <_vfprintf_r+0x129e>
  40a83a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40a83c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a83e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40a842:	e7e6      	b.n	40a812 <_vfprintf_r+0xc2e>
  40a844:	2d00      	cmp	r5, #0
  40a846:	bf08      	it	eq
  40a848:	2c0a      	cmpeq	r4, #10
  40a84a:	d37c      	bcc.n	40a946 <_vfprintf_r+0xd62>
  40a84c:	af30      	add	r7, sp, #192	; 0xc0
  40a84e:	4620      	mov	r0, r4
  40a850:	4629      	mov	r1, r5
  40a852:	220a      	movs	r2, #10
  40a854:	2300      	movs	r3, #0
  40a856:	f003 feb1 	bl	40e5bc <__aeabi_uldivmod>
  40a85a:	3230      	adds	r2, #48	; 0x30
  40a85c:	f807 2d01 	strb.w	r2, [r7, #-1]!
  40a860:	4620      	mov	r0, r4
  40a862:	4629      	mov	r1, r5
  40a864:	2300      	movs	r3, #0
  40a866:	220a      	movs	r2, #10
  40a868:	f003 fea8 	bl	40e5bc <__aeabi_uldivmod>
  40a86c:	4604      	mov	r4, r0
  40a86e:	460d      	mov	r5, r1
  40a870:	ea54 0305 	orrs.w	r3, r4, r5
  40a874:	d1eb      	bne.n	40a84e <_vfprintf_r+0xc6a>
  40a876:	ab30      	add	r3, sp, #192	; 0xc0
  40a878:	1bdb      	subs	r3, r3, r7
  40a87a:	930d      	str	r3, [sp, #52]	; 0x34
  40a87c:	f7ff badc 	b.w	409e38 <_vfprintf_r+0x254>
  40a880:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a882:	930d      	str	r3, [sp, #52]	; 0x34
  40a884:	af30      	add	r7, sp, #192	; 0xc0
  40a886:	f7ff bad7 	b.w	409e38 <_vfprintf_r+0x254>
  40a88a:	aa23      	add	r2, sp, #140	; 0x8c
  40a88c:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a88e:	9808      	ldr	r0, [sp, #32]
  40a890:	f003 fb1e 	bl	40ded0 <__sprint_r>
  40a894:	2800      	cmp	r0, #0
  40a896:	f47f af2f 	bne.w	40a6f8 <_vfprintf_r+0xb14>
  40a89a:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  40a89e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40a8a0:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40a8a4:	f7ff bb28 	b.w	409ef8 <_vfprintf_r+0x314>
  40a8a8:	1e5f      	subs	r7, r3, #1
  40a8aa:	2f00      	cmp	r7, #0
  40a8ac:	f77f af05 	ble.w	40a6ba <_vfprintf_r+0xad6>
  40a8b0:	2f10      	cmp	r7, #16
  40a8b2:	4d92      	ldr	r5, [pc, #584]	; (40aafc <_vfprintf_r+0xf18>)
  40a8b4:	f340 810a 	ble.w	40aacc <_vfprintf_r+0xee8>
  40a8b8:	f04f 0a10 	mov.w	sl, #16
  40a8bc:	f8dd b020 	ldr.w	fp, [sp, #32]
  40a8c0:	e005      	b.n	40a8ce <_vfprintf_r+0xcea>
  40a8c2:	f108 0808 	add.w	r8, r8, #8
  40a8c6:	3f10      	subs	r7, #16
  40a8c8:	2f10      	cmp	r7, #16
  40a8ca:	f340 80ff 	ble.w	40aacc <_vfprintf_r+0xee8>
  40a8ce:	3601      	adds	r6, #1
  40a8d0:	3410      	adds	r4, #16
  40a8d2:	2e07      	cmp	r6, #7
  40a8d4:	9425      	str	r4, [sp, #148]	; 0x94
  40a8d6:	9624      	str	r6, [sp, #144]	; 0x90
  40a8d8:	e888 0420 	stmia.w	r8, {r5, sl}
  40a8dc:	ddf1      	ble.n	40a8c2 <_vfprintf_r+0xcde>
  40a8de:	aa23      	add	r2, sp, #140	; 0x8c
  40a8e0:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a8e2:	4658      	mov	r0, fp
  40a8e4:	f003 faf4 	bl	40ded0 <__sprint_r>
  40a8e8:	2800      	cmp	r0, #0
  40a8ea:	f47f af05 	bne.w	40a6f8 <_vfprintf_r+0xb14>
  40a8ee:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40a8f0:	9e24      	ldr	r6, [sp, #144]	; 0x90
  40a8f2:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40a8f6:	e7e6      	b.n	40a8c6 <_vfprintf_r+0xce2>
  40a8f8:	990e      	ldr	r1, [sp, #56]	; 0x38
  40a8fa:	460a      	mov	r2, r1
  40a8fc:	3204      	adds	r2, #4
  40a8fe:	680c      	ldr	r4, [r1, #0]
  40a900:	920e      	str	r2, [sp, #56]	; 0x38
  40a902:	2500      	movs	r5, #0
  40a904:	f7ff ba7a 	b.w	409dfc <_vfprintf_r+0x218>
  40a908:	681c      	ldr	r4, [r3, #0]
  40a90a:	3304      	adds	r3, #4
  40a90c:	930e      	str	r3, [sp, #56]	; 0x38
  40a90e:	2500      	movs	r5, #0
  40a910:	e426      	b.n	40a160 <_vfprintf_r+0x57c>
  40a912:	3301      	adds	r3, #1
  40a914:	4434      	add	r4, r6
  40a916:	2b07      	cmp	r3, #7
  40a918:	9425      	str	r4, [sp, #148]	; 0x94
  40a91a:	9324      	str	r3, [sp, #144]	; 0x90
  40a91c:	e888 0060 	stmia.w	r8, {r5, r6}
  40a920:	f77f ab63 	ble.w	409fea <_vfprintf_r+0x406>
  40a924:	e6d6      	b.n	40a6d4 <_vfprintf_r+0xaf0>
  40a926:	3204      	adds	r2, #4
  40a928:	681c      	ldr	r4, [r3, #0]
  40a92a:	920e      	str	r2, [sp, #56]	; 0x38
  40a92c:	2301      	movs	r3, #1
  40a92e:	2500      	movs	r5, #0
  40a930:	f7ff ba64 	b.w	409dfc <_vfprintf_r+0x218>
  40a934:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40a936:	6814      	ldr	r4, [r2, #0]
  40a938:	4613      	mov	r3, r2
  40a93a:	3304      	adds	r3, #4
  40a93c:	17e5      	asrs	r5, r4, #31
  40a93e:	930e      	str	r3, [sp, #56]	; 0x38
  40a940:	4622      	mov	r2, r4
  40a942:	462b      	mov	r3, r5
  40a944:	e460      	b.n	40a208 <_vfprintf_r+0x624>
  40a946:	f8dd b018 	ldr.w	fp, [sp, #24]
  40a94a:	f8cd b018 	str.w	fp, [sp, #24]
  40a94e:	af40      	add	r7, sp, #256	; 0x100
  40a950:	3430      	adds	r4, #48	; 0x30
  40a952:	2301      	movs	r3, #1
  40a954:	f807 4d41 	strb.w	r4, [r7, #-65]!
  40a958:	930d      	str	r3, [sp, #52]	; 0x34
  40a95a:	f7ff ba6d 	b.w	409e38 <_vfprintf_r+0x254>
  40a95e:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  40a962:	f002 f895 	bl	40ca90 <__retarget_lock_release_recursive>
  40a966:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  40a96a:	e5af      	b.n	40a4cc <_vfprintf_r+0x8e8>
  40a96c:	4614      	mov	r4, r2
  40a96e:	3301      	adds	r3, #1
  40a970:	4434      	add	r4, r6
  40a972:	2b07      	cmp	r3, #7
  40a974:	9425      	str	r4, [sp, #148]	; 0x94
  40a976:	9324      	str	r3, [sp, #144]	; 0x90
  40a978:	e888 0060 	stmia.w	r8, {r5, r6}
  40a97c:	f340 816d 	ble.w	40ac5a <_vfprintf_r+0x1076>
  40a980:	aa23      	add	r2, sp, #140	; 0x8c
  40a982:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a984:	9808      	ldr	r0, [sp, #32]
  40a986:	f003 faa3 	bl	40ded0 <__sprint_r>
  40a98a:	2800      	cmp	r0, #0
  40a98c:	f47f aeb4 	bne.w	40a6f8 <_vfprintf_r+0xb14>
  40a990:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40a992:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40a996:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40a998:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40a99a:	4293      	cmp	r3, r2
  40a99c:	f280 8158 	bge.w	40ac50 <_vfprintf_r+0x106c>
  40a9a0:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40a9a2:	9814      	ldr	r0, [sp, #80]	; 0x50
  40a9a4:	9915      	ldr	r1, [sp, #84]	; 0x54
  40a9a6:	f8c8 1000 	str.w	r1, [r8]
  40a9aa:	3201      	adds	r2, #1
  40a9ac:	4404      	add	r4, r0
  40a9ae:	2a07      	cmp	r2, #7
  40a9b0:	9425      	str	r4, [sp, #148]	; 0x94
  40a9b2:	f8c8 0004 	str.w	r0, [r8, #4]
  40a9b6:	9224      	str	r2, [sp, #144]	; 0x90
  40a9b8:	f300 8152 	bgt.w	40ac60 <_vfprintf_r+0x107c>
  40a9bc:	f108 0808 	add.w	r8, r8, #8
  40a9c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40a9c2:	9910      	ldr	r1, [sp, #64]	; 0x40
  40a9c4:	1ad3      	subs	r3, r2, r3
  40a9c6:	1a56      	subs	r6, r2, r1
  40a9c8:	429e      	cmp	r6, r3
  40a9ca:	bfa8      	it	ge
  40a9cc:	461e      	movge	r6, r3
  40a9ce:	2e00      	cmp	r6, #0
  40a9d0:	dd0e      	ble.n	40a9f0 <_vfprintf_r+0xe0c>
  40a9d2:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40a9d4:	f8c8 6004 	str.w	r6, [r8, #4]
  40a9d8:	3201      	adds	r2, #1
  40a9da:	440f      	add	r7, r1
  40a9dc:	4434      	add	r4, r6
  40a9de:	2a07      	cmp	r2, #7
  40a9e0:	f8c8 7000 	str.w	r7, [r8]
  40a9e4:	9425      	str	r4, [sp, #148]	; 0x94
  40a9e6:	9224      	str	r2, [sp, #144]	; 0x90
  40a9e8:	f300 823c 	bgt.w	40ae64 <_vfprintf_r+0x1280>
  40a9ec:	f108 0808 	add.w	r8, r8, #8
  40a9f0:	2e00      	cmp	r6, #0
  40a9f2:	bfac      	ite	ge
  40a9f4:	1b9e      	subge	r6, r3, r6
  40a9f6:	461e      	movlt	r6, r3
  40a9f8:	2e00      	cmp	r6, #0
  40a9fa:	f77f aaf8 	ble.w	409fee <_vfprintf_r+0x40a>
  40a9fe:	2e10      	cmp	r6, #16
  40aa00:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40aa02:	4d3e      	ldr	r5, [pc, #248]	; (40aafc <_vfprintf_r+0xf18>)
  40aa04:	dd85      	ble.n	40a912 <_vfprintf_r+0xd2e>
  40aa06:	2710      	movs	r7, #16
  40aa08:	f8dd a020 	ldr.w	sl, [sp, #32]
  40aa0c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40aa10:	e005      	b.n	40aa1e <_vfprintf_r+0xe3a>
  40aa12:	f108 0808 	add.w	r8, r8, #8
  40aa16:	3e10      	subs	r6, #16
  40aa18:	2e10      	cmp	r6, #16
  40aa1a:	f77f af7a 	ble.w	40a912 <_vfprintf_r+0xd2e>
  40aa1e:	3301      	adds	r3, #1
  40aa20:	3410      	adds	r4, #16
  40aa22:	2b07      	cmp	r3, #7
  40aa24:	9425      	str	r4, [sp, #148]	; 0x94
  40aa26:	9324      	str	r3, [sp, #144]	; 0x90
  40aa28:	e888 00a0 	stmia.w	r8, {r5, r7}
  40aa2c:	ddf1      	ble.n	40aa12 <_vfprintf_r+0xe2e>
  40aa2e:	aa23      	add	r2, sp, #140	; 0x8c
  40aa30:	4659      	mov	r1, fp
  40aa32:	4650      	mov	r0, sl
  40aa34:	f003 fa4c 	bl	40ded0 <__sprint_r>
  40aa38:	2800      	cmp	r0, #0
  40aa3a:	f040 8176 	bne.w	40ad2a <_vfprintf_r+0x1146>
  40aa3e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40aa40:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40aa42:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40aa46:	e7e6      	b.n	40aa16 <_vfprintf_r+0xe32>
  40aa48:	9b06      	ldr	r3, [sp, #24]
  40aa4a:	07d8      	lsls	r0, r3, #31
  40aa4c:	f53f adff 	bmi.w	40a64e <_vfprintf_r+0xa6a>
  40aa50:	3601      	adds	r6, #1
  40aa52:	3401      	adds	r4, #1
  40aa54:	2301      	movs	r3, #1
  40aa56:	2e07      	cmp	r6, #7
  40aa58:	9425      	str	r4, [sp, #148]	; 0x94
  40aa5a:	9624      	str	r6, [sp, #144]	; 0x90
  40aa5c:	f8c8 7000 	str.w	r7, [r8]
  40aa60:	f8c8 3004 	str.w	r3, [r8, #4]
  40aa64:	f77f ae27 	ble.w	40a6b6 <_vfprintf_r+0xad2>
  40aa68:	aa23      	add	r2, sp, #140	; 0x8c
  40aa6a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40aa6c:	9808      	ldr	r0, [sp, #32]
  40aa6e:	f003 fa2f 	bl	40ded0 <__sprint_r>
  40aa72:	2800      	cmp	r0, #0
  40aa74:	f47f ae40 	bne.w	40a6f8 <_vfprintf_r+0xb14>
  40aa78:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40aa7a:	9e24      	ldr	r6, [sp, #144]	; 0x90
  40aa7c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40aa80:	e61b      	b.n	40a6ba <_vfprintf_r+0xad6>
  40aa82:	aa23      	add	r2, sp, #140	; 0x8c
  40aa84:	990a      	ldr	r1, [sp, #40]	; 0x28
  40aa86:	9808      	ldr	r0, [sp, #32]
  40aa88:	f003 fa22 	bl	40ded0 <__sprint_r>
  40aa8c:	2800      	cmp	r0, #0
  40aa8e:	f47f ae33 	bne.w	40a6f8 <_vfprintf_r+0xb14>
  40aa92:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40aa94:	9e24      	ldr	r6, [sp, #144]	; 0x90
  40aa96:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40aa9a:	e5e6      	b.n	40a66a <_vfprintf_r+0xa86>
  40aa9c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40aa9e:	3507      	adds	r5, #7
  40aaa0:	f025 0507 	bic.w	r5, r5, #7
  40aaa4:	e9d5 2300 	ldrd	r2, r3, [r5]
  40aaa8:	f105 0108 	add.w	r1, r5, #8
  40aaac:	910e      	str	r1, [sp, #56]	; 0x38
  40aaae:	4614      	mov	r4, r2
  40aab0:	461d      	mov	r5, r3
  40aab2:	f7ff bba9 	b.w	40a208 <_vfprintf_r+0x624>
  40aab6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40aab8:	3507      	adds	r5, #7
  40aaba:	f025 0307 	bic.w	r3, r5, #7
  40aabe:	f103 0208 	add.w	r2, r3, #8
  40aac2:	920e      	str	r2, [sp, #56]	; 0x38
  40aac4:	e9d3 4500 	ldrd	r4, r5, [r3]
  40aac8:	f7ff bb4a 	b.w	40a160 <_vfprintf_r+0x57c>
  40aacc:	3601      	adds	r6, #1
  40aace:	443c      	add	r4, r7
  40aad0:	2e07      	cmp	r6, #7
  40aad2:	9425      	str	r4, [sp, #148]	; 0x94
  40aad4:	9624      	str	r6, [sp, #144]	; 0x90
  40aad6:	e888 00a0 	stmia.w	r8, {r5, r7}
  40aada:	f77f adec 	ble.w	40a6b6 <_vfprintf_r+0xad2>
  40aade:	e7c3      	b.n	40aa68 <_vfprintf_r+0xe84>
  40aae0:	aa23      	add	r2, sp, #140	; 0x8c
  40aae2:	990a      	ldr	r1, [sp, #40]	; 0x28
  40aae4:	9808      	ldr	r0, [sp, #32]
  40aae6:	f003 f9f3 	bl	40ded0 <__sprint_r>
  40aaea:	2800      	cmp	r0, #0
  40aaec:	f47f ae04 	bne.w	40a6f8 <_vfprintf_r+0xb14>
  40aaf0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40aaf2:	9e24      	ldr	r6, [sp, #144]	; 0x90
  40aaf4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40aaf8:	e5c6      	b.n	40a688 <_vfprintf_r+0xaa4>
  40aafa:	bf00      	nop
  40aafc:	0040ed50 	.word	0x0040ed50
  40ab00:	af30      	add	r7, sp, #192	; 0xc0
  40ab02:	f7ff b999 	b.w	409e38 <_vfprintf_r+0x254>
  40ab06:	aa23      	add	r2, sp, #140	; 0x8c
  40ab08:	990a      	ldr	r1, [sp, #40]	; 0x28
  40ab0a:	9808      	ldr	r0, [sp, #32]
  40ab0c:	f003 f9e0 	bl	40ded0 <__sprint_r>
  40ab10:	2800      	cmp	r0, #0
  40ab12:	f47f adf1 	bne.w	40a6f8 <_vfprintf_r+0xb14>
  40ab16:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40ab18:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40ab1c:	f7ff ba11 	b.w	409f42 <_vfprintf_r+0x35e>
  40ab20:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40ab24:	4264      	negs	r4, r4
  40ab26:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40ab2a:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  40ab2e:	2301      	movs	r3, #1
  40ab30:	f7ff b968 	b.w	409e04 <_vfprintf_r+0x220>
  40ab34:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  40ab36:	4622      	mov	r2, r4
  40ab38:	4620      	mov	r0, r4
  40ab3a:	9c12      	ldr	r4, [sp, #72]	; 0x48
  40ab3c:	4623      	mov	r3, r4
  40ab3e:	4621      	mov	r1, r4
  40ab40:	f003 fcfe 	bl	40e540 <__aeabi_dcmpun>
  40ab44:	2800      	cmp	r0, #0
  40ab46:	f040 828c 	bne.w	40b062 <_vfprintf_r+0x147e>
  40ab4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40ab4c:	3301      	adds	r3, #1
  40ab4e:	f026 0320 	bic.w	r3, r6, #32
  40ab52:	930d      	str	r3, [sp, #52]	; 0x34
  40ab54:	f000 8091 	beq.w	40ac7a <_vfprintf_r+0x1096>
  40ab58:	2b47      	cmp	r3, #71	; 0x47
  40ab5a:	d104      	bne.n	40ab66 <_vfprintf_r+0xf82>
  40ab5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40ab5e:	2b00      	cmp	r3, #0
  40ab60:	bf08      	it	eq
  40ab62:	2301      	moveq	r3, #1
  40ab64:	9309      	str	r3, [sp, #36]	; 0x24
  40ab66:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  40ab6a:	9306      	str	r3, [sp, #24]
  40ab6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40ab6e:	f1b3 0a00 	subs.w	sl, r3, #0
  40ab72:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40ab74:	9307      	str	r3, [sp, #28]
  40ab76:	bfbb      	ittet	lt
  40ab78:	4653      	movlt	r3, sl
  40ab7a:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
  40ab7e:	2300      	movge	r3, #0
  40ab80:	232d      	movlt	r3, #45	; 0x2d
  40ab82:	2e66      	cmp	r6, #102	; 0x66
  40ab84:	930f      	str	r3, [sp, #60]	; 0x3c
  40ab86:	f000 817f 	beq.w	40ae88 <_vfprintf_r+0x12a4>
  40ab8a:	2e46      	cmp	r6, #70	; 0x46
  40ab8c:	f000 81d4 	beq.w	40af38 <_vfprintf_r+0x1354>
  40ab90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40ab92:	9a07      	ldr	r2, [sp, #28]
  40ab94:	2b45      	cmp	r3, #69	; 0x45
  40ab96:	bf0c      	ite	eq
  40ab98:	9b09      	ldreq	r3, [sp, #36]	; 0x24
  40ab9a:	9d09      	ldrne	r5, [sp, #36]	; 0x24
  40ab9c:	a821      	add	r0, sp, #132	; 0x84
  40ab9e:	a91e      	add	r1, sp, #120	; 0x78
  40aba0:	bf08      	it	eq
  40aba2:	1c5d      	addeq	r5, r3, #1
  40aba4:	9004      	str	r0, [sp, #16]
  40aba6:	9103      	str	r1, [sp, #12]
  40aba8:	a81d      	add	r0, sp, #116	; 0x74
  40abaa:	2102      	movs	r1, #2
  40abac:	9002      	str	r0, [sp, #8]
  40abae:	4653      	mov	r3, sl
  40abb0:	9501      	str	r5, [sp, #4]
  40abb2:	9100      	str	r1, [sp, #0]
  40abb4:	9808      	ldr	r0, [sp, #32]
  40abb6:	f000 fc0b 	bl	40b3d0 <_dtoa_r>
  40abba:	2e67      	cmp	r6, #103	; 0x67
  40abbc:	4607      	mov	r7, r0
  40abbe:	f040 81af 	bne.w	40af20 <_vfprintf_r+0x133c>
  40abc2:	f01b 0f01 	tst.w	fp, #1
  40abc6:	f000 8213 	beq.w	40aff0 <_vfprintf_r+0x140c>
  40abca:	197c      	adds	r4, r7, r5
  40abcc:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40abce:	9807      	ldr	r0, [sp, #28]
  40abd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40abd2:	4651      	mov	r1, sl
  40abd4:	f003 fc82 	bl	40e4dc <__aeabi_dcmpeq>
  40abd8:	2800      	cmp	r0, #0
  40abda:	f040 8132 	bne.w	40ae42 <_vfprintf_r+0x125e>
  40abde:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40abe0:	42a3      	cmp	r3, r4
  40abe2:	d206      	bcs.n	40abf2 <_vfprintf_r+0x100e>
  40abe4:	2130      	movs	r1, #48	; 0x30
  40abe6:	1c5a      	adds	r2, r3, #1
  40abe8:	9221      	str	r2, [sp, #132]	; 0x84
  40abea:	7019      	strb	r1, [r3, #0]
  40abec:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40abee:	429c      	cmp	r4, r3
  40abf0:	d8f9      	bhi.n	40abe6 <_vfprintf_r+0x1002>
  40abf2:	1bdb      	subs	r3, r3, r7
  40abf4:	9311      	str	r3, [sp, #68]	; 0x44
  40abf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40abf8:	2b47      	cmp	r3, #71	; 0x47
  40abfa:	f000 80b9 	beq.w	40ad70 <_vfprintf_r+0x118c>
  40abfe:	2e65      	cmp	r6, #101	; 0x65
  40ac00:	f340 8276 	ble.w	40b0f0 <_vfprintf_r+0x150c>
  40ac04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40ac06:	9310      	str	r3, [sp, #64]	; 0x40
  40ac08:	2e66      	cmp	r6, #102	; 0x66
  40ac0a:	f000 8162 	beq.w	40aed2 <_vfprintf_r+0x12ee>
  40ac0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40ac10:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40ac12:	4619      	mov	r1, r3
  40ac14:	4291      	cmp	r1, r2
  40ac16:	f300 814f 	bgt.w	40aeb8 <_vfprintf_r+0x12d4>
  40ac1a:	f01b 0f01 	tst.w	fp, #1
  40ac1e:	f040 8209 	bne.w	40b034 <_vfprintf_r+0x1450>
  40ac22:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40ac26:	9307      	str	r3, [sp, #28]
  40ac28:	920d      	str	r2, [sp, #52]	; 0x34
  40ac2a:	2667      	movs	r6, #103	; 0x67
  40ac2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40ac2e:	2b00      	cmp	r3, #0
  40ac30:	f040 8096 	bne.w	40ad60 <_vfprintf_r+0x117c>
  40ac34:	9309      	str	r3, [sp, #36]	; 0x24
  40ac36:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  40ac3a:	f7ff b905 	b.w	409e48 <_vfprintf_r+0x264>
  40ac3e:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  40ac42:	f001 ff25 	bl	40ca90 <__retarget_lock_release_recursive>
  40ac46:	f04f 33ff 	mov.w	r3, #4294967295
  40ac4a:	930b      	str	r3, [sp, #44]	; 0x2c
  40ac4c:	f7ff ba30 	b.w	40a0b0 <_vfprintf_r+0x4cc>
  40ac50:	9a06      	ldr	r2, [sp, #24]
  40ac52:	07d5      	lsls	r5, r2, #31
  40ac54:	f57f aeb4 	bpl.w	40a9c0 <_vfprintf_r+0xddc>
  40ac58:	e6a2      	b.n	40a9a0 <_vfprintf_r+0xdbc>
  40ac5a:	f108 0808 	add.w	r8, r8, #8
  40ac5e:	e69a      	b.n	40a996 <_vfprintf_r+0xdb2>
  40ac60:	aa23      	add	r2, sp, #140	; 0x8c
  40ac62:	990a      	ldr	r1, [sp, #40]	; 0x28
  40ac64:	9808      	ldr	r0, [sp, #32]
  40ac66:	f003 f933 	bl	40ded0 <__sprint_r>
  40ac6a:	2800      	cmp	r0, #0
  40ac6c:	f47f ad44 	bne.w	40a6f8 <_vfprintf_r+0xb14>
  40ac70:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40ac72:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40ac74:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40ac78:	e6a2      	b.n	40a9c0 <_vfprintf_r+0xddc>
  40ac7a:	2306      	movs	r3, #6
  40ac7c:	9309      	str	r3, [sp, #36]	; 0x24
  40ac7e:	e772      	b.n	40ab66 <_vfprintf_r+0xf82>
  40ac80:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40ac84:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  40ac88:	f7ff bbc7 	b.w	40a41a <_vfprintf_r+0x836>
  40ac8c:	aa23      	add	r2, sp, #140	; 0x8c
  40ac8e:	990a      	ldr	r1, [sp, #40]	; 0x28
  40ac90:	9808      	ldr	r0, [sp, #32]
  40ac92:	f003 f91d 	bl	40ded0 <__sprint_r>
  40ac96:	2800      	cmp	r0, #0
  40ac98:	f47f ad2e 	bne.w	40a6f8 <_vfprintf_r+0xb14>
  40ac9c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40aca0:	e437      	b.n	40a512 <_vfprintf_r+0x92e>
  40aca2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40aca4:	4ab4      	ldr	r2, [pc, #720]	; (40af78 <_vfprintf_r+0x1394>)
  40aca6:	f8c8 2000 	str.w	r2, [r8]
  40acaa:	3301      	adds	r3, #1
  40acac:	3401      	adds	r4, #1
  40acae:	2201      	movs	r2, #1
  40acb0:	2b07      	cmp	r3, #7
  40acb2:	9425      	str	r4, [sp, #148]	; 0x94
  40acb4:	9324      	str	r3, [sp, #144]	; 0x90
  40acb6:	f8c8 2004 	str.w	r2, [r8, #4]
  40acba:	f300 8124 	bgt.w	40af06 <_vfprintf_r+0x1322>
  40acbe:	f108 0808 	add.w	r8, r8, #8
  40acc2:	b929      	cbnz	r1, 40acd0 <_vfprintf_r+0x10ec>
  40acc4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40acc6:	b91b      	cbnz	r3, 40acd0 <_vfprintf_r+0x10ec>
  40acc8:	9b06      	ldr	r3, [sp, #24]
  40acca:	07de      	lsls	r6, r3, #31
  40accc:	f57f a98f 	bpl.w	409fee <_vfprintf_r+0x40a>
  40acd0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40acd2:	9814      	ldr	r0, [sp, #80]	; 0x50
  40acd4:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40acd6:	f8c8 2000 	str.w	r2, [r8]
  40acda:	3301      	adds	r3, #1
  40acdc:	4602      	mov	r2, r0
  40acde:	4422      	add	r2, r4
  40ace0:	2b07      	cmp	r3, #7
  40ace2:	9225      	str	r2, [sp, #148]	; 0x94
  40ace4:	f8c8 0004 	str.w	r0, [r8, #4]
  40ace8:	9324      	str	r3, [sp, #144]	; 0x90
  40acea:	f300 8169 	bgt.w	40afc0 <_vfprintf_r+0x13dc>
  40acee:	f108 0808 	add.w	r8, r8, #8
  40acf2:	2900      	cmp	r1, #0
  40acf4:	f2c0 8136 	blt.w	40af64 <_vfprintf_r+0x1380>
  40acf8:	9911      	ldr	r1, [sp, #68]	; 0x44
  40acfa:	f8c8 7000 	str.w	r7, [r8]
  40acfe:	3301      	adds	r3, #1
  40ad00:	188c      	adds	r4, r1, r2
  40ad02:	2b07      	cmp	r3, #7
  40ad04:	9425      	str	r4, [sp, #148]	; 0x94
  40ad06:	9324      	str	r3, [sp, #144]	; 0x90
  40ad08:	f8c8 1004 	str.w	r1, [r8, #4]
  40ad0c:	f77f a96d 	ble.w	409fea <_vfprintf_r+0x406>
  40ad10:	e4e0      	b.n	40a6d4 <_vfprintf_r+0xaf0>
  40ad12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40ad14:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40ad16:	6813      	ldr	r3, [r2, #0]
  40ad18:	17cd      	asrs	r5, r1, #31
  40ad1a:	4608      	mov	r0, r1
  40ad1c:	3204      	adds	r2, #4
  40ad1e:	4629      	mov	r1, r5
  40ad20:	920e      	str	r2, [sp, #56]	; 0x38
  40ad22:	e9c3 0100 	strd	r0, r1, [r3]
  40ad26:	f7fe bfa9 	b.w	409c7c <_vfprintf_r+0x98>
  40ad2a:	46da      	mov	sl, fp
  40ad2c:	f7ff bbc4 	b.w	40a4b8 <_vfprintf_r+0x8d4>
  40ad30:	aa23      	add	r2, sp, #140	; 0x8c
  40ad32:	990a      	ldr	r1, [sp, #40]	; 0x28
  40ad34:	9808      	ldr	r0, [sp, #32]
  40ad36:	f003 f8cb 	bl	40ded0 <__sprint_r>
  40ad3a:	2800      	cmp	r0, #0
  40ad3c:	f47f acdc 	bne.w	40a6f8 <_vfprintf_r+0xb14>
  40ad40:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40ad42:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40ad46:	f7ff bbfd 	b.w	40a544 <_vfprintf_r+0x960>
  40ad4a:	4638      	mov	r0, r7
  40ad4c:	9409      	str	r4, [sp, #36]	; 0x24
  40ad4e:	f7fd fa17 	bl	408180 <strlen>
  40ad52:	950e      	str	r5, [sp, #56]	; 0x38
  40ad54:	900d      	str	r0, [sp, #52]	; 0x34
  40ad56:	f8cd b018 	str.w	fp, [sp, #24]
  40ad5a:	4603      	mov	r3, r0
  40ad5c:	f7ff ba36 	b.w	40a1cc <_vfprintf_r+0x5e8>
  40ad60:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40ad64:	2300      	movs	r3, #0
  40ad66:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  40ad6a:	9309      	str	r3, [sp, #36]	; 0x24
  40ad6c:	f7ff b86f 	b.w	409e4e <_vfprintf_r+0x26a>
  40ad70:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40ad72:	9310      	str	r3, [sp, #64]	; 0x40
  40ad74:	461a      	mov	r2, r3
  40ad76:	3303      	adds	r3, #3
  40ad78:	db04      	blt.n	40ad84 <_vfprintf_r+0x11a0>
  40ad7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40ad7c:	4619      	mov	r1, r3
  40ad7e:	4291      	cmp	r1, r2
  40ad80:	f6bf af45 	bge.w	40ac0e <_vfprintf_r+0x102a>
  40ad84:	3e02      	subs	r6, #2
  40ad86:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40ad88:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  40ad8c:	3b01      	subs	r3, #1
  40ad8e:	2b00      	cmp	r3, #0
  40ad90:	931d      	str	r3, [sp, #116]	; 0x74
  40ad92:	bfbd      	ittte	lt
  40ad94:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
  40ad96:	f1c3 0301 	rsblt	r3, r3, #1
  40ad9a:	222d      	movlt	r2, #45	; 0x2d
  40ad9c:	222b      	movge	r2, #43	; 0x2b
  40ad9e:	2b09      	cmp	r3, #9
  40ada0:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  40ada4:	f340 813e 	ble.w	40b024 <_vfprintf_r+0x1440>
  40ada8:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
  40adac:	4620      	mov	r0, r4
  40adae:	4d73      	ldr	r5, [pc, #460]	; (40af7c <_vfprintf_r+0x1398>)
  40adb0:	e000      	b.n	40adb4 <_vfprintf_r+0x11d0>
  40adb2:	4610      	mov	r0, r2
  40adb4:	fb85 1203 	smull	r1, r2, r5, r3
  40adb8:	17d9      	asrs	r1, r3, #31
  40adba:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  40adbe:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40adc2:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  40adc6:	3230      	adds	r2, #48	; 0x30
  40adc8:	2909      	cmp	r1, #9
  40adca:	f800 2c01 	strb.w	r2, [r0, #-1]
  40adce:	460b      	mov	r3, r1
  40add0:	f100 32ff 	add.w	r2, r0, #4294967295
  40add4:	dced      	bgt.n	40adb2 <_vfprintf_r+0x11ce>
  40add6:	3330      	adds	r3, #48	; 0x30
  40add8:	3802      	subs	r0, #2
  40adda:	b2d9      	uxtb	r1, r3
  40addc:	4284      	cmp	r4, r0
  40adde:	f802 1c01 	strb.w	r1, [r2, #-1]
  40ade2:	f240 8190 	bls.w	40b106 <_vfprintf_r+0x1522>
  40ade6:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
  40adea:	4613      	mov	r3, r2
  40adec:	e001      	b.n	40adf2 <_vfprintf_r+0x120e>
  40adee:	f813 1b01 	ldrb.w	r1, [r3], #1
  40adf2:	f800 1b01 	strb.w	r1, [r0], #1
  40adf6:	42a3      	cmp	r3, r4
  40adf8:	d1f9      	bne.n	40adee <_vfprintf_r+0x120a>
  40adfa:	3301      	adds	r3, #1
  40adfc:	1a9b      	subs	r3, r3, r2
  40adfe:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  40ae02:	4413      	add	r3, r2
  40ae04:	aa1f      	add	r2, sp, #124	; 0x7c
  40ae06:	1a9b      	subs	r3, r3, r2
  40ae08:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40ae0a:	9319      	str	r3, [sp, #100]	; 0x64
  40ae0c:	2a01      	cmp	r2, #1
  40ae0e:	4413      	add	r3, r2
  40ae10:	930d      	str	r3, [sp, #52]	; 0x34
  40ae12:	f340 8145 	ble.w	40b0a0 <_vfprintf_r+0x14bc>
  40ae16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40ae18:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40ae1a:	4413      	add	r3, r2
  40ae1c:	930d      	str	r3, [sp, #52]	; 0x34
  40ae1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40ae22:	9307      	str	r3, [sp, #28]
  40ae24:	2300      	movs	r3, #0
  40ae26:	9310      	str	r3, [sp, #64]	; 0x40
  40ae28:	e700      	b.n	40ac2c <_vfprintf_r+0x1048>
  40ae2a:	aa23      	add	r2, sp, #140	; 0x8c
  40ae2c:	990a      	ldr	r1, [sp, #40]	; 0x28
  40ae2e:	9808      	ldr	r0, [sp, #32]
  40ae30:	f003 f84e 	bl	40ded0 <__sprint_r>
  40ae34:	2800      	cmp	r0, #0
  40ae36:	f47f ac5f 	bne.w	40a6f8 <_vfprintf_r+0xb14>
  40ae3a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40ae3c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40ae40:	e4d1      	b.n	40a7e6 <_vfprintf_r+0xc02>
  40ae42:	4623      	mov	r3, r4
  40ae44:	e6d5      	b.n	40abf2 <_vfprintf_r+0x100e>
  40ae46:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40ae48:	9710      	str	r7, [sp, #64]	; 0x40
  40ae4a:	2b06      	cmp	r3, #6
  40ae4c:	bf28      	it	cs
  40ae4e:	2306      	movcs	r3, #6
  40ae50:	9709      	str	r7, [sp, #36]	; 0x24
  40ae52:	46ba      	mov	sl, r7
  40ae54:	9307      	str	r3, [sp, #28]
  40ae56:	950e      	str	r5, [sp, #56]	; 0x38
  40ae58:	f8cd b018 	str.w	fp, [sp, #24]
  40ae5c:	930d      	str	r3, [sp, #52]	; 0x34
  40ae5e:	4f48      	ldr	r7, [pc, #288]	; (40af80 <_vfprintf_r+0x139c>)
  40ae60:	f7fe bff2 	b.w	409e48 <_vfprintf_r+0x264>
  40ae64:	aa23      	add	r2, sp, #140	; 0x8c
  40ae66:	990a      	ldr	r1, [sp, #40]	; 0x28
  40ae68:	9808      	ldr	r0, [sp, #32]
  40ae6a:	f003 f831 	bl	40ded0 <__sprint_r>
  40ae6e:	2800      	cmp	r0, #0
  40ae70:	f47f ac42 	bne.w	40a6f8 <_vfprintf_r+0xb14>
  40ae74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40ae76:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40ae78:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40ae7a:	1ad3      	subs	r3, r2, r3
  40ae7c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40ae80:	e5b6      	b.n	40a9f0 <_vfprintf_r+0xe0c>
  40ae82:	46a2      	mov	sl, r4
  40ae84:	f7ff bb18 	b.w	40a4b8 <_vfprintf_r+0x8d4>
  40ae88:	a821      	add	r0, sp, #132	; 0x84
  40ae8a:	a91e      	add	r1, sp, #120	; 0x78
  40ae8c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40ae8e:	9004      	str	r0, [sp, #16]
  40ae90:	9103      	str	r1, [sp, #12]
  40ae92:	a81d      	add	r0, sp, #116	; 0x74
  40ae94:	2103      	movs	r1, #3
  40ae96:	9002      	str	r0, [sp, #8]
  40ae98:	9a07      	ldr	r2, [sp, #28]
  40ae9a:	9501      	str	r5, [sp, #4]
  40ae9c:	4653      	mov	r3, sl
  40ae9e:	9100      	str	r1, [sp, #0]
  40aea0:	9808      	ldr	r0, [sp, #32]
  40aea2:	f000 fa95 	bl	40b3d0 <_dtoa_r>
  40aea6:	4607      	mov	r7, r0
  40aea8:	1944      	adds	r4, r0, r5
  40aeaa:	783b      	ldrb	r3, [r7, #0]
  40aeac:	2b30      	cmp	r3, #48	; 0x30
  40aeae:	f000 80ca 	beq.w	40b046 <_vfprintf_r+0x1462>
  40aeb2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40aeb4:	442c      	add	r4, r5
  40aeb6:	e689      	b.n	40abcc <_vfprintf_r+0xfe8>
  40aeb8:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40aeba:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40aebc:	4413      	add	r3, r2
  40aebe:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40aec0:	930d      	str	r3, [sp, #52]	; 0x34
  40aec2:	2a00      	cmp	r2, #0
  40aec4:	f340 80e4 	ble.w	40b090 <_vfprintf_r+0x14ac>
  40aec8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40aecc:	9307      	str	r3, [sp, #28]
  40aece:	2667      	movs	r6, #103	; 0x67
  40aed0:	e6ac      	b.n	40ac2c <_vfprintf_r+0x1048>
  40aed2:	2b00      	cmp	r3, #0
  40aed4:	f340 80fb 	ble.w	40b0ce <_vfprintf_r+0x14ea>
  40aed8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40aeda:	2a00      	cmp	r2, #0
  40aedc:	f040 80ce 	bne.w	40b07c <_vfprintf_r+0x1498>
  40aee0:	f01b 0f01 	tst.w	fp, #1
  40aee4:	f040 80ca 	bne.w	40b07c <_vfprintf_r+0x1498>
  40aee8:	9307      	str	r3, [sp, #28]
  40aeea:	930d      	str	r3, [sp, #52]	; 0x34
  40aeec:	e69e      	b.n	40ac2c <_vfprintf_r+0x1048>
  40aeee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40aef0:	9307      	str	r3, [sp, #28]
  40aef2:	930d      	str	r3, [sp, #52]	; 0x34
  40aef4:	9009      	str	r0, [sp, #36]	; 0x24
  40aef6:	950e      	str	r5, [sp, #56]	; 0x38
  40aef8:	f8cd b018 	str.w	fp, [sp, #24]
  40aefc:	9010      	str	r0, [sp, #64]	; 0x40
  40aefe:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  40af02:	f7fe bfa1 	b.w	409e48 <_vfprintf_r+0x264>
  40af06:	aa23      	add	r2, sp, #140	; 0x8c
  40af08:	990a      	ldr	r1, [sp, #40]	; 0x28
  40af0a:	9808      	ldr	r0, [sp, #32]
  40af0c:	f002 ffe0 	bl	40ded0 <__sprint_r>
  40af10:	2800      	cmp	r0, #0
  40af12:	f47f abf1 	bne.w	40a6f8 <_vfprintf_r+0xb14>
  40af16:	991d      	ldr	r1, [sp, #116]	; 0x74
  40af18:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40af1a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40af1e:	e6d0      	b.n	40acc2 <_vfprintf_r+0x10de>
  40af20:	2e47      	cmp	r6, #71	; 0x47
  40af22:	f47f ae52 	bne.w	40abca <_vfprintf_r+0xfe6>
  40af26:	f01b 0f01 	tst.w	fp, #1
  40af2a:	f000 80da 	beq.w	40b0e2 <_vfprintf_r+0x14fe>
  40af2e:	2e46      	cmp	r6, #70	; 0x46
  40af30:	eb07 0405 	add.w	r4, r7, r5
  40af34:	d0b9      	beq.n	40aeaa <_vfprintf_r+0x12c6>
  40af36:	e649      	b.n	40abcc <_vfprintf_r+0xfe8>
  40af38:	a821      	add	r0, sp, #132	; 0x84
  40af3a:	a91e      	add	r1, sp, #120	; 0x78
  40af3c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40af3e:	9004      	str	r0, [sp, #16]
  40af40:	9103      	str	r1, [sp, #12]
  40af42:	a81d      	add	r0, sp, #116	; 0x74
  40af44:	2103      	movs	r1, #3
  40af46:	9002      	str	r0, [sp, #8]
  40af48:	9a07      	ldr	r2, [sp, #28]
  40af4a:	9401      	str	r4, [sp, #4]
  40af4c:	4653      	mov	r3, sl
  40af4e:	9100      	str	r1, [sp, #0]
  40af50:	9808      	ldr	r0, [sp, #32]
  40af52:	f000 fa3d 	bl	40b3d0 <_dtoa_r>
  40af56:	4625      	mov	r5, r4
  40af58:	4607      	mov	r7, r0
  40af5a:	e7e8      	b.n	40af2e <_vfprintf_r+0x134a>
  40af5c:	2300      	movs	r3, #0
  40af5e:	9309      	str	r3, [sp, #36]	; 0x24
  40af60:	f7fe bec1 	b.w	409ce6 <_vfprintf_r+0x102>
  40af64:	424e      	negs	r6, r1
  40af66:	3110      	adds	r1, #16
  40af68:	4d06      	ldr	r5, [pc, #24]	; (40af84 <_vfprintf_r+0x13a0>)
  40af6a:	da43      	bge.n	40aff4 <_vfprintf_r+0x1410>
  40af6c:	2410      	movs	r4, #16
  40af6e:	f8dd a020 	ldr.w	sl, [sp, #32]
  40af72:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40af76:	e00c      	b.n	40af92 <_vfprintf_r+0x13ae>
  40af78:	0040ed1c 	.word	0x0040ed1c
  40af7c:	66666667 	.word	0x66666667
  40af80:	0040ed14 	.word	0x0040ed14
  40af84:	0040ed50 	.word	0x0040ed50
  40af88:	f108 0808 	add.w	r8, r8, #8
  40af8c:	3e10      	subs	r6, #16
  40af8e:	2e10      	cmp	r6, #16
  40af90:	dd30      	ble.n	40aff4 <_vfprintf_r+0x1410>
  40af92:	3301      	adds	r3, #1
  40af94:	3210      	adds	r2, #16
  40af96:	2b07      	cmp	r3, #7
  40af98:	9225      	str	r2, [sp, #148]	; 0x94
  40af9a:	9324      	str	r3, [sp, #144]	; 0x90
  40af9c:	f8c8 5000 	str.w	r5, [r8]
  40afa0:	f8c8 4004 	str.w	r4, [r8, #4]
  40afa4:	ddf0      	ble.n	40af88 <_vfprintf_r+0x13a4>
  40afa6:	aa23      	add	r2, sp, #140	; 0x8c
  40afa8:	4659      	mov	r1, fp
  40afaa:	4650      	mov	r0, sl
  40afac:	f002 ff90 	bl	40ded0 <__sprint_r>
  40afb0:	2800      	cmp	r0, #0
  40afb2:	f47f aeba 	bne.w	40ad2a <_vfprintf_r+0x1146>
  40afb6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40afb8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40afba:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40afbe:	e7e5      	b.n	40af8c <_vfprintf_r+0x13a8>
  40afc0:	aa23      	add	r2, sp, #140	; 0x8c
  40afc2:	990a      	ldr	r1, [sp, #40]	; 0x28
  40afc4:	9808      	ldr	r0, [sp, #32]
  40afc6:	f002 ff83 	bl	40ded0 <__sprint_r>
  40afca:	2800      	cmp	r0, #0
  40afcc:	f47f ab94 	bne.w	40a6f8 <_vfprintf_r+0xb14>
  40afd0:	991d      	ldr	r1, [sp, #116]	; 0x74
  40afd2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40afd4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40afd6:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40afda:	e68a      	b.n	40acf2 <_vfprintf_r+0x110e>
  40afdc:	9808      	ldr	r0, [sp, #32]
  40afde:	aa23      	add	r2, sp, #140	; 0x8c
  40afe0:	4651      	mov	r1, sl
  40afe2:	f002 ff75 	bl	40ded0 <__sprint_r>
  40afe6:	2800      	cmp	r0, #0
  40afe8:	f43f aa64 	beq.w	40a4b4 <_vfprintf_r+0x8d0>
  40afec:	f7ff ba64 	b.w	40a4b8 <_vfprintf_r+0x8d4>
  40aff0:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40aff2:	e5fe      	b.n	40abf2 <_vfprintf_r+0x100e>
  40aff4:	3301      	adds	r3, #1
  40aff6:	4432      	add	r2, r6
  40aff8:	2b07      	cmp	r3, #7
  40affa:	e888 0060 	stmia.w	r8, {r5, r6}
  40affe:	9225      	str	r2, [sp, #148]	; 0x94
  40b000:	9324      	str	r3, [sp, #144]	; 0x90
  40b002:	f108 0808 	add.w	r8, r8, #8
  40b006:	f77f ae77 	ble.w	40acf8 <_vfprintf_r+0x1114>
  40b00a:	aa23      	add	r2, sp, #140	; 0x8c
  40b00c:	990a      	ldr	r1, [sp, #40]	; 0x28
  40b00e:	9808      	ldr	r0, [sp, #32]
  40b010:	f002 ff5e 	bl	40ded0 <__sprint_r>
  40b014:	2800      	cmp	r0, #0
  40b016:	f47f ab6f 	bne.w	40a6f8 <_vfprintf_r+0xb14>
  40b01a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40b01c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40b01e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40b022:	e669      	b.n	40acf8 <_vfprintf_r+0x1114>
  40b024:	3330      	adds	r3, #48	; 0x30
  40b026:	2230      	movs	r2, #48	; 0x30
  40b028:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  40b02c:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  40b030:	ab20      	add	r3, sp, #128	; 0x80
  40b032:	e6e7      	b.n	40ae04 <_vfprintf_r+0x1220>
  40b034:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40b036:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40b038:	4413      	add	r3, r2
  40b03a:	930d      	str	r3, [sp, #52]	; 0x34
  40b03c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40b040:	9307      	str	r3, [sp, #28]
  40b042:	2667      	movs	r6, #103	; 0x67
  40b044:	e5f2      	b.n	40ac2c <_vfprintf_r+0x1048>
  40b046:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40b048:	9807      	ldr	r0, [sp, #28]
  40b04a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40b04c:	4651      	mov	r1, sl
  40b04e:	f003 fa45 	bl	40e4dc <__aeabi_dcmpeq>
  40b052:	2800      	cmp	r0, #0
  40b054:	f47f af2d 	bne.w	40aeb2 <_vfprintf_r+0x12ce>
  40b058:	f1c5 0501 	rsb	r5, r5, #1
  40b05c:	951d      	str	r5, [sp, #116]	; 0x74
  40b05e:	442c      	add	r4, r5
  40b060:	e5b4      	b.n	40abcc <_vfprintf_r+0xfe8>
  40b062:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40b064:	4f33      	ldr	r7, [pc, #204]	; (40b134 <_vfprintf_r+0x1550>)
  40b066:	2b00      	cmp	r3, #0
  40b068:	bfb6      	itet	lt
  40b06a:	f04f 0a2d 	movlt.w	sl, #45	; 0x2d
  40b06e:	f89d a06f 	ldrbge.w	sl, [sp, #111]	; 0x6f
  40b072:	f88d a06f 	strblt.w	sl, [sp, #111]	; 0x6f
  40b076:	4b30      	ldr	r3, [pc, #192]	; (40b138 <_vfprintf_r+0x1554>)
  40b078:	f7ff b9d1 	b.w	40a41e <_vfprintf_r+0x83a>
  40b07c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40b07e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40b080:	4413      	add	r3, r2
  40b082:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40b084:	441a      	add	r2, r3
  40b086:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40b08a:	920d      	str	r2, [sp, #52]	; 0x34
  40b08c:	9307      	str	r3, [sp, #28]
  40b08e:	e5cd      	b.n	40ac2c <_vfprintf_r+0x1048>
  40b090:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40b092:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40b094:	f1c3 0301 	rsb	r3, r3, #1
  40b098:	441a      	add	r2, r3
  40b09a:	4613      	mov	r3, r2
  40b09c:	920d      	str	r2, [sp, #52]	; 0x34
  40b09e:	e713      	b.n	40aec8 <_vfprintf_r+0x12e4>
  40b0a0:	f01b 0301 	ands.w	r3, fp, #1
  40b0a4:	9310      	str	r3, [sp, #64]	; 0x40
  40b0a6:	f47f aeb6 	bne.w	40ae16 <_vfprintf_r+0x1232>
  40b0aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b0ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40b0b0:	9307      	str	r3, [sp, #28]
  40b0b2:	e5bb      	b.n	40ac2c <_vfprintf_r+0x1048>
  40b0b4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40b0b6:	f899 6001 	ldrb.w	r6, [r9, #1]
  40b0ba:	6823      	ldr	r3, [r4, #0]
  40b0bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
  40b0c0:	9309      	str	r3, [sp, #36]	; 0x24
  40b0c2:	4623      	mov	r3, r4
  40b0c4:	3304      	adds	r3, #4
  40b0c6:	4681      	mov	r9, r0
  40b0c8:	930e      	str	r3, [sp, #56]	; 0x38
  40b0ca:	f7fe be0a 	b.w	409ce2 <_vfprintf_r+0xfe>
  40b0ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b0d0:	b913      	cbnz	r3, 40b0d8 <_vfprintf_r+0x14f4>
  40b0d2:	f01b 0f01 	tst.w	fp, #1
  40b0d6:	d002      	beq.n	40b0de <_vfprintf_r+0x14fa>
  40b0d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40b0da:	3301      	adds	r3, #1
  40b0dc:	e7d1      	b.n	40b082 <_vfprintf_r+0x149e>
  40b0de:	2301      	movs	r3, #1
  40b0e0:	e702      	b.n	40aee8 <_vfprintf_r+0x1304>
  40b0e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40b0e4:	1bdb      	subs	r3, r3, r7
  40b0e6:	9311      	str	r3, [sp, #68]	; 0x44
  40b0e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b0ea:	2b47      	cmp	r3, #71	; 0x47
  40b0ec:	f43f ae40 	beq.w	40ad70 <_vfprintf_r+0x118c>
  40b0f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40b0f2:	9310      	str	r3, [sp, #64]	; 0x40
  40b0f4:	e647      	b.n	40ad86 <_vfprintf_r+0x11a2>
  40b0f6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40b0fa:	f7ff b81d 	b.w	40a138 <_vfprintf_r+0x554>
  40b0fe:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40b102:	f7ff b918 	b.w	40a336 <_vfprintf_r+0x752>
  40b106:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  40b10a:	e67b      	b.n	40ae04 <_vfprintf_r+0x1220>
  40b10c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40b110:	f7ff b866 	b.w	40a1e0 <_vfprintf_r+0x5fc>
  40b114:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40b118:	f7ff b9ac 	b.w	40a474 <_vfprintf_r+0x890>
  40b11c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40b120:	f7ff b934 	b.w	40a38c <_vfprintf_r+0x7a8>
  40b124:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40b128:	f7ff b8b0 	b.w	40a28c <_vfprintf_r+0x6a8>
  40b12c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40b130:	f7ff b945 	b.w	40a3be <_vfprintf_r+0x7da>
  40b134:	0040ece8 	.word	0x0040ece8
  40b138:	0040ece4 	.word	0x0040ece4

0040b13c <__sbprintf>:
  40b13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b140:	460c      	mov	r4, r1
  40b142:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40b146:	8989      	ldrh	r1, [r1, #12]
  40b148:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40b14a:	89e5      	ldrh	r5, [r4, #14]
  40b14c:	9619      	str	r6, [sp, #100]	; 0x64
  40b14e:	f021 0102 	bic.w	r1, r1, #2
  40b152:	4606      	mov	r6, r0
  40b154:	69e0      	ldr	r0, [r4, #28]
  40b156:	f8ad 100c 	strh.w	r1, [sp, #12]
  40b15a:	4617      	mov	r7, r2
  40b15c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40b160:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40b162:	f8ad 500e 	strh.w	r5, [sp, #14]
  40b166:	4698      	mov	r8, r3
  40b168:	ad1a      	add	r5, sp, #104	; 0x68
  40b16a:	2300      	movs	r3, #0
  40b16c:	9007      	str	r0, [sp, #28]
  40b16e:	a816      	add	r0, sp, #88	; 0x58
  40b170:	9209      	str	r2, [sp, #36]	; 0x24
  40b172:	9306      	str	r3, [sp, #24]
  40b174:	9500      	str	r5, [sp, #0]
  40b176:	9504      	str	r5, [sp, #16]
  40b178:	9102      	str	r1, [sp, #8]
  40b17a:	9105      	str	r1, [sp, #20]
  40b17c:	f001 fc82 	bl	40ca84 <__retarget_lock_init_recursive>
  40b180:	4643      	mov	r3, r8
  40b182:	463a      	mov	r2, r7
  40b184:	4669      	mov	r1, sp
  40b186:	4630      	mov	r0, r6
  40b188:	f7fe fd2c 	bl	409be4 <_vfprintf_r>
  40b18c:	1e05      	subs	r5, r0, #0
  40b18e:	db07      	blt.n	40b1a0 <__sbprintf+0x64>
  40b190:	4630      	mov	r0, r6
  40b192:	4669      	mov	r1, sp
  40b194:	f001 f8e6 	bl	40c364 <_fflush_r>
  40b198:	2800      	cmp	r0, #0
  40b19a:	bf18      	it	ne
  40b19c:	f04f 35ff 	movne.w	r5, #4294967295
  40b1a0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40b1a4:	065b      	lsls	r3, r3, #25
  40b1a6:	d503      	bpl.n	40b1b0 <__sbprintf+0x74>
  40b1a8:	89a3      	ldrh	r3, [r4, #12]
  40b1aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b1ae:	81a3      	strh	r3, [r4, #12]
  40b1b0:	9816      	ldr	r0, [sp, #88]	; 0x58
  40b1b2:	f001 fc69 	bl	40ca88 <__retarget_lock_close_recursive>
  40b1b6:	4628      	mov	r0, r5
  40b1b8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  40b1bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040b1c0 <__swsetup_r>:
  40b1c0:	b538      	push	{r3, r4, r5, lr}
  40b1c2:	4b30      	ldr	r3, [pc, #192]	; (40b284 <__swsetup_r+0xc4>)
  40b1c4:	681b      	ldr	r3, [r3, #0]
  40b1c6:	4605      	mov	r5, r0
  40b1c8:	460c      	mov	r4, r1
  40b1ca:	b113      	cbz	r3, 40b1d2 <__swsetup_r+0x12>
  40b1cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40b1ce:	2a00      	cmp	r2, #0
  40b1d0:	d038      	beq.n	40b244 <__swsetup_r+0x84>
  40b1d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40b1d6:	b293      	uxth	r3, r2
  40b1d8:	0718      	lsls	r0, r3, #28
  40b1da:	d50c      	bpl.n	40b1f6 <__swsetup_r+0x36>
  40b1dc:	6920      	ldr	r0, [r4, #16]
  40b1de:	b1a8      	cbz	r0, 40b20c <__swsetup_r+0x4c>
  40b1e0:	f013 0201 	ands.w	r2, r3, #1
  40b1e4:	d01e      	beq.n	40b224 <__swsetup_r+0x64>
  40b1e6:	6963      	ldr	r3, [r4, #20]
  40b1e8:	2200      	movs	r2, #0
  40b1ea:	425b      	negs	r3, r3
  40b1ec:	61a3      	str	r3, [r4, #24]
  40b1ee:	60a2      	str	r2, [r4, #8]
  40b1f0:	b1f0      	cbz	r0, 40b230 <__swsetup_r+0x70>
  40b1f2:	2000      	movs	r0, #0
  40b1f4:	bd38      	pop	{r3, r4, r5, pc}
  40b1f6:	06d9      	lsls	r1, r3, #27
  40b1f8:	d53c      	bpl.n	40b274 <__swsetup_r+0xb4>
  40b1fa:	0758      	lsls	r0, r3, #29
  40b1fc:	d426      	bmi.n	40b24c <__swsetup_r+0x8c>
  40b1fe:	6920      	ldr	r0, [r4, #16]
  40b200:	f042 0308 	orr.w	r3, r2, #8
  40b204:	81a3      	strh	r3, [r4, #12]
  40b206:	b29b      	uxth	r3, r3
  40b208:	2800      	cmp	r0, #0
  40b20a:	d1e9      	bne.n	40b1e0 <__swsetup_r+0x20>
  40b20c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40b210:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40b214:	d0e4      	beq.n	40b1e0 <__swsetup_r+0x20>
  40b216:	4628      	mov	r0, r5
  40b218:	4621      	mov	r1, r4
  40b21a:	f001 fc69 	bl	40caf0 <__smakebuf_r>
  40b21e:	89a3      	ldrh	r3, [r4, #12]
  40b220:	6920      	ldr	r0, [r4, #16]
  40b222:	e7dd      	b.n	40b1e0 <__swsetup_r+0x20>
  40b224:	0799      	lsls	r1, r3, #30
  40b226:	bf58      	it	pl
  40b228:	6962      	ldrpl	r2, [r4, #20]
  40b22a:	60a2      	str	r2, [r4, #8]
  40b22c:	2800      	cmp	r0, #0
  40b22e:	d1e0      	bne.n	40b1f2 <__swsetup_r+0x32>
  40b230:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b234:	061a      	lsls	r2, r3, #24
  40b236:	d5dd      	bpl.n	40b1f4 <__swsetup_r+0x34>
  40b238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b23c:	81a3      	strh	r3, [r4, #12]
  40b23e:	f04f 30ff 	mov.w	r0, #4294967295
  40b242:	bd38      	pop	{r3, r4, r5, pc}
  40b244:	4618      	mov	r0, r3
  40b246:	f001 f8e5 	bl	40c414 <__sinit>
  40b24a:	e7c2      	b.n	40b1d2 <__swsetup_r+0x12>
  40b24c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40b24e:	b151      	cbz	r1, 40b266 <__swsetup_r+0xa6>
  40b250:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40b254:	4299      	cmp	r1, r3
  40b256:	d004      	beq.n	40b262 <__swsetup_r+0xa2>
  40b258:	4628      	mov	r0, r5
  40b25a:	f001 f97d 	bl	40c558 <_free_r>
  40b25e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40b262:	2300      	movs	r3, #0
  40b264:	6323      	str	r3, [r4, #48]	; 0x30
  40b266:	2300      	movs	r3, #0
  40b268:	6920      	ldr	r0, [r4, #16]
  40b26a:	6063      	str	r3, [r4, #4]
  40b26c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40b270:	6020      	str	r0, [r4, #0]
  40b272:	e7c5      	b.n	40b200 <__swsetup_r+0x40>
  40b274:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40b278:	2309      	movs	r3, #9
  40b27a:	602b      	str	r3, [r5, #0]
  40b27c:	f04f 30ff 	mov.w	r0, #4294967295
  40b280:	81a2      	strh	r2, [r4, #12]
  40b282:	bd38      	pop	{r3, r4, r5, pc}
  40b284:	20400064 	.word	0x20400064

0040b288 <register_fini>:
  40b288:	4b02      	ldr	r3, [pc, #8]	; (40b294 <register_fini+0xc>)
  40b28a:	b113      	cbz	r3, 40b292 <register_fini+0xa>
  40b28c:	4802      	ldr	r0, [pc, #8]	; (40b298 <register_fini+0x10>)
  40b28e:	f000 b805 	b.w	40b29c <atexit>
  40b292:	4770      	bx	lr
  40b294:	00000000 	.word	0x00000000
  40b298:	0040c485 	.word	0x0040c485

0040b29c <atexit>:
  40b29c:	2300      	movs	r3, #0
  40b29e:	4601      	mov	r1, r0
  40b2a0:	461a      	mov	r2, r3
  40b2a2:	4618      	mov	r0, r3
  40b2a4:	f002 be34 	b.w	40df10 <__register_exitproc>

0040b2a8 <quorem>:
  40b2a8:	6902      	ldr	r2, [r0, #16]
  40b2aa:	690b      	ldr	r3, [r1, #16]
  40b2ac:	4293      	cmp	r3, r2
  40b2ae:	f300 808d 	bgt.w	40b3cc <quorem+0x124>
  40b2b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b2b6:	f103 38ff 	add.w	r8, r3, #4294967295
  40b2ba:	f101 0714 	add.w	r7, r1, #20
  40b2be:	f100 0b14 	add.w	fp, r0, #20
  40b2c2:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40b2c6:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  40b2ca:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40b2ce:	b083      	sub	sp, #12
  40b2d0:	3201      	adds	r2, #1
  40b2d2:	fbb3 f9f2 	udiv	r9, r3, r2
  40b2d6:	eb0b 0304 	add.w	r3, fp, r4
  40b2da:	9400      	str	r4, [sp, #0]
  40b2dc:	eb07 0a04 	add.w	sl, r7, r4
  40b2e0:	9301      	str	r3, [sp, #4]
  40b2e2:	f1b9 0f00 	cmp.w	r9, #0
  40b2e6:	d039      	beq.n	40b35c <quorem+0xb4>
  40b2e8:	2500      	movs	r5, #0
  40b2ea:	462e      	mov	r6, r5
  40b2ec:	46bc      	mov	ip, r7
  40b2ee:	46de      	mov	lr, fp
  40b2f0:	f85c 4b04 	ldr.w	r4, [ip], #4
  40b2f4:	f8de 3000 	ldr.w	r3, [lr]
  40b2f8:	b2a2      	uxth	r2, r4
  40b2fa:	fb09 5502 	mla	r5, r9, r2, r5
  40b2fe:	0c22      	lsrs	r2, r4, #16
  40b300:	0c2c      	lsrs	r4, r5, #16
  40b302:	fb09 4202 	mla	r2, r9, r2, r4
  40b306:	b2ad      	uxth	r5, r5
  40b308:	1b75      	subs	r5, r6, r5
  40b30a:	b296      	uxth	r6, r2
  40b30c:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  40b310:	fa15 f383 	uxtah	r3, r5, r3
  40b314:	eb06 4623 	add.w	r6, r6, r3, asr #16
  40b318:	b29b      	uxth	r3, r3
  40b31a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40b31e:	45e2      	cmp	sl, ip
  40b320:	ea4f 4512 	mov.w	r5, r2, lsr #16
  40b324:	f84e 3b04 	str.w	r3, [lr], #4
  40b328:	ea4f 4626 	mov.w	r6, r6, asr #16
  40b32c:	d2e0      	bcs.n	40b2f0 <quorem+0x48>
  40b32e:	9b00      	ldr	r3, [sp, #0]
  40b330:	f85b 3003 	ldr.w	r3, [fp, r3]
  40b334:	b993      	cbnz	r3, 40b35c <quorem+0xb4>
  40b336:	9c01      	ldr	r4, [sp, #4]
  40b338:	1f23      	subs	r3, r4, #4
  40b33a:	459b      	cmp	fp, r3
  40b33c:	d20c      	bcs.n	40b358 <quorem+0xb0>
  40b33e:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40b342:	b94b      	cbnz	r3, 40b358 <quorem+0xb0>
  40b344:	f1a4 0308 	sub.w	r3, r4, #8
  40b348:	e002      	b.n	40b350 <quorem+0xa8>
  40b34a:	681a      	ldr	r2, [r3, #0]
  40b34c:	3b04      	subs	r3, #4
  40b34e:	b91a      	cbnz	r2, 40b358 <quorem+0xb0>
  40b350:	459b      	cmp	fp, r3
  40b352:	f108 38ff 	add.w	r8, r8, #4294967295
  40b356:	d3f8      	bcc.n	40b34a <quorem+0xa2>
  40b358:	f8c0 8010 	str.w	r8, [r0, #16]
  40b35c:	4604      	mov	r4, r0
  40b35e:	f002 f98d 	bl	40d67c <__mcmp>
  40b362:	2800      	cmp	r0, #0
  40b364:	db2e      	blt.n	40b3c4 <quorem+0x11c>
  40b366:	f109 0901 	add.w	r9, r9, #1
  40b36a:	465d      	mov	r5, fp
  40b36c:	2300      	movs	r3, #0
  40b36e:	f857 1b04 	ldr.w	r1, [r7], #4
  40b372:	6828      	ldr	r0, [r5, #0]
  40b374:	b28a      	uxth	r2, r1
  40b376:	1a9a      	subs	r2, r3, r2
  40b378:	0c0b      	lsrs	r3, r1, #16
  40b37a:	fa12 f280 	uxtah	r2, r2, r0
  40b37e:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  40b382:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40b386:	b292      	uxth	r2, r2
  40b388:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40b38c:	45ba      	cmp	sl, r7
  40b38e:	f845 2b04 	str.w	r2, [r5], #4
  40b392:	ea4f 4323 	mov.w	r3, r3, asr #16
  40b396:	d2ea      	bcs.n	40b36e <quorem+0xc6>
  40b398:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  40b39c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  40b3a0:	b982      	cbnz	r2, 40b3c4 <quorem+0x11c>
  40b3a2:	1f1a      	subs	r2, r3, #4
  40b3a4:	4593      	cmp	fp, r2
  40b3a6:	d20b      	bcs.n	40b3c0 <quorem+0x118>
  40b3a8:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40b3ac:	b942      	cbnz	r2, 40b3c0 <quorem+0x118>
  40b3ae:	3b08      	subs	r3, #8
  40b3b0:	e002      	b.n	40b3b8 <quorem+0x110>
  40b3b2:	681a      	ldr	r2, [r3, #0]
  40b3b4:	3b04      	subs	r3, #4
  40b3b6:	b91a      	cbnz	r2, 40b3c0 <quorem+0x118>
  40b3b8:	459b      	cmp	fp, r3
  40b3ba:	f108 38ff 	add.w	r8, r8, #4294967295
  40b3be:	d3f8      	bcc.n	40b3b2 <quorem+0x10a>
  40b3c0:	f8c4 8010 	str.w	r8, [r4, #16]
  40b3c4:	4648      	mov	r0, r9
  40b3c6:	b003      	add	sp, #12
  40b3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b3cc:	2000      	movs	r0, #0
  40b3ce:	4770      	bx	lr

0040b3d0 <_dtoa_r>:
  40b3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b3d4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40b3d6:	b09b      	sub	sp, #108	; 0x6c
  40b3d8:	4604      	mov	r4, r0
  40b3da:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  40b3dc:	4692      	mov	sl, r2
  40b3de:	469b      	mov	fp, r3
  40b3e0:	b141      	cbz	r1, 40b3f4 <_dtoa_r+0x24>
  40b3e2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40b3e4:	604a      	str	r2, [r1, #4]
  40b3e6:	2301      	movs	r3, #1
  40b3e8:	4093      	lsls	r3, r2
  40b3ea:	608b      	str	r3, [r1, #8]
  40b3ec:	f001 ff6e 	bl	40d2cc <_Bfree>
  40b3f0:	2300      	movs	r3, #0
  40b3f2:	6423      	str	r3, [r4, #64]	; 0x40
  40b3f4:	f1bb 0f00 	cmp.w	fp, #0
  40b3f8:	465d      	mov	r5, fp
  40b3fa:	db35      	blt.n	40b468 <_dtoa_r+0x98>
  40b3fc:	2300      	movs	r3, #0
  40b3fe:	6033      	str	r3, [r6, #0]
  40b400:	4b9d      	ldr	r3, [pc, #628]	; (40b678 <_dtoa_r+0x2a8>)
  40b402:	43ab      	bics	r3, r5
  40b404:	d015      	beq.n	40b432 <_dtoa_r+0x62>
  40b406:	4650      	mov	r0, sl
  40b408:	4659      	mov	r1, fp
  40b40a:	2200      	movs	r2, #0
  40b40c:	2300      	movs	r3, #0
  40b40e:	f003 f865 	bl	40e4dc <__aeabi_dcmpeq>
  40b412:	4680      	mov	r8, r0
  40b414:	2800      	cmp	r0, #0
  40b416:	d02d      	beq.n	40b474 <_dtoa_r+0xa4>
  40b418:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40b41a:	2301      	movs	r3, #1
  40b41c:	6013      	str	r3, [r2, #0]
  40b41e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40b420:	2b00      	cmp	r3, #0
  40b422:	f000 80bd 	beq.w	40b5a0 <_dtoa_r+0x1d0>
  40b426:	4895      	ldr	r0, [pc, #596]	; (40b67c <_dtoa_r+0x2ac>)
  40b428:	6018      	str	r0, [r3, #0]
  40b42a:	3801      	subs	r0, #1
  40b42c:	b01b      	add	sp, #108	; 0x6c
  40b42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b432:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40b434:	f242 730f 	movw	r3, #9999	; 0x270f
  40b438:	6013      	str	r3, [r2, #0]
  40b43a:	f1ba 0f00 	cmp.w	sl, #0
  40b43e:	d10d      	bne.n	40b45c <_dtoa_r+0x8c>
  40b440:	f3c5 0513 	ubfx	r5, r5, #0, #20
  40b444:	b955      	cbnz	r5, 40b45c <_dtoa_r+0x8c>
  40b446:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40b448:	488d      	ldr	r0, [pc, #564]	; (40b680 <_dtoa_r+0x2b0>)
  40b44a:	2b00      	cmp	r3, #0
  40b44c:	d0ee      	beq.n	40b42c <_dtoa_r+0x5c>
  40b44e:	f100 0308 	add.w	r3, r0, #8
  40b452:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  40b454:	6013      	str	r3, [r2, #0]
  40b456:	b01b      	add	sp, #108	; 0x6c
  40b458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b45c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40b45e:	4889      	ldr	r0, [pc, #548]	; (40b684 <_dtoa_r+0x2b4>)
  40b460:	2b00      	cmp	r3, #0
  40b462:	d0e3      	beq.n	40b42c <_dtoa_r+0x5c>
  40b464:	1cc3      	adds	r3, r0, #3
  40b466:	e7f4      	b.n	40b452 <_dtoa_r+0x82>
  40b468:	2301      	movs	r3, #1
  40b46a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  40b46e:	6033      	str	r3, [r6, #0]
  40b470:	46ab      	mov	fp, r5
  40b472:	e7c5      	b.n	40b400 <_dtoa_r+0x30>
  40b474:	aa18      	add	r2, sp, #96	; 0x60
  40b476:	ab19      	add	r3, sp, #100	; 0x64
  40b478:	9201      	str	r2, [sp, #4]
  40b47a:	9300      	str	r3, [sp, #0]
  40b47c:	4652      	mov	r2, sl
  40b47e:	465b      	mov	r3, fp
  40b480:	4620      	mov	r0, r4
  40b482:	f002 f99b 	bl	40d7bc <__d2b>
  40b486:	0d2b      	lsrs	r3, r5, #20
  40b488:	4681      	mov	r9, r0
  40b48a:	d071      	beq.n	40b570 <_dtoa_r+0x1a0>
  40b48c:	f3cb 0213 	ubfx	r2, fp, #0, #20
  40b490:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  40b494:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40b496:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  40b49a:	4650      	mov	r0, sl
  40b49c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  40b4a0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40b4a4:	2200      	movs	r2, #0
  40b4a6:	4b78      	ldr	r3, [pc, #480]	; (40b688 <_dtoa_r+0x2b8>)
  40b4a8:	f7fb ff64 	bl	407374 <__aeabi_dsub>
  40b4ac:	a36c      	add	r3, pc, #432	; (adr r3, 40b660 <_dtoa_r+0x290>)
  40b4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
  40b4b2:	f7fc f913 	bl	4076dc <__aeabi_dmul>
  40b4b6:	a36c      	add	r3, pc, #432	; (adr r3, 40b668 <_dtoa_r+0x298>)
  40b4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
  40b4bc:	f7fb ff5c 	bl	407378 <__adddf3>
  40b4c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40b4c4:	4630      	mov	r0, r6
  40b4c6:	f7fc f8a3 	bl	407610 <__aeabi_i2d>
  40b4ca:	a369      	add	r3, pc, #420	; (adr r3, 40b670 <_dtoa_r+0x2a0>)
  40b4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
  40b4d0:	f7fc f904 	bl	4076dc <__aeabi_dmul>
  40b4d4:	4602      	mov	r2, r0
  40b4d6:	460b      	mov	r3, r1
  40b4d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40b4dc:	f7fb ff4c 	bl	407378 <__adddf3>
  40b4e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40b4e4:	f003 f842 	bl	40e56c <__aeabi_d2iz>
  40b4e8:	2200      	movs	r2, #0
  40b4ea:	9002      	str	r0, [sp, #8]
  40b4ec:	2300      	movs	r3, #0
  40b4ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40b4f2:	f002 fffd 	bl	40e4f0 <__aeabi_dcmplt>
  40b4f6:	2800      	cmp	r0, #0
  40b4f8:	f040 8173 	bne.w	40b7e2 <_dtoa_r+0x412>
  40b4fc:	9d02      	ldr	r5, [sp, #8]
  40b4fe:	2d16      	cmp	r5, #22
  40b500:	f200 815d 	bhi.w	40b7be <_dtoa_r+0x3ee>
  40b504:	4b61      	ldr	r3, [pc, #388]	; (40b68c <_dtoa_r+0x2bc>)
  40b506:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40b50a:	e9d3 0100 	ldrd	r0, r1, [r3]
  40b50e:	4652      	mov	r2, sl
  40b510:	465b      	mov	r3, fp
  40b512:	f003 f80b 	bl	40e52c <__aeabi_dcmpgt>
  40b516:	2800      	cmp	r0, #0
  40b518:	f000 81c5 	beq.w	40b8a6 <_dtoa_r+0x4d6>
  40b51c:	1e6b      	subs	r3, r5, #1
  40b51e:	9302      	str	r3, [sp, #8]
  40b520:	2300      	movs	r3, #0
  40b522:	930e      	str	r3, [sp, #56]	; 0x38
  40b524:	1bbf      	subs	r7, r7, r6
  40b526:	1e7b      	subs	r3, r7, #1
  40b528:	9306      	str	r3, [sp, #24]
  40b52a:	f100 8154 	bmi.w	40b7d6 <_dtoa_r+0x406>
  40b52e:	2300      	movs	r3, #0
  40b530:	9308      	str	r3, [sp, #32]
  40b532:	9b02      	ldr	r3, [sp, #8]
  40b534:	2b00      	cmp	r3, #0
  40b536:	f2c0 8145 	blt.w	40b7c4 <_dtoa_r+0x3f4>
  40b53a:	9a06      	ldr	r2, [sp, #24]
  40b53c:	930d      	str	r3, [sp, #52]	; 0x34
  40b53e:	4611      	mov	r1, r2
  40b540:	4419      	add	r1, r3
  40b542:	2300      	movs	r3, #0
  40b544:	9106      	str	r1, [sp, #24]
  40b546:	930c      	str	r3, [sp, #48]	; 0x30
  40b548:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40b54a:	2b09      	cmp	r3, #9
  40b54c:	d82a      	bhi.n	40b5a4 <_dtoa_r+0x1d4>
  40b54e:	2b05      	cmp	r3, #5
  40b550:	f340 865b 	ble.w	40c20a <_dtoa_r+0xe3a>
  40b554:	3b04      	subs	r3, #4
  40b556:	9324      	str	r3, [sp, #144]	; 0x90
  40b558:	2500      	movs	r5, #0
  40b55a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40b55c:	3b02      	subs	r3, #2
  40b55e:	2b03      	cmp	r3, #3
  40b560:	f200 8642 	bhi.w	40c1e8 <_dtoa_r+0xe18>
  40b564:	e8df f013 	tbh	[pc, r3, lsl #1]
  40b568:	02c903d4 	.word	0x02c903d4
  40b56c:	046103df 	.word	0x046103df
  40b570:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40b572:	9e19      	ldr	r6, [sp, #100]	; 0x64
  40b574:	443e      	add	r6, r7
  40b576:	f206 4332 	addw	r3, r6, #1074	; 0x432
  40b57a:	2b20      	cmp	r3, #32
  40b57c:	f340 818e 	ble.w	40b89c <_dtoa_r+0x4cc>
  40b580:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40b584:	f206 4012 	addw	r0, r6, #1042	; 0x412
  40b588:	409d      	lsls	r5, r3
  40b58a:	fa2a f000 	lsr.w	r0, sl, r0
  40b58e:	4328      	orrs	r0, r5
  40b590:	f7fc f82e 	bl	4075f0 <__aeabi_ui2d>
  40b594:	2301      	movs	r3, #1
  40b596:	3e01      	subs	r6, #1
  40b598:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40b59c:	9314      	str	r3, [sp, #80]	; 0x50
  40b59e:	e781      	b.n	40b4a4 <_dtoa_r+0xd4>
  40b5a0:	483b      	ldr	r0, [pc, #236]	; (40b690 <_dtoa_r+0x2c0>)
  40b5a2:	e743      	b.n	40b42c <_dtoa_r+0x5c>
  40b5a4:	2100      	movs	r1, #0
  40b5a6:	6461      	str	r1, [r4, #68]	; 0x44
  40b5a8:	4620      	mov	r0, r4
  40b5aa:	9125      	str	r1, [sp, #148]	; 0x94
  40b5ac:	f001 fe68 	bl	40d280 <_Balloc>
  40b5b0:	f04f 33ff 	mov.w	r3, #4294967295
  40b5b4:	930a      	str	r3, [sp, #40]	; 0x28
  40b5b6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40b5b8:	930f      	str	r3, [sp, #60]	; 0x3c
  40b5ba:	2301      	movs	r3, #1
  40b5bc:	9004      	str	r0, [sp, #16]
  40b5be:	6420      	str	r0, [r4, #64]	; 0x40
  40b5c0:	9224      	str	r2, [sp, #144]	; 0x90
  40b5c2:	930b      	str	r3, [sp, #44]	; 0x2c
  40b5c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40b5c6:	2b00      	cmp	r3, #0
  40b5c8:	f2c0 80d9 	blt.w	40b77e <_dtoa_r+0x3ae>
  40b5cc:	9a02      	ldr	r2, [sp, #8]
  40b5ce:	2a0e      	cmp	r2, #14
  40b5d0:	f300 80d5 	bgt.w	40b77e <_dtoa_r+0x3ae>
  40b5d4:	4b2d      	ldr	r3, [pc, #180]	; (40b68c <_dtoa_r+0x2bc>)
  40b5d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40b5da:	e9d3 2300 	ldrd	r2, r3, [r3]
  40b5de:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40b5e2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40b5e4:	2b00      	cmp	r3, #0
  40b5e6:	f2c0 83ba 	blt.w	40bd5e <_dtoa_r+0x98e>
  40b5ea:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  40b5ee:	4650      	mov	r0, sl
  40b5f0:	462a      	mov	r2, r5
  40b5f2:	4633      	mov	r3, r6
  40b5f4:	4659      	mov	r1, fp
  40b5f6:	f7fc f99b 	bl	407930 <__aeabi_ddiv>
  40b5fa:	f002 ffb7 	bl	40e56c <__aeabi_d2iz>
  40b5fe:	4680      	mov	r8, r0
  40b600:	f7fc f806 	bl	407610 <__aeabi_i2d>
  40b604:	462a      	mov	r2, r5
  40b606:	4633      	mov	r3, r6
  40b608:	f7fc f868 	bl	4076dc <__aeabi_dmul>
  40b60c:	460b      	mov	r3, r1
  40b60e:	4602      	mov	r2, r0
  40b610:	4659      	mov	r1, fp
  40b612:	4650      	mov	r0, sl
  40b614:	f7fb feae 	bl	407374 <__aeabi_dsub>
  40b618:	9d04      	ldr	r5, [sp, #16]
  40b61a:	f108 0330 	add.w	r3, r8, #48	; 0x30
  40b61e:	702b      	strb	r3, [r5, #0]
  40b620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b622:	2b01      	cmp	r3, #1
  40b624:	4606      	mov	r6, r0
  40b626:	460f      	mov	r7, r1
  40b628:	f105 0501 	add.w	r5, r5, #1
  40b62c:	d068      	beq.n	40b700 <_dtoa_r+0x330>
  40b62e:	2200      	movs	r2, #0
  40b630:	4b18      	ldr	r3, [pc, #96]	; (40b694 <_dtoa_r+0x2c4>)
  40b632:	f7fc f853 	bl	4076dc <__aeabi_dmul>
  40b636:	2200      	movs	r2, #0
  40b638:	2300      	movs	r3, #0
  40b63a:	4606      	mov	r6, r0
  40b63c:	460f      	mov	r7, r1
  40b63e:	f002 ff4d 	bl	40e4dc <__aeabi_dcmpeq>
  40b642:	2800      	cmp	r0, #0
  40b644:	f040 8088 	bne.w	40b758 <_dtoa_r+0x388>
  40b648:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  40b64c:	f04f 0a00 	mov.w	sl, #0
  40b650:	f8df b040 	ldr.w	fp, [pc, #64]	; 40b694 <_dtoa_r+0x2c4>
  40b654:	940c      	str	r4, [sp, #48]	; 0x30
  40b656:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40b65a:	e028      	b.n	40b6ae <_dtoa_r+0x2de>
  40b65c:	f3af 8000 	nop.w
  40b660:	636f4361 	.word	0x636f4361
  40b664:	3fd287a7 	.word	0x3fd287a7
  40b668:	8b60c8b3 	.word	0x8b60c8b3
  40b66c:	3fc68a28 	.word	0x3fc68a28
  40b670:	509f79fb 	.word	0x509f79fb
  40b674:	3fd34413 	.word	0x3fd34413
  40b678:	7ff00000 	.word	0x7ff00000
  40b67c:	0040ed1d 	.word	0x0040ed1d
  40b680:	0040ed60 	.word	0x0040ed60
  40b684:	0040ed6c 	.word	0x0040ed6c
  40b688:	3ff80000 	.word	0x3ff80000
  40b68c:	0040ed98 	.word	0x0040ed98
  40b690:	0040ed1c 	.word	0x0040ed1c
  40b694:	40240000 	.word	0x40240000
  40b698:	f7fc f820 	bl	4076dc <__aeabi_dmul>
  40b69c:	2200      	movs	r2, #0
  40b69e:	2300      	movs	r3, #0
  40b6a0:	4606      	mov	r6, r0
  40b6a2:	460f      	mov	r7, r1
  40b6a4:	f002 ff1a 	bl	40e4dc <__aeabi_dcmpeq>
  40b6a8:	2800      	cmp	r0, #0
  40b6aa:	f040 83c1 	bne.w	40be30 <_dtoa_r+0xa60>
  40b6ae:	4642      	mov	r2, r8
  40b6b0:	464b      	mov	r3, r9
  40b6b2:	4630      	mov	r0, r6
  40b6b4:	4639      	mov	r1, r7
  40b6b6:	f7fc f93b 	bl	407930 <__aeabi_ddiv>
  40b6ba:	f002 ff57 	bl	40e56c <__aeabi_d2iz>
  40b6be:	4604      	mov	r4, r0
  40b6c0:	f7fb ffa6 	bl	407610 <__aeabi_i2d>
  40b6c4:	4642      	mov	r2, r8
  40b6c6:	464b      	mov	r3, r9
  40b6c8:	f7fc f808 	bl	4076dc <__aeabi_dmul>
  40b6cc:	4602      	mov	r2, r0
  40b6ce:	460b      	mov	r3, r1
  40b6d0:	4630      	mov	r0, r6
  40b6d2:	4639      	mov	r1, r7
  40b6d4:	f7fb fe4e 	bl	407374 <__aeabi_dsub>
  40b6d8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40b6dc:	9e04      	ldr	r6, [sp, #16]
  40b6de:	f805 eb01 	strb.w	lr, [r5], #1
  40b6e2:	eba5 0e06 	sub.w	lr, r5, r6
  40b6e6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40b6e8:	45b6      	cmp	lr, r6
  40b6ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40b6ee:	4652      	mov	r2, sl
  40b6f0:	465b      	mov	r3, fp
  40b6f2:	d1d1      	bne.n	40b698 <_dtoa_r+0x2c8>
  40b6f4:	46a0      	mov	r8, r4
  40b6f6:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40b6fa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40b6fc:	4606      	mov	r6, r0
  40b6fe:	460f      	mov	r7, r1
  40b700:	4632      	mov	r2, r6
  40b702:	463b      	mov	r3, r7
  40b704:	4630      	mov	r0, r6
  40b706:	4639      	mov	r1, r7
  40b708:	f7fb fe36 	bl	407378 <__adddf3>
  40b70c:	4606      	mov	r6, r0
  40b70e:	460f      	mov	r7, r1
  40b710:	4602      	mov	r2, r0
  40b712:	460b      	mov	r3, r1
  40b714:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40b718:	f002 feea 	bl	40e4f0 <__aeabi_dcmplt>
  40b71c:	b948      	cbnz	r0, 40b732 <_dtoa_r+0x362>
  40b71e:	4632      	mov	r2, r6
  40b720:	463b      	mov	r3, r7
  40b722:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40b726:	f002 fed9 	bl	40e4dc <__aeabi_dcmpeq>
  40b72a:	b1a8      	cbz	r0, 40b758 <_dtoa_r+0x388>
  40b72c:	f018 0f01 	tst.w	r8, #1
  40b730:	d012      	beq.n	40b758 <_dtoa_r+0x388>
  40b732:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40b736:	9a04      	ldr	r2, [sp, #16]
  40b738:	1e6b      	subs	r3, r5, #1
  40b73a:	e004      	b.n	40b746 <_dtoa_r+0x376>
  40b73c:	429a      	cmp	r2, r3
  40b73e:	f000 8401 	beq.w	40bf44 <_dtoa_r+0xb74>
  40b742:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  40b746:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40b74a:	f103 0501 	add.w	r5, r3, #1
  40b74e:	d0f5      	beq.n	40b73c <_dtoa_r+0x36c>
  40b750:	f108 0801 	add.w	r8, r8, #1
  40b754:	f883 8000 	strb.w	r8, [r3]
  40b758:	4649      	mov	r1, r9
  40b75a:	4620      	mov	r0, r4
  40b75c:	f001 fdb6 	bl	40d2cc <_Bfree>
  40b760:	2200      	movs	r2, #0
  40b762:	9b02      	ldr	r3, [sp, #8]
  40b764:	702a      	strb	r2, [r5, #0]
  40b766:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40b768:	3301      	adds	r3, #1
  40b76a:	6013      	str	r3, [r2, #0]
  40b76c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40b76e:	2b00      	cmp	r3, #0
  40b770:	f000 839e 	beq.w	40beb0 <_dtoa_r+0xae0>
  40b774:	9804      	ldr	r0, [sp, #16]
  40b776:	601d      	str	r5, [r3, #0]
  40b778:	b01b      	add	sp, #108	; 0x6c
  40b77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b77e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40b780:	2a00      	cmp	r2, #0
  40b782:	d03e      	beq.n	40b802 <_dtoa_r+0x432>
  40b784:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40b786:	2a01      	cmp	r2, #1
  40b788:	f340 8311 	ble.w	40bdae <_dtoa_r+0x9de>
  40b78c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b78e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40b790:	1e5f      	subs	r7, r3, #1
  40b792:	42ba      	cmp	r2, r7
  40b794:	f2c0 838f 	blt.w	40beb6 <_dtoa_r+0xae6>
  40b798:	1bd7      	subs	r7, r2, r7
  40b79a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b79c:	2b00      	cmp	r3, #0
  40b79e:	f2c0 848b 	blt.w	40c0b8 <_dtoa_r+0xce8>
  40b7a2:	9d08      	ldr	r5, [sp, #32]
  40b7a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b7a6:	9a08      	ldr	r2, [sp, #32]
  40b7a8:	441a      	add	r2, r3
  40b7aa:	9208      	str	r2, [sp, #32]
  40b7ac:	9a06      	ldr	r2, [sp, #24]
  40b7ae:	2101      	movs	r1, #1
  40b7b0:	441a      	add	r2, r3
  40b7b2:	4620      	mov	r0, r4
  40b7b4:	9206      	str	r2, [sp, #24]
  40b7b6:	f001 fe23 	bl	40d400 <__i2b>
  40b7ba:	4606      	mov	r6, r0
  40b7bc:	e024      	b.n	40b808 <_dtoa_r+0x438>
  40b7be:	2301      	movs	r3, #1
  40b7c0:	930e      	str	r3, [sp, #56]	; 0x38
  40b7c2:	e6af      	b.n	40b524 <_dtoa_r+0x154>
  40b7c4:	9a08      	ldr	r2, [sp, #32]
  40b7c6:	9b02      	ldr	r3, [sp, #8]
  40b7c8:	1ad2      	subs	r2, r2, r3
  40b7ca:	425b      	negs	r3, r3
  40b7cc:	930c      	str	r3, [sp, #48]	; 0x30
  40b7ce:	2300      	movs	r3, #0
  40b7d0:	9208      	str	r2, [sp, #32]
  40b7d2:	930d      	str	r3, [sp, #52]	; 0x34
  40b7d4:	e6b8      	b.n	40b548 <_dtoa_r+0x178>
  40b7d6:	f1c7 0301 	rsb	r3, r7, #1
  40b7da:	9308      	str	r3, [sp, #32]
  40b7dc:	2300      	movs	r3, #0
  40b7de:	9306      	str	r3, [sp, #24]
  40b7e0:	e6a7      	b.n	40b532 <_dtoa_r+0x162>
  40b7e2:	9d02      	ldr	r5, [sp, #8]
  40b7e4:	4628      	mov	r0, r5
  40b7e6:	f7fb ff13 	bl	407610 <__aeabi_i2d>
  40b7ea:	4602      	mov	r2, r0
  40b7ec:	460b      	mov	r3, r1
  40b7ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40b7f2:	f002 fe73 	bl	40e4dc <__aeabi_dcmpeq>
  40b7f6:	2800      	cmp	r0, #0
  40b7f8:	f47f ae80 	bne.w	40b4fc <_dtoa_r+0x12c>
  40b7fc:	1e6b      	subs	r3, r5, #1
  40b7fe:	9302      	str	r3, [sp, #8]
  40b800:	e67c      	b.n	40b4fc <_dtoa_r+0x12c>
  40b802:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40b804:	9d08      	ldr	r5, [sp, #32]
  40b806:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  40b808:	2d00      	cmp	r5, #0
  40b80a:	dd0c      	ble.n	40b826 <_dtoa_r+0x456>
  40b80c:	9906      	ldr	r1, [sp, #24]
  40b80e:	2900      	cmp	r1, #0
  40b810:	460b      	mov	r3, r1
  40b812:	dd08      	ble.n	40b826 <_dtoa_r+0x456>
  40b814:	42a9      	cmp	r1, r5
  40b816:	9a08      	ldr	r2, [sp, #32]
  40b818:	bfa8      	it	ge
  40b81a:	462b      	movge	r3, r5
  40b81c:	1ad2      	subs	r2, r2, r3
  40b81e:	1aed      	subs	r5, r5, r3
  40b820:	1acb      	subs	r3, r1, r3
  40b822:	9208      	str	r2, [sp, #32]
  40b824:	9306      	str	r3, [sp, #24]
  40b826:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40b828:	b1d3      	cbz	r3, 40b860 <_dtoa_r+0x490>
  40b82a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40b82c:	2b00      	cmp	r3, #0
  40b82e:	f000 82b7 	beq.w	40bda0 <_dtoa_r+0x9d0>
  40b832:	2f00      	cmp	r7, #0
  40b834:	dd10      	ble.n	40b858 <_dtoa_r+0x488>
  40b836:	4631      	mov	r1, r6
  40b838:	463a      	mov	r2, r7
  40b83a:	4620      	mov	r0, r4
  40b83c:	f001 fe7c 	bl	40d538 <__pow5mult>
  40b840:	464a      	mov	r2, r9
  40b842:	4601      	mov	r1, r0
  40b844:	4606      	mov	r6, r0
  40b846:	4620      	mov	r0, r4
  40b848:	f001 fde4 	bl	40d414 <__multiply>
  40b84c:	4649      	mov	r1, r9
  40b84e:	4680      	mov	r8, r0
  40b850:	4620      	mov	r0, r4
  40b852:	f001 fd3b 	bl	40d2cc <_Bfree>
  40b856:	46c1      	mov	r9, r8
  40b858:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40b85a:	1bda      	subs	r2, r3, r7
  40b85c:	f040 82a1 	bne.w	40bda2 <_dtoa_r+0x9d2>
  40b860:	2101      	movs	r1, #1
  40b862:	4620      	mov	r0, r4
  40b864:	f001 fdcc 	bl	40d400 <__i2b>
  40b868:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b86a:	2b00      	cmp	r3, #0
  40b86c:	4680      	mov	r8, r0
  40b86e:	dd1c      	ble.n	40b8aa <_dtoa_r+0x4da>
  40b870:	4601      	mov	r1, r0
  40b872:	461a      	mov	r2, r3
  40b874:	4620      	mov	r0, r4
  40b876:	f001 fe5f 	bl	40d538 <__pow5mult>
  40b87a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40b87c:	2b01      	cmp	r3, #1
  40b87e:	4680      	mov	r8, r0
  40b880:	f340 8254 	ble.w	40bd2c <_dtoa_r+0x95c>
  40b884:	2300      	movs	r3, #0
  40b886:	930c      	str	r3, [sp, #48]	; 0x30
  40b888:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40b88c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  40b890:	6918      	ldr	r0, [r3, #16]
  40b892:	f001 fd65 	bl	40d360 <__hi0bits>
  40b896:	f1c0 0020 	rsb	r0, r0, #32
  40b89a:	e010      	b.n	40b8be <_dtoa_r+0x4ee>
  40b89c:	f1c3 0520 	rsb	r5, r3, #32
  40b8a0:	fa0a f005 	lsl.w	r0, sl, r5
  40b8a4:	e674      	b.n	40b590 <_dtoa_r+0x1c0>
  40b8a6:	900e      	str	r0, [sp, #56]	; 0x38
  40b8a8:	e63c      	b.n	40b524 <_dtoa_r+0x154>
  40b8aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40b8ac:	2b01      	cmp	r3, #1
  40b8ae:	f340 8287 	ble.w	40bdc0 <_dtoa_r+0x9f0>
  40b8b2:	2300      	movs	r3, #0
  40b8b4:	930c      	str	r3, [sp, #48]	; 0x30
  40b8b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b8b8:	2001      	movs	r0, #1
  40b8ba:	2b00      	cmp	r3, #0
  40b8bc:	d1e4      	bne.n	40b888 <_dtoa_r+0x4b8>
  40b8be:	9a06      	ldr	r2, [sp, #24]
  40b8c0:	4410      	add	r0, r2
  40b8c2:	f010 001f 	ands.w	r0, r0, #31
  40b8c6:	f000 80a1 	beq.w	40ba0c <_dtoa_r+0x63c>
  40b8ca:	f1c0 0320 	rsb	r3, r0, #32
  40b8ce:	2b04      	cmp	r3, #4
  40b8d0:	f340 849e 	ble.w	40c210 <_dtoa_r+0xe40>
  40b8d4:	9b08      	ldr	r3, [sp, #32]
  40b8d6:	f1c0 001c 	rsb	r0, r0, #28
  40b8da:	4403      	add	r3, r0
  40b8dc:	9308      	str	r3, [sp, #32]
  40b8de:	4613      	mov	r3, r2
  40b8e0:	4403      	add	r3, r0
  40b8e2:	4405      	add	r5, r0
  40b8e4:	9306      	str	r3, [sp, #24]
  40b8e6:	9b08      	ldr	r3, [sp, #32]
  40b8e8:	2b00      	cmp	r3, #0
  40b8ea:	dd05      	ble.n	40b8f8 <_dtoa_r+0x528>
  40b8ec:	4649      	mov	r1, r9
  40b8ee:	461a      	mov	r2, r3
  40b8f0:	4620      	mov	r0, r4
  40b8f2:	f001 fe71 	bl	40d5d8 <__lshift>
  40b8f6:	4681      	mov	r9, r0
  40b8f8:	9b06      	ldr	r3, [sp, #24]
  40b8fa:	2b00      	cmp	r3, #0
  40b8fc:	dd05      	ble.n	40b90a <_dtoa_r+0x53a>
  40b8fe:	4641      	mov	r1, r8
  40b900:	461a      	mov	r2, r3
  40b902:	4620      	mov	r0, r4
  40b904:	f001 fe68 	bl	40d5d8 <__lshift>
  40b908:	4680      	mov	r8, r0
  40b90a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40b90c:	2b00      	cmp	r3, #0
  40b90e:	f040 8086 	bne.w	40ba1e <_dtoa_r+0x64e>
  40b912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b914:	2b00      	cmp	r3, #0
  40b916:	f340 8266 	ble.w	40bde6 <_dtoa_r+0xa16>
  40b91a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40b91c:	2b00      	cmp	r3, #0
  40b91e:	f000 8098 	beq.w	40ba52 <_dtoa_r+0x682>
  40b922:	2d00      	cmp	r5, #0
  40b924:	dd05      	ble.n	40b932 <_dtoa_r+0x562>
  40b926:	4631      	mov	r1, r6
  40b928:	462a      	mov	r2, r5
  40b92a:	4620      	mov	r0, r4
  40b92c:	f001 fe54 	bl	40d5d8 <__lshift>
  40b930:	4606      	mov	r6, r0
  40b932:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40b934:	2b00      	cmp	r3, #0
  40b936:	f040 8337 	bne.w	40bfa8 <_dtoa_r+0xbd8>
  40b93a:	9606      	str	r6, [sp, #24]
  40b93c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b93e:	9a04      	ldr	r2, [sp, #16]
  40b940:	f8dd b018 	ldr.w	fp, [sp, #24]
  40b944:	3b01      	subs	r3, #1
  40b946:	18d3      	adds	r3, r2, r3
  40b948:	930b      	str	r3, [sp, #44]	; 0x2c
  40b94a:	f00a 0301 	and.w	r3, sl, #1
  40b94e:	930c      	str	r3, [sp, #48]	; 0x30
  40b950:	4617      	mov	r7, r2
  40b952:	46c2      	mov	sl, r8
  40b954:	4651      	mov	r1, sl
  40b956:	4648      	mov	r0, r9
  40b958:	f7ff fca6 	bl	40b2a8 <quorem>
  40b95c:	4631      	mov	r1, r6
  40b95e:	4605      	mov	r5, r0
  40b960:	4648      	mov	r0, r9
  40b962:	f001 fe8b 	bl	40d67c <__mcmp>
  40b966:	465a      	mov	r2, fp
  40b968:	900a      	str	r0, [sp, #40]	; 0x28
  40b96a:	4651      	mov	r1, sl
  40b96c:	4620      	mov	r0, r4
  40b96e:	f001 fea1 	bl	40d6b4 <__mdiff>
  40b972:	68c2      	ldr	r2, [r0, #12]
  40b974:	4680      	mov	r8, r0
  40b976:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40b97a:	2a00      	cmp	r2, #0
  40b97c:	f040 822b 	bne.w	40bdd6 <_dtoa_r+0xa06>
  40b980:	4601      	mov	r1, r0
  40b982:	4648      	mov	r0, r9
  40b984:	9308      	str	r3, [sp, #32]
  40b986:	f001 fe79 	bl	40d67c <__mcmp>
  40b98a:	4641      	mov	r1, r8
  40b98c:	9006      	str	r0, [sp, #24]
  40b98e:	4620      	mov	r0, r4
  40b990:	f001 fc9c 	bl	40d2cc <_Bfree>
  40b994:	9a06      	ldr	r2, [sp, #24]
  40b996:	9b08      	ldr	r3, [sp, #32]
  40b998:	b932      	cbnz	r2, 40b9a8 <_dtoa_r+0x5d8>
  40b99a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40b99c:	b921      	cbnz	r1, 40b9a8 <_dtoa_r+0x5d8>
  40b99e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40b9a0:	2a00      	cmp	r2, #0
  40b9a2:	f000 83ef 	beq.w	40c184 <_dtoa_r+0xdb4>
  40b9a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40b9a8:	990a      	ldr	r1, [sp, #40]	; 0x28
  40b9aa:	2900      	cmp	r1, #0
  40b9ac:	f2c0 829f 	blt.w	40beee <_dtoa_r+0xb1e>
  40b9b0:	d105      	bne.n	40b9be <_dtoa_r+0x5ee>
  40b9b2:	9924      	ldr	r1, [sp, #144]	; 0x90
  40b9b4:	b919      	cbnz	r1, 40b9be <_dtoa_r+0x5ee>
  40b9b6:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b9b8:	2900      	cmp	r1, #0
  40b9ba:	f000 8298 	beq.w	40beee <_dtoa_r+0xb1e>
  40b9be:	2a00      	cmp	r2, #0
  40b9c0:	f300 8306 	bgt.w	40bfd0 <_dtoa_r+0xc00>
  40b9c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40b9c6:	703b      	strb	r3, [r7, #0]
  40b9c8:	f107 0801 	add.w	r8, r7, #1
  40b9cc:	4297      	cmp	r7, r2
  40b9ce:	4645      	mov	r5, r8
  40b9d0:	f000 830c 	beq.w	40bfec <_dtoa_r+0xc1c>
  40b9d4:	4649      	mov	r1, r9
  40b9d6:	2300      	movs	r3, #0
  40b9d8:	220a      	movs	r2, #10
  40b9da:	4620      	mov	r0, r4
  40b9dc:	f001 fc80 	bl	40d2e0 <__multadd>
  40b9e0:	455e      	cmp	r6, fp
  40b9e2:	4681      	mov	r9, r0
  40b9e4:	4631      	mov	r1, r6
  40b9e6:	f04f 0300 	mov.w	r3, #0
  40b9ea:	f04f 020a 	mov.w	r2, #10
  40b9ee:	4620      	mov	r0, r4
  40b9f0:	f000 81eb 	beq.w	40bdca <_dtoa_r+0x9fa>
  40b9f4:	f001 fc74 	bl	40d2e0 <__multadd>
  40b9f8:	4659      	mov	r1, fp
  40b9fa:	4606      	mov	r6, r0
  40b9fc:	2300      	movs	r3, #0
  40b9fe:	220a      	movs	r2, #10
  40ba00:	4620      	mov	r0, r4
  40ba02:	f001 fc6d 	bl	40d2e0 <__multadd>
  40ba06:	4647      	mov	r7, r8
  40ba08:	4683      	mov	fp, r0
  40ba0a:	e7a3      	b.n	40b954 <_dtoa_r+0x584>
  40ba0c:	201c      	movs	r0, #28
  40ba0e:	9b08      	ldr	r3, [sp, #32]
  40ba10:	4403      	add	r3, r0
  40ba12:	9308      	str	r3, [sp, #32]
  40ba14:	9b06      	ldr	r3, [sp, #24]
  40ba16:	4403      	add	r3, r0
  40ba18:	4405      	add	r5, r0
  40ba1a:	9306      	str	r3, [sp, #24]
  40ba1c:	e763      	b.n	40b8e6 <_dtoa_r+0x516>
  40ba1e:	4641      	mov	r1, r8
  40ba20:	4648      	mov	r0, r9
  40ba22:	f001 fe2b 	bl	40d67c <__mcmp>
  40ba26:	2800      	cmp	r0, #0
  40ba28:	f6bf af73 	bge.w	40b912 <_dtoa_r+0x542>
  40ba2c:	9f02      	ldr	r7, [sp, #8]
  40ba2e:	4649      	mov	r1, r9
  40ba30:	2300      	movs	r3, #0
  40ba32:	220a      	movs	r2, #10
  40ba34:	4620      	mov	r0, r4
  40ba36:	3f01      	subs	r7, #1
  40ba38:	9702      	str	r7, [sp, #8]
  40ba3a:	f001 fc51 	bl	40d2e0 <__multadd>
  40ba3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40ba40:	4681      	mov	r9, r0
  40ba42:	2b00      	cmp	r3, #0
  40ba44:	f040 83b6 	bne.w	40c1b4 <_dtoa_r+0xde4>
  40ba48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40ba4a:	2b00      	cmp	r3, #0
  40ba4c:	f340 83bf 	ble.w	40c1ce <_dtoa_r+0xdfe>
  40ba50:	930a      	str	r3, [sp, #40]	; 0x28
  40ba52:	f8dd b010 	ldr.w	fp, [sp, #16]
  40ba56:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40ba58:	465d      	mov	r5, fp
  40ba5a:	e002      	b.n	40ba62 <_dtoa_r+0x692>
  40ba5c:	f001 fc40 	bl	40d2e0 <__multadd>
  40ba60:	4681      	mov	r9, r0
  40ba62:	4641      	mov	r1, r8
  40ba64:	4648      	mov	r0, r9
  40ba66:	f7ff fc1f 	bl	40b2a8 <quorem>
  40ba6a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40ba6e:	f805 ab01 	strb.w	sl, [r5], #1
  40ba72:	eba5 030b 	sub.w	r3, r5, fp
  40ba76:	42bb      	cmp	r3, r7
  40ba78:	f04f 020a 	mov.w	r2, #10
  40ba7c:	f04f 0300 	mov.w	r3, #0
  40ba80:	4649      	mov	r1, r9
  40ba82:	4620      	mov	r0, r4
  40ba84:	dbea      	blt.n	40ba5c <_dtoa_r+0x68c>
  40ba86:	9b04      	ldr	r3, [sp, #16]
  40ba88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40ba8a:	2a01      	cmp	r2, #1
  40ba8c:	bfac      	ite	ge
  40ba8e:	189b      	addge	r3, r3, r2
  40ba90:	3301      	addlt	r3, #1
  40ba92:	461d      	mov	r5, r3
  40ba94:	f04f 0b00 	mov.w	fp, #0
  40ba98:	4649      	mov	r1, r9
  40ba9a:	2201      	movs	r2, #1
  40ba9c:	4620      	mov	r0, r4
  40ba9e:	f001 fd9b 	bl	40d5d8 <__lshift>
  40baa2:	4641      	mov	r1, r8
  40baa4:	4681      	mov	r9, r0
  40baa6:	f001 fde9 	bl	40d67c <__mcmp>
  40baaa:	2800      	cmp	r0, #0
  40baac:	f340 823d 	ble.w	40bf2a <_dtoa_r+0xb5a>
  40bab0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40bab4:	9904      	ldr	r1, [sp, #16]
  40bab6:	1e6b      	subs	r3, r5, #1
  40bab8:	e004      	b.n	40bac4 <_dtoa_r+0x6f4>
  40baba:	428b      	cmp	r3, r1
  40babc:	f000 81ae 	beq.w	40be1c <_dtoa_r+0xa4c>
  40bac0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40bac4:	2a39      	cmp	r2, #57	; 0x39
  40bac6:	f103 0501 	add.w	r5, r3, #1
  40baca:	d0f6      	beq.n	40baba <_dtoa_r+0x6ea>
  40bacc:	3201      	adds	r2, #1
  40bace:	701a      	strb	r2, [r3, #0]
  40bad0:	4641      	mov	r1, r8
  40bad2:	4620      	mov	r0, r4
  40bad4:	f001 fbfa 	bl	40d2cc <_Bfree>
  40bad8:	2e00      	cmp	r6, #0
  40bada:	f43f ae3d 	beq.w	40b758 <_dtoa_r+0x388>
  40bade:	f1bb 0f00 	cmp.w	fp, #0
  40bae2:	d005      	beq.n	40baf0 <_dtoa_r+0x720>
  40bae4:	45b3      	cmp	fp, r6
  40bae6:	d003      	beq.n	40baf0 <_dtoa_r+0x720>
  40bae8:	4659      	mov	r1, fp
  40baea:	4620      	mov	r0, r4
  40baec:	f001 fbee 	bl	40d2cc <_Bfree>
  40baf0:	4631      	mov	r1, r6
  40baf2:	4620      	mov	r0, r4
  40baf4:	f001 fbea 	bl	40d2cc <_Bfree>
  40baf8:	e62e      	b.n	40b758 <_dtoa_r+0x388>
  40bafa:	2300      	movs	r3, #0
  40bafc:	930b      	str	r3, [sp, #44]	; 0x2c
  40bafe:	9b02      	ldr	r3, [sp, #8]
  40bb00:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40bb02:	4413      	add	r3, r2
  40bb04:	930f      	str	r3, [sp, #60]	; 0x3c
  40bb06:	3301      	adds	r3, #1
  40bb08:	2b01      	cmp	r3, #1
  40bb0a:	461f      	mov	r7, r3
  40bb0c:	461e      	mov	r6, r3
  40bb0e:	930a      	str	r3, [sp, #40]	; 0x28
  40bb10:	bfb8      	it	lt
  40bb12:	2701      	movlt	r7, #1
  40bb14:	2100      	movs	r1, #0
  40bb16:	2f17      	cmp	r7, #23
  40bb18:	6461      	str	r1, [r4, #68]	; 0x44
  40bb1a:	d90a      	bls.n	40bb32 <_dtoa_r+0x762>
  40bb1c:	2201      	movs	r2, #1
  40bb1e:	2304      	movs	r3, #4
  40bb20:	005b      	lsls	r3, r3, #1
  40bb22:	f103 0014 	add.w	r0, r3, #20
  40bb26:	4287      	cmp	r7, r0
  40bb28:	4611      	mov	r1, r2
  40bb2a:	f102 0201 	add.w	r2, r2, #1
  40bb2e:	d2f7      	bcs.n	40bb20 <_dtoa_r+0x750>
  40bb30:	6461      	str	r1, [r4, #68]	; 0x44
  40bb32:	4620      	mov	r0, r4
  40bb34:	f001 fba4 	bl	40d280 <_Balloc>
  40bb38:	2e0e      	cmp	r6, #14
  40bb3a:	9004      	str	r0, [sp, #16]
  40bb3c:	6420      	str	r0, [r4, #64]	; 0x40
  40bb3e:	f63f ad41 	bhi.w	40b5c4 <_dtoa_r+0x1f4>
  40bb42:	2d00      	cmp	r5, #0
  40bb44:	f43f ad3e 	beq.w	40b5c4 <_dtoa_r+0x1f4>
  40bb48:	9902      	ldr	r1, [sp, #8]
  40bb4a:	2900      	cmp	r1, #0
  40bb4c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  40bb50:	f340 8202 	ble.w	40bf58 <_dtoa_r+0xb88>
  40bb54:	4bb8      	ldr	r3, [pc, #736]	; (40be38 <_dtoa_r+0xa68>)
  40bb56:	f001 020f 	and.w	r2, r1, #15
  40bb5a:	110d      	asrs	r5, r1, #4
  40bb5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40bb60:	06e9      	lsls	r1, r5, #27
  40bb62:	e9d3 6700 	ldrd	r6, r7, [r3]
  40bb66:	f140 81ae 	bpl.w	40bec6 <_dtoa_r+0xaf6>
  40bb6a:	4bb4      	ldr	r3, [pc, #720]	; (40be3c <_dtoa_r+0xa6c>)
  40bb6c:	4650      	mov	r0, sl
  40bb6e:	4659      	mov	r1, fp
  40bb70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40bb74:	f7fb fedc 	bl	407930 <__aeabi_ddiv>
  40bb78:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40bb7c:	f005 050f 	and.w	r5, r5, #15
  40bb80:	f04f 0a03 	mov.w	sl, #3
  40bb84:	b18d      	cbz	r5, 40bbaa <_dtoa_r+0x7da>
  40bb86:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 40be3c <_dtoa_r+0xa6c>
  40bb8a:	07ea      	lsls	r2, r5, #31
  40bb8c:	d509      	bpl.n	40bba2 <_dtoa_r+0x7d2>
  40bb8e:	4630      	mov	r0, r6
  40bb90:	4639      	mov	r1, r7
  40bb92:	e9d8 2300 	ldrd	r2, r3, [r8]
  40bb96:	f7fb fda1 	bl	4076dc <__aeabi_dmul>
  40bb9a:	f10a 0a01 	add.w	sl, sl, #1
  40bb9e:	4606      	mov	r6, r0
  40bba0:	460f      	mov	r7, r1
  40bba2:	106d      	asrs	r5, r5, #1
  40bba4:	f108 0808 	add.w	r8, r8, #8
  40bba8:	d1ef      	bne.n	40bb8a <_dtoa_r+0x7ba>
  40bbaa:	463b      	mov	r3, r7
  40bbac:	4632      	mov	r2, r6
  40bbae:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40bbb2:	f7fb febd 	bl	407930 <__aeabi_ddiv>
  40bbb6:	4607      	mov	r7, r0
  40bbb8:	4688      	mov	r8, r1
  40bbba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40bbbc:	b143      	cbz	r3, 40bbd0 <_dtoa_r+0x800>
  40bbbe:	2200      	movs	r2, #0
  40bbc0:	4b9f      	ldr	r3, [pc, #636]	; (40be40 <_dtoa_r+0xa70>)
  40bbc2:	4638      	mov	r0, r7
  40bbc4:	4641      	mov	r1, r8
  40bbc6:	f002 fc93 	bl	40e4f0 <__aeabi_dcmplt>
  40bbca:	2800      	cmp	r0, #0
  40bbcc:	f040 8286 	bne.w	40c0dc <_dtoa_r+0xd0c>
  40bbd0:	4650      	mov	r0, sl
  40bbd2:	f7fb fd1d 	bl	407610 <__aeabi_i2d>
  40bbd6:	463a      	mov	r2, r7
  40bbd8:	4643      	mov	r3, r8
  40bbda:	f7fb fd7f 	bl	4076dc <__aeabi_dmul>
  40bbde:	4b99      	ldr	r3, [pc, #612]	; (40be44 <_dtoa_r+0xa74>)
  40bbe0:	2200      	movs	r2, #0
  40bbe2:	f7fb fbc9 	bl	407378 <__adddf3>
  40bbe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40bbe8:	4605      	mov	r5, r0
  40bbea:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40bbee:	2b00      	cmp	r3, #0
  40bbf0:	f000 813e 	beq.w	40be70 <_dtoa_r+0xaa0>
  40bbf4:	9b02      	ldr	r3, [sp, #8]
  40bbf6:	9315      	str	r3, [sp, #84]	; 0x54
  40bbf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40bbfa:	9312      	str	r3, [sp, #72]	; 0x48
  40bbfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40bbfe:	2b00      	cmp	r3, #0
  40bc00:	f000 81fa 	beq.w	40bff8 <_dtoa_r+0xc28>
  40bc04:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40bc06:	4b8c      	ldr	r3, [pc, #560]	; (40be38 <_dtoa_r+0xa68>)
  40bc08:	498f      	ldr	r1, [pc, #572]	; (40be48 <_dtoa_r+0xa78>)
  40bc0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40bc0e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40bc12:	2000      	movs	r0, #0
  40bc14:	f7fb fe8c 	bl	407930 <__aeabi_ddiv>
  40bc18:	462a      	mov	r2, r5
  40bc1a:	4633      	mov	r3, r6
  40bc1c:	f7fb fbaa 	bl	407374 <__aeabi_dsub>
  40bc20:	4682      	mov	sl, r0
  40bc22:	468b      	mov	fp, r1
  40bc24:	4638      	mov	r0, r7
  40bc26:	4641      	mov	r1, r8
  40bc28:	f002 fca0 	bl	40e56c <__aeabi_d2iz>
  40bc2c:	4605      	mov	r5, r0
  40bc2e:	f7fb fcef 	bl	407610 <__aeabi_i2d>
  40bc32:	4602      	mov	r2, r0
  40bc34:	460b      	mov	r3, r1
  40bc36:	4638      	mov	r0, r7
  40bc38:	4641      	mov	r1, r8
  40bc3a:	f7fb fb9b 	bl	407374 <__aeabi_dsub>
  40bc3e:	3530      	adds	r5, #48	; 0x30
  40bc40:	fa5f f885 	uxtb.w	r8, r5
  40bc44:	9d04      	ldr	r5, [sp, #16]
  40bc46:	4606      	mov	r6, r0
  40bc48:	460f      	mov	r7, r1
  40bc4a:	f885 8000 	strb.w	r8, [r5]
  40bc4e:	4602      	mov	r2, r0
  40bc50:	460b      	mov	r3, r1
  40bc52:	4650      	mov	r0, sl
  40bc54:	4659      	mov	r1, fp
  40bc56:	3501      	adds	r5, #1
  40bc58:	f002 fc68 	bl	40e52c <__aeabi_dcmpgt>
  40bc5c:	2800      	cmp	r0, #0
  40bc5e:	d154      	bne.n	40bd0a <_dtoa_r+0x93a>
  40bc60:	4632      	mov	r2, r6
  40bc62:	463b      	mov	r3, r7
  40bc64:	2000      	movs	r0, #0
  40bc66:	4976      	ldr	r1, [pc, #472]	; (40be40 <_dtoa_r+0xa70>)
  40bc68:	f7fb fb84 	bl	407374 <__aeabi_dsub>
  40bc6c:	4602      	mov	r2, r0
  40bc6e:	460b      	mov	r3, r1
  40bc70:	4650      	mov	r0, sl
  40bc72:	4659      	mov	r1, fp
  40bc74:	f002 fc5a 	bl	40e52c <__aeabi_dcmpgt>
  40bc78:	2800      	cmp	r0, #0
  40bc7a:	f040 8270 	bne.w	40c15e <_dtoa_r+0xd8e>
  40bc7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40bc80:	2a01      	cmp	r2, #1
  40bc82:	f000 8111 	beq.w	40bea8 <_dtoa_r+0xad8>
  40bc86:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40bc88:	9a04      	ldr	r2, [sp, #16]
  40bc8a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40bc8e:	4413      	add	r3, r2
  40bc90:	4699      	mov	r9, r3
  40bc92:	e00d      	b.n	40bcb0 <_dtoa_r+0x8e0>
  40bc94:	2000      	movs	r0, #0
  40bc96:	496a      	ldr	r1, [pc, #424]	; (40be40 <_dtoa_r+0xa70>)
  40bc98:	f7fb fb6c 	bl	407374 <__aeabi_dsub>
  40bc9c:	4652      	mov	r2, sl
  40bc9e:	465b      	mov	r3, fp
  40bca0:	f002 fc26 	bl	40e4f0 <__aeabi_dcmplt>
  40bca4:	2800      	cmp	r0, #0
  40bca6:	f040 8258 	bne.w	40c15a <_dtoa_r+0xd8a>
  40bcaa:	454d      	cmp	r5, r9
  40bcac:	f000 80fa 	beq.w	40bea4 <_dtoa_r+0xad4>
  40bcb0:	4650      	mov	r0, sl
  40bcb2:	4659      	mov	r1, fp
  40bcb4:	2200      	movs	r2, #0
  40bcb6:	4b65      	ldr	r3, [pc, #404]	; (40be4c <_dtoa_r+0xa7c>)
  40bcb8:	f7fb fd10 	bl	4076dc <__aeabi_dmul>
  40bcbc:	2200      	movs	r2, #0
  40bcbe:	4b63      	ldr	r3, [pc, #396]	; (40be4c <_dtoa_r+0xa7c>)
  40bcc0:	4682      	mov	sl, r0
  40bcc2:	468b      	mov	fp, r1
  40bcc4:	4630      	mov	r0, r6
  40bcc6:	4639      	mov	r1, r7
  40bcc8:	f7fb fd08 	bl	4076dc <__aeabi_dmul>
  40bccc:	460f      	mov	r7, r1
  40bcce:	4606      	mov	r6, r0
  40bcd0:	f002 fc4c 	bl	40e56c <__aeabi_d2iz>
  40bcd4:	4680      	mov	r8, r0
  40bcd6:	f7fb fc9b 	bl	407610 <__aeabi_i2d>
  40bcda:	4602      	mov	r2, r0
  40bcdc:	460b      	mov	r3, r1
  40bcde:	4630      	mov	r0, r6
  40bce0:	4639      	mov	r1, r7
  40bce2:	f7fb fb47 	bl	407374 <__aeabi_dsub>
  40bce6:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40bcea:	fa5f f888 	uxtb.w	r8, r8
  40bcee:	4652      	mov	r2, sl
  40bcf0:	465b      	mov	r3, fp
  40bcf2:	f805 8b01 	strb.w	r8, [r5], #1
  40bcf6:	4606      	mov	r6, r0
  40bcf8:	460f      	mov	r7, r1
  40bcfa:	f002 fbf9 	bl	40e4f0 <__aeabi_dcmplt>
  40bcfe:	4632      	mov	r2, r6
  40bd00:	463b      	mov	r3, r7
  40bd02:	2800      	cmp	r0, #0
  40bd04:	d0c6      	beq.n	40bc94 <_dtoa_r+0x8c4>
  40bd06:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40bd0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40bd0c:	9302      	str	r3, [sp, #8]
  40bd0e:	e523      	b.n	40b758 <_dtoa_r+0x388>
  40bd10:	2300      	movs	r3, #0
  40bd12:	930b      	str	r3, [sp, #44]	; 0x2c
  40bd14:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40bd16:	2b00      	cmp	r3, #0
  40bd18:	f340 80dc 	ble.w	40bed4 <_dtoa_r+0xb04>
  40bd1c:	461f      	mov	r7, r3
  40bd1e:	461e      	mov	r6, r3
  40bd20:	930f      	str	r3, [sp, #60]	; 0x3c
  40bd22:	930a      	str	r3, [sp, #40]	; 0x28
  40bd24:	e6f6      	b.n	40bb14 <_dtoa_r+0x744>
  40bd26:	2301      	movs	r3, #1
  40bd28:	930b      	str	r3, [sp, #44]	; 0x2c
  40bd2a:	e7f3      	b.n	40bd14 <_dtoa_r+0x944>
  40bd2c:	f1ba 0f00 	cmp.w	sl, #0
  40bd30:	f47f ada8 	bne.w	40b884 <_dtoa_r+0x4b4>
  40bd34:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40bd38:	2b00      	cmp	r3, #0
  40bd3a:	f47f adba 	bne.w	40b8b2 <_dtoa_r+0x4e2>
  40bd3e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40bd42:	0d3f      	lsrs	r7, r7, #20
  40bd44:	053f      	lsls	r7, r7, #20
  40bd46:	2f00      	cmp	r7, #0
  40bd48:	f000 820d 	beq.w	40c166 <_dtoa_r+0xd96>
  40bd4c:	9b08      	ldr	r3, [sp, #32]
  40bd4e:	3301      	adds	r3, #1
  40bd50:	9308      	str	r3, [sp, #32]
  40bd52:	9b06      	ldr	r3, [sp, #24]
  40bd54:	3301      	adds	r3, #1
  40bd56:	9306      	str	r3, [sp, #24]
  40bd58:	2301      	movs	r3, #1
  40bd5a:	930c      	str	r3, [sp, #48]	; 0x30
  40bd5c:	e5ab      	b.n	40b8b6 <_dtoa_r+0x4e6>
  40bd5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40bd60:	2b00      	cmp	r3, #0
  40bd62:	f73f ac42 	bgt.w	40b5ea <_dtoa_r+0x21a>
  40bd66:	f040 8221 	bne.w	40c1ac <_dtoa_r+0xddc>
  40bd6a:	2200      	movs	r2, #0
  40bd6c:	4b38      	ldr	r3, [pc, #224]	; (40be50 <_dtoa_r+0xa80>)
  40bd6e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40bd72:	f7fb fcb3 	bl	4076dc <__aeabi_dmul>
  40bd76:	4652      	mov	r2, sl
  40bd78:	465b      	mov	r3, fp
  40bd7a:	f002 fbcd 	bl	40e518 <__aeabi_dcmpge>
  40bd7e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  40bd82:	4646      	mov	r6, r8
  40bd84:	2800      	cmp	r0, #0
  40bd86:	d041      	beq.n	40be0c <_dtoa_r+0xa3c>
  40bd88:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40bd8a:	9d04      	ldr	r5, [sp, #16]
  40bd8c:	43db      	mvns	r3, r3
  40bd8e:	9302      	str	r3, [sp, #8]
  40bd90:	4641      	mov	r1, r8
  40bd92:	4620      	mov	r0, r4
  40bd94:	f001 fa9a 	bl	40d2cc <_Bfree>
  40bd98:	2e00      	cmp	r6, #0
  40bd9a:	f43f acdd 	beq.w	40b758 <_dtoa_r+0x388>
  40bd9e:	e6a7      	b.n	40baf0 <_dtoa_r+0x720>
  40bda0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40bda2:	4649      	mov	r1, r9
  40bda4:	4620      	mov	r0, r4
  40bda6:	f001 fbc7 	bl	40d538 <__pow5mult>
  40bdaa:	4681      	mov	r9, r0
  40bdac:	e558      	b.n	40b860 <_dtoa_r+0x490>
  40bdae:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40bdb0:	2a00      	cmp	r2, #0
  40bdb2:	f000 8187 	beq.w	40c0c4 <_dtoa_r+0xcf4>
  40bdb6:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40bdba:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40bdbc:	9d08      	ldr	r5, [sp, #32]
  40bdbe:	e4f2      	b.n	40b7a6 <_dtoa_r+0x3d6>
  40bdc0:	f1ba 0f00 	cmp.w	sl, #0
  40bdc4:	f47f ad75 	bne.w	40b8b2 <_dtoa_r+0x4e2>
  40bdc8:	e7b4      	b.n	40bd34 <_dtoa_r+0x964>
  40bdca:	f001 fa89 	bl	40d2e0 <__multadd>
  40bdce:	4647      	mov	r7, r8
  40bdd0:	4606      	mov	r6, r0
  40bdd2:	4683      	mov	fp, r0
  40bdd4:	e5be      	b.n	40b954 <_dtoa_r+0x584>
  40bdd6:	4601      	mov	r1, r0
  40bdd8:	4620      	mov	r0, r4
  40bdda:	9306      	str	r3, [sp, #24]
  40bddc:	f001 fa76 	bl	40d2cc <_Bfree>
  40bde0:	2201      	movs	r2, #1
  40bde2:	9b06      	ldr	r3, [sp, #24]
  40bde4:	e5e0      	b.n	40b9a8 <_dtoa_r+0x5d8>
  40bde6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40bde8:	2b02      	cmp	r3, #2
  40bdea:	f77f ad96 	ble.w	40b91a <_dtoa_r+0x54a>
  40bdee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40bdf0:	2b00      	cmp	r3, #0
  40bdf2:	d1c9      	bne.n	40bd88 <_dtoa_r+0x9b8>
  40bdf4:	4641      	mov	r1, r8
  40bdf6:	2205      	movs	r2, #5
  40bdf8:	4620      	mov	r0, r4
  40bdfa:	f001 fa71 	bl	40d2e0 <__multadd>
  40bdfe:	4601      	mov	r1, r0
  40be00:	4680      	mov	r8, r0
  40be02:	4648      	mov	r0, r9
  40be04:	f001 fc3a 	bl	40d67c <__mcmp>
  40be08:	2800      	cmp	r0, #0
  40be0a:	ddbd      	ble.n	40bd88 <_dtoa_r+0x9b8>
  40be0c:	9a02      	ldr	r2, [sp, #8]
  40be0e:	9904      	ldr	r1, [sp, #16]
  40be10:	2331      	movs	r3, #49	; 0x31
  40be12:	3201      	adds	r2, #1
  40be14:	9202      	str	r2, [sp, #8]
  40be16:	700b      	strb	r3, [r1, #0]
  40be18:	1c4d      	adds	r5, r1, #1
  40be1a:	e7b9      	b.n	40bd90 <_dtoa_r+0x9c0>
  40be1c:	9a02      	ldr	r2, [sp, #8]
  40be1e:	3201      	adds	r2, #1
  40be20:	9202      	str	r2, [sp, #8]
  40be22:	9a04      	ldr	r2, [sp, #16]
  40be24:	2331      	movs	r3, #49	; 0x31
  40be26:	7013      	strb	r3, [r2, #0]
  40be28:	e652      	b.n	40bad0 <_dtoa_r+0x700>
  40be2a:	2301      	movs	r3, #1
  40be2c:	930b      	str	r3, [sp, #44]	; 0x2c
  40be2e:	e666      	b.n	40bafe <_dtoa_r+0x72e>
  40be30:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40be34:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40be36:	e48f      	b.n	40b758 <_dtoa_r+0x388>
  40be38:	0040ed98 	.word	0x0040ed98
  40be3c:	0040ed70 	.word	0x0040ed70
  40be40:	3ff00000 	.word	0x3ff00000
  40be44:	401c0000 	.word	0x401c0000
  40be48:	3fe00000 	.word	0x3fe00000
  40be4c:	40240000 	.word	0x40240000
  40be50:	40140000 	.word	0x40140000
  40be54:	4650      	mov	r0, sl
  40be56:	f7fb fbdb 	bl	407610 <__aeabi_i2d>
  40be5a:	463a      	mov	r2, r7
  40be5c:	4643      	mov	r3, r8
  40be5e:	f7fb fc3d 	bl	4076dc <__aeabi_dmul>
  40be62:	2200      	movs	r2, #0
  40be64:	4bc1      	ldr	r3, [pc, #772]	; (40c16c <_dtoa_r+0xd9c>)
  40be66:	f7fb fa87 	bl	407378 <__adddf3>
  40be6a:	4605      	mov	r5, r0
  40be6c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40be70:	4641      	mov	r1, r8
  40be72:	2200      	movs	r2, #0
  40be74:	4bbe      	ldr	r3, [pc, #760]	; (40c170 <_dtoa_r+0xda0>)
  40be76:	4638      	mov	r0, r7
  40be78:	f7fb fa7c 	bl	407374 <__aeabi_dsub>
  40be7c:	462a      	mov	r2, r5
  40be7e:	4633      	mov	r3, r6
  40be80:	4682      	mov	sl, r0
  40be82:	468b      	mov	fp, r1
  40be84:	f002 fb52 	bl	40e52c <__aeabi_dcmpgt>
  40be88:	4680      	mov	r8, r0
  40be8a:	2800      	cmp	r0, #0
  40be8c:	f040 8110 	bne.w	40c0b0 <_dtoa_r+0xce0>
  40be90:	462a      	mov	r2, r5
  40be92:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  40be96:	4650      	mov	r0, sl
  40be98:	4659      	mov	r1, fp
  40be9a:	f002 fb29 	bl	40e4f0 <__aeabi_dcmplt>
  40be9e:	b118      	cbz	r0, 40bea8 <_dtoa_r+0xad8>
  40bea0:	4646      	mov	r6, r8
  40bea2:	e771      	b.n	40bd88 <_dtoa_r+0x9b8>
  40bea4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40bea8:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40beac:	f7ff bb8a 	b.w	40b5c4 <_dtoa_r+0x1f4>
  40beb0:	9804      	ldr	r0, [sp, #16]
  40beb2:	f7ff babb 	b.w	40b42c <_dtoa_r+0x5c>
  40beb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40beb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40beba:	970c      	str	r7, [sp, #48]	; 0x30
  40bebc:	1afb      	subs	r3, r7, r3
  40bebe:	441a      	add	r2, r3
  40bec0:	920d      	str	r2, [sp, #52]	; 0x34
  40bec2:	2700      	movs	r7, #0
  40bec4:	e469      	b.n	40b79a <_dtoa_r+0x3ca>
  40bec6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40beca:	f04f 0a02 	mov.w	sl, #2
  40bece:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40bed2:	e657      	b.n	40bb84 <_dtoa_r+0x7b4>
  40bed4:	2100      	movs	r1, #0
  40bed6:	2301      	movs	r3, #1
  40bed8:	6461      	str	r1, [r4, #68]	; 0x44
  40beda:	4620      	mov	r0, r4
  40bedc:	9325      	str	r3, [sp, #148]	; 0x94
  40bede:	f001 f9cf 	bl	40d280 <_Balloc>
  40bee2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40bee4:	9004      	str	r0, [sp, #16]
  40bee6:	6420      	str	r0, [r4, #64]	; 0x40
  40bee8:	930a      	str	r3, [sp, #40]	; 0x28
  40beea:	930f      	str	r3, [sp, #60]	; 0x3c
  40beec:	e629      	b.n	40bb42 <_dtoa_r+0x772>
  40beee:	2a00      	cmp	r2, #0
  40bef0:	46d0      	mov	r8, sl
  40bef2:	f8cd b018 	str.w	fp, [sp, #24]
  40bef6:	469a      	mov	sl, r3
  40bef8:	dd11      	ble.n	40bf1e <_dtoa_r+0xb4e>
  40befa:	4649      	mov	r1, r9
  40befc:	2201      	movs	r2, #1
  40befe:	4620      	mov	r0, r4
  40bf00:	f001 fb6a 	bl	40d5d8 <__lshift>
  40bf04:	4641      	mov	r1, r8
  40bf06:	4681      	mov	r9, r0
  40bf08:	f001 fbb8 	bl	40d67c <__mcmp>
  40bf0c:	2800      	cmp	r0, #0
  40bf0e:	f340 8146 	ble.w	40c19e <_dtoa_r+0xdce>
  40bf12:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40bf16:	f000 8106 	beq.w	40c126 <_dtoa_r+0xd56>
  40bf1a:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  40bf1e:	46b3      	mov	fp, r6
  40bf20:	f887 a000 	strb.w	sl, [r7]
  40bf24:	1c7d      	adds	r5, r7, #1
  40bf26:	9e06      	ldr	r6, [sp, #24]
  40bf28:	e5d2      	b.n	40bad0 <_dtoa_r+0x700>
  40bf2a:	d104      	bne.n	40bf36 <_dtoa_r+0xb66>
  40bf2c:	f01a 0f01 	tst.w	sl, #1
  40bf30:	d001      	beq.n	40bf36 <_dtoa_r+0xb66>
  40bf32:	e5bd      	b.n	40bab0 <_dtoa_r+0x6e0>
  40bf34:	4615      	mov	r5, r2
  40bf36:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40bf3a:	2b30      	cmp	r3, #48	; 0x30
  40bf3c:	f105 32ff 	add.w	r2, r5, #4294967295
  40bf40:	d0f8      	beq.n	40bf34 <_dtoa_r+0xb64>
  40bf42:	e5c5      	b.n	40bad0 <_dtoa_r+0x700>
  40bf44:	9904      	ldr	r1, [sp, #16]
  40bf46:	2230      	movs	r2, #48	; 0x30
  40bf48:	700a      	strb	r2, [r1, #0]
  40bf4a:	9a02      	ldr	r2, [sp, #8]
  40bf4c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40bf50:	3201      	adds	r2, #1
  40bf52:	9202      	str	r2, [sp, #8]
  40bf54:	f7ff bbfc 	b.w	40b750 <_dtoa_r+0x380>
  40bf58:	f000 80bb 	beq.w	40c0d2 <_dtoa_r+0xd02>
  40bf5c:	9b02      	ldr	r3, [sp, #8]
  40bf5e:	425d      	negs	r5, r3
  40bf60:	4b84      	ldr	r3, [pc, #528]	; (40c174 <_dtoa_r+0xda4>)
  40bf62:	f005 020f 	and.w	r2, r5, #15
  40bf66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40bf6a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40bf6e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40bf72:	f7fb fbb3 	bl	4076dc <__aeabi_dmul>
  40bf76:	112d      	asrs	r5, r5, #4
  40bf78:	4607      	mov	r7, r0
  40bf7a:	4688      	mov	r8, r1
  40bf7c:	f000 812c 	beq.w	40c1d8 <_dtoa_r+0xe08>
  40bf80:	4e7d      	ldr	r6, [pc, #500]	; (40c178 <_dtoa_r+0xda8>)
  40bf82:	f04f 0a02 	mov.w	sl, #2
  40bf86:	07eb      	lsls	r3, r5, #31
  40bf88:	d509      	bpl.n	40bf9e <_dtoa_r+0xbce>
  40bf8a:	4638      	mov	r0, r7
  40bf8c:	4641      	mov	r1, r8
  40bf8e:	e9d6 2300 	ldrd	r2, r3, [r6]
  40bf92:	f7fb fba3 	bl	4076dc <__aeabi_dmul>
  40bf96:	f10a 0a01 	add.w	sl, sl, #1
  40bf9a:	4607      	mov	r7, r0
  40bf9c:	4688      	mov	r8, r1
  40bf9e:	106d      	asrs	r5, r5, #1
  40bfa0:	f106 0608 	add.w	r6, r6, #8
  40bfa4:	d1ef      	bne.n	40bf86 <_dtoa_r+0xbb6>
  40bfa6:	e608      	b.n	40bbba <_dtoa_r+0x7ea>
  40bfa8:	6871      	ldr	r1, [r6, #4]
  40bfaa:	4620      	mov	r0, r4
  40bfac:	f001 f968 	bl	40d280 <_Balloc>
  40bfb0:	6933      	ldr	r3, [r6, #16]
  40bfb2:	3302      	adds	r3, #2
  40bfb4:	009a      	lsls	r2, r3, #2
  40bfb6:	4605      	mov	r5, r0
  40bfb8:	f106 010c 	add.w	r1, r6, #12
  40bfbc:	300c      	adds	r0, #12
  40bfbe:	f7fb fe17 	bl	407bf0 <memcpy>
  40bfc2:	4629      	mov	r1, r5
  40bfc4:	2201      	movs	r2, #1
  40bfc6:	4620      	mov	r0, r4
  40bfc8:	f001 fb06 	bl	40d5d8 <__lshift>
  40bfcc:	9006      	str	r0, [sp, #24]
  40bfce:	e4b5      	b.n	40b93c <_dtoa_r+0x56c>
  40bfd0:	2b39      	cmp	r3, #57	; 0x39
  40bfd2:	f8cd b018 	str.w	fp, [sp, #24]
  40bfd6:	46d0      	mov	r8, sl
  40bfd8:	f000 80a5 	beq.w	40c126 <_dtoa_r+0xd56>
  40bfdc:	f103 0a01 	add.w	sl, r3, #1
  40bfe0:	46b3      	mov	fp, r6
  40bfe2:	f887 a000 	strb.w	sl, [r7]
  40bfe6:	1c7d      	adds	r5, r7, #1
  40bfe8:	9e06      	ldr	r6, [sp, #24]
  40bfea:	e571      	b.n	40bad0 <_dtoa_r+0x700>
  40bfec:	465a      	mov	r2, fp
  40bfee:	46d0      	mov	r8, sl
  40bff0:	46b3      	mov	fp, r6
  40bff2:	469a      	mov	sl, r3
  40bff4:	4616      	mov	r6, r2
  40bff6:	e54f      	b.n	40ba98 <_dtoa_r+0x6c8>
  40bff8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40bffa:	495e      	ldr	r1, [pc, #376]	; (40c174 <_dtoa_r+0xda4>)
  40bffc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  40c000:	462a      	mov	r2, r5
  40c002:	4633      	mov	r3, r6
  40c004:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  40c008:	f7fb fb68 	bl	4076dc <__aeabi_dmul>
  40c00c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  40c010:	4638      	mov	r0, r7
  40c012:	4641      	mov	r1, r8
  40c014:	f002 faaa 	bl	40e56c <__aeabi_d2iz>
  40c018:	4605      	mov	r5, r0
  40c01a:	f7fb faf9 	bl	407610 <__aeabi_i2d>
  40c01e:	460b      	mov	r3, r1
  40c020:	4602      	mov	r2, r0
  40c022:	4641      	mov	r1, r8
  40c024:	4638      	mov	r0, r7
  40c026:	f7fb f9a5 	bl	407374 <__aeabi_dsub>
  40c02a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40c02c:	460f      	mov	r7, r1
  40c02e:	9904      	ldr	r1, [sp, #16]
  40c030:	3530      	adds	r5, #48	; 0x30
  40c032:	2b01      	cmp	r3, #1
  40c034:	700d      	strb	r5, [r1, #0]
  40c036:	4606      	mov	r6, r0
  40c038:	f101 0501 	add.w	r5, r1, #1
  40c03c:	d026      	beq.n	40c08c <_dtoa_r+0xcbc>
  40c03e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40c040:	9a04      	ldr	r2, [sp, #16]
  40c042:	f8df b13c 	ldr.w	fp, [pc, #316]	; 40c180 <_dtoa_r+0xdb0>
  40c046:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40c04a:	4413      	add	r3, r2
  40c04c:	f04f 0a00 	mov.w	sl, #0
  40c050:	4699      	mov	r9, r3
  40c052:	4652      	mov	r2, sl
  40c054:	465b      	mov	r3, fp
  40c056:	4630      	mov	r0, r6
  40c058:	4639      	mov	r1, r7
  40c05a:	f7fb fb3f 	bl	4076dc <__aeabi_dmul>
  40c05e:	460f      	mov	r7, r1
  40c060:	4606      	mov	r6, r0
  40c062:	f002 fa83 	bl	40e56c <__aeabi_d2iz>
  40c066:	4680      	mov	r8, r0
  40c068:	f7fb fad2 	bl	407610 <__aeabi_i2d>
  40c06c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40c070:	4602      	mov	r2, r0
  40c072:	460b      	mov	r3, r1
  40c074:	4630      	mov	r0, r6
  40c076:	4639      	mov	r1, r7
  40c078:	f7fb f97c 	bl	407374 <__aeabi_dsub>
  40c07c:	f805 8b01 	strb.w	r8, [r5], #1
  40c080:	454d      	cmp	r5, r9
  40c082:	4606      	mov	r6, r0
  40c084:	460f      	mov	r7, r1
  40c086:	d1e4      	bne.n	40c052 <_dtoa_r+0xc82>
  40c088:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40c08c:	4b3b      	ldr	r3, [pc, #236]	; (40c17c <_dtoa_r+0xdac>)
  40c08e:	2200      	movs	r2, #0
  40c090:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40c094:	f7fb f970 	bl	407378 <__adddf3>
  40c098:	4632      	mov	r2, r6
  40c09a:	463b      	mov	r3, r7
  40c09c:	f002 fa28 	bl	40e4f0 <__aeabi_dcmplt>
  40c0a0:	2800      	cmp	r0, #0
  40c0a2:	d046      	beq.n	40c132 <_dtoa_r+0xd62>
  40c0a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40c0a6:	9302      	str	r3, [sp, #8]
  40c0a8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40c0ac:	f7ff bb43 	b.w	40b736 <_dtoa_r+0x366>
  40c0b0:	f04f 0800 	mov.w	r8, #0
  40c0b4:	4646      	mov	r6, r8
  40c0b6:	e6a9      	b.n	40be0c <_dtoa_r+0xa3c>
  40c0b8:	9b08      	ldr	r3, [sp, #32]
  40c0ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c0bc:	1a9d      	subs	r5, r3, r2
  40c0be:	2300      	movs	r3, #0
  40c0c0:	f7ff bb71 	b.w	40b7a6 <_dtoa_r+0x3d6>
  40c0c4:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40c0c6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40c0c8:	9d08      	ldr	r5, [sp, #32]
  40c0ca:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40c0ce:	f7ff bb6a 	b.w	40b7a6 <_dtoa_r+0x3d6>
  40c0d2:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  40c0d6:	f04f 0a02 	mov.w	sl, #2
  40c0da:	e56e      	b.n	40bbba <_dtoa_r+0x7ea>
  40c0dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c0de:	2b00      	cmp	r3, #0
  40c0e0:	f43f aeb8 	beq.w	40be54 <_dtoa_r+0xa84>
  40c0e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40c0e6:	2b00      	cmp	r3, #0
  40c0e8:	f77f aede 	ble.w	40bea8 <_dtoa_r+0xad8>
  40c0ec:	2200      	movs	r2, #0
  40c0ee:	4b24      	ldr	r3, [pc, #144]	; (40c180 <_dtoa_r+0xdb0>)
  40c0f0:	4638      	mov	r0, r7
  40c0f2:	4641      	mov	r1, r8
  40c0f4:	f7fb faf2 	bl	4076dc <__aeabi_dmul>
  40c0f8:	4607      	mov	r7, r0
  40c0fa:	4688      	mov	r8, r1
  40c0fc:	f10a 0001 	add.w	r0, sl, #1
  40c100:	f7fb fa86 	bl	407610 <__aeabi_i2d>
  40c104:	463a      	mov	r2, r7
  40c106:	4643      	mov	r3, r8
  40c108:	f7fb fae8 	bl	4076dc <__aeabi_dmul>
  40c10c:	2200      	movs	r2, #0
  40c10e:	4b17      	ldr	r3, [pc, #92]	; (40c16c <_dtoa_r+0xd9c>)
  40c110:	f7fb f932 	bl	407378 <__adddf3>
  40c114:	9a02      	ldr	r2, [sp, #8]
  40c116:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40c118:	9312      	str	r3, [sp, #72]	; 0x48
  40c11a:	3a01      	subs	r2, #1
  40c11c:	4605      	mov	r5, r0
  40c11e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40c122:	9215      	str	r2, [sp, #84]	; 0x54
  40c124:	e56a      	b.n	40bbfc <_dtoa_r+0x82c>
  40c126:	2239      	movs	r2, #57	; 0x39
  40c128:	46b3      	mov	fp, r6
  40c12a:	703a      	strb	r2, [r7, #0]
  40c12c:	9e06      	ldr	r6, [sp, #24]
  40c12e:	1c7d      	adds	r5, r7, #1
  40c130:	e4c0      	b.n	40bab4 <_dtoa_r+0x6e4>
  40c132:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40c136:	2000      	movs	r0, #0
  40c138:	4910      	ldr	r1, [pc, #64]	; (40c17c <_dtoa_r+0xdac>)
  40c13a:	f7fb f91b 	bl	407374 <__aeabi_dsub>
  40c13e:	4632      	mov	r2, r6
  40c140:	463b      	mov	r3, r7
  40c142:	f002 f9f3 	bl	40e52c <__aeabi_dcmpgt>
  40c146:	b908      	cbnz	r0, 40c14c <_dtoa_r+0xd7c>
  40c148:	e6ae      	b.n	40bea8 <_dtoa_r+0xad8>
  40c14a:	4615      	mov	r5, r2
  40c14c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40c150:	2b30      	cmp	r3, #48	; 0x30
  40c152:	f105 32ff 	add.w	r2, r5, #4294967295
  40c156:	d0f8      	beq.n	40c14a <_dtoa_r+0xd7a>
  40c158:	e5d7      	b.n	40bd0a <_dtoa_r+0x93a>
  40c15a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40c15e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40c160:	9302      	str	r3, [sp, #8]
  40c162:	f7ff bae8 	b.w	40b736 <_dtoa_r+0x366>
  40c166:	970c      	str	r7, [sp, #48]	; 0x30
  40c168:	f7ff bba5 	b.w	40b8b6 <_dtoa_r+0x4e6>
  40c16c:	401c0000 	.word	0x401c0000
  40c170:	40140000 	.word	0x40140000
  40c174:	0040ed98 	.word	0x0040ed98
  40c178:	0040ed70 	.word	0x0040ed70
  40c17c:	3fe00000 	.word	0x3fe00000
  40c180:	40240000 	.word	0x40240000
  40c184:	2b39      	cmp	r3, #57	; 0x39
  40c186:	f8cd b018 	str.w	fp, [sp, #24]
  40c18a:	46d0      	mov	r8, sl
  40c18c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40c190:	469a      	mov	sl, r3
  40c192:	d0c8      	beq.n	40c126 <_dtoa_r+0xd56>
  40c194:	f1bb 0f00 	cmp.w	fp, #0
  40c198:	f73f aebf 	bgt.w	40bf1a <_dtoa_r+0xb4a>
  40c19c:	e6bf      	b.n	40bf1e <_dtoa_r+0xb4e>
  40c19e:	f47f aebe 	bne.w	40bf1e <_dtoa_r+0xb4e>
  40c1a2:	f01a 0f01 	tst.w	sl, #1
  40c1a6:	f43f aeba 	beq.w	40bf1e <_dtoa_r+0xb4e>
  40c1aa:	e6b2      	b.n	40bf12 <_dtoa_r+0xb42>
  40c1ac:	f04f 0800 	mov.w	r8, #0
  40c1b0:	4646      	mov	r6, r8
  40c1b2:	e5e9      	b.n	40bd88 <_dtoa_r+0x9b8>
  40c1b4:	4631      	mov	r1, r6
  40c1b6:	2300      	movs	r3, #0
  40c1b8:	220a      	movs	r2, #10
  40c1ba:	4620      	mov	r0, r4
  40c1bc:	f001 f890 	bl	40d2e0 <__multadd>
  40c1c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40c1c2:	2b00      	cmp	r3, #0
  40c1c4:	4606      	mov	r6, r0
  40c1c6:	dd0a      	ble.n	40c1de <_dtoa_r+0xe0e>
  40c1c8:	930a      	str	r3, [sp, #40]	; 0x28
  40c1ca:	f7ff bbaa 	b.w	40b922 <_dtoa_r+0x552>
  40c1ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40c1d0:	2b02      	cmp	r3, #2
  40c1d2:	dc23      	bgt.n	40c21c <_dtoa_r+0xe4c>
  40c1d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40c1d6:	e43b      	b.n	40ba50 <_dtoa_r+0x680>
  40c1d8:	f04f 0a02 	mov.w	sl, #2
  40c1dc:	e4ed      	b.n	40bbba <_dtoa_r+0x7ea>
  40c1de:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40c1e0:	2b02      	cmp	r3, #2
  40c1e2:	dc1b      	bgt.n	40c21c <_dtoa_r+0xe4c>
  40c1e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40c1e6:	e7ef      	b.n	40c1c8 <_dtoa_r+0xdf8>
  40c1e8:	2500      	movs	r5, #0
  40c1ea:	6465      	str	r5, [r4, #68]	; 0x44
  40c1ec:	4629      	mov	r1, r5
  40c1ee:	4620      	mov	r0, r4
  40c1f0:	f001 f846 	bl	40d280 <_Balloc>
  40c1f4:	f04f 33ff 	mov.w	r3, #4294967295
  40c1f8:	930a      	str	r3, [sp, #40]	; 0x28
  40c1fa:	930f      	str	r3, [sp, #60]	; 0x3c
  40c1fc:	2301      	movs	r3, #1
  40c1fe:	9004      	str	r0, [sp, #16]
  40c200:	9525      	str	r5, [sp, #148]	; 0x94
  40c202:	6420      	str	r0, [r4, #64]	; 0x40
  40c204:	930b      	str	r3, [sp, #44]	; 0x2c
  40c206:	f7ff b9dd 	b.w	40b5c4 <_dtoa_r+0x1f4>
  40c20a:	2501      	movs	r5, #1
  40c20c:	f7ff b9a5 	b.w	40b55a <_dtoa_r+0x18a>
  40c210:	f43f ab69 	beq.w	40b8e6 <_dtoa_r+0x516>
  40c214:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  40c218:	f7ff bbf9 	b.w	40ba0e <_dtoa_r+0x63e>
  40c21c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40c21e:	930a      	str	r3, [sp, #40]	; 0x28
  40c220:	e5e5      	b.n	40bdee <_dtoa_r+0xa1e>
  40c222:	bf00      	nop

0040c224 <__sflush_r>:
  40c224:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40c228:	b29a      	uxth	r2, r3
  40c22a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40c22e:	460d      	mov	r5, r1
  40c230:	0711      	lsls	r1, r2, #28
  40c232:	4680      	mov	r8, r0
  40c234:	d43a      	bmi.n	40c2ac <__sflush_r+0x88>
  40c236:	686a      	ldr	r2, [r5, #4]
  40c238:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40c23c:	2a00      	cmp	r2, #0
  40c23e:	81ab      	strh	r3, [r5, #12]
  40c240:	dd6f      	ble.n	40c322 <__sflush_r+0xfe>
  40c242:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40c244:	2c00      	cmp	r4, #0
  40c246:	d049      	beq.n	40c2dc <__sflush_r+0xb8>
  40c248:	2200      	movs	r2, #0
  40c24a:	b29b      	uxth	r3, r3
  40c24c:	f8d8 6000 	ldr.w	r6, [r8]
  40c250:	f8c8 2000 	str.w	r2, [r8]
  40c254:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40c258:	d067      	beq.n	40c32a <__sflush_r+0x106>
  40c25a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40c25c:	075f      	lsls	r7, r3, #29
  40c25e:	d505      	bpl.n	40c26c <__sflush_r+0x48>
  40c260:	6869      	ldr	r1, [r5, #4]
  40c262:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40c264:	1a52      	subs	r2, r2, r1
  40c266:	b10b      	cbz	r3, 40c26c <__sflush_r+0x48>
  40c268:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40c26a:	1ad2      	subs	r2, r2, r3
  40c26c:	2300      	movs	r3, #0
  40c26e:	69e9      	ldr	r1, [r5, #28]
  40c270:	4640      	mov	r0, r8
  40c272:	47a0      	blx	r4
  40c274:	1c44      	adds	r4, r0, #1
  40c276:	d03c      	beq.n	40c2f2 <__sflush_r+0xce>
  40c278:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40c27c:	692a      	ldr	r2, [r5, #16]
  40c27e:	602a      	str	r2, [r5, #0]
  40c280:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40c284:	2200      	movs	r2, #0
  40c286:	81ab      	strh	r3, [r5, #12]
  40c288:	04db      	lsls	r3, r3, #19
  40c28a:	606a      	str	r2, [r5, #4]
  40c28c:	d447      	bmi.n	40c31e <__sflush_r+0xfa>
  40c28e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40c290:	f8c8 6000 	str.w	r6, [r8]
  40c294:	b311      	cbz	r1, 40c2dc <__sflush_r+0xb8>
  40c296:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40c29a:	4299      	cmp	r1, r3
  40c29c:	d002      	beq.n	40c2a4 <__sflush_r+0x80>
  40c29e:	4640      	mov	r0, r8
  40c2a0:	f000 f95a 	bl	40c558 <_free_r>
  40c2a4:	2000      	movs	r0, #0
  40c2a6:	6328      	str	r0, [r5, #48]	; 0x30
  40c2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40c2ac:	692e      	ldr	r6, [r5, #16]
  40c2ae:	b1ae      	cbz	r6, 40c2dc <__sflush_r+0xb8>
  40c2b0:	682c      	ldr	r4, [r5, #0]
  40c2b2:	602e      	str	r6, [r5, #0]
  40c2b4:	0791      	lsls	r1, r2, #30
  40c2b6:	bf0c      	ite	eq
  40c2b8:	696b      	ldreq	r3, [r5, #20]
  40c2ba:	2300      	movne	r3, #0
  40c2bc:	1ba4      	subs	r4, r4, r6
  40c2be:	60ab      	str	r3, [r5, #8]
  40c2c0:	e00a      	b.n	40c2d8 <__sflush_r+0xb4>
  40c2c2:	4623      	mov	r3, r4
  40c2c4:	4632      	mov	r2, r6
  40c2c6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40c2c8:	69e9      	ldr	r1, [r5, #28]
  40c2ca:	4640      	mov	r0, r8
  40c2cc:	47b8      	blx	r7
  40c2ce:	2800      	cmp	r0, #0
  40c2d0:	eba4 0400 	sub.w	r4, r4, r0
  40c2d4:	4406      	add	r6, r0
  40c2d6:	dd04      	ble.n	40c2e2 <__sflush_r+0xbe>
  40c2d8:	2c00      	cmp	r4, #0
  40c2da:	dcf2      	bgt.n	40c2c2 <__sflush_r+0x9e>
  40c2dc:	2000      	movs	r0, #0
  40c2de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40c2e2:	89ab      	ldrh	r3, [r5, #12]
  40c2e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40c2e8:	81ab      	strh	r3, [r5, #12]
  40c2ea:	f04f 30ff 	mov.w	r0, #4294967295
  40c2ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40c2f2:	f8d8 4000 	ldr.w	r4, [r8]
  40c2f6:	2c1d      	cmp	r4, #29
  40c2f8:	d8f3      	bhi.n	40c2e2 <__sflush_r+0xbe>
  40c2fa:	4b19      	ldr	r3, [pc, #100]	; (40c360 <__sflush_r+0x13c>)
  40c2fc:	40e3      	lsrs	r3, r4
  40c2fe:	43db      	mvns	r3, r3
  40c300:	f013 0301 	ands.w	r3, r3, #1
  40c304:	d1ed      	bne.n	40c2e2 <__sflush_r+0xbe>
  40c306:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40c30a:	606b      	str	r3, [r5, #4]
  40c30c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  40c310:	6929      	ldr	r1, [r5, #16]
  40c312:	81ab      	strh	r3, [r5, #12]
  40c314:	04da      	lsls	r2, r3, #19
  40c316:	6029      	str	r1, [r5, #0]
  40c318:	d5b9      	bpl.n	40c28e <__sflush_r+0x6a>
  40c31a:	2c00      	cmp	r4, #0
  40c31c:	d1b7      	bne.n	40c28e <__sflush_r+0x6a>
  40c31e:	6528      	str	r0, [r5, #80]	; 0x50
  40c320:	e7b5      	b.n	40c28e <__sflush_r+0x6a>
  40c322:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40c324:	2a00      	cmp	r2, #0
  40c326:	dc8c      	bgt.n	40c242 <__sflush_r+0x1e>
  40c328:	e7d8      	b.n	40c2dc <__sflush_r+0xb8>
  40c32a:	2301      	movs	r3, #1
  40c32c:	69e9      	ldr	r1, [r5, #28]
  40c32e:	4640      	mov	r0, r8
  40c330:	47a0      	blx	r4
  40c332:	1c43      	adds	r3, r0, #1
  40c334:	4602      	mov	r2, r0
  40c336:	d002      	beq.n	40c33e <__sflush_r+0x11a>
  40c338:	89ab      	ldrh	r3, [r5, #12]
  40c33a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40c33c:	e78e      	b.n	40c25c <__sflush_r+0x38>
  40c33e:	f8d8 3000 	ldr.w	r3, [r8]
  40c342:	2b00      	cmp	r3, #0
  40c344:	d0f8      	beq.n	40c338 <__sflush_r+0x114>
  40c346:	2b1d      	cmp	r3, #29
  40c348:	d001      	beq.n	40c34e <__sflush_r+0x12a>
  40c34a:	2b16      	cmp	r3, #22
  40c34c:	d102      	bne.n	40c354 <__sflush_r+0x130>
  40c34e:	f8c8 6000 	str.w	r6, [r8]
  40c352:	e7c3      	b.n	40c2dc <__sflush_r+0xb8>
  40c354:	89ab      	ldrh	r3, [r5, #12]
  40c356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40c35a:	81ab      	strh	r3, [r5, #12]
  40c35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40c360:	20400001 	.word	0x20400001

0040c364 <_fflush_r>:
  40c364:	b538      	push	{r3, r4, r5, lr}
  40c366:	460d      	mov	r5, r1
  40c368:	4604      	mov	r4, r0
  40c36a:	b108      	cbz	r0, 40c370 <_fflush_r+0xc>
  40c36c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40c36e:	b1bb      	cbz	r3, 40c3a0 <_fflush_r+0x3c>
  40c370:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40c374:	b188      	cbz	r0, 40c39a <_fflush_r+0x36>
  40c376:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40c378:	07db      	lsls	r3, r3, #31
  40c37a:	d401      	bmi.n	40c380 <_fflush_r+0x1c>
  40c37c:	0581      	lsls	r1, r0, #22
  40c37e:	d517      	bpl.n	40c3b0 <_fflush_r+0x4c>
  40c380:	4620      	mov	r0, r4
  40c382:	4629      	mov	r1, r5
  40c384:	f7ff ff4e 	bl	40c224 <__sflush_r>
  40c388:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40c38a:	07da      	lsls	r2, r3, #31
  40c38c:	4604      	mov	r4, r0
  40c38e:	d402      	bmi.n	40c396 <_fflush_r+0x32>
  40c390:	89ab      	ldrh	r3, [r5, #12]
  40c392:	059b      	lsls	r3, r3, #22
  40c394:	d507      	bpl.n	40c3a6 <_fflush_r+0x42>
  40c396:	4620      	mov	r0, r4
  40c398:	bd38      	pop	{r3, r4, r5, pc}
  40c39a:	4604      	mov	r4, r0
  40c39c:	4620      	mov	r0, r4
  40c39e:	bd38      	pop	{r3, r4, r5, pc}
  40c3a0:	f000 f838 	bl	40c414 <__sinit>
  40c3a4:	e7e4      	b.n	40c370 <_fflush_r+0xc>
  40c3a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40c3a8:	f000 fb72 	bl	40ca90 <__retarget_lock_release_recursive>
  40c3ac:	4620      	mov	r0, r4
  40c3ae:	bd38      	pop	{r3, r4, r5, pc}
  40c3b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40c3b2:	f000 fb6b 	bl	40ca8c <__retarget_lock_acquire_recursive>
  40c3b6:	e7e3      	b.n	40c380 <_fflush_r+0x1c>

0040c3b8 <_cleanup_r>:
  40c3b8:	4901      	ldr	r1, [pc, #4]	; (40c3c0 <_cleanup_r+0x8>)
  40c3ba:	f000 bb2b 	b.w	40ca14 <_fwalk_reent>
  40c3be:	bf00      	nop
  40c3c0:	0040e059 	.word	0x0040e059

0040c3c4 <std.isra.0>:
  40c3c4:	b510      	push	{r4, lr}
  40c3c6:	2300      	movs	r3, #0
  40c3c8:	4604      	mov	r4, r0
  40c3ca:	8181      	strh	r1, [r0, #12]
  40c3cc:	81c2      	strh	r2, [r0, #14]
  40c3ce:	6003      	str	r3, [r0, #0]
  40c3d0:	6043      	str	r3, [r0, #4]
  40c3d2:	6083      	str	r3, [r0, #8]
  40c3d4:	6643      	str	r3, [r0, #100]	; 0x64
  40c3d6:	6103      	str	r3, [r0, #16]
  40c3d8:	6143      	str	r3, [r0, #20]
  40c3da:	6183      	str	r3, [r0, #24]
  40c3dc:	4619      	mov	r1, r3
  40c3de:	2208      	movs	r2, #8
  40c3e0:	305c      	adds	r0, #92	; 0x5c
  40c3e2:	f7fb fc9f 	bl	407d24 <memset>
  40c3e6:	4807      	ldr	r0, [pc, #28]	; (40c404 <std.isra.0+0x40>)
  40c3e8:	4907      	ldr	r1, [pc, #28]	; (40c408 <std.isra.0+0x44>)
  40c3ea:	4a08      	ldr	r2, [pc, #32]	; (40c40c <std.isra.0+0x48>)
  40c3ec:	4b08      	ldr	r3, [pc, #32]	; (40c410 <std.isra.0+0x4c>)
  40c3ee:	6220      	str	r0, [r4, #32]
  40c3f0:	61e4      	str	r4, [r4, #28]
  40c3f2:	6261      	str	r1, [r4, #36]	; 0x24
  40c3f4:	62a2      	str	r2, [r4, #40]	; 0x28
  40c3f6:	62e3      	str	r3, [r4, #44]	; 0x2c
  40c3f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
  40c3fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40c400:	f000 bb40 	b.w	40ca84 <__retarget_lock_init_recursive>
  40c404:	0040dbe5 	.word	0x0040dbe5
  40c408:	0040dc09 	.word	0x0040dc09
  40c40c:	0040dc45 	.word	0x0040dc45
  40c410:	0040dc65 	.word	0x0040dc65

0040c414 <__sinit>:
  40c414:	b510      	push	{r4, lr}
  40c416:	4604      	mov	r4, r0
  40c418:	4812      	ldr	r0, [pc, #72]	; (40c464 <__sinit+0x50>)
  40c41a:	f000 fb37 	bl	40ca8c <__retarget_lock_acquire_recursive>
  40c41e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40c420:	b9d2      	cbnz	r2, 40c458 <__sinit+0x44>
  40c422:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40c426:	4810      	ldr	r0, [pc, #64]	; (40c468 <__sinit+0x54>)
  40c428:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  40c42c:	2103      	movs	r1, #3
  40c42e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40c432:	63e0      	str	r0, [r4, #60]	; 0x3c
  40c434:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40c438:	6860      	ldr	r0, [r4, #4]
  40c43a:	2104      	movs	r1, #4
  40c43c:	f7ff ffc2 	bl	40c3c4 <std.isra.0>
  40c440:	2201      	movs	r2, #1
  40c442:	2109      	movs	r1, #9
  40c444:	68a0      	ldr	r0, [r4, #8]
  40c446:	f7ff ffbd 	bl	40c3c4 <std.isra.0>
  40c44a:	2202      	movs	r2, #2
  40c44c:	2112      	movs	r1, #18
  40c44e:	68e0      	ldr	r0, [r4, #12]
  40c450:	f7ff ffb8 	bl	40c3c4 <std.isra.0>
  40c454:	2301      	movs	r3, #1
  40c456:	63a3      	str	r3, [r4, #56]	; 0x38
  40c458:	4802      	ldr	r0, [pc, #8]	; (40c464 <__sinit+0x50>)
  40c45a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40c45e:	f000 bb17 	b.w	40ca90 <__retarget_lock_release_recursive>
  40c462:	bf00      	nop
  40c464:	20404a58 	.word	0x20404a58
  40c468:	0040c3b9 	.word	0x0040c3b9

0040c46c <__sfp_lock_acquire>:
  40c46c:	4801      	ldr	r0, [pc, #4]	; (40c474 <__sfp_lock_acquire+0x8>)
  40c46e:	f000 bb0d 	b.w	40ca8c <__retarget_lock_acquire_recursive>
  40c472:	bf00      	nop
  40c474:	20404a6c 	.word	0x20404a6c

0040c478 <__sfp_lock_release>:
  40c478:	4801      	ldr	r0, [pc, #4]	; (40c480 <__sfp_lock_release+0x8>)
  40c47a:	f000 bb09 	b.w	40ca90 <__retarget_lock_release_recursive>
  40c47e:	bf00      	nop
  40c480:	20404a6c 	.word	0x20404a6c

0040c484 <__libc_fini_array>:
  40c484:	b538      	push	{r3, r4, r5, lr}
  40c486:	4c0a      	ldr	r4, [pc, #40]	; (40c4b0 <__libc_fini_array+0x2c>)
  40c488:	4d0a      	ldr	r5, [pc, #40]	; (40c4b4 <__libc_fini_array+0x30>)
  40c48a:	1b64      	subs	r4, r4, r5
  40c48c:	10a4      	asrs	r4, r4, #2
  40c48e:	d00a      	beq.n	40c4a6 <__libc_fini_array+0x22>
  40c490:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40c494:	3b01      	subs	r3, #1
  40c496:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40c49a:	3c01      	subs	r4, #1
  40c49c:	f855 3904 	ldr.w	r3, [r5], #-4
  40c4a0:	4798      	blx	r3
  40c4a2:	2c00      	cmp	r4, #0
  40c4a4:	d1f9      	bne.n	40c49a <__libc_fini_array+0x16>
  40c4a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40c4aa:	f002 bd73 	b.w	40ef94 <_fini>
  40c4ae:	bf00      	nop
  40c4b0:	0040efa4 	.word	0x0040efa4
  40c4b4:	0040efa0 	.word	0x0040efa0

0040c4b8 <_malloc_trim_r>:
  40c4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40c4ba:	4f24      	ldr	r7, [pc, #144]	; (40c54c <_malloc_trim_r+0x94>)
  40c4bc:	460c      	mov	r4, r1
  40c4be:	4606      	mov	r6, r0
  40c4c0:	f000 fed2 	bl	40d268 <__malloc_lock>
  40c4c4:	68bb      	ldr	r3, [r7, #8]
  40c4c6:	685d      	ldr	r5, [r3, #4]
  40c4c8:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40c4cc:	310f      	adds	r1, #15
  40c4ce:	f025 0503 	bic.w	r5, r5, #3
  40c4d2:	4429      	add	r1, r5
  40c4d4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40c4d8:	f021 010f 	bic.w	r1, r1, #15
  40c4dc:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40c4e0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40c4e4:	db07      	blt.n	40c4f6 <_malloc_trim_r+0x3e>
  40c4e6:	2100      	movs	r1, #0
  40c4e8:	4630      	mov	r0, r6
  40c4ea:	f001 fb69 	bl	40dbc0 <_sbrk_r>
  40c4ee:	68bb      	ldr	r3, [r7, #8]
  40c4f0:	442b      	add	r3, r5
  40c4f2:	4298      	cmp	r0, r3
  40c4f4:	d004      	beq.n	40c500 <_malloc_trim_r+0x48>
  40c4f6:	4630      	mov	r0, r6
  40c4f8:	f000 febc 	bl	40d274 <__malloc_unlock>
  40c4fc:	2000      	movs	r0, #0
  40c4fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40c500:	4261      	negs	r1, r4
  40c502:	4630      	mov	r0, r6
  40c504:	f001 fb5c 	bl	40dbc0 <_sbrk_r>
  40c508:	3001      	adds	r0, #1
  40c50a:	d00d      	beq.n	40c528 <_malloc_trim_r+0x70>
  40c50c:	4b10      	ldr	r3, [pc, #64]	; (40c550 <_malloc_trim_r+0x98>)
  40c50e:	68ba      	ldr	r2, [r7, #8]
  40c510:	6819      	ldr	r1, [r3, #0]
  40c512:	1b2d      	subs	r5, r5, r4
  40c514:	f045 0501 	orr.w	r5, r5, #1
  40c518:	4630      	mov	r0, r6
  40c51a:	1b09      	subs	r1, r1, r4
  40c51c:	6055      	str	r5, [r2, #4]
  40c51e:	6019      	str	r1, [r3, #0]
  40c520:	f000 fea8 	bl	40d274 <__malloc_unlock>
  40c524:	2001      	movs	r0, #1
  40c526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40c528:	2100      	movs	r1, #0
  40c52a:	4630      	mov	r0, r6
  40c52c:	f001 fb48 	bl	40dbc0 <_sbrk_r>
  40c530:	68ba      	ldr	r2, [r7, #8]
  40c532:	1a83      	subs	r3, r0, r2
  40c534:	2b0f      	cmp	r3, #15
  40c536:	ddde      	ble.n	40c4f6 <_malloc_trim_r+0x3e>
  40c538:	4c06      	ldr	r4, [pc, #24]	; (40c554 <_malloc_trim_r+0x9c>)
  40c53a:	4905      	ldr	r1, [pc, #20]	; (40c550 <_malloc_trim_r+0x98>)
  40c53c:	6824      	ldr	r4, [r4, #0]
  40c53e:	f043 0301 	orr.w	r3, r3, #1
  40c542:	1b00      	subs	r0, r0, r4
  40c544:	6053      	str	r3, [r2, #4]
  40c546:	6008      	str	r0, [r1, #0]
  40c548:	e7d5      	b.n	40c4f6 <_malloc_trim_r+0x3e>
  40c54a:	bf00      	nop
  40c54c:	20400494 	.word	0x20400494
  40c550:	204038f0 	.word	0x204038f0
  40c554:	2040089c 	.word	0x2040089c

0040c558 <_free_r>:
  40c558:	2900      	cmp	r1, #0
  40c55a:	d044      	beq.n	40c5e6 <_free_r+0x8e>
  40c55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40c560:	460d      	mov	r5, r1
  40c562:	4680      	mov	r8, r0
  40c564:	f000 fe80 	bl	40d268 <__malloc_lock>
  40c568:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40c56c:	4969      	ldr	r1, [pc, #420]	; (40c714 <_free_r+0x1bc>)
  40c56e:	f027 0301 	bic.w	r3, r7, #1
  40c572:	f1a5 0408 	sub.w	r4, r5, #8
  40c576:	18e2      	adds	r2, r4, r3
  40c578:	688e      	ldr	r6, [r1, #8]
  40c57a:	6850      	ldr	r0, [r2, #4]
  40c57c:	42b2      	cmp	r2, r6
  40c57e:	f020 0003 	bic.w	r0, r0, #3
  40c582:	d05e      	beq.n	40c642 <_free_r+0xea>
  40c584:	07fe      	lsls	r6, r7, #31
  40c586:	6050      	str	r0, [r2, #4]
  40c588:	d40b      	bmi.n	40c5a2 <_free_r+0x4a>
  40c58a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40c58e:	1be4      	subs	r4, r4, r7
  40c590:	f101 0e08 	add.w	lr, r1, #8
  40c594:	68a5      	ldr	r5, [r4, #8]
  40c596:	4575      	cmp	r5, lr
  40c598:	443b      	add	r3, r7
  40c59a:	d06d      	beq.n	40c678 <_free_r+0x120>
  40c59c:	68e7      	ldr	r7, [r4, #12]
  40c59e:	60ef      	str	r7, [r5, #12]
  40c5a0:	60bd      	str	r5, [r7, #8]
  40c5a2:	1815      	adds	r5, r2, r0
  40c5a4:	686d      	ldr	r5, [r5, #4]
  40c5a6:	07ed      	lsls	r5, r5, #31
  40c5a8:	d53e      	bpl.n	40c628 <_free_r+0xd0>
  40c5aa:	f043 0201 	orr.w	r2, r3, #1
  40c5ae:	6062      	str	r2, [r4, #4]
  40c5b0:	50e3      	str	r3, [r4, r3]
  40c5b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40c5b6:	d217      	bcs.n	40c5e8 <_free_r+0x90>
  40c5b8:	08db      	lsrs	r3, r3, #3
  40c5ba:	1c58      	adds	r0, r3, #1
  40c5bc:	109a      	asrs	r2, r3, #2
  40c5be:	684d      	ldr	r5, [r1, #4]
  40c5c0:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40c5c4:	60a7      	str	r7, [r4, #8]
  40c5c6:	2301      	movs	r3, #1
  40c5c8:	4093      	lsls	r3, r2
  40c5ca:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40c5ce:	432b      	orrs	r3, r5
  40c5d0:	3a08      	subs	r2, #8
  40c5d2:	60e2      	str	r2, [r4, #12]
  40c5d4:	604b      	str	r3, [r1, #4]
  40c5d6:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40c5da:	60fc      	str	r4, [r7, #12]
  40c5dc:	4640      	mov	r0, r8
  40c5de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40c5e2:	f000 be47 	b.w	40d274 <__malloc_unlock>
  40c5e6:	4770      	bx	lr
  40c5e8:	0a5a      	lsrs	r2, r3, #9
  40c5ea:	2a04      	cmp	r2, #4
  40c5ec:	d852      	bhi.n	40c694 <_free_r+0x13c>
  40c5ee:	099a      	lsrs	r2, r3, #6
  40c5f0:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40c5f4:	00ff      	lsls	r7, r7, #3
  40c5f6:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40c5fa:	19c8      	adds	r0, r1, r7
  40c5fc:	59ca      	ldr	r2, [r1, r7]
  40c5fe:	3808      	subs	r0, #8
  40c600:	4290      	cmp	r0, r2
  40c602:	d04f      	beq.n	40c6a4 <_free_r+0x14c>
  40c604:	6851      	ldr	r1, [r2, #4]
  40c606:	f021 0103 	bic.w	r1, r1, #3
  40c60a:	428b      	cmp	r3, r1
  40c60c:	d232      	bcs.n	40c674 <_free_r+0x11c>
  40c60e:	6892      	ldr	r2, [r2, #8]
  40c610:	4290      	cmp	r0, r2
  40c612:	d1f7      	bne.n	40c604 <_free_r+0xac>
  40c614:	68c3      	ldr	r3, [r0, #12]
  40c616:	60a0      	str	r0, [r4, #8]
  40c618:	60e3      	str	r3, [r4, #12]
  40c61a:	609c      	str	r4, [r3, #8]
  40c61c:	60c4      	str	r4, [r0, #12]
  40c61e:	4640      	mov	r0, r8
  40c620:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40c624:	f000 be26 	b.w	40d274 <__malloc_unlock>
  40c628:	6895      	ldr	r5, [r2, #8]
  40c62a:	4f3b      	ldr	r7, [pc, #236]	; (40c718 <_free_r+0x1c0>)
  40c62c:	42bd      	cmp	r5, r7
  40c62e:	4403      	add	r3, r0
  40c630:	d040      	beq.n	40c6b4 <_free_r+0x15c>
  40c632:	68d0      	ldr	r0, [r2, #12]
  40c634:	60e8      	str	r0, [r5, #12]
  40c636:	f043 0201 	orr.w	r2, r3, #1
  40c63a:	6085      	str	r5, [r0, #8]
  40c63c:	6062      	str	r2, [r4, #4]
  40c63e:	50e3      	str	r3, [r4, r3]
  40c640:	e7b7      	b.n	40c5b2 <_free_r+0x5a>
  40c642:	07ff      	lsls	r7, r7, #31
  40c644:	4403      	add	r3, r0
  40c646:	d407      	bmi.n	40c658 <_free_r+0x100>
  40c648:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40c64c:	1aa4      	subs	r4, r4, r2
  40c64e:	4413      	add	r3, r2
  40c650:	68a0      	ldr	r0, [r4, #8]
  40c652:	68e2      	ldr	r2, [r4, #12]
  40c654:	60c2      	str	r2, [r0, #12]
  40c656:	6090      	str	r0, [r2, #8]
  40c658:	4a30      	ldr	r2, [pc, #192]	; (40c71c <_free_r+0x1c4>)
  40c65a:	6812      	ldr	r2, [r2, #0]
  40c65c:	f043 0001 	orr.w	r0, r3, #1
  40c660:	4293      	cmp	r3, r2
  40c662:	6060      	str	r0, [r4, #4]
  40c664:	608c      	str	r4, [r1, #8]
  40c666:	d3b9      	bcc.n	40c5dc <_free_r+0x84>
  40c668:	4b2d      	ldr	r3, [pc, #180]	; (40c720 <_free_r+0x1c8>)
  40c66a:	4640      	mov	r0, r8
  40c66c:	6819      	ldr	r1, [r3, #0]
  40c66e:	f7ff ff23 	bl	40c4b8 <_malloc_trim_r>
  40c672:	e7b3      	b.n	40c5dc <_free_r+0x84>
  40c674:	4610      	mov	r0, r2
  40c676:	e7cd      	b.n	40c614 <_free_r+0xbc>
  40c678:	1811      	adds	r1, r2, r0
  40c67a:	6849      	ldr	r1, [r1, #4]
  40c67c:	07c9      	lsls	r1, r1, #31
  40c67e:	d444      	bmi.n	40c70a <_free_r+0x1b2>
  40c680:	6891      	ldr	r1, [r2, #8]
  40c682:	68d2      	ldr	r2, [r2, #12]
  40c684:	60ca      	str	r2, [r1, #12]
  40c686:	4403      	add	r3, r0
  40c688:	f043 0001 	orr.w	r0, r3, #1
  40c68c:	6091      	str	r1, [r2, #8]
  40c68e:	6060      	str	r0, [r4, #4]
  40c690:	50e3      	str	r3, [r4, r3]
  40c692:	e7a3      	b.n	40c5dc <_free_r+0x84>
  40c694:	2a14      	cmp	r2, #20
  40c696:	d816      	bhi.n	40c6c6 <_free_r+0x16e>
  40c698:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40c69c:	00ff      	lsls	r7, r7, #3
  40c69e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40c6a2:	e7aa      	b.n	40c5fa <_free_r+0xa2>
  40c6a4:	10aa      	asrs	r2, r5, #2
  40c6a6:	2301      	movs	r3, #1
  40c6a8:	684d      	ldr	r5, [r1, #4]
  40c6aa:	4093      	lsls	r3, r2
  40c6ac:	432b      	orrs	r3, r5
  40c6ae:	604b      	str	r3, [r1, #4]
  40c6b0:	4603      	mov	r3, r0
  40c6b2:	e7b0      	b.n	40c616 <_free_r+0xbe>
  40c6b4:	f043 0201 	orr.w	r2, r3, #1
  40c6b8:	614c      	str	r4, [r1, #20]
  40c6ba:	610c      	str	r4, [r1, #16]
  40c6bc:	60e5      	str	r5, [r4, #12]
  40c6be:	60a5      	str	r5, [r4, #8]
  40c6c0:	6062      	str	r2, [r4, #4]
  40c6c2:	50e3      	str	r3, [r4, r3]
  40c6c4:	e78a      	b.n	40c5dc <_free_r+0x84>
  40c6c6:	2a54      	cmp	r2, #84	; 0x54
  40c6c8:	d806      	bhi.n	40c6d8 <_free_r+0x180>
  40c6ca:	0b1a      	lsrs	r2, r3, #12
  40c6cc:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40c6d0:	00ff      	lsls	r7, r7, #3
  40c6d2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40c6d6:	e790      	b.n	40c5fa <_free_r+0xa2>
  40c6d8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40c6dc:	d806      	bhi.n	40c6ec <_free_r+0x194>
  40c6de:	0bda      	lsrs	r2, r3, #15
  40c6e0:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40c6e4:	00ff      	lsls	r7, r7, #3
  40c6e6:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40c6ea:	e786      	b.n	40c5fa <_free_r+0xa2>
  40c6ec:	f240 5054 	movw	r0, #1364	; 0x554
  40c6f0:	4282      	cmp	r2, r0
  40c6f2:	d806      	bhi.n	40c702 <_free_r+0x1aa>
  40c6f4:	0c9a      	lsrs	r2, r3, #18
  40c6f6:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40c6fa:	00ff      	lsls	r7, r7, #3
  40c6fc:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40c700:	e77b      	b.n	40c5fa <_free_r+0xa2>
  40c702:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40c706:	257e      	movs	r5, #126	; 0x7e
  40c708:	e777      	b.n	40c5fa <_free_r+0xa2>
  40c70a:	f043 0101 	orr.w	r1, r3, #1
  40c70e:	6061      	str	r1, [r4, #4]
  40c710:	6013      	str	r3, [r2, #0]
  40c712:	e763      	b.n	40c5dc <_free_r+0x84>
  40c714:	20400494 	.word	0x20400494
  40c718:	2040049c 	.word	0x2040049c
  40c71c:	204008a0 	.word	0x204008a0
  40c720:	20403920 	.word	0x20403920

0040c724 <__sfvwrite_r>:
  40c724:	6893      	ldr	r3, [r2, #8]
  40c726:	2b00      	cmp	r3, #0
  40c728:	d073      	beq.n	40c812 <__sfvwrite_r+0xee>
  40c72a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c72e:	898b      	ldrh	r3, [r1, #12]
  40c730:	b083      	sub	sp, #12
  40c732:	460c      	mov	r4, r1
  40c734:	0719      	lsls	r1, r3, #28
  40c736:	9000      	str	r0, [sp, #0]
  40c738:	4616      	mov	r6, r2
  40c73a:	d526      	bpl.n	40c78a <__sfvwrite_r+0x66>
  40c73c:	6922      	ldr	r2, [r4, #16]
  40c73e:	b322      	cbz	r2, 40c78a <__sfvwrite_r+0x66>
  40c740:	f013 0002 	ands.w	r0, r3, #2
  40c744:	6835      	ldr	r5, [r6, #0]
  40c746:	d02c      	beq.n	40c7a2 <__sfvwrite_r+0x7e>
  40c748:	f04f 0900 	mov.w	r9, #0
  40c74c:	4fb0      	ldr	r7, [pc, #704]	; (40ca10 <__sfvwrite_r+0x2ec>)
  40c74e:	46c8      	mov	r8, r9
  40c750:	46b2      	mov	sl, r6
  40c752:	45b8      	cmp	r8, r7
  40c754:	4643      	mov	r3, r8
  40c756:	464a      	mov	r2, r9
  40c758:	bf28      	it	cs
  40c75a:	463b      	movcs	r3, r7
  40c75c:	9800      	ldr	r0, [sp, #0]
  40c75e:	f1b8 0f00 	cmp.w	r8, #0
  40c762:	d050      	beq.n	40c806 <__sfvwrite_r+0xe2>
  40c764:	69e1      	ldr	r1, [r4, #28]
  40c766:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40c768:	47b0      	blx	r6
  40c76a:	2800      	cmp	r0, #0
  40c76c:	dd58      	ble.n	40c820 <__sfvwrite_r+0xfc>
  40c76e:	f8da 3008 	ldr.w	r3, [sl, #8]
  40c772:	1a1b      	subs	r3, r3, r0
  40c774:	4481      	add	r9, r0
  40c776:	eba8 0800 	sub.w	r8, r8, r0
  40c77a:	f8ca 3008 	str.w	r3, [sl, #8]
  40c77e:	2b00      	cmp	r3, #0
  40c780:	d1e7      	bne.n	40c752 <__sfvwrite_r+0x2e>
  40c782:	2000      	movs	r0, #0
  40c784:	b003      	add	sp, #12
  40c786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c78a:	4621      	mov	r1, r4
  40c78c:	9800      	ldr	r0, [sp, #0]
  40c78e:	f7fe fd17 	bl	40b1c0 <__swsetup_r>
  40c792:	2800      	cmp	r0, #0
  40c794:	f040 8133 	bne.w	40c9fe <__sfvwrite_r+0x2da>
  40c798:	89a3      	ldrh	r3, [r4, #12]
  40c79a:	6835      	ldr	r5, [r6, #0]
  40c79c:	f013 0002 	ands.w	r0, r3, #2
  40c7a0:	d1d2      	bne.n	40c748 <__sfvwrite_r+0x24>
  40c7a2:	f013 0901 	ands.w	r9, r3, #1
  40c7a6:	d145      	bne.n	40c834 <__sfvwrite_r+0x110>
  40c7a8:	464f      	mov	r7, r9
  40c7aa:	9601      	str	r6, [sp, #4]
  40c7ac:	b337      	cbz	r7, 40c7fc <__sfvwrite_r+0xd8>
  40c7ae:	059a      	lsls	r2, r3, #22
  40c7b0:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40c7b4:	f140 8083 	bpl.w	40c8be <__sfvwrite_r+0x19a>
  40c7b8:	4547      	cmp	r7, r8
  40c7ba:	46c3      	mov	fp, r8
  40c7bc:	f0c0 80ab 	bcc.w	40c916 <__sfvwrite_r+0x1f2>
  40c7c0:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40c7c4:	f040 80ac 	bne.w	40c920 <__sfvwrite_r+0x1fc>
  40c7c8:	6820      	ldr	r0, [r4, #0]
  40c7ca:	46ba      	mov	sl, r7
  40c7cc:	465a      	mov	r2, fp
  40c7ce:	4649      	mov	r1, r9
  40c7d0:	f000 fce6 	bl	40d1a0 <memmove>
  40c7d4:	68a2      	ldr	r2, [r4, #8]
  40c7d6:	6823      	ldr	r3, [r4, #0]
  40c7d8:	eba2 0208 	sub.w	r2, r2, r8
  40c7dc:	445b      	add	r3, fp
  40c7de:	60a2      	str	r2, [r4, #8]
  40c7e0:	6023      	str	r3, [r4, #0]
  40c7e2:	9a01      	ldr	r2, [sp, #4]
  40c7e4:	6893      	ldr	r3, [r2, #8]
  40c7e6:	eba3 030a 	sub.w	r3, r3, sl
  40c7ea:	44d1      	add	r9, sl
  40c7ec:	eba7 070a 	sub.w	r7, r7, sl
  40c7f0:	6093      	str	r3, [r2, #8]
  40c7f2:	2b00      	cmp	r3, #0
  40c7f4:	d0c5      	beq.n	40c782 <__sfvwrite_r+0x5e>
  40c7f6:	89a3      	ldrh	r3, [r4, #12]
  40c7f8:	2f00      	cmp	r7, #0
  40c7fa:	d1d8      	bne.n	40c7ae <__sfvwrite_r+0x8a>
  40c7fc:	f8d5 9000 	ldr.w	r9, [r5]
  40c800:	686f      	ldr	r7, [r5, #4]
  40c802:	3508      	adds	r5, #8
  40c804:	e7d2      	b.n	40c7ac <__sfvwrite_r+0x88>
  40c806:	f8d5 9000 	ldr.w	r9, [r5]
  40c80a:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40c80e:	3508      	adds	r5, #8
  40c810:	e79f      	b.n	40c752 <__sfvwrite_r+0x2e>
  40c812:	2000      	movs	r0, #0
  40c814:	4770      	bx	lr
  40c816:	4621      	mov	r1, r4
  40c818:	9800      	ldr	r0, [sp, #0]
  40c81a:	f7ff fda3 	bl	40c364 <_fflush_r>
  40c81e:	b370      	cbz	r0, 40c87e <__sfvwrite_r+0x15a>
  40c820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40c824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40c828:	f04f 30ff 	mov.w	r0, #4294967295
  40c82c:	81a3      	strh	r3, [r4, #12]
  40c82e:	b003      	add	sp, #12
  40c830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c834:	4681      	mov	r9, r0
  40c836:	4633      	mov	r3, r6
  40c838:	464e      	mov	r6, r9
  40c83a:	46a8      	mov	r8, r5
  40c83c:	469a      	mov	sl, r3
  40c83e:	464d      	mov	r5, r9
  40c840:	b34e      	cbz	r6, 40c896 <__sfvwrite_r+0x172>
  40c842:	b380      	cbz	r0, 40c8a6 <__sfvwrite_r+0x182>
  40c844:	6820      	ldr	r0, [r4, #0]
  40c846:	6923      	ldr	r3, [r4, #16]
  40c848:	6962      	ldr	r2, [r4, #20]
  40c84a:	45b1      	cmp	r9, r6
  40c84c:	46cb      	mov	fp, r9
  40c84e:	bf28      	it	cs
  40c850:	46b3      	movcs	fp, r6
  40c852:	4298      	cmp	r0, r3
  40c854:	465f      	mov	r7, fp
  40c856:	d904      	bls.n	40c862 <__sfvwrite_r+0x13e>
  40c858:	68a3      	ldr	r3, [r4, #8]
  40c85a:	4413      	add	r3, r2
  40c85c:	459b      	cmp	fp, r3
  40c85e:	f300 80a6 	bgt.w	40c9ae <__sfvwrite_r+0x28a>
  40c862:	4593      	cmp	fp, r2
  40c864:	db4b      	blt.n	40c8fe <__sfvwrite_r+0x1da>
  40c866:	4613      	mov	r3, r2
  40c868:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40c86a:	69e1      	ldr	r1, [r4, #28]
  40c86c:	9800      	ldr	r0, [sp, #0]
  40c86e:	462a      	mov	r2, r5
  40c870:	47b8      	blx	r7
  40c872:	1e07      	subs	r7, r0, #0
  40c874:	ddd4      	ble.n	40c820 <__sfvwrite_r+0xfc>
  40c876:	ebb9 0907 	subs.w	r9, r9, r7
  40c87a:	d0cc      	beq.n	40c816 <__sfvwrite_r+0xf2>
  40c87c:	2001      	movs	r0, #1
  40c87e:	f8da 3008 	ldr.w	r3, [sl, #8]
  40c882:	1bdb      	subs	r3, r3, r7
  40c884:	443d      	add	r5, r7
  40c886:	1bf6      	subs	r6, r6, r7
  40c888:	f8ca 3008 	str.w	r3, [sl, #8]
  40c88c:	2b00      	cmp	r3, #0
  40c88e:	f43f af78 	beq.w	40c782 <__sfvwrite_r+0x5e>
  40c892:	2e00      	cmp	r6, #0
  40c894:	d1d5      	bne.n	40c842 <__sfvwrite_r+0x11e>
  40c896:	f108 0308 	add.w	r3, r8, #8
  40c89a:	e913 0060 	ldmdb	r3, {r5, r6}
  40c89e:	4698      	mov	r8, r3
  40c8a0:	3308      	adds	r3, #8
  40c8a2:	2e00      	cmp	r6, #0
  40c8a4:	d0f9      	beq.n	40c89a <__sfvwrite_r+0x176>
  40c8a6:	4632      	mov	r2, r6
  40c8a8:	210a      	movs	r1, #10
  40c8aa:	4628      	mov	r0, r5
  40c8ac:	f000 fc28 	bl	40d100 <memchr>
  40c8b0:	2800      	cmp	r0, #0
  40c8b2:	f000 80a1 	beq.w	40c9f8 <__sfvwrite_r+0x2d4>
  40c8b6:	3001      	adds	r0, #1
  40c8b8:	eba0 0905 	sub.w	r9, r0, r5
  40c8bc:	e7c2      	b.n	40c844 <__sfvwrite_r+0x120>
  40c8be:	6820      	ldr	r0, [r4, #0]
  40c8c0:	6923      	ldr	r3, [r4, #16]
  40c8c2:	4298      	cmp	r0, r3
  40c8c4:	d802      	bhi.n	40c8cc <__sfvwrite_r+0x1a8>
  40c8c6:	6963      	ldr	r3, [r4, #20]
  40c8c8:	429f      	cmp	r7, r3
  40c8ca:	d25d      	bcs.n	40c988 <__sfvwrite_r+0x264>
  40c8cc:	45b8      	cmp	r8, r7
  40c8ce:	bf28      	it	cs
  40c8d0:	46b8      	movcs	r8, r7
  40c8d2:	4642      	mov	r2, r8
  40c8d4:	4649      	mov	r1, r9
  40c8d6:	f000 fc63 	bl	40d1a0 <memmove>
  40c8da:	68a3      	ldr	r3, [r4, #8]
  40c8dc:	6822      	ldr	r2, [r4, #0]
  40c8de:	eba3 0308 	sub.w	r3, r3, r8
  40c8e2:	4442      	add	r2, r8
  40c8e4:	60a3      	str	r3, [r4, #8]
  40c8e6:	6022      	str	r2, [r4, #0]
  40c8e8:	b10b      	cbz	r3, 40c8ee <__sfvwrite_r+0x1ca>
  40c8ea:	46c2      	mov	sl, r8
  40c8ec:	e779      	b.n	40c7e2 <__sfvwrite_r+0xbe>
  40c8ee:	4621      	mov	r1, r4
  40c8f0:	9800      	ldr	r0, [sp, #0]
  40c8f2:	f7ff fd37 	bl	40c364 <_fflush_r>
  40c8f6:	2800      	cmp	r0, #0
  40c8f8:	d192      	bne.n	40c820 <__sfvwrite_r+0xfc>
  40c8fa:	46c2      	mov	sl, r8
  40c8fc:	e771      	b.n	40c7e2 <__sfvwrite_r+0xbe>
  40c8fe:	465a      	mov	r2, fp
  40c900:	4629      	mov	r1, r5
  40c902:	f000 fc4d 	bl	40d1a0 <memmove>
  40c906:	68a2      	ldr	r2, [r4, #8]
  40c908:	6823      	ldr	r3, [r4, #0]
  40c90a:	eba2 020b 	sub.w	r2, r2, fp
  40c90e:	445b      	add	r3, fp
  40c910:	60a2      	str	r2, [r4, #8]
  40c912:	6023      	str	r3, [r4, #0]
  40c914:	e7af      	b.n	40c876 <__sfvwrite_r+0x152>
  40c916:	6820      	ldr	r0, [r4, #0]
  40c918:	46b8      	mov	r8, r7
  40c91a:	46ba      	mov	sl, r7
  40c91c:	46bb      	mov	fp, r7
  40c91e:	e755      	b.n	40c7cc <__sfvwrite_r+0xa8>
  40c920:	6962      	ldr	r2, [r4, #20]
  40c922:	6820      	ldr	r0, [r4, #0]
  40c924:	6921      	ldr	r1, [r4, #16]
  40c926:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40c92a:	eba0 0a01 	sub.w	sl, r0, r1
  40c92e:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40c932:	f10a 0001 	add.w	r0, sl, #1
  40c936:	ea4f 0868 	mov.w	r8, r8, asr #1
  40c93a:	4438      	add	r0, r7
  40c93c:	4540      	cmp	r0, r8
  40c93e:	4642      	mov	r2, r8
  40c940:	bf84      	itt	hi
  40c942:	4680      	movhi	r8, r0
  40c944:	4642      	movhi	r2, r8
  40c946:	055b      	lsls	r3, r3, #21
  40c948:	d544      	bpl.n	40c9d4 <__sfvwrite_r+0x2b0>
  40c94a:	4611      	mov	r1, r2
  40c94c:	9800      	ldr	r0, [sp, #0]
  40c94e:	f000 f921 	bl	40cb94 <_malloc_r>
  40c952:	4683      	mov	fp, r0
  40c954:	2800      	cmp	r0, #0
  40c956:	d055      	beq.n	40ca04 <__sfvwrite_r+0x2e0>
  40c958:	4652      	mov	r2, sl
  40c95a:	6921      	ldr	r1, [r4, #16]
  40c95c:	f7fb f948 	bl	407bf0 <memcpy>
  40c960:	89a3      	ldrh	r3, [r4, #12]
  40c962:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40c966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40c96a:	81a3      	strh	r3, [r4, #12]
  40c96c:	eb0b 000a 	add.w	r0, fp, sl
  40c970:	eba8 030a 	sub.w	r3, r8, sl
  40c974:	f8c4 b010 	str.w	fp, [r4, #16]
  40c978:	f8c4 8014 	str.w	r8, [r4, #20]
  40c97c:	6020      	str	r0, [r4, #0]
  40c97e:	60a3      	str	r3, [r4, #8]
  40c980:	46b8      	mov	r8, r7
  40c982:	46ba      	mov	sl, r7
  40c984:	46bb      	mov	fp, r7
  40c986:	e721      	b.n	40c7cc <__sfvwrite_r+0xa8>
  40c988:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40c98c:	42b9      	cmp	r1, r7
  40c98e:	bf28      	it	cs
  40c990:	4639      	movcs	r1, r7
  40c992:	464a      	mov	r2, r9
  40c994:	fb91 f1f3 	sdiv	r1, r1, r3
  40c998:	9800      	ldr	r0, [sp, #0]
  40c99a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40c99c:	fb03 f301 	mul.w	r3, r3, r1
  40c9a0:	69e1      	ldr	r1, [r4, #28]
  40c9a2:	47b0      	blx	r6
  40c9a4:	f1b0 0a00 	subs.w	sl, r0, #0
  40c9a8:	f73f af1b 	bgt.w	40c7e2 <__sfvwrite_r+0xbe>
  40c9ac:	e738      	b.n	40c820 <__sfvwrite_r+0xfc>
  40c9ae:	461a      	mov	r2, r3
  40c9b0:	4629      	mov	r1, r5
  40c9b2:	9301      	str	r3, [sp, #4]
  40c9b4:	f000 fbf4 	bl	40d1a0 <memmove>
  40c9b8:	6822      	ldr	r2, [r4, #0]
  40c9ba:	9b01      	ldr	r3, [sp, #4]
  40c9bc:	9800      	ldr	r0, [sp, #0]
  40c9be:	441a      	add	r2, r3
  40c9c0:	6022      	str	r2, [r4, #0]
  40c9c2:	4621      	mov	r1, r4
  40c9c4:	f7ff fcce 	bl	40c364 <_fflush_r>
  40c9c8:	9b01      	ldr	r3, [sp, #4]
  40c9ca:	2800      	cmp	r0, #0
  40c9cc:	f47f af28 	bne.w	40c820 <__sfvwrite_r+0xfc>
  40c9d0:	461f      	mov	r7, r3
  40c9d2:	e750      	b.n	40c876 <__sfvwrite_r+0x152>
  40c9d4:	9800      	ldr	r0, [sp, #0]
  40c9d6:	f000 ff4d 	bl	40d874 <_realloc_r>
  40c9da:	4683      	mov	fp, r0
  40c9dc:	2800      	cmp	r0, #0
  40c9de:	d1c5      	bne.n	40c96c <__sfvwrite_r+0x248>
  40c9e0:	9d00      	ldr	r5, [sp, #0]
  40c9e2:	6921      	ldr	r1, [r4, #16]
  40c9e4:	4628      	mov	r0, r5
  40c9e6:	f7ff fdb7 	bl	40c558 <_free_r>
  40c9ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40c9ee:	220c      	movs	r2, #12
  40c9f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40c9f4:	602a      	str	r2, [r5, #0]
  40c9f6:	e715      	b.n	40c824 <__sfvwrite_r+0x100>
  40c9f8:	f106 0901 	add.w	r9, r6, #1
  40c9fc:	e722      	b.n	40c844 <__sfvwrite_r+0x120>
  40c9fe:	f04f 30ff 	mov.w	r0, #4294967295
  40ca02:	e6bf      	b.n	40c784 <__sfvwrite_r+0x60>
  40ca04:	9a00      	ldr	r2, [sp, #0]
  40ca06:	230c      	movs	r3, #12
  40ca08:	6013      	str	r3, [r2, #0]
  40ca0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40ca0e:	e709      	b.n	40c824 <__sfvwrite_r+0x100>
  40ca10:	7ffffc00 	.word	0x7ffffc00

0040ca14 <_fwalk_reent>:
  40ca14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40ca18:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40ca1c:	d01f      	beq.n	40ca5e <_fwalk_reent+0x4a>
  40ca1e:	4688      	mov	r8, r1
  40ca20:	4606      	mov	r6, r0
  40ca22:	f04f 0900 	mov.w	r9, #0
  40ca26:	687d      	ldr	r5, [r7, #4]
  40ca28:	68bc      	ldr	r4, [r7, #8]
  40ca2a:	3d01      	subs	r5, #1
  40ca2c:	d411      	bmi.n	40ca52 <_fwalk_reent+0x3e>
  40ca2e:	89a3      	ldrh	r3, [r4, #12]
  40ca30:	2b01      	cmp	r3, #1
  40ca32:	f105 35ff 	add.w	r5, r5, #4294967295
  40ca36:	d908      	bls.n	40ca4a <_fwalk_reent+0x36>
  40ca38:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40ca3c:	3301      	adds	r3, #1
  40ca3e:	4621      	mov	r1, r4
  40ca40:	4630      	mov	r0, r6
  40ca42:	d002      	beq.n	40ca4a <_fwalk_reent+0x36>
  40ca44:	47c0      	blx	r8
  40ca46:	ea49 0900 	orr.w	r9, r9, r0
  40ca4a:	1c6b      	adds	r3, r5, #1
  40ca4c:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40ca50:	d1ed      	bne.n	40ca2e <_fwalk_reent+0x1a>
  40ca52:	683f      	ldr	r7, [r7, #0]
  40ca54:	2f00      	cmp	r7, #0
  40ca56:	d1e6      	bne.n	40ca26 <_fwalk_reent+0x12>
  40ca58:	4648      	mov	r0, r9
  40ca5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40ca5e:	46b9      	mov	r9, r7
  40ca60:	4648      	mov	r0, r9
  40ca62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40ca66:	bf00      	nop

0040ca68 <_localeconv_r>:
  40ca68:	4a04      	ldr	r2, [pc, #16]	; (40ca7c <_localeconv_r+0x14>)
  40ca6a:	4b05      	ldr	r3, [pc, #20]	; (40ca80 <_localeconv_r+0x18>)
  40ca6c:	6812      	ldr	r2, [r2, #0]
  40ca6e:	6b50      	ldr	r0, [r2, #52]	; 0x34
  40ca70:	2800      	cmp	r0, #0
  40ca72:	bf08      	it	eq
  40ca74:	4618      	moveq	r0, r3
  40ca76:	30f0      	adds	r0, #240	; 0xf0
  40ca78:	4770      	bx	lr
  40ca7a:	bf00      	nop
  40ca7c:	20400064 	.word	0x20400064
  40ca80:	204008a4 	.word	0x204008a4

0040ca84 <__retarget_lock_init_recursive>:
  40ca84:	4770      	bx	lr
  40ca86:	bf00      	nop

0040ca88 <__retarget_lock_close_recursive>:
  40ca88:	4770      	bx	lr
  40ca8a:	bf00      	nop

0040ca8c <__retarget_lock_acquire_recursive>:
  40ca8c:	4770      	bx	lr
  40ca8e:	bf00      	nop

0040ca90 <__retarget_lock_release_recursive>:
  40ca90:	4770      	bx	lr
  40ca92:	bf00      	nop

0040ca94 <__swhatbuf_r>:
  40ca94:	b570      	push	{r4, r5, r6, lr}
  40ca96:	460c      	mov	r4, r1
  40ca98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40ca9c:	2900      	cmp	r1, #0
  40ca9e:	b090      	sub	sp, #64	; 0x40
  40caa0:	4615      	mov	r5, r2
  40caa2:	461e      	mov	r6, r3
  40caa4:	db14      	blt.n	40cad0 <__swhatbuf_r+0x3c>
  40caa6:	aa01      	add	r2, sp, #4
  40caa8:	f001 fbbc 	bl	40e224 <_fstat_r>
  40caac:	2800      	cmp	r0, #0
  40caae:	db0f      	blt.n	40cad0 <__swhatbuf_r+0x3c>
  40cab0:	9a02      	ldr	r2, [sp, #8]
  40cab2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40cab6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40caba:	fab2 f282 	clz	r2, r2
  40cabe:	0952      	lsrs	r2, r2, #5
  40cac0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40cac4:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40cac8:	6032      	str	r2, [r6, #0]
  40caca:	602b      	str	r3, [r5, #0]
  40cacc:	b010      	add	sp, #64	; 0x40
  40cace:	bd70      	pop	{r4, r5, r6, pc}
  40cad0:	89a2      	ldrh	r2, [r4, #12]
  40cad2:	2300      	movs	r3, #0
  40cad4:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  40cad8:	6033      	str	r3, [r6, #0]
  40cada:	d004      	beq.n	40cae6 <__swhatbuf_r+0x52>
  40cadc:	2240      	movs	r2, #64	; 0x40
  40cade:	4618      	mov	r0, r3
  40cae0:	602a      	str	r2, [r5, #0]
  40cae2:	b010      	add	sp, #64	; 0x40
  40cae4:	bd70      	pop	{r4, r5, r6, pc}
  40cae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40caea:	602b      	str	r3, [r5, #0]
  40caec:	b010      	add	sp, #64	; 0x40
  40caee:	bd70      	pop	{r4, r5, r6, pc}

0040caf0 <__smakebuf_r>:
  40caf0:	898a      	ldrh	r2, [r1, #12]
  40caf2:	0792      	lsls	r2, r2, #30
  40caf4:	460b      	mov	r3, r1
  40caf6:	d506      	bpl.n	40cb06 <__smakebuf_r+0x16>
  40caf8:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40cafc:	2101      	movs	r1, #1
  40cafe:	601a      	str	r2, [r3, #0]
  40cb00:	611a      	str	r2, [r3, #16]
  40cb02:	6159      	str	r1, [r3, #20]
  40cb04:	4770      	bx	lr
  40cb06:	b5f0      	push	{r4, r5, r6, r7, lr}
  40cb08:	b083      	sub	sp, #12
  40cb0a:	ab01      	add	r3, sp, #4
  40cb0c:	466a      	mov	r2, sp
  40cb0e:	460c      	mov	r4, r1
  40cb10:	4606      	mov	r6, r0
  40cb12:	f7ff ffbf 	bl	40ca94 <__swhatbuf_r>
  40cb16:	9900      	ldr	r1, [sp, #0]
  40cb18:	4605      	mov	r5, r0
  40cb1a:	4630      	mov	r0, r6
  40cb1c:	f000 f83a 	bl	40cb94 <_malloc_r>
  40cb20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40cb24:	b1d8      	cbz	r0, 40cb5e <__smakebuf_r+0x6e>
  40cb26:	9a01      	ldr	r2, [sp, #4]
  40cb28:	4f15      	ldr	r7, [pc, #84]	; (40cb80 <__smakebuf_r+0x90>)
  40cb2a:	9900      	ldr	r1, [sp, #0]
  40cb2c:	63f7      	str	r7, [r6, #60]	; 0x3c
  40cb2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40cb32:	81a3      	strh	r3, [r4, #12]
  40cb34:	6020      	str	r0, [r4, #0]
  40cb36:	6120      	str	r0, [r4, #16]
  40cb38:	6161      	str	r1, [r4, #20]
  40cb3a:	b91a      	cbnz	r2, 40cb44 <__smakebuf_r+0x54>
  40cb3c:	432b      	orrs	r3, r5
  40cb3e:	81a3      	strh	r3, [r4, #12]
  40cb40:	b003      	add	sp, #12
  40cb42:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40cb44:	4630      	mov	r0, r6
  40cb46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40cb4a:	f001 fb7f 	bl	40e24c <_isatty_r>
  40cb4e:	b1a0      	cbz	r0, 40cb7a <__smakebuf_r+0x8a>
  40cb50:	89a3      	ldrh	r3, [r4, #12]
  40cb52:	f023 0303 	bic.w	r3, r3, #3
  40cb56:	f043 0301 	orr.w	r3, r3, #1
  40cb5a:	b21b      	sxth	r3, r3
  40cb5c:	e7ee      	b.n	40cb3c <__smakebuf_r+0x4c>
  40cb5e:	059a      	lsls	r2, r3, #22
  40cb60:	d4ee      	bmi.n	40cb40 <__smakebuf_r+0x50>
  40cb62:	f023 0303 	bic.w	r3, r3, #3
  40cb66:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40cb6a:	f043 0302 	orr.w	r3, r3, #2
  40cb6e:	2101      	movs	r1, #1
  40cb70:	81a3      	strh	r3, [r4, #12]
  40cb72:	6022      	str	r2, [r4, #0]
  40cb74:	6122      	str	r2, [r4, #16]
  40cb76:	6161      	str	r1, [r4, #20]
  40cb78:	e7e2      	b.n	40cb40 <__smakebuf_r+0x50>
  40cb7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40cb7e:	e7dd      	b.n	40cb3c <__smakebuf_r+0x4c>
  40cb80:	0040c3b9 	.word	0x0040c3b9

0040cb84 <malloc>:
  40cb84:	4b02      	ldr	r3, [pc, #8]	; (40cb90 <malloc+0xc>)
  40cb86:	4601      	mov	r1, r0
  40cb88:	6818      	ldr	r0, [r3, #0]
  40cb8a:	f000 b803 	b.w	40cb94 <_malloc_r>
  40cb8e:	bf00      	nop
  40cb90:	20400064 	.word	0x20400064

0040cb94 <_malloc_r>:
  40cb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40cb98:	f101 060b 	add.w	r6, r1, #11
  40cb9c:	2e16      	cmp	r6, #22
  40cb9e:	b083      	sub	sp, #12
  40cba0:	4605      	mov	r5, r0
  40cba2:	f240 809e 	bls.w	40cce2 <_malloc_r+0x14e>
  40cba6:	f036 0607 	bics.w	r6, r6, #7
  40cbaa:	f100 80bd 	bmi.w	40cd28 <_malloc_r+0x194>
  40cbae:	42b1      	cmp	r1, r6
  40cbb0:	f200 80ba 	bhi.w	40cd28 <_malloc_r+0x194>
  40cbb4:	f000 fb58 	bl	40d268 <__malloc_lock>
  40cbb8:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40cbbc:	f0c0 8293 	bcc.w	40d0e6 <_malloc_r+0x552>
  40cbc0:	0a73      	lsrs	r3, r6, #9
  40cbc2:	f000 80b8 	beq.w	40cd36 <_malloc_r+0x1a2>
  40cbc6:	2b04      	cmp	r3, #4
  40cbc8:	f200 8179 	bhi.w	40cebe <_malloc_r+0x32a>
  40cbcc:	09b3      	lsrs	r3, r6, #6
  40cbce:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40cbd2:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40cbd6:	00c3      	lsls	r3, r0, #3
  40cbd8:	4fbf      	ldr	r7, [pc, #764]	; (40ced8 <_malloc_r+0x344>)
  40cbda:	443b      	add	r3, r7
  40cbdc:	f1a3 0108 	sub.w	r1, r3, #8
  40cbe0:	685c      	ldr	r4, [r3, #4]
  40cbe2:	42a1      	cmp	r1, r4
  40cbe4:	d106      	bne.n	40cbf4 <_malloc_r+0x60>
  40cbe6:	e00c      	b.n	40cc02 <_malloc_r+0x6e>
  40cbe8:	2a00      	cmp	r2, #0
  40cbea:	f280 80aa 	bge.w	40cd42 <_malloc_r+0x1ae>
  40cbee:	68e4      	ldr	r4, [r4, #12]
  40cbf0:	42a1      	cmp	r1, r4
  40cbf2:	d006      	beq.n	40cc02 <_malloc_r+0x6e>
  40cbf4:	6863      	ldr	r3, [r4, #4]
  40cbf6:	f023 0303 	bic.w	r3, r3, #3
  40cbfa:	1b9a      	subs	r2, r3, r6
  40cbfc:	2a0f      	cmp	r2, #15
  40cbfe:	ddf3      	ble.n	40cbe8 <_malloc_r+0x54>
  40cc00:	4670      	mov	r0, lr
  40cc02:	693c      	ldr	r4, [r7, #16]
  40cc04:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40ceec <_malloc_r+0x358>
  40cc08:	4574      	cmp	r4, lr
  40cc0a:	f000 81ab 	beq.w	40cf64 <_malloc_r+0x3d0>
  40cc0e:	6863      	ldr	r3, [r4, #4]
  40cc10:	f023 0303 	bic.w	r3, r3, #3
  40cc14:	1b9a      	subs	r2, r3, r6
  40cc16:	2a0f      	cmp	r2, #15
  40cc18:	f300 8190 	bgt.w	40cf3c <_malloc_r+0x3a8>
  40cc1c:	2a00      	cmp	r2, #0
  40cc1e:	f8c7 e014 	str.w	lr, [r7, #20]
  40cc22:	f8c7 e010 	str.w	lr, [r7, #16]
  40cc26:	f280 809d 	bge.w	40cd64 <_malloc_r+0x1d0>
  40cc2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40cc2e:	f080 8161 	bcs.w	40cef4 <_malloc_r+0x360>
  40cc32:	08db      	lsrs	r3, r3, #3
  40cc34:	f103 0c01 	add.w	ip, r3, #1
  40cc38:	1099      	asrs	r1, r3, #2
  40cc3a:	687a      	ldr	r2, [r7, #4]
  40cc3c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40cc40:	f8c4 8008 	str.w	r8, [r4, #8]
  40cc44:	2301      	movs	r3, #1
  40cc46:	408b      	lsls	r3, r1
  40cc48:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40cc4c:	4313      	orrs	r3, r2
  40cc4e:	3908      	subs	r1, #8
  40cc50:	60e1      	str	r1, [r4, #12]
  40cc52:	607b      	str	r3, [r7, #4]
  40cc54:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40cc58:	f8c8 400c 	str.w	r4, [r8, #12]
  40cc5c:	1082      	asrs	r2, r0, #2
  40cc5e:	2401      	movs	r4, #1
  40cc60:	4094      	lsls	r4, r2
  40cc62:	429c      	cmp	r4, r3
  40cc64:	f200 808b 	bhi.w	40cd7e <_malloc_r+0x1ea>
  40cc68:	421c      	tst	r4, r3
  40cc6a:	d106      	bne.n	40cc7a <_malloc_r+0xe6>
  40cc6c:	f020 0003 	bic.w	r0, r0, #3
  40cc70:	0064      	lsls	r4, r4, #1
  40cc72:	421c      	tst	r4, r3
  40cc74:	f100 0004 	add.w	r0, r0, #4
  40cc78:	d0fa      	beq.n	40cc70 <_malloc_r+0xdc>
  40cc7a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40cc7e:	46cc      	mov	ip, r9
  40cc80:	4680      	mov	r8, r0
  40cc82:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40cc86:	459c      	cmp	ip, r3
  40cc88:	d107      	bne.n	40cc9a <_malloc_r+0x106>
  40cc8a:	e16d      	b.n	40cf68 <_malloc_r+0x3d4>
  40cc8c:	2a00      	cmp	r2, #0
  40cc8e:	f280 817b 	bge.w	40cf88 <_malloc_r+0x3f4>
  40cc92:	68db      	ldr	r3, [r3, #12]
  40cc94:	459c      	cmp	ip, r3
  40cc96:	f000 8167 	beq.w	40cf68 <_malloc_r+0x3d4>
  40cc9a:	6859      	ldr	r1, [r3, #4]
  40cc9c:	f021 0103 	bic.w	r1, r1, #3
  40cca0:	1b8a      	subs	r2, r1, r6
  40cca2:	2a0f      	cmp	r2, #15
  40cca4:	ddf2      	ble.n	40cc8c <_malloc_r+0xf8>
  40cca6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40ccaa:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40ccae:	9300      	str	r3, [sp, #0]
  40ccb0:	199c      	adds	r4, r3, r6
  40ccb2:	4628      	mov	r0, r5
  40ccb4:	f046 0601 	orr.w	r6, r6, #1
  40ccb8:	f042 0501 	orr.w	r5, r2, #1
  40ccbc:	605e      	str	r6, [r3, #4]
  40ccbe:	f8c8 c00c 	str.w	ip, [r8, #12]
  40ccc2:	f8cc 8008 	str.w	r8, [ip, #8]
  40ccc6:	617c      	str	r4, [r7, #20]
  40ccc8:	613c      	str	r4, [r7, #16]
  40ccca:	f8c4 e00c 	str.w	lr, [r4, #12]
  40ccce:	f8c4 e008 	str.w	lr, [r4, #8]
  40ccd2:	6065      	str	r5, [r4, #4]
  40ccd4:	505a      	str	r2, [r3, r1]
  40ccd6:	f000 facd 	bl	40d274 <__malloc_unlock>
  40ccda:	9b00      	ldr	r3, [sp, #0]
  40ccdc:	f103 0408 	add.w	r4, r3, #8
  40cce0:	e01e      	b.n	40cd20 <_malloc_r+0x18c>
  40cce2:	2910      	cmp	r1, #16
  40cce4:	d820      	bhi.n	40cd28 <_malloc_r+0x194>
  40cce6:	f000 fabf 	bl	40d268 <__malloc_lock>
  40ccea:	2610      	movs	r6, #16
  40ccec:	2318      	movs	r3, #24
  40ccee:	2002      	movs	r0, #2
  40ccf0:	4f79      	ldr	r7, [pc, #484]	; (40ced8 <_malloc_r+0x344>)
  40ccf2:	443b      	add	r3, r7
  40ccf4:	f1a3 0208 	sub.w	r2, r3, #8
  40ccf8:	685c      	ldr	r4, [r3, #4]
  40ccfa:	4294      	cmp	r4, r2
  40ccfc:	f000 813d 	beq.w	40cf7a <_malloc_r+0x3e6>
  40cd00:	6863      	ldr	r3, [r4, #4]
  40cd02:	68e1      	ldr	r1, [r4, #12]
  40cd04:	68a6      	ldr	r6, [r4, #8]
  40cd06:	f023 0303 	bic.w	r3, r3, #3
  40cd0a:	4423      	add	r3, r4
  40cd0c:	4628      	mov	r0, r5
  40cd0e:	685a      	ldr	r2, [r3, #4]
  40cd10:	60f1      	str	r1, [r6, #12]
  40cd12:	f042 0201 	orr.w	r2, r2, #1
  40cd16:	608e      	str	r6, [r1, #8]
  40cd18:	605a      	str	r2, [r3, #4]
  40cd1a:	f000 faab 	bl	40d274 <__malloc_unlock>
  40cd1e:	3408      	adds	r4, #8
  40cd20:	4620      	mov	r0, r4
  40cd22:	b003      	add	sp, #12
  40cd24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cd28:	2400      	movs	r4, #0
  40cd2a:	230c      	movs	r3, #12
  40cd2c:	4620      	mov	r0, r4
  40cd2e:	602b      	str	r3, [r5, #0]
  40cd30:	b003      	add	sp, #12
  40cd32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cd36:	2040      	movs	r0, #64	; 0x40
  40cd38:	f44f 7300 	mov.w	r3, #512	; 0x200
  40cd3c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40cd40:	e74a      	b.n	40cbd8 <_malloc_r+0x44>
  40cd42:	4423      	add	r3, r4
  40cd44:	68e1      	ldr	r1, [r4, #12]
  40cd46:	685a      	ldr	r2, [r3, #4]
  40cd48:	68a6      	ldr	r6, [r4, #8]
  40cd4a:	f042 0201 	orr.w	r2, r2, #1
  40cd4e:	60f1      	str	r1, [r6, #12]
  40cd50:	4628      	mov	r0, r5
  40cd52:	608e      	str	r6, [r1, #8]
  40cd54:	605a      	str	r2, [r3, #4]
  40cd56:	f000 fa8d 	bl	40d274 <__malloc_unlock>
  40cd5a:	3408      	adds	r4, #8
  40cd5c:	4620      	mov	r0, r4
  40cd5e:	b003      	add	sp, #12
  40cd60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cd64:	4423      	add	r3, r4
  40cd66:	4628      	mov	r0, r5
  40cd68:	685a      	ldr	r2, [r3, #4]
  40cd6a:	f042 0201 	orr.w	r2, r2, #1
  40cd6e:	605a      	str	r2, [r3, #4]
  40cd70:	f000 fa80 	bl	40d274 <__malloc_unlock>
  40cd74:	3408      	adds	r4, #8
  40cd76:	4620      	mov	r0, r4
  40cd78:	b003      	add	sp, #12
  40cd7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cd7e:	68bc      	ldr	r4, [r7, #8]
  40cd80:	6863      	ldr	r3, [r4, #4]
  40cd82:	f023 0803 	bic.w	r8, r3, #3
  40cd86:	45b0      	cmp	r8, r6
  40cd88:	d304      	bcc.n	40cd94 <_malloc_r+0x200>
  40cd8a:	eba8 0306 	sub.w	r3, r8, r6
  40cd8e:	2b0f      	cmp	r3, #15
  40cd90:	f300 8085 	bgt.w	40ce9e <_malloc_r+0x30a>
  40cd94:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40cef0 <_malloc_r+0x35c>
  40cd98:	4b50      	ldr	r3, [pc, #320]	; (40cedc <_malloc_r+0x348>)
  40cd9a:	f8d9 2000 	ldr.w	r2, [r9]
  40cd9e:	681b      	ldr	r3, [r3, #0]
  40cda0:	3201      	adds	r2, #1
  40cda2:	4433      	add	r3, r6
  40cda4:	eb04 0a08 	add.w	sl, r4, r8
  40cda8:	f000 8155 	beq.w	40d056 <_malloc_r+0x4c2>
  40cdac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40cdb0:	330f      	adds	r3, #15
  40cdb2:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40cdb6:	f02b 0b0f 	bic.w	fp, fp, #15
  40cdba:	4659      	mov	r1, fp
  40cdbc:	4628      	mov	r0, r5
  40cdbe:	f000 feff 	bl	40dbc0 <_sbrk_r>
  40cdc2:	1c41      	adds	r1, r0, #1
  40cdc4:	4602      	mov	r2, r0
  40cdc6:	f000 80fc 	beq.w	40cfc2 <_malloc_r+0x42e>
  40cdca:	4582      	cmp	sl, r0
  40cdcc:	f200 80f7 	bhi.w	40cfbe <_malloc_r+0x42a>
  40cdd0:	4b43      	ldr	r3, [pc, #268]	; (40cee0 <_malloc_r+0x34c>)
  40cdd2:	6819      	ldr	r1, [r3, #0]
  40cdd4:	4459      	add	r1, fp
  40cdd6:	6019      	str	r1, [r3, #0]
  40cdd8:	f000 814d 	beq.w	40d076 <_malloc_r+0x4e2>
  40cddc:	f8d9 0000 	ldr.w	r0, [r9]
  40cde0:	3001      	adds	r0, #1
  40cde2:	bf1b      	ittet	ne
  40cde4:	eba2 0a0a 	subne.w	sl, r2, sl
  40cde8:	4451      	addne	r1, sl
  40cdea:	f8c9 2000 	streq.w	r2, [r9]
  40cdee:	6019      	strne	r1, [r3, #0]
  40cdf0:	f012 0107 	ands.w	r1, r2, #7
  40cdf4:	f000 8115 	beq.w	40d022 <_malloc_r+0x48e>
  40cdf8:	f1c1 0008 	rsb	r0, r1, #8
  40cdfc:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40ce00:	4402      	add	r2, r0
  40ce02:	3108      	adds	r1, #8
  40ce04:	eb02 090b 	add.w	r9, r2, fp
  40ce08:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40ce0c:	eba1 0909 	sub.w	r9, r1, r9
  40ce10:	4649      	mov	r1, r9
  40ce12:	4628      	mov	r0, r5
  40ce14:	9301      	str	r3, [sp, #4]
  40ce16:	9200      	str	r2, [sp, #0]
  40ce18:	f000 fed2 	bl	40dbc0 <_sbrk_r>
  40ce1c:	1c43      	adds	r3, r0, #1
  40ce1e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40ce22:	f000 8143 	beq.w	40d0ac <_malloc_r+0x518>
  40ce26:	1a80      	subs	r0, r0, r2
  40ce28:	4448      	add	r0, r9
  40ce2a:	f040 0001 	orr.w	r0, r0, #1
  40ce2e:	6819      	ldr	r1, [r3, #0]
  40ce30:	60ba      	str	r2, [r7, #8]
  40ce32:	4449      	add	r1, r9
  40ce34:	42bc      	cmp	r4, r7
  40ce36:	6050      	str	r0, [r2, #4]
  40ce38:	6019      	str	r1, [r3, #0]
  40ce3a:	d017      	beq.n	40ce6c <_malloc_r+0x2d8>
  40ce3c:	f1b8 0f0f 	cmp.w	r8, #15
  40ce40:	f240 80fb 	bls.w	40d03a <_malloc_r+0x4a6>
  40ce44:	6860      	ldr	r0, [r4, #4]
  40ce46:	f1a8 020c 	sub.w	r2, r8, #12
  40ce4a:	f022 0207 	bic.w	r2, r2, #7
  40ce4e:	eb04 0e02 	add.w	lr, r4, r2
  40ce52:	f000 0001 	and.w	r0, r0, #1
  40ce56:	f04f 0c05 	mov.w	ip, #5
  40ce5a:	4310      	orrs	r0, r2
  40ce5c:	2a0f      	cmp	r2, #15
  40ce5e:	6060      	str	r0, [r4, #4]
  40ce60:	f8ce c004 	str.w	ip, [lr, #4]
  40ce64:	f8ce c008 	str.w	ip, [lr, #8]
  40ce68:	f200 8117 	bhi.w	40d09a <_malloc_r+0x506>
  40ce6c:	4b1d      	ldr	r3, [pc, #116]	; (40cee4 <_malloc_r+0x350>)
  40ce6e:	68bc      	ldr	r4, [r7, #8]
  40ce70:	681a      	ldr	r2, [r3, #0]
  40ce72:	4291      	cmp	r1, r2
  40ce74:	bf88      	it	hi
  40ce76:	6019      	strhi	r1, [r3, #0]
  40ce78:	4b1b      	ldr	r3, [pc, #108]	; (40cee8 <_malloc_r+0x354>)
  40ce7a:	681a      	ldr	r2, [r3, #0]
  40ce7c:	4291      	cmp	r1, r2
  40ce7e:	6862      	ldr	r2, [r4, #4]
  40ce80:	bf88      	it	hi
  40ce82:	6019      	strhi	r1, [r3, #0]
  40ce84:	f022 0203 	bic.w	r2, r2, #3
  40ce88:	4296      	cmp	r6, r2
  40ce8a:	eba2 0306 	sub.w	r3, r2, r6
  40ce8e:	d801      	bhi.n	40ce94 <_malloc_r+0x300>
  40ce90:	2b0f      	cmp	r3, #15
  40ce92:	dc04      	bgt.n	40ce9e <_malloc_r+0x30a>
  40ce94:	4628      	mov	r0, r5
  40ce96:	f000 f9ed 	bl	40d274 <__malloc_unlock>
  40ce9a:	2400      	movs	r4, #0
  40ce9c:	e740      	b.n	40cd20 <_malloc_r+0x18c>
  40ce9e:	19a2      	adds	r2, r4, r6
  40cea0:	f043 0301 	orr.w	r3, r3, #1
  40cea4:	f046 0601 	orr.w	r6, r6, #1
  40cea8:	6066      	str	r6, [r4, #4]
  40ceaa:	4628      	mov	r0, r5
  40ceac:	60ba      	str	r2, [r7, #8]
  40ceae:	6053      	str	r3, [r2, #4]
  40ceb0:	f000 f9e0 	bl	40d274 <__malloc_unlock>
  40ceb4:	3408      	adds	r4, #8
  40ceb6:	4620      	mov	r0, r4
  40ceb8:	b003      	add	sp, #12
  40ceba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cebe:	2b14      	cmp	r3, #20
  40cec0:	d971      	bls.n	40cfa6 <_malloc_r+0x412>
  40cec2:	2b54      	cmp	r3, #84	; 0x54
  40cec4:	f200 80a3 	bhi.w	40d00e <_malloc_r+0x47a>
  40cec8:	0b33      	lsrs	r3, r6, #12
  40ceca:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40cece:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40ced2:	00c3      	lsls	r3, r0, #3
  40ced4:	e680      	b.n	40cbd8 <_malloc_r+0x44>
  40ced6:	bf00      	nop
  40ced8:	20400494 	.word	0x20400494
  40cedc:	20403920 	.word	0x20403920
  40cee0:	204038f0 	.word	0x204038f0
  40cee4:	20403918 	.word	0x20403918
  40cee8:	2040391c 	.word	0x2040391c
  40ceec:	2040049c 	.word	0x2040049c
  40cef0:	2040089c 	.word	0x2040089c
  40cef4:	0a5a      	lsrs	r2, r3, #9
  40cef6:	2a04      	cmp	r2, #4
  40cef8:	d95b      	bls.n	40cfb2 <_malloc_r+0x41e>
  40cefa:	2a14      	cmp	r2, #20
  40cefc:	f200 80ae 	bhi.w	40d05c <_malloc_r+0x4c8>
  40cf00:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40cf04:	00c9      	lsls	r1, r1, #3
  40cf06:	325b      	adds	r2, #91	; 0x5b
  40cf08:	eb07 0c01 	add.w	ip, r7, r1
  40cf0c:	5879      	ldr	r1, [r7, r1]
  40cf0e:	f1ac 0c08 	sub.w	ip, ip, #8
  40cf12:	458c      	cmp	ip, r1
  40cf14:	f000 8088 	beq.w	40d028 <_malloc_r+0x494>
  40cf18:	684a      	ldr	r2, [r1, #4]
  40cf1a:	f022 0203 	bic.w	r2, r2, #3
  40cf1e:	4293      	cmp	r3, r2
  40cf20:	d273      	bcs.n	40d00a <_malloc_r+0x476>
  40cf22:	6889      	ldr	r1, [r1, #8]
  40cf24:	458c      	cmp	ip, r1
  40cf26:	d1f7      	bne.n	40cf18 <_malloc_r+0x384>
  40cf28:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40cf2c:	687b      	ldr	r3, [r7, #4]
  40cf2e:	60e2      	str	r2, [r4, #12]
  40cf30:	f8c4 c008 	str.w	ip, [r4, #8]
  40cf34:	6094      	str	r4, [r2, #8]
  40cf36:	f8cc 400c 	str.w	r4, [ip, #12]
  40cf3a:	e68f      	b.n	40cc5c <_malloc_r+0xc8>
  40cf3c:	19a1      	adds	r1, r4, r6
  40cf3e:	f046 0c01 	orr.w	ip, r6, #1
  40cf42:	f042 0601 	orr.w	r6, r2, #1
  40cf46:	f8c4 c004 	str.w	ip, [r4, #4]
  40cf4a:	4628      	mov	r0, r5
  40cf4c:	6179      	str	r1, [r7, #20]
  40cf4e:	6139      	str	r1, [r7, #16]
  40cf50:	f8c1 e00c 	str.w	lr, [r1, #12]
  40cf54:	f8c1 e008 	str.w	lr, [r1, #8]
  40cf58:	604e      	str	r6, [r1, #4]
  40cf5a:	50e2      	str	r2, [r4, r3]
  40cf5c:	f000 f98a 	bl	40d274 <__malloc_unlock>
  40cf60:	3408      	adds	r4, #8
  40cf62:	e6dd      	b.n	40cd20 <_malloc_r+0x18c>
  40cf64:	687b      	ldr	r3, [r7, #4]
  40cf66:	e679      	b.n	40cc5c <_malloc_r+0xc8>
  40cf68:	f108 0801 	add.w	r8, r8, #1
  40cf6c:	f018 0f03 	tst.w	r8, #3
  40cf70:	f10c 0c08 	add.w	ip, ip, #8
  40cf74:	f47f ae85 	bne.w	40cc82 <_malloc_r+0xee>
  40cf78:	e02d      	b.n	40cfd6 <_malloc_r+0x442>
  40cf7a:	68dc      	ldr	r4, [r3, #12]
  40cf7c:	42a3      	cmp	r3, r4
  40cf7e:	bf08      	it	eq
  40cf80:	3002      	addeq	r0, #2
  40cf82:	f43f ae3e 	beq.w	40cc02 <_malloc_r+0x6e>
  40cf86:	e6bb      	b.n	40cd00 <_malloc_r+0x16c>
  40cf88:	4419      	add	r1, r3
  40cf8a:	461c      	mov	r4, r3
  40cf8c:	684a      	ldr	r2, [r1, #4]
  40cf8e:	68db      	ldr	r3, [r3, #12]
  40cf90:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40cf94:	f042 0201 	orr.w	r2, r2, #1
  40cf98:	604a      	str	r2, [r1, #4]
  40cf9a:	4628      	mov	r0, r5
  40cf9c:	60f3      	str	r3, [r6, #12]
  40cf9e:	609e      	str	r6, [r3, #8]
  40cfa0:	f000 f968 	bl	40d274 <__malloc_unlock>
  40cfa4:	e6bc      	b.n	40cd20 <_malloc_r+0x18c>
  40cfa6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40cfaa:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40cfae:	00c3      	lsls	r3, r0, #3
  40cfb0:	e612      	b.n	40cbd8 <_malloc_r+0x44>
  40cfb2:	099a      	lsrs	r2, r3, #6
  40cfb4:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40cfb8:	00c9      	lsls	r1, r1, #3
  40cfba:	3238      	adds	r2, #56	; 0x38
  40cfbc:	e7a4      	b.n	40cf08 <_malloc_r+0x374>
  40cfbe:	42bc      	cmp	r4, r7
  40cfc0:	d054      	beq.n	40d06c <_malloc_r+0x4d8>
  40cfc2:	68bc      	ldr	r4, [r7, #8]
  40cfc4:	6862      	ldr	r2, [r4, #4]
  40cfc6:	f022 0203 	bic.w	r2, r2, #3
  40cfca:	e75d      	b.n	40ce88 <_malloc_r+0x2f4>
  40cfcc:	f859 3908 	ldr.w	r3, [r9], #-8
  40cfd0:	4599      	cmp	r9, r3
  40cfd2:	f040 8086 	bne.w	40d0e2 <_malloc_r+0x54e>
  40cfd6:	f010 0f03 	tst.w	r0, #3
  40cfda:	f100 30ff 	add.w	r0, r0, #4294967295
  40cfde:	d1f5      	bne.n	40cfcc <_malloc_r+0x438>
  40cfe0:	687b      	ldr	r3, [r7, #4]
  40cfe2:	ea23 0304 	bic.w	r3, r3, r4
  40cfe6:	607b      	str	r3, [r7, #4]
  40cfe8:	0064      	lsls	r4, r4, #1
  40cfea:	429c      	cmp	r4, r3
  40cfec:	f63f aec7 	bhi.w	40cd7e <_malloc_r+0x1ea>
  40cff0:	2c00      	cmp	r4, #0
  40cff2:	f43f aec4 	beq.w	40cd7e <_malloc_r+0x1ea>
  40cff6:	421c      	tst	r4, r3
  40cff8:	4640      	mov	r0, r8
  40cffa:	f47f ae3e 	bne.w	40cc7a <_malloc_r+0xe6>
  40cffe:	0064      	lsls	r4, r4, #1
  40d000:	421c      	tst	r4, r3
  40d002:	f100 0004 	add.w	r0, r0, #4
  40d006:	d0fa      	beq.n	40cffe <_malloc_r+0x46a>
  40d008:	e637      	b.n	40cc7a <_malloc_r+0xe6>
  40d00a:	468c      	mov	ip, r1
  40d00c:	e78c      	b.n	40cf28 <_malloc_r+0x394>
  40d00e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40d012:	d815      	bhi.n	40d040 <_malloc_r+0x4ac>
  40d014:	0bf3      	lsrs	r3, r6, #15
  40d016:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40d01a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40d01e:	00c3      	lsls	r3, r0, #3
  40d020:	e5da      	b.n	40cbd8 <_malloc_r+0x44>
  40d022:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40d026:	e6ed      	b.n	40ce04 <_malloc_r+0x270>
  40d028:	687b      	ldr	r3, [r7, #4]
  40d02a:	1092      	asrs	r2, r2, #2
  40d02c:	2101      	movs	r1, #1
  40d02e:	fa01 f202 	lsl.w	r2, r1, r2
  40d032:	4313      	orrs	r3, r2
  40d034:	607b      	str	r3, [r7, #4]
  40d036:	4662      	mov	r2, ip
  40d038:	e779      	b.n	40cf2e <_malloc_r+0x39a>
  40d03a:	2301      	movs	r3, #1
  40d03c:	6053      	str	r3, [r2, #4]
  40d03e:	e729      	b.n	40ce94 <_malloc_r+0x300>
  40d040:	f240 5254 	movw	r2, #1364	; 0x554
  40d044:	4293      	cmp	r3, r2
  40d046:	d822      	bhi.n	40d08e <_malloc_r+0x4fa>
  40d048:	0cb3      	lsrs	r3, r6, #18
  40d04a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40d04e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40d052:	00c3      	lsls	r3, r0, #3
  40d054:	e5c0      	b.n	40cbd8 <_malloc_r+0x44>
  40d056:	f103 0b10 	add.w	fp, r3, #16
  40d05a:	e6ae      	b.n	40cdba <_malloc_r+0x226>
  40d05c:	2a54      	cmp	r2, #84	; 0x54
  40d05e:	d829      	bhi.n	40d0b4 <_malloc_r+0x520>
  40d060:	0b1a      	lsrs	r2, r3, #12
  40d062:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40d066:	00c9      	lsls	r1, r1, #3
  40d068:	326e      	adds	r2, #110	; 0x6e
  40d06a:	e74d      	b.n	40cf08 <_malloc_r+0x374>
  40d06c:	4b20      	ldr	r3, [pc, #128]	; (40d0f0 <_malloc_r+0x55c>)
  40d06e:	6819      	ldr	r1, [r3, #0]
  40d070:	4459      	add	r1, fp
  40d072:	6019      	str	r1, [r3, #0]
  40d074:	e6b2      	b.n	40cddc <_malloc_r+0x248>
  40d076:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40d07a:	2800      	cmp	r0, #0
  40d07c:	f47f aeae 	bne.w	40cddc <_malloc_r+0x248>
  40d080:	eb08 030b 	add.w	r3, r8, fp
  40d084:	68ba      	ldr	r2, [r7, #8]
  40d086:	f043 0301 	orr.w	r3, r3, #1
  40d08a:	6053      	str	r3, [r2, #4]
  40d08c:	e6ee      	b.n	40ce6c <_malloc_r+0x2d8>
  40d08e:	207f      	movs	r0, #127	; 0x7f
  40d090:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40d094:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40d098:	e59e      	b.n	40cbd8 <_malloc_r+0x44>
  40d09a:	f104 0108 	add.w	r1, r4, #8
  40d09e:	4628      	mov	r0, r5
  40d0a0:	9300      	str	r3, [sp, #0]
  40d0a2:	f7ff fa59 	bl	40c558 <_free_r>
  40d0a6:	9b00      	ldr	r3, [sp, #0]
  40d0a8:	6819      	ldr	r1, [r3, #0]
  40d0aa:	e6df      	b.n	40ce6c <_malloc_r+0x2d8>
  40d0ac:	2001      	movs	r0, #1
  40d0ae:	f04f 0900 	mov.w	r9, #0
  40d0b2:	e6bc      	b.n	40ce2e <_malloc_r+0x29a>
  40d0b4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40d0b8:	d805      	bhi.n	40d0c6 <_malloc_r+0x532>
  40d0ba:	0bda      	lsrs	r2, r3, #15
  40d0bc:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40d0c0:	00c9      	lsls	r1, r1, #3
  40d0c2:	3277      	adds	r2, #119	; 0x77
  40d0c4:	e720      	b.n	40cf08 <_malloc_r+0x374>
  40d0c6:	f240 5154 	movw	r1, #1364	; 0x554
  40d0ca:	428a      	cmp	r2, r1
  40d0cc:	d805      	bhi.n	40d0da <_malloc_r+0x546>
  40d0ce:	0c9a      	lsrs	r2, r3, #18
  40d0d0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40d0d4:	00c9      	lsls	r1, r1, #3
  40d0d6:	327c      	adds	r2, #124	; 0x7c
  40d0d8:	e716      	b.n	40cf08 <_malloc_r+0x374>
  40d0da:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40d0de:	227e      	movs	r2, #126	; 0x7e
  40d0e0:	e712      	b.n	40cf08 <_malloc_r+0x374>
  40d0e2:	687b      	ldr	r3, [r7, #4]
  40d0e4:	e780      	b.n	40cfe8 <_malloc_r+0x454>
  40d0e6:	08f0      	lsrs	r0, r6, #3
  40d0e8:	f106 0308 	add.w	r3, r6, #8
  40d0ec:	e600      	b.n	40ccf0 <_malloc_r+0x15c>
  40d0ee:	bf00      	nop
  40d0f0:	204038f0 	.word	0x204038f0
	...

0040d100 <memchr>:
  40d100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40d104:	2a10      	cmp	r2, #16
  40d106:	db2b      	blt.n	40d160 <memchr+0x60>
  40d108:	f010 0f07 	tst.w	r0, #7
  40d10c:	d008      	beq.n	40d120 <memchr+0x20>
  40d10e:	f810 3b01 	ldrb.w	r3, [r0], #1
  40d112:	3a01      	subs	r2, #1
  40d114:	428b      	cmp	r3, r1
  40d116:	d02d      	beq.n	40d174 <memchr+0x74>
  40d118:	f010 0f07 	tst.w	r0, #7
  40d11c:	b342      	cbz	r2, 40d170 <memchr+0x70>
  40d11e:	d1f6      	bne.n	40d10e <memchr+0xe>
  40d120:	b4f0      	push	{r4, r5, r6, r7}
  40d122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40d126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40d12a:	f022 0407 	bic.w	r4, r2, #7
  40d12e:	f07f 0700 	mvns.w	r7, #0
  40d132:	2300      	movs	r3, #0
  40d134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40d138:	3c08      	subs	r4, #8
  40d13a:	ea85 0501 	eor.w	r5, r5, r1
  40d13e:	ea86 0601 	eor.w	r6, r6, r1
  40d142:	fa85 f547 	uadd8	r5, r5, r7
  40d146:	faa3 f587 	sel	r5, r3, r7
  40d14a:	fa86 f647 	uadd8	r6, r6, r7
  40d14e:	faa5 f687 	sel	r6, r5, r7
  40d152:	b98e      	cbnz	r6, 40d178 <memchr+0x78>
  40d154:	d1ee      	bne.n	40d134 <memchr+0x34>
  40d156:	bcf0      	pop	{r4, r5, r6, r7}
  40d158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40d15c:	f002 0207 	and.w	r2, r2, #7
  40d160:	b132      	cbz	r2, 40d170 <memchr+0x70>
  40d162:	f810 3b01 	ldrb.w	r3, [r0], #1
  40d166:	3a01      	subs	r2, #1
  40d168:	ea83 0301 	eor.w	r3, r3, r1
  40d16c:	b113      	cbz	r3, 40d174 <memchr+0x74>
  40d16e:	d1f8      	bne.n	40d162 <memchr+0x62>
  40d170:	2000      	movs	r0, #0
  40d172:	4770      	bx	lr
  40d174:	3801      	subs	r0, #1
  40d176:	4770      	bx	lr
  40d178:	2d00      	cmp	r5, #0
  40d17a:	bf06      	itte	eq
  40d17c:	4635      	moveq	r5, r6
  40d17e:	3803      	subeq	r0, #3
  40d180:	3807      	subne	r0, #7
  40d182:	f015 0f01 	tst.w	r5, #1
  40d186:	d107      	bne.n	40d198 <memchr+0x98>
  40d188:	3001      	adds	r0, #1
  40d18a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40d18e:	bf02      	ittt	eq
  40d190:	3001      	addeq	r0, #1
  40d192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40d196:	3001      	addeq	r0, #1
  40d198:	bcf0      	pop	{r4, r5, r6, r7}
  40d19a:	3801      	subs	r0, #1
  40d19c:	4770      	bx	lr
  40d19e:	bf00      	nop

0040d1a0 <memmove>:
  40d1a0:	4288      	cmp	r0, r1
  40d1a2:	b5f0      	push	{r4, r5, r6, r7, lr}
  40d1a4:	d90d      	bls.n	40d1c2 <memmove+0x22>
  40d1a6:	188b      	adds	r3, r1, r2
  40d1a8:	4298      	cmp	r0, r3
  40d1aa:	d20a      	bcs.n	40d1c2 <memmove+0x22>
  40d1ac:	1884      	adds	r4, r0, r2
  40d1ae:	2a00      	cmp	r2, #0
  40d1b0:	d051      	beq.n	40d256 <memmove+0xb6>
  40d1b2:	4622      	mov	r2, r4
  40d1b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40d1b8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40d1bc:	4299      	cmp	r1, r3
  40d1be:	d1f9      	bne.n	40d1b4 <memmove+0x14>
  40d1c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40d1c2:	2a0f      	cmp	r2, #15
  40d1c4:	d948      	bls.n	40d258 <memmove+0xb8>
  40d1c6:	ea41 0300 	orr.w	r3, r1, r0
  40d1ca:	079b      	lsls	r3, r3, #30
  40d1cc:	d146      	bne.n	40d25c <memmove+0xbc>
  40d1ce:	f100 0410 	add.w	r4, r0, #16
  40d1d2:	f101 0310 	add.w	r3, r1, #16
  40d1d6:	4615      	mov	r5, r2
  40d1d8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40d1dc:	f844 6c10 	str.w	r6, [r4, #-16]
  40d1e0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40d1e4:	f844 6c0c 	str.w	r6, [r4, #-12]
  40d1e8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40d1ec:	f844 6c08 	str.w	r6, [r4, #-8]
  40d1f0:	3d10      	subs	r5, #16
  40d1f2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40d1f6:	f844 6c04 	str.w	r6, [r4, #-4]
  40d1fa:	2d0f      	cmp	r5, #15
  40d1fc:	f103 0310 	add.w	r3, r3, #16
  40d200:	f104 0410 	add.w	r4, r4, #16
  40d204:	d8e8      	bhi.n	40d1d8 <memmove+0x38>
  40d206:	f1a2 0310 	sub.w	r3, r2, #16
  40d20a:	f023 030f 	bic.w	r3, r3, #15
  40d20e:	f002 0e0f 	and.w	lr, r2, #15
  40d212:	3310      	adds	r3, #16
  40d214:	f1be 0f03 	cmp.w	lr, #3
  40d218:	4419      	add	r1, r3
  40d21a:	4403      	add	r3, r0
  40d21c:	d921      	bls.n	40d262 <memmove+0xc2>
  40d21e:	1f1e      	subs	r6, r3, #4
  40d220:	460d      	mov	r5, r1
  40d222:	4674      	mov	r4, lr
  40d224:	3c04      	subs	r4, #4
  40d226:	f855 7b04 	ldr.w	r7, [r5], #4
  40d22a:	f846 7f04 	str.w	r7, [r6, #4]!
  40d22e:	2c03      	cmp	r4, #3
  40d230:	d8f8      	bhi.n	40d224 <memmove+0x84>
  40d232:	f1ae 0404 	sub.w	r4, lr, #4
  40d236:	f024 0403 	bic.w	r4, r4, #3
  40d23a:	3404      	adds	r4, #4
  40d23c:	4421      	add	r1, r4
  40d23e:	4423      	add	r3, r4
  40d240:	f002 0203 	and.w	r2, r2, #3
  40d244:	b162      	cbz	r2, 40d260 <memmove+0xc0>
  40d246:	3b01      	subs	r3, #1
  40d248:	440a      	add	r2, r1
  40d24a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40d24e:	f803 4f01 	strb.w	r4, [r3, #1]!
  40d252:	428a      	cmp	r2, r1
  40d254:	d1f9      	bne.n	40d24a <memmove+0xaa>
  40d256:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40d258:	4603      	mov	r3, r0
  40d25a:	e7f3      	b.n	40d244 <memmove+0xa4>
  40d25c:	4603      	mov	r3, r0
  40d25e:	e7f2      	b.n	40d246 <memmove+0xa6>
  40d260:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40d262:	4672      	mov	r2, lr
  40d264:	e7ee      	b.n	40d244 <memmove+0xa4>
  40d266:	bf00      	nop

0040d268 <__malloc_lock>:
  40d268:	4801      	ldr	r0, [pc, #4]	; (40d270 <__malloc_lock+0x8>)
  40d26a:	f7ff bc0f 	b.w	40ca8c <__retarget_lock_acquire_recursive>
  40d26e:	bf00      	nop
  40d270:	20404a5c 	.word	0x20404a5c

0040d274 <__malloc_unlock>:
  40d274:	4801      	ldr	r0, [pc, #4]	; (40d27c <__malloc_unlock+0x8>)
  40d276:	f7ff bc0b 	b.w	40ca90 <__retarget_lock_release_recursive>
  40d27a:	bf00      	nop
  40d27c:	20404a5c 	.word	0x20404a5c

0040d280 <_Balloc>:
  40d280:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40d282:	b570      	push	{r4, r5, r6, lr}
  40d284:	4605      	mov	r5, r0
  40d286:	460c      	mov	r4, r1
  40d288:	b14b      	cbz	r3, 40d29e <_Balloc+0x1e>
  40d28a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40d28e:	b180      	cbz	r0, 40d2b2 <_Balloc+0x32>
  40d290:	6802      	ldr	r2, [r0, #0]
  40d292:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40d296:	2300      	movs	r3, #0
  40d298:	6103      	str	r3, [r0, #16]
  40d29a:	60c3      	str	r3, [r0, #12]
  40d29c:	bd70      	pop	{r4, r5, r6, pc}
  40d29e:	2221      	movs	r2, #33	; 0x21
  40d2a0:	2104      	movs	r1, #4
  40d2a2:	f000 fe97 	bl	40dfd4 <_calloc_r>
  40d2a6:	64e8      	str	r0, [r5, #76]	; 0x4c
  40d2a8:	4603      	mov	r3, r0
  40d2aa:	2800      	cmp	r0, #0
  40d2ac:	d1ed      	bne.n	40d28a <_Balloc+0xa>
  40d2ae:	2000      	movs	r0, #0
  40d2b0:	bd70      	pop	{r4, r5, r6, pc}
  40d2b2:	2101      	movs	r1, #1
  40d2b4:	fa01 f604 	lsl.w	r6, r1, r4
  40d2b8:	1d72      	adds	r2, r6, #5
  40d2ba:	4628      	mov	r0, r5
  40d2bc:	0092      	lsls	r2, r2, #2
  40d2be:	f000 fe89 	bl	40dfd4 <_calloc_r>
  40d2c2:	2800      	cmp	r0, #0
  40d2c4:	d0f3      	beq.n	40d2ae <_Balloc+0x2e>
  40d2c6:	6044      	str	r4, [r0, #4]
  40d2c8:	6086      	str	r6, [r0, #8]
  40d2ca:	e7e4      	b.n	40d296 <_Balloc+0x16>

0040d2cc <_Bfree>:
  40d2cc:	b131      	cbz	r1, 40d2dc <_Bfree+0x10>
  40d2ce:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40d2d0:	684a      	ldr	r2, [r1, #4]
  40d2d2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40d2d6:	6008      	str	r0, [r1, #0]
  40d2d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40d2dc:	4770      	bx	lr
  40d2de:	bf00      	nop

0040d2e0 <__multadd>:
  40d2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  40d2e2:	690c      	ldr	r4, [r1, #16]
  40d2e4:	b083      	sub	sp, #12
  40d2e6:	460d      	mov	r5, r1
  40d2e8:	4606      	mov	r6, r0
  40d2ea:	f101 0e14 	add.w	lr, r1, #20
  40d2ee:	2700      	movs	r7, #0
  40d2f0:	f8de 0000 	ldr.w	r0, [lr]
  40d2f4:	b281      	uxth	r1, r0
  40d2f6:	fb02 3301 	mla	r3, r2, r1, r3
  40d2fa:	0c01      	lsrs	r1, r0, #16
  40d2fc:	0c18      	lsrs	r0, r3, #16
  40d2fe:	fb02 0101 	mla	r1, r2, r1, r0
  40d302:	b29b      	uxth	r3, r3
  40d304:	3701      	adds	r7, #1
  40d306:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  40d30a:	42bc      	cmp	r4, r7
  40d30c:	f84e 3b04 	str.w	r3, [lr], #4
  40d310:	ea4f 4311 	mov.w	r3, r1, lsr #16
  40d314:	dcec      	bgt.n	40d2f0 <__multadd+0x10>
  40d316:	b13b      	cbz	r3, 40d328 <__multadd+0x48>
  40d318:	68aa      	ldr	r2, [r5, #8]
  40d31a:	4294      	cmp	r4, r2
  40d31c:	da07      	bge.n	40d32e <__multadd+0x4e>
  40d31e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40d322:	3401      	adds	r4, #1
  40d324:	6153      	str	r3, [r2, #20]
  40d326:	612c      	str	r4, [r5, #16]
  40d328:	4628      	mov	r0, r5
  40d32a:	b003      	add	sp, #12
  40d32c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40d32e:	6869      	ldr	r1, [r5, #4]
  40d330:	9301      	str	r3, [sp, #4]
  40d332:	3101      	adds	r1, #1
  40d334:	4630      	mov	r0, r6
  40d336:	f7ff ffa3 	bl	40d280 <_Balloc>
  40d33a:	692a      	ldr	r2, [r5, #16]
  40d33c:	3202      	adds	r2, #2
  40d33e:	f105 010c 	add.w	r1, r5, #12
  40d342:	4607      	mov	r7, r0
  40d344:	0092      	lsls	r2, r2, #2
  40d346:	300c      	adds	r0, #12
  40d348:	f7fa fc52 	bl	407bf0 <memcpy>
  40d34c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40d34e:	6869      	ldr	r1, [r5, #4]
  40d350:	9b01      	ldr	r3, [sp, #4]
  40d352:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40d356:	6028      	str	r0, [r5, #0]
  40d358:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  40d35c:	463d      	mov	r5, r7
  40d35e:	e7de      	b.n	40d31e <__multadd+0x3e>

0040d360 <__hi0bits>:
  40d360:	0c02      	lsrs	r2, r0, #16
  40d362:	0412      	lsls	r2, r2, #16
  40d364:	4603      	mov	r3, r0
  40d366:	b9b2      	cbnz	r2, 40d396 <__hi0bits+0x36>
  40d368:	0403      	lsls	r3, r0, #16
  40d36a:	2010      	movs	r0, #16
  40d36c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40d370:	bf04      	itt	eq
  40d372:	021b      	lsleq	r3, r3, #8
  40d374:	3008      	addeq	r0, #8
  40d376:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  40d37a:	bf04      	itt	eq
  40d37c:	011b      	lsleq	r3, r3, #4
  40d37e:	3004      	addeq	r0, #4
  40d380:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40d384:	bf04      	itt	eq
  40d386:	009b      	lsleq	r3, r3, #2
  40d388:	3002      	addeq	r0, #2
  40d38a:	2b00      	cmp	r3, #0
  40d38c:	db02      	blt.n	40d394 <__hi0bits+0x34>
  40d38e:	005b      	lsls	r3, r3, #1
  40d390:	d403      	bmi.n	40d39a <__hi0bits+0x3a>
  40d392:	2020      	movs	r0, #32
  40d394:	4770      	bx	lr
  40d396:	2000      	movs	r0, #0
  40d398:	e7e8      	b.n	40d36c <__hi0bits+0xc>
  40d39a:	3001      	adds	r0, #1
  40d39c:	4770      	bx	lr
  40d39e:	bf00      	nop

0040d3a0 <__lo0bits>:
  40d3a0:	6803      	ldr	r3, [r0, #0]
  40d3a2:	f013 0207 	ands.w	r2, r3, #7
  40d3a6:	4601      	mov	r1, r0
  40d3a8:	d007      	beq.n	40d3ba <__lo0bits+0x1a>
  40d3aa:	07da      	lsls	r2, r3, #31
  40d3ac:	d421      	bmi.n	40d3f2 <__lo0bits+0x52>
  40d3ae:	0798      	lsls	r0, r3, #30
  40d3b0:	d421      	bmi.n	40d3f6 <__lo0bits+0x56>
  40d3b2:	089b      	lsrs	r3, r3, #2
  40d3b4:	600b      	str	r3, [r1, #0]
  40d3b6:	2002      	movs	r0, #2
  40d3b8:	4770      	bx	lr
  40d3ba:	b298      	uxth	r0, r3
  40d3bc:	b198      	cbz	r0, 40d3e6 <__lo0bits+0x46>
  40d3be:	4610      	mov	r0, r2
  40d3c0:	f013 0fff 	tst.w	r3, #255	; 0xff
  40d3c4:	bf04      	itt	eq
  40d3c6:	0a1b      	lsreq	r3, r3, #8
  40d3c8:	3008      	addeq	r0, #8
  40d3ca:	071a      	lsls	r2, r3, #28
  40d3cc:	bf04      	itt	eq
  40d3ce:	091b      	lsreq	r3, r3, #4
  40d3d0:	3004      	addeq	r0, #4
  40d3d2:	079a      	lsls	r2, r3, #30
  40d3d4:	bf04      	itt	eq
  40d3d6:	089b      	lsreq	r3, r3, #2
  40d3d8:	3002      	addeq	r0, #2
  40d3da:	07da      	lsls	r2, r3, #31
  40d3dc:	d407      	bmi.n	40d3ee <__lo0bits+0x4e>
  40d3de:	085b      	lsrs	r3, r3, #1
  40d3e0:	d104      	bne.n	40d3ec <__lo0bits+0x4c>
  40d3e2:	2020      	movs	r0, #32
  40d3e4:	4770      	bx	lr
  40d3e6:	0c1b      	lsrs	r3, r3, #16
  40d3e8:	2010      	movs	r0, #16
  40d3ea:	e7e9      	b.n	40d3c0 <__lo0bits+0x20>
  40d3ec:	3001      	adds	r0, #1
  40d3ee:	600b      	str	r3, [r1, #0]
  40d3f0:	4770      	bx	lr
  40d3f2:	2000      	movs	r0, #0
  40d3f4:	4770      	bx	lr
  40d3f6:	085b      	lsrs	r3, r3, #1
  40d3f8:	600b      	str	r3, [r1, #0]
  40d3fa:	2001      	movs	r0, #1
  40d3fc:	4770      	bx	lr
  40d3fe:	bf00      	nop

0040d400 <__i2b>:
  40d400:	b510      	push	{r4, lr}
  40d402:	460c      	mov	r4, r1
  40d404:	2101      	movs	r1, #1
  40d406:	f7ff ff3b 	bl	40d280 <_Balloc>
  40d40a:	2201      	movs	r2, #1
  40d40c:	6144      	str	r4, [r0, #20]
  40d40e:	6102      	str	r2, [r0, #16]
  40d410:	bd10      	pop	{r4, pc}
  40d412:	bf00      	nop

0040d414 <__multiply>:
  40d414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d418:	690c      	ldr	r4, [r1, #16]
  40d41a:	6915      	ldr	r5, [r2, #16]
  40d41c:	42ac      	cmp	r4, r5
  40d41e:	b083      	sub	sp, #12
  40d420:	468b      	mov	fp, r1
  40d422:	4616      	mov	r6, r2
  40d424:	da04      	bge.n	40d430 <__multiply+0x1c>
  40d426:	4622      	mov	r2, r4
  40d428:	46b3      	mov	fp, r6
  40d42a:	462c      	mov	r4, r5
  40d42c:	460e      	mov	r6, r1
  40d42e:	4615      	mov	r5, r2
  40d430:	f8db 3008 	ldr.w	r3, [fp, #8]
  40d434:	f8db 1004 	ldr.w	r1, [fp, #4]
  40d438:	eb04 0805 	add.w	r8, r4, r5
  40d43c:	4598      	cmp	r8, r3
  40d43e:	bfc8      	it	gt
  40d440:	3101      	addgt	r1, #1
  40d442:	f7ff ff1d 	bl	40d280 <_Balloc>
  40d446:	f100 0914 	add.w	r9, r0, #20
  40d44a:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40d44e:	45d1      	cmp	r9, sl
  40d450:	9000      	str	r0, [sp, #0]
  40d452:	d205      	bcs.n	40d460 <__multiply+0x4c>
  40d454:	464b      	mov	r3, r9
  40d456:	2100      	movs	r1, #0
  40d458:	f843 1b04 	str.w	r1, [r3], #4
  40d45c:	459a      	cmp	sl, r3
  40d45e:	d8fb      	bhi.n	40d458 <__multiply+0x44>
  40d460:	f106 0c14 	add.w	ip, r6, #20
  40d464:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  40d468:	f10b 0b14 	add.w	fp, fp, #20
  40d46c:	459c      	cmp	ip, r3
  40d46e:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40d472:	d24c      	bcs.n	40d50e <__multiply+0xfa>
  40d474:	f8cd a004 	str.w	sl, [sp, #4]
  40d478:	469a      	mov	sl, r3
  40d47a:	f8dc 5000 	ldr.w	r5, [ip]
  40d47e:	b2af      	uxth	r7, r5
  40d480:	b1ef      	cbz	r7, 40d4be <__multiply+0xaa>
  40d482:	2100      	movs	r1, #0
  40d484:	464d      	mov	r5, r9
  40d486:	465e      	mov	r6, fp
  40d488:	460c      	mov	r4, r1
  40d48a:	f856 2b04 	ldr.w	r2, [r6], #4
  40d48e:	6828      	ldr	r0, [r5, #0]
  40d490:	b293      	uxth	r3, r2
  40d492:	b281      	uxth	r1, r0
  40d494:	fb07 1303 	mla	r3, r7, r3, r1
  40d498:	0c12      	lsrs	r2, r2, #16
  40d49a:	0c01      	lsrs	r1, r0, #16
  40d49c:	4423      	add	r3, r4
  40d49e:	fb07 1102 	mla	r1, r7, r2, r1
  40d4a2:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40d4a6:	b29b      	uxth	r3, r3
  40d4a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40d4ac:	45b6      	cmp	lr, r6
  40d4ae:	f845 3b04 	str.w	r3, [r5], #4
  40d4b2:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40d4b6:	d8e8      	bhi.n	40d48a <__multiply+0x76>
  40d4b8:	602c      	str	r4, [r5, #0]
  40d4ba:	f8dc 5000 	ldr.w	r5, [ip]
  40d4be:	0c2d      	lsrs	r5, r5, #16
  40d4c0:	d01d      	beq.n	40d4fe <__multiply+0xea>
  40d4c2:	f8d9 3000 	ldr.w	r3, [r9]
  40d4c6:	4648      	mov	r0, r9
  40d4c8:	461c      	mov	r4, r3
  40d4ca:	4659      	mov	r1, fp
  40d4cc:	2200      	movs	r2, #0
  40d4ce:	880e      	ldrh	r6, [r1, #0]
  40d4d0:	0c24      	lsrs	r4, r4, #16
  40d4d2:	fb05 4406 	mla	r4, r5, r6, r4
  40d4d6:	4422      	add	r2, r4
  40d4d8:	b29b      	uxth	r3, r3
  40d4da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40d4de:	f840 3b04 	str.w	r3, [r0], #4
  40d4e2:	f851 3b04 	ldr.w	r3, [r1], #4
  40d4e6:	6804      	ldr	r4, [r0, #0]
  40d4e8:	0c1b      	lsrs	r3, r3, #16
  40d4ea:	b2a6      	uxth	r6, r4
  40d4ec:	fb05 6303 	mla	r3, r5, r3, r6
  40d4f0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  40d4f4:	458e      	cmp	lr, r1
  40d4f6:	ea4f 4213 	mov.w	r2, r3, lsr #16
  40d4fa:	d8e8      	bhi.n	40d4ce <__multiply+0xba>
  40d4fc:	6003      	str	r3, [r0, #0]
  40d4fe:	f10c 0c04 	add.w	ip, ip, #4
  40d502:	45e2      	cmp	sl, ip
  40d504:	f109 0904 	add.w	r9, r9, #4
  40d508:	d8b7      	bhi.n	40d47a <__multiply+0x66>
  40d50a:	f8dd a004 	ldr.w	sl, [sp, #4]
  40d50e:	f1b8 0f00 	cmp.w	r8, #0
  40d512:	dd0b      	ble.n	40d52c <__multiply+0x118>
  40d514:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  40d518:	f1aa 0a04 	sub.w	sl, sl, #4
  40d51c:	b11b      	cbz	r3, 40d526 <__multiply+0x112>
  40d51e:	e005      	b.n	40d52c <__multiply+0x118>
  40d520:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  40d524:	b913      	cbnz	r3, 40d52c <__multiply+0x118>
  40d526:	f1b8 0801 	subs.w	r8, r8, #1
  40d52a:	d1f9      	bne.n	40d520 <__multiply+0x10c>
  40d52c:	9800      	ldr	r0, [sp, #0]
  40d52e:	f8c0 8010 	str.w	r8, [r0, #16]
  40d532:	b003      	add	sp, #12
  40d534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040d538 <__pow5mult>:
  40d538:	f012 0303 	ands.w	r3, r2, #3
  40d53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40d540:	4614      	mov	r4, r2
  40d542:	4607      	mov	r7, r0
  40d544:	d12e      	bne.n	40d5a4 <__pow5mult+0x6c>
  40d546:	460d      	mov	r5, r1
  40d548:	10a4      	asrs	r4, r4, #2
  40d54a:	d01c      	beq.n	40d586 <__pow5mult+0x4e>
  40d54c:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40d54e:	b396      	cbz	r6, 40d5b6 <__pow5mult+0x7e>
  40d550:	07e3      	lsls	r3, r4, #31
  40d552:	f04f 0800 	mov.w	r8, #0
  40d556:	d406      	bmi.n	40d566 <__pow5mult+0x2e>
  40d558:	1064      	asrs	r4, r4, #1
  40d55a:	d014      	beq.n	40d586 <__pow5mult+0x4e>
  40d55c:	6830      	ldr	r0, [r6, #0]
  40d55e:	b1a8      	cbz	r0, 40d58c <__pow5mult+0x54>
  40d560:	4606      	mov	r6, r0
  40d562:	07e3      	lsls	r3, r4, #31
  40d564:	d5f8      	bpl.n	40d558 <__pow5mult+0x20>
  40d566:	4632      	mov	r2, r6
  40d568:	4629      	mov	r1, r5
  40d56a:	4638      	mov	r0, r7
  40d56c:	f7ff ff52 	bl	40d414 <__multiply>
  40d570:	b1b5      	cbz	r5, 40d5a0 <__pow5mult+0x68>
  40d572:	686a      	ldr	r2, [r5, #4]
  40d574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40d576:	1064      	asrs	r4, r4, #1
  40d578:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40d57c:	6029      	str	r1, [r5, #0]
  40d57e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40d582:	4605      	mov	r5, r0
  40d584:	d1ea      	bne.n	40d55c <__pow5mult+0x24>
  40d586:	4628      	mov	r0, r5
  40d588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d58c:	4632      	mov	r2, r6
  40d58e:	4631      	mov	r1, r6
  40d590:	4638      	mov	r0, r7
  40d592:	f7ff ff3f 	bl	40d414 <__multiply>
  40d596:	6030      	str	r0, [r6, #0]
  40d598:	f8c0 8000 	str.w	r8, [r0]
  40d59c:	4606      	mov	r6, r0
  40d59e:	e7e0      	b.n	40d562 <__pow5mult+0x2a>
  40d5a0:	4605      	mov	r5, r0
  40d5a2:	e7d9      	b.n	40d558 <__pow5mult+0x20>
  40d5a4:	1e5a      	subs	r2, r3, #1
  40d5a6:	4d0b      	ldr	r5, [pc, #44]	; (40d5d4 <__pow5mult+0x9c>)
  40d5a8:	2300      	movs	r3, #0
  40d5aa:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40d5ae:	f7ff fe97 	bl	40d2e0 <__multadd>
  40d5b2:	4605      	mov	r5, r0
  40d5b4:	e7c8      	b.n	40d548 <__pow5mult+0x10>
  40d5b6:	2101      	movs	r1, #1
  40d5b8:	4638      	mov	r0, r7
  40d5ba:	f7ff fe61 	bl	40d280 <_Balloc>
  40d5be:	f240 2171 	movw	r1, #625	; 0x271
  40d5c2:	2201      	movs	r2, #1
  40d5c4:	2300      	movs	r3, #0
  40d5c6:	6141      	str	r1, [r0, #20]
  40d5c8:	6102      	str	r2, [r0, #16]
  40d5ca:	4606      	mov	r6, r0
  40d5cc:	64b8      	str	r0, [r7, #72]	; 0x48
  40d5ce:	6003      	str	r3, [r0, #0]
  40d5d0:	e7be      	b.n	40d550 <__pow5mult+0x18>
  40d5d2:	bf00      	nop
  40d5d4:	0040ee60 	.word	0x0040ee60

0040d5d8 <__lshift>:
  40d5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40d5dc:	4691      	mov	r9, r2
  40d5de:	690a      	ldr	r2, [r1, #16]
  40d5e0:	688b      	ldr	r3, [r1, #8]
  40d5e2:	ea4f 1469 	mov.w	r4, r9, asr #5
  40d5e6:	eb04 0802 	add.w	r8, r4, r2
  40d5ea:	f108 0501 	add.w	r5, r8, #1
  40d5ee:	429d      	cmp	r5, r3
  40d5f0:	460e      	mov	r6, r1
  40d5f2:	4607      	mov	r7, r0
  40d5f4:	6849      	ldr	r1, [r1, #4]
  40d5f6:	dd04      	ble.n	40d602 <__lshift+0x2a>
  40d5f8:	005b      	lsls	r3, r3, #1
  40d5fa:	429d      	cmp	r5, r3
  40d5fc:	f101 0101 	add.w	r1, r1, #1
  40d600:	dcfa      	bgt.n	40d5f8 <__lshift+0x20>
  40d602:	4638      	mov	r0, r7
  40d604:	f7ff fe3c 	bl	40d280 <_Balloc>
  40d608:	2c00      	cmp	r4, #0
  40d60a:	f100 0314 	add.w	r3, r0, #20
  40d60e:	dd06      	ble.n	40d61e <__lshift+0x46>
  40d610:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  40d614:	2100      	movs	r1, #0
  40d616:	f843 1b04 	str.w	r1, [r3], #4
  40d61a:	429a      	cmp	r2, r3
  40d61c:	d1fb      	bne.n	40d616 <__lshift+0x3e>
  40d61e:	6934      	ldr	r4, [r6, #16]
  40d620:	f106 0114 	add.w	r1, r6, #20
  40d624:	f019 091f 	ands.w	r9, r9, #31
  40d628:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  40d62c:	d01d      	beq.n	40d66a <__lshift+0x92>
  40d62e:	f1c9 0c20 	rsb	ip, r9, #32
  40d632:	2200      	movs	r2, #0
  40d634:	680c      	ldr	r4, [r1, #0]
  40d636:	fa04 f409 	lsl.w	r4, r4, r9
  40d63a:	4314      	orrs	r4, r2
  40d63c:	f843 4b04 	str.w	r4, [r3], #4
  40d640:	f851 2b04 	ldr.w	r2, [r1], #4
  40d644:	458e      	cmp	lr, r1
  40d646:	fa22 f20c 	lsr.w	r2, r2, ip
  40d64a:	d8f3      	bhi.n	40d634 <__lshift+0x5c>
  40d64c:	601a      	str	r2, [r3, #0]
  40d64e:	b10a      	cbz	r2, 40d654 <__lshift+0x7c>
  40d650:	f108 0502 	add.w	r5, r8, #2
  40d654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40d656:	6872      	ldr	r2, [r6, #4]
  40d658:	3d01      	subs	r5, #1
  40d65a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40d65e:	6105      	str	r5, [r0, #16]
  40d660:	6031      	str	r1, [r6, #0]
  40d662:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40d666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40d66a:	3b04      	subs	r3, #4
  40d66c:	f851 2b04 	ldr.w	r2, [r1], #4
  40d670:	f843 2f04 	str.w	r2, [r3, #4]!
  40d674:	458e      	cmp	lr, r1
  40d676:	d8f9      	bhi.n	40d66c <__lshift+0x94>
  40d678:	e7ec      	b.n	40d654 <__lshift+0x7c>
  40d67a:	bf00      	nop

0040d67c <__mcmp>:
  40d67c:	b430      	push	{r4, r5}
  40d67e:	690b      	ldr	r3, [r1, #16]
  40d680:	4605      	mov	r5, r0
  40d682:	6900      	ldr	r0, [r0, #16]
  40d684:	1ac0      	subs	r0, r0, r3
  40d686:	d10f      	bne.n	40d6a8 <__mcmp+0x2c>
  40d688:	009b      	lsls	r3, r3, #2
  40d68a:	3514      	adds	r5, #20
  40d68c:	3114      	adds	r1, #20
  40d68e:	4419      	add	r1, r3
  40d690:	442b      	add	r3, r5
  40d692:	e001      	b.n	40d698 <__mcmp+0x1c>
  40d694:	429d      	cmp	r5, r3
  40d696:	d207      	bcs.n	40d6a8 <__mcmp+0x2c>
  40d698:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40d69c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40d6a0:	4294      	cmp	r4, r2
  40d6a2:	d0f7      	beq.n	40d694 <__mcmp+0x18>
  40d6a4:	d302      	bcc.n	40d6ac <__mcmp+0x30>
  40d6a6:	2001      	movs	r0, #1
  40d6a8:	bc30      	pop	{r4, r5}
  40d6aa:	4770      	bx	lr
  40d6ac:	f04f 30ff 	mov.w	r0, #4294967295
  40d6b0:	e7fa      	b.n	40d6a8 <__mcmp+0x2c>
  40d6b2:	bf00      	nop

0040d6b4 <__mdiff>:
  40d6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40d6b8:	690f      	ldr	r7, [r1, #16]
  40d6ba:	460e      	mov	r6, r1
  40d6bc:	6911      	ldr	r1, [r2, #16]
  40d6be:	1a7f      	subs	r7, r7, r1
  40d6c0:	2f00      	cmp	r7, #0
  40d6c2:	4690      	mov	r8, r2
  40d6c4:	d117      	bne.n	40d6f6 <__mdiff+0x42>
  40d6c6:	0089      	lsls	r1, r1, #2
  40d6c8:	f106 0514 	add.w	r5, r6, #20
  40d6cc:	f102 0e14 	add.w	lr, r2, #20
  40d6d0:	186b      	adds	r3, r5, r1
  40d6d2:	4471      	add	r1, lr
  40d6d4:	e001      	b.n	40d6da <__mdiff+0x26>
  40d6d6:	429d      	cmp	r5, r3
  40d6d8:	d25c      	bcs.n	40d794 <__mdiff+0xe0>
  40d6da:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40d6de:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40d6e2:	42a2      	cmp	r2, r4
  40d6e4:	d0f7      	beq.n	40d6d6 <__mdiff+0x22>
  40d6e6:	d25e      	bcs.n	40d7a6 <__mdiff+0xf2>
  40d6e8:	4633      	mov	r3, r6
  40d6ea:	462c      	mov	r4, r5
  40d6ec:	4646      	mov	r6, r8
  40d6ee:	4675      	mov	r5, lr
  40d6f0:	4698      	mov	r8, r3
  40d6f2:	2701      	movs	r7, #1
  40d6f4:	e005      	b.n	40d702 <__mdiff+0x4e>
  40d6f6:	db58      	blt.n	40d7aa <__mdiff+0xf6>
  40d6f8:	f106 0514 	add.w	r5, r6, #20
  40d6fc:	f108 0414 	add.w	r4, r8, #20
  40d700:	2700      	movs	r7, #0
  40d702:	6871      	ldr	r1, [r6, #4]
  40d704:	f7ff fdbc 	bl	40d280 <_Balloc>
  40d708:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40d70c:	6936      	ldr	r6, [r6, #16]
  40d70e:	60c7      	str	r7, [r0, #12]
  40d710:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40d714:	46a6      	mov	lr, r4
  40d716:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  40d71a:	f100 0414 	add.w	r4, r0, #20
  40d71e:	2300      	movs	r3, #0
  40d720:	f85e 1b04 	ldr.w	r1, [lr], #4
  40d724:	f855 8b04 	ldr.w	r8, [r5], #4
  40d728:	b28a      	uxth	r2, r1
  40d72a:	fa13 f388 	uxtah	r3, r3, r8
  40d72e:	0c09      	lsrs	r1, r1, #16
  40d730:	1a9a      	subs	r2, r3, r2
  40d732:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40d736:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40d73a:	b292      	uxth	r2, r2
  40d73c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40d740:	45f4      	cmp	ip, lr
  40d742:	f844 2b04 	str.w	r2, [r4], #4
  40d746:	ea4f 4323 	mov.w	r3, r3, asr #16
  40d74a:	d8e9      	bhi.n	40d720 <__mdiff+0x6c>
  40d74c:	42af      	cmp	r7, r5
  40d74e:	d917      	bls.n	40d780 <__mdiff+0xcc>
  40d750:	46a4      	mov	ip, r4
  40d752:	46ae      	mov	lr, r5
  40d754:	f85e 2b04 	ldr.w	r2, [lr], #4
  40d758:	fa13 f382 	uxtah	r3, r3, r2
  40d75c:	1419      	asrs	r1, r3, #16
  40d75e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40d762:	b29b      	uxth	r3, r3
  40d764:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  40d768:	4577      	cmp	r7, lr
  40d76a:	f84c 2b04 	str.w	r2, [ip], #4
  40d76e:	ea4f 4321 	mov.w	r3, r1, asr #16
  40d772:	d8ef      	bhi.n	40d754 <__mdiff+0xa0>
  40d774:	43ed      	mvns	r5, r5
  40d776:	442f      	add	r7, r5
  40d778:	f027 0703 	bic.w	r7, r7, #3
  40d77c:	3704      	adds	r7, #4
  40d77e:	443c      	add	r4, r7
  40d780:	3c04      	subs	r4, #4
  40d782:	b922      	cbnz	r2, 40d78e <__mdiff+0xda>
  40d784:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40d788:	3e01      	subs	r6, #1
  40d78a:	2b00      	cmp	r3, #0
  40d78c:	d0fa      	beq.n	40d784 <__mdiff+0xd0>
  40d78e:	6106      	str	r6, [r0, #16]
  40d790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d794:	2100      	movs	r1, #0
  40d796:	f7ff fd73 	bl	40d280 <_Balloc>
  40d79a:	2201      	movs	r2, #1
  40d79c:	2300      	movs	r3, #0
  40d79e:	6102      	str	r2, [r0, #16]
  40d7a0:	6143      	str	r3, [r0, #20]
  40d7a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d7a6:	4674      	mov	r4, lr
  40d7a8:	e7ab      	b.n	40d702 <__mdiff+0x4e>
  40d7aa:	4633      	mov	r3, r6
  40d7ac:	f106 0414 	add.w	r4, r6, #20
  40d7b0:	f102 0514 	add.w	r5, r2, #20
  40d7b4:	4616      	mov	r6, r2
  40d7b6:	2701      	movs	r7, #1
  40d7b8:	4698      	mov	r8, r3
  40d7ba:	e7a2      	b.n	40d702 <__mdiff+0x4e>

0040d7bc <__d2b>:
  40d7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40d7c0:	b082      	sub	sp, #8
  40d7c2:	2101      	movs	r1, #1
  40d7c4:	461c      	mov	r4, r3
  40d7c6:	f3c3 570a 	ubfx	r7, r3, #20, #11
  40d7ca:	4615      	mov	r5, r2
  40d7cc:	9e08      	ldr	r6, [sp, #32]
  40d7ce:	f7ff fd57 	bl	40d280 <_Balloc>
  40d7d2:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40d7d6:	4680      	mov	r8, r0
  40d7d8:	b10f      	cbz	r7, 40d7de <__d2b+0x22>
  40d7da:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40d7de:	9401      	str	r4, [sp, #4]
  40d7e0:	b31d      	cbz	r5, 40d82a <__d2b+0x6e>
  40d7e2:	a802      	add	r0, sp, #8
  40d7e4:	f840 5d08 	str.w	r5, [r0, #-8]!
  40d7e8:	f7ff fdda 	bl	40d3a0 <__lo0bits>
  40d7ec:	2800      	cmp	r0, #0
  40d7ee:	d134      	bne.n	40d85a <__d2b+0x9e>
  40d7f0:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40d7f4:	f8c8 2014 	str.w	r2, [r8, #20]
  40d7f8:	2b00      	cmp	r3, #0
  40d7fa:	bf0c      	ite	eq
  40d7fc:	2101      	moveq	r1, #1
  40d7fe:	2102      	movne	r1, #2
  40d800:	f8c8 3018 	str.w	r3, [r8, #24]
  40d804:	f8c8 1010 	str.w	r1, [r8, #16]
  40d808:	b9df      	cbnz	r7, 40d842 <__d2b+0x86>
  40d80a:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40d80e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40d812:	6030      	str	r0, [r6, #0]
  40d814:	6918      	ldr	r0, [r3, #16]
  40d816:	f7ff fda3 	bl	40d360 <__hi0bits>
  40d81a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d81c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40d820:	6018      	str	r0, [r3, #0]
  40d822:	4640      	mov	r0, r8
  40d824:	b002      	add	sp, #8
  40d826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d82a:	a801      	add	r0, sp, #4
  40d82c:	f7ff fdb8 	bl	40d3a0 <__lo0bits>
  40d830:	9b01      	ldr	r3, [sp, #4]
  40d832:	f8c8 3014 	str.w	r3, [r8, #20]
  40d836:	2101      	movs	r1, #1
  40d838:	3020      	adds	r0, #32
  40d83a:	f8c8 1010 	str.w	r1, [r8, #16]
  40d83e:	2f00      	cmp	r7, #0
  40d840:	d0e3      	beq.n	40d80a <__d2b+0x4e>
  40d842:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d844:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40d848:	4407      	add	r7, r0
  40d84a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40d84e:	6037      	str	r7, [r6, #0]
  40d850:	6018      	str	r0, [r3, #0]
  40d852:	4640      	mov	r0, r8
  40d854:	b002      	add	sp, #8
  40d856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d85a:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40d85e:	f1c0 0220 	rsb	r2, r0, #32
  40d862:	fa03 f202 	lsl.w	r2, r3, r2
  40d866:	430a      	orrs	r2, r1
  40d868:	40c3      	lsrs	r3, r0
  40d86a:	9301      	str	r3, [sp, #4]
  40d86c:	f8c8 2014 	str.w	r2, [r8, #20]
  40d870:	e7c2      	b.n	40d7f8 <__d2b+0x3c>
  40d872:	bf00      	nop

0040d874 <_realloc_r>:
  40d874:	2900      	cmp	r1, #0
  40d876:	f000 8095 	beq.w	40d9a4 <_realloc_r+0x130>
  40d87a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d87e:	460d      	mov	r5, r1
  40d880:	4616      	mov	r6, r2
  40d882:	b083      	sub	sp, #12
  40d884:	4680      	mov	r8, r0
  40d886:	f106 070b 	add.w	r7, r6, #11
  40d88a:	f7ff fced 	bl	40d268 <__malloc_lock>
  40d88e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40d892:	2f16      	cmp	r7, #22
  40d894:	f02e 0403 	bic.w	r4, lr, #3
  40d898:	f1a5 0908 	sub.w	r9, r5, #8
  40d89c:	d83c      	bhi.n	40d918 <_realloc_r+0xa4>
  40d89e:	2210      	movs	r2, #16
  40d8a0:	4617      	mov	r7, r2
  40d8a2:	42be      	cmp	r6, r7
  40d8a4:	d83d      	bhi.n	40d922 <_realloc_r+0xae>
  40d8a6:	4294      	cmp	r4, r2
  40d8a8:	da43      	bge.n	40d932 <_realloc_r+0xbe>
  40d8aa:	4bc4      	ldr	r3, [pc, #784]	; (40dbbc <_realloc_r+0x348>)
  40d8ac:	6899      	ldr	r1, [r3, #8]
  40d8ae:	eb09 0004 	add.w	r0, r9, r4
  40d8b2:	4288      	cmp	r0, r1
  40d8b4:	f000 80b4 	beq.w	40da20 <_realloc_r+0x1ac>
  40d8b8:	6843      	ldr	r3, [r0, #4]
  40d8ba:	f023 0101 	bic.w	r1, r3, #1
  40d8be:	4401      	add	r1, r0
  40d8c0:	6849      	ldr	r1, [r1, #4]
  40d8c2:	07c9      	lsls	r1, r1, #31
  40d8c4:	d54c      	bpl.n	40d960 <_realloc_r+0xec>
  40d8c6:	f01e 0f01 	tst.w	lr, #1
  40d8ca:	f000 809b 	beq.w	40da04 <_realloc_r+0x190>
  40d8ce:	4631      	mov	r1, r6
  40d8d0:	4640      	mov	r0, r8
  40d8d2:	f7ff f95f 	bl	40cb94 <_malloc_r>
  40d8d6:	4606      	mov	r6, r0
  40d8d8:	2800      	cmp	r0, #0
  40d8da:	d03a      	beq.n	40d952 <_realloc_r+0xde>
  40d8dc:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40d8e0:	f023 0301 	bic.w	r3, r3, #1
  40d8e4:	444b      	add	r3, r9
  40d8e6:	f1a0 0208 	sub.w	r2, r0, #8
  40d8ea:	429a      	cmp	r2, r3
  40d8ec:	f000 8121 	beq.w	40db32 <_realloc_r+0x2be>
  40d8f0:	1f22      	subs	r2, r4, #4
  40d8f2:	2a24      	cmp	r2, #36	; 0x24
  40d8f4:	f200 8107 	bhi.w	40db06 <_realloc_r+0x292>
  40d8f8:	2a13      	cmp	r2, #19
  40d8fa:	f200 80db 	bhi.w	40dab4 <_realloc_r+0x240>
  40d8fe:	4603      	mov	r3, r0
  40d900:	462a      	mov	r2, r5
  40d902:	6811      	ldr	r1, [r2, #0]
  40d904:	6019      	str	r1, [r3, #0]
  40d906:	6851      	ldr	r1, [r2, #4]
  40d908:	6059      	str	r1, [r3, #4]
  40d90a:	6892      	ldr	r2, [r2, #8]
  40d90c:	609a      	str	r2, [r3, #8]
  40d90e:	4629      	mov	r1, r5
  40d910:	4640      	mov	r0, r8
  40d912:	f7fe fe21 	bl	40c558 <_free_r>
  40d916:	e01c      	b.n	40d952 <_realloc_r+0xde>
  40d918:	f027 0707 	bic.w	r7, r7, #7
  40d91c:	2f00      	cmp	r7, #0
  40d91e:	463a      	mov	r2, r7
  40d920:	dabf      	bge.n	40d8a2 <_realloc_r+0x2e>
  40d922:	2600      	movs	r6, #0
  40d924:	230c      	movs	r3, #12
  40d926:	4630      	mov	r0, r6
  40d928:	f8c8 3000 	str.w	r3, [r8]
  40d92c:	b003      	add	sp, #12
  40d92e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d932:	462e      	mov	r6, r5
  40d934:	1be3      	subs	r3, r4, r7
  40d936:	2b0f      	cmp	r3, #15
  40d938:	d81e      	bhi.n	40d978 <_realloc_r+0x104>
  40d93a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40d93e:	f003 0301 	and.w	r3, r3, #1
  40d942:	4323      	orrs	r3, r4
  40d944:	444c      	add	r4, r9
  40d946:	f8c9 3004 	str.w	r3, [r9, #4]
  40d94a:	6863      	ldr	r3, [r4, #4]
  40d94c:	f043 0301 	orr.w	r3, r3, #1
  40d950:	6063      	str	r3, [r4, #4]
  40d952:	4640      	mov	r0, r8
  40d954:	f7ff fc8e 	bl	40d274 <__malloc_unlock>
  40d958:	4630      	mov	r0, r6
  40d95a:	b003      	add	sp, #12
  40d95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d960:	f023 0303 	bic.w	r3, r3, #3
  40d964:	18e1      	adds	r1, r4, r3
  40d966:	4291      	cmp	r1, r2
  40d968:	db1f      	blt.n	40d9aa <_realloc_r+0x136>
  40d96a:	68c3      	ldr	r3, [r0, #12]
  40d96c:	6882      	ldr	r2, [r0, #8]
  40d96e:	462e      	mov	r6, r5
  40d970:	60d3      	str	r3, [r2, #12]
  40d972:	460c      	mov	r4, r1
  40d974:	609a      	str	r2, [r3, #8]
  40d976:	e7dd      	b.n	40d934 <_realloc_r+0xc0>
  40d978:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40d97c:	eb09 0107 	add.w	r1, r9, r7
  40d980:	f002 0201 	and.w	r2, r2, #1
  40d984:	444c      	add	r4, r9
  40d986:	f043 0301 	orr.w	r3, r3, #1
  40d98a:	4317      	orrs	r7, r2
  40d98c:	f8c9 7004 	str.w	r7, [r9, #4]
  40d990:	604b      	str	r3, [r1, #4]
  40d992:	6863      	ldr	r3, [r4, #4]
  40d994:	f043 0301 	orr.w	r3, r3, #1
  40d998:	3108      	adds	r1, #8
  40d99a:	6063      	str	r3, [r4, #4]
  40d99c:	4640      	mov	r0, r8
  40d99e:	f7fe fddb 	bl	40c558 <_free_r>
  40d9a2:	e7d6      	b.n	40d952 <_realloc_r+0xde>
  40d9a4:	4611      	mov	r1, r2
  40d9a6:	f7ff b8f5 	b.w	40cb94 <_malloc_r>
  40d9aa:	f01e 0f01 	tst.w	lr, #1
  40d9ae:	d18e      	bne.n	40d8ce <_realloc_r+0x5a>
  40d9b0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40d9b4:	eba9 0a01 	sub.w	sl, r9, r1
  40d9b8:	f8da 1004 	ldr.w	r1, [sl, #4]
  40d9bc:	f021 0103 	bic.w	r1, r1, #3
  40d9c0:	440b      	add	r3, r1
  40d9c2:	4423      	add	r3, r4
  40d9c4:	4293      	cmp	r3, r2
  40d9c6:	db25      	blt.n	40da14 <_realloc_r+0x1a0>
  40d9c8:	68c2      	ldr	r2, [r0, #12]
  40d9ca:	6881      	ldr	r1, [r0, #8]
  40d9cc:	4656      	mov	r6, sl
  40d9ce:	60ca      	str	r2, [r1, #12]
  40d9d0:	6091      	str	r1, [r2, #8]
  40d9d2:	f8da 100c 	ldr.w	r1, [sl, #12]
  40d9d6:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40d9da:	1f22      	subs	r2, r4, #4
  40d9dc:	2a24      	cmp	r2, #36	; 0x24
  40d9de:	60c1      	str	r1, [r0, #12]
  40d9e0:	6088      	str	r0, [r1, #8]
  40d9e2:	f200 8094 	bhi.w	40db0e <_realloc_r+0x29a>
  40d9e6:	2a13      	cmp	r2, #19
  40d9e8:	d96f      	bls.n	40daca <_realloc_r+0x256>
  40d9ea:	6829      	ldr	r1, [r5, #0]
  40d9ec:	f8ca 1008 	str.w	r1, [sl, #8]
  40d9f0:	6869      	ldr	r1, [r5, #4]
  40d9f2:	f8ca 100c 	str.w	r1, [sl, #12]
  40d9f6:	2a1b      	cmp	r2, #27
  40d9f8:	f200 80a2 	bhi.w	40db40 <_realloc_r+0x2cc>
  40d9fc:	3508      	adds	r5, #8
  40d9fe:	f10a 0210 	add.w	r2, sl, #16
  40da02:	e063      	b.n	40dacc <_realloc_r+0x258>
  40da04:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40da08:	eba9 0a03 	sub.w	sl, r9, r3
  40da0c:	f8da 1004 	ldr.w	r1, [sl, #4]
  40da10:	f021 0103 	bic.w	r1, r1, #3
  40da14:	1863      	adds	r3, r4, r1
  40da16:	4293      	cmp	r3, r2
  40da18:	f6ff af59 	blt.w	40d8ce <_realloc_r+0x5a>
  40da1c:	4656      	mov	r6, sl
  40da1e:	e7d8      	b.n	40d9d2 <_realloc_r+0x15e>
  40da20:	6841      	ldr	r1, [r0, #4]
  40da22:	f021 0b03 	bic.w	fp, r1, #3
  40da26:	44a3      	add	fp, r4
  40da28:	f107 0010 	add.w	r0, r7, #16
  40da2c:	4583      	cmp	fp, r0
  40da2e:	da56      	bge.n	40dade <_realloc_r+0x26a>
  40da30:	f01e 0f01 	tst.w	lr, #1
  40da34:	f47f af4b 	bne.w	40d8ce <_realloc_r+0x5a>
  40da38:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40da3c:	eba9 0a01 	sub.w	sl, r9, r1
  40da40:	f8da 1004 	ldr.w	r1, [sl, #4]
  40da44:	f021 0103 	bic.w	r1, r1, #3
  40da48:	448b      	add	fp, r1
  40da4a:	4558      	cmp	r0, fp
  40da4c:	dce2      	bgt.n	40da14 <_realloc_r+0x1a0>
  40da4e:	4656      	mov	r6, sl
  40da50:	f8da 100c 	ldr.w	r1, [sl, #12]
  40da54:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40da58:	1f22      	subs	r2, r4, #4
  40da5a:	2a24      	cmp	r2, #36	; 0x24
  40da5c:	60c1      	str	r1, [r0, #12]
  40da5e:	6088      	str	r0, [r1, #8]
  40da60:	f200 808f 	bhi.w	40db82 <_realloc_r+0x30e>
  40da64:	2a13      	cmp	r2, #19
  40da66:	f240 808a 	bls.w	40db7e <_realloc_r+0x30a>
  40da6a:	6829      	ldr	r1, [r5, #0]
  40da6c:	f8ca 1008 	str.w	r1, [sl, #8]
  40da70:	6869      	ldr	r1, [r5, #4]
  40da72:	f8ca 100c 	str.w	r1, [sl, #12]
  40da76:	2a1b      	cmp	r2, #27
  40da78:	f200 808a 	bhi.w	40db90 <_realloc_r+0x31c>
  40da7c:	3508      	adds	r5, #8
  40da7e:	f10a 0210 	add.w	r2, sl, #16
  40da82:	6829      	ldr	r1, [r5, #0]
  40da84:	6011      	str	r1, [r2, #0]
  40da86:	6869      	ldr	r1, [r5, #4]
  40da88:	6051      	str	r1, [r2, #4]
  40da8a:	68a9      	ldr	r1, [r5, #8]
  40da8c:	6091      	str	r1, [r2, #8]
  40da8e:	eb0a 0107 	add.w	r1, sl, r7
  40da92:	ebab 0207 	sub.w	r2, fp, r7
  40da96:	f042 0201 	orr.w	r2, r2, #1
  40da9a:	6099      	str	r1, [r3, #8]
  40da9c:	604a      	str	r2, [r1, #4]
  40da9e:	f8da 3004 	ldr.w	r3, [sl, #4]
  40daa2:	f003 0301 	and.w	r3, r3, #1
  40daa6:	431f      	orrs	r7, r3
  40daa8:	4640      	mov	r0, r8
  40daaa:	f8ca 7004 	str.w	r7, [sl, #4]
  40daae:	f7ff fbe1 	bl	40d274 <__malloc_unlock>
  40dab2:	e751      	b.n	40d958 <_realloc_r+0xe4>
  40dab4:	682b      	ldr	r3, [r5, #0]
  40dab6:	6003      	str	r3, [r0, #0]
  40dab8:	686b      	ldr	r3, [r5, #4]
  40daba:	6043      	str	r3, [r0, #4]
  40dabc:	2a1b      	cmp	r2, #27
  40dabe:	d82d      	bhi.n	40db1c <_realloc_r+0x2a8>
  40dac0:	f100 0308 	add.w	r3, r0, #8
  40dac4:	f105 0208 	add.w	r2, r5, #8
  40dac8:	e71b      	b.n	40d902 <_realloc_r+0x8e>
  40daca:	4632      	mov	r2, r6
  40dacc:	6829      	ldr	r1, [r5, #0]
  40dace:	6011      	str	r1, [r2, #0]
  40dad0:	6869      	ldr	r1, [r5, #4]
  40dad2:	6051      	str	r1, [r2, #4]
  40dad4:	68a9      	ldr	r1, [r5, #8]
  40dad6:	6091      	str	r1, [r2, #8]
  40dad8:	461c      	mov	r4, r3
  40dada:	46d1      	mov	r9, sl
  40dadc:	e72a      	b.n	40d934 <_realloc_r+0xc0>
  40dade:	eb09 0107 	add.w	r1, r9, r7
  40dae2:	ebab 0b07 	sub.w	fp, fp, r7
  40dae6:	f04b 0201 	orr.w	r2, fp, #1
  40daea:	6099      	str	r1, [r3, #8]
  40daec:	604a      	str	r2, [r1, #4]
  40daee:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40daf2:	f003 0301 	and.w	r3, r3, #1
  40daf6:	431f      	orrs	r7, r3
  40daf8:	4640      	mov	r0, r8
  40dafa:	f845 7c04 	str.w	r7, [r5, #-4]
  40dafe:	f7ff fbb9 	bl	40d274 <__malloc_unlock>
  40db02:	462e      	mov	r6, r5
  40db04:	e728      	b.n	40d958 <_realloc_r+0xe4>
  40db06:	4629      	mov	r1, r5
  40db08:	f7ff fb4a 	bl	40d1a0 <memmove>
  40db0c:	e6ff      	b.n	40d90e <_realloc_r+0x9a>
  40db0e:	4629      	mov	r1, r5
  40db10:	4630      	mov	r0, r6
  40db12:	461c      	mov	r4, r3
  40db14:	46d1      	mov	r9, sl
  40db16:	f7ff fb43 	bl	40d1a0 <memmove>
  40db1a:	e70b      	b.n	40d934 <_realloc_r+0xc0>
  40db1c:	68ab      	ldr	r3, [r5, #8]
  40db1e:	6083      	str	r3, [r0, #8]
  40db20:	68eb      	ldr	r3, [r5, #12]
  40db22:	60c3      	str	r3, [r0, #12]
  40db24:	2a24      	cmp	r2, #36	; 0x24
  40db26:	d017      	beq.n	40db58 <_realloc_r+0x2e4>
  40db28:	f100 0310 	add.w	r3, r0, #16
  40db2c:	f105 0210 	add.w	r2, r5, #16
  40db30:	e6e7      	b.n	40d902 <_realloc_r+0x8e>
  40db32:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40db36:	f023 0303 	bic.w	r3, r3, #3
  40db3a:	441c      	add	r4, r3
  40db3c:	462e      	mov	r6, r5
  40db3e:	e6f9      	b.n	40d934 <_realloc_r+0xc0>
  40db40:	68a9      	ldr	r1, [r5, #8]
  40db42:	f8ca 1010 	str.w	r1, [sl, #16]
  40db46:	68e9      	ldr	r1, [r5, #12]
  40db48:	f8ca 1014 	str.w	r1, [sl, #20]
  40db4c:	2a24      	cmp	r2, #36	; 0x24
  40db4e:	d00c      	beq.n	40db6a <_realloc_r+0x2f6>
  40db50:	3510      	adds	r5, #16
  40db52:	f10a 0218 	add.w	r2, sl, #24
  40db56:	e7b9      	b.n	40dacc <_realloc_r+0x258>
  40db58:	692b      	ldr	r3, [r5, #16]
  40db5a:	6103      	str	r3, [r0, #16]
  40db5c:	696b      	ldr	r3, [r5, #20]
  40db5e:	6143      	str	r3, [r0, #20]
  40db60:	f105 0218 	add.w	r2, r5, #24
  40db64:	f100 0318 	add.w	r3, r0, #24
  40db68:	e6cb      	b.n	40d902 <_realloc_r+0x8e>
  40db6a:	692a      	ldr	r2, [r5, #16]
  40db6c:	f8ca 2018 	str.w	r2, [sl, #24]
  40db70:	696a      	ldr	r2, [r5, #20]
  40db72:	f8ca 201c 	str.w	r2, [sl, #28]
  40db76:	3518      	adds	r5, #24
  40db78:	f10a 0220 	add.w	r2, sl, #32
  40db7c:	e7a6      	b.n	40dacc <_realloc_r+0x258>
  40db7e:	4632      	mov	r2, r6
  40db80:	e77f      	b.n	40da82 <_realloc_r+0x20e>
  40db82:	4629      	mov	r1, r5
  40db84:	4630      	mov	r0, r6
  40db86:	9301      	str	r3, [sp, #4]
  40db88:	f7ff fb0a 	bl	40d1a0 <memmove>
  40db8c:	9b01      	ldr	r3, [sp, #4]
  40db8e:	e77e      	b.n	40da8e <_realloc_r+0x21a>
  40db90:	68a9      	ldr	r1, [r5, #8]
  40db92:	f8ca 1010 	str.w	r1, [sl, #16]
  40db96:	68e9      	ldr	r1, [r5, #12]
  40db98:	f8ca 1014 	str.w	r1, [sl, #20]
  40db9c:	2a24      	cmp	r2, #36	; 0x24
  40db9e:	d003      	beq.n	40dba8 <_realloc_r+0x334>
  40dba0:	3510      	adds	r5, #16
  40dba2:	f10a 0218 	add.w	r2, sl, #24
  40dba6:	e76c      	b.n	40da82 <_realloc_r+0x20e>
  40dba8:	692a      	ldr	r2, [r5, #16]
  40dbaa:	f8ca 2018 	str.w	r2, [sl, #24]
  40dbae:	696a      	ldr	r2, [r5, #20]
  40dbb0:	f8ca 201c 	str.w	r2, [sl, #28]
  40dbb4:	3518      	adds	r5, #24
  40dbb6:	f10a 0220 	add.w	r2, sl, #32
  40dbba:	e762      	b.n	40da82 <_realloc_r+0x20e>
  40dbbc:	20400494 	.word	0x20400494

0040dbc0 <_sbrk_r>:
  40dbc0:	b538      	push	{r3, r4, r5, lr}
  40dbc2:	4c07      	ldr	r4, [pc, #28]	; (40dbe0 <_sbrk_r+0x20>)
  40dbc4:	2300      	movs	r3, #0
  40dbc6:	4605      	mov	r5, r0
  40dbc8:	4608      	mov	r0, r1
  40dbca:	6023      	str	r3, [r4, #0]
  40dbcc:	f7f3 faba 	bl	401144 <_sbrk>
  40dbd0:	1c43      	adds	r3, r0, #1
  40dbd2:	d000      	beq.n	40dbd6 <_sbrk_r+0x16>
  40dbd4:	bd38      	pop	{r3, r4, r5, pc}
  40dbd6:	6823      	ldr	r3, [r4, #0]
  40dbd8:	2b00      	cmp	r3, #0
  40dbda:	d0fb      	beq.n	40dbd4 <_sbrk_r+0x14>
  40dbdc:	602b      	str	r3, [r5, #0]
  40dbde:	bd38      	pop	{r3, r4, r5, pc}
  40dbe0:	20404a70 	.word	0x20404a70

0040dbe4 <__sread>:
  40dbe4:	b510      	push	{r4, lr}
  40dbe6:	460c      	mov	r4, r1
  40dbe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40dbec:	f000 fb7a 	bl	40e2e4 <_read_r>
  40dbf0:	2800      	cmp	r0, #0
  40dbf2:	db03      	blt.n	40dbfc <__sread+0x18>
  40dbf4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40dbf6:	4403      	add	r3, r0
  40dbf8:	6523      	str	r3, [r4, #80]	; 0x50
  40dbfa:	bd10      	pop	{r4, pc}
  40dbfc:	89a3      	ldrh	r3, [r4, #12]
  40dbfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40dc02:	81a3      	strh	r3, [r4, #12]
  40dc04:	bd10      	pop	{r4, pc}
  40dc06:	bf00      	nop

0040dc08 <__swrite>:
  40dc08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40dc0c:	4616      	mov	r6, r2
  40dc0e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40dc12:	461f      	mov	r7, r3
  40dc14:	05d3      	lsls	r3, r2, #23
  40dc16:	460c      	mov	r4, r1
  40dc18:	4605      	mov	r5, r0
  40dc1a:	d507      	bpl.n	40dc2c <__swrite+0x24>
  40dc1c:	2200      	movs	r2, #0
  40dc1e:	2302      	movs	r3, #2
  40dc20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40dc24:	f000 fb32 	bl	40e28c <_lseek_r>
  40dc28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40dc2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40dc30:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40dc34:	81a2      	strh	r2, [r4, #12]
  40dc36:	463b      	mov	r3, r7
  40dc38:	4632      	mov	r2, r6
  40dc3a:	4628      	mov	r0, r5
  40dc3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40dc40:	f000 b950 	b.w	40dee4 <_write_r>

0040dc44 <__sseek>:
  40dc44:	b510      	push	{r4, lr}
  40dc46:	460c      	mov	r4, r1
  40dc48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40dc4c:	f000 fb1e 	bl	40e28c <_lseek_r>
  40dc50:	89a3      	ldrh	r3, [r4, #12]
  40dc52:	1c42      	adds	r2, r0, #1
  40dc54:	bf0e      	itee	eq
  40dc56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40dc5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40dc5e:	6520      	strne	r0, [r4, #80]	; 0x50
  40dc60:	81a3      	strh	r3, [r4, #12]
  40dc62:	bd10      	pop	{r4, pc}

0040dc64 <__sclose>:
  40dc64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40dc68:	f000 b9e4 	b.w	40e034 <_close_r>

0040dc6c <strchr>:
  40dc6c:	b2c9      	uxtb	r1, r1
  40dc6e:	2900      	cmp	r1, #0
  40dc70:	d041      	beq.n	40dcf6 <strchr+0x8a>
  40dc72:	0782      	lsls	r2, r0, #30
  40dc74:	b4f0      	push	{r4, r5, r6, r7}
  40dc76:	d067      	beq.n	40dd48 <strchr+0xdc>
  40dc78:	7803      	ldrb	r3, [r0, #0]
  40dc7a:	2b00      	cmp	r3, #0
  40dc7c:	d068      	beq.n	40dd50 <strchr+0xe4>
  40dc7e:	4299      	cmp	r1, r3
  40dc80:	d037      	beq.n	40dcf2 <strchr+0x86>
  40dc82:	1c43      	adds	r3, r0, #1
  40dc84:	e004      	b.n	40dc90 <strchr+0x24>
  40dc86:	f813 0b01 	ldrb.w	r0, [r3], #1
  40dc8a:	b390      	cbz	r0, 40dcf2 <strchr+0x86>
  40dc8c:	4281      	cmp	r1, r0
  40dc8e:	d02f      	beq.n	40dcf0 <strchr+0x84>
  40dc90:	079a      	lsls	r2, r3, #30
  40dc92:	461c      	mov	r4, r3
  40dc94:	d1f7      	bne.n	40dc86 <strchr+0x1a>
  40dc96:	6825      	ldr	r5, [r4, #0]
  40dc98:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  40dc9c:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  40dca0:	ea83 0605 	eor.w	r6, r3, r5
  40dca4:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  40dca8:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  40dcac:	ea20 0006 	bic.w	r0, r0, r6
  40dcb0:	ea22 0205 	bic.w	r2, r2, r5
  40dcb4:	4302      	orrs	r2, r0
  40dcb6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40dcba:	d111      	bne.n	40dce0 <strchr+0x74>
  40dcbc:	4620      	mov	r0, r4
  40dcbe:	f850 6f04 	ldr.w	r6, [r0, #4]!
  40dcc2:	ea83 0706 	eor.w	r7, r3, r6
  40dcc6:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  40dcca:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  40dcce:	ea25 0507 	bic.w	r5, r5, r7
  40dcd2:	ea22 0206 	bic.w	r2, r2, r6
  40dcd6:	432a      	orrs	r2, r5
  40dcd8:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40dcdc:	d0ef      	beq.n	40dcbe <strchr+0x52>
  40dcde:	4604      	mov	r4, r0
  40dce0:	7820      	ldrb	r0, [r4, #0]
  40dce2:	b918      	cbnz	r0, 40dcec <strchr+0x80>
  40dce4:	e005      	b.n	40dcf2 <strchr+0x86>
  40dce6:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  40dcea:	b110      	cbz	r0, 40dcf2 <strchr+0x86>
  40dcec:	4281      	cmp	r1, r0
  40dcee:	d1fa      	bne.n	40dce6 <strchr+0x7a>
  40dcf0:	4620      	mov	r0, r4
  40dcf2:	bcf0      	pop	{r4, r5, r6, r7}
  40dcf4:	4770      	bx	lr
  40dcf6:	0783      	lsls	r3, r0, #30
  40dcf8:	d024      	beq.n	40dd44 <strchr+0xd8>
  40dcfa:	7803      	ldrb	r3, [r0, #0]
  40dcfc:	2b00      	cmp	r3, #0
  40dcfe:	d0f9      	beq.n	40dcf4 <strchr+0x88>
  40dd00:	1c43      	adds	r3, r0, #1
  40dd02:	e003      	b.n	40dd0c <strchr+0xa0>
  40dd04:	7802      	ldrb	r2, [r0, #0]
  40dd06:	3301      	adds	r3, #1
  40dd08:	2a00      	cmp	r2, #0
  40dd0a:	d0f3      	beq.n	40dcf4 <strchr+0x88>
  40dd0c:	0799      	lsls	r1, r3, #30
  40dd0e:	4618      	mov	r0, r3
  40dd10:	d1f8      	bne.n	40dd04 <strchr+0x98>
  40dd12:	6819      	ldr	r1, [r3, #0]
  40dd14:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  40dd18:	ea22 0201 	bic.w	r2, r2, r1
  40dd1c:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40dd20:	d108      	bne.n	40dd34 <strchr+0xc8>
  40dd22:	f853 1f04 	ldr.w	r1, [r3, #4]!
  40dd26:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  40dd2a:	ea22 0201 	bic.w	r2, r2, r1
  40dd2e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40dd32:	d0f6      	beq.n	40dd22 <strchr+0xb6>
  40dd34:	781a      	ldrb	r2, [r3, #0]
  40dd36:	4618      	mov	r0, r3
  40dd38:	b142      	cbz	r2, 40dd4c <strchr+0xe0>
  40dd3a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  40dd3e:	2b00      	cmp	r3, #0
  40dd40:	d1fb      	bne.n	40dd3a <strchr+0xce>
  40dd42:	4770      	bx	lr
  40dd44:	4603      	mov	r3, r0
  40dd46:	e7e4      	b.n	40dd12 <strchr+0xa6>
  40dd48:	4604      	mov	r4, r0
  40dd4a:	e7a4      	b.n	40dc96 <strchr+0x2a>
  40dd4c:	4618      	mov	r0, r3
  40dd4e:	4770      	bx	lr
  40dd50:	4618      	mov	r0, r3
  40dd52:	e7ce      	b.n	40dcf2 <strchr+0x86>

0040dd54 <__ssprint_r>:
  40dd54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40dd58:	6893      	ldr	r3, [r2, #8]
  40dd5a:	b083      	sub	sp, #12
  40dd5c:	4690      	mov	r8, r2
  40dd5e:	2b00      	cmp	r3, #0
  40dd60:	d070      	beq.n	40de44 <__ssprint_r+0xf0>
  40dd62:	4682      	mov	sl, r0
  40dd64:	460c      	mov	r4, r1
  40dd66:	6817      	ldr	r7, [r2, #0]
  40dd68:	688d      	ldr	r5, [r1, #8]
  40dd6a:	6808      	ldr	r0, [r1, #0]
  40dd6c:	e042      	b.n	40ddf4 <__ssprint_r+0xa0>
  40dd6e:	89a3      	ldrh	r3, [r4, #12]
  40dd70:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40dd74:	d02e      	beq.n	40ddd4 <__ssprint_r+0x80>
  40dd76:	6965      	ldr	r5, [r4, #20]
  40dd78:	6921      	ldr	r1, [r4, #16]
  40dd7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  40dd7e:	eba0 0b01 	sub.w	fp, r0, r1
  40dd82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40dd86:	f10b 0001 	add.w	r0, fp, #1
  40dd8a:	106d      	asrs	r5, r5, #1
  40dd8c:	4430      	add	r0, r6
  40dd8e:	42a8      	cmp	r0, r5
  40dd90:	462a      	mov	r2, r5
  40dd92:	bf84      	itt	hi
  40dd94:	4605      	movhi	r5, r0
  40dd96:	462a      	movhi	r2, r5
  40dd98:	055b      	lsls	r3, r3, #21
  40dd9a:	d538      	bpl.n	40de0e <__ssprint_r+0xba>
  40dd9c:	4611      	mov	r1, r2
  40dd9e:	4650      	mov	r0, sl
  40dda0:	f7fe fef8 	bl	40cb94 <_malloc_r>
  40dda4:	2800      	cmp	r0, #0
  40dda6:	d03c      	beq.n	40de22 <__ssprint_r+0xce>
  40dda8:	465a      	mov	r2, fp
  40ddaa:	6921      	ldr	r1, [r4, #16]
  40ddac:	9001      	str	r0, [sp, #4]
  40ddae:	f7f9 ff1f 	bl	407bf0 <memcpy>
  40ddb2:	89a2      	ldrh	r2, [r4, #12]
  40ddb4:	9b01      	ldr	r3, [sp, #4]
  40ddb6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40ddba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40ddbe:	81a2      	strh	r2, [r4, #12]
  40ddc0:	eba5 020b 	sub.w	r2, r5, fp
  40ddc4:	eb03 000b 	add.w	r0, r3, fp
  40ddc8:	6165      	str	r5, [r4, #20]
  40ddca:	6123      	str	r3, [r4, #16]
  40ddcc:	6020      	str	r0, [r4, #0]
  40ddce:	60a2      	str	r2, [r4, #8]
  40ddd0:	4635      	mov	r5, r6
  40ddd2:	46b3      	mov	fp, r6
  40ddd4:	465a      	mov	r2, fp
  40ddd6:	4649      	mov	r1, r9
  40ddd8:	f7ff f9e2 	bl	40d1a0 <memmove>
  40dddc:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40dde0:	68a2      	ldr	r2, [r4, #8]
  40dde2:	6820      	ldr	r0, [r4, #0]
  40dde4:	1b55      	subs	r5, r2, r5
  40dde6:	4458      	add	r0, fp
  40dde8:	1b9e      	subs	r6, r3, r6
  40ddea:	60a5      	str	r5, [r4, #8]
  40ddec:	6020      	str	r0, [r4, #0]
  40ddee:	f8c8 6008 	str.w	r6, [r8, #8]
  40ddf2:	b33e      	cbz	r6, 40de44 <__ssprint_r+0xf0>
  40ddf4:	687e      	ldr	r6, [r7, #4]
  40ddf6:	463b      	mov	r3, r7
  40ddf8:	3708      	adds	r7, #8
  40ddfa:	2e00      	cmp	r6, #0
  40ddfc:	d0fa      	beq.n	40ddf4 <__ssprint_r+0xa0>
  40ddfe:	42ae      	cmp	r6, r5
  40de00:	f8d3 9000 	ldr.w	r9, [r3]
  40de04:	46ab      	mov	fp, r5
  40de06:	d2b2      	bcs.n	40dd6e <__ssprint_r+0x1a>
  40de08:	4635      	mov	r5, r6
  40de0a:	46b3      	mov	fp, r6
  40de0c:	e7e2      	b.n	40ddd4 <__ssprint_r+0x80>
  40de0e:	4650      	mov	r0, sl
  40de10:	f7ff fd30 	bl	40d874 <_realloc_r>
  40de14:	4603      	mov	r3, r0
  40de16:	2800      	cmp	r0, #0
  40de18:	d1d2      	bne.n	40ddc0 <__ssprint_r+0x6c>
  40de1a:	6921      	ldr	r1, [r4, #16]
  40de1c:	4650      	mov	r0, sl
  40de1e:	f7fe fb9b 	bl	40c558 <_free_r>
  40de22:	230c      	movs	r3, #12
  40de24:	f8ca 3000 	str.w	r3, [sl]
  40de28:	89a3      	ldrh	r3, [r4, #12]
  40de2a:	2200      	movs	r2, #0
  40de2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40de30:	f04f 30ff 	mov.w	r0, #4294967295
  40de34:	81a3      	strh	r3, [r4, #12]
  40de36:	f8c8 2008 	str.w	r2, [r8, #8]
  40de3a:	f8c8 2004 	str.w	r2, [r8, #4]
  40de3e:	b003      	add	sp, #12
  40de40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40de44:	2000      	movs	r0, #0
  40de46:	f8c8 0004 	str.w	r0, [r8, #4]
  40de4a:	b003      	add	sp, #12
  40de4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040de50 <__sprint_r.part.0>:
  40de50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40de54:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40de56:	049c      	lsls	r4, r3, #18
  40de58:	4693      	mov	fp, r2
  40de5a:	d52f      	bpl.n	40debc <__sprint_r.part.0+0x6c>
  40de5c:	6893      	ldr	r3, [r2, #8]
  40de5e:	6812      	ldr	r2, [r2, #0]
  40de60:	b353      	cbz	r3, 40deb8 <__sprint_r.part.0+0x68>
  40de62:	460e      	mov	r6, r1
  40de64:	4607      	mov	r7, r0
  40de66:	f102 0908 	add.w	r9, r2, #8
  40de6a:	e919 0420 	ldmdb	r9, {r5, sl}
  40de6e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40de72:	d017      	beq.n	40dea4 <__sprint_r.part.0+0x54>
  40de74:	3d04      	subs	r5, #4
  40de76:	2400      	movs	r4, #0
  40de78:	e001      	b.n	40de7e <__sprint_r.part.0+0x2e>
  40de7a:	45a0      	cmp	r8, r4
  40de7c:	d010      	beq.n	40dea0 <__sprint_r.part.0+0x50>
  40de7e:	4632      	mov	r2, r6
  40de80:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40de84:	4638      	mov	r0, r7
  40de86:	f000 f999 	bl	40e1bc <_fputwc_r>
  40de8a:	1c43      	adds	r3, r0, #1
  40de8c:	f104 0401 	add.w	r4, r4, #1
  40de90:	d1f3      	bne.n	40de7a <__sprint_r.part.0+0x2a>
  40de92:	2300      	movs	r3, #0
  40de94:	f8cb 3008 	str.w	r3, [fp, #8]
  40de98:	f8cb 3004 	str.w	r3, [fp, #4]
  40de9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40dea0:	f8db 3008 	ldr.w	r3, [fp, #8]
  40dea4:	f02a 0a03 	bic.w	sl, sl, #3
  40dea8:	eba3 030a 	sub.w	r3, r3, sl
  40deac:	f8cb 3008 	str.w	r3, [fp, #8]
  40deb0:	f109 0908 	add.w	r9, r9, #8
  40deb4:	2b00      	cmp	r3, #0
  40deb6:	d1d8      	bne.n	40de6a <__sprint_r.part.0+0x1a>
  40deb8:	2000      	movs	r0, #0
  40deba:	e7ea      	b.n	40de92 <__sprint_r.part.0+0x42>
  40debc:	f7fe fc32 	bl	40c724 <__sfvwrite_r>
  40dec0:	2300      	movs	r3, #0
  40dec2:	f8cb 3008 	str.w	r3, [fp, #8]
  40dec6:	f8cb 3004 	str.w	r3, [fp, #4]
  40deca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40dece:	bf00      	nop

0040ded0 <__sprint_r>:
  40ded0:	6893      	ldr	r3, [r2, #8]
  40ded2:	b10b      	cbz	r3, 40ded8 <__sprint_r+0x8>
  40ded4:	f7ff bfbc 	b.w	40de50 <__sprint_r.part.0>
  40ded8:	b410      	push	{r4}
  40deda:	4618      	mov	r0, r3
  40dedc:	6053      	str	r3, [r2, #4]
  40dede:	bc10      	pop	{r4}
  40dee0:	4770      	bx	lr
  40dee2:	bf00      	nop

0040dee4 <_write_r>:
  40dee4:	b570      	push	{r4, r5, r6, lr}
  40dee6:	460d      	mov	r5, r1
  40dee8:	4c08      	ldr	r4, [pc, #32]	; (40df0c <_write_r+0x28>)
  40deea:	4611      	mov	r1, r2
  40deec:	4606      	mov	r6, r0
  40deee:	461a      	mov	r2, r3
  40def0:	4628      	mov	r0, r5
  40def2:	2300      	movs	r3, #0
  40def4:	6023      	str	r3, [r4, #0]
  40def6:	f7f2 f9c5 	bl	400284 <_write>
  40defa:	1c43      	adds	r3, r0, #1
  40defc:	d000      	beq.n	40df00 <_write_r+0x1c>
  40defe:	bd70      	pop	{r4, r5, r6, pc}
  40df00:	6823      	ldr	r3, [r4, #0]
  40df02:	2b00      	cmp	r3, #0
  40df04:	d0fb      	beq.n	40defe <_write_r+0x1a>
  40df06:	6033      	str	r3, [r6, #0]
  40df08:	bd70      	pop	{r4, r5, r6, pc}
  40df0a:	bf00      	nop
  40df0c:	20404a70 	.word	0x20404a70

0040df10 <__register_exitproc>:
  40df10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40df14:	4d2c      	ldr	r5, [pc, #176]	; (40dfc8 <__register_exitproc+0xb8>)
  40df16:	4606      	mov	r6, r0
  40df18:	6828      	ldr	r0, [r5, #0]
  40df1a:	4698      	mov	r8, r3
  40df1c:	460f      	mov	r7, r1
  40df1e:	4691      	mov	r9, r2
  40df20:	f7fe fdb4 	bl	40ca8c <__retarget_lock_acquire_recursive>
  40df24:	4b29      	ldr	r3, [pc, #164]	; (40dfcc <__register_exitproc+0xbc>)
  40df26:	681c      	ldr	r4, [r3, #0]
  40df28:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40df2c:	2b00      	cmp	r3, #0
  40df2e:	d03e      	beq.n	40dfae <__register_exitproc+0x9e>
  40df30:	685a      	ldr	r2, [r3, #4]
  40df32:	2a1f      	cmp	r2, #31
  40df34:	dc1c      	bgt.n	40df70 <__register_exitproc+0x60>
  40df36:	f102 0e01 	add.w	lr, r2, #1
  40df3a:	b176      	cbz	r6, 40df5a <__register_exitproc+0x4a>
  40df3c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40df40:	2401      	movs	r4, #1
  40df42:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40df46:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40df4a:	4094      	lsls	r4, r2
  40df4c:	4320      	orrs	r0, r4
  40df4e:	2e02      	cmp	r6, #2
  40df50:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40df54:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40df58:	d023      	beq.n	40dfa2 <__register_exitproc+0x92>
  40df5a:	3202      	adds	r2, #2
  40df5c:	f8c3 e004 	str.w	lr, [r3, #4]
  40df60:	6828      	ldr	r0, [r5, #0]
  40df62:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40df66:	f7fe fd93 	bl	40ca90 <__retarget_lock_release_recursive>
  40df6a:	2000      	movs	r0, #0
  40df6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40df70:	4b17      	ldr	r3, [pc, #92]	; (40dfd0 <__register_exitproc+0xc0>)
  40df72:	b30b      	cbz	r3, 40dfb8 <__register_exitproc+0xa8>
  40df74:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40df78:	f7fe fe04 	bl	40cb84 <malloc>
  40df7c:	4603      	mov	r3, r0
  40df7e:	b1d8      	cbz	r0, 40dfb8 <__register_exitproc+0xa8>
  40df80:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40df84:	6002      	str	r2, [r0, #0]
  40df86:	2100      	movs	r1, #0
  40df88:	6041      	str	r1, [r0, #4]
  40df8a:	460a      	mov	r2, r1
  40df8c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40df90:	f04f 0e01 	mov.w	lr, #1
  40df94:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40df98:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40df9c:	2e00      	cmp	r6, #0
  40df9e:	d0dc      	beq.n	40df5a <__register_exitproc+0x4a>
  40dfa0:	e7cc      	b.n	40df3c <__register_exitproc+0x2c>
  40dfa2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40dfa6:	430c      	orrs	r4, r1
  40dfa8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40dfac:	e7d5      	b.n	40df5a <__register_exitproc+0x4a>
  40dfae:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40dfb2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40dfb6:	e7bb      	b.n	40df30 <__register_exitproc+0x20>
  40dfb8:	6828      	ldr	r0, [r5, #0]
  40dfba:	f7fe fd69 	bl	40ca90 <__retarget_lock_release_recursive>
  40dfbe:	f04f 30ff 	mov.w	r0, #4294967295
  40dfc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40dfc6:	bf00      	nop
  40dfc8:	20400490 	.word	0x20400490
  40dfcc:	0040ecd4 	.word	0x0040ecd4
  40dfd0:	0040cb85 	.word	0x0040cb85

0040dfd4 <_calloc_r>:
  40dfd4:	b510      	push	{r4, lr}
  40dfd6:	fb02 f101 	mul.w	r1, r2, r1
  40dfda:	f7fe fddb 	bl	40cb94 <_malloc_r>
  40dfde:	4604      	mov	r4, r0
  40dfe0:	b1d8      	cbz	r0, 40e01a <_calloc_r+0x46>
  40dfe2:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40dfe6:	f022 0203 	bic.w	r2, r2, #3
  40dfea:	3a04      	subs	r2, #4
  40dfec:	2a24      	cmp	r2, #36	; 0x24
  40dfee:	d818      	bhi.n	40e022 <_calloc_r+0x4e>
  40dff0:	2a13      	cmp	r2, #19
  40dff2:	d914      	bls.n	40e01e <_calloc_r+0x4a>
  40dff4:	2300      	movs	r3, #0
  40dff6:	2a1b      	cmp	r2, #27
  40dff8:	6003      	str	r3, [r0, #0]
  40dffa:	6043      	str	r3, [r0, #4]
  40dffc:	d916      	bls.n	40e02c <_calloc_r+0x58>
  40dffe:	2a24      	cmp	r2, #36	; 0x24
  40e000:	6083      	str	r3, [r0, #8]
  40e002:	60c3      	str	r3, [r0, #12]
  40e004:	bf11      	iteee	ne
  40e006:	f100 0210 	addne.w	r2, r0, #16
  40e00a:	6103      	streq	r3, [r0, #16]
  40e00c:	6143      	streq	r3, [r0, #20]
  40e00e:	f100 0218 	addeq.w	r2, r0, #24
  40e012:	2300      	movs	r3, #0
  40e014:	6013      	str	r3, [r2, #0]
  40e016:	6053      	str	r3, [r2, #4]
  40e018:	6093      	str	r3, [r2, #8]
  40e01a:	4620      	mov	r0, r4
  40e01c:	bd10      	pop	{r4, pc}
  40e01e:	4602      	mov	r2, r0
  40e020:	e7f7      	b.n	40e012 <_calloc_r+0x3e>
  40e022:	2100      	movs	r1, #0
  40e024:	f7f9 fe7e 	bl	407d24 <memset>
  40e028:	4620      	mov	r0, r4
  40e02a:	bd10      	pop	{r4, pc}
  40e02c:	f100 0208 	add.w	r2, r0, #8
  40e030:	e7ef      	b.n	40e012 <_calloc_r+0x3e>
  40e032:	bf00      	nop

0040e034 <_close_r>:
  40e034:	b538      	push	{r3, r4, r5, lr}
  40e036:	4c07      	ldr	r4, [pc, #28]	; (40e054 <_close_r+0x20>)
  40e038:	2300      	movs	r3, #0
  40e03a:	4605      	mov	r5, r0
  40e03c:	4608      	mov	r0, r1
  40e03e:	6023      	str	r3, [r4, #0]
  40e040:	f7f3 f89c 	bl	40117c <_close>
  40e044:	1c43      	adds	r3, r0, #1
  40e046:	d000      	beq.n	40e04a <_close_r+0x16>
  40e048:	bd38      	pop	{r3, r4, r5, pc}
  40e04a:	6823      	ldr	r3, [r4, #0]
  40e04c:	2b00      	cmp	r3, #0
  40e04e:	d0fb      	beq.n	40e048 <_close_r+0x14>
  40e050:	602b      	str	r3, [r5, #0]
  40e052:	bd38      	pop	{r3, r4, r5, pc}
  40e054:	20404a70 	.word	0x20404a70

0040e058 <_fclose_r>:
  40e058:	b570      	push	{r4, r5, r6, lr}
  40e05a:	b159      	cbz	r1, 40e074 <_fclose_r+0x1c>
  40e05c:	4605      	mov	r5, r0
  40e05e:	460c      	mov	r4, r1
  40e060:	b110      	cbz	r0, 40e068 <_fclose_r+0x10>
  40e062:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40e064:	2b00      	cmp	r3, #0
  40e066:	d03c      	beq.n	40e0e2 <_fclose_r+0x8a>
  40e068:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40e06a:	07d8      	lsls	r0, r3, #31
  40e06c:	d505      	bpl.n	40e07a <_fclose_r+0x22>
  40e06e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40e072:	b92b      	cbnz	r3, 40e080 <_fclose_r+0x28>
  40e074:	2600      	movs	r6, #0
  40e076:	4630      	mov	r0, r6
  40e078:	bd70      	pop	{r4, r5, r6, pc}
  40e07a:	89a3      	ldrh	r3, [r4, #12]
  40e07c:	0599      	lsls	r1, r3, #22
  40e07e:	d53c      	bpl.n	40e0fa <_fclose_r+0xa2>
  40e080:	4621      	mov	r1, r4
  40e082:	4628      	mov	r0, r5
  40e084:	f7fe f8ce 	bl	40c224 <__sflush_r>
  40e088:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40e08a:	4606      	mov	r6, r0
  40e08c:	b133      	cbz	r3, 40e09c <_fclose_r+0x44>
  40e08e:	69e1      	ldr	r1, [r4, #28]
  40e090:	4628      	mov	r0, r5
  40e092:	4798      	blx	r3
  40e094:	2800      	cmp	r0, #0
  40e096:	bfb8      	it	lt
  40e098:	f04f 36ff 	movlt.w	r6, #4294967295
  40e09c:	89a3      	ldrh	r3, [r4, #12]
  40e09e:	061a      	lsls	r2, r3, #24
  40e0a0:	d422      	bmi.n	40e0e8 <_fclose_r+0x90>
  40e0a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40e0a4:	b141      	cbz	r1, 40e0b8 <_fclose_r+0x60>
  40e0a6:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40e0aa:	4299      	cmp	r1, r3
  40e0ac:	d002      	beq.n	40e0b4 <_fclose_r+0x5c>
  40e0ae:	4628      	mov	r0, r5
  40e0b0:	f7fe fa52 	bl	40c558 <_free_r>
  40e0b4:	2300      	movs	r3, #0
  40e0b6:	6323      	str	r3, [r4, #48]	; 0x30
  40e0b8:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40e0ba:	b121      	cbz	r1, 40e0c6 <_fclose_r+0x6e>
  40e0bc:	4628      	mov	r0, r5
  40e0be:	f7fe fa4b 	bl	40c558 <_free_r>
  40e0c2:	2300      	movs	r3, #0
  40e0c4:	6463      	str	r3, [r4, #68]	; 0x44
  40e0c6:	f7fe f9d1 	bl	40c46c <__sfp_lock_acquire>
  40e0ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40e0cc:	2200      	movs	r2, #0
  40e0ce:	07db      	lsls	r3, r3, #31
  40e0d0:	81a2      	strh	r2, [r4, #12]
  40e0d2:	d50e      	bpl.n	40e0f2 <_fclose_r+0x9a>
  40e0d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40e0d6:	f7fe fcd7 	bl	40ca88 <__retarget_lock_close_recursive>
  40e0da:	f7fe f9cd 	bl	40c478 <__sfp_lock_release>
  40e0de:	4630      	mov	r0, r6
  40e0e0:	bd70      	pop	{r4, r5, r6, pc}
  40e0e2:	f7fe f997 	bl	40c414 <__sinit>
  40e0e6:	e7bf      	b.n	40e068 <_fclose_r+0x10>
  40e0e8:	6921      	ldr	r1, [r4, #16]
  40e0ea:	4628      	mov	r0, r5
  40e0ec:	f7fe fa34 	bl	40c558 <_free_r>
  40e0f0:	e7d7      	b.n	40e0a2 <_fclose_r+0x4a>
  40e0f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40e0f4:	f7fe fccc 	bl	40ca90 <__retarget_lock_release_recursive>
  40e0f8:	e7ec      	b.n	40e0d4 <_fclose_r+0x7c>
  40e0fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40e0fc:	f7fe fcc6 	bl	40ca8c <__retarget_lock_acquire_recursive>
  40e100:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40e104:	2b00      	cmp	r3, #0
  40e106:	d1bb      	bne.n	40e080 <_fclose_r+0x28>
  40e108:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40e10a:	f016 0601 	ands.w	r6, r6, #1
  40e10e:	d1b1      	bne.n	40e074 <_fclose_r+0x1c>
  40e110:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40e112:	f7fe fcbd 	bl	40ca90 <__retarget_lock_release_recursive>
  40e116:	4630      	mov	r0, r6
  40e118:	bd70      	pop	{r4, r5, r6, pc}
  40e11a:	bf00      	nop

0040e11c <__fputwc>:
  40e11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40e120:	b082      	sub	sp, #8
  40e122:	4680      	mov	r8, r0
  40e124:	4689      	mov	r9, r1
  40e126:	4614      	mov	r4, r2
  40e128:	f000 f8a2 	bl	40e270 <__locale_mb_cur_max>
  40e12c:	2801      	cmp	r0, #1
  40e12e:	d036      	beq.n	40e19e <__fputwc+0x82>
  40e130:	464a      	mov	r2, r9
  40e132:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40e136:	a901      	add	r1, sp, #4
  40e138:	4640      	mov	r0, r8
  40e13a:	f000 f941 	bl	40e3c0 <_wcrtomb_r>
  40e13e:	1c42      	adds	r2, r0, #1
  40e140:	4606      	mov	r6, r0
  40e142:	d025      	beq.n	40e190 <__fputwc+0x74>
  40e144:	b3a8      	cbz	r0, 40e1b2 <__fputwc+0x96>
  40e146:	f89d e004 	ldrb.w	lr, [sp, #4]
  40e14a:	2500      	movs	r5, #0
  40e14c:	f10d 0a04 	add.w	sl, sp, #4
  40e150:	e009      	b.n	40e166 <__fputwc+0x4a>
  40e152:	6823      	ldr	r3, [r4, #0]
  40e154:	1c5a      	adds	r2, r3, #1
  40e156:	6022      	str	r2, [r4, #0]
  40e158:	f883 e000 	strb.w	lr, [r3]
  40e15c:	3501      	adds	r5, #1
  40e15e:	42b5      	cmp	r5, r6
  40e160:	d227      	bcs.n	40e1b2 <__fputwc+0x96>
  40e162:	f815 e00a 	ldrb.w	lr, [r5, sl]
  40e166:	68a3      	ldr	r3, [r4, #8]
  40e168:	3b01      	subs	r3, #1
  40e16a:	2b00      	cmp	r3, #0
  40e16c:	60a3      	str	r3, [r4, #8]
  40e16e:	daf0      	bge.n	40e152 <__fputwc+0x36>
  40e170:	69a7      	ldr	r7, [r4, #24]
  40e172:	42bb      	cmp	r3, r7
  40e174:	4671      	mov	r1, lr
  40e176:	4622      	mov	r2, r4
  40e178:	4640      	mov	r0, r8
  40e17a:	db02      	blt.n	40e182 <__fputwc+0x66>
  40e17c:	f1be 0f0a 	cmp.w	lr, #10
  40e180:	d1e7      	bne.n	40e152 <__fputwc+0x36>
  40e182:	f000 f8c5 	bl	40e310 <__swbuf_r>
  40e186:	1c43      	adds	r3, r0, #1
  40e188:	d1e8      	bne.n	40e15c <__fputwc+0x40>
  40e18a:	b002      	add	sp, #8
  40e18c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e190:	89a3      	ldrh	r3, [r4, #12]
  40e192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40e196:	81a3      	strh	r3, [r4, #12]
  40e198:	b002      	add	sp, #8
  40e19a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e19e:	f109 33ff 	add.w	r3, r9, #4294967295
  40e1a2:	2bfe      	cmp	r3, #254	; 0xfe
  40e1a4:	d8c4      	bhi.n	40e130 <__fputwc+0x14>
  40e1a6:	fa5f fe89 	uxtb.w	lr, r9
  40e1aa:	4606      	mov	r6, r0
  40e1ac:	f88d e004 	strb.w	lr, [sp, #4]
  40e1b0:	e7cb      	b.n	40e14a <__fputwc+0x2e>
  40e1b2:	4648      	mov	r0, r9
  40e1b4:	b002      	add	sp, #8
  40e1b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e1ba:	bf00      	nop

0040e1bc <_fputwc_r>:
  40e1bc:	b530      	push	{r4, r5, lr}
  40e1be:	6e53      	ldr	r3, [r2, #100]	; 0x64
  40e1c0:	f013 0f01 	tst.w	r3, #1
  40e1c4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40e1c8:	4614      	mov	r4, r2
  40e1ca:	b083      	sub	sp, #12
  40e1cc:	4605      	mov	r5, r0
  40e1ce:	b29a      	uxth	r2, r3
  40e1d0:	d101      	bne.n	40e1d6 <_fputwc_r+0x1a>
  40e1d2:	0590      	lsls	r0, r2, #22
  40e1d4:	d51c      	bpl.n	40e210 <_fputwc_r+0x54>
  40e1d6:	0490      	lsls	r0, r2, #18
  40e1d8:	d406      	bmi.n	40e1e8 <_fputwc_r+0x2c>
  40e1da:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40e1dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40e1e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40e1e4:	81a3      	strh	r3, [r4, #12]
  40e1e6:	6662      	str	r2, [r4, #100]	; 0x64
  40e1e8:	4628      	mov	r0, r5
  40e1ea:	4622      	mov	r2, r4
  40e1ec:	f7ff ff96 	bl	40e11c <__fputwc>
  40e1f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40e1f2:	07da      	lsls	r2, r3, #31
  40e1f4:	4605      	mov	r5, r0
  40e1f6:	d402      	bmi.n	40e1fe <_fputwc_r+0x42>
  40e1f8:	89a3      	ldrh	r3, [r4, #12]
  40e1fa:	059b      	lsls	r3, r3, #22
  40e1fc:	d502      	bpl.n	40e204 <_fputwc_r+0x48>
  40e1fe:	4628      	mov	r0, r5
  40e200:	b003      	add	sp, #12
  40e202:	bd30      	pop	{r4, r5, pc}
  40e204:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40e206:	f7fe fc43 	bl	40ca90 <__retarget_lock_release_recursive>
  40e20a:	4628      	mov	r0, r5
  40e20c:	b003      	add	sp, #12
  40e20e:	bd30      	pop	{r4, r5, pc}
  40e210:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40e212:	9101      	str	r1, [sp, #4]
  40e214:	f7fe fc3a 	bl	40ca8c <__retarget_lock_acquire_recursive>
  40e218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40e21c:	9901      	ldr	r1, [sp, #4]
  40e21e:	b29a      	uxth	r2, r3
  40e220:	e7d9      	b.n	40e1d6 <_fputwc_r+0x1a>
  40e222:	bf00      	nop

0040e224 <_fstat_r>:
  40e224:	b538      	push	{r3, r4, r5, lr}
  40e226:	460b      	mov	r3, r1
  40e228:	4c07      	ldr	r4, [pc, #28]	; (40e248 <_fstat_r+0x24>)
  40e22a:	4605      	mov	r5, r0
  40e22c:	4611      	mov	r1, r2
  40e22e:	4618      	mov	r0, r3
  40e230:	2300      	movs	r3, #0
  40e232:	6023      	str	r3, [r4, #0]
  40e234:	f7f2 ffa5 	bl	401182 <_fstat>
  40e238:	1c43      	adds	r3, r0, #1
  40e23a:	d000      	beq.n	40e23e <_fstat_r+0x1a>
  40e23c:	bd38      	pop	{r3, r4, r5, pc}
  40e23e:	6823      	ldr	r3, [r4, #0]
  40e240:	2b00      	cmp	r3, #0
  40e242:	d0fb      	beq.n	40e23c <_fstat_r+0x18>
  40e244:	602b      	str	r3, [r5, #0]
  40e246:	bd38      	pop	{r3, r4, r5, pc}
  40e248:	20404a70 	.word	0x20404a70

0040e24c <_isatty_r>:
  40e24c:	b538      	push	{r3, r4, r5, lr}
  40e24e:	4c07      	ldr	r4, [pc, #28]	; (40e26c <_isatty_r+0x20>)
  40e250:	2300      	movs	r3, #0
  40e252:	4605      	mov	r5, r0
  40e254:	4608      	mov	r0, r1
  40e256:	6023      	str	r3, [r4, #0]
  40e258:	f7f2 ff98 	bl	40118c <_isatty>
  40e25c:	1c43      	adds	r3, r0, #1
  40e25e:	d000      	beq.n	40e262 <_isatty_r+0x16>
  40e260:	bd38      	pop	{r3, r4, r5, pc}
  40e262:	6823      	ldr	r3, [r4, #0]
  40e264:	2b00      	cmp	r3, #0
  40e266:	d0fb      	beq.n	40e260 <_isatty_r+0x14>
  40e268:	602b      	str	r3, [r5, #0]
  40e26a:	bd38      	pop	{r3, r4, r5, pc}
  40e26c:	20404a70 	.word	0x20404a70

0040e270 <__locale_mb_cur_max>:
  40e270:	4b04      	ldr	r3, [pc, #16]	; (40e284 <__locale_mb_cur_max+0x14>)
  40e272:	4a05      	ldr	r2, [pc, #20]	; (40e288 <__locale_mb_cur_max+0x18>)
  40e274:	681b      	ldr	r3, [r3, #0]
  40e276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40e278:	2b00      	cmp	r3, #0
  40e27a:	bf08      	it	eq
  40e27c:	4613      	moveq	r3, r2
  40e27e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40e282:	4770      	bx	lr
  40e284:	20400064 	.word	0x20400064
  40e288:	204008a4 	.word	0x204008a4

0040e28c <_lseek_r>:
  40e28c:	b570      	push	{r4, r5, r6, lr}
  40e28e:	460d      	mov	r5, r1
  40e290:	4c08      	ldr	r4, [pc, #32]	; (40e2b4 <_lseek_r+0x28>)
  40e292:	4611      	mov	r1, r2
  40e294:	4606      	mov	r6, r0
  40e296:	461a      	mov	r2, r3
  40e298:	4628      	mov	r0, r5
  40e29a:	2300      	movs	r3, #0
  40e29c:	6023      	str	r3, [r4, #0]
  40e29e:	f7f2 ff77 	bl	401190 <_lseek>
  40e2a2:	1c43      	adds	r3, r0, #1
  40e2a4:	d000      	beq.n	40e2a8 <_lseek_r+0x1c>
  40e2a6:	bd70      	pop	{r4, r5, r6, pc}
  40e2a8:	6823      	ldr	r3, [r4, #0]
  40e2aa:	2b00      	cmp	r3, #0
  40e2ac:	d0fb      	beq.n	40e2a6 <_lseek_r+0x1a>
  40e2ae:	6033      	str	r3, [r6, #0]
  40e2b0:	bd70      	pop	{r4, r5, r6, pc}
  40e2b2:	bf00      	nop
  40e2b4:	20404a70 	.word	0x20404a70

0040e2b8 <__ascii_mbtowc>:
  40e2b8:	b082      	sub	sp, #8
  40e2ba:	b149      	cbz	r1, 40e2d0 <__ascii_mbtowc+0x18>
  40e2bc:	b15a      	cbz	r2, 40e2d6 <__ascii_mbtowc+0x1e>
  40e2be:	b16b      	cbz	r3, 40e2dc <__ascii_mbtowc+0x24>
  40e2c0:	7813      	ldrb	r3, [r2, #0]
  40e2c2:	600b      	str	r3, [r1, #0]
  40e2c4:	7812      	ldrb	r2, [r2, #0]
  40e2c6:	1c10      	adds	r0, r2, #0
  40e2c8:	bf18      	it	ne
  40e2ca:	2001      	movne	r0, #1
  40e2cc:	b002      	add	sp, #8
  40e2ce:	4770      	bx	lr
  40e2d0:	a901      	add	r1, sp, #4
  40e2d2:	2a00      	cmp	r2, #0
  40e2d4:	d1f3      	bne.n	40e2be <__ascii_mbtowc+0x6>
  40e2d6:	4610      	mov	r0, r2
  40e2d8:	b002      	add	sp, #8
  40e2da:	4770      	bx	lr
  40e2dc:	f06f 0001 	mvn.w	r0, #1
  40e2e0:	e7f4      	b.n	40e2cc <__ascii_mbtowc+0x14>
  40e2e2:	bf00      	nop

0040e2e4 <_read_r>:
  40e2e4:	b570      	push	{r4, r5, r6, lr}
  40e2e6:	460d      	mov	r5, r1
  40e2e8:	4c08      	ldr	r4, [pc, #32]	; (40e30c <_read_r+0x28>)
  40e2ea:	4611      	mov	r1, r2
  40e2ec:	4606      	mov	r6, r0
  40e2ee:	461a      	mov	r2, r3
  40e2f0:	4628      	mov	r0, r5
  40e2f2:	2300      	movs	r3, #0
  40e2f4:	6023      	str	r3, [r4, #0]
  40e2f6:	f7f1 ffa7 	bl	400248 <_read>
  40e2fa:	1c43      	adds	r3, r0, #1
  40e2fc:	d000      	beq.n	40e300 <_read_r+0x1c>
  40e2fe:	bd70      	pop	{r4, r5, r6, pc}
  40e300:	6823      	ldr	r3, [r4, #0]
  40e302:	2b00      	cmp	r3, #0
  40e304:	d0fb      	beq.n	40e2fe <_read_r+0x1a>
  40e306:	6033      	str	r3, [r6, #0]
  40e308:	bd70      	pop	{r4, r5, r6, pc}
  40e30a:	bf00      	nop
  40e30c:	20404a70 	.word	0x20404a70

0040e310 <__swbuf_r>:
  40e310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40e312:	460d      	mov	r5, r1
  40e314:	4614      	mov	r4, r2
  40e316:	4606      	mov	r6, r0
  40e318:	b110      	cbz	r0, 40e320 <__swbuf_r+0x10>
  40e31a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40e31c:	2b00      	cmp	r3, #0
  40e31e:	d04b      	beq.n	40e3b8 <__swbuf_r+0xa8>
  40e320:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40e324:	69a3      	ldr	r3, [r4, #24]
  40e326:	60a3      	str	r3, [r4, #8]
  40e328:	b291      	uxth	r1, r2
  40e32a:	0708      	lsls	r0, r1, #28
  40e32c:	d539      	bpl.n	40e3a2 <__swbuf_r+0x92>
  40e32e:	6923      	ldr	r3, [r4, #16]
  40e330:	2b00      	cmp	r3, #0
  40e332:	d036      	beq.n	40e3a2 <__swbuf_r+0x92>
  40e334:	b2ed      	uxtb	r5, r5
  40e336:	0489      	lsls	r1, r1, #18
  40e338:	462f      	mov	r7, r5
  40e33a:	d515      	bpl.n	40e368 <__swbuf_r+0x58>
  40e33c:	6822      	ldr	r2, [r4, #0]
  40e33e:	6961      	ldr	r1, [r4, #20]
  40e340:	1ad3      	subs	r3, r2, r3
  40e342:	428b      	cmp	r3, r1
  40e344:	da1c      	bge.n	40e380 <__swbuf_r+0x70>
  40e346:	3301      	adds	r3, #1
  40e348:	68a1      	ldr	r1, [r4, #8]
  40e34a:	1c50      	adds	r0, r2, #1
  40e34c:	3901      	subs	r1, #1
  40e34e:	60a1      	str	r1, [r4, #8]
  40e350:	6020      	str	r0, [r4, #0]
  40e352:	7015      	strb	r5, [r2, #0]
  40e354:	6962      	ldr	r2, [r4, #20]
  40e356:	429a      	cmp	r2, r3
  40e358:	d01a      	beq.n	40e390 <__swbuf_r+0x80>
  40e35a:	89a3      	ldrh	r3, [r4, #12]
  40e35c:	07db      	lsls	r3, r3, #31
  40e35e:	d501      	bpl.n	40e364 <__swbuf_r+0x54>
  40e360:	2d0a      	cmp	r5, #10
  40e362:	d015      	beq.n	40e390 <__swbuf_r+0x80>
  40e364:	4638      	mov	r0, r7
  40e366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40e368:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40e36a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40e36e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40e372:	81a2      	strh	r2, [r4, #12]
  40e374:	6822      	ldr	r2, [r4, #0]
  40e376:	6661      	str	r1, [r4, #100]	; 0x64
  40e378:	6961      	ldr	r1, [r4, #20]
  40e37a:	1ad3      	subs	r3, r2, r3
  40e37c:	428b      	cmp	r3, r1
  40e37e:	dbe2      	blt.n	40e346 <__swbuf_r+0x36>
  40e380:	4621      	mov	r1, r4
  40e382:	4630      	mov	r0, r6
  40e384:	f7fd ffee 	bl	40c364 <_fflush_r>
  40e388:	b940      	cbnz	r0, 40e39c <__swbuf_r+0x8c>
  40e38a:	6822      	ldr	r2, [r4, #0]
  40e38c:	2301      	movs	r3, #1
  40e38e:	e7db      	b.n	40e348 <__swbuf_r+0x38>
  40e390:	4621      	mov	r1, r4
  40e392:	4630      	mov	r0, r6
  40e394:	f7fd ffe6 	bl	40c364 <_fflush_r>
  40e398:	2800      	cmp	r0, #0
  40e39a:	d0e3      	beq.n	40e364 <__swbuf_r+0x54>
  40e39c:	f04f 37ff 	mov.w	r7, #4294967295
  40e3a0:	e7e0      	b.n	40e364 <__swbuf_r+0x54>
  40e3a2:	4621      	mov	r1, r4
  40e3a4:	4630      	mov	r0, r6
  40e3a6:	f7fc ff0b 	bl	40b1c0 <__swsetup_r>
  40e3aa:	2800      	cmp	r0, #0
  40e3ac:	d1f6      	bne.n	40e39c <__swbuf_r+0x8c>
  40e3ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40e3b2:	6923      	ldr	r3, [r4, #16]
  40e3b4:	b291      	uxth	r1, r2
  40e3b6:	e7bd      	b.n	40e334 <__swbuf_r+0x24>
  40e3b8:	f7fe f82c 	bl	40c414 <__sinit>
  40e3bc:	e7b0      	b.n	40e320 <__swbuf_r+0x10>
  40e3be:	bf00      	nop

0040e3c0 <_wcrtomb_r>:
  40e3c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  40e3c2:	4606      	mov	r6, r0
  40e3c4:	b085      	sub	sp, #20
  40e3c6:	461f      	mov	r7, r3
  40e3c8:	b189      	cbz	r1, 40e3ee <_wcrtomb_r+0x2e>
  40e3ca:	4c10      	ldr	r4, [pc, #64]	; (40e40c <_wcrtomb_r+0x4c>)
  40e3cc:	4d10      	ldr	r5, [pc, #64]	; (40e410 <_wcrtomb_r+0x50>)
  40e3ce:	6824      	ldr	r4, [r4, #0]
  40e3d0:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40e3d2:	2c00      	cmp	r4, #0
  40e3d4:	bf08      	it	eq
  40e3d6:	462c      	moveq	r4, r5
  40e3d8:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40e3dc:	47a0      	blx	r4
  40e3de:	1c43      	adds	r3, r0, #1
  40e3e0:	d103      	bne.n	40e3ea <_wcrtomb_r+0x2a>
  40e3e2:	2200      	movs	r2, #0
  40e3e4:	238a      	movs	r3, #138	; 0x8a
  40e3e6:	603a      	str	r2, [r7, #0]
  40e3e8:	6033      	str	r3, [r6, #0]
  40e3ea:	b005      	add	sp, #20
  40e3ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40e3ee:	460c      	mov	r4, r1
  40e3f0:	4906      	ldr	r1, [pc, #24]	; (40e40c <_wcrtomb_r+0x4c>)
  40e3f2:	4a07      	ldr	r2, [pc, #28]	; (40e410 <_wcrtomb_r+0x50>)
  40e3f4:	6809      	ldr	r1, [r1, #0]
  40e3f6:	6b49      	ldr	r1, [r1, #52]	; 0x34
  40e3f8:	2900      	cmp	r1, #0
  40e3fa:	bf08      	it	eq
  40e3fc:	4611      	moveq	r1, r2
  40e3fe:	4622      	mov	r2, r4
  40e400:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40e404:	a901      	add	r1, sp, #4
  40e406:	47a0      	blx	r4
  40e408:	e7e9      	b.n	40e3de <_wcrtomb_r+0x1e>
  40e40a:	bf00      	nop
  40e40c:	20400064 	.word	0x20400064
  40e410:	204008a4 	.word	0x204008a4

0040e414 <__ascii_wctomb>:
  40e414:	b121      	cbz	r1, 40e420 <__ascii_wctomb+0xc>
  40e416:	2aff      	cmp	r2, #255	; 0xff
  40e418:	d804      	bhi.n	40e424 <__ascii_wctomb+0x10>
  40e41a:	700a      	strb	r2, [r1, #0]
  40e41c:	2001      	movs	r0, #1
  40e41e:	4770      	bx	lr
  40e420:	4608      	mov	r0, r1
  40e422:	4770      	bx	lr
  40e424:	238a      	movs	r3, #138	; 0x8a
  40e426:	6003      	str	r3, [r0, #0]
  40e428:	f04f 30ff 	mov.w	r0, #4294967295
  40e42c:	4770      	bx	lr
  40e42e:	bf00      	nop

0040e430 <__gedf2>:
  40e430:	f04f 3cff 	mov.w	ip, #4294967295
  40e434:	e006      	b.n	40e444 <__cmpdf2+0x4>
  40e436:	bf00      	nop

0040e438 <__ledf2>:
  40e438:	f04f 0c01 	mov.w	ip, #1
  40e43c:	e002      	b.n	40e444 <__cmpdf2+0x4>
  40e43e:	bf00      	nop

0040e440 <__cmpdf2>:
  40e440:	f04f 0c01 	mov.w	ip, #1
  40e444:	f84d cd04 	str.w	ip, [sp, #-4]!
  40e448:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40e44c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40e450:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40e454:	bf18      	it	ne
  40e456:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40e45a:	d01b      	beq.n	40e494 <__cmpdf2+0x54>
  40e45c:	b001      	add	sp, #4
  40e45e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40e462:	bf0c      	ite	eq
  40e464:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40e468:	ea91 0f03 	teqne	r1, r3
  40e46c:	bf02      	ittt	eq
  40e46e:	ea90 0f02 	teqeq	r0, r2
  40e472:	2000      	moveq	r0, #0
  40e474:	4770      	bxeq	lr
  40e476:	f110 0f00 	cmn.w	r0, #0
  40e47a:	ea91 0f03 	teq	r1, r3
  40e47e:	bf58      	it	pl
  40e480:	4299      	cmppl	r1, r3
  40e482:	bf08      	it	eq
  40e484:	4290      	cmpeq	r0, r2
  40e486:	bf2c      	ite	cs
  40e488:	17d8      	asrcs	r0, r3, #31
  40e48a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40e48e:	f040 0001 	orr.w	r0, r0, #1
  40e492:	4770      	bx	lr
  40e494:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40e498:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40e49c:	d102      	bne.n	40e4a4 <__cmpdf2+0x64>
  40e49e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40e4a2:	d107      	bne.n	40e4b4 <__cmpdf2+0x74>
  40e4a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40e4a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40e4ac:	d1d6      	bne.n	40e45c <__cmpdf2+0x1c>
  40e4ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40e4b2:	d0d3      	beq.n	40e45c <__cmpdf2+0x1c>
  40e4b4:	f85d 0b04 	ldr.w	r0, [sp], #4
  40e4b8:	4770      	bx	lr
  40e4ba:	bf00      	nop

0040e4bc <__aeabi_cdrcmple>:
  40e4bc:	4684      	mov	ip, r0
  40e4be:	4610      	mov	r0, r2
  40e4c0:	4662      	mov	r2, ip
  40e4c2:	468c      	mov	ip, r1
  40e4c4:	4619      	mov	r1, r3
  40e4c6:	4663      	mov	r3, ip
  40e4c8:	e000      	b.n	40e4cc <__aeabi_cdcmpeq>
  40e4ca:	bf00      	nop

0040e4cc <__aeabi_cdcmpeq>:
  40e4cc:	b501      	push	{r0, lr}
  40e4ce:	f7ff ffb7 	bl	40e440 <__cmpdf2>
  40e4d2:	2800      	cmp	r0, #0
  40e4d4:	bf48      	it	mi
  40e4d6:	f110 0f00 	cmnmi.w	r0, #0
  40e4da:	bd01      	pop	{r0, pc}

0040e4dc <__aeabi_dcmpeq>:
  40e4dc:	f84d ed08 	str.w	lr, [sp, #-8]!
  40e4e0:	f7ff fff4 	bl	40e4cc <__aeabi_cdcmpeq>
  40e4e4:	bf0c      	ite	eq
  40e4e6:	2001      	moveq	r0, #1
  40e4e8:	2000      	movne	r0, #0
  40e4ea:	f85d fb08 	ldr.w	pc, [sp], #8
  40e4ee:	bf00      	nop

0040e4f0 <__aeabi_dcmplt>:
  40e4f0:	f84d ed08 	str.w	lr, [sp, #-8]!
  40e4f4:	f7ff ffea 	bl	40e4cc <__aeabi_cdcmpeq>
  40e4f8:	bf34      	ite	cc
  40e4fa:	2001      	movcc	r0, #1
  40e4fc:	2000      	movcs	r0, #0
  40e4fe:	f85d fb08 	ldr.w	pc, [sp], #8
  40e502:	bf00      	nop

0040e504 <__aeabi_dcmple>:
  40e504:	f84d ed08 	str.w	lr, [sp, #-8]!
  40e508:	f7ff ffe0 	bl	40e4cc <__aeabi_cdcmpeq>
  40e50c:	bf94      	ite	ls
  40e50e:	2001      	movls	r0, #1
  40e510:	2000      	movhi	r0, #0
  40e512:	f85d fb08 	ldr.w	pc, [sp], #8
  40e516:	bf00      	nop

0040e518 <__aeabi_dcmpge>:
  40e518:	f84d ed08 	str.w	lr, [sp, #-8]!
  40e51c:	f7ff ffce 	bl	40e4bc <__aeabi_cdrcmple>
  40e520:	bf94      	ite	ls
  40e522:	2001      	movls	r0, #1
  40e524:	2000      	movhi	r0, #0
  40e526:	f85d fb08 	ldr.w	pc, [sp], #8
  40e52a:	bf00      	nop

0040e52c <__aeabi_dcmpgt>:
  40e52c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40e530:	f7ff ffc4 	bl	40e4bc <__aeabi_cdrcmple>
  40e534:	bf34      	ite	cc
  40e536:	2001      	movcc	r0, #1
  40e538:	2000      	movcs	r0, #0
  40e53a:	f85d fb08 	ldr.w	pc, [sp], #8
  40e53e:	bf00      	nop

0040e540 <__aeabi_dcmpun>:
  40e540:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40e544:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40e548:	d102      	bne.n	40e550 <__aeabi_dcmpun+0x10>
  40e54a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40e54e:	d10a      	bne.n	40e566 <__aeabi_dcmpun+0x26>
  40e550:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40e554:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40e558:	d102      	bne.n	40e560 <__aeabi_dcmpun+0x20>
  40e55a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40e55e:	d102      	bne.n	40e566 <__aeabi_dcmpun+0x26>
  40e560:	f04f 0000 	mov.w	r0, #0
  40e564:	4770      	bx	lr
  40e566:	f04f 0001 	mov.w	r0, #1
  40e56a:	4770      	bx	lr

0040e56c <__aeabi_d2iz>:
  40e56c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40e570:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40e574:	d215      	bcs.n	40e5a2 <__aeabi_d2iz+0x36>
  40e576:	d511      	bpl.n	40e59c <__aeabi_d2iz+0x30>
  40e578:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40e57c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40e580:	d912      	bls.n	40e5a8 <__aeabi_d2iz+0x3c>
  40e582:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40e586:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40e58a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40e58e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40e592:	fa23 f002 	lsr.w	r0, r3, r2
  40e596:	bf18      	it	ne
  40e598:	4240      	negne	r0, r0
  40e59a:	4770      	bx	lr
  40e59c:	f04f 0000 	mov.w	r0, #0
  40e5a0:	4770      	bx	lr
  40e5a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40e5a6:	d105      	bne.n	40e5b4 <__aeabi_d2iz+0x48>
  40e5a8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40e5ac:	bf08      	it	eq
  40e5ae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40e5b2:	4770      	bx	lr
  40e5b4:	f04f 0000 	mov.w	r0, #0
  40e5b8:	4770      	bx	lr
  40e5ba:	bf00      	nop

0040e5bc <__aeabi_uldivmod>:
  40e5bc:	b953      	cbnz	r3, 40e5d4 <__aeabi_uldivmod+0x18>
  40e5be:	b94a      	cbnz	r2, 40e5d4 <__aeabi_uldivmod+0x18>
  40e5c0:	2900      	cmp	r1, #0
  40e5c2:	bf08      	it	eq
  40e5c4:	2800      	cmpeq	r0, #0
  40e5c6:	bf1c      	itt	ne
  40e5c8:	f04f 31ff 	movne.w	r1, #4294967295
  40e5cc:	f04f 30ff 	movne.w	r0, #4294967295
  40e5d0:	f000 b97a 	b.w	40e8c8 <__aeabi_idiv0>
  40e5d4:	f1ad 0c08 	sub.w	ip, sp, #8
  40e5d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40e5dc:	f000 f806 	bl	40e5ec <__udivmoddi4>
  40e5e0:	f8dd e004 	ldr.w	lr, [sp, #4]
  40e5e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40e5e8:	b004      	add	sp, #16
  40e5ea:	4770      	bx	lr

0040e5ec <__udivmoddi4>:
  40e5ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40e5f0:	468c      	mov	ip, r1
  40e5f2:	460d      	mov	r5, r1
  40e5f4:	4604      	mov	r4, r0
  40e5f6:	9e08      	ldr	r6, [sp, #32]
  40e5f8:	2b00      	cmp	r3, #0
  40e5fa:	d151      	bne.n	40e6a0 <__udivmoddi4+0xb4>
  40e5fc:	428a      	cmp	r2, r1
  40e5fe:	4617      	mov	r7, r2
  40e600:	d96d      	bls.n	40e6de <__udivmoddi4+0xf2>
  40e602:	fab2 fe82 	clz	lr, r2
  40e606:	f1be 0f00 	cmp.w	lr, #0
  40e60a:	d00b      	beq.n	40e624 <__udivmoddi4+0x38>
  40e60c:	f1ce 0c20 	rsb	ip, lr, #32
  40e610:	fa01 f50e 	lsl.w	r5, r1, lr
  40e614:	fa20 fc0c 	lsr.w	ip, r0, ip
  40e618:	fa02 f70e 	lsl.w	r7, r2, lr
  40e61c:	ea4c 0c05 	orr.w	ip, ip, r5
  40e620:	fa00 f40e 	lsl.w	r4, r0, lr
  40e624:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40e628:	0c25      	lsrs	r5, r4, #16
  40e62a:	fbbc f8fa 	udiv	r8, ip, sl
  40e62e:	fa1f f987 	uxth.w	r9, r7
  40e632:	fb0a cc18 	mls	ip, sl, r8, ip
  40e636:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40e63a:	fb08 f309 	mul.w	r3, r8, r9
  40e63e:	42ab      	cmp	r3, r5
  40e640:	d90a      	bls.n	40e658 <__udivmoddi4+0x6c>
  40e642:	19ed      	adds	r5, r5, r7
  40e644:	f108 32ff 	add.w	r2, r8, #4294967295
  40e648:	f080 8123 	bcs.w	40e892 <__udivmoddi4+0x2a6>
  40e64c:	42ab      	cmp	r3, r5
  40e64e:	f240 8120 	bls.w	40e892 <__udivmoddi4+0x2a6>
  40e652:	f1a8 0802 	sub.w	r8, r8, #2
  40e656:	443d      	add	r5, r7
  40e658:	1aed      	subs	r5, r5, r3
  40e65a:	b2a4      	uxth	r4, r4
  40e65c:	fbb5 f0fa 	udiv	r0, r5, sl
  40e660:	fb0a 5510 	mls	r5, sl, r0, r5
  40e664:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40e668:	fb00 f909 	mul.w	r9, r0, r9
  40e66c:	45a1      	cmp	r9, r4
  40e66e:	d909      	bls.n	40e684 <__udivmoddi4+0x98>
  40e670:	19e4      	adds	r4, r4, r7
  40e672:	f100 33ff 	add.w	r3, r0, #4294967295
  40e676:	f080 810a 	bcs.w	40e88e <__udivmoddi4+0x2a2>
  40e67a:	45a1      	cmp	r9, r4
  40e67c:	f240 8107 	bls.w	40e88e <__udivmoddi4+0x2a2>
  40e680:	3802      	subs	r0, #2
  40e682:	443c      	add	r4, r7
  40e684:	eba4 0409 	sub.w	r4, r4, r9
  40e688:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40e68c:	2100      	movs	r1, #0
  40e68e:	2e00      	cmp	r6, #0
  40e690:	d061      	beq.n	40e756 <__udivmoddi4+0x16a>
  40e692:	fa24 f40e 	lsr.w	r4, r4, lr
  40e696:	2300      	movs	r3, #0
  40e698:	6034      	str	r4, [r6, #0]
  40e69a:	6073      	str	r3, [r6, #4]
  40e69c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e6a0:	428b      	cmp	r3, r1
  40e6a2:	d907      	bls.n	40e6b4 <__udivmoddi4+0xc8>
  40e6a4:	2e00      	cmp	r6, #0
  40e6a6:	d054      	beq.n	40e752 <__udivmoddi4+0x166>
  40e6a8:	2100      	movs	r1, #0
  40e6aa:	e886 0021 	stmia.w	r6, {r0, r5}
  40e6ae:	4608      	mov	r0, r1
  40e6b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e6b4:	fab3 f183 	clz	r1, r3
  40e6b8:	2900      	cmp	r1, #0
  40e6ba:	f040 808e 	bne.w	40e7da <__udivmoddi4+0x1ee>
  40e6be:	42ab      	cmp	r3, r5
  40e6c0:	d302      	bcc.n	40e6c8 <__udivmoddi4+0xdc>
  40e6c2:	4282      	cmp	r2, r0
  40e6c4:	f200 80fa 	bhi.w	40e8bc <__udivmoddi4+0x2d0>
  40e6c8:	1a84      	subs	r4, r0, r2
  40e6ca:	eb65 0503 	sbc.w	r5, r5, r3
  40e6ce:	2001      	movs	r0, #1
  40e6d0:	46ac      	mov	ip, r5
  40e6d2:	2e00      	cmp	r6, #0
  40e6d4:	d03f      	beq.n	40e756 <__udivmoddi4+0x16a>
  40e6d6:	e886 1010 	stmia.w	r6, {r4, ip}
  40e6da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e6de:	b912      	cbnz	r2, 40e6e6 <__udivmoddi4+0xfa>
  40e6e0:	2701      	movs	r7, #1
  40e6e2:	fbb7 f7f2 	udiv	r7, r7, r2
  40e6e6:	fab7 fe87 	clz	lr, r7
  40e6ea:	f1be 0f00 	cmp.w	lr, #0
  40e6ee:	d134      	bne.n	40e75a <__udivmoddi4+0x16e>
  40e6f0:	1beb      	subs	r3, r5, r7
  40e6f2:	0c3a      	lsrs	r2, r7, #16
  40e6f4:	fa1f fc87 	uxth.w	ip, r7
  40e6f8:	2101      	movs	r1, #1
  40e6fa:	fbb3 f8f2 	udiv	r8, r3, r2
  40e6fe:	0c25      	lsrs	r5, r4, #16
  40e700:	fb02 3318 	mls	r3, r2, r8, r3
  40e704:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40e708:	fb0c f308 	mul.w	r3, ip, r8
  40e70c:	42ab      	cmp	r3, r5
  40e70e:	d907      	bls.n	40e720 <__udivmoddi4+0x134>
  40e710:	19ed      	adds	r5, r5, r7
  40e712:	f108 30ff 	add.w	r0, r8, #4294967295
  40e716:	d202      	bcs.n	40e71e <__udivmoddi4+0x132>
  40e718:	42ab      	cmp	r3, r5
  40e71a:	f200 80d1 	bhi.w	40e8c0 <__udivmoddi4+0x2d4>
  40e71e:	4680      	mov	r8, r0
  40e720:	1aed      	subs	r5, r5, r3
  40e722:	b2a3      	uxth	r3, r4
  40e724:	fbb5 f0f2 	udiv	r0, r5, r2
  40e728:	fb02 5510 	mls	r5, r2, r0, r5
  40e72c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40e730:	fb0c fc00 	mul.w	ip, ip, r0
  40e734:	45a4      	cmp	ip, r4
  40e736:	d907      	bls.n	40e748 <__udivmoddi4+0x15c>
  40e738:	19e4      	adds	r4, r4, r7
  40e73a:	f100 33ff 	add.w	r3, r0, #4294967295
  40e73e:	d202      	bcs.n	40e746 <__udivmoddi4+0x15a>
  40e740:	45a4      	cmp	ip, r4
  40e742:	f200 80b8 	bhi.w	40e8b6 <__udivmoddi4+0x2ca>
  40e746:	4618      	mov	r0, r3
  40e748:	eba4 040c 	sub.w	r4, r4, ip
  40e74c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40e750:	e79d      	b.n	40e68e <__udivmoddi4+0xa2>
  40e752:	4631      	mov	r1, r6
  40e754:	4630      	mov	r0, r6
  40e756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e75a:	f1ce 0420 	rsb	r4, lr, #32
  40e75e:	fa05 f30e 	lsl.w	r3, r5, lr
  40e762:	fa07 f70e 	lsl.w	r7, r7, lr
  40e766:	fa20 f804 	lsr.w	r8, r0, r4
  40e76a:	0c3a      	lsrs	r2, r7, #16
  40e76c:	fa25 f404 	lsr.w	r4, r5, r4
  40e770:	ea48 0803 	orr.w	r8, r8, r3
  40e774:	fbb4 f1f2 	udiv	r1, r4, r2
  40e778:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40e77c:	fb02 4411 	mls	r4, r2, r1, r4
  40e780:	fa1f fc87 	uxth.w	ip, r7
  40e784:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40e788:	fb01 f30c 	mul.w	r3, r1, ip
  40e78c:	42ab      	cmp	r3, r5
  40e78e:	fa00 f40e 	lsl.w	r4, r0, lr
  40e792:	d909      	bls.n	40e7a8 <__udivmoddi4+0x1bc>
  40e794:	19ed      	adds	r5, r5, r7
  40e796:	f101 30ff 	add.w	r0, r1, #4294967295
  40e79a:	f080 808a 	bcs.w	40e8b2 <__udivmoddi4+0x2c6>
  40e79e:	42ab      	cmp	r3, r5
  40e7a0:	f240 8087 	bls.w	40e8b2 <__udivmoddi4+0x2c6>
  40e7a4:	3902      	subs	r1, #2
  40e7a6:	443d      	add	r5, r7
  40e7a8:	1aeb      	subs	r3, r5, r3
  40e7aa:	fa1f f588 	uxth.w	r5, r8
  40e7ae:	fbb3 f0f2 	udiv	r0, r3, r2
  40e7b2:	fb02 3310 	mls	r3, r2, r0, r3
  40e7b6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40e7ba:	fb00 f30c 	mul.w	r3, r0, ip
  40e7be:	42ab      	cmp	r3, r5
  40e7c0:	d907      	bls.n	40e7d2 <__udivmoddi4+0x1e6>
  40e7c2:	19ed      	adds	r5, r5, r7
  40e7c4:	f100 38ff 	add.w	r8, r0, #4294967295
  40e7c8:	d26f      	bcs.n	40e8aa <__udivmoddi4+0x2be>
  40e7ca:	42ab      	cmp	r3, r5
  40e7cc:	d96d      	bls.n	40e8aa <__udivmoddi4+0x2be>
  40e7ce:	3802      	subs	r0, #2
  40e7d0:	443d      	add	r5, r7
  40e7d2:	1aeb      	subs	r3, r5, r3
  40e7d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40e7d8:	e78f      	b.n	40e6fa <__udivmoddi4+0x10e>
  40e7da:	f1c1 0720 	rsb	r7, r1, #32
  40e7de:	fa22 f807 	lsr.w	r8, r2, r7
  40e7e2:	408b      	lsls	r3, r1
  40e7e4:	fa05 f401 	lsl.w	r4, r5, r1
  40e7e8:	ea48 0303 	orr.w	r3, r8, r3
  40e7ec:	fa20 fe07 	lsr.w	lr, r0, r7
  40e7f0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40e7f4:	40fd      	lsrs	r5, r7
  40e7f6:	ea4e 0e04 	orr.w	lr, lr, r4
  40e7fa:	fbb5 f9fc 	udiv	r9, r5, ip
  40e7fe:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40e802:	fb0c 5519 	mls	r5, ip, r9, r5
  40e806:	fa1f f883 	uxth.w	r8, r3
  40e80a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40e80e:	fb09 f408 	mul.w	r4, r9, r8
  40e812:	42ac      	cmp	r4, r5
  40e814:	fa02 f201 	lsl.w	r2, r2, r1
  40e818:	fa00 fa01 	lsl.w	sl, r0, r1
  40e81c:	d908      	bls.n	40e830 <__udivmoddi4+0x244>
  40e81e:	18ed      	adds	r5, r5, r3
  40e820:	f109 30ff 	add.w	r0, r9, #4294967295
  40e824:	d243      	bcs.n	40e8ae <__udivmoddi4+0x2c2>
  40e826:	42ac      	cmp	r4, r5
  40e828:	d941      	bls.n	40e8ae <__udivmoddi4+0x2c2>
  40e82a:	f1a9 0902 	sub.w	r9, r9, #2
  40e82e:	441d      	add	r5, r3
  40e830:	1b2d      	subs	r5, r5, r4
  40e832:	fa1f fe8e 	uxth.w	lr, lr
  40e836:	fbb5 f0fc 	udiv	r0, r5, ip
  40e83a:	fb0c 5510 	mls	r5, ip, r0, r5
  40e83e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40e842:	fb00 f808 	mul.w	r8, r0, r8
  40e846:	45a0      	cmp	r8, r4
  40e848:	d907      	bls.n	40e85a <__udivmoddi4+0x26e>
  40e84a:	18e4      	adds	r4, r4, r3
  40e84c:	f100 35ff 	add.w	r5, r0, #4294967295
  40e850:	d229      	bcs.n	40e8a6 <__udivmoddi4+0x2ba>
  40e852:	45a0      	cmp	r8, r4
  40e854:	d927      	bls.n	40e8a6 <__udivmoddi4+0x2ba>
  40e856:	3802      	subs	r0, #2
  40e858:	441c      	add	r4, r3
  40e85a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40e85e:	eba4 0408 	sub.w	r4, r4, r8
  40e862:	fba0 8902 	umull	r8, r9, r0, r2
  40e866:	454c      	cmp	r4, r9
  40e868:	46c6      	mov	lr, r8
  40e86a:	464d      	mov	r5, r9
  40e86c:	d315      	bcc.n	40e89a <__udivmoddi4+0x2ae>
  40e86e:	d012      	beq.n	40e896 <__udivmoddi4+0x2aa>
  40e870:	b156      	cbz	r6, 40e888 <__udivmoddi4+0x29c>
  40e872:	ebba 030e 	subs.w	r3, sl, lr
  40e876:	eb64 0405 	sbc.w	r4, r4, r5
  40e87a:	fa04 f707 	lsl.w	r7, r4, r7
  40e87e:	40cb      	lsrs	r3, r1
  40e880:	431f      	orrs	r7, r3
  40e882:	40cc      	lsrs	r4, r1
  40e884:	6037      	str	r7, [r6, #0]
  40e886:	6074      	str	r4, [r6, #4]
  40e888:	2100      	movs	r1, #0
  40e88a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e88e:	4618      	mov	r0, r3
  40e890:	e6f8      	b.n	40e684 <__udivmoddi4+0x98>
  40e892:	4690      	mov	r8, r2
  40e894:	e6e0      	b.n	40e658 <__udivmoddi4+0x6c>
  40e896:	45c2      	cmp	sl, r8
  40e898:	d2ea      	bcs.n	40e870 <__udivmoddi4+0x284>
  40e89a:	ebb8 0e02 	subs.w	lr, r8, r2
  40e89e:	eb69 0503 	sbc.w	r5, r9, r3
  40e8a2:	3801      	subs	r0, #1
  40e8a4:	e7e4      	b.n	40e870 <__udivmoddi4+0x284>
  40e8a6:	4628      	mov	r0, r5
  40e8a8:	e7d7      	b.n	40e85a <__udivmoddi4+0x26e>
  40e8aa:	4640      	mov	r0, r8
  40e8ac:	e791      	b.n	40e7d2 <__udivmoddi4+0x1e6>
  40e8ae:	4681      	mov	r9, r0
  40e8b0:	e7be      	b.n	40e830 <__udivmoddi4+0x244>
  40e8b2:	4601      	mov	r1, r0
  40e8b4:	e778      	b.n	40e7a8 <__udivmoddi4+0x1bc>
  40e8b6:	3802      	subs	r0, #2
  40e8b8:	443c      	add	r4, r7
  40e8ba:	e745      	b.n	40e748 <__udivmoddi4+0x15c>
  40e8bc:	4608      	mov	r0, r1
  40e8be:	e708      	b.n	40e6d2 <__udivmoddi4+0xe6>
  40e8c0:	f1a8 0802 	sub.w	r8, r8, #2
  40e8c4:	443d      	add	r5, r7
  40e8c6:	e72b      	b.n	40e720 <__udivmoddi4+0x134>

0040e8c8 <__aeabi_idiv0>:
  40e8c8:	4770      	bx	lr
  40e8ca:	bf00      	nop

0040e8cc <ip_addr_any>:
  40e8cc:	0000 0000                                   ....

0040e8d0 <memp_num>:
  40e8d0:	0001 0002 0001 0008 0002 0003 0002 0004     ................

0040e8e0 <memp_sizes>:
  40e8e0:	0020 0098 001c 0010 0020 0010 0010 0610      ....... .......

0040e8f0 <tcp_backoff>:
  40e8f0:	0201 0403 0605 0707 0707 0707 0007 0000     ................

0040e900 <tcp_pcb_lists>:
  40e900:	496c 2040 4974 2040 4964 2040 4978 2040     lI@ tI@ dI@ xI@ 

0040e910 <tcp_persist_backoff>:
  40e910:	0603 180c 6030 0078                         ....0`x.

0040e918 <ethbroadcast>:
  40e918:	ffff ffff ffff 0000                         ........

0040e920 <ethzero>:
	...
  40e928:	2d2d 2d2d 776c 5049 6920 696e 6974 6c61     ----lwIP initial
  40e938:	7a69 6465 000d 0000 7453 7461 6369 4920     ized....Static I
  40e948:	2050 6441 7264 7365 2073 7341 6973 6e67     P Address Assign
  40e958:	6465 000d 2d2d 2d2d 7445 6568 6e72 7465     ed..----Ethernet
  40e968:	6920 746e 7265 6166 6563 6320 6e6f 6966      interface confi
  40e978:	7567 6572 0d64 0000 654e 7774 726f 206b     gured...Network 
  40e988:	7075 2520 0d73 000a 654e 7774 726f 206b     up %s...Network 
  40e998:	6f64 6e77 000d 0000 3e3e 5345 415f 4343     down....>>ES_ACC
  40e9a8:	5045 4554 0d44 0000 2121 2021 4354 2050     EPTED...!!! TCP 
  40e9b8:	4942 444e 4520 5252 524f 2120 2121 000d     BIND ERROR !!!..
  40e9c8:	2121 2021 4354 2050 454e 2057 5245 4f52     !!! TCP NEW ERRO
  40e9d8:	2052 2121 0d21 0000 3e3e 5345 435f 4f4c     R !!!...>>ES_CLO
  40e9e8:	4953 474e 000d 0000 3e3e 5345 525f 4345     SING....>>ES_REC
  40e9f8:	4945 4556 0d44 0000 3e3e 453e 4843 204f     EIVED...>>>ECHO 
  40ea08:	4553 444e 0000 0000 2121 2021 4345 4f48     SEND....!!! ECHO
  40ea18:	5320 4e45 2044 5245 4f52 2052 2121 0d21      SEND ERROR !!!.
  40ea28:	0000 0000 2d2d 202d 6f43 736e 6c6f 2065     ....--- Console 
  40ea38:	6f63 666e 6769 7275 6465 000d 2d2d 202d     configured..--- 
  40ea48:	4552 4441 4d5f 444f 3a45 2520 0075 0000     READ_MODE: %u...
  40ea58:	2d2d 202d 7445 6568 6e72 7465 6920 696e     --- Ethernet ini
  40ea68:	6974 6c61 7a69 6465 000d 0000 2d2d 202d     tialized....--- 
  40ea78:	5448 5054 6920 696e 6974 6c61 7a69 6465     HTTP initialized
  40ea88:	000d 0000 2d2d 202d 6f43 6e75 6574 2072     ....--- Counter 
  40ea98:	6164 6174 7020 6e69 2073 6f63 666e 6769     data pins config
  40eaa8:	7275 6465 000d 0000 2d2d 202d 6f43 6e75     ured....--- Coun
  40eab8:	6574 2072 6573 656c 7463 7020 6e69 2073     ter select pins 
  40eac8:	6f63 666e 6769 7275 6465 000d 2d2d 202d     configured..--- 
  40ead8:	6f43 6e75 6574 2072 6572 6967 7473 7265     Counter register
  40eae8:	6320 6f6c 6b63 7020 6e69 2073 6f63 666e      clock pins conf
  40eaf8:	6769 7275 6465 000d 2d2d 202d 6f43 6e75     igured..--- Coun
  40eb08:	6574 2072 6c63 6165 2072 6970 736e 6320     ter clear pins c
  40eb18:	6e6f 6966 7567 6572 0d64 0000 2d2d 202d     onfigured...--- 
  40eb28:	6553 2074 6973 6e67 6c61 7220 6165 7964     Set signal ready
  40eb38:	7020 6e69 6420 7269 6365 6974 6e6f 000d      pin direction..
  40eb48:	2d2d 202d 6553 2074 6973 6e67 6c61 7220     --- Set signal r
  40eb58:	6165 7964 7020 6e69 6d20 646f 0d65 0000     eady pin mode...
  40eb68:	2d2d 202d 6553 2074 6973 6e67 6c61 7220     --- Set signal r
  40eb78:	6165 7964 7020 6e69 7320 6e65 6573 000d     eady pin sense..
  40eb88:	2d2d 202d 6553 2074 6973 6e67 6c61 7220     --- Set signal r
  40eb98:	6165 7964 6820 6e61 6c64 7265 000d 0000     eady handler....
  40eba8:	2d2d 202d 6e45 6261 656c 2064 5249 0d51     --- Enabled IRQ.
  40ebb8:	0000 0000 2d2d 202d 6553 2074 6168 646e     ....--- Set hand
  40ebc8:	656c 2072 7270 6f69 6972 7974 000d 0000     ler priority....
  40ebd8:	2d2d 202d 6e45 6261 656c 2064 6e69 6574     --- Enabled inte
  40ebe8:	7272 7075 0d74 0000 2d2d 202d 7453 7261     rrupt...--- Star
  40ebf8:	6974 676e 4d20 6961 206e 6f4c 706f 2d20     ting Main Loop -
  40ec08:	2d2d 0a0d 000d 0000 6552 6563 7669 2065     --......Receive 
  40ec18:	7542 6666 7265 203a 7325 0000 0a0d 000d     Buffer: %s......
  40ec28:	6967 6d6d 0065 0000 2d2d 432d 6d6f 616d     gimme...---Comma
  40ec38:	646e 6120 6b63 6f6e 6c77 6465 6567 2d64     nd acknowledged-
  40ec48:	2d2d 000d 6f77 6472 3030 3130 6f68 7372     --..word0001hors
  40ec58:	3065 3230 6863 6565 6174 3368 696b 7474     e002cheetah3kitt
  40ec68:	6e65 3430 7568 616d 306e 3530 6863 6369     en04human005chic
  40ec78:	656b 366e 6c6c 6d61 3061 3730 6564 6b73     ken6llama007desk
  40ec88:	3030 3830 0000 0000 4921 766e 6c61 6469     0008....!Invalid
  40ec98:	6f43 6e75 0d74 0000 255b 5d63 4320 756f     Count...[%c] Cou
  40eca8:	746e 203a 7525 0a0d 0000 0000 255b 5d63     nt: %u......[%c]
  40ecb8:	7220 7761 6420 6c65 6174 742d 203a 7525      raw delta-t: %u
  40ecc8:	736e 0a0d 0000 0000 7525 0000               ns......%u..

0040ecd4 <_global_impure_ptr>:
  40ecd4:	0068 2040 000a 0000 4e49 0046 6e69 0066     h.@ ....INF.inf.
  40ece4:	414e 004e 616e 006e 3130 3332 3534 3736     NAN.nan.01234567
  40ecf4:	3938 4241 4443 4645 0000 0000 3130 3332     89ABCDEF....0123
  40ed04:	3534 3736 3938 6261 6463 6665 0000 0000     456789abcdef....
  40ed14:	6e28 6c75 296c 0000 0030 0000               (null)..0...

0040ed20 <blanks.7223>:
  40ed20:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040ed30 <zeroes.7224>:
  40ed30:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0040ed40 <blanks.7238>:
  40ed40:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040ed50 <zeroes.7239>:
  40ed50:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  40ed60:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.

0040ed70 <__mprec_bigtens>:
  40ed70:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  40ed80:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  40ed90:	bf3c 7f73 4fdd 7515                         <.s..O.u

0040ed98 <__mprec_tens>:
  40ed98:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  40eda8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  40edb8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  40edc8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  40edd8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  40ede8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  40edf8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  40ee08:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  40ee18:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  40ee28:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  40ee38:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  40ee48:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  40ee58:	9db4 79d9 7843 44ea                         ...yCx.D

0040ee60 <p05.6055>:
  40ee60:	0005 0000 0019 0000 007d 0000 0043 0000     ........}...C...
  40ee70:	4f50 4953 0058 0000 002e 0000               POSIX.......

0040ee7c <_ctype_>:
  40ee7c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  40ee8c:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40ee9c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  40eeac:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  40eebc:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  40eecc:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  40eedc:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  40eeec:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  40eefc:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0040ef80 <_init>:
  40ef80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40ef82:	bf00      	nop
  40ef84:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40ef86:	bc08      	pop	{r3}
  40ef88:	469e      	mov	lr, r3
  40ef8a:	4770      	bx	lr

0040ef8c <__init_array_start>:
  40ef8c:	0040b289 	.word	0x0040b289

0040ef90 <__frame_dummy_init_array_entry>:
  40ef90:	0040018d                                ..@.

0040ef94 <_fini>:
  40ef94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40ef96:	bf00      	nop
  40ef98:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40ef9a:	bc08      	pop	{r3}
  40ef9c:	469e      	mov	lr, r3
  40ef9e:	4770      	bx	lr

0040efa0 <__fini_array_start>:
  40efa0:	00400169 	.word	0x00400169
