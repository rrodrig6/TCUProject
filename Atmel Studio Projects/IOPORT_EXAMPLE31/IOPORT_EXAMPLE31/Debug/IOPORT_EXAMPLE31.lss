
IOPORT_EXAMPLE31.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004030  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404030  00404030  00014030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20400000  00404038  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000000fc  204009b8  004049f0  000209b8  2**2
                  ALLOC
  4 .stack        00002004  20400ab4  00404aec  000209b8  2**0
                  ALLOC
  5 .heap         00000200  20402ab8  00406af0  000209b8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  8 .debug_info   000131c3  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000027db  00000000  00000000  00033c02  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004085  00000000  00000000  000363dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000988  00000000  00000000  0003a462  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a10  00000000  00000000  0003adea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001e733  00000000  00000000  0003b7fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000a22b  00000000  00000000  00059f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00091972  00000000  00000000  00064158  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000211c  00000000  00000000  000f5acc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	b8 2a 40 20 a9 07 40 00 a5 07 40 00 a5 07 40 00     .*@ ..@...@...@.
  400010:	a5 07 40 00 a5 07 40 00 a5 07 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	a5 07 40 00 a5 07 40 00 00 00 00 00 a5 07 40 00     ..@...@.......@.
  40003c:	a5 07 40 00 a5 07 40 00 a5 07 40 00 a5 07 40 00     ..@...@...@...@.
  40004c:	a5 07 40 00 a5 07 40 00 a5 07 40 00 a5 07 40 00     ..@...@...@...@.
  40005c:	a5 07 40 00 a5 07 40 00 00 00 00 00 01 06 40 00     ..@...@.......@.
  40006c:	15 06 40 00 29 06 40 00 a5 07 40 00 a5 07 40 00     ..@.).@...@...@.
  40007c:	a5 07 40 00 3d 06 40 00 51 06 40 00 a5 07 40 00     ..@.=.@.Q.@...@.
  40008c:	a5 07 40 00 a5 07 40 00 a5 07 40 00 a5 07 40 00     ..@...@...@...@.
  40009c:	a5 07 40 00 a5 07 40 00 a5 07 40 00 a5 07 40 00     ..@...@...@...@.
  4000ac:	a5 07 40 00 a5 07 40 00 a5 07 40 00 a5 07 40 00     ..@...@...@...@.
  4000bc:	a5 07 40 00 a5 07 40 00 a5 07 40 00 a5 07 40 00     ..@...@...@...@.
  4000cc:	a5 07 40 00 a5 07 40 00 a5 07 40 00 a5 07 40 00     ..@...@...@...@.
  4000dc:	a5 07 40 00 a5 07 40 00 a5 07 40 00 a5 07 40 00     ..@...@...@...@.
  4000ec:	a5 07 40 00 a5 07 40 00 a5 07 40 00 a5 07 40 00     ..@...@...@...@.
  4000fc:	a5 07 40 00 a5 07 40 00 a5 07 40 00 a5 07 40 00     ..@...@...@...@.
  40010c:	a5 07 40 00 a5 07 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 a5 07 40 00 a5 07 40 00 a5 07 40 00     ......@...@...@.
  40012c:	a5 07 40 00 a5 07 40 00 a5 07 40 00 a5 07 40 00     ..@...@...@...@.
  40013c:	a5 07 40 00 a5 07 40 00 a5 07 40 00 a5 07 40 00     ..@...@...@...@.
  40014c:	a5 07 40 00 a5 07 40 00 a5 07 40 00 a5 07 40 00     ..@...@...@...@.
  40015c:	a5 07 40 00 a5 07 40 00 a5 07 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009b8 	.word	0x204009b8
  400184:	00000000 	.word	0x00000000
  400188:	00404038 	.word	0x00404038

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00404038 	.word	0x00404038
  4001c8:	204009bc 	.word	0x204009bc
  4001cc:	00404038 	.word	0x00404038
  4001d0:	00000000 	.word	0x00000000

004001d4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4001d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4001d8:	b980      	cbnz	r0, 4001fc <_read+0x28>
  4001da:	460c      	mov	r4, r1
  4001dc:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4001de:	2a00      	cmp	r2, #0
  4001e0:	dd0f      	ble.n	400202 <_read+0x2e>
  4001e2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4001e4:	4e08      	ldr	r6, [pc, #32]	; (400208 <_read+0x34>)
  4001e6:	4d09      	ldr	r5, [pc, #36]	; (40020c <_read+0x38>)
  4001e8:	6830      	ldr	r0, [r6, #0]
  4001ea:	4621      	mov	r1, r4
  4001ec:	682b      	ldr	r3, [r5, #0]
  4001ee:	4798      	blx	r3
		ptr++;
  4001f0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4001f2:	42bc      	cmp	r4, r7
  4001f4:	d1f8      	bne.n	4001e8 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4001f6:	4640      	mov	r0, r8
  4001f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4001fc:	f04f 38ff 	mov.w	r8, #4294967295
  400200:	e7f9      	b.n	4001f6 <_read+0x22>
	for (; len > 0; --len) {
  400202:	4680      	mov	r8, r0
  400204:	e7f7      	b.n	4001f6 <_read+0x22>
  400206:	bf00      	nop
  400208:	20400a88 	.word	0x20400a88
  40020c:	20400a80 	.word	0x20400a80

00400210 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400210:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400212:	010b      	lsls	r3, r1, #4
  400214:	4293      	cmp	r3, r2
  400216:	d914      	bls.n	400242 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400218:	00c9      	lsls	r1, r1, #3
  40021a:	084b      	lsrs	r3, r1, #1
  40021c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400220:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400224:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400226:	1e5c      	subs	r4, r3, #1
  400228:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40022c:	428c      	cmp	r4, r1
  40022e:	d901      	bls.n	400234 <usart_set_async_baudrate+0x24>
		return 1;
  400230:	2001      	movs	r0, #1
  400232:	e017      	b.n	400264 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400234:	6841      	ldr	r1, [r0, #4]
  400236:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  40023a:	6041      	str	r1, [r0, #4]
  40023c:	e00c      	b.n	400258 <usart_set_async_baudrate+0x48>
		return 1;
  40023e:	2001      	movs	r0, #1
  400240:	e010      	b.n	400264 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400242:	0859      	lsrs	r1, r3, #1
  400244:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400248:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  40024c:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40024e:	1e5c      	subs	r4, r3, #1
  400250:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400254:	428c      	cmp	r4, r1
  400256:	d8f2      	bhi.n	40023e <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400258:	0412      	lsls	r2, r2, #16
  40025a:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  40025e:	431a      	orrs	r2, r3
  400260:	6202      	str	r2, [r0, #32]

	return 0;
  400262:	2000      	movs	r0, #0
}
  400264:	f85d 4b04 	ldr.w	r4, [sp], #4
  400268:	4770      	bx	lr
	...

0040026c <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40026c:	4b08      	ldr	r3, [pc, #32]	; (400290 <usart_reset+0x24>)
  40026e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400272:	2300      	movs	r3, #0
  400274:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400276:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400278:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40027a:	2388      	movs	r3, #136	; 0x88
  40027c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40027e:	2324      	movs	r3, #36	; 0x24
  400280:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400282:	f44f 7380 	mov.w	r3, #256	; 0x100
  400286:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400288:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  40028c:	6003      	str	r3, [r0, #0]
  40028e:	4770      	bx	lr
  400290:	55534100 	.word	0x55534100

00400294 <usart_init_rs232>:
{
  400294:	b570      	push	{r4, r5, r6, lr}
  400296:	4605      	mov	r5, r0
  400298:	460c      	mov	r4, r1
  40029a:	4616      	mov	r6, r2
	usart_reset(p_usart);
  40029c:	4b0f      	ldr	r3, [pc, #60]	; (4002dc <usart_init_rs232+0x48>)
  40029e:	4798      	blx	r3
	ul_reg_val = 0;
  4002a0:	2200      	movs	r2, #0
  4002a2:	4b0f      	ldr	r3, [pc, #60]	; (4002e0 <usart_init_rs232+0x4c>)
  4002a4:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4002a6:	b1a4      	cbz	r4, 4002d2 <usart_init_rs232+0x3e>
  4002a8:	4632      	mov	r2, r6
  4002aa:	6821      	ldr	r1, [r4, #0]
  4002ac:	4628      	mov	r0, r5
  4002ae:	4b0d      	ldr	r3, [pc, #52]	; (4002e4 <usart_init_rs232+0x50>)
  4002b0:	4798      	blx	r3
  4002b2:	4602      	mov	r2, r0
  4002b4:	b978      	cbnz	r0, 4002d6 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4002b6:	6863      	ldr	r3, [r4, #4]
  4002b8:	68a1      	ldr	r1, [r4, #8]
  4002ba:	430b      	orrs	r3, r1
  4002bc:	6921      	ldr	r1, [r4, #16]
  4002be:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4002c0:	68e1      	ldr	r1, [r4, #12]
  4002c2:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4002c4:	4906      	ldr	r1, [pc, #24]	; (4002e0 <usart_init_rs232+0x4c>)
  4002c6:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  4002c8:	6869      	ldr	r1, [r5, #4]
  4002ca:	430b      	orrs	r3, r1
  4002cc:	606b      	str	r3, [r5, #4]
}
  4002ce:	4610      	mov	r0, r2
  4002d0:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  4002d2:	2201      	movs	r2, #1
  4002d4:	e7fb      	b.n	4002ce <usart_init_rs232+0x3a>
  4002d6:	2201      	movs	r2, #1
  4002d8:	e7f9      	b.n	4002ce <usart_init_rs232+0x3a>
  4002da:	bf00      	nop
  4002dc:	0040026d 	.word	0x0040026d
  4002e0:	204009d4 	.word	0x204009d4
  4002e4:	00400211 	.word	0x00400211

004002e8 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  4002e8:	2340      	movs	r3, #64	; 0x40
  4002ea:	6003      	str	r3, [r0, #0]
  4002ec:	4770      	bx	lr

004002ee <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  4002ee:	2310      	movs	r3, #16
  4002f0:	6003      	str	r3, [r0, #0]
  4002f2:	4770      	bx	lr

004002f4 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4002f4:	6943      	ldr	r3, [r0, #20]
  4002f6:	f013 0f02 	tst.w	r3, #2
  4002fa:	d004      	beq.n	400306 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  4002fc:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400300:	61c1      	str	r1, [r0, #28]
	return 0;
  400302:	2000      	movs	r0, #0
  400304:	4770      	bx	lr
		return 1;
  400306:	2001      	movs	r0, #1
}
  400308:	4770      	bx	lr

0040030a <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40030a:	6943      	ldr	r3, [r0, #20]
  40030c:	f013 0f01 	tst.w	r3, #1
  400310:	d005      	beq.n	40031e <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400312:	6983      	ldr	r3, [r0, #24]
  400314:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400318:	600b      	str	r3, [r1, #0]
	return 0;
  40031a:	2000      	movs	r0, #0
  40031c:	4770      	bx	lr
		return 1;
  40031e:	2001      	movs	r0, #1
}
  400320:	4770      	bx	lr
	...

00400324 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400324:	3801      	subs	r0, #1
  400326:	2802      	cmp	r0, #2
  400328:	d815      	bhi.n	400356 <_write+0x32>
{
  40032a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40032e:	460e      	mov	r6, r1
  400330:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400332:	b19a      	cbz	r2, 40035c <_write+0x38>
  400334:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400336:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400370 <_write+0x4c>
  40033a:	4f0c      	ldr	r7, [pc, #48]	; (40036c <_write+0x48>)
  40033c:	f8d8 0000 	ldr.w	r0, [r8]
  400340:	f815 1b01 	ldrb.w	r1, [r5], #1
  400344:	683b      	ldr	r3, [r7, #0]
  400346:	4798      	blx	r3
  400348:	2800      	cmp	r0, #0
  40034a:	db0a      	blt.n	400362 <_write+0x3e>
  40034c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  40034e:	3c01      	subs	r4, #1
  400350:	d1f4      	bne.n	40033c <_write+0x18>
  400352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400356:	f04f 30ff 	mov.w	r0, #4294967295
  40035a:	4770      	bx	lr
	for (; len != 0; --len) {
  40035c:	4610      	mov	r0, r2
  40035e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400362:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40036a:	bf00      	nop
  40036c:	20400a84 	.word	0x20400a84
  400370:	20400a88 	.word	0x20400a88

00400374 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400374:	6943      	ldr	r3, [r0, #20]
  400376:	f013 0f02 	tst.w	r3, #2
  40037a:	d002      	beq.n	400382 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  40037c:	61c1      	str	r1, [r0, #28]
	return 0;
  40037e:	2000      	movs	r0, #0
  400380:	4770      	bx	lr
		return 1;
  400382:	2001      	movs	r0, #1
}
  400384:	4770      	bx	lr

00400386 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400386:	6943      	ldr	r3, [r0, #20]
  400388:	f013 0f01 	tst.w	r3, #1
  40038c:	d003      	beq.n	400396 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40038e:	6983      	ldr	r3, [r0, #24]
  400390:	700b      	strb	r3, [r1, #0]
	return 0;
  400392:	2000      	movs	r0, #0
  400394:	4770      	bx	lr
		return 1;
  400396:	2001      	movs	r0, #1
}
  400398:	4770      	bx	lr
	...

0040039c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40039c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40039e:	4810      	ldr	r0, [pc, #64]	; (4003e0 <sysclk_init+0x44>)
  4003a0:	4b10      	ldr	r3, [pc, #64]	; (4003e4 <sysclk_init+0x48>)
  4003a2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4003a4:	213e      	movs	r1, #62	; 0x3e
  4003a6:	2000      	movs	r0, #0
  4003a8:	4b0f      	ldr	r3, [pc, #60]	; (4003e8 <sysclk_init+0x4c>)
  4003aa:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4003ac:	4c0f      	ldr	r4, [pc, #60]	; (4003ec <sysclk_init+0x50>)
  4003ae:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4003b0:	2800      	cmp	r0, #0
  4003b2:	d0fc      	beq.n	4003ae <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4003b4:	4b0e      	ldr	r3, [pc, #56]	; (4003f0 <sysclk_init+0x54>)
  4003b6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003b8:	4a0e      	ldr	r2, [pc, #56]	; (4003f4 <sysclk_init+0x58>)
  4003ba:	4b0f      	ldr	r3, [pc, #60]	; (4003f8 <sysclk_init+0x5c>)
  4003bc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4003be:	4c0f      	ldr	r4, [pc, #60]	; (4003fc <sysclk_init+0x60>)
  4003c0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4003c2:	2800      	cmp	r0, #0
  4003c4:	d0fc      	beq.n	4003c0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4003c6:	2002      	movs	r0, #2
  4003c8:	4b0d      	ldr	r3, [pc, #52]	; (400400 <sysclk_init+0x64>)
  4003ca:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4003cc:	2010      	movs	r0, #16
  4003ce:	4b0d      	ldr	r3, [pc, #52]	; (400404 <sysclk_init+0x68>)
  4003d0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4003d2:	4b0d      	ldr	r3, [pc, #52]	; (400408 <sysclk_init+0x6c>)
  4003d4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4003d6:	480d      	ldr	r0, [pc, #52]	; (40040c <sysclk_init+0x70>)
  4003d8:	4b02      	ldr	r3, [pc, #8]	; (4003e4 <sysclk_init+0x48>)
  4003da:	4798      	blx	r3
  4003dc:	bd10      	pop	{r4, pc}
  4003de:	bf00      	nop
  4003e0:	07270e00 	.word	0x07270e00
  4003e4:	0040097d 	.word	0x0040097d
  4003e8:	00400701 	.word	0x00400701
  4003ec:	00400755 	.word	0x00400755
  4003f0:	00400765 	.word	0x00400765
  4003f4:	20183f01 	.word	0x20183f01
  4003f8:	400e0600 	.word	0x400e0600
  4003fc:	00400775 	.word	0x00400775
  400400:	00400665 	.word	0x00400665
  400404:	0040069d 	.word	0x0040069d
  400408:	00400871 	.word	0x00400871
  40040c:	08f0d180 	.word	0x08f0d180

00400410 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400412:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400416:	4b5c      	ldr	r3, [pc, #368]	; (400588 <board_init+0x178>)
  400418:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40041a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40041e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400422:	4b5a      	ldr	r3, [pc, #360]	; (40058c <board_init+0x17c>)
  400424:	2200      	movs	r2, #0
  400426:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  40042a:	695a      	ldr	r2, [r3, #20]
  40042c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400430:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400432:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400436:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  40043a:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40043e:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400442:	f007 0007 	and.w	r0, r7, #7
  400446:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400448:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40044c:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400450:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400454:	f3bf 8f4f 	dsb	sy
  400458:	f04f 34ff 	mov.w	r4, #4294967295
  40045c:	fa04 fc00 	lsl.w	ip, r4, r0
  400460:	fa06 f000 	lsl.w	r0, r6, r0
  400464:	fa04 f40e 	lsl.w	r4, r4, lr
  400468:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  40046c:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  40046e:	463a      	mov	r2, r7
  400470:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400472:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400476:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  40047a:	3a01      	subs	r2, #1
  40047c:	4423      	add	r3, r4
  40047e:	f1b2 3fff 	cmp.w	r2, #4294967295
  400482:	d1f6      	bne.n	400472 <board_init+0x62>
        } while(sets--);
  400484:	3e01      	subs	r6, #1
  400486:	4460      	add	r0, ip
  400488:	f1b6 3fff 	cmp.w	r6, #4294967295
  40048c:	d1ef      	bne.n	40046e <board_init+0x5e>
  40048e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400492:	4b3e      	ldr	r3, [pc, #248]	; (40058c <board_init+0x17c>)
  400494:	695a      	ldr	r2, [r3, #20]
  400496:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  40049a:	615a      	str	r2, [r3, #20]
  40049c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4004a0:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4004a4:	4a3a      	ldr	r2, [pc, #232]	; (400590 <board_init+0x180>)
  4004a6:	493b      	ldr	r1, [pc, #236]	; (400594 <board_init+0x184>)
  4004a8:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4004aa:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  4004ae:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  4004b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4004b4:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4004b8:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  4004bc:	f022 0201 	bic.w	r2, r2, #1
  4004c0:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4004c4:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  4004c8:	f022 0201 	bic.w	r2, r2, #1
  4004cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  4004d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4004d4:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4004d8:	200a      	movs	r0, #10
  4004da:	4c2f      	ldr	r4, [pc, #188]	; (400598 <board_init+0x188>)
  4004dc:	47a0      	blx	r4
  4004de:	200b      	movs	r0, #11
  4004e0:	47a0      	blx	r4
  4004e2:	200c      	movs	r0, #12
  4004e4:	47a0      	blx	r4
  4004e6:	2010      	movs	r0, #16
  4004e8:	47a0      	blx	r4
  4004ea:	2011      	movs	r0, #17
  4004ec:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4004ee:	4b2b      	ldr	r3, [pc, #172]	; (40059c <board_init+0x18c>)
  4004f0:	f44f 7280 	mov.w	r2, #256	; 0x100
  4004f4:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4004f6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4004fa:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4004fc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400500:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400504:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400506:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40050a:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40050c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400510:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400512:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400514:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400518:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40051a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40051e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400520:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400522:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400526:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400528:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40052c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400530:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400534:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400538:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40053a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40053e:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400540:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400542:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400546:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400548:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  40054c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40054e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400550:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400554:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400556:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400558:	4a11      	ldr	r2, [pc, #68]	; (4005a0 <board_init+0x190>)
  40055a:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  40055e:	f043 0310 	orr.w	r3, r3, #16
  400562:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400566:	4b0f      	ldr	r3, [pc, #60]	; (4005a4 <board_init+0x194>)
  400568:	2210      	movs	r2, #16
  40056a:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40056c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400570:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400572:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400578:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40057a:	4311      	orrs	r1, r2
  40057c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  40057e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400580:	4311      	orrs	r1, r2
  400582:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400584:	605a      	str	r2, [r3, #4]
  400586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400588:	400e1850 	.word	0x400e1850
  40058c:	e000ed00 	.word	0xe000ed00
  400590:	400e0c00 	.word	0x400e0c00
  400594:	5a00080c 	.word	0x5a00080c
  400598:	00400785 	.word	0x00400785
  40059c:	400e1200 	.word	0x400e1200
  4005a0:	40088000 	.word	0x40088000
  4005a4:	400e1000 	.word	0x400e1000

004005a8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4005a8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4005aa:	4770      	bx	lr

004005ac <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4005ac:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4005ae:	4770      	bx	lr

004005b0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4005b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4005b4:	4604      	mov	r4, r0
  4005b6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4005b8:	4b0e      	ldr	r3, [pc, #56]	; (4005f4 <pio_handler_process+0x44>)
  4005ba:	4798      	blx	r3
  4005bc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4005be:	4620      	mov	r0, r4
  4005c0:	4b0d      	ldr	r3, [pc, #52]	; (4005f8 <pio_handler_process+0x48>)
  4005c2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4005c4:	4005      	ands	r5, r0
  4005c6:	d013      	beq.n	4005f0 <pio_handler_process+0x40>
  4005c8:	4c0c      	ldr	r4, [pc, #48]	; (4005fc <pio_handler_process+0x4c>)
  4005ca:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4005ce:	e003      	b.n	4005d8 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4005d0:	42b4      	cmp	r4, r6
  4005d2:	d00d      	beq.n	4005f0 <pio_handler_process+0x40>
  4005d4:	3410      	adds	r4, #16
		while (status != 0) {
  4005d6:	b15d      	cbz	r5, 4005f0 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4005d8:	6820      	ldr	r0, [r4, #0]
  4005da:	4540      	cmp	r0, r8
  4005dc:	d1f8      	bne.n	4005d0 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4005de:	6861      	ldr	r1, [r4, #4]
  4005e0:	4229      	tst	r1, r5
  4005e2:	d0f5      	beq.n	4005d0 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4005e4:	68e3      	ldr	r3, [r4, #12]
  4005e6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4005e8:	6863      	ldr	r3, [r4, #4]
  4005ea:	ea25 0503 	bic.w	r5, r5, r3
  4005ee:	e7ef      	b.n	4005d0 <pio_handler_process+0x20>
  4005f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4005f4:	004005a9 	.word	0x004005a9
  4005f8:	004005ad 	.word	0x004005ad
  4005fc:	204009d8 	.word	0x204009d8

00400600 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400600:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400602:	210a      	movs	r1, #10
  400604:	4801      	ldr	r0, [pc, #4]	; (40060c <PIOA_Handler+0xc>)
  400606:	4b02      	ldr	r3, [pc, #8]	; (400610 <PIOA_Handler+0x10>)
  400608:	4798      	blx	r3
  40060a:	bd08      	pop	{r3, pc}
  40060c:	400e0e00 	.word	0x400e0e00
  400610:	004005b1 	.word	0x004005b1

00400614 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400614:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400616:	210b      	movs	r1, #11
  400618:	4801      	ldr	r0, [pc, #4]	; (400620 <PIOB_Handler+0xc>)
  40061a:	4b02      	ldr	r3, [pc, #8]	; (400624 <PIOB_Handler+0x10>)
  40061c:	4798      	blx	r3
  40061e:	bd08      	pop	{r3, pc}
  400620:	400e1000 	.word	0x400e1000
  400624:	004005b1 	.word	0x004005b1

00400628 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400628:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40062a:	210c      	movs	r1, #12
  40062c:	4801      	ldr	r0, [pc, #4]	; (400634 <PIOC_Handler+0xc>)
  40062e:	4b02      	ldr	r3, [pc, #8]	; (400638 <PIOC_Handler+0x10>)
  400630:	4798      	blx	r3
  400632:	bd08      	pop	{r3, pc}
  400634:	400e1200 	.word	0x400e1200
  400638:	004005b1 	.word	0x004005b1

0040063c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  40063c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40063e:	2110      	movs	r1, #16
  400640:	4801      	ldr	r0, [pc, #4]	; (400648 <PIOD_Handler+0xc>)
  400642:	4b02      	ldr	r3, [pc, #8]	; (40064c <PIOD_Handler+0x10>)
  400644:	4798      	blx	r3
  400646:	bd08      	pop	{r3, pc}
  400648:	400e1400 	.word	0x400e1400
  40064c:	004005b1 	.word	0x004005b1

00400650 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400650:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400652:	2111      	movs	r1, #17
  400654:	4801      	ldr	r0, [pc, #4]	; (40065c <PIOE_Handler+0xc>)
  400656:	4b02      	ldr	r3, [pc, #8]	; (400660 <PIOE_Handler+0x10>)
  400658:	4798      	blx	r3
  40065a:	bd08      	pop	{r3, pc}
  40065c:	400e1600 	.word	0x400e1600
  400660:	004005b1 	.word	0x004005b1

00400664 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400664:	2803      	cmp	r0, #3
  400666:	d011      	beq.n	40068c <pmc_mck_set_division+0x28>
  400668:	2804      	cmp	r0, #4
  40066a:	d012      	beq.n	400692 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40066c:	2802      	cmp	r0, #2
  40066e:	bf0c      	ite	eq
  400670:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400674:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400676:	4a08      	ldr	r2, [pc, #32]	; (400698 <pmc_mck_set_division+0x34>)
  400678:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40067a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40067e:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400680:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400682:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400684:	f013 0f08 	tst.w	r3, #8
  400688:	d0fb      	beq.n	400682 <pmc_mck_set_division+0x1e>
}
  40068a:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40068c:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400690:	e7f1      	b.n	400676 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400692:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400696:	e7ee      	b.n	400676 <pmc_mck_set_division+0x12>
  400698:	400e0600 	.word	0x400e0600

0040069c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40069c:	4a17      	ldr	r2, [pc, #92]	; (4006fc <pmc_switch_mck_to_pllack+0x60>)
  40069e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4006a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4006a4:	4318      	orrs	r0, r3
  4006a6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4006a8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4006aa:	f013 0f08 	tst.w	r3, #8
  4006ae:	d10a      	bne.n	4006c6 <pmc_switch_mck_to_pllack+0x2a>
  4006b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4006b4:	4911      	ldr	r1, [pc, #68]	; (4006fc <pmc_switch_mck_to_pllack+0x60>)
  4006b6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4006b8:	f012 0f08 	tst.w	r2, #8
  4006bc:	d103      	bne.n	4006c6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4006be:	3b01      	subs	r3, #1
  4006c0:	d1f9      	bne.n	4006b6 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4006c2:	2001      	movs	r0, #1
  4006c4:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4006c6:	4a0d      	ldr	r2, [pc, #52]	; (4006fc <pmc_switch_mck_to_pllack+0x60>)
  4006c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4006ca:	f023 0303 	bic.w	r3, r3, #3
  4006ce:	f043 0302 	orr.w	r3, r3, #2
  4006d2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4006d4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4006d6:	f013 0f08 	tst.w	r3, #8
  4006da:	d10a      	bne.n	4006f2 <pmc_switch_mck_to_pllack+0x56>
  4006dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4006e0:	4906      	ldr	r1, [pc, #24]	; (4006fc <pmc_switch_mck_to_pllack+0x60>)
  4006e2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4006e4:	f012 0f08 	tst.w	r2, #8
  4006e8:	d105      	bne.n	4006f6 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4006ea:	3b01      	subs	r3, #1
  4006ec:	d1f9      	bne.n	4006e2 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4006ee:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4006f0:	4770      	bx	lr
	return 0;
  4006f2:	2000      	movs	r0, #0
  4006f4:	4770      	bx	lr
  4006f6:	2000      	movs	r0, #0
  4006f8:	4770      	bx	lr
  4006fa:	bf00      	nop
  4006fc:	400e0600 	.word	0x400e0600

00400700 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400700:	b9a0      	cbnz	r0, 40072c <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400702:	480e      	ldr	r0, [pc, #56]	; (40073c <pmc_switch_mainck_to_xtal+0x3c>)
  400704:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400706:	0209      	lsls	r1, r1, #8
  400708:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40070a:	4a0d      	ldr	r2, [pc, #52]	; (400740 <pmc_switch_mainck_to_xtal+0x40>)
  40070c:	401a      	ands	r2, r3
  40070e:	4b0d      	ldr	r3, [pc, #52]	; (400744 <pmc_switch_mainck_to_xtal+0x44>)
  400710:	4313      	orrs	r3, r2
  400712:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400714:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400716:	4602      	mov	r2, r0
  400718:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40071a:	f013 0f01 	tst.w	r3, #1
  40071e:	d0fb      	beq.n	400718 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400720:	4a06      	ldr	r2, [pc, #24]	; (40073c <pmc_switch_mainck_to_xtal+0x3c>)
  400722:	6a11      	ldr	r1, [r2, #32]
  400724:	4b08      	ldr	r3, [pc, #32]	; (400748 <pmc_switch_mainck_to_xtal+0x48>)
  400726:	430b      	orrs	r3, r1
  400728:	6213      	str	r3, [r2, #32]
  40072a:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40072c:	4903      	ldr	r1, [pc, #12]	; (40073c <pmc_switch_mainck_to_xtal+0x3c>)
  40072e:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400730:	4a06      	ldr	r2, [pc, #24]	; (40074c <pmc_switch_mainck_to_xtal+0x4c>)
  400732:	401a      	ands	r2, r3
  400734:	4b06      	ldr	r3, [pc, #24]	; (400750 <pmc_switch_mainck_to_xtal+0x50>)
  400736:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400738:	620b      	str	r3, [r1, #32]
  40073a:	4770      	bx	lr
  40073c:	400e0600 	.word	0x400e0600
  400740:	ffc8fffc 	.word	0xffc8fffc
  400744:	00370001 	.word	0x00370001
  400748:	01370000 	.word	0x01370000
  40074c:	fec8fffc 	.word	0xfec8fffc
  400750:	01370002 	.word	0x01370002

00400754 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400754:	4b02      	ldr	r3, [pc, #8]	; (400760 <pmc_osc_is_ready_mainck+0xc>)
  400756:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400758:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40075c:	4770      	bx	lr
  40075e:	bf00      	nop
  400760:	400e0600 	.word	0x400e0600

00400764 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400764:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400768:	4b01      	ldr	r3, [pc, #4]	; (400770 <pmc_disable_pllack+0xc>)
  40076a:	629a      	str	r2, [r3, #40]	; 0x28
  40076c:	4770      	bx	lr
  40076e:	bf00      	nop
  400770:	400e0600 	.word	0x400e0600

00400774 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400774:	4b02      	ldr	r3, [pc, #8]	; (400780 <pmc_is_locked_pllack+0xc>)
  400776:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400778:	f000 0002 	and.w	r0, r0, #2
  40077c:	4770      	bx	lr
  40077e:	bf00      	nop
  400780:	400e0600 	.word	0x400e0600

00400784 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  400784:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400788:	4b05      	ldr	r3, [pc, #20]	; (4007a0 <pmc_enable_periph_clk+0x1c>)
  40078a:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  40078e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400792:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  400796:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40079a:	2000      	movs	r0, #0
  40079c:	4770      	bx	lr
  40079e:	bf00      	nop
  4007a0:	400e0600 	.word	0x400e0600

004007a4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4007a4:	e7fe      	b.n	4007a4 <Dummy_Handler>
	...

004007a8 <Reset_Handler>:
{
  4007a8:	b500      	push	{lr}
  4007aa:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4007ac:	4b25      	ldr	r3, [pc, #148]	; (400844 <Reset_Handler+0x9c>)
  4007ae:	4a26      	ldr	r2, [pc, #152]	; (400848 <Reset_Handler+0xa0>)
  4007b0:	429a      	cmp	r2, r3
  4007b2:	d010      	beq.n	4007d6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4007b4:	4b25      	ldr	r3, [pc, #148]	; (40084c <Reset_Handler+0xa4>)
  4007b6:	4a23      	ldr	r2, [pc, #140]	; (400844 <Reset_Handler+0x9c>)
  4007b8:	429a      	cmp	r2, r3
  4007ba:	d20c      	bcs.n	4007d6 <Reset_Handler+0x2e>
  4007bc:	3b01      	subs	r3, #1
  4007be:	1a9b      	subs	r3, r3, r2
  4007c0:	f023 0303 	bic.w	r3, r3, #3
  4007c4:	3304      	adds	r3, #4
  4007c6:	4413      	add	r3, r2
  4007c8:	491f      	ldr	r1, [pc, #124]	; (400848 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4007ca:	f851 0b04 	ldr.w	r0, [r1], #4
  4007ce:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4007d2:	429a      	cmp	r2, r3
  4007d4:	d1f9      	bne.n	4007ca <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4007d6:	4b1e      	ldr	r3, [pc, #120]	; (400850 <Reset_Handler+0xa8>)
  4007d8:	4a1e      	ldr	r2, [pc, #120]	; (400854 <Reset_Handler+0xac>)
  4007da:	429a      	cmp	r2, r3
  4007dc:	d20a      	bcs.n	4007f4 <Reset_Handler+0x4c>
  4007de:	3b01      	subs	r3, #1
  4007e0:	1a9b      	subs	r3, r3, r2
  4007e2:	f023 0303 	bic.w	r3, r3, #3
  4007e6:	3304      	adds	r3, #4
  4007e8:	4413      	add	r3, r2
                *pDest++ = 0;
  4007ea:	2100      	movs	r1, #0
  4007ec:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4007f0:	4293      	cmp	r3, r2
  4007f2:	d1fb      	bne.n	4007ec <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4007f4:	4a18      	ldr	r2, [pc, #96]	; (400858 <Reset_Handler+0xb0>)
  4007f6:	4b19      	ldr	r3, [pc, #100]	; (40085c <Reset_Handler+0xb4>)
  4007f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4007fc:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4007fe:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400802:	fab3 f383 	clz	r3, r3
  400806:	095b      	lsrs	r3, r3, #5
  400808:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40080a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  40080c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400810:	2200      	movs	r2, #0
  400812:	4b13      	ldr	r3, [pc, #76]	; (400860 <Reset_Handler+0xb8>)
  400814:	701a      	strb	r2, [r3, #0]
	return flags;
  400816:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400818:	4a12      	ldr	r2, [pc, #72]	; (400864 <Reset_Handler+0xbc>)
  40081a:	6813      	ldr	r3, [r2, #0]
  40081c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400820:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  400822:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400826:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40082a:	b129      	cbz	r1, 400838 <Reset_Handler+0x90>
		cpu_irq_enable();
  40082c:	2201      	movs	r2, #1
  40082e:	4b0c      	ldr	r3, [pc, #48]	; (400860 <Reset_Handler+0xb8>)
  400830:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  400832:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400836:	b662      	cpsie	i
        __libc_init_array();
  400838:	4b0b      	ldr	r3, [pc, #44]	; (400868 <Reset_Handler+0xc0>)
  40083a:	4798      	blx	r3
        main();
  40083c:	4b0b      	ldr	r3, [pc, #44]	; (40086c <Reset_Handler+0xc4>)
  40083e:	4798      	blx	r3
  400840:	e7fe      	b.n	400840 <Reset_Handler+0x98>
  400842:	bf00      	nop
  400844:	20400000 	.word	0x20400000
  400848:	00404038 	.word	0x00404038
  40084c:	204009b8 	.word	0x204009b8
  400850:	20400ab4 	.word	0x20400ab4
  400854:	204009b8 	.word	0x204009b8
  400858:	e000ed00 	.word	0xe000ed00
  40085c:	00400000 	.word	0x00400000
  400860:	20400000 	.word	0x20400000
  400864:	e000ed88 	.word	0xe000ed88
  400868:	00400e29 	.word	0x00400e29
  40086c:	00400c09 	.word	0x00400c09

00400870 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400870:	4b3b      	ldr	r3, [pc, #236]	; (400960 <SystemCoreClockUpdate+0xf0>)
  400872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400874:	f003 0303 	and.w	r3, r3, #3
  400878:	2b01      	cmp	r3, #1
  40087a:	d01d      	beq.n	4008b8 <SystemCoreClockUpdate+0x48>
  40087c:	b183      	cbz	r3, 4008a0 <SystemCoreClockUpdate+0x30>
  40087e:	2b02      	cmp	r3, #2
  400880:	d036      	beq.n	4008f0 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400882:	4b37      	ldr	r3, [pc, #220]	; (400960 <SystemCoreClockUpdate+0xf0>)
  400884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400886:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40088a:	2b70      	cmp	r3, #112	; 0x70
  40088c:	d05f      	beq.n	40094e <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40088e:	4b34      	ldr	r3, [pc, #208]	; (400960 <SystemCoreClockUpdate+0xf0>)
  400890:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400892:	4934      	ldr	r1, [pc, #208]	; (400964 <SystemCoreClockUpdate+0xf4>)
  400894:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400898:	680b      	ldr	r3, [r1, #0]
  40089a:	40d3      	lsrs	r3, r2
  40089c:	600b      	str	r3, [r1, #0]
  40089e:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4008a0:	4b31      	ldr	r3, [pc, #196]	; (400968 <SystemCoreClockUpdate+0xf8>)
  4008a2:	695b      	ldr	r3, [r3, #20]
  4008a4:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4008a8:	bf14      	ite	ne
  4008aa:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4008ae:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4008b2:	4b2c      	ldr	r3, [pc, #176]	; (400964 <SystemCoreClockUpdate+0xf4>)
  4008b4:	601a      	str	r2, [r3, #0]
  4008b6:	e7e4      	b.n	400882 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4008b8:	4b29      	ldr	r3, [pc, #164]	; (400960 <SystemCoreClockUpdate+0xf0>)
  4008ba:	6a1b      	ldr	r3, [r3, #32]
  4008bc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4008c0:	d003      	beq.n	4008ca <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4008c2:	4a2a      	ldr	r2, [pc, #168]	; (40096c <SystemCoreClockUpdate+0xfc>)
  4008c4:	4b27      	ldr	r3, [pc, #156]	; (400964 <SystemCoreClockUpdate+0xf4>)
  4008c6:	601a      	str	r2, [r3, #0]
  4008c8:	e7db      	b.n	400882 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4008ca:	4a29      	ldr	r2, [pc, #164]	; (400970 <SystemCoreClockUpdate+0x100>)
  4008cc:	4b25      	ldr	r3, [pc, #148]	; (400964 <SystemCoreClockUpdate+0xf4>)
  4008ce:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4008d0:	4b23      	ldr	r3, [pc, #140]	; (400960 <SystemCoreClockUpdate+0xf0>)
  4008d2:	6a1b      	ldr	r3, [r3, #32]
  4008d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4008d8:	2b10      	cmp	r3, #16
  4008da:	d005      	beq.n	4008e8 <SystemCoreClockUpdate+0x78>
  4008dc:	2b20      	cmp	r3, #32
  4008de:	d1d0      	bne.n	400882 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4008e0:	4a22      	ldr	r2, [pc, #136]	; (40096c <SystemCoreClockUpdate+0xfc>)
  4008e2:	4b20      	ldr	r3, [pc, #128]	; (400964 <SystemCoreClockUpdate+0xf4>)
  4008e4:	601a      	str	r2, [r3, #0]
          break;
  4008e6:	e7cc      	b.n	400882 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4008e8:	4a22      	ldr	r2, [pc, #136]	; (400974 <SystemCoreClockUpdate+0x104>)
  4008ea:	4b1e      	ldr	r3, [pc, #120]	; (400964 <SystemCoreClockUpdate+0xf4>)
  4008ec:	601a      	str	r2, [r3, #0]
          break;
  4008ee:	e7c8      	b.n	400882 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4008f0:	4b1b      	ldr	r3, [pc, #108]	; (400960 <SystemCoreClockUpdate+0xf0>)
  4008f2:	6a1b      	ldr	r3, [r3, #32]
  4008f4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4008f8:	d016      	beq.n	400928 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4008fa:	4a1c      	ldr	r2, [pc, #112]	; (40096c <SystemCoreClockUpdate+0xfc>)
  4008fc:	4b19      	ldr	r3, [pc, #100]	; (400964 <SystemCoreClockUpdate+0xf4>)
  4008fe:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400900:	4b17      	ldr	r3, [pc, #92]	; (400960 <SystemCoreClockUpdate+0xf0>)
  400902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400904:	f003 0303 	and.w	r3, r3, #3
  400908:	2b02      	cmp	r3, #2
  40090a:	d1ba      	bne.n	400882 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40090c:	4a14      	ldr	r2, [pc, #80]	; (400960 <SystemCoreClockUpdate+0xf0>)
  40090e:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400910:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400912:	4814      	ldr	r0, [pc, #80]	; (400964 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400914:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400918:	6803      	ldr	r3, [r0, #0]
  40091a:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40091e:	b2d2      	uxtb	r2, r2
  400920:	fbb3 f3f2 	udiv	r3, r3, r2
  400924:	6003      	str	r3, [r0, #0]
  400926:	e7ac      	b.n	400882 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400928:	4a11      	ldr	r2, [pc, #68]	; (400970 <SystemCoreClockUpdate+0x100>)
  40092a:	4b0e      	ldr	r3, [pc, #56]	; (400964 <SystemCoreClockUpdate+0xf4>)
  40092c:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40092e:	4b0c      	ldr	r3, [pc, #48]	; (400960 <SystemCoreClockUpdate+0xf0>)
  400930:	6a1b      	ldr	r3, [r3, #32]
  400932:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400936:	2b10      	cmp	r3, #16
  400938:	d005      	beq.n	400946 <SystemCoreClockUpdate+0xd6>
  40093a:	2b20      	cmp	r3, #32
  40093c:	d1e0      	bne.n	400900 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40093e:	4a0b      	ldr	r2, [pc, #44]	; (40096c <SystemCoreClockUpdate+0xfc>)
  400940:	4b08      	ldr	r3, [pc, #32]	; (400964 <SystemCoreClockUpdate+0xf4>)
  400942:	601a      	str	r2, [r3, #0]
          break;
  400944:	e7dc      	b.n	400900 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  400946:	4a0b      	ldr	r2, [pc, #44]	; (400974 <SystemCoreClockUpdate+0x104>)
  400948:	4b06      	ldr	r3, [pc, #24]	; (400964 <SystemCoreClockUpdate+0xf4>)
  40094a:	601a      	str	r2, [r3, #0]
          break;
  40094c:	e7d8      	b.n	400900 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40094e:	4a05      	ldr	r2, [pc, #20]	; (400964 <SystemCoreClockUpdate+0xf4>)
  400950:	6813      	ldr	r3, [r2, #0]
  400952:	4909      	ldr	r1, [pc, #36]	; (400978 <SystemCoreClockUpdate+0x108>)
  400954:	fba1 1303 	umull	r1, r3, r1, r3
  400958:	085b      	lsrs	r3, r3, #1
  40095a:	6013      	str	r3, [r2, #0]
  40095c:	4770      	bx	lr
  40095e:	bf00      	nop
  400960:	400e0600 	.word	0x400e0600
  400964:	20400004 	.word	0x20400004
  400968:	400e1810 	.word	0x400e1810
  40096c:	00b71b00 	.word	0x00b71b00
  400970:	003d0900 	.word	0x003d0900
  400974:	007a1200 	.word	0x007a1200
  400978:	aaaaaaab 	.word	0xaaaaaaab

0040097c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  40097c:	4b16      	ldr	r3, [pc, #88]	; (4009d8 <system_init_flash+0x5c>)
  40097e:	4298      	cmp	r0, r3
  400980:	d913      	bls.n	4009aa <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400982:	4b16      	ldr	r3, [pc, #88]	; (4009dc <system_init_flash+0x60>)
  400984:	4298      	cmp	r0, r3
  400986:	d915      	bls.n	4009b4 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400988:	4b15      	ldr	r3, [pc, #84]	; (4009e0 <system_init_flash+0x64>)
  40098a:	4298      	cmp	r0, r3
  40098c:	d916      	bls.n	4009bc <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40098e:	4b15      	ldr	r3, [pc, #84]	; (4009e4 <system_init_flash+0x68>)
  400990:	4298      	cmp	r0, r3
  400992:	d917      	bls.n	4009c4 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400994:	4b14      	ldr	r3, [pc, #80]	; (4009e8 <system_init_flash+0x6c>)
  400996:	4298      	cmp	r0, r3
  400998:	d918      	bls.n	4009cc <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  40099a:	4b14      	ldr	r3, [pc, #80]	; (4009ec <system_init_flash+0x70>)
  40099c:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40099e:	bf94      	ite	ls
  4009a0:	4a13      	ldrls	r2, [pc, #76]	; (4009f0 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4009a2:	4a14      	ldrhi	r2, [pc, #80]	; (4009f4 <system_init_flash+0x78>)
  4009a4:	4b14      	ldr	r3, [pc, #80]	; (4009f8 <system_init_flash+0x7c>)
  4009a6:	601a      	str	r2, [r3, #0]
  4009a8:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4009aa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4009ae:	4b12      	ldr	r3, [pc, #72]	; (4009f8 <system_init_flash+0x7c>)
  4009b0:	601a      	str	r2, [r3, #0]
  4009b2:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4009b4:	4a11      	ldr	r2, [pc, #68]	; (4009fc <system_init_flash+0x80>)
  4009b6:	4b10      	ldr	r3, [pc, #64]	; (4009f8 <system_init_flash+0x7c>)
  4009b8:	601a      	str	r2, [r3, #0]
  4009ba:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4009bc:	4a10      	ldr	r2, [pc, #64]	; (400a00 <system_init_flash+0x84>)
  4009be:	4b0e      	ldr	r3, [pc, #56]	; (4009f8 <system_init_flash+0x7c>)
  4009c0:	601a      	str	r2, [r3, #0]
  4009c2:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4009c4:	4a0f      	ldr	r2, [pc, #60]	; (400a04 <system_init_flash+0x88>)
  4009c6:	4b0c      	ldr	r3, [pc, #48]	; (4009f8 <system_init_flash+0x7c>)
  4009c8:	601a      	str	r2, [r3, #0]
  4009ca:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4009cc:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4009d0:	4b09      	ldr	r3, [pc, #36]	; (4009f8 <system_init_flash+0x7c>)
  4009d2:	601a      	str	r2, [r3, #0]
  4009d4:	4770      	bx	lr
  4009d6:	bf00      	nop
  4009d8:	015ef3bf 	.word	0x015ef3bf
  4009dc:	02bde77f 	.word	0x02bde77f
  4009e0:	041cdb3f 	.word	0x041cdb3f
  4009e4:	057bceff 	.word	0x057bceff
  4009e8:	06dac2bf 	.word	0x06dac2bf
  4009ec:	0839b67f 	.word	0x0839b67f
  4009f0:	04000500 	.word	0x04000500
  4009f4:	04000600 	.word	0x04000600
  4009f8:	400e0c00 	.word	0x400e0c00
  4009fc:	04000100 	.word	0x04000100
  400a00:	04000200 	.word	0x04000200
  400a04:	04000300 	.word	0x04000300

00400a08 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400a08:	4b0a      	ldr	r3, [pc, #40]	; (400a34 <_sbrk+0x2c>)
  400a0a:	681b      	ldr	r3, [r3, #0]
  400a0c:	b153      	cbz	r3, 400a24 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400a0e:	4b09      	ldr	r3, [pc, #36]	; (400a34 <_sbrk+0x2c>)
  400a10:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400a12:	181a      	adds	r2, r3, r0
  400a14:	4908      	ldr	r1, [pc, #32]	; (400a38 <_sbrk+0x30>)
  400a16:	4291      	cmp	r1, r2
  400a18:	db08      	blt.n	400a2c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400a1a:	4610      	mov	r0, r2
  400a1c:	4a05      	ldr	r2, [pc, #20]	; (400a34 <_sbrk+0x2c>)
  400a1e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400a20:	4618      	mov	r0, r3
  400a22:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400a24:	4a05      	ldr	r2, [pc, #20]	; (400a3c <_sbrk+0x34>)
  400a26:	4b03      	ldr	r3, [pc, #12]	; (400a34 <_sbrk+0x2c>)
  400a28:	601a      	str	r2, [r3, #0]
  400a2a:	e7f0      	b.n	400a0e <_sbrk+0x6>
		return (caddr_t) -1;	
  400a2c:	f04f 30ff 	mov.w	r0, #4294967295
}
  400a30:	4770      	bx	lr
  400a32:	bf00      	nop
  400a34:	20400a48 	.word	0x20400a48
  400a38:	2045fffc 	.word	0x2045fffc
  400a3c:	20402cb8 	.word	0x20402cb8

00400a40 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400a40:	f04f 30ff 	mov.w	r0, #4294967295
  400a44:	4770      	bx	lr

00400a46 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400a46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400a4a:	604b      	str	r3, [r1, #4]

	return 0;
}
  400a4c:	2000      	movs	r0, #0
  400a4e:	4770      	bx	lr

00400a50 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400a50:	2001      	movs	r0, #1
  400a52:	4770      	bx	lr

00400a54 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400a54:	2000      	movs	r0, #0
  400a56:	4770      	bx	lr

00400a58 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400a58:	b5f0      	push	{r4, r5, r6, r7, lr}
  400a5a:	b083      	sub	sp, #12
  400a5c:	4605      	mov	r5, r0
  400a5e:	460c      	mov	r4, r1
	uint32_t val = 0;
  400a60:	2300      	movs	r3, #0
  400a62:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400a64:	4b2a      	ldr	r3, [pc, #168]	; (400b10 <usart_serial_getchar+0xb8>)
  400a66:	4298      	cmp	r0, r3
  400a68:	d013      	beq.n	400a92 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400a6a:	4b2a      	ldr	r3, [pc, #168]	; (400b14 <usart_serial_getchar+0xbc>)
  400a6c:	4298      	cmp	r0, r3
  400a6e:	d018      	beq.n	400aa2 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  400a70:	4b29      	ldr	r3, [pc, #164]	; (400b18 <usart_serial_getchar+0xc0>)
  400a72:	4298      	cmp	r0, r3
  400a74:	d01d      	beq.n	400ab2 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  400a76:	4b29      	ldr	r3, [pc, #164]	; (400b1c <usart_serial_getchar+0xc4>)
  400a78:	429d      	cmp	r5, r3
  400a7a:	d022      	beq.n	400ac2 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400a7c:	4b28      	ldr	r3, [pc, #160]	; (400b20 <usart_serial_getchar+0xc8>)
  400a7e:	429d      	cmp	r5, r3
  400a80:	d027      	beq.n	400ad2 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400a82:	4b28      	ldr	r3, [pc, #160]	; (400b24 <usart_serial_getchar+0xcc>)
  400a84:	429d      	cmp	r5, r3
  400a86:	d02e      	beq.n	400ae6 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  400a88:	4b27      	ldr	r3, [pc, #156]	; (400b28 <usart_serial_getchar+0xd0>)
  400a8a:	429d      	cmp	r5, r3
  400a8c:	d035      	beq.n	400afa <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400a8e:	b003      	add	sp, #12
  400a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  400a92:	461f      	mov	r7, r3
  400a94:	4e25      	ldr	r6, [pc, #148]	; (400b2c <usart_serial_getchar+0xd4>)
  400a96:	4621      	mov	r1, r4
  400a98:	4638      	mov	r0, r7
  400a9a:	47b0      	blx	r6
  400a9c:	2800      	cmp	r0, #0
  400a9e:	d1fa      	bne.n	400a96 <usart_serial_getchar+0x3e>
  400aa0:	e7e9      	b.n	400a76 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  400aa2:	461f      	mov	r7, r3
  400aa4:	4e21      	ldr	r6, [pc, #132]	; (400b2c <usart_serial_getchar+0xd4>)
  400aa6:	4621      	mov	r1, r4
  400aa8:	4638      	mov	r0, r7
  400aaa:	47b0      	blx	r6
  400aac:	2800      	cmp	r0, #0
  400aae:	d1fa      	bne.n	400aa6 <usart_serial_getchar+0x4e>
  400ab0:	e7e4      	b.n	400a7c <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  400ab2:	461f      	mov	r7, r3
  400ab4:	4e1d      	ldr	r6, [pc, #116]	; (400b2c <usart_serial_getchar+0xd4>)
  400ab6:	4621      	mov	r1, r4
  400ab8:	4638      	mov	r0, r7
  400aba:	47b0      	blx	r6
  400abc:	2800      	cmp	r0, #0
  400abe:	d1fa      	bne.n	400ab6 <usart_serial_getchar+0x5e>
  400ac0:	e7df      	b.n	400a82 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  400ac2:	461f      	mov	r7, r3
  400ac4:	4e19      	ldr	r6, [pc, #100]	; (400b2c <usart_serial_getchar+0xd4>)
  400ac6:	4621      	mov	r1, r4
  400ac8:	4638      	mov	r0, r7
  400aca:	47b0      	blx	r6
  400acc:	2800      	cmp	r0, #0
  400ace:	d1fa      	bne.n	400ac6 <usart_serial_getchar+0x6e>
  400ad0:	e7da      	b.n	400a88 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  400ad2:	461e      	mov	r6, r3
  400ad4:	4d16      	ldr	r5, [pc, #88]	; (400b30 <usart_serial_getchar+0xd8>)
  400ad6:	a901      	add	r1, sp, #4
  400ad8:	4630      	mov	r0, r6
  400ada:	47a8      	blx	r5
  400adc:	2800      	cmp	r0, #0
  400ade:	d1fa      	bne.n	400ad6 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  400ae0:	9b01      	ldr	r3, [sp, #4]
  400ae2:	7023      	strb	r3, [r4, #0]
  400ae4:	e7d3      	b.n	400a8e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  400ae6:	461e      	mov	r6, r3
  400ae8:	4d11      	ldr	r5, [pc, #68]	; (400b30 <usart_serial_getchar+0xd8>)
  400aea:	a901      	add	r1, sp, #4
  400aec:	4630      	mov	r0, r6
  400aee:	47a8      	blx	r5
  400af0:	2800      	cmp	r0, #0
  400af2:	d1fa      	bne.n	400aea <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  400af4:	9b01      	ldr	r3, [sp, #4]
  400af6:	7023      	strb	r3, [r4, #0]
  400af8:	e7c9      	b.n	400a8e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  400afa:	461e      	mov	r6, r3
  400afc:	4d0c      	ldr	r5, [pc, #48]	; (400b30 <usart_serial_getchar+0xd8>)
  400afe:	a901      	add	r1, sp, #4
  400b00:	4630      	mov	r0, r6
  400b02:	47a8      	blx	r5
  400b04:	2800      	cmp	r0, #0
  400b06:	d1fa      	bne.n	400afe <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  400b08:	9b01      	ldr	r3, [sp, #4]
  400b0a:	7023      	strb	r3, [r4, #0]
}
  400b0c:	e7bf      	b.n	400a8e <usart_serial_getchar+0x36>
  400b0e:	bf00      	nop
  400b10:	400e0800 	.word	0x400e0800
  400b14:	400e0a00 	.word	0x400e0a00
  400b18:	400e1a00 	.word	0x400e1a00
  400b1c:	400e1c00 	.word	0x400e1c00
  400b20:	40024000 	.word	0x40024000
  400b24:	40028000 	.word	0x40028000
  400b28:	4002c000 	.word	0x4002c000
  400b2c:	00400387 	.word	0x00400387
  400b30:	0040030b 	.word	0x0040030b

00400b34 <usart_serial_putchar>:
{
  400b34:	b570      	push	{r4, r5, r6, lr}
  400b36:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400b38:	4b2a      	ldr	r3, [pc, #168]	; (400be4 <usart_serial_putchar+0xb0>)
  400b3a:	4298      	cmp	r0, r3
  400b3c:	d013      	beq.n	400b66 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  400b3e:	4b2a      	ldr	r3, [pc, #168]	; (400be8 <usart_serial_putchar+0xb4>)
  400b40:	4298      	cmp	r0, r3
  400b42:	d019      	beq.n	400b78 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  400b44:	4b29      	ldr	r3, [pc, #164]	; (400bec <usart_serial_putchar+0xb8>)
  400b46:	4298      	cmp	r0, r3
  400b48:	d01f      	beq.n	400b8a <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  400b4a:	4b29      	ldr	r3, [pc, #164]	; (400bf0 <usart_serial_putchar+0xbc>)
  400b4c:	4298      	cmp	r0, r3
  400b4e:	d025      	beq.n	400b9c <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  400b50:	4b28      	ldr	r3, [pc, #160]	; (400bf4 <usart_serial_putchar+0xc0>)
  400b52:	4298      	cmp	r0, r3
  400b54:	d02b      	beq.n	400bae <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  400b56:	4b28      	ldr	r3, [pc, #160]	; (400bf8 <usart_serial_putchar+0xc4>)
  400b58:	4298      	cmp	r0, r3
  400b5a:	d031      	beq.n	400bc0 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  400b5c:	4b27      	ldr	r3, [pc, #156]	; (400bfc <usart_serial_putchar+0xc8>)
  400b5e:	4298      	cmp	r0, r3
  400b60:	d037      	beq.n	400bd2 <usart_serial_putchar+0x9e>
	return 0;
  400b62:	2000      	movs	r0, #0
}
  400b64:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400b66:	461e      	mov	r6, r3
  400b68:	4d25      	ldr	r5, [pc, #148]	; (400c00 <usart_serial_putchar+0xcc>)
  400b6a:	4621      	mov	r1, r4
  400b6c:	4630      	mov	r0, r6
  400b6e:	47a8      	blx	r5
  400b70:	2800      	cmp	r0, #0
  400b72:	d1fa      	bne.n	400b6a <usart_serial_putchar+0x36>
		return 1;
  400b74:	2001      	movs	r0, #1
  400b76:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400b78:	461e      	mov	r6, r3
  400b7a:	4d21      	ldr	r5, [pc, #132]	; (400c00 <usart_serial_putchar+0xcc>)
  400b7c:	4621      	mov	r1, r4
  400b7e:	4630      	mov	r0, r6
  400b80:	47a8      	blx	r5
  400b82:	2800      	cmp	r0, #0
  400b84:	d1fa      	bne.n	400b7c <usart_serial_putchar+0x48>
		return 1;
  400b86:	2001      	movs	r0, #1
  400b88:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400b8a:	461e      	mov	r6, r3
  400b8c:	4d1c      	ldr	r5, [pc, #112]	; (400c00 <usart_serial_putchar+0xcc>)
  400b8e:	4621      	mov	r1, r4
  400b90:	4630      	mov	r0, r6
  400b92:	47a8      	blx	r5
  400b94:	2800      	cmp	r0, #0
  400b96:	d1fa      	bne.n	400b8e <usart_serial_putchar+0x5a>
		return 1;
  400b98:	2001      	movs	r0, #1
  400b9a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400b9c:	461e      	mov	r6, r3
  400b9e:	4d18      	ldr	r5, [pc, #96]	; (400c00 <usart_serial_putchar+0xcc>)
  400ba0:	4621      	mov	r1, r4
  400ba2:	4630      	mov	r0, r6
  400ba4:	47a8      	blx	r5
  400ba6:	2800      	cmp	r0, #0
  400ba8:	d1fa      	bne.n	400ba0 <usart_serial_putchar+0x6c>
		return 1;
  400baa:	2001      	movs	r0, #1
  400bac:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400bae:	461e      	mov	r6, r3
  400bb0:	4d14      	ldr	r5, [pc, #80]	; (400c04 <usart_serial_putchar+0xd0>)
  400bb2:	4621      	mov	r1, r4
  400bb4:	4630      	mov	r0, r6
  400bb6:	47a8      	blx	r5
  400bb8:	2800      	cmp	r0, #0
  400bba:	d1fa      	bne.n	400bb2 <usart_serial_putchar+0x7e>
		return 1;
  400bbc:	2001      	movs	r0, #1
  400bbe:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400bc0:	461e      	mov	r6, r3
  400bc2:	4d10      	ldr	r5, [pc, #64]	; (400c04 <usart_serial_putchar+0xd0>)
  400bc4:	4621      	mov	r1, r4
  400bc6:	4630      	mov	r0, r6
  400bc8:	47a8      	blx	r5
  400bca:	2800      	cmp	r0, #0
  400bcc:	d1fa      	bne.n	400bc4 <usart_serial_putchar+0x90>
		return 1;
  400bce:	2001      	movs	r0, #1
  400bd0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400bd2:	461e      	mov	r6, r3
  400bd4:	4d0b      	ldr	r5, [pc, #44]	; (400c04 <usart_serial_putchar+0xd0>)
  400bd6:	4621      	mov	r1, r4
  400bd8:	4630      	mov	r0, r6
  400bda:	47a8      	blx	r5
  400bdc:	2800      	cmp	r0, #0
  400bde:	d1fa      	bne.n	400bd6 <usart_serial_putchar+0xa2>
		return 1;
  400be0:	2001      	movs	r0, #1
  400be2:	bd70      	pop	{r4, r5, r6, pc}
  400be4:	400e0800 	.word	0x400e0800
  400be8:	400e0a00 	.word	0x400e0a00
  400bec:	400e1a00 	.word	0x400e1a00
  400bf0:	400e1c00 	.word	0x400e1c00
  400bf4:	40024000 	.word	0x40024000
  400bf8:	40028000 	.word	0x40028000
  400bfc:	4002c000 	.word	0x4002c000
  400c00:	00400375 	.word	0x00400375
  400c04:	004002f5 	.word	0x004002f5

00400c08 <main>:
	setbuf(stdout, NULL);
#endif
}

int main(void)
{
  400c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400c0c:	b08d      	sub	sp, #52	; 0x34
	sysclk_init();
  400c0e:	4b6f      	ldr	r3, [pc, #444]	; (400dcc <main+0x1c4>)
  400c10:	4798      	blx	r3
	board_init();
  400c12:	4b6f      	ldr	r3, [pc, #444]	; (400dd0 <main+0x1c8>)
  400c14:	4798      	blx	r3
  400c16:	200a      	movs	r0, #10
  400c18:	4d6e      	ldr	r5, [pc, #440]	; (400dd4 <main+0x1cc>)
  400c1a:	47a8      	blx	r5
  400c1c:	200b      	movs	r0, #11
  400c1e:	47a8      	blx	r5
  400c20:	200c      	movs	r0, #12
  400c22:	47a8      	blx	r5
  400c24:	2010      	movs	r0, #16
  400c26:	47a8      	blx	r5
  400c28:	2011      	movs	r0, #17
  400c2a:	47a8      	blx	r5
  400c2c:	200e      	movs	r0, #14
  400c2e:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400c30:	4f69      	ldr	r7, [pc, #420]	; (400dd8 <main+0x1d0>)
  400c32:	4b6a      	ldr	r3, [pc, #424]	; (400ddc <main+0x1d4>)
  400c34:	601f      	str	r7, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400c36:	4a6a      	ldr	r2, [pc, #424]	; (400de0 <main+0x1d8>)
  400c38:	4b6a      	ldr	r3, [pc, #424]	; (400de4 <main+0x1dc>)
  400c3a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400c3c:	4a6a      	ldr	r2, [pc, #424]	; (400de8 <main+0x1e0>)
  400c3e:	4b6b      	ldr	r3, [pc, #428]	; (400dec <main+0x1e4>)
  400c40:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  400c42:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400c46:	9306      	str	r3, [sp, #24]
	usart_settings.char_length = opt->charlength;
  400c48:	23c0      	movs	r3, #192	; 0xc0
  400c4a:	9307      	str	r3, [sp, #28]
	usart_settings.parity_type = opt->paritytype;
  400c4c:	f44f 6400 	mov.w	r4, #2048	; 0x800
  400c50:	9408      	str	r4, [sp, #32]
	usart_settings.stop_bits= opt->stopbits;
  400c52:	2600      	movs	r6, #0
  400c54:	9609      	str	r6, [sp, #36]	; 0x24
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  400c56:	960a      	str	r6, [sp, #40]	; 0x28
  400c58:	200e      	movs	r0, #14
  400c5a:	47a8      	blx	r5
		usart_init_rs232(p_usart, &usart_settings,
  400c5c:	4a64      	ldr	r2, [pc, #400]	; (400df0 <main+0x1e8>)
  400c5e:	a906      	add	r1, sp, #24
  400c60:	4638      	mov	r0, r7
  400c62:	4b64      	ldr	r3, [pc, #400]	; (400df4 <main+0x1ec>)
  400c64:	4798      	blx	r3
		usart_enable_tx(p_usart);
  400c66:	4638      	mov	r0, r7
  400c68:	4b63      	ldr	r3, [pc, #396]	; (400df8 <main+0x1f0>)
  400c6a:	4798      	blx	r3
		usart_enable_rx(p_usart);
  400c6c:	4638      	mov	r0, r7
  400c6e:	4b63      	ldr	r3, [pc, #396]	; (400dfc <main+0x1f4>)
  400c70:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400c72:	4f63      	ldr	r7, [pc, #396]	; (400e00 <main+0x1f8>)
  400c74:	683b      	ldr	r3, [r7, #0]
  400c76:	4631      	mov	r1, r6
  400c78:	6898      	ldr	r0, [r3, #8]
  400c7a:	4d62      	ldr	r5, [pc, #392]	; (400e04 <main+0x1fc>)
  400c7c:	47a8      	blx	r5
	setbuf(stdin, NULL);
  400c7e:	683b      	ldr	r3, [r7, #0]
  400c80:	4631      	mov	r1, r6
  400c82:	6858      	ldr	r0, [r3, #4]
  400c84:	47a8      	blx	r5
	setbuf(stdout, NULL);
  400c86:	683b      	ldr	r3, [r7, #0]
  400c88:	4631      	mov	r1, r6
  400c8a:	6898      	ldr	r0, [r3, #8]
  400c8c:	47a8      	blx	r5
	ioport_init();
	
	/* Configure debug UART */
	configure_console();
	
	puts("Starting\r\n\r\n");
  400c8e:	485e      	ldr	r0, [pc, #376]	; (400e08 <main+0x200>)
  400c90:	4b5e      	ldr	r3, [pc, #376]	; (400e0c <main+0x204>)
  400c92:	4798      	blx	r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400c94:	4b5e      	ldr	r3, [pc, #376]	; (400e10 <main+0x208>)
  400c96:	f44f 7280 	mov.w	r2, #256	; 0x100
  400c9a:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400c9c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400ca0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400ca4:	615c      	str	r4, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400ca6:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400caa:	665c      	str	r4, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400cac:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400cb0:	655c      	str	r4, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400cb2:	625c      	str	r4, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400cb4:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400cb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400cba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  400cbe:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400cc0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400cc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  400cc6:	675a      	str	r2, [r3, #116]	; 0x74
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400cc8:	4a52      	ldr	r2, [pc, #328]	; (400e14 <main+0x20c>)
  400cca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400cce:	6151      	str	r1, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400cd0:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400cd4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400cd8:	6151      	str	r1, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400cda:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400cde:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400ce2:	6151      	str	r1, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400ce4:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400ce8:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400cea:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400cee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  400cf2:	6151      	str	r1, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400cf4:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400cf8:	6154      	str	r4, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400cfa:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400cfe:	2220      	movs	r2, #32
  400d00:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d02:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400d06:	f44f 7200 	mov.w	r2, #512	; 0x200
  400d0a:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d0c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	
	bool level = true;
	bool prevlevel = true;
  400d10:	2201      	movs	r2, #1
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400d12:	469a      	mov	sl, r3
  400d14:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 400e14 <main+0x20c>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400d18:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 400e10 <main+0x208>
  400d1c:	e006      	b.n	400d2c <main+0x124>
	if (level) {
  400d1e:	2e00      	cmp	r6, #0
  400d20:	d14e      	bne.n	400dc0 <main+0x1b8>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400d22:	f44f 7380 	mov.w	r3, #256	; 0x100
  400d26:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  400d2a:	2200      	movs	r2, #0
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400d2c:	f8da 503c 	ldr.w	r5, [sl, #60]	; 0x3c
  400d30:	f405 6600 	and.w	r6, r5, #2048	; 0x800
  400d34:	f3c5 25c0 	ubfx	r5, r5, #11, #1
	while (true) {
		/* Get value from button and output it on led */
		level = ioport_get_pin_level(EXAMPLE_BUTTON);
		if(level != prevlevel)
		{
			if(level)
  400d38:	42aa      	cmp	r2, r5
  400d3a:	d0f0      	beq.n	400d1e <main+0x116>
  400d3c:	2d00      	cmp	r5, #0
  400d3e:	d0ee      	beq.n	400d1e <main+0x116>
  400d40:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
  400d44:	9305      	str	r3, [sp, #20]
  400d46:	f8d9 203c 	ldr.w	r2, [r9, #60]	; 0x3c
  400d4a:	9204      	str	r2, [sp, #16]
  400d4c:	f8d9 103c 	ldr.w	r1, [r9, #60]	; 0x3c
  400d50:	9103      	str	r1, [sp, #12]
  400d52:	f8da 003c 	ldr.w	r0, [sl, #60]	; 0x3c
  400d56:	9002      	str	r0, [sp, #8]
  400d58:	f8d9 403c 	ldr.w	r4, [r9, #60]	; 0x3c
  400d5c:	9401      	str	r4, [sp, #4]
  400d5e:	f8d9 403c 	ldr.w	r4, [r9, #60]	; 0x3c
  400d62:	9400      	str	r4, [sp, #0]
  400d64:	f8da 703c 	ldr.w	r7, [sl, #60]	; 0x3c
  400d68:	f8da b03c 	ldr.w	fp, [sl, #60]	; 0x3c
				bit4 = ioport_get_pin_level(BIT4_PIN);
				bit5 = ioport_get_pin_level(BIT5_PIN);
				bit6 = ioport_get_pin_level(BIT6_PIN);
				bit7 = ioport_get_pin_level(BIT7_PIN);
				
				printf("Read Data\r\n");
  400d6c:	482a      	ldr	r0, [pc, #168]	; (400e18 <main+0x210>)
  400d6e:	4c2b      	ldr	r4, [pc, #172]	; (400e1c <main+0x214>)
  400d70:	47a0      	blx	r4
				printf("%d", bit7);
  400d72:	f3cb 2140 	ubfx	r1, fp, #9, #1
  400d76:	482a      	ldr	r0, [pc, #168]	; (400e20 <main+0x218>)
  400d78:	47a0      	blx	r4
				printf("%d", bit6);
  400d7a:	f3c7 1140 	ubfx	r1, r7, #5, #1
  400d7e:	4828      	ldr	r0, [pc, #160]	; (400e20 <main+0x218>)
  400d80:	47a0      	blx	r4
				printf("%d", bit5);
  400d82:	9f00      	ldr	r7, [sp, #0]
  400d84:	f3c7 21c0 	ubfx	r1, r7, #11, #1
  400d88:	4825      	ldr	r0, [pc, #148]	; (400e20 <main+0x218>)
  400d8a:	47a0      	blx	r4
				printf("%d", bit4);
  400d8c:	9f01      	ldr	r7, [sp, #4]
  400d8e:	f3c7 3100 	ubfx	r1, r7, #12, #1
  400d92:	4823      	ldr	r0, [pc, #140]	; (400e20 <main+0x218>)
  400d94:	47a0      	blx	r4
				printf("%d", bit3);
  400d96:	9802      	ldr	r0, [sp, #8]
  400d98:	f3c0 61c0 	ubfx	r1, r0, #27, #1
  400d9c:	4820      	ldr	r0, [pc, #128]	; (400e20 <main+0x218>)
  400d9e:	47a0      	blx	r4
				printf("%d", bit2);
  400da0:	9903      	ldr	r1, [sp, #12]
  400da2:	f3c1 61c0 	ubfx	r1, r1, #27, #1
  400da6:	481e      	ldr	r0, [pc, #120]	; (400e20 <main+0x218>)
  400da8:	47a0      	blx	r4
				printf("%d", bit1);
  400daa:	9a04      	ldr	r2, [sp, #16]
  400dac:	f3c2 7100 	ubfx	r1, r2, #28, #1
  400db0:	481b      	ldr	r0, [pc, #108]	; (400e20 <main+0x218>)
  400db2:	47a0      	blx	r4
				printf("%d\r\n", bit0);
  400db4:	9b05      	ldr	r3, [sp, #20]
  400db6:	f3c3 7180 	ubfx	r1, r3, #30, #1
  400dba:	481a      	ldr	r0, [pc, #104]	; (400e24 <main+0x21c>)
  400dbc:	47a0      	blx	r4
  400dbe:	e7ae      	b.n	400d1e <main+0x116>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400dc0:	f44f 7380 	mov.w	r3, #256	; 0x100
  400dc4:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
  400dc8:	462a      	mov	r2, r5
  400dca:	e7af      	b.n	400d2c <main+0x124>
  400dcc:	0040039d 	.word	0x0040039d
  400dd0:	00400411 	.word	0x00400411
  400dd4:	00400785 	.word	0x00400785
  400dd8:	40028000 	.word	0x40028000
  400ddc:	20400a88 	.word	0x20400a88
  400de0:	00400b35 	.word	0x00400b35
  400de4:	20400a84 	.word	0x20400a84
  400de8:	00400a59 	.word	0x00400a59
  400dec:	20400a80 	.word	0x20400a80
  400df0:	047868c0 	.word	0x047868c0
  400df4:	00400295 	.word	0x00400295
  400df8:	004002e9 	.word	0x004002e9
  400dfc:	004002ef 	.word	0x004002ef
  400e00:	20400008 	.word	0x20400008
  400e04:	00400fe9 	.word	0x00400fe9
  400e08:	00403e78 	.word	0x00403e78
  400e0c:	00400fd9 	.word	0x00400fd9
  400e10:	400e1200 	.word	0x400e1200
  400e14:	400e1400 	.word	0x400e1400
  400e18:	00403e88 	.word	0x00403e88
  400e1c:	00400e79 	.word	0x00400e79
  400e20:	00403e94 	.word	0x00403e94
  400e24:	00403e98 	.word	0x00403e98

00400e28 <__libc_init_array>:
  400e28:	b570      	push	{r4, r5, r6, lr}
  400e2a:	4e0f      	ldr	r6, [pc, #60]	; (400e68 <__libc_init_array+0x40>)
  400e2c:	4d0f      	ldr	r5, [pc, #60]	; (400e6c <__libc_init_array+0x44>)
  400e2e:	1b76      	subs	r6, r6, r5
  400e30:	10b6      	asrs	r6, r6, #2
  400e32:	bf18      	it	ne
  400e34:	2400      	movne	r4, #0
  400e36:	d005      	beq.n	400e44 <__libc_init_array+0x1c>
  400e38:	3401      	adds	r4, #1
  400e3a:	f855 3b04 	ldr.w	r3, [r5], #4
  400e3e:	4798      	blx	r3
  400e40:	42a6      	cmp	r6, r4
  400e42:	d1f9      	bne.n	400e38 <__libc_init_array+0x10>
  400e44:	4e0a      	ldr	r6, [pc, #40]	; (400e70 <__libc_init_array+0x48>)
  400e46:	4d0b      	ldr	r5, [pc, #44]	; (400e74 <__libc_init_array+0x4c>)
  400e48:	1b76      	subs	r6, r6, r5
  400e4a:	f003 f8df 	bl	40400c <_init>
  400e4e:	10b6      	asrs	r6, r6, #2
  400e50:	bf18      	it	ne
  400e52:	2400      	movne	r4, #0
  400e54:	d006      	beq.n	400e64 <__libc_init_array+0x3c>
  400e56:	3401      	adds	r4, #1
  400e58:	f855 3b04 	ldr.w	r3, [r5], #4
  400e5c:	4798      	blx	r3
  400e5e:	42a6      	cmp	r6, r4
  400e60:	d1f9      	bne.n	400e56 <__libc_init_array+0x2e>
  400e62:	bd70      	pop	{r4, r5, r6, pc}
  400e64:	bd70      	pop	{r4, r5, r6, pc}
  400e66:	bf00      	nop
  400e68:	00404018 	.word	0x00404018
  400e6c:	00404018 	.word	0x00404018
  400e70:	00404020 	.word	0x00404020
  400e74:	00404018 	.word	0x00404018

00400e78 <iprintf>:
  400e78:	b40f      	push	{r0, r1, r2, r3}
  400e7a:	b500      	push	{lr}
  400e7c:	4907      	ldr	r1, [pc, #28]	; (400e9c <iprintf+0x24>)
  400e7e:	b083      	sub	sp, #12
  400e80:	ab04      	add	r3, sp, #16
  400e82:	6808      	ldr	r0, [r1, #0]
  400e84:	f853 2b04 	ldr.w	r2, [r3], #4
  400e88:	6881      	ldr	r1, [r0, #8]
  400e8a:	9301      	str	r3, [sp, #4]
  400e8c:	f000 fa46 	bl	40131c <_vfiprintf_r>
  400e90:	b003      	add	sp, #12
  400e92:	f85d eb04 	ldr.w	lr, [sp], #4
  400e96:	b004      	add	sp, #16
  400e98:	4770      	bx	lr
  400e9a:	bf00      	nop
  400e9c:	20400008 	.word	0x20400008

00400ea0 <memset>:
  400ea0:	b470      	push	{r4, r5, r6}
  400ea2:	0786      	lsls	r6, r0, #30
  400ea4:	d046      	beq.n	400f34 <memset+0x94>
  400ea6:	1e54      	subs	r4, r2, #1
  400ea8:	2a00      	cmp	r2, #0
  400eaa:	d041      	beq.n	400f30 <memset+0x90>
  400eac:	b2ca      	uxtb	r2, r1
  400eae:	4603      	mov	r3, r0
  400eb0:	e002      	b.n	400eb8 <memset+0x18>
  400eb2:	f114 34ff 	adds.w	r4, r4, #4294967295
  400eb6:	d33b      	bcc.n	400f30 <memset+0x90>
  400eb8:	f803 2b01 	strb.w	r2, [r3], #1
  400ebc:	079d      	lsls	r5, r3, #30
  400ebe:	d1f8      	bne.n	400eb2 <memset+0x12>
  400ec0:	2c03      	cmp	r4, #3
  400ec2:	d92e      	bls.n	400f22 <memset+0x82>
  400ec4:	b2cd      	uxtb	r5, r1
  400ec6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  400eca:	2c0f      	cmp	r4, #15
  400ecc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  400ed0:	d919      	bls.n	400f06 <memset+0x66>
  400ed2:	f103 0210 	add.w	r2, r3, #16
  400ed6:	4626      	mov	r6, r4
  400ed8:	3e10      	subs	r6, #16
  400eda:	2e0f      	cmp	r6, #15
  400edc:	f842 5c10 	str.w	r5, [r2, #-16]
  400ee0:	f842 5c0c 	str.w	r5, [r2, #-12]
  400ee4:	f842 5c08 	str.w	r5, [r2, #-8]
  400ee8:	f842 5c04 	str.w	r5, [r2, #-4]
  400eec:	f102 0210 	add.w	r2, r2, #16
  400ef0:	d8f2      	bhi.n	400ed8 <memset+0x38>
  400ef2:	f1a4 0210 	sub.w	r2, r4, #16
  400ef6:	f022 020f 	bic.w	r2, r2, #15
  400efa:	f004 040f 	and.w	r4, r4, #15
  400efe:	3210      	adds	r2, #16
  400f00:	2c03      	cmp	r4, #3
  400f02:	4413      	add	r3, r2
  400f04:	d90d      	bls.n	400f22 <memset+0x82>
  400f06:	461e      	mov	r6, r3
  400f08:	4622      	mov	r2, r4
  400f0a:	3a04      	subs	r2, #4
  400f0c:	2a03      	cmp	r2, #3
  400f0e:	f846 5b04 	str.w	r5, [r6], #4
  400f12:	d8fa      	bhi.n	400f0a <memset+0x6a>
  400f14:	1f22      	subs	r2, r4, #4
  400f16:	f022 0203 	bic.w	r2, r2, #3
  400f1a:	3204      	adds	r2, #4
  400f1c:	4413      	add	r3, r2
  400f1e:	f004 0403 	and.w	r4, r4, #3
  400f22:	b12c      	cbz	r4, 400f30 <memset+0x90>
  400f24:	b2c9      	uxtb	r1, r1
  400f26:	441c      	add	r4, r3
  400f28:	f803 1b01 	strb.w	r1, [r3], #1
  400f2c:	429c      	cmp	r4, r3
  400f2e:	d1fb      	bne.n	400f28 <memset+0x88>
  400f30:	bc70      	pop	{r4, r5, r6}
  400f32:	4770      	bx	lr
  400f34:	4614      	mov	r4, r2
  400f36:	4603      	mov	r3, r0
  400f38:	e7c2      	b.n	400ec0 <memset+0x20>
  400f3a:	bf00      	nop

00400f3c <_puts_r>:
  400f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  400f3e:	4605      	mov	r5, r0
  400f40:	b089      	sub	sp, #36	; 0x24
  400f42:	4608      	mov	r0, r1
  400f44:	460c      	mov	r4, r1
  400f46:	f000 f93b 	bl	4011c0 <strlen>
  400f4a:	6bab      	ldr	r3, [r5, #56]	; 0x38
  400f4c:	4f21      	ldr	r7, [pc, #132]	; (400fd4 <_puts_r+0x98>)
  400f4e:	9404      	str	r4, [sp, #16]
  400f50:	2601      	movs	r6, #1
  400f52:	1c44      	adds	r4, r0, #1
  400f54:	a904      	add	r1, sp, #16
  400f56:	2202      	movs	r2, #2
  400f58:	9403      	str	r4, [sp, #12]
  400f5a:	9005      	str	r0, [sp, #20]
  400f5c:	68ac      	ldr	r4, [r5, #8]
  400f5e:	9706      	str	r7, [sp, #24]
  400f60:	9607      	str	r6, [sp, #28]
  400f62:	9101      	str	r1, [sp, #4]
  400f64:	9202      	str	r2, [sp, #8]
  400f66:	b353      	cbz	r3, 400fbe <_puts_r+0x82>
  400f68:	6e63      	ldr	r3, [r4, #100]	; 0x64
  400f6a:	f013 0f01 	tst.w	r3, #1
  400f6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  400f72:	b29a      	uxth	r2, r3
  400f74:	d101      	bne.n	400f7a <_puts_r+0x3e>
  400f76:	0590      	lsls	r0, r2, #22
  400f78:	d525      	bpl.n	400fc6 <_puts_r+0x8a>
  400f7a:	0491      	lsls	r1, r2, #18
  400f7c:	d406      	bmi.n	400f8c <_puts_r+0x50>
  400f7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
  400f80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  400f84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  400f88:	81a3      	strh	r3, [r4, #12]
  400f8a:	6662      	str	r2, [r4, #100]	; 0x64
  400f8c:	4628      	mov	r0, r5
  400f8e:	aa01      	add	r2, sp, #4
  400f90:	4621      	mov	r1, r4
  400f92:	f001 fbc5 	bl	402720 <__sfvwrite_r>
  400f96:	6e63      	ldr	r3, [r4, #100]	; 0x64
  400f98:	2800      	cmp	r0, #0
  400f9a:	bf0c      	ite	eq
  400f9c:	250a      	moveq	r5, #10
  400f9e:	f04f 35ff 	movne.w	r5, #4294967295
  400fa2:	07da      	lsls	r2, r3, #31
  400fa4:	d402      	bmi.n	400fac <_puts_r+0x70>
  400fa6:	89a3      	ldrh	r3, [r4, #12]
  400fa8:	059b      	lsls	r3, r3, #22
  400faa:	d502      	bpl.n	400fb2 <_puts_r+0x76>
  400fac:	4628      	mov	r0, r5
  400fae:	b009      	add	sp, #36	; 0x24
  400fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400fb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  400fb4:	f001 fd6a 	bl	402a8c <__retarget_lock_release_recursive>
  400fb8:	4628      	mov	r0, r5
  400fba:	b009      	add	sp, #36	; 0x24
  400fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400fbe:	4628      	mov	r0, r5
  400fc0:	f001 f9a2 	bl	402308 <__sinit>
  400fc4:	e7d0      	b.n	400f68 <_puts_r+0x2c>
  400fc6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  400fc8:	f001 fd5e 	bl	402a88 <__retarget_lock_acquire_recursive>
  400fcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  400fd0:	b29a      	uxth	r2, r3
  400fd2:	e7d2      	b.n	400f7a <_puts_r+0x3e>
  400fd4:	00403ea4 	.word	0x00403ea4

00400fd8 <puts>:
  400fd8:	4b02      	ldr	r3, [pc, #8]	; (400fe4 <puts+0xc>)
  400fda:	4601      	mov	r1, r0
  400fdc:	6818      	ldr	r0, [r3, #0]
  400fde:	f7ff bfad 	b.w	400f3c <_puts_r>
  400fe2:	bf00      	nop
  400fe4:	20400008 	.word	0x20400008

00400fe8 <setbuf>:
  400fe8:	2900      	cmp	r1, #0
  400fea:	bf0c      	ite	eq
  400fec:	2202      	moveq	r2, #2
  400fee:	2200      	movne	r2, #0
  400ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  400ff4:	f000 b800 	b.w	400ff8 <setvbuf>

00400ff8 <setvbuf>:
  400ff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400ffc:	4c61      	ldr	r4, [pc, #388]	; (401184 <setvbuf+0x18c>)
  400ffe:	6825      	ldr	r5, [r4, #0]
  401000:	b083      	sub	sp, #12
  401002:	4604      	mov	r4, r0
  401004:	460f      	mov	r7, r1
  401006:	4690      	mov	r8, r2
  401008:	461e      	mov	r6, r3
  40100a:	b115      	cbz	r5, 401012 <setvbuf+0x1a>
  40100c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40100e:	2b00      	cmp	r3, #0
  401010:	d064      	beq.n	4010dc <setvbuf+0xe4>
  401012:	f1b8 0f02 	cmp.w	r8, #2
  401016:	d006      	beq.n	401026 <setvbuf+0x2e>
  401018:	f1b8 0f01 	cmp.w	r8, #1
  40101c:	f200 809f 	bhi.w	40115e <setvbuf+0x166>
  401020:	2e00      	cmp	r6, #0
  401022:	f2c0 809c 	blt.w	40115e <setvbuf+0x166>
  401026:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401028:	07d8      	lsls	r0, r3, #31
  40102a:	d534      	bpl.n	401096 <setvbuf+0x9e>
  40102c:	4621      	mov	r1, r4
  40102e:	4628      	mov	r0, r5
  401030:	f001 f912 	bl	402258 <_fflush_r>
  401034:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401036:	b141      	cbz	r1, 40104a <setvbuf+0x52>
  401038:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40103c:	4299      	cmp	r1, r3
  40103e:	d002      	beq.n	401046 <setvbuf+0x4e>
  401040:	4628      	mov	r0, r5
  401042:	f001 fa87 	bl	402554 <_free_r>
  401046:	2300      	movs	r3, #0
  401048:	6323      	str	r3, [r4, #48]	; 0x30
  40104a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40104e:	2200      	movs	r2, #0
  401050:	61a2      	str	r2, [r4, #24]
  401052:	6062      	str	r2, [r4, #4]
  401054:	061a      	lsls	r2, r3, #24
  401056:	d43a      	bmi.n	4010ce <setvbuf+0xd6>
  401058:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40105c:	f023 0303 	bic.w	r3, r3, #3
  401060:	f1b8 0f02 	cmp.w	r8, #2
  401064:	81a3      	strh	r3, [r4, #12]
  401066:	d01d      	beq.n	4010a4 <setvbuf+0xac>
  401068:	ab01      	add	r3, sp, #4
  40106a:	466a      	mov	r2, sp
  40106c:	4621      	mov	r1, r4
  40106e:	4628      	mov	r0, r5
  401070:	f001 fd0e 	bl	402a90 <__swhatbuf_r>
  401074:	89a3      	ldrh	r3, [r4, #12]
  401076:	4318      	orrs	r0, r3
  401078:	81a0      	strh	r0, [r4, #12]
  40107a:	2e00      	cmp	r6, #0
  40107c:	d132      	bne.n	4010e4 <setvbuf+0xec>
  40107e:	9e00      	ldr	r6, [sp, #0]
  401080:	4630      	mov	r0, r6
  401082:	f001 fd7d 	bl	402b80 <malloc>
  401086:	4607      	mov	r7, r0
  401088:	2800      	cmp	r0, #0
  40108a:	d06b      	beq.n	401164 <setvbuf+0x16c>
  40108c:	89a3      	ldrh	r3, [r4, #12]
  40108e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401092:	81a3      	strh	r3, [r4, #12]
  401094:	e028      	b.n	4010e8 <setvbuf+0xf0>
  401096:	89a3      	ldrh	r3, [r4, #12]
  401098:	0599      	lsls	r1, r3, #22
  40109a:	d4c7      	bmi.n	40102c <setvbuf+0x34>
  40109c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40109e:	f001 fcf3 	bl	402a88 <__retarget_lock_acquire_recursive>
  4010a2:	e7c3      	b.n	40102c <setvbuf+0x34>
  4010a4:	2500      	movs	r5, #0
  4010a6:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4010a8:	2600      	movs	r6, #0
  4010aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4010ae:	f043 0302 	orr.w	r3, r3, #2
  4010b2:	2001      	movs	r0, #1
  4010b4:	60a6      	str	r6, [r4, #8]
  4010b6:	07ce      	lsls	r6, r1, #31
  4010b8:	81a3      	strh	r3, [r4, #12]
  4010ba:	6022      	str	r2, [r4, #0]
  4010bc:	6122      	str	r2, [r4, #16]
  4010be:	6160      	str	r0, [r4, #20]
  4010c0:	d401      	bmi.n	4010c6 <setvbuf+0xce>
  4010c2:	0598      	lsls	r0, r3, #22
  4010c4:	d53e      	bpl.n	401144 <setvbuf+0x14c>
  4010c6:	4628      	mov	r0, r5
  4010c8:	b003      	add	sp, #12
  4010ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4010ce:	6921      	ldr	r1, [r4, #16]
  4010d0:	4628      	mov	r0, r5
  4010d2:	f001 fa3f 	bl	402554 <_free_r>
  4010d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4010da:	e7bd      	b.n	401058 <setvbuf+0x60>
  4010dc:	4628      	mov	r0, r5
  4010de:	f001 f913 	bl	402308 <__sinit>
  4010e2:	e796      	b.n	401012 <setvbuf+0x1a>
  4010e4:	2f00      	cmp	r7, #0
  4010e6:	d0cb      	beq.n	401080 <setvbuf+0x88>
  4010e8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4010ea:	2b00      	cmp	r3, #0
  4010ec:	d033      	beq.n	401156 <setvbuf+0x15e>
  4010ee:	9b00      	ldr	r3, [sp, #0]
  4010f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4010f4:	6027      	str	r7, [r4, #0]
  4010f6:	429e      	cmp	r6, r3
  4010f8:	bf1c      	itt	ne
  4010fa:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4010fe:	81a2      	strhne	r2, [r4, #12]
  401100:	f1b8 0f01 	cmp.w	r8, #1
  401104:	bf04      	itt	eq
  401106:	f042 0201 	orreq.w	r2, r2, #1
  40110a:	81a2      	strheq	r2, [r4, #12]
  40110c:	b292      	uxth	r2, r2
  40110e:	f012 0308 	ands.w	r3, r2, #8
  401112:	6127      	str	r7, [r4, #16]
  401114:	6166      	str	r6, [r4, #20]
  401116:	d00e      	beq.n	401136 <setvbuf+0x13e>
  401118:	07d1      	lsls	r1, r2, #31
  40111a:	d51a      	bpl.n	401152 <setvbuf+0x15a>
  40111c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40111e:	4276      	negs	r6, r6
  401120:	2300      	movs	r3, #0
  401122:	f015 0501 	ands.w	r5, r5, #1
  401126:	61a6      	str	r6, [r4, #24]
  401128:	60a3      	str	r3, [r4, #8]
  40112a:	d009      	beq.n	401140 <setvbuf+0x148>
  40112c:	2500      	movs	r5, #0
  40112e:	4628      	mov	r0, r5
  401130:	b003      	add	sp, #12
  401132:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401136:	60a3      	str	r3, [r4, #8]
  401138:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40113a:	f015 0501 	ands.w	r5, r5, #1
  40113e:	d1f5      	bne.n	40112c <setvbuf+0x134>
  401140:	0593      	lsls	r3, r2, #22
  401142:	d4c0      	bmi.n	4010c6 <setvbuf+0xce>
  401144:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401146:	f001 fca1 	bl	402a8c <__retarget_lock_release_recursive>
  40114a:	4628      	mov	r0, r5
  40114c:	b003      	add	sp, #12
  40114e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401152:	60a6      	str	r6, [r4, #8]
  401154:	e7f0      	b.n	401138 <setvbuf+0x140>
  401156:	4628      	mov	r0, r5
  401158:	f001 f8d6 	bl	402308 <__sinit>
  40115c:	e7c7      	b.n	4010ee <setvbuf+0xf6>
  40115e:	f04f 35ff 	mov.w	r5, #4294967295
  401162:	e7b0      	b.n	4010c6 <setvbuf+0xce>
  401164:	f8dd 9000 	ldr.w	r9, [sp]
  401168:	45b1      	cmp	r9, r6
  40116a:	d004      	beq.n	401176 <setvbuf+0x17e>
  40116c:	4648      	mov	r0, r9
  40116e:	f001 fd07 	bl	402b80 <malloc>
  401172:	4607      	mov	r7, r0
  401174:	b920      	cbnz	r0, 401180 <setvbuf+0x188>
  401176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40117a:	f04f 35ff 	mov.w	r5, #4294967295
  40117e:	e792      	b.n	4010a6 <setvbuf+0xae>
  401180:	464e      	mov	r6, r9
  401182:	e783      	b.n	40108c <setvbuf+0x94>
  401184:	20400008 	.word	0x20400008
	...

004011c0 <strlen>:
  4011c0:	f890 f000 	pld	[r0]
  4011c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4011c8:	f020 0107 	bic.w	r1, r0, #7
  4011cc:	f06f 0c00 	mvn.w	ip, #0
  4011d0:	f010 0407 	ands.w	r4, r0, #7
  4011d4:	f891 f020 	pld	[r1, #32]
  4011d8:	f040 8049 	bne.w	40126e <strlen+0xae>
  4011dc:	f04f 0400 	mov.w	r4, #0
  4011e0:	f06f 0007 	mvn.w	r0, #7
  4011e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4011e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4011ec:	f100 0008 	add.w	r0, r0, #8
  4011f0:	fa82 f24c 	uadd8	r2, r2, ip
  4011f4:	faa4 f28c 	sel	r2, r4, ip
  4011f8:	fa83 f34c 	uadd8	r3, r3, ip
  4011fc:	faa2 f38c 	sel	r3, r2, ip
  401200:	bb4b      	cbnz	r3, 401256 <strlen+0x96>
  401202:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  401206:	fa82 f24c 	uadd8	r2, r2, ip
  40120a:	f100 0008 	add.w	r0, r0, #8
  40120e:	faa4 f28c 	sel	r2, r4, ip
  401212:	fa83 f34c 	uadd8	r3, r3, ip
  401216:	faa2 f38c 	sel	r3, r2, ip
  40121a:	b9e3      	cbnz	r3, 401256 <strlen+0x96>
  40121c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  401220:	fa82 f24c 	uadd8	r2, r2, ip
  401224:	f100 0008 	add.w	r0, r0, #8
  401228:	faa4 f28c 	sel	r2, r4, ip
  40122c:	fa83 f34c 	uadd8	r3, r3, ip
  401230:	faa2 f38c 	sel	r3, r2, ip
  401234:	b97b      	cbnz	r3, 401256 <strlen+0x96>
  401236:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40123a:	f101 0120 	add.w	r1, r1, #32
  40123e:	fa82 f24c 	uadd8	r2, r2, ip
  401242:	f100 0008 	add.w	r0, r0, #8
  401246:	faa4 f28c 	sel	r2, r4, ip
  40124a:	fa83 f34c 	uadd8	r3, r3, ip
  40124e:	faa2 f38c 	sel	r3, r2, ip
  401252:	2b00      	cmp	r3, #0
  401254:	d0c6      	beq.n	4011e4 <strlen+0x24>
  401256:	2a00      	cmp	r2, #0
  401258:	bf04      	itt	eq
  40125a:	3004      	addeq	r0, #4
  40125c:	461a      	moveq	r2, r3
  40125e:	ba12      	rev	r2, r2
  401260:	fab2 f282 	clz	r2, r2
  401264:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  401268:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40126c:	4770      	bx	lr
  40126e:	e9d1 2300 	ldrd	r2, r3, [r1]
  401272:	f004 0503 	and.w	r5, r4, #3
  401276:	f1c4 0000 	rsb	r0, r4, #0
  40127a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40127e:	f014 0f04 	tst.w	r4, #4
  401282:	f891 f040 	pld	[r1, #64]	; 0x40
  401286:	fa0c f505 	lsl.w	r5, ip, r5
  40128a:	ea62 0205 	orn	r2, r2, r5
  40128e:	bf1c      	itt	ne
  401290:	ea63 0305 	ornne	r3, r3, r5
  401294:	4662      	movne	r2, ip
  401296:	f04f 0400 	mov.w	r4, #0
  40129a:	e7a9      	b.n	4011f0 <strlen+0x30>

0040129c <__sprint_r.part.0>:
  40129c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4012a0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4012a2:	049c      	lsls	r4, r3, #18
  4012a4:	4693      	mov	fp, r2
  4012a6:	d52f      	bpl.n	401308 <__sprint_r.part.0+0x6c>
  4012a8:	6893      	ldr	r3, [r2, #8]
  4012aa:	6812      	ldr	r2, [r2, #0]
  4012ac:	b353      	cbz	r3, 401304 <__sprint_r.part.0+0x68>
  4012ae:	460e      	mov	r6, r1
  4012b0:	4607      	mov	r7, r0
  4012b2:	f102 0908 	add.w	r9, r2, #8
  4012b6:	e919 0420 	ldmdb	r9, {r5, sl}
  4012ba:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4012be:	d017      	beq.n	4012f0 <__sprint_r.part.0+0x54>
  4012c0:	3d04      	subs	r5, #4
  4012c2:	2400      	movs	r4, #0
  4012c4:	e001      	b.n	4012ca <__sprint_r.part.0+0x2e>
  4012c6:	45a0      	cmp	r8, r4
  4012c8:	d010      	beq.n	4012ec <__sprint_r.part.0+0x50>
  4012ca:	4632      	mov	r2, r6
  4012cc:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4012d0:	4638      	mov	r0, r7
  4012d2:	f001 f8bb 	bl	40244c <_fputwc_r>
  4012d6:	1c43      	adds	r3, r0, #1
  4012d8:	f104 0401 	add.w	r4, r4, #1
  4012dc:	d1f3      	bne.n	4012c6 <__sprint_r.part.0+0x2a>
  4012de:	2300      	movs	r3, #0
  4012e0:	f8cb 3008 	str.w	r3, [fp, #8]
  4012e4:	f8cb 3004 	str.w	r3, [fp, #4]
  4012e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4012ec:	f8db 3008 	ldr.w	r3, [fp, #8]
  4012f0:	f02a 0a03 	bic.w	sl, sl, #3
  4012f4:	eba3 030a 	sub.w	r3, r3, sl
  4012f8:	f8cb 3008 	str.w	r3, [fp, #8]
  4012fc:	f109 0908 	add.w	r9, r9, #8
  401300:	2b00      	cmp	r3, #0
  401302:	d1d8      	bne.n	4012b6 <__sprint_r.part.0+0x1a>
  401304:	2000      	movs	r0, #0
  401306:	e7ea      	b.n	4012de <__sprint_r.part.0+0x42>
  401308:	f001 fa0a 	bl	402720 <__sfvwrite_r>
  40130c:	2300      	movs	r3, #0
  40130e:	f8cb 3008 	str.w	r3, [fp, #8]
  401312:	f8cb 3004 	str.w	r3, [fp, #4]
  401316:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40131a:	bf00      	nop

0040131c <_vfiprintf_r>:
  40131c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401320:	b0ad      	sub	sp, #180	; 0xb4
  401322:	461d      	mov	r5, r3
  401324:	468b      	mov	fp, r1
  401326:	4690      	mov	r8, r2
  401328:	9307      	str	r3, [sp, #28]
  40132a:	9006      	str	r0, [sp, #24]
  40132c:	b118      	cbz	r0, 401336 <_vfiprintf_r+0x1a>
  40132e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401330:	2b00      	cmp	r3, #0
  401332:	f000 80f3 	beq.w	40151c <_vfiprintf_r+0x200>
  401336:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40133a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40133e:	07df      	lsls	r7, r3, #31
  401340:	b281      	uxth	r1, r0
  401342:	d402      	bmi.n	40134a <_vfiprintf_r+0x2e>
  401344:	058e      	lsls	r6, r1, #22
  401346:	f140 80fc 	bpl.w	401542 <_vfiprintf_r+0x226>
  40134a:	048c      	lsls	r4, r1, #18
  40134c:	d40a      	bmi.n	401364 <_vfiprintf_r+0x48>
  40134e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401352:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  401356:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40135a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40135e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  401362:	b289      	uxth	r1, r1
  401364:	0708      	lsls	r0, r1, #28
  401366:	f140 80b3 	bpl.w	4014d0 <_vfiprintf_r+0x1b4>
  40136a:	f8db 3010 	ldr.w	r3, [fp, #16]
  40136e:	2b00      	cmp	r3, #0
  401370:	f000 80ae 	beq.w	4014d0 <_vfiprintf_r+0x1b4>
  401374:	f001 031a 	and.w	r3, r1, #26
  401378:	2b0a      	cmp	r3, #10
  40137a:	f000 80b5 	beq.w	4014e8 <_vfiprintf_r+0x1cc>
  40137e:	2300      	movs	r3, #0
  401380:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  401384:	930b      	str	r3, [sp, #44]	; 0x2c
  401386:	9311      	str	r3, [sp, #68]	; 0x44
  401388:	9310      	str	r3, [sp, #64]	; 0x40
  40138a:	9303      	str	r3, [sp, #12]
  40138c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  401390:	46ca      	mov	sl, r9
  401392:	f8cd b010 	str.w	fp, [sp, #16]
  401396:	f898 3000 	ldrb.w	r3, [r8]
  40139a:	4644      	mov	r4, r8
  40139c:	b1fb      	cbz	r3, 4013de <_vfiprintf_r+0xc2>
  40139e:	2b25      	cmp	r3, #37	; 0x25
  4013a0:	d102      	bne.n	4013a8 <_vfiprintf_r+0x8c>
  4013a2:	e01c      	b.n	4013de <_vfiprintf_r+0xc2>
  4013a4:	2b25      	cmp	r3, #37	; 0x25
  4013a6:	d003      	beq.n	4013b0 <_vfiprintf_r+0x94>
  4013a8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4013ac:	2b00      	cmp	r3, #0
  4013ae:	d1f9      	bne.n	4013a4 <_vfiprintf_r+0x88>
  4013b0:	eba4 0508 	sub.w	r5, r4, r8
  4013b4:	b19d      	cbz	r5, 4013de <_vfiprintf_r+0xc2>
  4013b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4013b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4013ba:	f8ca 8000 	str.w	r8, [sl]
  4013be:	3301      	adds	r3, #1
  4013c0:	442a      	add	r2, r5
  4013c2:	2b07      	cmp	r3, #7
  4013c4:	f8ca 5004 	str.w	r5, [sl, #4]
  4013c8:	9211      	str	r2, [sp, #68]	; 0x44
  4013ca:	9310      	str	r3, [sp, #64]	; 0x40
  4013cc:	dd7a      	ble.n	4014c4 <_vfiprintf_r+0x1a8>
  4013ce:	2a00      	cmp	r2, #0
  4013d0:	f040 84b0 	bne.w	401d34 <_vfiprintf_r+0xa18>
  4013d4:	9b03      	ldr	r3, [sp, #12]
  4013d6:	9210      	str	r2, [sp, #64]	; 0x40
  4013d8:	442b      	add	r3, r5
  4013da:	46ca      	mov	sl, r9
  4013dc:	9303      	str	r3, [sp, #12]
  4013de:	7823      	ldrb	r3, [r4, #0]
  4013e0:	2b00      	cmp	r3, #0
  4013e2:	f000 83e0 	beq.w	401ba6 <_vfiprintf_r+0x88a>
  4013e6:	2000      	movs	r0, #0
  4013e8:	f04f 0300 	mov.w	r3, #0
  4013ec:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4013f0:	f104 0801 	add.w	r8, r4, #1
  4013f4:	7862      	ldrb	r2, [r4, #1]
  4013f6:	4605      	mov	r5, r0
  4013f8:	4606      	mov	r6, r0
  4013fa:	4603      	mov	r3, r0
  4013fc:	f04f 34ff 	mov.w	r4, #4294967295
  401400:	f108 0801 	add.w	r8, r8, #1
  401404:	f1a2 0120 	sub.w	r1, r2, #32
  401408:	2958      	cmp	r1, #88	; 0x58
  40140a:	f200 82de 	bhi.w	4019ca <_vfiprintf_r+0x6ae>
  40140e:	e8df f011 	tbh	[pc, r1, lsl #1]
  401412:	0221      	.short	0x0221
  401414:	02dc02dc 	.word	0x02dc02dc
  401418:	02dc0229 	.word	0x02dc0229
  40141c:	02dc02dc 	.word	0x02dc02dc
  401420:	02dc02dc 	.word	0x02dc02dc
  401424:	028902dc 	.word	0x028902dc
  401428:	02dc0295 	.word	0x02dc0295
  40142c:	02bd00a2 	.word	0x02bd00a2
  401430:	019f02dc 	.word	0x019f02dc
  401434:	01a401a4 	.word	0x01a401a4
  401438:	01a401a4 	.word	0x01a401a4
  40143c:	01a401a4 	.word	0x01a401a4
  401440:	01a401a4 	.word	0x01a401a4
  401444:	02dc01a4 	.word	0x02dc01a4
  401448:	02dc02dc 	.word	0x02dc02dc
  40144c:	02dc02dc 	.word	0x02dc02dc
  401450:	02dc02dc 	.word	0x02dc02dc
  401454:	02dc02dc 	.word	0x02dc02dc
  401458:	01b202dc 	.word	0x01b202dc
  40145c:	02dc02dc 	.word	0x02dc02dc
  401460:	02dc02dc 	.word	0x02dc02dc
  401464:	02dc02dc 	.word	0x02dc02dc
  401468:	02dc02dc 	.word	0x02dc02dc
  40146c:	02dc02dc 	.word	0x02dc02dc
  401470:	02dc0197 	.word	0x02dc0197
  401474:	02dc02dc 	.word	0x02dc02dc
  401478:	02dc02dc 	.word	0x02dc02dc
  40147c:	02dc019b 	.word	0x02dc019b
  401480:	025302dc 	.word	0x025302dc
  401484:	02dc02dc 	.word	0x02dc02dc
  401488:	02dc02dc 	.word	0x02dc02dc
  40148c:	02dc02dc 	.word	0x02dc02dc
  401490:	02dc02dc 	.word	0x02dc02dc
  401494:	02dc02dc 	.word	0x02dc02dc
  401498:	021b025a 	.word	0x021b025a
  40149c:	02dc02dc 	.word	0x02dc02dc
  4014a0:	026e02dc 	.word	0x026e02dc
  4014a4:	02dc021b 	.word	0x02dc021b
  4014a8:	027302dc 	.word	0x027302dc
  4014ac:	01f502dc 	.word	0x01f502dc
  4014b0:	02090182 	.word	0x02090182
  4014b4:	02dc02d7 	.word	0x02dc02d7
  4014b8:	02dc029a 	.word	0x02dc029a
  4014bc:	02dc00a7 	.word	0x02dc00a7
  4014c0:	022e02dc 	.word	0x022e02dc
  4014c4:	f10a 0a08 	add.w	sl, sl, #8
  4014c8:	9b03      	ldr	r3, [sp, #12]
  4014ca:	442b      	add	r3, r5
  4014cc:	9303      	str	r3, [sp, #12]
  4014ce:	e786      	b.n	4013de <_vfiprintf_r+0xc2>
  4014d0:	4659      	mov	r1, fp
  4014d2:	9806      	ldr	r0, [sp, #24]
  4014d4:	f000 fdac 	bl	402030 <__swsetup_r>
  4014d8:	bb18      	cbnz	r0, 401522 <_vfiprintf_r+0x206>
  4014da:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  4014de:	f001 031a 	and.w	r3, r1, #26
  4014e2:	2b0a      	cmp	r3, #10
  4014e4:	f47f af4b 	bne.w	40137e <_vfiprintf_r+0x62>
  4014e8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4014ec:	2b00      	cmp	r3, #0
  4014ee:	f6ff af46 	blt.w	40137e <_vfiprintf_r+0x62>
  4014f2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4014f6:	07db      	lsls	r3, r3, #31
  4014f8:	d405      	bmi.n	401506 <_vfiprintf_r+0x1ea>
  4014fa:	058f      	lsls	r7, r1, #22
  4014fc:	d403      	bmi.n	401506 <_vfiprintf_r+0x1ea>
  4014fe:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401502:	f001 fac3 	bl	402a8c <__retarget_lock_release_recursive>
  401506:	462b      	mov	r3, r5
  401508:	4642      	mov	r2, r8
  40150a:	4659      	mov	r1, fp
  40150c:	9806      	ldr	r0, [sp, #24]
  40150e:	f000 fd4d 	bl	401fac <__sbprintf>
  401512:	9003      	str	r0, [sp, #12]
  401514:	9803      	ldr	r0, [sp, #12]
  401516:	b02d      	add	sp, #180	; 0xb4
  401518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40151c:	f000 fef4 	bl	402308 <__sinit>
  401520:	e709      	b.n	401336 <_vfiprintf_r+0x1a>
  401522:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401526:	07d9      	lsls	r1, r3, #31
  401528:	d404      	bmi.n	401534 <_vfiprintf_r+0x218>
  40152a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40152e:	059a      	lsls	r2, r3, #22
  401530:	f140 84aa 	bpl.w	401e88 <_vfiprintf_r+0xb6c>
  401534:	f04f 33ff 	mov.w	r3, #4294967295
  401538:	9303      	str	r3, [sp, #12]
  40153a:	9803      	ldr	r0, [sp, #12]
  40153c:	b02d      	add	sp, #180	; 0xb4
  40153e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401542:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401546:	f001 fa9f 	bl	402a88 <__retarget_lock_acquire_recursive>
  40154a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40154e:	b281      	uxth	r1, r0
  401550:	e6fb      	b.n	40134a <_vfiprintf_r+0x2e>
  401552:	4276      	negs	r6, r6
  401554:	9207      	str	r2, [sp, #28]
  401556:	f043 0304 	orr.w	r3, r3, #4
  40155a:	f898 2000 	ldrb.w	r2, [r8]
  40155e:	e74f      	b.n	401400 <_vfiprintf_r+0xe4>
  401560:	9608      	str	r6, [sp, #32]
  401562:	069e      	lsls	r6, r3, #26
  401564:	f100 8450 	bmi.w	401e08 <_vfiprintf_r+0xaec>
  401568:	9907      	ldr	r1, [sp, #28]
  40156a:	06dd      	lsls	r5, r3, #27
  40156c:	460a      	mov	r2, r1
  40156e:	f100 83ef 	bmi.w	401d50 <_vfiprintf_r+0xa34>
  401572:	0658      	lsls	r0, r3, #25
  401574:	f140 83ec 	bpl.w	401d50 <_vfiprintf_r+0xa34>
  401578:	880e      	ldrh	r6, [r1, #0]
  40157a:	3104      	adds	r1, #4
  40157c:	2700      	movs	r7, #0
  40157e:	2201      	movs	r2, #1
  401580:	9107      	str	r1, [sp, #28]
  401582:	f04f 0100 	mov.w	r1, #0
  401586:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40158a:	2500      	movs	r5, #0
  40158c:	1c61      	adds	r1, r4, #1
  40158e:	f000 8116 	beq.w	4017be <_vfiprintf_r+0x4a2>
  401592:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  401596:	9102      	str	r1, [sp, #8]
  401598:	ea56 0107 	orrs.w	r1, r6, r7
  40159c:	f040 8114 	bne.w	4017c8 <_vfiprintf_r+0x4ac>
  4015a0:	2c00      	cmp	r4, #0
  4015a2:	f040 835c 	bne.w	401c5e <_vfiprintf_r+0x942>
  4015a6:	2a00      	cmp	r2, #0
  4015a8:	f040 83b7 	bne.w	401d1a <_vfiprintf_r+0x9fe>
  4015ac:	f013 0301 	ands.w	r3, r3, #1
  4015b0:	9305      	str	r3, [sp, #20]
  4015b2:	f000 8457 	beq.w	401e64 <_vfiprintf_r+0xb48>
  4015b6:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4015ba:	2330      	movs	r3, #48	; 0x30
  4015bc:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  4015c0:	9b05      	ldr	r3, [sp, #20]
  4015c2:	42a3      	cmp	r3, r4
  4015c4:	bfb8      	it	lt
  4015c6:	4623      	movlt	r3, r4
  4015c8:	9301      	str	r3, [sp, #4]
  4015ca:	b10d      	cbz	r5, 4015d0 <_vfiprintf_r+0x2b4>
  4015cc:	3301      	adds	r3, #1
  4015ce:	9301      	str	r3, [sp, #4]
  4015d0:	9b02      	ldr	r3, [sp, #8]
  4015d2:	f013 0302 	ands.w	r3, r3, #2
  4015d6:	9309      	str	r3, [sp, #36]	; 0x24
  4015d8:	d002      	beq.n	4015e0 <_vfiprintf_r+0x2c4>
  4015da:	9b01      	ldr	r3, [sp, #4]
  4015dc:	3302      	adds	r3, #2
  4015de:	9301      	str	r3, [sp, #4]
  4015e0:	9b02      	ldr	r3, [sp, #8]
  4015e2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4015e6:	930a      	str	r3, [sp, #40]	; 0x28
  4015e8:	f040 8217 	bne.w	401a1a <_vfiprintf_r+0x6fe>
  4015ec:	9b08      	ldr	r3, [sp, #32]
  4015ee:	9a01      	ldr	r2, [sp, #4]
  4015f0:	1a9d      	subs	r5, r3, r2
  4015f2:	2d00      	cmp	r5, #0
  4015f4:	f340 8211 	ble.w	401a1a <_vfiprintf_r+0x6fe>
  4015f8:	2d10      	cmp	r5, #16
  4015fa:	f340 8490 	ble.w	401f1e <_vfiprintf_r+0xc02>
  4015fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
  401600:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401602:	4ec4      	ldr	r6, [pc, #784]	; (401914 <_vfiprintf_r+0x5f8>)
  401604:	46d6      	mov	lr, sl
  401606:	2710      	movs	r7, #16
  401608:	46a2      	mov	sl, r4
  40160a:	4619      	mov	r1, r3
  40160c:	9c06      	ldr	r4, [sp, #24]
  40160e:	e007      	b.n	401620 <_vfiprintf_r+0x304>
  401610:	f101 0c02 	add.w	ip, r1, #2
  401614:	f10e 0e08 	add.w	lr, lr, #8
  401618:	4601      	mov	r1, r0
  40161a:	3d10      	subs	r5, #16
  40161c:	2d10      	cmp	r5, #16
  40161e:	dd11      	ble.n	401644 <_vfiprintf_r+0x328>
  401620:	1c48      	adds	r0, r1, #1
  401622:	3210      	adds	r2, #16
  401624:	2807      	cmp	r0, #7
  401626:	9211      	str	r2, [sp, #68]	; 0x44
  401628:	e88e 00c0 	stmia.w	lr, {r6, r7}
  40162c:	9010      	str	r0, [sp, #64]	; 0x40
  40162e:	ddef      	ble.n	401610 <_vfiprintf_r+0x2f4>
  401630:	2a00      	cmp	r2, #0
  401632:	f040 81e4 	bne.w	4019fe <_vfiprintf_r+0x6e2>
  401636:	3d10      	subs	r5, #16
  401638:	2d10      	cmp	r5, #16
  40163a:	4611      	mov	r1, r2
  40163c:	f04f 0c01 	mov.w	ip, #1
  401640:	46ce      	mov	lr, r9
  401642:	dced      	bgt.n	401620 <_vfiprintf_r+0x304>
  401644:	4654      	mov	r4, sl
  401646:	4661      	mov	r1, ip
  401648:	46f2      	mov	sl, lr
  40164a:	442a      	add	r2, r5
  40164c:	2907      	cmp	r1, #7
  40164e:	9211      	str	r2, [sp, #68]	; 0x44
  401650:	f8ca 6000 	str.w	r6, [sl]
  401654:	f8ca 5004 	str.w	r5, [sl, #4]
  401658:	9110      	str	r1, [sp, #64]	; 0x40
  40165a:	f300 82ec 	bgt.w	401c36 <_vfiprintf_r+0x91a>
  40165e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401662:	f10a 0a08 	add.w	sl, sl, #8
  401666:	1c48      	adds	r0, r1, #1
  401668:	2d00      	cmp	r5, #0
  40166a:	f040 81de 	bne.w	401a2a <_vfiprintf_r+0x70e>
  40166e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401670:	2b00      	cmp	r3, #0
  401672:	f000 81f8 	beq.w	401a66 <_vfiprintf_r+0x74a>
  401676:	3202      	adds	r2, #2
  401678:	a90e      	add	r1, sp, #56	; 0x38
  40167a:	2302      	movs	r3, #2
  40167c:	2807      	cmp	r0, #7
  40167e:	9211      	str	r2, [sp, #68]	; 0x44
  401680:	9010      	str	r0, [sp, #64]	; 0x40
  401682:	e88a 000a 	stmia.w	sl, {r1, r3}
  401686:	f340 81ea 	ble.w	401a5e <_vfiprintf_r+0x742>
  40168a:	2a00      	cmp	r2, #0
  40168c:	f040 838c 	bne.w	401da8 <_vfiprintf_r+0xa8c>
  401690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401692:	2b80      	cmp	r3, #128	; 0x80
  401694:	f04f 0001 	mov.w	r0, #1
  401698:	4611      	mov	r1, r2
  40169a:	46ca      	mov	sl, r9
  40169c:	f040 81e7 	bne.w	401a6e <_vfiprintf_r+0x752>
  4016a0:	9b08      	ldr	r3, [sp, #32]
  4016a2:	9d01      	ldr	r5, [sp, #4]
  4016a4:	1b5e      	subs	r6, r3, r5
  4016a6:	2e00      	cmp	r6, #0
  4016a8:	f340 81e1 	ble.w	401a6e <_vfiprintf_r+0x752>
  4016ac:	2e10      	cmp	r6, #16
  4016ae:	4d9a      	ldr	r5, [pc, #616]	; (401918 <_vfiprintf_r+0x5fc>)
  4016b0:	f340 8450 	ble.w	401f54 <_vfiprintf_r+0xc38>
  4016b4:	46d4      	mov	ip, sl
  4016b6:	2710      	movs	r7, #16
  4016b8:	46a2      	mov	sl, r4
  4016ba:	9c06      	ldr	r4, [sp, #24]
  4016bc:	e007      	b.n	4016ce <_vfiprintf_r+0x3b2>
  4016be:	f101 0e02 	add.w	lr, r1, #2
  4016c2:	f10c 0c08 	add.w	ip, ip, #8
  4016c6:	4601      	mov	r1, r0
  4016c8:	3e10      	subs	r6, #16
  4016ca:	2e10      	cmp	r6, #16
  4016cc:	dd11      	ble.n	4016f2 <_vfiprintf_r+0x3d6>
  4016ce:	1c48      	adds	r0, r1, #1
  4016d0:	3210      	adds	r2, #16
  4016d2:	2807      	cmp	r0, #7
  4016d4:	9211      	str	r2, [sp, #68]	; 0x44
  4016d6:	e88c 00a0 	stmia.w	ip, {r5, r7}
  4016da:	9010      	str	r0, [sp, #64]	; 0x40
  4016dc:	ddef      	ble.n	4016be <_vfiprintf_r+0x3a2>
  4016de:	2a00      	cmp	r2, #0
  4016e0:	f040 829d 	bne.w	401c1e <_vfiprintf_r+0x902>
  4016e4:	3e10      	subs	r6, #16
  4016e6:	2e10      	cmp	r6, #16
  4016e8:	f04f 0e01 	mov.w	lr, #1
  4016ec:	4611      	mov	r1, r2
  4016ee:	46cc      	mov	ip, r9
  4016f0:	dced      	bgt.n	4016ce <_vfiprintf_r+0x3b2>
  4016f2:	4654      	mov	r4, sl
  4016f4:	46e2      	mov	sl, ip
  4016f6:	4432      	add	r2, r6
  4016f8:	f1be 0f07 	cmp.w	lr, #7
  4016fc:	9211      	str	r2, [sp, #68]	; 0x44
  4016fe:	e88a 0060 	stmia.w	sl, {r5, r6}
  401702:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  401706:	f300 8369 	bgt.w	401ddc <_vfiprintf_r+0xac0>
  40170a:	f10a 0a08 	add.w	sl, sl, #8
  40170e:	f10e 0001 	add.w	r0, lr, #1
  401712:	4671      	mov	r1, lr
  401714:	e1ab      	b.n	401a6e <_vfiprintf_r+0x752>
  401716:	9608      	str	r6, [sp, #32]
  401718:	f013 0220 	ands.w	r2, r3, #32
  40171c:	f040 838c 	bne.w	401e38 <_vfiprintf_r+0xb1c>
  401720:	f013 0110 	ands.w	r1, r3, #16
  401724:	f040 831a 	bne.w	401d5c <_vfiprintf_r+0xa40>
  401728:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  40172c:	f000 8316 	beq.w	401d5c <_vfiprintf_r+0xa40>
  401730:	9807      	ldr	r0, [sp, #28]
  401732:	460a      	mov	r2, r1
  401734:	4601      	mov	r1, r0
  401736:	3104      	adds	r1, #4
  401738:	8806      	ldrh	r6, [r0, #0]
  40173a:	9107      	str	r1, [sp, #28]
  40173c:	2700      	movs	r7, #0
  40173e:	e720      	b.n	401582 <_vfiprintf_r+0x266>
  401740:	9608      	str	r6, [sp, #32]
  401742:	f043 0310 	orr.w	r3, r3, #16
  401746:	e7e7      	b.n	401718 <_vfiprintf_r+0x3fc>
  401748:	9608      	str	r6, [sp, #32]
  40174a:	f043 0310 	orr.w	r3, r3, #16
  40174e:	e708      	b.n	401562 <_vfiprintf_r+0x246>
  401750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401754:	f898 2000 	ldrb.w	r2, [r8]
  401758:	e652      	b.n	401400 <_vfiprintf_r+0xe4>
  40175a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40175e:	2600      	movs	r6, #0
  401760:	f818 2b01 	ldrb.w	r2, [r8], #1
  401764:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  401768:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  40176c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  401770:	2909      	cmp	r1, #9
  401772:	d9f5      	bls.n	401760 <_vfiprintf_r+0x444>
  401774:	e646      	b.n	401404 <_vfiprintf_r+0xe8>
  401776:	9608      	str	r6, [sp, #32]
  401778:	2800      	cmp	r0, #0
  40177a:	f040 8408 	bne.w	401f8e <_vfiprintf_r+0xc72>
  40177e:	f043 0310 	orr.w	r3, r3, #16
  401782:	069e      	lsls	r6, r3, #26
  401784:	f100 834c 	bmi.w	401e20 <_vfiprintf_r+0xb04>
  401788:	06dd      	lsls	r5, r3, #27
  40178a:	f100 82f3 	bmi.w	401d74 <_vfiprintf_r+0xa58>
  40178e:	0658      	lsls	r0, r3, #25
  401790:	f140 82f0 	bpl.w	401d74 <_vfiprintf_r+0xa58>
  401794:	9d07      	ldr	r5, [sp, #28]
  401796:	f9b5 6000 	ldrsh.w	r6, [r5]
  40179a:	462a      	mov	r2, r5
  40179c:	17f7      	asrs	r7, r6, #31
  40179e:	3204      	adds	r2, #4
  4017a0:	4630      	mov	r0, r6
  4017a2:	4639      	mov	r1, r7
  4017a4:	9207      	str	r2, [sp, #28]
  4017a6:	2800      	cmp	r0, #0
  4017a8:	f171 0200 	sbcs.w	r2, r1, #0
  4017ac:	f2c0 835d 	blt.w	401e6a <_vfiprintf_r+0xb4e>
  4017b0:	1c61      	adds	r1, r4, #1
  4017b2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4017b6:	f04f 0201 	mov.w	r2, #1
  4017ba:	f47f aeea 	bne.w	401592 <_vfiprintf_r+0x276>
  4017be:	ea56 0107 	orrs.w	r1, r6, r7
  4017c2:	f000 824d 	beq.w	401c60 <_vfiprintf_r+0x944>
  4017c6:	9302      	str	r3, [sp, #8]
  4017c8:	2a01      	cmp	r2, #1
  4017ca:	f000 828c 	beq.w	401ce6 <_vfiprintf_r+0x9ca>
  4017ce:	2a02      	cmp	r2, #2
  4017d0:	f040 825c 	bne.w	401c8c <_vfiprintf_r+0x970>
  4017d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4017d6:	46cb      	mov	fp, r9
  4017d8:	0933      	lsrs	r3, r6, #4
  4017da:	f006 010f 	and.w	r1, r6, #15
  4017de:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4017e2:	093a      	lsrs	r2, r7, #4
  4017e4:	461e      	mov	r6, r3
  4017e6:	4617      	mov	r7, r2
  4017e8:	5c43      	ldrb	r3, [r0, r1]
  4017ea:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4017ee:	ea56 0307 	orrs.w	r3, r6, r7
  4017f2:	d1f1      	bne.n	4017d8 <_vfiprintf_r+0x4bc>
  4017f4:	eba9 030b 	sub.w	r3, r9, fp
  4017f8:	9305      	str	r3, [sp, #20]
  4017fa:	e6e1      	b.n	4015c0 <_vfiprintf_r+0x2a4>
  4017fc:	2800      	cmp	r0, #0
  4017fe:	f040 83c0 	bne.w	401f82 <_vfiprintf_r+0xc66>
  401802:	0699      	lsls	r1, r3, #26
  401804:	f100 8367 	bmi.w	401ed6 <_vfiprintf_r+0xbba>
  401808:	06da      	lsls	r2, r3, #27
  40180a:	f100 80f1 	bmi.w	4019f0 <_vfiprintf_r+0x6d4>
  40180e:	065b      	lsls	r3, r3, #25
  401810:	f140 80ee 	bpl.w	4019f0 <_vfiprintf_r+0x6d4>
  401814:	9a07      	ldr	r2, [sp, #28]
  401816:	6813      	ldr	r3, [r2, #0]
  401818:	3204      	adds	r2, #4
  40181a:	9207      	str	r2, [sp, #28]
  40181c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  401820:	801a      	strh	r2, [r3, #0]
  401822:	e5b8      	b.n	401396 <_vfiprintf_r+0x7a>
  401824:	9807      	ldr	r0, [sp, #28]
  401826:	4a3d      	ldr	r2, [pc, #244]	; (40191c <_vfiprintf_r+0x600>)
  401828:	9608      	str	r6, [sp, #32]
  40182a:	920b      	str	r2, [sp, #44]	; 0x2c
  40182c:	6806      	ldr	r6, [r0, #0]
  40182e:	2278      	movs	r2, #120	; 0x78
  401830:	2130      	movs	r1, #48	; 0x30
  401832:	3004      	adds	r0, #4
  401834:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  401838:	f043 0302 	orr.w	r3, r3, #2
  40183c:	9007      	str	r0, [sp, #28]
  40183e:	2700      	movs	r7, #0
  401840:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  401844:	2202      	movs	r2, #2
  401846:	e69c      	b.n	401582 <_vfiprintf_r+0x266>
  401848:	9608      	str	r6, [sp, #32]
  40184a:	2800      	cmp	r0, #0
  40184c:	d099      	beq.n	401782 <_vfiprintf_r+0x466>
  40184e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401852:	e796      	b.n	401782 <_vfiprintf_r+0x466>
  401854:	f898 2000 	ldrb.w	r2, [r8]
  401858:	2d00      	cmp	r5, #0
  40185a:	f47f add1 	bne.w	401400 <_vfiprintf_r+0xe4>
  40185e:	2001      	movs	r0, #1
  401860:	2520      	movs	r5, #32
  401862:	e5cd      	b.n	401400 <_vfiprintf_r+0xe4>
  401864:	f043 0301 	orr.w	r3, r3, #1
  401868:	f898 2000 	ldrb.w	r2, [r8]
  40186c:	e5c8      	b.n	401400 <_vfiprintf_r+0xe4>
  40186e:	9608      	str	r6, [sp, #32]
  401870:	2800      	cmp	r0, #0
  401872:	f040 8393 	bne.w	401f9c <_vfiprintf_r+0xc80>
  401876:	4929      	ldr	r1, [pc, #164]	; (40191c <_vfiprintf_r+0x600>)
  401878:	910b      	str	r1, [sp, #44]	; 0x2c
  40187a:	069f      	lsls	r7, r3, #26
  40187c:	f100 82e8 	bmi.w	401e50 <_vfiprintf_r+0xb34>
  401880:	9807      	ldr	r0, [sp, #28]
  401882:	06de      	lsls	r6, r3, #27
  401884:	4601      	mov	r1, r0
  401886:	f100 8270 	bmi.w	401d6a <_vfiprintf_r+0xa4e>
  40188a:	065d      	lsls	r5, r3, #25
  40188c:	f140 826d 	bpl.w	401d6a <_vfiprintf_r+0xa4e>
  401890:	3104      	adds	r1, #4
  401892:	8806      	ldrh	r6, [r0, #0]
  401894:	9107      	str	r1, [sp, #28]
  401896:	2700      	movs	r7, #0
  401898:	07d8      	lsls	r0, r3, #31
  40189a:	f140 8222 	bpl.w	401ce2 <_vfiprintf_r+0x9c6>
  40189e:	ea56 0107 	orrs.w	r1, r6, r7
  4018a2:	f000 821e 	beq.w	401ce2 <_vfiprintf_r+0x9c6>
  4018a6:	2130      	movs	r1, #48	; 0x30
  4018a8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4018ac:	f043 0302 	orr.w	r3, r3, #2
  4018b0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4018b4:	2202      	movs	r2, #2
  4018b6:	e664      	b.n	401582 <_vfiprintf_r+0x266>
  4018b8:	9608      	str	r6, [sp, #32]
  4018ba:	2800      	cmp	r0, #0
  4018bc:	f040 836b 	bne.w	401f96 <_vfiprintf_r+0xc7a>
  4018c0:	4917      	ldr	r1, [pc, #92]	; (401920 <_vfiprintf_r+0x604>)
  4018c2:	910b      	str	r1, [sp, #44]	; 0x2c
  4018c4:	e7d9      	b.n	40187a <_vfiprintf_r+0x55e>
  4018c6:	9907      	ldr	r1, [sp, #28]
  4018c8:	9608      	str	r6, [sp, #32]
  4018ca:	680a      	ldr	r2, [r1, #0]
  4018cc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4018d0:	f04f 0000 	mov.w	r0, #0
  4018d4:	460a      	mov	r2, r1
  4018d6:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  4018da:	3204      	adds	r2, #4
  4018dc:	2001      	movs	r0, #1
  4018de:	9001      	str	r0, [sp, #4]
  4018e0:	9207      	str	r2, [sp, #28]
  4018e2:	9005      	str	r0, [sp, #20]
  4018e4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4018e8:	9302      	str	r3, [sp, #8]
  4018ea:	2400      	movs	r4, #0
  4018ec:	e670      	b.n	4015d0 <_vfiprintf_r+0x2b4>
  4018ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4018f2:	f898 2000 	ldrb.w	r2, [r8]
  4018f6:	e583      	b.n	401400 <_vfiprintf_r+0xe4>
  4018f8:	f898 2000 	ldrb.w	r2, [r8]
  4018fc:	2a6c      	cmp	r2, #108	; 0x6c
  4018fe:	bf03      	ittte	eq
  401900:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  401904:	f043 0320 	orreq.w	r3, r3, #32
  401908:	f108 0801 	addeq.w	r8, r8, #1
  40190c:	f043 0310 	orrne.w	r3, r3, #16
  401910:	e576      	b.n	401400 <_vfiprintf_r+0xe4>
  401912:	bf00      	nop
  401914:	00403ed8 	.word	0x00403ed8
  401918:	00403ee8 	.word	0x00403ee8
  40191c:	00403ebc 	.word	0x00403ebc
  401920:	00403ea8 	.word	0x00403ea8
  401924:	9907      	ldr	r1, [sp, #28]
  401926:	680e      	ldr	r6, [r1, #0]
  401928:	460a      	mov	r2, r1
  40192a:	2e00      	cmp	r6, #0
  40192c:	f102 0204 	add.w	r2, r2, #4
  401930:	f6ff ae0f 	blt.w	401552 <_vfiprintf_r+0x236>
  401934:	9207      	str	r2, [sp, #28]
  401936:	f898 2000 	ldrb.w	r2, [r8]
  40193a:	e561      	b.n	401400 <_vfiprintf_r+0xe4>
  40193c:	f898 2000 	ldrb.w	r2, [r8]
  401940:	2001      	movs	r0, #1
  401942:	252b      	movs	r5, #43	; 0x2b
  401944:	e55c      	b.n	401400 <_vfiprintf_r+0xe4>
  401946:	9907      	ldr	r1, [sp, #28]
  401948:	9608      	str	r6, [sp, #32]
  40194a:	f8d1 b000 	ldr.w	fp, [r1]
  40194e:	f04f 0200 	mov.w	r2, #0
  401952:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  401956:	1d0e      	adds	r6, r1, #4
  401958:	f1bb 0f00 	cmp.w	fp, #0
  40195c:	f000 82e5 	beq.w	401f2a <_vfiprintf_r+0xc0e>
  401960:	1c67      	adds	r7, r4, #1
  401962:	f000 82c4 	beq.w	401eee <_vfiprintf_r+0xbd2>
  401966:	4622      	mov	r2, r4
  401968:	2100      	movs	r1, #0
  40196a:	4658      	mov	r0, fp
  40196c:	9301      	str	r3, [sp, #4]
  40196e:	f001 fbd7 	bl	403120 <memchr>
  401972:	9b01      	ldr	r3, [sp, #4]
  401974:	2800      	cmp	r0, #0
  401976:	f000 82e5 	beq.w	401f44 <_vfiprintf_r+0xc28>
  40197a:	eba0 020b 	sub.w	r2, r0, fp
  40197e:	9205      	str	r2, [sp, #20]
  401980:	9607      	str	r6, [sp, #28]
  401982:	9302      	str	r3, [sp, #8]
  401984:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401988:	2400      	movs	r4, #0
  40198a:	e619      	b.n	4015c0 <_vfiprintf_r+0x2a4>
  40198c:	f898 2000 	ldrb.w	r2, [r8]
  401990:	2a2a      	cmp	r2, #42	; 0x2a
  401992:	f108 0701 	add.w	r7, r8, #1
  401996:	f000 82e9 	beq.w	401f6c <_vfiprintf_r+0xc50>
  40199a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40199e:	2909      	cmp	r1, #9
  4019a0:	46b8      	mov	r8, r7
  4019a2:	f04f 0400 	mov.w	r4, #0
  4019a6:	f63f ad2d 	bhi.w	401404 <_vfiprintf_r+0xe8>
  4019aa:	f818 2b01 	ldrb.w	r2, [r8], #1
  4019ae:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4019b2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4019b6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4019ba:	2909      	cmp	r1, #9
  4019bc:	d9f5      	bls.n	4019aa <_vfiprintf_r+0x68e>
  4019be:	e521      	b.n	401404 <_vfiprintf_r+0xe8>
  4019c0:	f043 0320 	orr.w	r3, r3, #32
  4019c4:	f898 2000 	ldrb.w	r2, [r8]
  4019c8:	e51a      	b.n	401400 <_vfiprintf_r+0xe4>
  4019ca:	9608      	str	r6, [sp, #32]
  4019cc:	2800      	cmp	r0, #0
  4019ce:	f040 82db 	bne.w	401f88 <_vfiprintf_r+0xc6c>
  4019d2:	2a00      	cmp	r2, #0
  4019d4:	f000 80e7 	beq.w	401ba6 <_vfiprintf_r+0x88a>
  4019d8:	2101      	movs	r1, #1
  4019da:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4019de:	f04f 0200 	mov.w	r2, #0
  4019e2:	9101      	str	r1, [sp, #4]
  4019e4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4019e8:	9105      	str	r1, [sp, #20]
  4019ea:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4019ee:	e77b      	b.n	4018e8 <_vfiprintf_r+0x5cc>
  4019f0:	9a07      	ldr	r2, [sp, #28]
  4019f2:	6813      	ldr	r3, [r2, #0]
  4019f4:	3204      	adds	r2, #4
  4019f6:	9207      	str	r2, [sp, #28]
  4019f8:	9a03      	ldr	r2, [sp, #12]
  4019fa:	601a      	str	r2, [r3, #0]
  4019fc:	e4cb      	b.n	401396 <_vfiprintf_r+0x7a>
  4019fe:	aa0f      	add	r2, sp, #60	; 0x3c
  401a00:	9904      	ldr	r1, [sp, #16]
  401a02:	4620      	mov	r0, r4
  401a04:	f7ff fc4a 	bl	40129c <__sprint_r.part.0>
  401a08:	2800      	cmp	r0, #0
  401a0a:	f040 8139 	bne.w	401c80 <_vfiprintf_r+0x964>
  401a0e:	9910      	ldr	r1, [sp, #64]	; 0x40
  401a10:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401a12:	f101 0c01 	add.w	ip, r1, #1
  401a16:	46ce      	mov	lr, r9
  401a18:	e5ff      	b.n	40161a <_vfiprintf_r+0x2fe>
  401a1a:	9910      	ldr	r1, [sp, #64]	; 0x40
  401a1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401a1e:	1c48      	adds	r0, r1, #1
  401a20:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401a24:	2d00      	cmp	r5, #0
  401a26:	f43f ae22 	beq.w	40166e <_vfiprintf_r+0x352>
  401a2a:	3201      	adds	r2, #1
  401a2c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  401a30:	2101      	movs	r1, #1
  401a32:	2807      	cmp	r0, #7
  401a34:	9211      	str	r2, [sp, #68]	; 0x44
  401a36:	9010      	str	r0, [sp, #64]	; 0x40
  401a38:	f8ca 5000 	str.w	r5, [sl]
  401a3c:	f8ca 1004 	str.w	r1, [sl, #4]
  401a40:	f340 8108 	ble.w	401c54 <_vfiprintf_r+0x938>
  401a44:	2a00      	cmp	r2, #0
  401a46:	f040 81bc 	bne.w	401dc2 <_vfiprintf_r+0xaa6>
  401a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401a4c:	2b00      	cmp	r3, #0
  401a4e:	f43f ae1f 	beq.w	401690 <_vfiprintf_r+0x374>
  401a52:	ab0e      	add	r3, sp, #56	; 0x38
  401a54:	2202      	movs	r2, #2
  401a56:	4608      	mov	r0, r1
  401a58:	931c      	str	r3, [sp, #112]	; 0x70
  401a5a:	921d      	str	r2, [sp, #116]	; 0x74
  401a5c:	46ca      	mov	sl, r9
  401a5e:	4601      	mov	r1, r0
  401a60:	f10a 0a08 	add.w	sl, sl, #8
  401a64:	3001      	adds	r0, #1
  401a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401a68:	2b80      	cmp	r3, #128	; 0x80
  401a6a:	f43f ae19 	beq.w	4016a0 <_vfiprintf_r+0x384>
  401a6e:	9b05      	ldr	r3, [sp, #20]
  401a70:	1ae4      	subs	r4, r4, r3
  401a72:	2c00      	cmp	r4, #0
  401a74:	dd2e      	ble.n	401ad4 <_vfiprintf_r+0x7b8>
  401a76:	2c10      	cmp	r4, #16
  401a78:	4db3      	ldr	r5, [pc, #716]	; (401d48 <_vfiprintf_r+0xa2c>)
  401a7a:	dd1e      	ble.n	401aba <_vfiprintf_r+0x79e>
  401a7c:	46d6      	mov	lr, sl
  401a7e:	2610      	movs	r6, #16
  401a80:	9f06      	ldr	r7, [sp, #24]
  401a82:	f8dd a010 	ldr.w	sl, [sp, #16]
  401a86:	e006      	b.n	401a96 <_vfiprintf_r+0x77a>
  401a88:	1c88      	adds	r0, r1, #2
  401a8a:	f10e 0e08 	add.w	lr, lr, #8
  401a8e:	4619      	mov	r1, r3
  401a90:	3c10      	subs	r4, #16
  401a92:	2c10      	cmp	r4, #16
  401a94:	dd10      	ble.n	401ab8 <_vfiprintf_r+0x79c>
  401a96:	1c4b      	adds	r3, r1, #1
  401a98:	3210      	adds	r2, #16
  401a9a:	2b07      	cmp	r3, #7
  401a9c:	9211      	str	r2, [sp, #68]	; 0x44
  401a9e:	e88e 0060 	stmia.w	lr, {r5, r6}
  401aa2:	9310      	str	r3, [sp, #64]	; 0x40
  401aa4:	ddf0      	ble.n	401a88 <_vfiprintf_r+0x76c>
  401aa6:	2a00      	cmp	r2, #0
  401aa8:	d165      	bne.n	401b76 <_vfiprintf_r+0x85a>
  401aaa:	3c10      	subs	r4, #16
  401aac:	2c10      	cmp	r4, #16
  401aae:	f04f 0001 	mov.w	r0, #1
  401ab2:	4611      	mov	r1, r2
  401ab4:	46ce      	mov	lr, r9
  401ab6:	dcee      	bgt.n	401a96 <_vfiprintf_r+0x77a>
  401ab8:	46f2      	mov	sl, lr
  401aba:	4422      	add	r2, r4
  401abc:	2807      	cmp	r0, #7
  401abe:	9211      	str	r2, [sp, #68]	; 0x44
  401ac0:	f8ca 5000 	str.w	r5, [sl]
  401ac4:	f8ca 4004 	str.w	r4, [sl, #4]
  401ac8:	9010      	str	r0, [sp, #64]	; 0x40
  401aca:	f300 8085 	bgt.w	401bd8 <_vfiprintf_r+0x8bc>
  401ace:	f10a 0a08 	add.w	sl, sl, #8
  401ad2:	3001      	adds	r0, #1
  401ad4:	9905      	ldr	r1, [sp, #20]
  401ad6:	f8ca b000 	str.w	fp, [sl]
  401ada:	440a      	add	r2, r1
  401adc:	2807      	cmp	r0, #7
  401ade:	9211      	str	r2, [sp, #68]	; 0x44
  401ae0:	f8ca 1004 	str.w	r1, [sl, #4]
  401ae4:	9010      	str	r0, [sp, #64]	; 0x40
  401ae6:	f340 8082 	ble.w	401bee <_vfiprintf_r+0x8d2>
  401aea:	2a00      	cmp	r2, #0
  401aec:	f040 8118 	bne.w	401d20 <_vfiprintf_r+0xa04>
  401af0:	9b02      	ldr	r3, [sp, #8]
  401af2:	9210      	str	r2, [sp, #64]	; 0x40
  401af4:	0758      	lsls	r0, r3, #29
  401af6:	d535      	bpl.n	401b64 <_vfiprintf_r+0x848>
  401af8:	9b08      	ldr	r3, [sp, #32]
  401afa:	9901      	ldr	r1, [sp, #4]
  401afc:	1a5c      	subs	r4, r3, r1
  401afe:	2c00      	cmp	r4, #0
  401b00:	f340 80e7 	ble.w	401cd2 <_vfiprintf_r+0x9b6>
  401b04:	46ca      	mov	sl, r9
  401b06:	2c10      	cmp	r4, #16
  401b08:	f340 8218 	ble.w	401f3c <_vfiprintf_r+0xc20>
  401b0c:	9910      	ldr	r1, [sp, #64]	; 0x40
  401b0e:	4e8f      	ldr	r6, [pc, #572]	; (401d4c <_vfiprintf_r+0xa30>)
  401b10:	9f06      	ldr	r7, [sp, #24]
  401b12:	f8dd b010 	ldr.w	fp, [sp, #16]
  401b16:	2510      	movs	r5, #16
  401b18:	e006      	b.n	401b28 <_vfiprintf_r+0x80c>
  401b1a:	1c88      	adds	r0, r1, #2
  401b1c:	f10a 0a08 	add.w	sl, sl, #8
  401b20:	4619      	mov	r1, r3
  401b22:	3c10      	subs	r4, #16
  401b24:	2c10      	cmp	r4, #16
  401b26:	dd11      	ble.n	401b4c <_vfiprintf_r+0x830>
  401b28:	1c4b      	adds	r3, r1, #1
  401b2a:	3210      	adds	r2, #16
  401b2c:	2b07      	cmp	r3, #7
  401b2e:	9211      	str	r2, [sp, #68]	; 0x44
  401b30:	f8ca 6000 	str.w	r6, [sl]
  401b34:	f8ca 5004 	str.w	r5, [sl, #4]
  401b38:	9310      	str	r3, [sp, #64]	; 0x40
  401b3a:	ddee      	ble.n	401b1a <_vfiprintf_r+0x7fe>
  401b3c:	bb42      	cbnz	r2, 401b90 <_vfiprintf_r+0x874>
  401b3e:	3c10      	subs	r4, #16
  401b40:	2c10      	cmp	r4, #16
  401b42:	f04f 0001 	mov.w	r0, #1
  401b46:	4611      	mov	r1, r2
  401b48:	46ca      	mov	sl, r9
  401b4a:	dced      	bgt.n	401b28 <_vfiprintf_r+0x80c>
  401b4c:	4422      	add	r2, r4
  401b4e:	2807      	cmp	r0, #7
  401b50:	9211      	str	r2, [sp, #68]	; 0x44
  401b52:	f8ca 6000 	str.w	r6, [sl]
  401b56:	f8ca 4004 	str.w	r4, [sl, #4]
  401b5a:	9010      	str	r0, [sp, #64]	; 0x40
  401b5c:	dd51      	ble.n	401c02 <_vfiprintf_r+0x8e6>
  401b5e:	2a00      	cmp	r2, #0
  401b60:	f040 819b 	bne.w	401e9a <_vfiprintf_r+0xb7e>
  401b64:	9b03      	ldr	r3, [sp, #12]
  401b66:	9a08      	ldr	r2, [sp, #32]
  401b68:	9901      	ldr	r1, [sp, #4]
  401b6a:	428a      	cmp	r2, r1
  401b6c:	bfac      	ite	ge
  401b6e:	189b      	addge	r3, r3, r2
  401b70:	185b      	addlt	r3, r3, r1
  401b72:	9303      	str	r3, [sp, #12]
  401b74:	e04e      	b.n	401c14 <_vfiprintf_r+0x8f8>
  401b76:	aa0f      	add	r2, sp, #60	; 0x3c
  401b78:	4651      	mov	r1, sl
  401b7a:	4638      	mov	r0, r7
  401b7c:	f7ff fb8e 	bl	40129c <__sprint_r.part.0>
  401b80:	2800      	cmp	r0, #0
  401b82:	f040 813f 	bne.w	401e04 <_vfiprintf_r+0xae8>
  401b86:	9910      	ldr	r1, [sp, #64]	; 0x40
  401b88:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401b8a:	1c48      	adds	r0, r1, #1
  401b8c:	46ce      	mov	lr, r9
  401b8e:	e77f      	b.n	401a90 <_vfiprintf_r+0x774>
  401b90:	aa0f      	add	r2, sp, #60	; 0x3c
  401b92:	4659      	mov	r1, fp
  401b94:	4638      	mov	r0, r7
  401b96:	f7ff fb81 	bl	40129c <__sprint_r.part.0>
  401b9a:	b960      	cbnz	r0, 401bb6 <_vfiprintf_r+0x89a>
  401b9c:	9910      	ldr	r1, [sp, #64]	; 0x40
  401b9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401ba0:	1c48      	adds	r0, r1, #1
  401ba2:	46ca      	mov	sl, r9
  401ba4:	e7bd      	b.n	401b22 <_vfiprintf_r+0x806>
  401ba6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401ba8:	f8dd b010 	ldr.w	fp, [sp, #16]
  401bac:	2b00      	cmp	r3, #0
  401bae:	f040 81d4 	bne.w	401f5a <_vfiprintf_r+0xc3e>
  401bb2:	2300      	movs	r3, #0
  401bb4:	9310      	str	r3, [sp, #64]	; 0x40
  401bb6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  401bba:	f013 0f01 	tst.w	r3, #1
  401bbe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  401bc2:	d102      	bne.n	401bca <_vfiprintf_r+0x8ae>
  401bc4:	059a      	lsls	r2, r3, #22
  401bc6:	f140 80de 	bpl.w	401d86 <_vfiprintf_r+0xa6a>
  401bca:	065b      	lsls	r3, r3, #25
  401bcc:	f53f acb2 	bmi.w	401534 <_vfiprintf_r+0x218>
  401bd0:	9803      	ldr	r0, [sp, #12]
  401bd2:	b02d      	add	sp, #180	; 0xb4
  401bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401bd8:	2a00      	cmp	r2, #0
  401bda:	f040 8106 	bne.w	401dea <_vfiprintf_r+0xace>
  401bde:	9a05      	ldr	r2, [sp, #20]
  401be0:	921d      	str	r2, [sp, #116]	; 0x74
  401be2:	2301      	movs	r3, #1
  401be4:	9211      	str	r2, [sp, #68]	; 0x44
  401be6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  401bea:	9310      	str	r3, [sp, #64]	; 0x40
  401bec:	46ca      	mov	sl, r9
  401bee:	f10a 0a08 	add.w	sl, sl, #8
  401bf2:	9b02      	ldr	r3, [sp, #8]
  401bf4:	0759      	lsls	r1, r3, #29
  401bf6:	d504      	bpl.n	401c02 <_vfiprintf_r+0x8e6>
  401bf8:	9b08      	ldr	r3, [sp, #32]
  401bfa:	9901      	ldr	r1, [sp, #4]
  401bfc:	1a5c      	subs	r4, r3, r1
  401bfe:	2c00      	cmp	r4, #0
  401c00:	dc81      	bgt.n	401b06 <_vfiprintf_r+0x7ea>
  401c02:	9b03      	ldr	r3, [sp, #12]
  401c04:	9908      	ldr	r1, [sp, #32]
  401c06:	9801      	ldr	r0, [sp, #4]
  401c08:	4281      	cmp	r1, r0
  401c0a:	bfac      	ite	ge
  401c0c:	185b      	addge	r3, r3, r1
  401c0e:	181b      	addlt	r3, r3, r0
  401c10:	9303      	str	r3, [sp, #12]
  401c12:	bb72      	cbnz	r2, 401c72 <_vfiprintf_r+0x956>
  401c14:	2300      	movs	r3, #0
  401c16:	9310      	str	r3, [sp, #64]	; 0x40
  401c18:	46ca      	mov	sl, r9
  401c1a:	f7ff bbbc 	b.w	401396 <_vfiprintf_r+0x7a>
  401c1e:	aa0f      	add	r2, sp, #60	; 0x3c
  401c20:	9904      	ldr	r1, [sp, #16]
  401c22:	4620      	mov	r0, r4
  401c24:	f7ff fb3a 	bl	40129c <__sprint_r.part.0>
  401c28:	bb50      	cbnz	r0, 401c80 <_vfiprintf_r+0x964>
  401c2a:	9910      	ldr	r1, [sp, #64]	; 0x40
  401c2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401c2e:	f101 0e01 	add.w	lr, r1, #1
  401c32:	46cc      	mov	ip, r9
  401c34:	e548      	b.n	4016c8 <_vfiprintf_r+0x3ac>
  401c36:	2a00      	cmp	r2, #0
  401c38:	f040 8140 	bne.w	401ebc <_vfiprintf_r+0xba0>
  401c3c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  401c40:	2900      	cmp	r1, #0
  401c42:	f000 811b 	beq.w	401e7c <_vfiprintf_r+0xb60>
  401c46:	2201      	movs	r2, #1
  401c48:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  401c4c:	4610      	mov	r0, r2
  401c4e:	921d      	str	r2, [sp, #116]	; 0x74
  401c50:	911c      	str	r1, [sp, #112]	; 0x70
  401c52:	46ca      	mov	sl, r9
  401c54:	4601      	mov	r1, r0
  401c56:	f10a 0a08 	add.w	sl, sl, #8
  401c5a:	3001      	adds	r0, #1
  401c5c:	e507      	b.n	40166e <_vfiprintf_r+0x352>
  401c5e:	9b02      	ldr	r3, [sp, #8]
  401c60:	2a01      	cmp	r2, #1
  401c62:	f000 8098 	beq.w	401d96 <_vfiprintf_r+0xa7a>
  401c66:	2a02      	cmp	r2, #2
  401c68:	d10d      	bne.n	401c86 <_vfiprintf_r+0x96a>
  401c6a:	9302      	str	r3, [sp, #8]
  401c6c:	2600      	movs	r6, #0
  401c6e:	2700      	movs	r7, #0
  401c70:	e5b0      	b.n	4017d4 <_vfiprintf_r+0x4b8>
  401c72:	aa0f      	add	r2, sp, #60	; 0x3c
  401c74:	9904      	ldr	r1, [sp, #16]
  401c76:	9806      	ldr	r0, [sp, #24]
  401c78:	f7ff fb10 	bl	40129c <__sprint_r.part.0>
  401c7c:	2800      	cmp	r0, #0
  401c7e:	d0c9      	beq.n	401c14 <_vfiprintf_r+0x8f8>
  401c80:	f8dd b010 	ldr.w	fp, [sp, #16]
  401c84:	e797      	b.n	401bb6 <_vfiprintf_r+0x89a>
  401c86:	9302      	str	r3, [sp, #8]
  401c88:	2600      	movs	r6, #0
  401c8a:	2700      	movs	r7, #0
  401c8c:	4649      	mov	r1, r9
  401c8e:	e000      	b.n	401c92 <_vfiprintf_r+0x976>
  401c90:	4659      	mov	r1, fp
  401c92:	08f2      	lsrs	r2, r6, #3
  401c94:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  401c98:	08f8      	lsrs	r0, r7, #3
  401c9a:	f006 0307 	and.w	r3, r6, #7
  401c9e:	4607      	mov	r7, r0
  401ca0:	4616      	mov	r6, r2
  401ca2:	3330      	adds	r3, #48	; 0x30
  401ca4:	ea56 0207 	orrs.w	r2, r6, r7
  401ca8:	f801 3c01 	strb.w	r3, [r1, #-1]
  401cac:	f101 3bff 	add.w	fp, r1, #4294967295
  401cb0:	d1ee      	bne.n	401c90 <_vfiprintf_r+0x974>
  401cb2:	9a02      	ldr	r2, [sp, #8]
  401cb4:	07d6      	lsls	r6, r2, #31
  401cb6:	f57f ad9d 	bpl.w	4017f4 <_vfiprintf_r+0x4d8>
  401cba:	2b30      	cmp	r3, #48	; 0x30
  401cbc:	f43f ad9a 	beq.w	4017f4 <_vfiprintf_r+0x4d8>
  401cc0:	3902      	subs	r1, #2
  401cc2:	2330      	movs	r3, #48	; 0x30
  401cc4:	f80b 3c01 	strb.w	r3, [fp, #-1]
  401cc8:	eba9 0301 	sub.w	r3, r9, r1
  401ccc:	9305      	str	r3, [sp, #20]
  401cce:	468b      	mov	fp, r1
  401cd0:	e476      	b.n	4015c0 <_vfiprintf_r+0x2a4>
  401cd2:	9b03      	ldr	r3, [sp, #12]
  401cd4:	9a08      	ldr	r2, [sp, #32]
  401cd6:	428a      	cmp	r2, r1
  401cd8:	bfac      	ite	ge
  401cda:	189b      	addge	r3, r3, r2
  401cdc:	185b      	addlt	r3, r3, r1
  401cde:	9303      	str	r3, [sp, #12]
  401ce0:	e798      	b.n	401c14 <_vfiprintf_r+0x8f8>
  401ce2:	2202      	movs	r2, #2
  401ce4:	e44d      	b.n	401582 <_vfiprintf_r+0x266>
  401ce6:	2f00      	cmp	r7, #0
  401ce8:	bf08      	it	eq
  401cea:	2e0a      	cmpeq	r6, #10
  401cec:	d352      	bcc.n	401d94 <_vfiprintf_r+0xa78>
  401cee:	46cb      	mov	fp, r9
  401cf0:	4630      	mov	r0, r6
  401cf2:	4639      	mov	r1, r7
  401cf4:	220a      	movs	r2, #10
  401cf6:	2300      	movs	r3, #0
  401cf8:	f001 ff36 	bl	403b68 <__aeabi_uldivmod>
  401cfc:	3230      	adds	r2, #48	; 0x30
  401cfe:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  401d02:	4630      	mov	r0, r6
  401d04:	4639      	mov	r1, r7
  401d06:	2300      	movs	r3, #0
  401d08:	220a      	movs	r2, #10
  401d0a:	f001 ff2d 	bl	403b68 <__aeabi_uldivmod>
  401d0e:	4606      	mov	r6, r0
  401d10:	460f      	mov	r7, r1
  401d12:	ea56 0307 	orrs.w	r3, r6, r7
  401d16:	d1eb      	bne.n	401cf0 <_vfiprintf_r+0x9d4>
  401d18:	e56c      	b.n	4017f4 <_vfiprintf_r+0x4d8>
  401d1a:	9405      	str	r4, [sp, #20]
  401d1c:	46cb      	mov	fp, r9
  401d1e:	e44f      	b.n	4015c0 <_vfiprintf_r+0x2a4>
  401d20:	aa0f      	add	r2, sp, #60	; 0x3c
  401d22:	9904      	ldr	r1, [sp, #16]
  401d24:	9806      	ldr	r0, [sp, #24]
  401d26:	f7ff fab9 	bl	40129c <__sprint_r.part.0>
  401d2a:	2800      	cmp	r0, #0
  401d2c:	d1a8      	bne.n	401c80 <_vfiprintf_r+0x964>
  401d2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401d30:	46ca      	mov	sl, r9
  401d32:	e75e      	b.n	401bf2 <_vfiprintf_r+0x8d6>
  401d34:	aa0f      	add	r2, sp, #60	; 0x3c
  401d36:	9904      	ldr	r1, [sp, #16]
  401d38:	9806      	ldr	r0, [sp, #24]
  401d3a:	f7ff faaf 	bl	40129c <__sprint_r.part.0>
  401d3e:	2800      	cmp	r0, #0
  401d40:	d19e      	bne.n	401c80 <_vfiprintf_r+0x964>
  401d42:	46ca      	mov	sl, r9
  401d44:	f7ff bbc0 	b.w	4014c8 <_vfiprintf_r+0x1ac>
  401d48:	00403ee8 	.word	0x00403ee8
  401d4c:	00403ed8 	.word	0x00403ed8
  401d50:	3104      	adds	r1, #4
  401d52:	6816      	ldr	r6, [r2, #0]
  401d54:	9107      	str	r1, [sp, #28]
  401d56:	2201      	movs	r2, #1
  401d58:	2700      	movs	r7, #0
  401d5a:	e412      	b.n	401582 <_vfiprintf_r+0x266>
  401d5c:	9807      	ldr	r0, [sp, #28]
  401d5e:	4601      	mov	r1, r0
  401d60:	3104      	adds	r1, #4
  401d62:	6806      	ldr	r6, [r0, #0]
  401d64:	9107      	str	r1, [sp, #28]
  401d66:	2700      	movs	r7, #0
  401d68:	e40b      	b.n	401582 <_vfiprintf_r+0x266>
  401d6a:	680e      	ldr	r6, [r1, #0]
  401d6c:	3104      	adds	r1, #4
  401d6e:	9107      	str	r1, [sp, #28]
  401d70:	2700      	movs	r7, #0
  401d72:	e591      	b.n	401898 <_vfiprintf_r+0x57c>
  401d74:	9907      	ldr	r1, [sp, #28]
  401d76:	680e      	ldr	r6, [r1, #0]
  401d78:	460a      	mov	r2, r1
  401d7a:	17f7      	asrs	r7, r6, #31
  401d7c:	3204      	adds	r2, #4
  401d7e:	9207      	str	r2, [sp, #28]
  401d80:	4630      	mov	r0, r6
  401d82:	4639      	mov	r1, r7
  401d84:	e50f      	b.n	4017a6 <_vfiprintf_r+0x48a>
  401d86:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401d8a:	f000 fe7f 	bl	402a8c <__retarget_lock_release_recursive>
  401d8e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  401d92:	e71a      	b.n	401bca <_vfiprintf_r+0x8ae>
  401d94:	9b02      	ldr	r3, [sp, #8]
  401d96:	9302      	str	r3, [sp, #8]
  401d98:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  401d9c:	3630      	adds	r6, #48	; 0x30
  401d9e:	2301      	movs	r3, #1
  401da0:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  401da4:	9305      	str	r3, [sp, #20]
  401da6:	e40b      	b.n	4015c0 <_vfiprintf_r+0x2a4>
  401da8:	aa0f      	add	r2, sp, #60	; 0x3c
  401daa:	9904      	ldr	r1, [sp, #16]
  401dac:	9806      	ldr	r0, [sp, #24]
  401dae:	f7ff fa75 	bl	40129c <__sprint_r.part.0>
  401db2:	2800      	cmp	r0, #0
  401db4:	f47f af64 	bne.w	401c80 <_vfiprintf_r+0x964>
  401db8:	9910      	ldr	r1, [sp, #64]	; 0x40
  401dba:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401dbc:	1c48      	adds	r0, r1, #1
  401dbe:	46ca      	mov	sl, r9
  401dc0:	e651      	b.n	401a66 <_vfiprintf_r+0x74a>
  401dc2:	aa0f      	add	r2, sp, #60	; 0x3c
  401dc4:	9904      	ldr	r1, [sp, #16]
  401dc6:	9806      	ldr	r0, [sp, #24]
  401dc8:	f7ff fa68 	bl	40129c <__sprint_r.part.0>
  401dcc:	2800      	cmp	r0, #0
  401dce:	f47f af57 	bne.w	401c80 <_vfiprintf_r+0x964>
  401dd2:	9910      	ldr	r1, [sp, #64]	; 0x40
  401dd4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401dd6:	1c48      	adds	r0, r1, #1
  401dd8:	46ca      	mov	sl, r9
  401dda:	e448      	b.n	40166e <_vfiprintf_r+0x352>
  401ddc:	2a00      	cmp	r2, #0
  401dde:	f040 8091 	bne.w	401f04 <_vfiprintf_r+0xbe8>
  401de2:	2001      	movs	r0, #1
  401de4:	4611      	mov	r1, r2
  401de6:	46ca      	mov	sl, r9
  401de8:	e641      	b.n	401a6e <_vfiprintf_r+0x752>
  401dea:	aa0f      	add	r2, sp, #60	; 0x3c
  401dec:	9904      	ldr	r1, [sp, #16]
  401dee:	9806      	ldr	r0, [sp, #24]
  401df0:	f7ff fa54 	bl	40129c <__sprint_r.part.0>
  401df4:	2800      	cmp	r0, #0
  401df6:	f47f af43 	bne.w	401c80 <_vfiprintf_r+0x964>
  401dfa:	9810      	ldr	r0, [sp, #64]	; 0x40
  401dfc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401dfe:	3001      	adds	r0, #1
  401e00:	46ca      	mov	sl, r9
  401e02:	e667      	b.n	401ad4 <_vfiprintf_r+0x7b8>
  401e04:	46d3      	mov	fp, sl
  401e06:	e6d6      	b.n	401bb6 <_vfiprintf_r+0x89a>
  401e08:	9e07      	ldr	r6, [sp, #28]
  401e0a:	3607      	adds	r6, #7
  401e0c:	f026 0207 	bic.w	r2, r6, #7
  401e10:	f102 0108 	add.w	r1, r2, #8
  401e14:	e9d2 6700 	ldrd	r6, r7, [r2]
  401e18:	9107      	str	r1, [sp, #28]
  401e1a:	2201      	movs	r2, #1
  401e1c:	f7ff bbb1 	b.w	401582 <_vfiprintf_r+0x266>
  401e20:	9e07      	ldr	r6, [sp, #28]
  401e22:	3607      	adds	r6, #7
  401e24:	f026 0607 	bic.w	r6, r6, #7
  401e28:	e9d6 0100 	ldrd	r0, r1, [r6]
  401e2c:	f106 0208 	add.w	r2, r6, #8
  401e30:	9207      	str	r2, [sp, #28]
  401e32:	4606      	mov	r6, r0
  401e34:	460f      	mov	r7, r1
  401e36:	e4b6      	b.n	4017a6 <_vfiprintf_r+0x48a>
  401e38:	9e07      	ldr	r6, [sp, #28]
  401e3a:	3607      	adds	r6, #7
  401e3c:	f026 0207 	bic.w	r2, r6, #7
  401e40:	f102 0108 	add.w	r1, r2, #8
  401e44:	e9d2 6700 	ldrd	r6, r7, [r2]
  401e48:	9107      	str	r1, [sp, #28]
  401e4a:	2200      	movs	r2, #0
  401e4c:	f7ff bb99 	b.w	401582 <_vfiprintf_r+0x266>
  401e50:	9e07      	ldr	r6, [sp, #28]
  401e52:	3607      	adds	r6, #7
  401e54:	f026 0107 	bic.w	r1, r6, #7
  401e58:	f101 0008 	add.w	r0, r1, #8
  401e5c:	9007      	str	r0, [sp, #28]
  401e5e:	e9d1 6700 	ldrd	r6, r7, [r1]
  401e62:	e519      	b.n	401898 <_vfiprintf_r+0x57c>
  401e64:	46cb      	mov	fp, r9
  401e66:	f7ff bbab 	b.w	4015c0 <_vfiprintf_r+0x2a4>
  401e6a:	252d      	movs	r5, #45	; 0x2d
  401e6c:	4276      	negs	r6, r6
  401e6e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  401e72:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401e76:	2201      	movs	r2, #1
  401e78:	f7ff bb88 	b.w	40158c <_vfiprintf_r+0x270>
  401e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401e7e:	b9b3      	cbnz	r3, 401eae <_vfiprintf_r+0xb92>
  401e80:	4611      	mov	r1, r2
  401e82:	2001      	movs	r0, #1
  401e84:	46ca      	mov	sl, r9
  401e86:	e5f2      	b.n	401a6e <_vfiprintf_r+0x752>
  401e88:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  401e8c:	f000 fdfe 	bl	402a8c <__retarget_lock_release_recursive>
  401e90:	f04f 33ff 	mov.w	r3, #4294967295
  401e94:	9303      	str	r3, [sp, #12]
  401e96:	f7ff bb50 	b.w	40153a <_vfiprintf_r+0x21e>
  401e9a:	aa0f      	add	r2, sp, #60	; 0x3c
  401e9c:	9904      	ldr	r1, [sp, #16]
  401e9e:	9806      	ldr	r0, [sp, #24]
  401ea0:	f7ff f9fc 	bl	40129c <__sprint_r.part.0>
  401ea4:	2800      	cmp	r0, #0
  401ea6:	f47f aeeb 	bne.w	401c80 <_vfiprintf_r+0x964>
  401eaa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401eac:	e6a9      	b.n	401c02 <_vfiprintf_r+0x8e6>
  401eae:	ab0e      	add	r3, sp, #56	; 0x38
  401eb0:	2202      	movs	r2, #2
  401eb2:	931c      	str	r3, [sp, #112]	; 0x70
  401eb4:	921d      	str	r2, [sp, #116]	; 0x74
  401eb6:	2001      	movs	r0, #1
  401eb8:	46ca      	mov	sl, r9
  401eba:	e5d0      	b.n	401a5e <_vfiprintf_r+0x742>
  401ebc:	aa0f      	add	r2, sp, #60	; 0x3c
  401ebe:	9904      	ldr	r1, [sp, #16]
  401ec0:	9806      	ldr	r0, [sp, #24]
  401ec2:	f7ff f9eb 	bl	40129c <__sprint_r.part.0>
  401ec6:	2800      	cmp	r0, #0
  401ec8:	f47f aeda 	bne.w	401c80 <_vfiprintf_r+0x964>
  401ecc:	9910      	ldr	r1, [sp, #64]	; 0x40
  401ece:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401ed0:	1c48      	adds	r0, r1, #1
  401ed2:	46ca      	mov	sl, r9
  401ed4:	e5a4      	b.n	401a20 <_vfiprintf_r+0x704>
  401ed6:	9a07      	ldr	r2, [sp, #28]
  401ed8:	9903      	ldr	r1, [sp, #12]
  401eda:	6813      	ldr	r3, [r2, #0]
  401edc:	17cd      	asrs	r5, r1, #31
  401ede:	4608      	mov	r0, r1
  401ee0:	3204      	adds	r2, #4
  401ee2:	4629      	mov	r1, r5
  401ee4:	9207      	str	r2, [sp, #28]
  401ee6:	e9c3 0100 	strd	r0, r1, [r3]
  401eea:	f7ff ba54 	b.w	401396 <_vfiprintf_r+0x7a>
  401eee:	4658      	mov	r0, fp
  401ef0:	9607      	str	r6, [sp, #28]
  401ef2:	9302      	str	r3, [sp, #8]
  401ef4:	f7ff f964 	bl	4011c0 <strlen>
  401ef8:	2400      	movs	r4, #0
  401efa:	9005      	str	r0, [sp, #20]
  401efc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401f00:	f7ff bb5e 	b.w	4015c0 <_vfiprintf_r+0x2a4>
  401f04:	aa0f      	add	r2, sp, #60	; 0x3c
  401f06:	9904      	ldr	r1, [sp, #16]
  401f08:	9806      	ldr	r0, [sp, #24]
  401f0a:	f7ff f9c7 	bl	40129c <__sprint_r.part.0>
  401f0e:	2800      	cmp	r0, #0
  401f10:	f47f aeb6 	bne.w	401c80 <_vfiprintf_r+0x964>
  401f14:	9910      	ldr	r1, [sp, #64]	; 0x40
  401f16:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401f18:	1c48      	adds	r0, r1, #1
  401f1a:	46ca      	mov	sl, r9
  401f1c:	e5a7      	b.n	401a6e <_vfiprintf_r+0x752>
  401f1e:	9910      	ldr	r1, [sp, #64]	; 0x40
  401f20:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401f22:	4e20      	ldr	r6, [pc, #128]	; (401fa4 <_vfiprintf_r+0xc88>)
  401f24:	3101      	adds	r1, #1
  401f26:	f7ff bb90 	b.w	40164a <_vfiprintf_r+0x32e>
  401f2a:	2c06      	cmp	r4, #6
  401f2c:	bf28      	it	cs
  401f2e:	2406      	movcs	r4, #6
  401f30:	9405      	str	r4, [sp, #20]
  401f32:	9607      	str	r6, [sp, #28]
  401f34:	9401      	str	r4, [sp, #4]
  401f36:	f8df b070 	ldr.w	fp, [pc, #112]	; 401fa8 <_vfiprintf_r+0xc8c>
  401f3a:	e4d5      	b.n	4018e8 <_vfiprintf_r+0x5cc>
  401f3c:	9810      	ldr	r0, [sp, #64]	; 0x40
  401f3e:	4e19      	ldr	r6, [pc, #100]	; (401fa4 <_vfiprintf_r+0xc88>)
  401f40:	3001      	adds	r0, #1
  401f42:	e603      	b.n	401b4c <_vfiprintf_r+0x830>
  401f44:	9405      	str	r4, [sp, #20]
  401f46:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  401f4a:	9607      	str	r6, [sp, #28]
  401f4c:	9302      	str	r3, [sp, #8]
  401f4e:	4604      	mov	r4, r0
  401f50:	f7ff bb36 	b.w	4015c0 <_vfiprintf_r+0x2a4>
  401f54:	4686      	mov	lr, r0
  401f56:	f7ff bbce 	b.w	4016f6 <_vfiprintf_r+0x3da>
  401f5a:	9806      	ldr	r0, [sp, #24]
  401f5c:	aa0f      	add	r2, sp, #60	; 0x3c
  401f5e:	4659      	mov	r1, fp
  401f60:	f7ff f99c 	bl	40129c <__sprint_r.part.0>
  401f64:	2800      	cmp	r0, #0
  401f66:	f43f ae24 	beq.w	401bb2 <_vfiprintf_r+0x896>
  401f6a:	e624      	b.n	401bb6 <_vfiprintf_r+0x89a>
  401f6c:	9907      	ldr	r1, [sp, #28]
  401f6e:	f898 2001 	ldrb.w	r2, [r8, #1]
  401f72:	680c      	ldr	r4, [r1, #0]
  401f74:	3104      	adds	r1, #4
  401f76:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  401f7a:	46b8      	mov	r8, r7
  401f7c:	9107      	str	r1, [sp, #28]
  401f7e:	f7ff ba3f 	b.w	401400 <_vfiprintf_r+0xe4>
  401f82:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401f86:	e43c      	b.n	401802 <_vfiprintf_r+0x4e6>
  401f88:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401f8c:	e521      	b.n	4019d2 <_vfiprintf_r+0x6b6>
  401f8e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401f92:	f7ff bbf4 	b.w	40177e <_vfiprintf_r+0x462>
  401f96:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401f9a:	e491      	b.n	4018c0 <_vfiprintf_r+0x5a4>
  401f9c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  401fa0:	e469      	b.n	401876 <_vfiprintf_r+0x55a>
  401fa2:	bf00      	nop
  401fa4:	00403ed8 	.word	0x00403ed8
  401fa8:	00403ed0 	.word	0x00403ed0

00401fac <__sbprintf>:
  401fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401fb0:	460c      	mov	r4, r1
  401fb2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  401fb6:	8989      	ldrh	r1, [r1, #12]
  401fb8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  401fba:	89e5      	ldrh	r5, [r4, #14]
  401fbc:	9619      	str	r6, [sp, #100]	; 0x64
  401fbe:	f021 0102 	bic.w	r1, r1, #2
  401fc2:	4606      	mov	r6, r0
  401fc4:	69e0      	ldr	r0, [r4, #28]
  401fc6:	f8ad 100c 	strh.w	r1, [sp, #12]
  401fca:	4617      	mov	r7, r2
  401fcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
  401fd0:	6a62      	ldr	r2, [r4, #36]	; 0x24
  401fd2:	f8ad 500e 	strh.w	r5, [sp, #14]
  401fd6:	4698      	mov	r8, r3
  401fd8:	ad1a      	add	r5, sp, #104	; 0x68
  401fda:	2300      	movs	r3, #0
  401fdc:	9007      	str	r0, [sp, #28]
  401fde:	a816      	add	r0, sp, #88	; 0x58
  401fe0:	9209      	str	r2, [sp, #36]	; 0x24
  401fe2:	9306      	str	r3, [sp, #24]
  401fe4:	9500      	str	r5, [sp, #0]
  401fe6:	9504      	str	r5, [sp, #16]
  401fe8:	9102      	str	r1, [sp, #8]
  401fea:	9105      	str	r1, [sp, #20]
  401fec:	f000 fd48 	bl	402a80 <__retarget_lock_init_recursive>
  401ff0:	4643      	mov	r3, r8
  401ff2:	463a      	mov	r2, r7
  401ff4:	4669      	mov	r1, sp
  401ff6:	4630      	mov	r0, r6
  401ff8:	f7ff f990 	bl	40131c <_vfiprintf_r>
  401ffc:	1e05      	subs	r5, r0, #0
  401ffe:	db07      	blt.n	402010 <__sbprintf+0x64>
  402000:	4630      	mov	r0, r6
  402002:	4669      	mov	r1, sp
  402004:	f000 f928 	bl	402258 <_fflush_r>
  402008:	2800      	cmp	r0, #0
  40200a:	bf18      	it	ne
  40200c:	f04f 35ff 	movne.w	r5, #4294967295
  402010:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  402014:	065b      	lsls	r3, r3, #25
  402016:	d503      	bpl.n	402020 <__sbprintf+0x74>
  402018:	89a3      	ldrh	r3, [r4, #12]
  40201a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40201e:	81a3      	strh	r3, [r4, #12]
  402020:	9816      	ldr	r0, [sp, #88]	; 0x58
  402022:	f000 fd2f 	bl	402a84 <__retarget_lock_close_recursive>
  402026:	4628      	mov	r0, r5
  402028:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  40202c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00402030 <__swsetup_r>:
  402030:	b538      	push	{r3, r4, r5, lr}
  402032:	4b30      	ldr	r3, [pc, #192]	; (4020f4 <__swsetup_r+0xc4>)
  402034:	681b      	ldr	r3, [r3, #0]
  402036:	4605      	mov	r5, r0
  402038:	460c      	mov	r4, r1
  40203a:	b113      	cbz	r3, 402042 <__swsetup_r+0x12>
  40203c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40203e:	2a00      	cmp	r2, #0
  402040:	d038      	beq.n	4020b4 <__swsetup_r+0x84>
  402042:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402046:	b293      	uxth	r3, r2
  402048:	0718      	lsls	r0, r3, #28
  40204a:	d50c      	bpl.n	402066 <__swsetup_r+0x36>
  40204c:	6920      	ldr	r0, [r4, #16]
  40204e:	b1a8      	cbz	r0, 40207c <__swsetup_r+0x4c>
  402050:	f013 0201 	ands.w	r2, r3, #1
  402054:	d01e      	beq.n	402094 <__swsetup_r+0x64>
  402056:	6963      	ldr	r3, [r4, #20]
  402058:	2200      	movs	r2, #0
  40205a:	425b      	negs	r3, r3
  40205c:	61a3      	str	r3, [r4, #24]
  40205e:	60a2      	str	r2, [r4, #8]
  402060:	b1f0      	cbz	r0, 4020a0 <__swsetup_r+0x70>
  402062:	2000      	movs	r0, #0
  402064:	bd38      	pop	{r3, r4, r5, pc}
  402066:	06d9      	lsls	r1, r3, #27
  402068:	d53c      	bpl.n	4020e4 <__swsetup_r+0xb4>
  40206a:	0758      	lsls	r0, r3, #29
  40206c:	d426      	bmi.n	4020bc <__swsetup_r+0x8c>
  40206e:	6920      	ldr	r0, [r4, #16]
  402070:	f042 0308 	orr.w	r3, r2, #8
  402074:	81a3      	strh	r3, [r4, #12]
  402076:	b29b      	uxth	r3, r3
  402078:	2800      	cmp	r0, #0
  40207a:	d1e9      	bne.n	402050 <__swsetup_r+0x20>
  40207c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402080:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402084:	d0e4      	beq.n	402050 <__swsetup_r+0x20>
  402086:	4628      	mov	r0, r5
  402088:	4621      	mov	r1, r4
  40208a:	f000 fd2f 	bl	402aec <__smakebuf_r>
  40208e:	89a3      	ldrh	r3, [r4, #12]
  402090:	6920      	ldr	r0, [r4, #16]
  402092:	e7dd      	b.n	402050 <__swsetup_r+0x20>
  402094:	0799      	lsls	r1, r3, #30
  402096:	bf58      	it	pl
  402098:	6962      	ldrpl	r2, [r4, #20]
  40209a:	60a2      	str	r2, [r4, #8]
  40209c:	2800      	cmp	r0, #0
  40209e:	d1e0      	bne.n	402062 <__swsetup_r+0x32>
  4020a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4020a4:	061a      	lsls	r2, r3, #24
  4020a6:	d5dd      	bpl.n	402064 <__swsetup_r+0x34>
  4020a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4020ac:	81a3      	strh	r3, [r4, #12]
  4020ae:	f04f 30ff 	mov.w	r0, #4294967295
  4020b2:	bd38      	pop	{r3, r4, r5, pc}
  4020b4:	4618      	mov	r0, r3
  4020b6:	f000 f927 	bl	402308 <__sinit>
  4020ba:	e7c2      	b.n	402042 <__swsetup_r+0x12>
  4020bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4020be:	b151      	cbz	r1, 4020d6 <__swsetup_r+0xa6>
  4020c0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4020c4:	4299      	cmp	r1, r3
  4020c6:	d004      	beq.n	4020d2 <__swsetup_r+0xa2>
  4020c8:	4628      	mov	r0, r5
  4020ca:	f000 fa43 	bl	402554 <_free_r>
  4020ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4020d2:	2300      	movs	r3, #0
  4020d4:	6323      	str	r3, [r4, #48]	; 0x30
  4020d6:	2300      	movs	r3, #0
  4020d8:	6920      	ldr	r0, [r4, #16]
  4020da:	6063      	str	r3, [r4, #4]
  4020dc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4020e0:	6020      	str	r0, [r4, #0]
  4020e2:	e7c5      	b.n	402070 <__swsetup_r+0x40>
  4020e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4020e8:	2309      	movs	r3, #9
  4020ea:	602b      	str	r3, [r5, #0]
  4020ec:	f04f 30ff 	mov.w	r0, #4294967295
  4020f0:	81a2      	strh	r2, [r4, #12]
  4020f2:	bd38      	pop	{r3, r4, r5, pc}
  4020f4:	20400008 	.word	0x20400008

004020f8 <register_fini>:
  4020f8:	4b02      	ldr	r3, [pc, #8]	; (402104 <register_fini+0xc>)
  4020fa:	b113      	cbz	r3, 402102 <register_fini+0xa>
  4020fc:	4802      	ldr	r0, [pc, #8]	; (402108 <register_fini+0x10>)
  4020fe:	f000 b805 	b.w	40210c <atexit>
  402102:	4770      	bx	lr
  402104:	00000000 	.word	0x00000000
  402108:	00402379 	.word	0x00402379

0040210c <atexit>:
  40210c:	2300      	movs	r3, #0
  40210e:	4601      	mov	r1, r0
  402110:	461a      	mov	r2, r3
  402112:	4618      	mov	r0, r3
  402114:	f001 bc00 	b.w	403918 <__register_exitproc>

00402118 <__sflush_r>:
  402118:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40211c:	b29a      	uxth	r2, r3
  40211e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402122:	460d      	mov	r5, r1
  402124:	0711      	lsls	r1, r2, #28
  402126:	4680      	mov	r8, r0
  402128:	d43a      	bmi.n	4021a0 <__sflush_r+0x88>
  40212a:	686a      	ldr	r2, [r5, #4]
  40212c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402130:	2a00      	cmp	r2, #0
  402132:	81ab      	strh	r3, [r5, #12]
  402134:	dd6f      	ble.n	402216 <__sflush_r+0xfe>
  402136:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402138:	2c00      	cmp	r4, #0
  40213a:	d049      	beq.n	4021d0 <__sflush_r+0xb8>
  40213c:	2200      	movs	r2, #0
  40213e:	b29b      	uxth	r3, r3
  402140:	f8d8 6000 	ldr.w	r6, [r8]
  402144:	f8c8 2000 	str.w	r2, [r8]
  402148:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40214c:	d067      	beq.n	40221e <__sflush_r+0x106>
  40214e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  402150:	075f      	lsls	r7, r3, #29
  402152:	d505      	bpl.n	402160 <__sflush_r+0x48>
  402154:	6869      	ldr	r1, [r5, #4]
  402156:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402158:	1a52      	subs	r2, r2, r1
  40215a:	b10b      	cbz	r3, 402160 <__sflush_r+0x48>
  40215c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40215e:	1ad2      	subs	r2, r2, r3
  402160:	2300      	movs	r3, #0
  402162:	69e9      	ldr	r1, [r5, #28]
  402164:	4640      	mov	r0, r8
  402166:	47a0      	blx	r4
  402168:	1c44      	adds	r4, r0, #1
  40216a:	d03c      	beq.n	4021e6 <__sflush_r+0xce>
  40216c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402170:	692a      	ldr	r2, [r5, #16]
  402172:	602a      	str	r2, [r5, #0]
  402174:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  402178:	2200      	movs	r2, #0
  40217a:	81ab      	strh	r3, [r5, #12]
  40217c:	04db      	lsls	r3, r3, #19
  40217e:	606a      	str	r2, [r5, #4]
  402180:	d447      	bmi.n	402212 <__sflush_r+0xfa>
  402182:	6b29      	ldr	r1, [r5, #48]	; 0x30
  402184:	f8c8 6000 	str.w	r6, [r8]
  402188:	b311      	cbz	r1, 4021d0 <__sflush_r+0xb8>
  40218a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40218e:	4299      	cmp	r1, r3
  402190:	d002      	beq.n	402198 <__sflush_r+0x80>
  402192:	4640      	mov	r0, r8
  402194:	f000 f9de 	bl	402554 <_free_r>
  402198:	2000      	movs	r0, #0
  40219a:	6328      	str	r0, [r5, #48]	; 0x30
  40219c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4021a0:	692e      	ldr	r6, [r5, #16]
  4021a2:	b1ae      	cbz	r6, 4021d0 <__sflush_r+0xb8>
  4021a4:	682c      	ldr	r4, [r5, #0]
  4021a6:	602e      	str	r6, [r5, #0]
  4021a8:	0791      	lsls	r1, r2, #30
  4021aa:	bf0c      	ite	eq
  4021ac:	696b      	ldreq	r3, [r5, #20]
  4021ae:	2300      	movne	r3, #0
  4021b0:	1ba4      	subs	r4, r4, r6
  4021b2:	60ab      	str	r3, [r5, #8]
  4021b4:	e00a      	b.n	4021cc <__sflush_r+0xb4>
  4021b6:	4623      	mov	r3, r4
  4021b8:	4632      	mov	r2, r6
  4021ba:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4021bc:	69e9      	ldr	r1, [r5, #28]
  4021be:	4640      	mov	r0, r8
  4021c0:	47b8      	blx	r7
  4021c2:	2800      	cmp	r0, #0
  4021c4:	eba4 0400 	sub.w	r4, r4, r0
  4021c8:	4406      	add	r6, r0
  4021ca:	dd04      	ble.n	4021d6 <__sflush_r+0xbe>
  4021cc:	2c00      	cmp	r4, #0
  4021ce:	dcf2      	bgt.n	4021b6 <__sflush_r+0x9e>
  4021d0:	2000      	movs	r0, #0
  4021d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4021d6:	89ab      	ldrh	r3, [r5, #12]
  4021d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4021dc:	81ab      	strh	r3, [r5, #12]
  4021de:	f04f 30ff 	mov.w	r0, #4294967295
  4021e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4021e6:	f8d8 4000 	ldr.w	r4, [r8]
  4021ea:	2c1d      	cmp	r4, #29
  4021ec:	d8f3      	bhi.n	4021d6 <__sflush_r+0xbe>
  4021ee:	4b19      	ldr	r3, [pc, #100]	; (402254 <__sflush_r+0x13c>)
  4021f0:	40e3      	lsrs	r3, r4
  4021f2:	43db      	mvns	r3, r3
  4021f4:	f013 0301 	ands.w	r3, r3, #1
  4021f8:	d1ed      	bne.n	4021d6 <__sflush_r+0xbe>
  4021fa:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4021fe:	606b      	str	r3, [r5, #4]
  402200:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  402204:	6929      	ldr	r1, [r5, #16]
  402206:	81ab      	strh	r3, [r5, #12]
  402208:	04da      	lsls	r2, r3, #19
  40220a:	6029      	str	r1, [r5, #0]
  40220c:	d5b9      	bpl.n	402182 <__sflush_r+0x6a>
  40220e:	2c00      	cmp	r4, #0
  402210:	d1b7      	bne.n	402182 <__sflush_r+0x6a>
  402212:	6528      	str	r0, [r5, #80]	; 0x50
  402214:	e7b5      	b.n	402182 <__sflush_r+0x6a>
  402216:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  402218:	2a00      	cmp	r2, #0
  40221a:	dc8c      	bgt.n	402136 <__sflush_r+0x1e>
  40221c:	e7d8      	b.n	4021d0 <__sflush_r+0xb8>
  40221e:	2301      	movs	r3, #1
  402220:	69e9      	ldr	r1, [r5, #28]
  402222:	4640      	mov	r0, r8
  402224:	47a0      	blx	r4
  402226:	1c43      	adds	r3, r0, #1
  402228:	4602      	mov	r2, r0
  40222a:	d002      	beq.n	402232 <__sflush_r+0x11a>
  40222c:	89ab      	ldrh	r3, [r5, #12]
  40222e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402230:	e78e      	b.n	402150 <__sflush_r+0x38>
  402232:	f8d8 3000 	ldr.w	r3, [r8]
  402236:	2b00      	cmp	r3, #0
  402238:	d0f8      	beq.n	40222c <__sflush_r+0x114>
  40223a:	2b1d      	cmp	r3, #29
  40223c:	d001      	beq.n	402242 <__sflush_r+0x12a>
  40223e:	2b16      	cmp	r3, #22
  402240:	d102      	bne.n	402248 <__sflush_r+0x130>
  402242:	f8c8 6000 	str.w	r6, [r8]
  402246:	e7c3      	b.n	4021d0 <__sflush_r+0xb8>
  402248:	89ab      	ldrh	r3, [r5, #12]
  40224a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40224e:	81ab      	strh	r3, [r5, #12]
  402250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402254:	20400001 	.word	0x20400001

00402258 <_fflush_r>:
  402258:	b538      	push	{r3, r4, r5, lr}
  40225a:	460d      	mov	r5, r1
  40225c:	4604      	mov	r4, r0
  40225e:	b108      	cbz	r0, 402264 <_fflush_r+0xc>
  402260:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402262:	b1bb      	cbz	r3, 402294 <_fflush_r+0x3c>
  402264:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  402268:	b188      	cbz	r0, 40228e <_fflush_r+0x36>
  40226a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40226c:	07db      	lsls	r3, r3, #31
  40226e:	d401      	bmi.n	402274 <_fflush_r+0x1c>
  402270:	0581      	lsls	r1, r0, #22
  402272:	d517      	bpl.n	4022a4 <_fflush_r+0x4c>
  402274:	4620      	mov	r0, r4
  402276:	4629      	mov	r1, r5
  402278:	f7ff ff4e 	bl	402118 <__sflush_r>
  40227c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40227e:	07da      	lsls	r2, r3, #31
  402280:	4604      	mov	r4, r0
  402282:	d402      	bmi.n	40228a <_fflush_r+0x32>
  402284:	89ab      	ldrh	r3, [r5, #12]
  402286:	059b      	lsls	r3, r3, #22
  402288:	d507      	bpl.n	40229a <_fflush_r+0x42>
  40228a:	4620      	mov	r0, r4
  40228c:	bd38      	pop	{r3, r4, r5, pc}
  40228e:	4604      	mov	r4, r0
  402290:	4620      	mov	r0, r4
  402292:	bd38      	pop	{r3, r4, r5, pc}
  402294:	f000 f838 	bl	402308 <__sinit>
  402298:	e7e4      	b.n	402264 <_fflush_r+0xc>
  40229a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40229c:	f000 fbf6 	bl	402a8c <__retarget_lock_release_recursive>
  4022a0:	4620      	mov	r0, r4
  4022a2:	bd38      	pop	{r3, r4, r5, pc}
  4022a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4022a6:	f000 fbef 	bl	402a88 <__retarget_lock_acquire_recursive>
  4022aa:	e7e3      	b.n	402274 <_fflush_r+0x1c>

004022ac <_cleanup_r>:
  4022ac:	4901      	ldr	r1, [pc, #4]	; (4022b4 <_cleanup_r+0x8>)
  4022ae:	f000 bbaf 	b.w	402a10 <_fwalk_reent>
  4022b2:	bf00      	nop
  4022b4:	00403a01 	.word	0x00403a01

004022b8 <std.isra.0>:
  4022b8:	b510      	push	{r4, lr}
  4022ba:	2300      	movs	r3, #0
  4022bc:	4604      	mov	r4, r0
  4022be:	8181      	strh	r1, [r0, #12]
  4022c0:	81c2      	strh	r2, [r0, #14]
  4022c2:	6003      	str	r3, [r0, #0]
  4022c4:	6043      	str	r3, [r0, #4]
  4022c6:	6083      	str	r3, [r0, #8]
  4022c8:	6643      	str	r3, [r0, #100]	; 0x64
  4022ca:	6103      	str	r3, [r0, #16]
  4022cc:	6143      	str	r3, [r0, #20]
  4022ce:	6183      	str	r3, [r0, #24]
  4022d0:	4619      	mov	r1, r3
  4022d2:	2208      	movs	r2, #8
  4022d4:	305c      	adds	r0, #92	; 0x5c
  4022d6:	f7fe fde3 	bl	400ea0 <memset>
  4022da:	4807      	ldr	r0, [pc, #28]	; (4022f8 <std.isra.0+0x40>)
  4022dc:	4907      	ldr	r1, [pc, #28]	; (4022fc <std.isra.0+0x44>)
  4022de:	4a08      	ldr	r2, [pc, #32]	; (402300 <std.isra.0+0x48>)
  4022e0:	4b08      	ldr	r3, [pc, #32]	; (402304 <std.isra.0+0x4c>)
  4022e2:	6220      	str	r0, [r4, #32]
  4022e4:	61e4      	str	r4, [r4, #28]
  4022e6:	6261      	str	r1, [r4, #36]	; 0x24
  4022e8:	62a2      	str	r2, [r4, #40]	; 0x28
  4022ea:	62e3      	str	r3, [r4, #44]	; 0x2c
  4022ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4022f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4022f4:	f000 bbc4 	b.w	402a80 <__retarget_lock_init_recursive>
  4022f8:	00403745 	.word	0x00403745
  4022fc:	00403769 	.word	0x00403769
  402300:	004037a5 	.word	0x004037a5
  402304:	004037c5 	.word	0x004037c5

00402308 <__sinit>:
  402308:	b510      	push	{r4, lr}
  40230a:	4604      	mov	r4, r0
  40230c:	4812      	ldr	r0, [pc, #72]	; (402358 <__sinit+0x50>)
  40230e:	f000 fbbb 	bl	402a88 <__retarget_lock_acquire_recursive>
  402312:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402314:	b9d2      	cbnz	r2, 40234c <__sinit+0x44>
  402316:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40231a:	4810      	ldr	r0, [pc, #64]	; (40235c <__sinit+0x54>)
  40231c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  402320:	2103      	movs	r1, #3
  402322:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  402326:	63e0      	str	r0, [r4, #60]	; 0x3c
  402328:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40232c:	6860      	ldr	r0, [r4, #4]
  40232e:	2104      	movs	r1, #4
  402330:	f7ff ffc2 	bl	4022b8 <std.isra.0>
  402334:	2201      	movs	r2, #1
  402336:	2109      	movs	r1, #9
  402338:	68a0      	ldr	r0, [r4, #8]
  40233a:	f7ff ffbd 	bl	4022b8 <std.isra.0>
  40233e:	2202      	movs	r2, #2
  402340:	2112      	movs	r1, #18
  402342:	68e0      	ldr	r0, [r4, #12]
  402344:	f7ff ffb8 	bl	4022b8 <std.isra.0>
  402348:	2301      	movs	r3, #1
  40234a:	63a3      	str	r3, [r4, #56]	; 0x38
  40234c:	4802      	ldr	r0, [pc, #8]	; (402358 <__sinit+0x50>)
  40234e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402352:	f000 bb9b 	b.w	402a8c <__retarget_lock_release_recursive>
  402356:	bf00      	nop
  402358:	20400a98 	.word	0x20400a98
  40235c:	004022ad 	.word	0x004022ad

00402360 <__sfp_lock_acquire>:
  402360:	4801      	ldr	r0, [pc, #4]	; (402368 <__sfp_lock_acquire+0x8>)
  402362:	f000 bb91 	b.w	402a88 <__retarget_lock_acquire_recursive>
  402366:	bf00      	nop
  402368:	20400aac 	.word	0x20400aac

0040236c <__sfp_lock_release>:
  40236c:	4801      	ldr	r0, [pc, #4]	; (402374 <__sfp_lock_release+0x8>)
  40236e:	f000 bb8d 	b.w	402a8c <__retarget_lock_release_recursive>
  402372:	bf00      	nop
  402374:	20400aac 	.word	0x20400aac

00402378 <__libc_fini_array>:
  402378:	b538      	push	{r3, r4, r5, lr}
  40237a:	4c0a      	ldr	r4, [pc, #40]	; (4023a4 <__libc_fini_array+0x2c>)
  40237c:	4d0a      	ldr	r5, [pc, #40]	; (4023a8 <__libc_fini_array+0x30>)
  40237e:	1b64      	subs	r4, r4, r5
  402380:	10a4      	asrs	r4, r4, #2
  402382:	d00a      	beq.n	40239a <__libc_fini_array+0x22>
  402384:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402388:	3b01      	subs	r3, #1
  40238a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40238e:	3c01      	subs	r4, #1
  402390:	f855 3904 	ldr.w	r3, [r5], #-4
  402394:	4798      	blx	r3
  402396:	2c00      	cmp	r4, #0
  402398:	d1f9      	bne.n	40238e <__libc_fini_array+0x16>
  40239a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40239e:	f001 be3f 	b.w	404020 <_fini>
  4023a2:	bf00      	nop
  4023a4:	00404030 	.word	0x00404030
  4023a8:	0040402c 	.word	0x0040402c

004023ac <__fputwc>:
  4023ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4023b0:	b082      	sub	sp, #8
  4023b2:	4680      	mov	r8, r0
  4023b4:	4689      	mov	r9, r1
  4023b6:	4614      	mov	r4, r2
  4023b8:	f000 fb54 	bl	402a64 <__locale_mb_cur_max>
  4023bc:	2801      	cmp	r0, #1
  4023be:	d036      	beq.n	40242e <__fputwc+0x82>
  4023c0:	464a      	mov	r2, r9
  4023c2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4023c6:	a901      	add	r1, sp, #4
  4023c8:	4640      	mov	r0, r8
  4023ca:	f001 fa57 	bl	40387c <_wcrtomb_r>
  4023ce:	1c42      	adds	r2, r0, #1
  4023d0:	4606      	mov	r6, r0
  4023d2:	d025      	beq.n	402420 <__fputwc+0x74>
  4023d4:	b3a8      	cbz	r0, 402442 <__fputwc+0x96>
  4023d6:	f89d e004 	ldrb.w	lr, [sp, #4]
  4023da:	2500      	movs	r5, #0
  4023dc:	f10d 0a04 	add.w	sl, sp, #4
  4023e0:	e009      	b.n	4023f6 <__fputwc+0x4a>
  4023e2:	6823      	ldr	r3, [r4, #0]
  4023e4:	1c5a      	adds	r2, r3, #1
  4023e6:	6022      	str	r2, [r4, #0]
  4023e8:	f883 e000 	strb.w	lr, [r3]
  4023ec:	3501      	adds	r5, #1
  4023ee:	42b5      	cmp	r5, r6
  4023f0:	d227      	bcs.n	402442 <__fputwc+0x96>
  4023f2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4023f6:	68a3      	ldr	r3, [r4, #8]
  4023f8:	3b01      	subs	r3, #1
  4023fa:	2b00      	cmp	r3, #0
  4023fc:	60a3      	str	r3, [r4, #8]
  4023fe:	daf0      	bge.n	4023e2 <__fputwc+0x36>
  402400:	69a7      	ldr	r7, [r4, #24]
  402402:	42bb      	cmp	r3, r7
  402404:	4671      	mov	r1, lr
  402406:	4622      	mov	r2, r4
  402408:	4640      	mov	r0, r8
  40240a:	db02      	blt.n	402412 <__fputwc+0x66>
  40240c:	f1be 0f0a 	cmp.w	lr, #10
  402410:	d1e7      	bne.n	4023e2 <__fputwc+0x36>
  402412:	f001 f9db 	bl	4037cc <__swbuf_r>
  402416:	1c43      	adds	r3, r0, #1
  402418:	d1e8      	bne.n	4023ec <__fputwc+0x40>
  40241a:	b002      	add	sp, #8
  40241c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402420:	89a3      	ldrh	r3, [r4, #12]
  402422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402426:	81a3      	strh	r3, [r4, #12]
  402428:	b002      	add	sp, #8
  40242a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40242e:	f109 33ff 	add.w	r3, r9, #4294967295
  402432:	2bfe      	cmp	r3, #254	; 0xfe
  402434:	d8c4      	bhi.n	4023c0 <__fputwc+0x14>
  402436:	fa5f fe89 	uxtb.w	lr, r9
  40243a:	4606      	mov	r6, r0
  40243c:	f88d e004 	strb.w	lr, [sp, #4]
  402440:	e7cb      	b.n	4023da <__fputwc+0x2e>
  402442:	4648      	mov	r0, r9
  402444:	b002      	add	sp, #8
  402446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40244a:	bf00      	nop

0040244c <_fputwc_r>:
  40244c:	b530      	push	{r4, r5, lr}
  40244e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  402450:	f013 0f01 	tst.w	r3, #1
  402454:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  402458:	4614      	mov	r4, r2
  40245a:	b083      	sub	sp, #12
  40245c:	4605      	mov	r5, r0
  40245e:	b29a      	uxth	r2, r3
  402460:	d101      	bne.n	402466 <_fputwc_r+0x1a>
  402462:	0590      	lsls	r0, r2, #22
  402464:	d51c      	bpl.n	4024a0 <_fputwc_r+0x54>
  402466:	0490      	lsls	r0, r2, #18
  402468:	d406      	bmi.n	402478 <_fputwc_r+0x2c>
  40246a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40246c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402470:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  402474:	81a3      	strh	r3, [r4, #12]
  402476:	6662      	str	r2, [r4, #100]	; 0x64
  402478:	4628      	mov	r0, r5
  40247a:	4622      	mov	r2, r4
  40247c:	f7ff ff96 	bl	4023ac <__fputwc>
  402480:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402482:	07da      	lsls	r2, r3, #31
  402484:	4605      	mov	r5, r0
  402486:	d402      	bmi.n	40248e <_fputwc_r+0x42>
  402488:	89a3      	ldrh	r3, [r4, #12]
  40248a:	059b      	lsls	r3, r3, #22
  40248c:	d502      	bpl.n	402494 <_fputwc_r+0x48>
  40248e:	4628      	mov	r0, r5
  402490:	b003      	add	sp, #12
  402492:	bd30      	pop	{r4, r5, pc}
  402494:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402496:	f000 faf9 	bl	402a8c <__retarget_lock_release_recursive>
  40249a:	4628      	mov	r0, r5
  40249c:	b003      	add	sp, #12
  40249e:	bd30      	pop	{r4, r5, pc}
  4024a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4024a2:	9101      	str	r1, [sp, #4]
  4024a4:	f000 faf0 	bl	402a88 <__retarget_lock_acquire_recursive>
  4024a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4024ac:	9901      	ldr	r1, [sp, #4]
  4024ae:	b29a      	uxth	r2, r3
  4024b0:	e7d9      	b.n	402466 <_fputwc_r+0x1a>
  4024b2:	bf00      	nop

004024b4 <_malloc_trim_r>:
  4024b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4024b6:	4f24      	ldr	r7, [pc, #144]	; (402548 <_malloc_trim_r+0x94>)
  4024b8:	460c      	mov	r4, r1
  4024ba:	4606      	mov	r6, r0
  4024bc:	f000 ff7e 	bl	4033bc <__malloc_lock>
  4024c0:	68bb      	ldr	r3, [r7, #8]
  4024c2:	685d      	ldr	r5, [r3, #4]
  4024c4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4024c8:	310f      	adds	r1, #15
  4024ca:	f025 0503 	bic.w	r5, r5, #3
  4024ce:	4429      	add	r1, r5
  4024d0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4024d4:	f021 010f 	bic.w	r1, r1, #15
  4024d8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4024dc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4024e0:	db07      	blt.n	4024f2 <_malloc_trim_r+0x3e>
  4024e2:	2100      	movs	r1, #0
  4024e4:	4630      	mov	r0, r6
  4024e6:	f001 f91b 	bl	403720 <_sbrk_r>
  4024ea:	68bb      	ldr	r3, [r7, #8]
  4024ec:	442b      	add	r3, r5
  4024ee:	4298      	cmp	r0, r3
  4024f0:	d004      	beq.n	4024fc <_malloc_trim_r+0x48>
  4024f2:	4630      	mov	r0, r6
  4024f4:	f000 ff68 	bl	4033c8 <__malloc_unlock>
  4024f8:	2000      	movs	r0, #0
  4024fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4024fc:	4261      	negs	r1, r4
  4024fe:	4630      	mov	r0, r6
  402500:	f001 f90e 	bl	403720 <_sbrk_r>
  402504:	3001      	adds	r0, #1
  402506:	d00d      	beq.n	402524 <_malloc_trim_r+0x70>
  402508:	4b10      	ldr	r3, [pc, #64]	; (40254c <_malloc_trim_r+0x98>)
  40250a:	68ba      	ldr	r2, [r7, #8]
  40250c:	6819      	ldr	r1, [r3, #0]
  40250e:	1b2d      	subs	r5, r5, r4
  402510:	f045 0501 	orr.w	r5, r5, #1
  402514:	4630      	mov	r0, r6
  402516:	1b09      	subs	r1, r1, r4
  402518:	6055      	str	r5, [r2, #4]
  40251a:	6019      	str	r1, [r3, #0]
  40251c:	f000 ff54 	bl	4033c8 <__malloc_unlock>
  402520:	2001      	movs	r0, #1
  402522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402524:	2100      	movs	r1, #0
  402526:	4630      	mov	r0, r6
  402528:	f001 f8fa 	bl	403720 <_sbrk_r>
  40252c:	68ba      	ldr	r2, [r7, #8]
  40252e:	1a83      	subs	r3, r0, r2
  402530:	2b0f      	cmp	r3, #15
  402532:	ddde      	ble.n	4024f2 <_malloc_trim_r+0x3e>
  402534:	4c06      	ldr	r4, [pc, #24]	; (402550 <_malloc_trim_r+0x9c>)
  402536:	4905      	ldr	r1, [pc, #20]	; (40254c <_malloc_trim_r+0x98>)
  402538:	6824      	ldr	r4, [r4, #0]
  40253a:	f043 0301 	orr.w	r3, r3, #1
  40253e:	1b00      	subs	r0, r0, r4
  402540:	6053      	str	r3, [r2, #4]
  402542:	6008      	str	r0, [r1, #0]
  402544:	e7d5      	b.n	4024f2 <_malloc_trim_r+0x3e>
  402546:	bf00      	nop
  402548:	204005a8 	.word	0x204005a8
  40254c:	20400a4c 	.word	0x20400a4c
  402550:	204009b0 	.word	0x204009b0

00402554 <_free_r>:
  402554:	2900      	cmp	r1, #0
  402556:	d044      	beq.n	4025e2 <_free_r+0x8e>
  402558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40255c:	460d      	mov	r5, r1
  40255e:	4680      	mov	r8, r0
  402560:	f000 ff2c 	bl	4033bc <__malloc_lock>
  402564:	f855 7c04 	ldr.w	r7, [r5, #-4]
  402568:	4969      	ldr	r1, [pc, #420]	; (402710 <_free_r+0x1bc>)
  40256a:	f027 0301 	bic.w	r3, r7, #1
  40256e:	f1a5 0408 	sub.w	r4, r5, #8
  402572:	18e2      	adds	r2, r4, r3
  402574:	688e      	ldr	r6, [r1, #8]
  402576:	6850      	ldr	r0, [r2, #4]
  402578:	42b2      	cmp	r2, r6
  40257a:	f020 0003 	bic.w	r0, r0, #3
  40257e:	d05e      	beq.n	40263e <_free_r+0xea>
  402580:	07fe      	lsls	r6, r7, #31
  402582:	6050      	str	r0, [r2, #4]
  402584:	d40b      	bmi.n	40259e <_free_r+0x4a>
  402586:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40258a:	1be4      	subs	r4, r4, r7
  40258c:	f101 0e08 	add.w	lr, r1, #8
  402590:	68a5      	ldr	r5, [r4, #8]
  402592:	4575      	cmp	r5, lr
  402594:	443b      	add	r3, r7
  402596:	d06d      	beq.n	402674 <_free_r+0x120>
  402598:	68e7      	ldr	r7, [r4, #12]
  40259a:	60ef      	str	r7, [r5, #12]
  40259c:	60bd      	str	r5, [r7, #8]
  40259e:	1815      	adds	r5, r2, r0
  4025a0:	686d      	ldr	r5, [r5, #4]
  4025a2:	07ed      	lsls	r5, r5, #31
  4025a4:	d53e      	bpl.n	402624 <_free_r+0xd0>
  4025a6:	f043 0201 	orr.w	r2, r3, #1
  4025aa:	6062      	str	r2, [r4, #4]
  4025ac:	50e3      	str	r3, [r4, r3]
  4025ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4025b2:	d217      	bcs.n	4025e4 <_free_r+0x90>
  4025b4:	08db      	lsrs	r3, r3, #3
  4025b6:	1c58      	adds	r0, r3, #1
  4025b8:	109a      	asrs	r2, r3, #2
  4025ba:	684d      	ldr	r5, [r1, #4]
  4025bc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4025c0:	60a7      	str	r7, [r4, #8]
  4025c2:	2301      	movs	r3, #1
  4025c4:	4093      	lsls	r3, r2
  4025c6:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4025ca:	432b      	orrs	r3, r5
  4025cc:	3a08      	subs	r2, #8
  4025ce:	60e2      	str	r2, [r4, #12]
  4025d0:	604b      	str	r3, [r1, #4]
  4025d2:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4025d6:	60fc      	str	r4, [r7, #12]
  4025d8:	4640      	mov	r0, r8
  4025da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4025de:	f000 bef3 	b.w	4033c8 <__malloc_unlock>
  4025e2:	4770      	bx	lr
  4025e4:	0a5a      	lsrs	r2, r3, #9
  4025e6:	2a04      	cmp	r2, #4
  4025e8:	d852      	bhi.n	402690 <_free_r+0x13c>
  4025ea:	099a      	lsrs	r2, r3, #6
  4025ec:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4025f0:	00ff      	lsls	r7, r7, #3
  4025f2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4025f6:	19c8      	adds	r0, r1, r7
  4025f8:	59ca      	ldr	r2, [r1, r7]
  4025fa:	3808      	subs	r0, #8
  4025fc:	4290      	cmp	r0, r2
  4025fe:	d04f      	beq.n	4026a0 <_free_r+0x14c>
  402600:	6851      	ldr	r1, [r2, #4]
  402602:	f021 0103 	bic.w	r1, r1, #3
  402606:	428b      	cmp	r3, r1
  402608:	d232      	bcs.n	402670 <_free_r+0x11c>
  40260a:	6892      	ldr	r2, [r2, #8]
  40260c:	4290      	cmp	r0, r2
  40260e:	d1f7      	bne.n	402600 <_free_r+0xac>
  402610:	68c3      	ldr	r3, [r0, #12]
  402612:	60a0      	str	r0, [r4, #8]
  402614:	60e3      	str	r3, [r4, #12]
  402616:	609c      	str	r4, [r3, #8]
  402618:	60c4      	str	r4, [r0, #12]
  40261a:	4640      	mov	r0, r8
  40261c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402620:	f000 bed2 	b.w	4033c8 <__malloc_unlock>
  402624:	6895      	ldr	r5, [r2, #8]
  402626:	4f3b      	ldr	r7, [pc, #236]	; (402714 <_free_r+0x1c0>)
  402628:	42bd      	cmp	r5, r7
  40262a:	4403      	add	r3, r0
  40262c:	d040      	beq.n	4026b0 <_free_r+0x15c>
  40262e:	68d0      	ldr	r0, [r2, #12]
  402630:	60e8      	str	r0, [r5, #12]
  402632:	f043 0201 	orr.w	r2, r3, #1
  402636:	6085      	str	r5, [r0, #8]
  402638:	6062      	str	r2, [r4, #4]
  40263a:	50e3      	str	r3, [r4, r3]
  40263c:	e7b7      	b.n	4025ae <_free_r+0x5a>
  40263e:	07ff      	lsls	r7, r7, #31
  402640:	4403      	add	r3, r0
  402642:	d407      	bmi.n	402654 <_free_r+0x100>
  402644:	f855 2c08 	ldr.w	r2, [r5, #-8]
  402648:	1aa4      	subs	r4, r4, r2
  40264a:	4413      	add	r3, r2
  40264c:	68a0      	ldr	r0, [r4, #8]
  40264e:	68e2      	ldr	r2, [r4, #12]
  402650:	60c2      	str	r2, [r0, #12]
  402652:	6090      	str	r0, [r2, #8]
  402654:	4a30      	ldr	r2, [pc, #192]	; (402718 <_free_r+0x1c4>)
  402656:	6812      	ldr	r2, [r2, #0]
  402658:	f043 0001 	orr.w	r0, r3, #1
  40265c:	4293      	cmp	r3, r2
  40265e:	6060      	str	r0, [r4, #4]
  402660:	608c      	str	r4, [r1, #8]
  402662:	d3b9      	bcc.n	4025d8 <_free_r+0x84>
  402664:	4b2d      	ldr	r3, [pc, #180]	; (40271c <_free_r+0x1c8>)
  402666:	4640      	mov	r0, r8
  402668:	6819      	ldr	r1, [r3, #0]
  40266a:	f7ff ff23 	bl	4024b4 <_malloc_trim_r>
  40266e:	e7b3      	b.n	4025d8 <_free_r+0x84>
  402670:	4610      	mov	r0, r2
  402672:	e7cd      	b.n	402610 <_free_r+0xbc>
  402674:	1811      	adds	r1, r2, r0
  402676:	6849      	ldr	r1, [r1, #4]
  402678:	07c9      	lsls	r1, r1, #31
  40267a:	d444      	bmi.n	402706 <_free_r+0x1b2>
  40267c:	6891      	ldr	r1, [r2, #8]
  40267e:	68d2      	ldr	r2, [r2, #12]
  402680:	60ca      	str	r2, [r1, #12]
  402682:	4403      	add	r3, r0
  402684:	f043 0001 	orr.w	r0, r3, #1
  402688:	6091      	str	r1, [r2, #8]
  40268a:	6060      	str	r0, [r4, #4]
  40268c:	50e3      	str	r3, [r4, r3]
  40268e:	e7a3      	b.n	4025d8 <_free_r+0x84>
  402690:	2a14      	cmp	r2, #20
  402692:	d816      	bhi.n	4026c2 <_free_r+0x16e>
  402694:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  402698:	00ff      	lsls	r7, r7, #3
  40269a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40269e:	e7aa      	b.n	4025f6 <_free_r+0xa2>
  4026a0:	10aa      	asrs	r2, r5, #2
  4026a2:	2301      	movs	r3, #1
  4026a4:	684d      	ldr	r5, [r1, #4]
  4026a6:	4093      	lsls	r3, r2
  4026a8:	432b      	orrs	r3, r5
  4026aa:	604b      	str	r3, [r1, #4]
  4026ac:	4603      	mov	r3, r0
  4026ae:	e7b0      	b.n	402612 <_free_r+0xbe>
  4026b0:	f043 0201 	orr.w	r2, r3, #1
  4026b4:	614c      	str	r4, [r1, #20]
  4026b6:	610c      	str	r4, [r1, #16]
  4026b8:	60e5      	str	r5, [r4, #12]
  4026ba:	60a5      	str	r5, [r4, #8]
  4026bc:	6062      	str	r2, [r4, #4]
  4026be:	50e3      	str	r3, [r4, r3]
  4026c0:	e78a      	b.n	4025d8 <_free_r+0x84>
  4026c2:	2a54      	cmp	r2, #84	; 0x54
  4026c4:	d806      	bhi.n	4026d4 <_free_r+0x180>
  4026c6:	0b1a      	lsrs	r2, r3, #12
  4026c8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4026cc:	00ff      	lsls	r7, r7, #3
  4026ce:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4026d2:	e790      	b.n	4025f6 <_free_r+0xa2>
  4026d4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4026d8:	d806      	bhi.n	4026e8 <_free_r+0x194>
  4026da:	0bda      	lsrs	r2, r3, #15
  4026dc:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4026e0:	00ff      	lsls	r7, r7, #3
  4026e2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4026e6:	e786      	b.n	4025f6 <_free_r+0xa2>
  4026e8:	f240 5054 	movw	r0, #1364	; 0x554
  4026ec:	4282      	cmp	r2, r0
  4026ee:	d806      	bhi.n	4026fe <_free_r+0x1aa>
  4026f0:	0c9a      	lsrs	r2, r3, #18
  4026f2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4026f6:	00ff      	lsls	r7, r7, #3
  4026f8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4026fc:	e77b      	b.n	4025f6 <_free_r+0xa2>
  4026fe:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  402702:	257e      	movs	r5, #126	; 0x7e
  402704:	e777      	b.n	4025f6 <_free_r+0xa2>
  402706:	f043 0101 	orr.w	r1, r3, #1
  40270a:	6061      	str	r1, [r4, #4]
  40270c:	6013      	str	r3, [r2, #0]
  40270e:	e763      	b.n	4025d8 <_free_r+0x84>
  402710:	204005a8 	.word	0x204005a8
  402714:	204005b0 	.word	0x204005b0
  402718:	204009b4 	.word	0x204009b4
  40271c:	20400a7c 	.word	0x20400a7c

00402720 <__sfvwrite_r>:
  402720:	6893      	ldr	r3, [r2, #8]
  402722:	2b00      	cmp	r3, #0
  402724:	d073      	beq.n	40280e <__sfvwrite_r+0xee>
  402726:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40272a:	898b      	ldrh	r3, [r1, #12]
  40272c:	b083      	sub	sp, #12
  40272e:	460c      	mov	r4, r1
  402730:	0719      	lsls	r1, r3, #28
  402732:	9000      	str	r0, [sp, #0]
  402734:	4616      	mov	r6, r2
  402736:	d526      	bpl.n	402786 <__sfvwrite_r+0x66>
  402738:	6922      	ldr	r2, [r4, #16]
  40273a:	b322      	cbz	r2, 402786 <__sfvwrite_r+0x66>
  40273c:	f013 0002 	ands.w	r0, r3, #2
  402740:	6835      	ldr	r5, [r6, #0]
  402742:	d02c      	beq.n	40279e <__sfvwrite_r+0x7e>
  402744:	f04f 0900 	mov.w	r9, #0
  402748:	4fb0      	ldr	r7, [pc, #704]	; (402a0c <__sfvwrite_r+0x2ec>)
  40274a:	46c8      	mov	r8, r9
  40274c:	46b2      	mov	sl, r6
  40274e:	45b8      	cmp	r8, r7
  402750:	4643      	mov	r3, r8
  402752:	464a      	mov	r2, r9
  402754:	bf28      	it	cs
  402756:	463b      	movcs	r3, r7
  402758:	9800      	ldr	r0, [sp, #0]
  40275a:	f1b8 0f00 	cmp.w	r8, #0
  40275e:	d050      	beq.n	402802 <__sfvwrite_r+0xe2>
  402760:	69e1      	ldr	r1, [r4, #28]
  402762:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402764:	47b0      	blx	r6
  402766:	2800      	cmp	r0, #0
  402768:	dd58      	ble.n	40281c <__sfvwrite_r+0xfc>
  40276a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40276e:	1a1b      	subs	r3, r3, r0
  402770:	4481      	add	r9, r0
  402772:	eba8 0800 	sub.w	r8, r8, r0
  402776:	f8ca 3008 	str.w	r3, [sl, #8]
  40277a:	2b00      	cmp	r3, #0
  40277c:	d1e7      	bne.n	40274e <__sfvwrite_r+0x2e>
  40277e:	2000      	movs	r0, #0
  402780:	b003      	add	sp, #12
  402782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402786:	4621      	mov	r1, r4
  402788:	9800      	ldr	r0, [sp, #0]
  40278a:	f7ff fc51 	bl	402030 <__swsetup_r>
  40278e:	2800      	cmp	r0, #0
  402790:	f040 8133 	bne.w	4029fa <__sfvwrite_r+0x2da>
  402794:	89a3      	ldrh	r3, [r4, #12]
  402796:	6835      	ldr	r5, [r6, #0]
  402798:	f013 0002 	ands.w	r0, r3, #2
  40279c:	d1d2      	bne.n	402744 <__sfvwrite_r+0x24>
  40279e:	f013 0901 	ands.w	r9, r3, #1
  4027a2:	d145      	bne.n	402830 <__sfvwrite_r+0x110>
  4027a4:	464f      	mov	r7, r9
  4027a6:	9601      	str	r6, [sp, #4]
  4027a8:	b337      	cbz	r7, 4027f8 <__sfvwrite_r+0xd8>
  4027aa:	059a      	lsls	r2, r3, #22
  4027ac:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4027b0:	f140 8083 	bpl.w	4028ba <__sfvwrite_r+0x19a>
  4027b4:	4547      	cmp	r7, r8
  4027b6:	46c3      	mov	fp, r8
  4027b8:	f0c0 80ab 	bcc.w	402912 <__sfvwrite_r+0x1f2>
  4027bc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4027c0:	f040 80ac 	bne.w	40291c <__sfvwrite_r+0x1fc>
  4027c4:	6820      	ldr	r0, [r4, #0]
  4027c6:	46ba      	mov	sl, r7
  4027c8:	465a      	mov	r2, fp
  4027ca:	4649      	mov	r1, r9
  4027cc:	f000 fd92 	bl	4032f4 <memmove>
  4027d0:	68a2      	ldr	r2, [r4, #8]
  4027d2:	6823      	ldr	r3, [r4, #0]
  4027d4:	eba2 0208 	sub.w	r2, r2, r8
  4027d8:	445b      	add	r3, fp
  4027da:	60a2      	str	r2, [r4, #8]
  4027dc:	6023      	str	r3, [r4, #0]
  4027de:	9a01      	ldr	r2, [sp, #4]
  4027e0:	6893      	ldr	r3, [r2, #8]
  4027e2:	eba3 030a 	sub.w	r3, r3, sl
  4027e6:	44d1      	add	r9, sl
  4027e8:	eba7 070a 	sub.w	r7, r7, sl
  4027ec:	6093      	str	r3, [r2, #8]
  4027ee:	2b00      	cmp	r3, #0
  4027f0:	d0c5      	beq.n	40277e <__sfvwrite_r+0x5e>
  4027f2:	89a3      	ldrh	r3, [r4, #12]
  4027f4:	2f00      	cmp	r7, #0
  4027f6:	d1d8      	bne.n	4027aa <__sfvwrite_r+0x8a>
  4027f8:	f8d5 9000 	ldr.w	r9, [r5]
  4027fc:	686f      	ldr	r7, [r5, #4]
  4027fe:	3508      	adds	r5, #8
  402800:	e7d2      	b.n	4027a8 <__sfvwrite_r+0x88>
  402802:	f8d5 9000 	ldr.w	r9, [r5]
  402806:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40280a:	3508      	adds	r5, #8
  40280c:	e79f      	b.n	40274e <__sfvwrite_r+0x2e>
  40280e:	2000      	movs	r0, #0
  402810:	4770      	bx	lr
  402812:	4621      	mov	r1, r4
  402814:	9800      	ldr	r0, [sp, #0]
  402816:	f7ff fd1f 	bl	402258 <_fflush_r>
  40281a:	b370      	cbz	r0, 40287a <__sfvwrite_r+0x15a>
  40281c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402824:	f04f 30ff 	mov.w	r0, #4294967295
  402828:	81a3      	strh	r3, [r4, #12]
  40282a:	b003      	add	sp, #12
  40282c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402830:	4681      	mov	r9, r0
  402832:	4633      	mov	r3, r6
  402834:	464e      	mov	r6, r9
  402836:	46a8      	mov	r8, r5
  402838:	469a      	mov	sl, r3
  40283a:	464d      	mov	r5, r9
  40283c:	b34e      	cbz	r6, 402892 <__sfvwrite_r+0x172>
  40283e:	b380      	cbz	r0, 4028a2 <__sfvwrite_r+0x182>
  402840:	6820      	ldr	r0, [r4, #0]
  402842:	6923      	ldr	r3, [r4, #16]
  402844:	6962      	ldr	r2, [r4, #20]
  402846:	45b1      	cmp	r9, r6
  402848:	46cb      	mov	fp, r9
  40284a:	bf28      	it	cs
  40284c:	46b3      	movcs	fp, r6
  40284e:	4298      	cmp	r0, r3
  402850:	465f      	mov	r7, fp
  402852:	d904      	bls.n	40285e <__sfvwrite_r+0x13e>
  402854:	68a3      	ldr	r3, [r4, #8]
  402856:	4413      	add	r3, r2
  402858:	459b      	cmp	fp, r3
  40285a:	f300 80a6 	bgt.w	4029aa <__sfvwrite_r+0x28a>
  40285e:	4593      	cmp	fp, r2
  402860:	db4b      	blt.n	4028fa <__sfvwrite_r+0x1da>
  402862:	4613      	mov	r3, r2
  402864:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402866:	69e1      	ldr	r1, [r4, #28]
  402868:	9800      	ldr	r0, [sp, #0]
  40286a:	462a      	mov	r2, r5
  40286c:	47b8      	blx	r7
  40286e:	1e07      	subs	r7, r0, #0
  402870:	ddd4      	ble.n	40281c <__sfvwrite_r+0xfc>
  402872:	ebb9 0907 	subs.w	r9, r9, r7
  402876:	d0cc      	beq.n	402812 <__sfvwrite_r+0xf2>
  402878:	2001      	movs	r0, #1
  40287a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40287e:	1bdb      	subs	r3, r3, r7
  402880:	443d      	add	r5, r7
  402882:	1bf6      	subs	r6, r6, r7
  402884:	f8ca 3008 	str.w	r3, [sl, #8]
  402888:	2b00      	cmp	r3, #0
  40288a:	f43f af78 	beq.w	40277e <__sfvwrite_r+0x5e>
  40288e:	2e00      	cmp	r6, #0
  402890:	d1d5      	bne.n	40283e <__sfvwrite_r+0x11e>
  402892:	f108 0308 	add.w	r3, r8, #8
  402896:	e913 0060 	ldmdb	r3, {r5, r6}
  40289a:	4698      	mov	r8, r3
  40289c:	3308      	adds	r3, #8
  40289e:	2e00      	cmp	r6, #0
  4028a0:	d0f9      	beq.n	402896 <__sfvwrite_r+0x176>
  4028a2:	4632      	mov	r2, r6
  4028a4:	210a      	movs	r1, #10
  4028a6:	4628      	mov	r0, r5
  4028a8:	f000 fc3a 	bl	403120 <memchr>
  4028ac:	2800      	cmp	r0, #0
  4028ae:	f000 80a1 	beq.w	4029f4 <__sfvwrite_r+0x2d4>
  4028b2:	3001      	adds	r0, #1
  4028b4:	eba0 0905 	sub.w	r9, r0, r5
  4028b8:	e7c2      	b.n	402840 <__sfvwrite_r+0x120>
  4028ba:	6820      	ldr	r0, [r4, #0]
  4028bc:	6923      	ldr	r3, [r4, #16]
  4028be:	4298      	cmp	r0, r3
  4028c0:	d802      	bhi.n	4028c8 <__sfvwrite_r+0x1a8>
  4028c2:	6963      	ldr	r3, [r4, #20]
  4028c4:	429f      	cmp	r7, r3
  4028c6:	d25d      	bcs.n	402984 <__sfvwrite_r+0x264>
  4028c8:	45b8      	cmp	r8, r7
  4028ca:	bf28      	it	cs
  4028cc:	46b8      	movcs	r8, r7
  4028ce:	4642      	mov	r2, r8
  4028d0:	4649      	mov	r1, r9
  4028d2:	f000 fd0f 	bl	4032f4 <memmove>
  4028d6:	68a3      	ldr	r3, [r4, #8]
  4028d8:	6822      	ldr	r2, [r4, #0]
  4028da:	eba3 0308 	sub.w	r3, r3, r8
  4028de:	4442      	add	r2, r8
  4028e0:	60a3      	str	r3, [r4, #8]
  4028e2:	6022      	str	r2, [r4, #0]
  4028e4:	b10b      	cbz	r3, 4028ea <__sfvwrite_r+0x1ca>
  4028e6:	46c2      	mov	sl, r8
  4028e8:	e779      	b.n	4027de <__sfvwrite_r+0xbe>
  4028ea:	4621      	mov	r1, r4
  4028ec:	9800      	ldr	r0, [sp, #0]
  4028ee:	f7ff fcb3 	bl	402258 <_fflush_r>
  4028f2:	2800      	cmp	r0, #0
  4028f4:	d192      	bne.n	40281c <__sfvwrite_r+0xfc>
  4028f6:	46c2      	mov	sl, r8
  4028f8:	e771      	b.n	4027de <__sfvwrite_r+0xbe>
  4028fa:	465a      	mov	r2, fp
  4028fc:	4629      	mov	r1, r5
  4028fe:	f000 fcf9 	bl	4032f4 <memmove>
  402902:	68a2      	ldr	r2, [r4, #8]
  402904:	6823      	ldr	r3, [r4, #0]
  402906:	eba2 020b 	sub.w	r2, r2, fp
  40290a:	445b      	add	r3, fp
  40290c:	60a2      	str	r2, [r4, #8]
  40290e:	6023      	str	r3, [r4, #0]
  402910:	e7af      	b.n	402872 <__sfvwrite_r+0x152>
  402912:	6820      	ldr	r0, [r4, #0]
  402914:	46b8      	mov	r8, r7
  402916:	46ba      	mov	sl, r7
  402918:	46bb      	mov	fp, r7
  40291a:	e755      	b.n	4027c8 <__sfvwrite_r+0xa8>
  40291c:	6962      	ldr	r2, [r4, #20]
  40291e:	6820      	ldr	r0, [r4, #0]
  402920:	6921      	ldr	r1, [r4, #16]
  402922:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  402926:	eba0 0a01 	sub.w	sl, r0, r1
  40292a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40292e:	f10a 0001 	add.w	r0, sl, #1
  402932:	ea4f 0868 	mov.w	r8, r8, asr #1
  402936:	4438      	add	r0, r7
  402938:	4540      	cmp	r0, r8
  40293a:	4642      	mov	r2, r8
  40293c:	bf84      	itt	hi
  40293e:	4680      	movhi	r8, r0
  402940:	4642      	movhi	r2, r8
  402942:	055b      	lsls	r3, r3, #21
  402944:	d544      	bpl.n	4029d0 <__sfvwrite_r+0x2b0>
  402946:	4611      	mov	r1, r2
  402948:	9800      	ldr	r0, [sp, #0]
  40294a:	f000 f921 	bl	402b90 <_malloc_r>
  40294e:	4683      	mov	fp, r0
  402950:	2800      	cmp	r0, #0
  402952:	d055      	beq.n	402a00 <__sfvwrite_r+0x2e0>
  402954:	4652      	mov	r2, sl
  402956:	6921      	ldr	r1, [r4, #16]
  402958:	f000 fc32 	bl	4031c0 <memcpy>
  40295c:	89a3      	ldrh	r3, [r4, #12]
  40295e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  402962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402966:	81a3      	strh	r3, [r4, #12]
  402968:	eb0b 000a 	add.w	r0, fp, sl
  40296c:	eba8 030a 	sub.w	r3, r8, sl
  402970:	f8c4 b010 	str.w	fp, [r4, #16]
  402974:	f8c4 8014 	str.w	r8, [r4, #20]
  402978:	6020      	str	r0, [r4, #0]
  40297a:	60a3      	str	r3, [r4, #8]
  40297c:	46b8      	mov	r8, r7
  40297e:	46ba      	mov	sl, r7
  402980:	46bb      	mov	fp, r7
  402982:	e721      	b.n	4027c8 <__sfvwrite_r+0xa8>
  402984:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  402988:	42b9      	cmp	r1, r7
  40298a:	bf28      	it	cs
  40298c:	4639      	movcs	r1, r7
  40298e:	464a      	mov	r2, r9
  402990:	fb91 f1f3 	sdiv	r1, r1, r3
  402994:	9800      	ldr	r0, [sp, #0]
  402996:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402998:	fb03 f301 	mul.w	r3, r3, r1
  40299c:	69e1      	ldr	r1, [r4, #28]
  40299e:	47b0      	blx	r6
  4029a0:	f1b0 0a00 	subs.w	sl, r0, #0
  4029a4:	f73f af1b 	bgt.w	4027de <__sfvwrite_r+0xbe>
  4029a8:	e738      	b.n	40281c <__sfvwrite_r+0xfc>
  4029aa:	461a      	mov	r2, r3
  4029ac:	4629      	mov	r1, r5
  4029ae:	9301      	str	r3, [sp, #4]
  4029b0:	f000 fca0 	bl	4032f4 <memmove>
  4029b4:	6822      	ldr	r2, [r4, #0]
  4029b6:	9b01      	ldr	r3, [sp, #4]
  4029b8:	9800      	ldr	r0, [sp, #0]
  4029ba:	441a      	add	r2, r3
  4029bc:	6022      	str	r2, [r4, #0]
  4029be:	4621      	mov	r1, r4
  4029c0:	f7ff fc4a 	bl	402258 <_fflush_r>
  4029c4:	9b01      	ldr	r3, [sp, #4]
  4029c6:	2800      	cmp	r0, #0
  4029c8:	f47f af28 	bne.w	40281c <__sfvwrite_r+0xfc>
  4029cc:	461f      	mov	r7, r3
  4029ce:	e750      	b.n	402872 <__sfvwrite_r+0x152>
  4029d0:	9800      	ldr	r0, [sp, #0]
  4029d2:	f000 fcff 	bl	4033d4 <_realloc_r>
  4029d6:	4683      	mov	fp, r0
  4029d8:	2800      	cmp	r0, #0
  4029da:	d1c5      	bne.n	402968 <__sfvwrite_r+0x248>
  4029dc:	9d00      	ldr	r5, [sp, #0]
  4029de:	6921      	ldr	r1, [r4, #16]
  4029e0:	4628      	mov	r0, r5
  4029e2:	f7ff fdb7 	bl	402554 <_free_r>
  4029e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4029ea:	220c      	movs	r2, #12
  4029ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4029f0:	602a      	str	r2, [r5, #0]
  4029f2:	e715      	b.n	402820 <__sfvwrite_r+0x100>
  4029f4:	f106 0901 	add.w	r9, r6, #1
  4029f8:	e722      	b.n	402840 <__sfvwrite_r+0x120>
  4029fa:	f04f 30ff 	mov.w	r0, #4294967295
  4029fe:	e6bf      	b.n	402780 <__sfvwrite_r+0x60>
  402a00:	9a00      	ldr	r2, [sp, #0]
  402a02:	230c      	movs	r3, #12
  402a04:	6013      	str	r3, [r2, #0]
  402a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402a0a:	e709      	b.n	402820 <__sfvwrite_r+0x100>
  402a0c:	7ffffc00 	.word	0x7ffffc00

00402a10 <_fwalk_reent>:
  402a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402a14:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  402a18:	d01f      	beq.n	402a5a <_fwalk_reent+0x4a>
  402a1a:	4688      	mov	r8, r1
  402a1c:	4606      	mov	r6, r0
  402a1e:	f04f 0900 	mov.w	r9, #0
  402a22:	687d      	ldr	r5, [r7, #4]
  402a24:	68bc      	ldr	r4, [r7, #8]
  402a26:	3d01      	subs	r5, #1
  402a28:	d411      	bmi.n	402a4e <_fwalk_reent+0x3e>
  402a2a:	89a3      	ldrh	r3, [r4, #12]
  402a2c:	2b01      	cmp	r3, #1
  402a2e:	f105 35ff 	add.w	r5, r5, #4294967295
  402a32:	d908      	bls.n	402a46 <_fwalk_reent+0x36>
  402a34:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  402a38:	3301      	adds	r3, #1
  402a3a:	4621      	mov	r1, r4
  402a3c:	4630      	mov	r0, r6
  402a3e:	d002      	beq.n	402a46 <_fwalk_reent+0x36>
  402a40:	47c0      	blx	r8
  402a42:	ea49 0900 	orr.w	r9, r9, r0
  402a46:	1c6b      	adds	r3, r5, #1
  402a48:	f104 0468 	add.w	r4, r4, #104	; 0x68
  402a4c:	d1ed      	bne.n	402a2a <_fwalk_reent+0x1a>
  402a4e:	683f      	ldr	r7, [r7, #0]
  402a50:	2f00      	cmp	r7, #0
  402a52:	d1e6      	bne.n	402a22 <_fwalk_reent+0x12>
  402a54:	4648      	mov	r0, r9
  402a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402a5a:	46b9      	mov	r9, r7
  402a5c:	4648      	mov	r0, r9
  402a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402a62:	bf00      	nop

00402a64 <__locale_mb_cur_max>:
  402a64:	4b04      	ldr	r3, [pc, #16]	; (402a78 <__locale_mb_cur_max+0x14>)
  402a66:	4a05      	ldr	r2, [pc, #20]	; (402a7c <__locale_mb_cur_max+0x18>)
  402a68:	681b      	ldr	r3, [r3, #0]
  402a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  402a6c:	2b00      	cmp	r3, #0
  402a6e:	bf08      	it	eq
  402a70:	4613      	moveq	r3, r2
  402a72:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  402a76:	4770      	bx	lr
  402a78:	20400008 	.word	0x20400008
  402a7c:	2040043c 	.word	0x2040043c

00402a80 <__retarget_lock_init_recursive>:
  402a80:	4770      	bx	lr
  402a82:	bf00      	nop

00402a84 <__retarget_lock_close_recursive>:
  402a84:	4770      	bx	lr
  402a86:	bf00      	nop

00402a88 <__retarget_lock_acquire_recursive>:
  402a88:	4770      	bx	lr
  402a8a:	bf00      	nop

00402a8c <__retarget_lock_release_recursive>:
  402a8c:	4770      	bx	lr
  402a8e:	bf00      	nop

00402a90 <__swhatbuf_r>:
  402a90:	b570      	push	{r4, r5, r6, lr}
  402a92:	460c      	mov	r4, r1
  402a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402a98:	2900      	cmp	r1, #0
  402a9a:	b090      	sub	sp, #64	; 0x40
  402a9c:	4615      	mov	r5, r2
  402a9e:	461e      	mov	r6, r3
  402aa0:	db14      	blt.n	402acc <__swhatbuf_r+0x3c>
  402aa2:	aa01      	add	r2, sp, #4
  402aa4:	f001 f80e 	bl	403ac4 <_fstat_r>
  402aa8:	2800      	cmp	r0, #0
  402aaa:	db0f      	blt.n	402acc <__swhatbuf_r+0x3c>
  402aac:	9a02      	ldr	r2, [sp, #8]
  402aae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  402ab2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  402ab6:	fab2 f282 	clz	r2, r2
  402aba:	0952      	lsrs	r2, r2, #5
  402abc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402ac0:	f44f 6000 	mov.w	r0, #2048	; 0x800
  402ac4:	6032      	str	r2, [r6, #0]
  402ac6:	602b      	str	r3, [r5, #0]
  402ac8:	b010      	add	sp, #64	; 0x40
  402aca:	bd70      	pop	{r4, r5, r6, pc}
  402acc:	89a2      	ldrh	r2, [r4, #12]
  402ace:	2300      	movs	r3, #0
  402ad0:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  402ad4:	6033      	str	r3, [r6, #0]
  402ad6:	d004      	beq.n	402ae2 <__swhatbuf_r+0x52>
  402ad8:	2240      	movs	r2, #64	; 0x40
  402ada:	4618      	mov	r0, r3
  402adc:	602a      	str	r2, [r5, #0]
  402ade:	b010      	add	sp, #64	; 0x40
  402ae0:	bd70      	pop	{r4, r5, r6, pc}
  402ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402ae6:	602b      	str	r3, [r5, #0]
  402ae8:	b010      	add	sp, #64	; 0x40
  402aea:	bd70      	pop	{r4, r5, r6, pc}

00402aec <__smakebuf_r>:
  402aec:	898a      	ldrh	r2, [r1, #12]
  402aee:	0792      	lsls	r2, r2, #30
  402af0:	460b      	mov	r3, r1
  402af2:	d506      	bpl.n	402b02 <__smakebuf_r+0x16>
  402af4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  402af8:	2101      	movs	r1, #1
  402afa:	601a      	str	r2, [r3, #0]
  402afc:	611a      	str	r2, [r3, #16]
  402afe:	6159      	str	r1, [r3, #20]
  402b00:	4770      	bx	lr
  402b02:	b5f0      	push	{r4, r5, r6, r7, lr}
  402b04:	b083      	sub	sp, #12
  402b06:	ab01      	add	r3, sp, #4
  402b08:	466a      	mov	r2, sp
  402b0a:	460c      	mov	r4, r1
  402b0c:	4606      	mov	r6, r0
  402b0e:	f7ff ffbf 	bl	402a90 <__swhatbuf_r>
  402b12:	9900      	ldr	r1, [sp, #0]
  402b14:	4605      	mov	r5, r0
  402b16:	4630      	mov	r0, r6
  402b18:	f000 f83a 	bl	402b90 <_malloc_r>
  402b1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402b20:	b1d8      	cbz	r0, 402b5a <__smakebuf_r+0x6e>
  402b22:	9a01      	ldr	r2, [sp, #4]
  402b24:	4f15      	ldr	r7, [pc, #84]	; (402b7c <__smakebuf_r+0x90>)
  402b26:	9900      	ldr	r1, [sp, #0]
  402b28:	63f7      	str	r7, [r6, #60]	; 0x3c
  402b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402b2e:	81a3      	strh	r3, [r4, #12]
  402b30:	6020      	str	r0, [r4, #0]
  402b32:	6120      	str	r0, [r4, #16]
  402b34:	6161      	str	r1, [r4, #20]
  402b36:	b91a      	cbnz	r2, 402b40 <__smakebuf_r+0x54>
  402b38:	432b      	orrs	r3, r5
  402b3a:	81a3      	strh	r3, [r4, #12]
  402b3c:	b003      	add	sp, #12
  402b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402b40:	4630      	mov	r0, r6
  402b42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402b46:	f000 ffd1 	bl	403aec <_isatty_r>
  402b4a:	b1a0      	cbz	r0, 402b76 <__smakebuf_r+0x8a>
  402b4c:	89a3      	ldrh	r3, [r4, #12]
  402b4e:	f023 0303 	bic.w	r3, r3, #3
  402b52:	f043 0301 	orr.w	r3, r3, #1
  402b56:	b21b      	sxth	r3, r3
  402b58:	e7ee      	b.n	402b38 <__smakebuf_r+0x4c>
  402b5a:	059a      	lsls	r2, r3, #22
  402b5c:	d4ee      	bmi.n	402b3c <__smakebuf_r+0x50>
  402b5e:	f023 0303 	bic.w	r3, r3, #3
  402b62:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402b66:	f043 0302 	orr.w	r3, r3, #2
  402b6a:	2101      	movs	r1, #1
  402b6c:	81a3      	strh	r3, [r4, #12]
  402b6e:	6022      	str	r2, [r4, #0]
  402b70:	6122      	str	r2, [r4, #16]
  402b72:	6161      	str	r1, [r4, #20]
  402b74:	e7e2      	b.n	402b3c <__smakebuf_r+0x50>
  402b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402b7a:	e7dd      	b.n	402b38 <__smakebuf_r+0x4c>
  402b7c:	004022ad 	.word	0x004022ad

00402b80 <malloc>:
  402b80:	4b02      	ldr	r3, [pc, #8]	; (402b8c <malloc+0xc>)
  402b82:	4601      	mov	r1, r0
  402b84:	6818      	ldr	r0, [r3, #0]
  402b86:	f000 b803 	b.w	402b90 <_malloc_r>
  402b8a:	bf00      	nop
  402b8c:	20400008 	.word	0x20400008

00402b90 <_malloc_r>:
  402b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402b94:	f101 060b 	add.w	r6, r1, #11
  402b98:	2e16      	cmp	r6, #22
  402b9a:	b083      	sub	sp, #12
  402b9c:	4605      	mov	r5, r0
  402b9e:	f240 809e 	bls.w	402cde <_malloc_r+0x14e>
  402ba2:	f036 0607 	bics.w	r6, r6, #7
  402ba6:	f100 80bd 	bmi.w	402d24 <_malloc_r+0x194>
  402baa:	42b1      	cmp	r1, r6
  402bac:	f200 80ba 	bhi.w	402d24 <_malloc_r+0x194>
  402bb0:	f000 fc04 	bl	4033bc <__malloc_lock>
  402bb4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  402bb8:	f0c0 8293 	bcc.w	4030e2 <_malloc_r+0x552>
  402bbc:	0a73      	lsrs	r3, r6, #9
  402bbe:	f000 80b8 	beq.w	402d32 <_malloc_r+0x1a2>
  402bc2:	2b04      	cmp	r3, #4
  402bc4:	f200 8179 	bhi.w	402eba <_malloc_r+0x32a>
  402bc8:	09b3      	lsrs	r3, r6, #6
  402bca:	f103 0039 	add.w	r0, r3, #57	; 0x39
  402bce:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  402bd2:	00c3      	lsls	r3, r0, #3
  402bd4:	4fbf      	ldr	r7, [pc, #764]	; (402ed4 <_malloc_r+0x344>)
  402bd6:	443b      	add	r3, r7
  402bd8:	f1a3 0108 	sub.w	r1, r3, #8
  402bdc:	685c      	ldr	r4, [r3, #4]
  402bde:	42a1      	cmp	r1, r4
  402be0:	d106      	bne.n	402bf0 <_malloc_r+0x60>
  402be2:	e00c      	b.n	402bfe <_malloc_r+0x6e>
  402be4:	2a00      	cmp	r2, #0
  402be6:	f280 80aa 	bge.w	402d3e <_malloc_r+0x1ae>
  402bea:	68e4      	ldr	r4, [r4, #12]
  402bec:	42a1      	cmp	r1, r4
  402bee:	d006      	beq.n	402bfe <_malloc_r+0x6e>
  402bf0:	6863      	ldr	r3, [r4, #4]
  402bf2:	f023 0303 	bic.w	r3, r3, #3
  402bf6:	1b9a      	subs	r2, r3, r6
  402bf8:	2a0f      	cmp	r2, #15
  402bfa:	ddf3      	ble.n	402be4 <_malloc_r+0x54>
  402bfc:	4670      	mov	r0, lr
  402bfe:	693c      	ldr	r4, [r7, #16]
  402c00:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 402ee8 <_malloc_r+0x358>
  402c04:	4574      	cmp	r4, lr
  402c06:	f000 81ab 	beq.w	402f60 <_malloc_r+0x3d0>
  402c0a:	6863      	ldr	r3, [r4, #4]
  402c0c:	f023 0303 	bic.w	r3, r3, #3
  402c10:	1b9a      	subs	r2, r3, r6
  402c12:	2a0f      	cmp	r2, #15
  402c14:	f300 8190 	bgt.w	402f38 <_malloc_r+0x3a8>
  402c18:	2a00      	cmp	r2, #0
  402c1a:	f8c7 e014 	str.w	lr, [r7, #20]
  402c1e:	f8c7 e010 	str.w	lr, [r7, #16]
  402c22:	f280 809d 	bge.w	402d60 <_malloc_r+0x1d0>
  402c26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402c2a:	f080 8161 	bcs.w	402ef0 <_malloc_r+0x360>
  402c2e:	08db      	lsrs	r3, r3, #3
  402c30:	f103 0c01 	add.w	ip, r3, #1
  402c34:	1099      	asrs	r1, r3, #2
  402c36:	687a      	ldr	r2, [r7, #4]
  402c38:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  402c3c:	f8c4 8008 	str.w	r8, [r4, #8]
  402c40:	2301      	movs	r3, #1
  402c42:	408b      	lsls	r3, r1
  402c44:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  402c48:	4313      	orrs	r3, r2
  402c4a:	3908      	subs	r1, #8
  402c4c:	60e1      	str	r1, [r4, #12]
  402c4e:	607b      	str	r3, [r7, #4]
  402c50:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  402c54:	f8c8 400c 	str.w	r4, [r8, #12]
  402c58:	1082      	asrs	r2, r0, #2
  402c5a:	2401      	movs	r4, #1
  402c5c:	4094      	lsls	r4, r2
  402c5e:	429c      	cmp	r4, r3
  402c60:	f200 808b 	bhi.w	402d7a <_malloc_r+0x1ea>
  402c64:	421c      	tst	r4, r3
  402c66:	d106      	bne.n	402c76 <_malloc_r+0xe6>
  402c68:	f020 0003 	bic.w	r0, r0, #3
  402c6c:	0064      	lsls	r4, r4, #1
  402c6e:	421c      	tst	r4, r3
  402c70:	f100 0004 	add.w	r0, r0, #4
  402c74:	d0fa      	beq.n	402c6c <_malloc_r+0xdc>
  402c76:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  402c7a:	46cc      	mov	ip, r9
  402c7c:	4680      	mov	r8, r0
  402c7e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  402c82:	459c      	cmp	ip, r3
  402c84:	d107      	bne.n	402c96 <_malloc_r+0x106>
  402c86:	e16d      	b.n	402f64 <_malloc_r+0x3d4>
  402c88:	2a00      	cmp	r2, #0
  402c8a:	f280 817b 	bge.w	402f84 <_malloc_r+0x3f4>
  402c8e:	68db      	ldr	r3, [r3, #12]
  402c90:	459c      	cmp	ip, r3
  402c92:	f000 8167 	beq.w	402f64 <_malloc_r+0x3d4>
  402c96:	6859      	ldr	r1, [r3, #4]
  402c98:	f021 0103 	bic.w	r1, r1, #3
  402c9c:	1b8a      	subs	r2, r1, r6
  402c9e:	2a0f      	cmp	r2, #15
  402ca0:	ddf2      	ble.n	402c88 <_malloc_r+0xf8>
  402ca2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  402ca6:	f8d3 8008 	ldr.w	r8, [r3, #8]
  402caa:	9300      	str	r3, [sp, #0]
  402cac:	199c      	adds	r4, r3, r6
  402cae:	4628      	mov	r0, r5
  402cb0:	f046 0601 	orr.w	r6, r6, #1
  402cb4:	f042 0501 	orr.w	r5, r2, #1
  402cb8:	605e      	str	r6, [r3, #4]
  402cba:	f8c8 c00c 	str.w	ip, [r8, #12]
  402cbe:	f8cc 8008 	str.w	r8, [ip, #8]
  402cc2:	617c      	str	r4, [r7, #20]
  402cc4:	613c      	str	r4, [r7, #16]
  402cc6:	f8c4 e00c 	str.w	lr, [r4, #12]
  402cca:	f8c4 e008 	str.w	lr, [r4, #8]
  402cce:	6065      	str	r5, [r4, #4]
  402cd0:	505a      	str	r2, [r3, r1]
  402cd2:	f000 fb79 	bl	4033c8 <__malloc_unlock>
  402cd6:	9b00      	ldr	r3, [sp, #0]
  402cd8:	f103 0408 	add.w	r4, r3, #8
  402cdc:	e01e      	b.n	402d1c <_malloc_r+0x18c>
  402cde:	2910      	cmp	r1, #16
  402ce0:	d820      	bhi.n	402d24 <_malloc_r+0x194>
  402ce2:	f000 fb6b 	bl	4033bc <__malloc_lock>
  402ce6:	2610      	movs	r6, #16
  402ce8:	2318      	movs	r3, #24
  402cea:	2002      	movs	r0, #2
  402cec:	4f79      	ldr	r7, [pc, #484]	; (402ed4 <_malloc_r+0x344>)
  402cee:	443b      	add	r3, r7
  402cf0:	f1a3 0208 	sub.w	r2, r3, #8
  402cf4:	685c      	ldr	r4, [r3, #4]
  402cf6:	4294      	cmp	r4, r2
  402cf8:	f000 813d 	beq.w	402f76 <_malloc_r+0x3e6>
  402cfc:	6863      	ldr	r3, [r4, #4]
  402cfe:	68e1      	ldr	r1, [r4, #12]
  402d00:	68a6      	ldr	r6, [r4, #8]
  402d02:	f023 0303 	bic.w	r3, r3, #3
  402d06:	4423      	add	r3, r4
  402d08:	4628      	mov	r0, r5
  402d0a:	685a      	ldr	r2, [r3, #4]
  402d0c:	60f1      	str	r1, [r6, #12]
  402d0e:	f042 0201 	orr.w	r2, r2, #1
  402d12:	608e      	str	r6, [r1, #8]
  402d14:	605a      	str	r2, [r3, #4]
  402d16:	f000 fb57 	bl	4033c8 <__malloc_unlock>
  402d1a:	3408      	adds	r4, #8
  402d1c:	4620      	mov	r0, r4
  402d1e:	b003      	add	sp, #12
  402d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d24:	2400      	movs	r4, #0
  402d26:	230c      	movs	r3, #12
  402d28:	4620      	mov	r0, r4
  402d2a:	602b      	str	r3, [r5, #0]
  402d2c:	b003      	add	sp, #12
  402d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d32:	2040      	movs	r0, #64	; 0x40
  402d34:	f44f 7300 	mov.w	r3, #512	; 0x200
  402d38:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  402d3c:	e74a      	b.n	402bd4 <_malloc_r+0x44>
  402d3e:	4423      	add	r3, r4
  402d40:	68e1      	ldr	r1, [r4, #12]
  402d42:	685a      	ldr	r2, [r3, #4]
  402d44:	68a6      	ldr	r6, [r4, #8]
  402d46:	f042 0201 	orr.w	r2, r2, #1
  402d4a:	60f1      	str	r1, [r6, #12]
  402d4c:	4628      	mov	r0, r5
  402d4e:	608e      	str	r6, [r1, #8]
  402d50:	605a      	str	r2, [r3, #4]
  402d52:	f000 fb39 	bl	4033c8 <__malloc_unlock>
  402d56:	3408      	adds	r4, #8
  402d58:	4620      	mov	r0, r4
  402d5a:	b003      	add	sp, #12
  402d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d60:	4423      	add	r3, r4
  402d62:	4628      	mov	r0, r5
  402d64:	685a      	ldr	r2, [r3, #4]
  402d66:	f042 0201 	orr.w	r2, r2, #1
  402d6a:	605a      	str	r2, [r3, #4]
  402d6c:	f000 fb2c 	bl	4033c8 <__malloc_unlock>
  402d70:	3408      	adds	r4, #8
  402d72:	4620      	mov	r0, r4
  402d74:	b003      	add	sp, #12
  402d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d7a:	68bc      	ldr	r4, [r7, #8]
  402d7c:	6863      	ldr	r3, [r4, #4]
  402d7e:	f023 0803 	bic.w	r8, r3, #3
  402d82:	45b0      	cmp	r8, r6
  402d84:	d304      	bcc.n	402d90 <_malloc_r+0x200>
  402d86:	eba8 0306 	sub.w	r3, r8, r6
  402d8a:	2b0f      	cmp	r3, #15
  402d8c:	f300 8085 	bgt.w	402e9a <_malloc_r+0x30a>
  402d90:	f8df 9158 	ldr.w	r9, [pc, #344]	; 402eec <_malloc_r+0x35c>
  402d94:	4b50      	ldr	r3, [pc, #320]	; (402ed8 <_malloc_r+0x348>)
  402d96:	f8d9 2000 	ldr.w	r2, [r9]
  402d9a:	681b      	ldr	r3, [r3, #0]
  402d9c:	3201      	adds	r2, #1
  402d9e:	4433      	add	r3, r6
  402da0:	eb04 0a08 	add.w	sl, r4, r8
  402da4:	f000 8155 	beq.w	403052 <_malloc_r+0x4c2>
  402da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  402dac:	330f      	adds	r3, #15
  402dae:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  402db2:	f02b 0b0f 	bic.w	fp, fp, #15
  402db6:	4659      	mov	r1, fp
  402db8:	4628      	mov	r0, r5
  402dba:	f000 fcb1 	bl	403720 <_sbrk_r>
  402dbe:	1c41      	adds	r1, r0, #1
  402dc0:	4602      	mov	r2, r0
  402dc2:	f000 80fc 	beq.w	402fbe <_malloc_r+0x42e>
  402dc6:	4582      	cmp	sl, r0
  402dc8:	f200 80f7 	bhi.w	402fba <_malloc_r+0x42a>
  402dcc:	4b43      	ldr	r3, [pc, #268]	; (402edc <_malloc_r+0x34c>)
  402dce:	6819      	ldr	r1, [r3, #0]
  402dd0:	4459      	add	r1, fp
  402dd2:	6019      	str	r1, [r3, #0]
  402dd4:	f000 814d 	beq.w	403072 <_malloc_r+0x4e2>
  402dd8:	f8d9 0000 	ldr.w	r0, [r9]
  402ddc:	3001      	adds	r0, #1
  402dde:	bf1b      	ittet	ne
  402de0:	eba2 0a0a 	subne.w	sl, r2, sl
  402de4:	4451      	addne	r1, sl
  402de6:	f8c9 2000 	streq.w	r2, [r9]
  402dea:	6019      	strne	r1, [r3, #0]
  402dec:	f012 0107 	ands.w	r1, r2, #7
  402df0:	f000 8115 	beq.w	40301e <_malloc_r+0x48e>
  402df4:	f1c1 0008 	rsb	r0, r1, #8
  402df8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  402dfc:	4402      	add	r2, r0
  402dfe:	3108      	adds	r1, #8
  402e00:	eb02 090b 	add.w	r9, r2, fp
  402e04:	f3c9 090b 	ubfx	r9, r9, #0, #12
  402e08:	eba1 0909 	sub.w	r9, r1, r9
  402e0c:	4649      	mov	r1, r9
  402e0e:	4628      	mov	r0, r5
  402e10:	9301      	str	r3, [sp, #4]
  402e12:	9200      	str	r2, [sp, #0]
  402e14:	f000 fc84 	bl	403720 <_sbrk_r>
  402e18:	1c43      	adds	r3, r0, #1
  402e1a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  402e1e:	f000 8143 	beq.w	4030a8 <_malloc_r+0x518>
  402e22:	1a80      	subs	r0, r0, r2
  402e24:	4448      	add	r0, r9
  402e26:	f040 0001 	orr.w	r0, r0, #1
  402e2a:	6819      	ldr	r1, [r3, #0]
  402e2c:	60ba      	str	r2, [r7, #8]
  402e2e:	4449      	add	r1, r9
  402e30:	42bc      	cmp	r4, r7
  402e32:	6050      	str	r0, [r2, #4]
  402e34:	6019      	str	r1, [r3, #0]
  402e36:	d017      	beq.n	402e68 <_malloc_r+0x2d8>
  402e38:	f1b8 0f0f 	cmp.w	r8, #15
  402e3c:	f240 80fb 	bls.w	403036 <_malloc_r+0x4a6>
  402e40:	6860      	ldr	r0, [r4, #4]
  402e42:	f1a8 020c 	sub.w	r2, r8, #12
  402e46:	f022 0207 	bic.w	r2, r2, #7
  402e4a:	eb04 0e02 	add.w	lr, r4, r2
  402e4e:	f000 0001 	and.w	r0, r0, #1
  402e52:	f04f 0c05 	mov.w	ip, #5
  402e56:	4310      	orrs	r0, r2
  402e58:	2a0f      	cmp	r2, #15
  402e5a:	6060      	str	r0, [r4, #4]
  402e5c:	f8ce c004 	str.w	ip, [lr, #4]
  402e60:	f8ce c008 	str.w	ip, [lr, #8]
  402e64:	f200 8117 	bhi.w	403096 <_malloc_r+0x506>
  402e68:	4b1d      	ldr	r3, [pc, #116]	; (402ee0 <_malloc_r+0x350>)
  402e6a:	68bc      	ldr	r4, [r7, #8]
  402e6c:	681a      	ldr	r2, [r3, #0]
  402e6e:	4291      	cmp	r1, r2
  402e70:	bf88      	it	hi
  402e72:	6019      	strhi	r1, [r3, #0]
  402e74:	4b1b      	ldr	r3, [pc, #108]	; (402ee4 <_malloc_r+0x354>)
  402e76:	681a      	ldr	r2, [r3, #0]
  402e78:	4291      	cmp	r1, r2
  402e7a:	6862      	ldr	r2, [r4, #4]
  402e7c:	bf88      	it	hi
  402e7e:	6019      	strhi	r1, [r3, #0]
  402e80:	f022 0203 	bic.w	r2, r2, #3
  402e84:	4296      	cmp	r6, r2
  402e86:	eba2 0306 	sub.w	r3, r2, r6
  402e8a:	d801      	bhi.n	402e90 <_malloc_r+0x300>
  402e8c:	2b0f      	cmp	r3, #15
  402e8e:	dc04      	bgt.n	402e9a <_malloc_r+0x30a>
  402e90:	4628      	mov	r0, r5
  402e92:	f000 fa99 	bl	4033c8 <__malloc_unlock>
  402e96:	2400      	movs	r4, #0
  402e98:	e740      	b.n	402d1c <_malloc_r+0x18c>
  402e9a:	19a2      	adds	r2, r4, r6
  402e9c:	f043 0301 	orr.w	r3, r3, #1
  402ea0:	f046 0601 	orr.w	r6, r6, #1
  402ea4:	6066      	str	r6, [r4, #4]
  402ea6:	4628      	mov	r0, r5
  402ea8:	60ba      	str	r2, [r7, #8]
  402eaa:	6053      	str	r3, [r2, #4]
  402eac:	f000 fa8c 	bl	4033c8 <__malloc_unlock>
  402eb0:	3408      	adds	r4, #8
  402eb2:	4620      	mov	r0, r4
  402eb4:	b003      	add	sp, #12
  402eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402eba:	2b14      	cmp	r3, #20
  402ebc:	d971      	bls.n	402fa2 <_malloc_r+0x412>
  402ebe:	2b54      	cmp	r3, #84	; 0x54
  402ec0:	f200 80a3 	bhi.w	40300a <_malloc_r+0x47a>
  402ec4:	0b33      	lsrs	r3, r6, #12
  402ec6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  402eca:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  402ece:	00c3      	lsls	r3, r0, #3
  402ed0:	e680      	b.n	402bd4 <_malloc_r+0x44>
  402ed2:	bf00      	nop
  402ed4:	204005a8 	.word	0x204005a8
  402ed8:	20400a7c 	.word	0x20400a7c
  402edc:	20400a4c 	.word	0x20400a4c
  402ee0:	20400a74 	.word	0x20400a74
  402ee4:	20400a78 	.word	0x20400a78
  402ee8:	204005b0 	.word	0x204005b0
  402eec:	204009b0 	.word	0x204009b0
  402ef0:	0a5a      	lsrs	r2, r3, #9
  402ef2:	2a04      	cmp	r2, #4
  402ef4:	d95b      	bls.n	402fae <_malloc_r+0x41e>
  402ef6:	2a14      	cmp	r2, #20
  402ef8:	f200 80ae 	bhi.w	403058 <_malloc_r+0x4c8>
  402efc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  402f00:	00c9      	lsls	r1, r1, #3
  402f02:	325b      	adds	r2, #91	; 0x5b
  402f04:	eb07 0c01 	add.w	ip, r7, r1
  402f08:	5879      	ldr	r1, [r7, r1]
  402f0a:	f1ac 0c08 	sub.w	ip, ip, #8
  402f0e:	458c      	cmp	ip, r1
  402f10:	f000 8088 	beq.w	403024 <_malloc_r+0x494>
  402f14:	684a      	ldr	r2, [r1, #4]
  402f16:	f022 0203 	bic.w	r2, r2, #3
  402f1a:	4293      	cmp	r3, r2
  402f1c:	d273      	bcs.n	403006 <_malloc_r+0x476>
  402f1e:	6889      	ldr	r1, [r1, #8]
  402f20:	458c      	cmp	ip, r1
  402f22:	d1f7      	bne.n	402f14 <_malloc_r+0x384>
  402f24:	f8dc 200c 	ldr.w	r2, [ip, #12]
  402f28:	687b      	ldr	r3, [r7, #4]
  402f2a:	60e2      	str	r2, [r4, #12]
  402f2c:	f8c4 c008 	str.w	ip, [r4, #8]
  402f30:	6094      	str	r4, [r2, #8]
  402f32:	f8cc 400c 	str.w	r4, [ip, #12]
  402f36:	e68f      	b.n	402c58 <_malloc_r+0xc8>
  402f38:	19a1      	adds	r1, r4, r6
  402f3a:	f046 0c01 	orr.w	ip, r6, #1
  402f3e:	f042 0601 	orr.w	r6, r2, #1
  402f42:	f8c4 c004 	str.w	ip, [r4, #4]
  402f46:	4628      	mov	r0, r5
  402f48:	6179      	str	r1, [r7, #20]
  402f4a:	6139      	str	r1, [r7, #16]
  402f4c:	f8c1 e00c 	str.w	lr, [r1, #12]
  402f50:	f8c1 e008 	str.w	lr, [r1, #8]
  402f54:	604e      	str	r6, [r1, #4]
  402f56:	50e2      	str	r2, [r4, r3]
  402f58:	f000 fa36 	bl	4033c8 <__malloc_unlock>
  402f5c:	3408      	adds	r4, #8
  402f5e:	e6dd      	b.n	402d1c <_malloc_r+0x18c>
  402f60:	687b      	ldr	r3, [r7, #4]
  402f62:	e679      	b.n	402c58 <_malloc_r+0xc8>
  402f64:	f108 0801 	add.w	r8, r8, #1
  402f68:	f018 0f03 	tst.w	r8, #3
  402f6c:	f10c 0c08 	add.w	ip, ip, #8
  402f70:	f47f ae85 	bne.w	402c7e <_malloc_r+0xee>
  402f74:	e02d      	b.n	402fd2 <_malloc_r+0x442>
  402f76:	68dc      	ldr	r4, [r3, #12]
  402f78:	42a3      	cmp	r3, r4
  402f7a:	bf08      	it	eq
  402f7c:	3002      	addeq	r0, #2
  402f7e:	f43f ae3e 	beq.w	402bfe <_malloc_r+0x6e>
  402f82:	e6bb      	b.n	402cfc <_malloc_r+0x16c>
  402f84:	4419      	add	r1, r3
  402f86:	461c      	mov	r4, r3
  402f88:	684a      	ldr	r2, [r1, #4]
  402f8a:	68db      	ldr	r3, [r3, #12]
  402f8c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  402f90:	f042 0201 	orr.w	r2, r2, #1
  402f94:	604a      	str	r2, [r1, #4]
  402f96:	4628      	mov	r0, r5
  402f98:	60f3      	str	r3, [r6, #12]
  402f9a:	609e      	str	r6, [r3, #8]
  402f9c:	f000 fa14 	bl	4033c8 <__malloc_unlock>
  402fa0:	e6bc      	b.n	402d1c <_malloc_r+0x18c>
  402fa2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  402fa6:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  402faa:	00c3      	lsls	r3, r0, #3
  402fac:	e612      	b.n	402bd4 <_malloc_r+0x44>
  402fae:	099a      	lsrs	r2, r3, #6
  402fb0:	f102 0139 	add.w	r1, r2, #57	; 0x39
  402fb4:	00c9      	lsls	r1, r1, #3
  402fb6:	3238      	adds	r2, #56	; 0x38
  402fb8:	e7a4      	b.n	402f04 <_malloc_r+0x374>
  402fba:	42bc      	cmp	r4, r7
  402fbc:	d054      	beq.n	403068 <_malloc_r+0x4d8>
  402fbe:	68bc      	ldr	r4, [r7, #8]
  402fc0:	6862      	ldr	r2, [r4, #4]
  402fc2:	f022 0203 	bic.w	r2, r2, #3
  402fc6:	e75d      	b.n	402e84 <_malloc_r+0x2f4>
  402fc8:	f859 3908 	ldr.w	r3, [r9], #-8
  402fcc:	4599      	cmp	r9, r3
  402fce:	f040 8086 	bne.w	4030de <_malloc_r+0x54e>
  402fd2:	f010 0f03 	tst.w	r0, #3
  402fd6:	f100 30ff 	add.w	r0, r0, #4294967295
  402fda:	d1f5      	bne.n	402fc8 <_malloc_r+0x438>
  402fdc:	687b      	ldr	r3, [r7, #4]
  402fde:	ea23 0304 	bic.w	r3, r3, r4
  402fe2:	607b      	str	r3, [r7, #4]
  402fe4:	0064      	lsls	r4, r4, #1
  402fe6:	429c      	cmp	r4, r3
  402fe8:	f63f aec7 	bhi.w	402d7a <_malloc_r+0x1ea>
  402fec:	2c00      	cmp	r4, #0
  402fee:	f43f aec4 	beq.w	402d7a <_malloc_r+0x1ea>
  402ff2:	421c      	tst	r4, r3
  402ff4:	4640      	mov	r0, r8
  402ff6:	f47f ae3e 	bne.w	402c76 <_malloc_r+0xe6>
  402ffa:	0064      	lsls	r4, r4, #1
  402ffc:	421c      	tst	r4, r3
  402ffe:	f100 0004 	add.w	r0, r0, #4
  403002:	d0fa      	beq.n	402ffa <_malloc_r+0x46a>
  403004:	e637      	b.n	402c76 <_malloc_r+0xe6>
  403006:	468c      	mov	ip, r1
  403008:	e78c      	b.n	402f24 <_malloc_r+0x394>
  40300a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40300e:	d815      	bhi.n	40303c <_malloc_r+0x4ac>
  403010:	0bf3      	lsrs	r3, r6, #15
  403012:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403016:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40301a:	00c3      	lsls	r3, r0, #3
  40301c:	e5da      	b.n	402bd4 <_malloc_r+0x44>
  40301e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403022:	e6ed      	b.n	402e00 <_malloc_r+0x270>
  403024:	687b      	ldr	r3, [r7, #4]
  403026:	1092      	asrs	r2, r2, #2
  403028:	2101      	movs	r1, #1
  40302a:	fa01 f202 	lsl.w	r2, r1, r2
  40302e:	4313      	orrs	r3, r2
  403030:	607b      	str	r3, [r7, #4]
  403032:	4662      	mov	r2, ip
  403034:	e779      	b.n	402f2a <_malloc_r+0x39a>
  403036:	2301      	movs	r3, #1
  403038:	6053      	str	r3, [r2, #4]
  40303a:	e729      	b.n	402e90 <_malloc_r+0x300>
  40303c:	f240 5254 	movw	r2, #1364	; 0x554
  403040:	4293      	cmp	r3, r2
  403042:	d822      	bhi.n	40308a <_malloc_r+0x4fa>
  403044:	0cb3      	lsrs	r3, r6, #18
  403046:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40304a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40304e:	00c3      	lsls	r3, r0, #3
  403050:	e5c0      	b.n	402bd4 <_malloc_r+0x44>
  403052:	f103 0b10 	add.w	fp, r3, #16
  403056:	e6ae      	b.n	402db6 <_malloc_r+0x226>
  403058:	2a54      	cmp	r2, #84	; 0x54
  40305a:	d829      	bhi.n	4030b0 <_malloc_r+0x520>
  40305c:	0b1a      	lsrs	r2, r3, #12
  40305e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403062:	00c9      	lsls	r1, r1, #3
  403064:	326e      	adds	r2, #110	; 0x6e
  403066:	e74d      	b.n	402f04 <_malloc_r+0x374>
  403068:	4b20      	ldr	r3, [pc, #128]	; (4030ec <_malloc_r+0x55c>)
  40306a:	6819      	ldr	r1, [r3, #0]
  40306c:	4459      	add	r1, fp
  40306e:	6019      	str	r1, [r3, #0]
  403070:	e6b2      	b.n	402dd8 <_malloc_r+0x248>
  403072:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403076:	2800      	cmp	r0, #0
  403078:	f47f aeae 	bne.w	402dd8 <_malloc_r+0x248>
  40307c:	eb08 030b 	add.w	r3, r8, fp
  403080:	68ba      	ldr	r2, [r7, #8]
  403082:	f043 0301 	orr.w	r3, r3, #1
  403086:	6053      	str	r3, [r2, #4]
  403088:	e6ee      	b.n	402e68 <_malloc_r+0x2d8>
  40308a:	207f      	movs	r0, #127	; 0x7f
  40308c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403090:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403094:	e59e      	b.n	402bd4 <_malloc_r+0x44>
  403096:	f104 0108 	add.w	r1, r4, #8
  40309a:	4628      	mov	r0, r5
  40309c:	9300      	str	r3, [sp, #0]
  40309e:	f7ff fa59 	bl	402554 <_free_r>
  4030a2:	9b00      	ldr	r3, [sp, #0]
  4030a4:	6819      	ldr	r1, [r3, #0]
  4030a6:	e6df      	b.n	402e68 <_malloc_r+0x2d8>
  4030a8:	2001      	movs	r0, #1
  4030aa:	f04f 0900 	mov.w	r9, #0
  4030ae:	e6bc      	b.n	402e2a <_malloc_r+0x29a>
  4030b0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4030b4:	d805      	bhi.n	4030c2 <_malloc_r+0x532>
  4030b6:	0bda      	lsrs	r2, r3, #15
  4030b8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4030bc:	00c9      	lsls	r1, r1, #3
  4030be:	3277      	adds	r2, #119	; 0x77
  4030c0:	e720      	b.n	402f04 <_malloc_r+0x374>
  4030c2:	f240 5154 	movw	r1, #1364	; 0x554
  4030c6:	428a      	cmp	r2, r1
  4030c8:	d805      	bhi.n	4030d6 <_malloc_r+0x546>
  4030ca:	0c9a      	lsrs	r2, r3, #18
  4030cc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4030d0:	00c9      	lsls	r1, r1, #3
  4030d2:	327c      	adds	r2, #124	; 0x7c
  4030d4:	e716      	b.n	402f04 <_malloc_r+0x374>
  4030d6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4030da:	227e      	movs	r2, #126	; 0x7e
  4030dc:	e712      	b.n	402f04 <_malloc_r+0x374>
  4030de:	687b      	ldr	r3, [r7, #4]
  4030e0:	e780      	b.n	402fe4 <_malloc_r+0x454>
  4030e2:	08f0      	lsrs	r0, r6, #3
  4030e4:	f106 0308 	add.w	r3, r6, #8
  4030e8:	e600      	b.n	402cec <_malloc_r+0x15c>
  4030ea:	bf00      	nop
  4030ec:	20400a4c 	.word	0x20400a4c

004030f0 <__ascii_mbtowc>:
  4030f0:	b082      	sub	sp, #8
  4030f2:	b149      	cbz	r1, 403108 <__ascii_mbtowc+0x18>
  4030f4:	b15a      	cbz	r2, 40310e <__ascii_mbtowc+0x1e>
  4030f6:	b16b      	cbz	r3, 403114 <__ascii_mbtowc+0x24>
  4030f8:	7813      	ldrb	r3, [r2, #0]
  4030fa:	600b      	str	r3, [r1, #0]
  4030fc:	7812      	ldrb	r2, [r2, #0]
  4030fe:	1c10      	adds	r0, r2, #0
  403100:	bf18      	it	ne
  403102:	2001      	movne	r0, #1
  403104:	b002      	add	sp, #8
  403106:	4770      	bx	lr
  403108:	a901      	add	r1, sp, #4
  40310a:	2a00      	cmp	r2, #0
  40310c:	d1f3      	bne.n	4030f6 <__ascii_mbtowc+0x6>
  40310e:	4610      	mov	r0, r2
  403110:	b002      	add	sp, #8
  403112:	4770      	bx	lr
  403114:	f06f 0001 	mvn.w	r0, #1
  403118:	e7f4      	b.n	403104 <__ascii_mbtowc+0x14>
  40311a:	bf00      	nop
  40311c:	0000      	movs	r0, r0
	...

00403120 <memchr>:
  403120:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403124:	2a10      	cmp	r2, #16
  403126:	db2b      	blt.n	403180 <memchr+0x60>
  403128:	f010 0f07 	tst.w	r0, #7
  40312c:	d008      	beq.n	403140 <memchr+0x20>
  40312e:	f810 3b01 	ldrb.w	r3, [r0], #1
  403132:	3a01      	subs	r2, #1
  403134:	428b      	cmp	r3, r1
  403136:	d02d      	beq.n	403194 <memchr+0x74>
  403138:	f010 0f07 	tst.w	r0, #7
  40313c:	b342      	cbz	r2, 403190 <memchr+0x70>
  40313e:	d1f6      	bne.n	40312e <memchr+0xe>
  403140:	b4f0      	push	{r4, r5, r6, r7}
  403142:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403146:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40314a:	f022 0407 	bic.w	r4, r2, #7
  40314e:	f07f 0700 	mvns.w	r7, #0
  403152:	2300      	movs	r3, #0
  403154:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403158:	3c08      	subs	r4, #8
  40315a:	ea85 0501 	eor.w	r5, r5, r1
  40315e:	ea86 0601 	eor.w	r6, r6, r1
  403162:	fa85 f547 	uadd8	r5, r5, r7
  403166:	faa3 f587 	sel	r5, r3, r7
  40316a:	fa86 f647 	uadd8	r6, r6, r7
  40316e:	faa5 f687 	sel	r6, r5, r7
  403172:	b98e      	cbnz	r6, 403198 <memchr+0x78>
  403174:	d1ee      	bne.n	403154 <memchr+0x34>
  403176:	bcf0      	pop	{r4, r5, r6, r7}
  403178:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40317c:	f002 0207 	and.w	r2, r2, #7
  403180:	b132      	cbz	r2, 403190 <memchr+0x70>
  403182:	f810 3b01 	ldrb.w	r3, [r0], #1
  403186:	3a01      	subs	r2, #1
  403188:	ea83 0301 	eor.w	r3, r3, r1
  40318c:	b113      	cbz	r3, 403194 <memchr+0x74>
  40318e:	d1f8      	bne.n	403182 <memchr+0x62>
  403190:	2000      	movs	r0, #0
  403192:	4770      	bx	lr
  403194:	3801      	subs	r0, #1
  403196:	4770      	bx	lr
  403198:	2d00      	cmp	r5, #0
  40319a:	bf06      	itte	eq
  40319c:	4635      	moveq	r5, r6
  40319e:	3803      	subeq	r0, #3
  4031a0:	3807      	subne	r0, #7
  4031a2:	f015 0f01 	tst.w	r5, #1
  4031a6:	d107      	bne.n	4031b8 <memchr+0x98>
  4031a8:	3001      	adds	r0, #1
  4031aa:	f415 7f80 	tst.w	r5, #256	; 0x100
  4031ae:	bf02      	ittt	eq
  4031b0:	3001      	addeq	r0, #1
  4031b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4031b6:	3001      	addeq	r0, #1
  4031b8:	bcf0      	pop	{r4, r5, r6, r7}
  4031ba:	3801      	subs	r0, #1
  4031bc:	4770      	bx	lr
  4031be:	bf00      	nop

004031c0 <memcpy>:
  4031c0:	4684      	mov	ip, r0
  4031c2:	ea41 0300 	orr.w	r3, r1, r0
  4031c6:	f013 0303 	ands.w	r3, r3, #3
  4031ca:	d16d      	bne.n	4032a8 <memcpy+0xe8>
  4031cc:	3a40      	subs	r2, #64	; 0x40
  4031ce:	d341      	bcc.n	403254 <memcpy+0x94>
  4031d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4031d4:	f840 3b04 	str.w	r3, [r0], #4
  4031d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031dc:	f840 3b04 	str.w	r3, [r0], #4
  4031e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4031e4:	f840 3b04 	str.w	r3, [r0], #4
  4031e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031ec:	f840 3b04 	str.w	r3, [r0], #4
  4031f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4031f4:	f840 3b04 	str.w	r3, [r0], #4
  4031f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4031fc:	f840 3b04 	str.w	r3, [r0], #4
  403200:	f851 3b04 	ldr.w	r3, [r1], #4
  403204:	f840 3b04 	str.w	r3, [r0], #4
  403208:	f851 3b04 	ldr.w	r3, [r1], #4
  40320c:	f840 3b04 	str.w	r3, [r0], #4
  403210:	f851 3b04 	ldr.w	r3, [r1], #4
  403214:	f840 3b04 	str.w	r3, [r0], #4
  403218:	f851 3b04 	ldr.w	r3, [r1], #4
  40321c:	f840 3b04 	str.w	r3, [r0], #4
  403220:	f851 3b04 	ldr.w	r3, [r1], #4
  403224:	f840 3b04 	str.w	r3, [r0], #4
  403228:	f851 3b04 	ldr.w	r3, [r1], #4
  40322c:	f840 3b04 	str.w	r3, [r0], #4
  403230:	f851 3b04 	ldr.w	r3, [r1], #4
  403234:	f840 3b04 	str.w	r3, [r0], #4
  403238:	f851 3b04 	ldr.w	r3, [r1], #4
  40323c:	f840 3b04 	str.w	r3, [r0], #4
  403240:	f851 3b04 	ldr.w	r3, [r1], #4
  403244:	f840 3b04 	str.w	r3, [r0], #4
  403248:	f851 3b04 	ldr.w	r3, [r1], #4
  40324c:	f840 3b04 	str.w	r3, [r0], #4
  403250:	3a40      	subs	r2, #64	; 0x40
  403252:	d2bd      	bcs.n	4031d0 <memcpy+0x10>
  403254:	3230      	adds	r2, #48	; 0x30
  403256:	d311      	bcc.n	40327c <memcpy+0xbc>
  403258:	f851 3b04 	ldr.w	r3, [r1], #4
  40325c:	f840 3b04 	str.w	r3, [r0], #4
  403260:	f851 3b04 	ldr.w	r3, [r1], #4
  403264:	f840 3b04 	str.w	r3, [r0], #4
  403268:	f851 3b04 	ldr.w	r3, [r1], #4
  40326c:	f840 3b04 	str.w	r3, [r0], #4
  403270:	f851 3b04 	ldr.w	r3, [r1], #4
  403274:	f840 3b04 	str.w	r3, [r0], #4
  403278:	3a10      	subs	r2, #16
  40327a:	d2ed      	bcs.n	403258 <memcpy+0x98>
  40327c:	320c      	adds	r2, #12
  40327e:	d305      	bcc.n	40328c <memcpy+0xcc>
  403280:	f851 3b04 	ldr.w	r3, [r1], #4
  403284:	f840 3b04 	str.w	r3, [r0], #4
  403288:	3a04      	subs	r2, #4
  40328a:	d2f9      	bcs.n	403280 <memcpy+0xc0>
  40328c:	3204      	adds	r2, #4
  40328e:	d008      	beq.n	4032a2 <memcpy+0xe2>
  403290:	07d2      	lsls	r2, r2, #31
  403292:	bf1c      	itt	ne
  403294:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403298:	f800 3b01 	strbne.w	r3, [r0], #1
  40329c:	d301      	bcc.n	4032a2 <memcpy+0xe2>
  40329e:	880b      	ldrh	r3, [r1, #0]
  4032a0:	8003      	strh	r3, [r0, #0]
  4032a2:	4660      	mov	r0, ip
  4032a4:	4770      	bx	lr
  4032a6:	bf00      	nop
  4032a8:	2a08      	cmp	r2, #8
  4032aa:	d313      	bcc.n	4032d4 <memcpy+0x114>
  4032ac:	078b      	lsls	r3, r1, #30
  4032ae:	d08d      	beq.n	4031cc <memcpy+0xc>
  4032b0:	f010 0303 	ands.w	r3, r0, #3
  4032b4:	d08a      	beq.n	4031cc <memcpy+0xc>
  4032b6:	f1c3 0304 	rsb	r3, r3, #4
  4032ba:	1ad2      	subs	r2, r2, r3
  4032bc:	07db      	lsls	r3, r3, #31
  4032be:	bf1c      	itt	ne
  4032c0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4032c4:	f800 3b01 	strbne.w	r3, [r0], #1
  4032c8:	d380      	bcc.n	4031cc <memcpy+0xc>
  4032ca:	f831 3b02 	ldrh.w	r3, [r1], #2
  4032ce:	f820 3b02 	strh.w	r3, [r0], #2
  4032d2:	e77b      	b.n	4031cc <memcpy+0xc>
  4032d4:	3a04      	subs	r2, #4
  4032d6:	d3d9      	bcc.n	40328c <memcpy+0xcc>
  4032d8:	3a01      	subs	r2, #1
  4032da:	f811 3b01 	ldrb.w	r3, [r1], #1
  4032de:	f800 3b01 	strb.w	r3, [r0], #1
  4032e2:	d2f9      	bcs.n	4032d8 <memcpy+0x118>
  4032e4:	780b      	ldrb	r3, [r1, #0]
  4032e6:	7003      	strb	r3, [r0, #0]
  4032e8:	784b      	ldrb	r3, [r1, #1]
  4032ea:	7043      	strb	r3, [r0, #1]
  4032ec:	788b      	ldrb	r3, [r1, #2]
  4032ee:	7083      	strb	r3, [r0, #2]
  4032f0:	4660      	mov	r0, ip
  4032f2:	4770      	bx	lr

004032f4 <memmove>:
  4032f4:	4288      	cmp	r0, r1
  4032f6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4032f8:	d90d      	bls.n	403316 <memmove+0x22>
  4032fa:	188b      	adds	r3, r1, r2
  4032fc:	4298      	cmp	r0, r3
  4032fe:	d20a      	bcs.n	403316 <memmove+0x22>
  403300:	1884      	adds	r4, r0, r2
  403302:	2a00      	cmp	r2, #0
  403304:	d051      	beq.n	4033aa <memmove+0xb6>
  403306:	4622      	mov	r2, r4
  403308:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40330c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  403310:	4299      	cmp	r1, r3
  403312:	d1f9      	bne.n	403308 <memmove+0x14>
  403314:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403316:	2a0f      	cmp	r2, #15
  403318:	d948      	bls.n	4033ac <memmove+0xb8>
  40331a:	ea41 0300 	orr.w	r3, r1, r0
  40331e:	079b      	lsls	r3, r3, #30
  403320:	d146      	bne.n	4033b0 <memmove+0xbc>
  403322:	f100 0410 	add.w	r4, r0, #16
  403326:	f101 0310 	add.w	r3, r1, #16
  40332a:	4615      	mov	r5, r2
  40332c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  403330:	f844 6c10 	str.w	r6, [r4, #-16]
  403334:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  403338:	f844 6c0c 	str.w	r6, [r4, #-12]
  40333c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  403340:	f844 6c08 	str.w	r6, [r4, #-8]
  403344:	3d10      	subs	r5, #16
  403346:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40334a:	f844 6c04 	str.w	r6, [r4, #-4]
  40334e:	2d0f      	cmp	r5, #15
  403350:	f103 0310 	add.w	r3, r3, #16
  403354:	f104 0410 	add.w	r4, r4, #16
  403358:	d8e8      	bhi.n	40332c <memmove+0x38>
  40335a:	f1a2 0310 	sub.w	r3, r2, #16
  40335e:	f023 030f 	bic.w	r3, r3, #15
  403362:	f002 0e0f 	and.w	lr, r2, #15
  403366:	3310      	adds	r3, #16
  403368:	f1be 0f03 	cmp.w	lr, #3
  40336c:	4419      	add	r1, r3
  40336e:	4403      	add	r3, r0
  403370:	d921      	bls.n	4033b6 <memmove+0xc2>
  403372:	1f1e      	subs	r6, r3, #4
  403374:	460d      	mov	r5, r1
  403376:	4674      	mov	r4, lr
  403378:	3c04      	subs	r4, #4
  40337a:	f855 7b04 	ldr.w	r7, [r5], #4
  40337e:	f846 7f04 	str.w	r7, [r6, #4]!
  403382:	2c03      	cmp	r4, #3
  403384:	d8f8      	bhi.n	403378 <memmove+0x84>
  403386:	f1ae 0404 	sub.w	r4, lr, #4
  40338a:	f024 0403 	bic.w	r4, r4, #3
  40338e:	3404      	adds	r4, #4
  403390:	4421      	add	r1, r4
  403392:	4423      	add	r3, r4
  403394:	f002 0203 	and.w	r2, r2, #3
  403398:	b162      	cbz	r2, 4033b4 <memmove+0xc0>
  40339a:	3b01      	subs	r3, #1
  40339c:	440a      	add	r2, r1
  40339e:	f811 4b01 	ldrb.w	r4, [r1], #1
  4033a2:	f803 4f01 	strb.w	r4, [r3, #1]!
  4033a6:	428a      	cmp	r2, r1
  4033a8:	d1f9      	bne.n	40339e <memmove+0xaa>
  4033aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4033ac:	4603      	mov	r3, r0
  4033ae:	e7f3      	b.n	403398 <memmove+0xa4>
  4033b0:	4603      	mov	r3, r0
  4033b2:	e7f2      	b.n	40339a <memmove+0xa6>
  4033b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4033b6:	4672      	mov	r2, lr
  4033b8:	e7ee      	b.n	403398 <memmove+0xa4>
  4033ba:	bf00      	nop

004033bc <__malloc_lock>:
  4033bc:	4801      	ldr	r0, [pc, #4]	; (4033c4 <__malloc_lock+0x8>)
  4033be:	f7ff bb63 	b.w	402a88 <__retarget_lock_acquire_recursive>
  4033c2:	bf00      	nop
  4033c4:	20400a9c 	.word	0x20400a9c

004033c8 <__malloc_unlock>:
  4033c8:	4801      	ldr	r0, [pc, #4]	; (4033d0 <__malloc_unlock+0x8>)
  4033ca:	f7ff bb5f 	b.w	402a8c <__retarget_lock_release_recursive>
  4033ce:	bf00      	nop
  4033d0:	20400a9c 	.word	0x20400a9c

004033d4 <_realloc_r>:
  4033d4:	2900      	cmp	r1, #0
  4033d6:	f000 8095 	beq.w	403504 <_realloc_r+0x130>
  4033da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4033de:	460d      	mov	r5, r1
  4033e0:	4616      	mov	r6, r2
  4033e2:	b083      	sub	sp, #12
  4033e4:	4680      	mov	r8, r0
  4033e6:	f106 070b 	add.w	r7, r6, #11
  4033ea:	f7ff ffe7 	bl	4033bc <__malloc_lock>
  4033ee:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4033f2:	2f16      	cmp	r7, #22
  4033f4:	f02e 0403 	bic.w	r4, lr, #3
  4033f8:	f1a5 0908 	sub.w	r9, r5, #8
  4033fc:	d83c      	bhi.n	403478 <_realloc_r+0xa4>
  4033fe:	2210      	movs	r2, #16
  403400:	4617      	mov	r7, r2
  403402:	42be      	cmp	r6, r7
  403404:	d83d      	bhi.n	403482 <_realloc_r+0xae>
  403406:	4294      	cmp	r4, r2
  403408:	da43      	bge.n	403492 <_realloc_r+0xbe>
  40340a:	4bc4      	ldr	r3, [pc, #784]	; (40371c <_realloc_r+0x348>)
  40340c:	6899      	ldr	r1, [r3, #8]
  40340e:	eb09 0004 	add.w	r0, r9, r4
  403412:	4288      	cmp	r0, r1
  403414:	f000 80b4 	beq.w	403580 <_realloc_r+0x1ac>
  403418:	6843      	ldr	r3, [r0, #4]
  40341a:	f023 0101 	bic.w	r1, r3, #1
  40341e:	4401      	add	r1, r0
  403420:	6849      	ldr	r1, [r1, #4]
  403422:	07c9      	lsls	r1, r1, #31
  403424:	d54c      	bpl.n	4034c0 <_realloc_r+0xec>
  403426:	f01e 0f01 	tst.w	lr, #1
  40342a:	f000 809b 	beq.w	403564 <_realloc_r+0x190>
  40342e:	4631      	mov	r1, r6
  403430:	4640      	mov	r0, r8
  403432:	f7ff fbad 	bl	402b90 <_malloc_r>
  403436:	4606      	mov	r6, r0
  403438:	2800      	cmp	r0, #0
  40343a:	d03a      	beq.n	4034b2 <_realloc_r+0xde>
  40343c:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403440:	f023 0301 	bic.w	r3, r3, #1
  403444:	444b      	add	r3, r9
  403446:	f1a0 0208 	sub.w	r2, r0, #8
  40344a:	429a      	cmp	r2, r3
  40344c:	f000 8121 	beq.w	403692 <_realloc_r+0x2be>
  403450:	1f22      	subs	r2, r4, #4
  403452:	2a24      	cmp	r2, #36	; 0x24
  403454:	f200 8107 	bhi.w	403666 <_realloc_r+0x292>
  403458:	2a13      	cmp	r2, #19
  40345a:	f200 80db 	bhi.w	403614 <_realloc_r+0x240>
  40345e:	4603      	mov	r3, r0
  403460:	462a      	mov	r2, r5
  403462:	6811      	ldr	r1, [r2, #0]
  403464:	6019      	str	r1, [r3, #0]
  403466:	6851      	ldr	r1, [r2, #4]
  403468:	6059      	str	r1, [r3, #4]
  40346a:	6892      	ldr	r2, [r2, #8]
  40346c:	609a      	str	r2, [r3, #8]
  40346e:	4629      	mov	r1, r5
  403470:	4640      	mov	r0, r8
  403472:	f7ff f86f 	bl	402554 <_free_r>
  403476:	e01c      	b.n	4034b2 <_realloc_r+0xde>
  403478:	f027 0707 	bic.w	r7, r7, #7
  40347c:	2f00      	cmp	r7, #0
  40347e:	463a      	mov	r2, r7
  403480:	dabf      	bge.n	403402 <_realloc_r+0x2e>
  403482:	2600      	movs	r6, #0
  403484:	230c      	movs	r3, #12
  403486:	4630      	mov	r0, r6
  403488:	f8c8 3000 	str.w	r3, [r8]
  40348c:	b003      	add	sp, #12
  40348e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403492:	462e      	mov	r6, r5
  403494:	1be3      	subs	r3, r4, r7
  403496:	2b0f      	cmp	r3, #15
  403498:	d81e      	bhi.n	4034d8 <_realloc_r+0x104>
  40349a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40349e:	f003 0301 	and.w	r3, r3, #1
  4034a2:	4323      	orrs	r3, r4
  4034a4:	444c      	add	r4, r9
  4034a6:	f8c9 3004 	str.w	r3, [r9, #4]
  4034aa:	6863      	ldr	r3, [r4, #4]
  4034ac:	f043 0301 	orr.w	r3, r3, #1
  4034b0:	6063      	str	r3, [r4, #4]
  4034b2:	4640      	mov	r0, r8
  4034b4:	f7ff ff88 	bl	4033c8 <__malloc_unlock>
  4034b8:	4630      	mov	r0, r6
  4034ba:	b003      	add	sp, #12
  4034bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4034c0:	f023 0303 	bic.w	r3, r3, #3
  4034c4:	18e1      	adds	r1, r4, r3
  4034c6:	4291      	cmp	r1, r2
  4034c8:	db1f      	blt.n	40350a <_realloc_r+0x136>
  4034ca:	68c3      	ldr	r3, [r0, #12]
  4034cc:	6882      	ldr	r2, [r0, #8]
  4034ce:	462e      	mov	r6, r5
  4034d0:	60d3      	str	r3, [r2, #12]
  4034d2:	460c      	mov	r4, r1
  4034d4:	609a      	str	r2, [r3, #8]
  4034d6:	e7dd      	b.n	403494 <_realloc_r+0xc0>
  4034d8:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4034dc:	eb09 0107 	add.w	r1, r9, r7
  4034e0:	f002 0201 	and.w	r2, r2, #1
  4034e4:	444c      	add	r4, r9
  4034e6:	f043 0301 	orr.w	r3, r3, #1
  4034ea:	4317      	orrs	r7, r2
  4034ec:	f8c9 7004 	str.w	r7, [r9, #4]
  4034f0:	604b      	str	r3, [r1, #4]
  4034f2:	6863      	ldr	r3, [r4, #4]
  4034f4:	f043 0301 	orr.w	r3, r3, #1
  4034f8:	3108      	adds	r1, #8
  4034fa:	6063      	str	r3, [r4, #4]
  4034fc:	4640      	mov	r0, r8
  4034fe:	f7ff f829 	bl	402554 <_free_r>
  403502:	e7d6      	b.n	4034b2 <_realloc_r+0xde>
  403504:	4611      	mov	r1, r2
  403506:	f7ff bb43 	b.w	402b90 <_malloc_r>
  40350a:	f01e 0f01 	tst.w	lr, #1
  40350e:	d18e      	bne.n	40342e <_realloc_r+0x5a>
  403510:	f855 1c08 	ldr.w	r1, [r5, #-8]
  403514:	eba9 0a01 	sub.w	sl, r9, r1
  403518:	f8da 1004 	ldr.w	r1, [sl, #4]
  40351c:	f021 0103 	bic.w	r1, r1, #3
  403520:	440b      	add	r3, r1
  403522:	4423      	add	r3, r4
  403524:	4293      	cmp	r3, r2
  403526:	db25      	blt.n	403574 <_realloc_r+0x1a0>
  403528:	68c2      	ldr	r2, [r0, #12]
  40352a:	6881      	ldr	r1, [r0, #8]
  40352c:	4656      	mov	r6, sl
  40352e:	60ca      	str	r2, [r1, #12]
  403530:	6091      	str	r1, [r2, #8]
  403532:	f8da 100c 	ldr.w	r1, [sl, #12]
  403536:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40353a:	1f22      	subs	r2, r4, #4
  40353c:	2a24      	cmp	r2, #36	; 0x24
  40353e:	60c1      	str	r1, [r0, #12]
  403540:	6088      	str	r0, [r1, #8]
  403542:	f200 8094 	bhi.w	40366e <_realloc_r+0x29a>
  403546:	2a13      	cmp	r2, #19
  403548:	d96f      	bls.n	40362a <_realloc_r+0x256>
  40354a:	6829      	ldr	r1, [r5, #0]
  40354c:	f8ca 1008 	str.w	r1, [sl, #8]
  403550:	6869      	ldr	r1, [r5, #4]
  403552:	f8ca 100c 	str.w	r1, [sl, #12]
  403556:	2a1b      	cmp	r2, #27
  403558:	f200 80a2 	bhi.w	4036a0 <_realloc_r+0x2cc>
  40355c:	3508      	adds	r5, #8
  40355e:	f10a 0210 	add.w	r2, sl, #16
  403562:	e063      	b.n	40362c <_realloc_r+0x258>
  403564:	f855 3c08 	ldr.w	r3, [r5, #-8]
  403568:	eba9 0a03 	sub.w	sl, r9, r3
  40356c:	f8da 1004 	ldr.w	r1, [sl, #4]
  403570:	f021 0103 	bic.w	r1, r1, #3
  403574:	1863      	adds	r3, r4, r1
  403576:	4293      	cmp	r3, r2
  403578:	f6ff af59 	blt.w	40342e <_realloc_r+0x5a>
  40357c:	4656      	mov	r6, sl
  40357e:	e7d8      	b.n	403532 <_realloc_r+0x15e>
  403580:	6841      	ldr	r1, [r0, #4]
  403582:	f021 0b03 	bic.w	fp, r1, #3
  403586:	44a3      	add	fp, r4
  403588:	f107 0010 	add.w	r0, r7, #16
  40358c:	4583      	cmp	fp, r0
  40358e:	da56      	bge.n	40363e <_realloc_r+0x26a>
  403590:	f01e 0f01 	tst.w	lr, #1
  403594:	f47f af4b 	bne.w	40342e <_realloc_r+0x5a>
  403598:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40359c:	eba9 0a01 	sub.w	sl, r9, r1
  4035a0:	f8da 1004 	ldr.w	r1, [sl, #4]
  4035a4:	f021 0103 	bic.w	r1, r1, #3
  4035a8:	448b      	add	fp, r1
  4035aa:	4558      	cmp	r0, fp
  4035ac:	dce2      	bgt.n	403574 <_realloc_r+0x1a0>
  4035ae:	4656      	mov	r6, sl
  4035b0:	f8da 100c 	ldr.w	r1, [sl, #12]
  4035b4:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4035b8:	1f22      	subs	r2, r4, #4
  4035ba:	2a24      	cmp	r2, #36	; 0x24
  4035bc:	60c1      	str	r1, [r0, #12]
  4035be:	6088      	str	r0, [r1, #8]
  4035c0:	f200 808f 	bhi.w	4036e2 <_realloc_r+0x30e>
  4035c4:	2a13      	cmp	r2, #19
  4035c6:	f240 808a 	bls.w	4036de <_realloc_r+0x30a>
  4035ca:	6829      	ldr	r1, [r5, #0]
  4035cc:	f8ca 1008 	str.w	r1, [sl, #8]
  4035d0:	6869      	ldr	r1, [r5, #4]
  4035d2:	f8ca 100c 	str.w	r1, [sl, #12]
  4035d6:	2a1b      	cmp	r2, #27
  4035d8:	f200 808a 	bhi.w	4036f0 <_realloc_r+0x31c>
  4035dc:	3508      	adds	r5, #8
  4035de:	f10a 0210 	add.w	r2, sl, #16
  4035e2:	6829      	ldr	r1, [r5, #0]
  4035e4:	6011      	str	r1, [r2, #0]
  4035e6:	6869      	ldr	r1, [r5, #4]
  4035e8:	6051      	str	r1, [r2, #4]
  4035ea:	68a9      	ldr	r1, [r5, #8]
  4035ec:	6091      	str	r1, [r2, #8]
  4035ee:	eb0a 0107 	add.w	r1, sl, r7
  4035f2:	ebab 0207 	sub.w	r2, fp, r7
  4035f6:	f042 0201 	orr.w	r2, r2, #1
  4035fa:	6099      	str	r1, [r3, #8]
  4035fc:	604a      	str	r2, [r1, #4]
  4035fe:	f8da 3004 	ldr.w	r3, [sl, #4]
  403602:	f003 0301 	and.w	r3, r3, #1
  403606:	431f      	orrs	r7, r3
  403608:	4640      	mov	r0, r8
  40360a:	f8ca 7004 	str.w	r7, [sl, #4]
  40360e:	f7ff fedb 	bl	4033c8 <__malloc_unlock>
  403612:	e751      	b.n	4034b8 <_realloc_r+0xe4>
  403614:	682b      	ldr	r3, [r5, #0]
  403616:	6003      	str	r3, [r0, #0]
  403618:	686b      	ldr	r3, [r5, #4]
  40361a:	6043      	str	r3, [r0, #4]
  40361c:	2a1b      	cmp	r2, #27
  40361e:	d82d      	bhi.n	40367c <_realloc_r+0x2a8>
  403620:	f100 0308 	add.w	r3, r0, #8
  403624:	f105 0208 	add.w	r2, r5, #8
  403628:	e71b      	b.n	403462 <_realloc_r+0x8e>
  40362a:	4632      	mov	r2, r6
  40362c:	6829      	ldr	r1, [r5, #0]
  40362e:	6011      	str	r1, [r2, #0]
  403630:	6869      	ldr	r1, [r5, #4]
  403632:	6051      	str	r1, [r2, #4]
  403634:	68a9      	ldr	r1, [r5, #8]
  403636:	6091      	str	r1, [r2, #8]
  403638:	461c      	mov	r4, r3
  40363a:	46d1      	mov	r9, sl
  40363c:	e72a      	b.n	403494 <_realloc_r+0xc0>
  40363e:	eb09 0107 	add.w	r1, r9, r7
  403642:	ebab 0b07 	sub.w	fp, fp, r7
  403646:	f04b 0201 	orr.w	r2, fp, #1
  40364a:	6099      	str	r1, [r3, #8]
  40364c:	604a      	str	r2, [r1, #4]
  40364e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  403652:	f003 0301 	and.w	r3, r3, #1
  403656:	431f      	orrs	r7, r3
  403658:	4640      	mov	r0, r8
  40365a:	f845 7c04 	str.w	r7, [r5, #-4]
  40365e:	f7ff feb3 	bl	4033c8 <__malloc_unlock>
  403662:	462e      	mov	r6, r5
  403664:	e728      	b.n	4034b8 <_realloc_r+0xe4>
  403666:	4629      	mov	r1, r5
  403668:	f7ff fe44 	bl	4032f4 <memmove>
  40366c:	e6ff      	b.n	40346e <_realloc_r+0x9a>
  40366e:	4629      	mov	r1, r5
  403670:	4630      	mov	r0, r6
  403672:	461c      	mov	r4, r3
  403674:	46d1      	mov	r9, sl
  403676:	f7ff fe3d 	bl	4032f4 <memmove>
  40367a:	e70b      	b.n	403494 <_realloc_r+0xc0>
  40367c:	68ab      	ldr	r3, [r5, #8]
  40367e:	6083      	str	r3, [r0, #8]
  403680:	68eb      	ldr	r3, [r5, #12]
  403682:	60c3      	str	r3, [r0, #12]
  403684:	2a24      	cmp	r2, #36	; 0x24
  403686:	d017      	beq.n	4036b8 <_realloc_r+0x2e4>
  403688:	f100 0310 	add.w	r3, r0, #16
  40368c:	f105 0210 	add.w	r2, r5, #16
  403690:	e6e7      	b.n	403462 <_realloc_r+0x8e>
  403692:	f850 3c04 	ldr.w	r3, [r0, #-4]
  403696:	f023 0303 	bic.w	r3, r3, #3
  40369a:	441c      	add	r4, r3
  40369c:	462e      	mov	r6, r5
  40369e:	e6f9      	b.n	403494 <_realloc_r+0xc0>
  4036a0:	68a9      	ldr	r1, [r5, #8]
  4036a2:	f8ca 1010 	str.w	r1, [sl, #16]
  4036a6:	68e9      	ldr	r1, [r5, #12]
  4036a8:	f8ca 1014 	str.w	r1, [sl, #20]
  4036ac:	2a24      	cmp	r2, #36	; 0x24
  4036ae:	d00c      	beq.n	4036ca <_realloc_r+0x2f6>
  4036b0:	3510      	adds	r5, #16
  4036b2:	f10a 0218 	add.w	r2, sl, #24
  4036b6:	e7b9      	b.n	40362c <_realloc_r+0x258>
  4036b8:	692b      	ldr	r3, [r5, #16]
  4036ba:	6103      	str	r3, [r0, #16]
  4036bc:	696b      	ldr	r3, [r5, #20]
  4036be:	6143      	str	r3, [r0, #20]
  4036c0:	f105 0218 	add.w	r2, r5, #24
  4036c4:	f100 0318 	add.w	r3, r0, #24
  4036c8:	e6cb      	b.n	403462 <_realloc_r+0x8e>
  4036ca:	692a      	ldr	r2, [r5, #16]
  4036cc:	f8ca 2018 	str.w	r2, [sl, #24]
  4036d0:	696a      	ldr	r2, [r5, #20]
  4036d2:	f8ca 201c 	str.w	r2, [sl, #28]
  4036d6:	3518      	adds	r5, #24
  4036d8:	f10a 0220 	add.w	r2, sl, #32
  4036dc:	e7a6      	b.n	40362c <_realloc_r+0x258>
  4036de:	4632      	mov	r2, r6
  4036e0:	e77f      	b.n	4035e2 <_realloc_r+0x20e>
  4036e2:	4629      	mov	r1, r5
  4036e4:	4630      	mov	r0, r6
  4036e6:	9301      	str	r3, [sp, #4]
  4036e8:	f7ff fe04 	bl	4032f4 <memmove>
  4036ec:	9b01      	ldr	r3, [sp, #4]
  4036ee:	e77e      	b.n	4035ee <_realloc_r+0x21a>
  4036f0:	68a9      	ldr	r1, [r5, #8]
  4036f2:	f8ca 1010 	str.w	r1, [sl, #16]
  4036f6:	68e9      	ldr	r1, [r5, #12]
  4036f8:	f8ca 1014 	str.w	r1, [sl, #20]
  4036fc:	2a24      	cmp	r2, #36	; 0x24
  4036fe:	d003      	beq.n	403708 <_realloc_r+0x334>
  403700:	3510      	adds	r5, #16
  403702:	f10a 0218 	add.w	r2, sl, #24
  403706:	e76c      	b.n	4035e2 <_realloc_r+0x20e>
  403708:	692a      	ldr	r2, [r5, #16]
  40370a:	f8ca 2018 	str.w	r2, [sl, #24]
  40370e:	696a      	ldr	r2, [r5, #20]
  403710:	f8ca 201c 	str.w	r2, [sl, #28]
  403714:	3518      	adds	r5, #24
  403716:	f10a 0220 	add.w	r2, sl, #32
  40371a:	e762      	b.n	4035e2 <_realloc_r+0x20e>
  40371c:	204005a8 	.word	0x204005a8

00403720 <_sbrk_r>:
  403720:	b538      	push	{r3, r4, r5, lr}
  403722:	4c07      	ldr	r4, [pc, #28]	; (403740 <_sbrk_r+0x20>)
  403724:	2300      	movs	r3, #0
  403726:	4605      	mov	r5, r0
  403728:	4608      	mov	r0, r1
  40372a:	6023      	str	r3, [r4, #0]
  40372c:	f7fd f96c 	bl	400a08 <_sbrk>
  403730:	1c43      	adds	r3, r0, #1
  403732:	d000      	beq.n	403736 <_sbrk_r+0x16>
  403734:	bd38      	pop	{r3, r4, r5, pc}
  403736:	6823      	ldr	r3, [r4, #0]
  403738:	2b00      	cmp	r3, #0
  40373a:	d0fb      	beq.n	403734 <_sbrk_r+0x14>
  40373c:	602b      	str	r3, [r5, #0]
  40373e:	bd38      	pop	{r3, r4, r5, pc}
  403740:	20400ab0 	.word	0x20400ab0

00403744 <__sread>:
  403744:	b510      	push	{r4, lr}
  403746:	460c      	mov	r4, r1
  403748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40374c:	f000 f9f6 	bl	403b3c <_read_r>
  403750:	2800      	cmp	r0, #0
  403752:	db03      	blt.n	40375c <__sread+0x18>
  403754:	6d23      	ldr	r3, [r4, #80]	; 0x50
  403756:	4403      	add	r3, r0
  403758:	6523      	str	r3, [r4, #80]	; 0x50
  40375a:	bd10      	pop	{r4, pc}
  40375c:	89a3      	ldrh	r3, [r4, #12]
  40375e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403762:	81a3      	strh	r3, [r4, #12]
  403764:	bd10      	pop	{r4, pc}
  403766:	bf00      	nop

00403768 <__swrite>:
  403768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40376c:	4616      	mov	r6, r2
  40376e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  403772:	461f      	mov	r7, r3
  403774:	05d3      	lsls	r3, r2, #23
  403776:	460c      	mov	r4, r1
  403778:	4605      	mov	r5, r0
  40377a:	d507      	bpl.n	40378c <__swrite+0x24>
  40377c:	2200      	movs	r2, #0
  40377e:	2302      	movs	r3, #2
  403780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403784:	f000 f9c4 	bl	403b10 <_lseek_r>
  403788:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40378c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403790:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  403794:	81a2      	strh	r2, [r4, #12]
  403796:	463b      	mov	r3, r7
  403798:	4632      	mov	r2, r6
  40379a:	4628      	mov	r0, r5
  40379c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4037a0:	f000 b8a4 	b.w	4038ec <_write_r>

004037a4 <__sseek>:
  4037a4:	b510      	push	{r4, lr}
  4037a6:	460c      	mov	r4, r1
  4037a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4037ac:	f000 f9b0 	bl	403b10 <_lseek_r>
  4037b0:	89a3      	ldrh	r3, [r4, #12]
  4037b2:	1c42      	adds	r2, r0, #1
  4037b4:	bf0e      	itee	eq
  4037b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4037ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4037be:	6520      	strne	r0, [r4, #80]	; 0x50
  4037c0:	81a3      	strh	r3, [r4, #12]
  4037c2:	bd10      	pop	{r4, pc}

004037c4 <__sclose>:
  4037c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4037c8:	f000 b908 	b.w	4039dc <_close_r>

004037cc <__swbuf_r>:
  4037cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4037ce:	460d      	mov	r5, r1
  4037d0:	4614      	mov	r4, r2
  4037d2:	4606      	mov	r6, r0
  4037d4:	b110      	cbz	r0, 4037dc <__swbuf_r+0x10>
  4037d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4037d8:	2b00      	cmp	r3, #0
  4037da:	d04b      	beq.n	403874 <__swbuf_r+0xa8>
  4037dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4037e0:	69a3      	ldr	r3, [r4, #24]
  4037e2:	60a3      	str	r3, [r4, #8]
  4037e4:	b291      	uxth	r1, r2
  4037e6:	0708      	lsls	r0, r1, #28
  4037e8:	d539      	bpl.n	40385e <__swbuf_r+0x92>
  4037ea:	6923      	ldr	r3, [r4, #16]
  4037ec:	2b00      	cmp	r3, #0
  4037ee:	d036      	beq.n	40385e <__swbuf_r+0x92>
  4037f0:	b2ed      	uxtb	r5, r5
  4037f2:	0489      	lsls	r1, r1, #18
  4037f4:	462f      	mov	r7, r5
  4037f6:	d515      	bpl.n	403824 <__swbuf_r+0x58>
  4037f8:	6822      	ldr	r2, [r4, #0]
  4037fa:	6961      	ldr	r1, [r4, #20]
  4037fc:	1ad3      	subs	r3, r2, r3
  4037fe:	428b      	cmp	r3, r1
  403800:	da1c      	bge.n	40383c <__swbuf_r+0x70>
  403802:	3301      	adds	r3, #1
  403804:	68a1      	ldr	r1, [r4, #8]
  403806:	1c50      	adds	r0, r2, #1
  403808:	3901      	subs	r1, #1
  40380a:	60a1      	str	r1, [r4, #8]
  40380c:	6020      	str	r0, [r4, #0]
  40380e:	7015      	strb	r5, [r2, #0]
  403810:	6962      	ldr	r2, [r4, #20]
  403812:	429a      	cmp	r2, r3
  403814:	d01a      	beq.n	40384c <__swbuf_r+0x80>
  403816:	89a3      	ldrh	r3, [r4, #12]
  403818:	07db      	lsls	r3, r3, #31
  40381a:	d501      	bpl.n	403820 <__swbuf_r+0x54>
  40381c:	2d0a      	cmp	r5, #10
  40381e:	d015      	beq.n	40384c <__swbuf_r+0x80>
  403820:	4638      	mov	r0, r7
  403822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403824:	6e61      	ldr	r1, [r4, #100]	; 0x64
  403826:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40382a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40382e:	81a2      	strh	r2, [r4, #12]
  403830:	6822      	ldr	r2, [r4, #0]
  403832:	6661      	str	r1, [r4, #100]	; 0x64
  403834:	6961      	ldr	r1, [r4, #20]
  403836:	1ad3      	subs	r3, r2, r3
  403838:	428b      	cmp	r3, r1
  40383a:	dbe2      	blt.n	403802 <__swbuf_r+0x36>
  40383c:	4621      	mov	r1, r4
  40383e:	4630      	mov	r0, r6
  403840:	f7fe fd0a 	bl	402258 <_fflush_r>
  403844:	b940      	cbnz	r0, 403858 <__swbuf_r+0x8c>
  403846:	6822      	ldr	r2, [r4, #0]
  403848:	2301      	movs	r3, #1
  40384a:	e7db      	b.n	403804 <__swbuf_r+0x38>
  40384c:	4621      	mov	r1, r4
  40384e:	4630      	mov	r0, r6
  403850:	f7fe fd02 	bl	402258 <_fflush_r>
  403854:	2800      	cmp	r0, #0
  403856:	d0e3      	beq.n	403820 <__swbuf_r+0x54>
  403858:	f04f 37ff 	mov.w	r7, #4294967295
  40385c:	e7e0      	b.n	403820 <__swbuf_r+0x54>
  40385e:	4621      	mov	r1, r4
  403860:	4630      	mov	r0, r6
  403862:	f7fe fbe5 	bl	402030 <__swsetup_r>
  403866:	2800      	cmp	r0, #0
  403868:	d1f6      	bne.n	403858 <__swbuf_r+0x8c>
  40386a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40386e:	6923      	ldr	r3, [r4, #16]
  403870:	b291      	uxth	r1, r2
  403872:	e7bd      	b.n	4037f0 <__swbuf_r+0x24>
  403874:	f7fe fd48 	bl	402308 <__sinit>
  403878:	e7b0      	b.n	4037dc <__swbuf_r+0x10>
  40387a:	bf00      	nop

0040387c <_wcrtomb_r>:
  40387c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40387e:	4606      	mov	r6, r0
  403880:	b085      	sub	sp, #20
  403882:	461f      	mov	r7, r3
  403884:	b189      	cbz	r1, 4038aa <_wcrtomb_r+0x2e>
  403886:	4c10      	ldr	r4, [pc, #64]	; (4038c8 <_wcrtomb_r+0x4c>)
  403888:	4d10      	ldr	r5, [pc, #64]	; (4038cc <_wcrtomb_r+0x50>)
  40388a:	6824      	ldr	r4, [r4, #0]
  40388c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40388e:	2c00      	cmp	r4, #0
  403890:	bf08      	it	eq
  403892:	462c      	moveq	r4, r5
  403894:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  403898:	47a0      	blx	r4
  40389a:	1c43      	adds	r3, r0, #1
  40389c:	d103      	bne.n	4038a6 <_wcrtomb_r+0x2a>
  40389e:	2200      	movs	r2, #0
  4038a0:	238a      	movs	r3, #138	; 0x8a
  4038a2:	603a      	str	r2, [r7, #0]
  4038a4:	6033      	str	r3, [r6, #0]
  4038a6:	b005      	add	sp, #20
  4038a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4038aa:	460c      	mov	r4, r1
  4038ac:	4906      	ldr	r1, [pc, #24]	; (4038c8 <_wcrtomb_r+0x4c>)
  4038ae:	4a07      	ldr	r2, [pc, #28]	; (4038cc <_wcrtomb_r+0x50>)
  4038b0:	6809      	ldr	r1, [r1, #0]
  4038b2:	6b49      	ldr	r1, [r1, #52]	; 0x34
  4038b4:	2900      	cmp	r1, #0
  4038b6:	bf08      	it	eq
  4038b8:	4611      	moveq	r1, r2
  4038ba:	4622      	mov	r2, r4
  4038bc:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  4038c0:	a901      	add	r1, sp, #4
  4038c2:	47a0      	blx	r4
  4038c4:	e7e9      	b.n	40389a <_wcrtomb_r+0x1e>
  4038c6:	bf00      	nop
  4038c8:	20400008 	.word	0x20400008
  4038cc:	2040043c 	.word	0x2040043c

004038d0 <__ascii_wctomb>:
  4038d0:	b121      	cbz	r1, 4038dc <__ascii_wctomb+0xc>
  4038d2:	2aff      	cmp	r2, #255	; 0xff
  4038d4:	d804      	bhi.n	4038e0 <__ascii_wctomb+0x10>
  4038d6:	700a      	strb	r2, [r1, #0]
  4038d8:	2001      	movs	r0, #1
  4038da:	4770      	bx	lr
  4038dc:	4608      	mov	r0, r1
  4038de:	4770      	bx	lr
  4038e0:	238a      	movs	r3, #138	; 0x8a
  4038e2:	6003      	str	r3, [r0, #0]
  4038e4:	f04f 30ff 	mov.w	r0, #4294967295
  4038e8:	4770      	bx	lr
  4038ea:	bf00      	nop

004038ec <_write_r>:
  4038ec:	b570      	push	{r4, r5, r6, lr}
  4038ee:	460d      	mov	r5, r1
  4038f0:	4c08      	ldr	r4, [pc, #32]	; (403914 <_write_r+0x28>)
  4038f2:	4611      	mov	r1, r2
  4038f4:	4606      	mov	r6, r0
  4038f6:	461a      	mov	r2, r3
  4038f8:	4628      	mov	r0, r5
  4038fa:	2300      	movs	r3, #0
  4038fc:	6023      	str	r3, [r4, #0]
  4038fe:	f7fc fd11 	bl	400324 <_write>
  403902:	1c43      	adds	r3, r0, #1
  403904:	d000      	beq.n	403908 <_write_r+0x1c>
  403906:	bd70      	pop	{r4, r5, r6, pc}
  403908:	6823      	ldr	r3, [r4, #0]
  40390a:	2b00      	cmp	r3, #0
  40390c:	d0fb      	beq.n	403906 <_write_r+0x1a>
  40390e:	6033      	str	r3, [r6, #0]
  403910:	bd70      	pop	{r4, r5, r6, pc}
  403912:	bf00      	nop
  403914:	20400ab0 	.word	0x20400ab0

00403918 <__register_exitproc>:
  403918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40391c:	4d2c      	ldr	r5, [pc, #176]	; (4039d0 <__register_exitproc+0xb8>)
  40391e:	4606      	mov	r6, r0
  403920:	6828      	ldr	r0, [r5, #0]
  403922:	4698      	mov	r8, r3
  403924:	460f      	mov	r7, r1
  403926:	4691      	mov	r9, r2
  403928:	f7ff f8ae 	bl	402a88 <__retarget_lock_acquire_recursive>
  40392c:	4b29      	ldr	r3, [pc, #164]	; (4039d4 <__register_exitproc+0xbc>)
  40392e:	681c      	ldr	r4, [r3, #0]
  403930:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  403934:	2b00      	cmp	r3, #0
  403936:	d03e      	beq.n	4039b6 <__register_exitproc+0x9e>
  403938:	685a      	ldr	r2, [r3, #4]
  40393a:	2a1f      	cmp	r2, #31
  40393c:	dc1c      	bgt.n	403978 <__register_exitproc+0x60>
  40393e:	f102 0e01 	add.w	lr, r2, #1
  403942:	b176      	cbz	r6, 403962 <__register_exitproc+0x4a>
  403944:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  403948:	2401      	movs	r4, #1
  40394a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40394e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  403952:	4094      	lsls	r4, r2
  403954:	4320      	orrs	r0, r4
  403956:	2e02      	cmp	r6, #2
  403958:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40395c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  403960:	d023      	beq.n	4039aa <__register_exitproc+0x92>
  403962:	3202      	adds	r2, #2
  403964:	f8c3 e004 	str.w	lr, [r3, #4]
  403968:	6828      	ldr	r0, [r5, #0]
  40396a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40396e:	f7ff f88d 	bl	402a8c <__retarget_lock_release_recursive>
  403972:	2000      	movs	r0, #0
  403974:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403978:	4b17      	ldr	r3, [pc, #92]	; (4039d8 <__register_exitproc+0xc0>)
  40397a:	b30b      	cbz	r3, 4039c0 <__register_exitproc+0xa8>
  40397c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403980:	f7ff f8fe 	bl	402b80 <malloc>
  403984:	4603      	mov	r3, r0
  403986:	b1d8      	cbz	r0, 4039c0 <__register_exitproc+0xa8>
  403988:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40398c:	6002      	str	r2, [r0, #0]
  40398e:	2100      	movs	r1, #0
  403990:	6041      	str	r1, [r0, #4]
  403992:	460a      	mov	r2, r1
  403994:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  403998:	f04f 0e01 	mov.w	lr, #1
  40399c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4039a0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4039a4:	2e00      	cmp	r6, #0
  4039a6:	d0dc      	beq.n	403962 <__register_exitproc+0x4a>
  4039a8:	e7cc      	b.n	403944 <__register_exitproc+0x2c>
  4039aa:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4039ae:	430c      	orrs	r4, r1
  4039b0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4039b4:	e7d5      	b.n	403962 <__register_exitproc+0x4a>
  4039b6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4039ba:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4039be:	e7bb      	b.n	403938 <__register_exitproc+0x20>
  4039c0:	6828      	ldr	r0, [r5, #0]
  4039c2:	f7ff f863 	bl	402a8c <__retarget_lock_release_recursive>
  4039c6:	f04f 30ff 	mov.w	r0, #4294967295
  4039ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4039ce:	bf00      	nop
  4039d0:	20400438 	.word	0x20400438
  4039d4:	00403ea0 	.word	0x00403ea0
  4039d8:	00402b81 	.word	0x00402b81

004039dc <_close_r>:
  4039dc:	b538      	push	{r3, r4, r5, lr}
  4039de:	4c07      	ldr	r4, [pc, #28]	; (4039fc <_close_r+0x20>)
  4039e0:	2300      	movs	r3, #0
  4039e2:	4605      	mov	r5, r0
  4039e4:	4608      	mov	r0, r1
  4039e6:	6023      	str	r3, [r4, #0]
  4039e8:	f7fd f82a 	bl	400a40 <_close>
  4039ec:	1c43      	adds	r3, r0, #1
  4039ee:	d000      	beq.n	4039f2 <_close_r+0x16>
  4039f0:	bd38      	pop	{r3, r4, r5, pc}
  4039f2:	6823      	ldr	r3, [r4, #0]
  4039f4:	2b00      	cmp	r3, #0
  4039f6:	d0fb      	beq.n	4039f0 <_close_r+0x14>
  4039f8:	602b      	str	r3, [r5, #0]
  4039fa:	bd38      	pop	{r3, r4, r5, pc}
  4039fc:	20400ab0 	.word	0x20400ab0

00403a00 <_fclose_r>:
  403a00:	b570      	push	{r4, r5, r6, lr}
  403a02:	b159      	cbz	r1, 403a1c <_fclose_r+0x1c>
  403a04:	4605      	mov	r5, r0
  403a06:	460c      	mov	r4, r1
  403a08:	b110      	cbz	r0, 403a10 <_fclose_r+0x10>
  403a0a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403a0c:	2b00      	cmp	r3, #0
  403a0e:	d03c      	beq.n	403a8a <_fclose_r+0x8a>
  403a10:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403a12:	07d8      	lsls	r0, r3, #31
  403a14:	d505      	bpl.n	403a22 <_fclose_r+0x22>
  403a16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403a1a:	b92b      	cbnz	r3, 403a28 <_fclose_r+0x28>
  403a1c:	2600      	movs	r6, #0
  403a1e:	4630      	mov	r0, r6
  403a20:	bd70      	pop	{r4, r5, r6, pc}
  403a22:	89a3      	ldrh	r3, [r4, #12]
  403a24:	0599      	lsls	r1, r3, #22
  403a26:	d53c      	bpl.n	403aa2 <_fclose_r+0xa2>
  403a28:	4621      	mov	r1, r4
  403a2a:	4628      	mov	r0, r5
  403a2c:	f7fe fb74 	bl	402118 <__sflush_r>
  403a30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403a32:	4606      	mov	r6, r0
  403a34:	b133      	cbz	r3, 403a44 <_fclose_r+0x44>
  403a36:	69e1      	ldr	r1, [r4, #28]
  403a38:	4628      	mov	r0, r5
  403a3a:	4798      	blx	r3
  403a3c:	2800      	cmp	r0, #0
  403a3e:	bfb8      	it	lt
  403a40:	f04f 36ff 	movlt.w	r6, #4294967295
  403a44:	89a3      	ldrh	r3, [r4, #12]
  403a46:	061a      	lsls	r2, r3, #24
  403a48:	d422      	bmi.n	403a90 <_fclose_r+0x90>
  403a4a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403a4c:	b141      	cbz	r1, 403a60 <_fclose_r+0x60>
  403a4e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403a52:	4299      	cmp	r1, r3
  403a54:	d002      	beq.n	403a5c <_fclose_r+0x5c>
  403a56:	4628      	mov	r0, r5
  403a58:	f7fe fd7c 	bl	402554 <_free_r>
  403a5c:	2300      	movs	r3, #0
  403a5e:	6323      	str	r3, [r4, #48]	; 0x30
  403a60:	6c61      	ldr	r1, [r4, #68]	; 0x44
  403a62:	b121      	cbz	r1, 403a6e <_fclose_r+0x6e>
  403a64:	4628      	mov	r0, r5
  403a66:	f7fe fd75 	bl	402554 <_free_r>
  403a6a:	2300      	movs	r3, #0
  403a6c:	6463      	str	r3, [r4, #68]	; 0x44
  403a6e:	f7fe fc77 	bl	402360 <__sfp_lock_acquire>
  403a72:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403a74:	2200      	movs	r2, #0
  403a76:	07db      	lsls	r3, r3, #31
  403a78:	81a2      	strh	r2, [r4, #12]
  403a7a:	d50e      	bpl.n	403a9a <_fclose_r+0x9a>
  403a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403a7e:	f7ff f801 	bl	402a84 <__retarget_lock_close_recursive>
  403a82:	f7fe fc73 	bl	40236c <__sfp_lock_release>
  403a86:	4630      	mov	r0, r6
  403a88:	bd70      	pop	{r4, r5, r6, pc}
  403a8a:	f7fe fc3d 	bl	402308 <__sinit>
  403a8e:	e7bf      	b.n	403a10 <_fclose_r+0x10>
  403a90:	6921      	ldr	r1, [r4, #16]
  403a92:	4628      	mov	r0, r5
  403a94:	f7fe fd5e 	bl	402554 <_free_r>
  403a98:	e7d7      	b.n	403a4a <_fclose_r+0x4a>
  403a9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403a9c:	f7fe fff6 	bl	402a8c <__retarget_lock_release_recursive>
  403aa0:	e7ec      	b.n	403a7c <_fclose_r+0x7c>
  403aa2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403aa4:	f7fe fff0 	bl	402a88 <__retarget_lock_acquire_recursive>
  403aa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403aac:	2b00      	cmp	r3, #0
  403aae:	d1bb      	bne.n	403a28 <_fclose_r+0x28>
  403ab0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  403ab2:	f016 0601 	ands.w	r6, r6, #1
  403ab6:	d1b1      	bne.n	403a1c <_fclose_r+0x1c>
  403ab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403aba:	f7fe ffe7 	bl	402a8c <__retarget_lock_release_recursive>
  403abe:	4630      	mov	r0, r6
  403ac0:	bd70      	pop	{r4, r5, r6, pc}
  403ac2:	bf00      	nop

00403ac4 <_fstat_r>:
  403ac4:	b538      	push	{r3, r4, r5, lr}
  403ac6:	460b      	mov	r3, r1
  403ac8:	4c07      	ldr	r4, [pc, #28]	; (403ae8 <_fstat_r+0x24>)
  403aca:	4605      	mov	r5, r0
  403acc:	4611      	mov	r1, r2
  403ace:	4618      	mov	r0, r3
  403ad0:	2300      	movs	r3, #0
  403ad2:	6023      	str	r3, [r4, #0]
  403ad4:	f7fc ffb7 	bl	400a46 <_fstat>
  403ad8:	1c43      	adds	r3, r0, #1
  403ada:	d000      	beq.n	403ade <_fstat_r+0x1a>
  403adc:	bd38      	pop	{r3, r4, r5, pc}
  403ade:	6823      	ldr	r3, [r4, #0]
  403ae0:	2b00      	cmp	r3, #0
  403ae2:	d0fb      	beq.n	403adc <_fstat_r+0x18>
  403ae4:	602b      	str	r3, [r5, #0]
  403ae6:	bd38      	pop	{r3, r4, r5, pc}
  403ae8:	20400ab0 	.word	0x20400ab0

00403aec <_isatty_r>:
  403aec:	b538      	push	{r3, r4, r5, lr}
  403aee:	4c07      	ldr	r4, [pc, #28]	; (403b0c <_isatty_r+0x20>)
  403af0:	2300      	movs	r3, #0
  403af2:	4605      	mov	r5, r0
  403af4:	4608      	mov	r0, r1
  403af6:	6023      	str	r3, [r4, #0]
  403af8:	f7fc ffaa 	bl	400a50 <_isatty>
  403afc:	1c43      	adds	r3, r0, #1
  403afe:	d000      	beq.n	403b02 <_isatty_r+0x16>
  403b00:	bd38      	pop	{r3, r4, r5, pc}
  403b02:	6823      	ldr	r3, [r4, #0]
  403b04:	2b00      	cmp	r3, #0
  403b06:	d0fb      	beq.n	403b00 <_isatty_r+0x14>
  403b08:	602b      	str	r3, [r5, #0]
  403b0a:	bd38      	pop	{r3, r4, r5, pc}
  403b0c:	20400ab0 	.word	0x20400ab0

00403b10 <_lseek_r>:
  403b10:	b570      	push	{r4, r5, r6, lr}
  403b12:	460d      	mov	r5, r1
  403b14:	4c08      	ldr	r4, [pc, #32]	; (403b38 <_lseek_r+0x28>)
  403b16:	4611      	mov	r1, r2
  403b18:	4606      	mov	r6, r0
  403b1a:	461a      	mov	r2, r3
  403b1c:	4628      	mov	r0, r5
  403b1e:	2300      	movs	r3, #0
  403b20:	6023      	str	r3, [r4, #0]
  403b22:	f7fc ff97 	bl	400a54 <_lseek>
  403b26:	1c43      	adds	r3, r0, #1
  403b28:	d000      	beq.n	403b2c <_lseek_r+0x1c>
  403b2a:	bd70      	pop	{r4, r5, r6, pc}
  403b2c:	6823      	ldr	r3, [r4, #0]
  403b2e:	2b00      	cmp	r3, #0
  403b30:	d0fb      	beq.n	403b2a <_lseek_r+0x1a>
  403b32:	6033      	str	r3, [r6, #0]
  403b34:	bd70      	pop	{r4, r5, r6, pc}
  403b36:	bf00      	nop
  403b38:	20400ab0 	.word	0x20400ab0

00403b3c <_read_r>:
  403b3c:	b570      	push	{r4, r5, r6, lr}
  403b3e:	460d      	mov	r5, r1
  403b40:	4c08      	ldr	r4, [pc, #32]	; (403b64 <_read_r+0x28>)
  403b42:	4611      	mov	r1, r2
  403b44:	4606      	mov	r6, r0
  403b46:	461a      	mov	r2, r3
  403b48:	4628      	mov	r0, r5
  403b4a:	2300      	movs	r3, #0
  403b4c:	6023      	str	r3, [r4, #0]
  403b4e:	f7fc fb41 	bl	4001d4 <_read>
  403b52:	1c43      	adds	r3, r0, #1
  403b54:	d000      	beq.n	403b58 <_read_r+0x1c>
  403b56:	bd70      	pop	{r4, r5, r6, pc}
  403b58:	6823      	ldr	r3, [r4, #0]
  403b5a:	2b00      	cmp	r3, #0
  403b5c:	d0fb      	beq.n	403b56 <_read_r+0x1a>
  403b5e:	6033      	str	r3, [r6, #0]
  403b60:	bd70      	pop	{r4, r5, r6, pc}
  403b62:	bf00      	nop
  403b64:	20400ab0 	.word	0x20400ab0

00403b68 <__aeabi_uldivmod>:
  403b68:	b953      	cbnz	r3, 403b80 <__aeabi_uldivmod+0x18>
  403b6a:	b94a      	cbnz	r2, 403b80 <__aeabi_uldivmod+0x18>
  403b6c:	2900      	cmp	r1, #0
  403b6e:	bf08      	it	eq
  403b70:	2800      	cmpeq	r0, #0
  403b72:	bf1c      	itt	ne
  403b74:	f04f 31ff 	movne.w	r1, #4294967295
  403b78:	f04f 30ff 	movne.w	r0, #4294967295
  403b7c:	f000 b97a 	b.w	403e74 <__aeabi_idiv0>
  403b80:	f1ad 0c08 	sub.w	ip, sp, #8
  403b84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403b88:	f000 f806 	bl	403b98 <__udivmoddi4>
  403b8c:	f8dd e004 	ldr.w	lr, [sp, #4]
  403b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403b94:	b004      	add	sp, #16
  403b96:	4770      	bx	lr

00403b98 <__udivmoddi4>:
  403b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403b9c:	468c      	mov	ip, r1
  403b9e:	460d      	mov	r5, r1
  403ba0:	4604      	mov	r4, r0
  403ba2:	9e08      	ldr	r6, [sp, #32]
  403ba4:	2b00      	cmp	r3, #0
  403ba6:	d151      	bne.n	403c4c <__udivmoddi4+0xb4>
  403ba8:	428a      	cmp	r2, r1
  403baa:	4617      	mov	r7, r2
  403bac:	d96d      	bls.n	403c8a <__udivmoddi4+0xf2>
  403bae:	fab2 fe82 	clz	lr, r2
  403bb2:	f1be 0f00 	cmp.w	lr, #0
  403bb6:	d00b      	beq.n	403bd0 <__udivmoddi4+0x38>
  403bb8:	f1ce 0c20 	rsb	ip, lr, #32
  403bbc:	fa01 f50e 	lsl.w	r5, r1, lr
  403bc0:	fa20 fc0c 	lsr.w	ip, r0, ip
  403bc4:	fa02 f70e 	lsl.w	r7, r2, lr
  403bc8:	ea4c 0c05 	orr.w	ip, ip, r5
  403bcc:	fa00 f40e 	lsl.w	r4, r0, lr
  403bd0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  403bd4:	0c25      	lsrs	r5, r4, #16
  403bd6:	fbbc f8fa 	udiv	r8, ip, sl
  403bda:	fa1f f987 	uxth.w	r9, r7
  403bde:	fb0a cc18 	mls	ip, sl, r8, ip
  403be2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  403be6:	fb08 f309 	mul.w	r3, r8, r9
  403bea:	42ab      	cmp	r3, r5
  403bec:	d90a      	bls.n	403c04 <__udivmoddi4+0x6c>
  403bee:	19ed      	adds	r5, r5, r7
  403bf0:	f108 32ff 	add.w	r2, r8, #4294967295
  403bf4:	f080 8123 	bcs.w	403e3e <__udivmoddi4+0x2a6>
  403bf8:	42ab      	cmp	r3, r5
  403bfa:	f240 8120 	bls.w	403e3e <__udivmoddi4+0x2a6>
  403bfe:	f1a8 0802 	sub.w	r8, r8, #2
  403c02:	443d      	add	r5, r7
  403c04:	1aed      	subs	r5, r5, r3
  403c06:	b2a4      	uxth	r4, r4
  403c08:	fbb5 f0fa 	udiv	r0, r5, sl
  403c0c:	fb0a 5510 	mls	r5, sl, r0, r5
  403c10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  403c14:	fb00 f909 	mul.w	r9, r0, r9
  403c18:	45a1      	cmp	r9, r4
  403c1a:	d909      	bls.n	403c30 <__udivmoddi4+0x98>
  403c1c:	19e4      	adds	r4, r4, r7
  403c1e:	f100 33ff 	add.w	r3, r0, #4294967295
  403c22:	f080 810a 	bcs.w	403e3a <__udivmoddi4+0x2a2>
  403c26:	45a1      	cmp	r9, r4
  403c28:	f240 8107 	bls.w	403e3a <__udivmoddi4+0x2a2>
  403c2c:	3802      	subs	r0, #2
  403c2e:	443c      	add	r4, r7
  403c30:	eba4 0409 	sub.w	r4, r4, r9
  403c34:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403c38:	2100      	movs	r1, #0
  403c3a:	2e00      	cmp	r6, #0
  403c3c:	d061      	beq.n	403d02 <__udivmoddi4+0x16a>
  403c3e:	fa24 f40e 	lsr.w	r4, r4, lr
  403c42:	2300      	movs	r3, #0
  403c44:	6034      	str	r4, [r6, #0]
  403c46:	6073      	str	r3, [r6, #4]
  403c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403c4c:	428b      	cmp	r3, r1
  403c4e:	d907      	bls.n	403c60 <__udivmoddi4+0xc8>
  403c50:	2e00      	cmp	r6, #0
  403c52:	d054      	beq.n	403cfe <__udivmoddi4+0x166>
  403c54:	2100      	movs	r1, #0
  403c56:	e886 0021 	stmia.w	r6, {r0, r5}
  403c5a:	4608      	mov	r0, r1
  403c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403c60:	fab3 f183 	clz	r1, r3
  403c64:	2900      	cmp	r1, #0
  403c66:	f040 808e 	bne.w	403d86 <__udivmoddi4+0x1ee>
  403c6a:	42ab      	cmp	r3, r5
  403c6c:	d302      	bcc.n	403c74 <__udivmoddi4+0xdc>
  403c6e:	4282      	cmp	r2, r0
  403c70:	f200 80fa 	bhi.w	403e68 <__udivmoddi4+0x2d0>
  403c74:	1a84      	subs	r4, r0, r2
  403c76:	eb65 0503 	sbc.w	r5, r5, r3
  403c7a:	2001      	movs	r0, #1
  403c7c:	46ac      	mov	ip, r5
  403c7e:	2e00      	cmp	r6, #0
  403c80:	d03f      	beq.n	403d02 <__udivmoddi4+0x16a>
  403c82:	e886 1010 	stmia.w	r6, {r4, ip}
  403c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403c8a:	b912      	cbnz	r2, 403c92 <__udivmoddi4+0xfa>
  403c8c:	2701      	movs	r7, #1
  403c8e:	fbb7 f7f2 	udiv	r7, r7, r2
  403c92:	fab7 fe87 	clz	lr, r7
  403c96:	f1be 0f00 	cmp.w	lr, #0
  403c9a:	d134      	bne.n	403d06 <__udivmoddi4+0x16e>
  403c9c:	1beb      	subs	r3, r5, r7
  403c9e:	0c3a      	lsrs	r2, r7, #16
  403ca0:	fa1f fc87 	uxth.w	ip, r7
  403ca4:	2101      	movs	r1, #1
  403ca6:	fbb3 f8f2 	udiv	r8, r3, r2
  403caa:	0c25      	lsrs	r5, r4, #16
  403cac:	fb02 3318 	mls	r3, r2, r8, r3
  403cb0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403cb4:	fb0c f308 	mul.w	r3, ip, r8
  403cb8:	42ab      	cmp	r3, r5
  403cba:	d907      	bls.n	403ccc <__udivmoddi4+0x134>
  403cbc:	19ed      	adds	r5, r5, r7
  403cbe:	f108 30ff 	add.w	r0, r8, #4294967295
  403cc2:	d202      	bcs.n	403cca <__udivmoddi4+0x132>
  403cc4:	42ab      	cmp	r3, r5
  403cc6:	f200 80d1 	bhi.w	403e6c <__udivmoddi4+0x2d4>
  403cca:	4680      	mov	r8, r0
  403ccc:	1aed      	subs	r5, r5, r3
  403cce:	b2a3      	uxth	r3, r4
  403cd0:	fbb5 f0f2 	udiv	r0, r5, r2
  403cd4:	fb02 5510 	mls	r5, r2, r0, r5
  403cd8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  403cdc:	fb0c fc00 	mul.w	ip, ip, r0
  403ce0:	45a4      	cmp	ip, r4
  403ce2:	d907      	bls.n	403cf4 <__udivmoddi4+0x15c>
  403ce4:	19e4      	adds	r4, r4, r7
  403ce6:	f100 33ff 	add.w	r3, r0, #4294967295
  403cea:	d202      	bcs.n	403cf2 <__udivmoddi4+0x15a>
  403cec:	45a4      	cmp	ip, r4
  403cee:	f200 80b8 	bhi.w	403e62 <__udivmoddi4+0x2ca>
  403cf2:	4618      	mov	r0, r3
  403cf4:	eba4 040c 	sub.w	r4, r4, ip
  403cf8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403cfc:	e79d      	b.n	403c3a <__udivmoddi4+0xa2>
  403cfe:	4631      	mov	r1, r6
  403d00:	4630      	mov	r0, r6
  403d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403d06:	f1ce 0420 	rsb	r4, lr, #32
  403d0a:	fa05 f30e 	lsl.w	r3, r5, lr
  403d0e:	fa07 f70e 	lsl.w	r7, r7, lr
  403d12:	fa20 f804 	lsr.w	r8, r0, r4
  403d16:	0c3a      	lsrs	r2, r7, #16
  403d18:	fa25 f404 	lsr.w	r4, r5, r4
  403d1c:	ea48 0803 	orr.w	r8, r8, r3
  403d20:	fbb4 f1f2 	udiv	r1, r4, r2
  403d24:	ea4f 4518 	mov.w	r5, r8, lsr #16
  403d28:	fb02 4411 	mls	r4, r2, r1, r4
  403d2c:	fa1f fc87 	uxth.w	ip, r7
  403d30:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  403d34:	fb01 f30c 	mul.w	r3, r1, ip
  403d38:	42ab      	cmp	r3, r5
  403d3a:	fa00 f40e 	lsl.w	r4, r0, lr
  403d3e:	d909      	bls.n	403d54 <__udivmoddi4+0x1bc>
  403d40:	19ed      	adds	r5, r5, r7
  403d42:	f101 30ff 	add.w	r0, r1, #4294967295
  403d46:	f080 808a 	bcs.w	403e5e <__udivmoddi4+0x2c6>
  403d4a:	42ab      	cmp	r3, r5
  403d4c:	f240 8087 	bls.w	403e5e <__udivmoddi4+0x2c6>
  403d50:	3902      	subs	r1, #2
  403d52:	443d      	add	r5, r7
  403d54:	1aeb      	subs	r3, r5, r3
  403d56:	fa1f f588 	uxth.w	r5, r8
  403d5a:	fbb3 f0f2 	udiv	r0, r3, r2
  403d5e:	fb02 3310 	mls	r3, r2, r0, r3
  403d62:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403d66:	fb00 f30c 	mul.w	r3, r0, ip
  403d6a:	42ab      	cmp	r3, r5
  403d6c:	d907      	bls.n	403d7e <__udivmoddi4+0x1e6>
  403d6e:	19ed      	adds	r5, r5, r7
  403d70:	f100 38ff 	add.w	r8, r0, #4294967295
  403d74:	d26f      	bcs.n	403e56 <__udivmoddi4+0x2be>
  403d76:	42ab      	cmp	r3, r5
  403d78:	d96d      	bls.n	403e56 <__udivmoddi4+0x2be>
  403d7a:	3802      	subs	r0, #2
  403d7c:	443d      	add	r5, r7
  403d7e:	1aeb      	subs	r3, r5, r3
  403d80:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  403d84:	e78f      	b.n	403ca6 <__udivmoddi4+0x10e>
  403d86:	f1c1 0720 	rsb	r7, r1, #32
  403d8a:	fa22 f807 	lsr.w	r8, r2, r7
  403d8e:	408b      	lsls	r3, r1
  403d90:	fa05 f401 	lsl.w	r4, r5, r1
  403d94:	ea48 0303 	orr.w	r3, r8, r3
  403d98:	fa20 fe07 	lsr.w	lr, r0, r7
  403d9c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403da0:	40fd      	lsrs	r5, r7
  403da2:	ea4e 0e04 	orr.w	lr, lr, r4
  403da6:	fbb5 f9fc 	udiv	r9, r5, ip
  403daa:	ea4f 441e 	mov.w	r4, lr, lsr #16
  403dae:	fb0c 5519 	mls	r5, ip, r9, r5
  403db2:	fa1f f883 	uxth.w	r8, r3
  403db6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  403dba:	fb09 f408 	mul.w	r4, r9, r8
  403dbe:	42ac      	cmp	r4, r5
  403dc0:	fa02 f201 	lsl.w	r2, r2, r1
  403dc4:	fa00 fa01 	lsl.w	sl, r0, r1
  403dc8:	d908      	bls.n	403ddc <__udivmoddi4+0x244>
  403dca:	18ed      	adds	r5, r5, r3
  403dcc:	f109 30ff 	add.w	r0, r9, #4294967295
  403dd0:	d243      	bcs.n	403e5a <__udivmoddi4+0x2c2>
  403dd2:	42ac      	cmp	r4, r5
  403dd4:	d941      	bls.n	403e5a <__udivmoddi4+0x2c2>
  403dd6:	f1a9 0902 	sub.w	r9, r9, #2
  403dda:	441d      	add	r5, r3
  403ddc:	1b2d      	subs	r5, r5, r4
  403dde:	fa1f fe8e 	uxth.w	lr, lr
  403de2:	fbb5 f0fc 	udiv	r0, r5, ip
  403de6:	fb0c 5510 	mls	r5, ip, r0, r5
  403dea:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  403dee:	fb00 f808 	mul.w	r8, r0, r8
  403df2:	45a0      	cmp	r8, r4
  403df4:	d907      	bls.n	403e06 <__udivmoddi4+0x26e>
  403df6:	18e4      	adds	r4, r4, r3
  403df8:	f100 35ff 	add.w	r5, r0, #4294967295
  403dfc:	d229      	bcs.n	403e52 <__udivmoddi4+0x2ba>
  403dfe:	45a0      	cmp	r8, r4
  403e00:	d927      	bls.n	403e52 <__udivmoddi4+0x2ba>
  403e02:	3802      	subs	r0, #2
  403e04:	441c      	add	r4, r3
  403e06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  403e0a:	eba4 0408 	sub.w	r4, r4, r8
  403e0e:	fba0 8902 	umull	r8, r9, r0, r2
  403e12:	454c      	cmp	r4, r9
  403e14:	46c6      	mov	lr, r8
  403e16:	464d      	mov	r5, r9
  403e18:	d315      	bcc.n	403e46 <__udivmoddi4+0x2ae>
  403e1a:	d012      	beq.n	403e42 <__udivmoddi4+0x2aa>
  403e1c:	b156      	cbz	r6, 403e34 <__udivmoddi4+0x29c>
  403e1e:	ebba 030e 	subs.w	r3, sl, lr
  403e22:	eb64 0405 	sbc.w	r4, r4, r5
  403e26:	fa04 f707 	lsl.w	r7, r4, r7
  403e2a:	40cb      	lsrs	r3, r1
  403e2c:	431f      	orrs	r7, r3
  403e2e:	40cc      	lsrs	r4, r1
  403e30:	6037      	str	r7, [r6, #0]
  403e32:	6074      	str	r4, [r6, #4]
  403e34:	2100      	movs	r1, #0
  403e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403e3a:	4618      	mov	r0, r3
  403e3c:	e6f8      	b.n	403c30 <__udivmoddi4+0x98>
  403e3e:	4690      	mov	r8, r2
  403e40:	e6e0      	b.n	403c04 <__udivmoddi4+0x6c>
  403e42:	45c2      	cmp	sl, r8
  403e44:	d2ea      	bcs.n	403e1c <__udivmoddi4+0x284>
  403e46:	ebb8 0e02 	subs.w	lr, r8, r2
  403e4a:	eb69 0503 	sbc.w	r5, r9, r3
  403e4e:	3801      	subs	r0, #1
  403e50:	e7e4      	b.n	403e1c <__udivmoddi4+0x284>
  403e52:	4628      	mov	r0, r5
  403e54:	e7d7      	b.n	403e06 <__udivmoddi4+0x26e>
  403e56:	4640      	mov	r0, r8
  403e58:	e791      	b.n	403d7e <__udivmoddi4+0x1e6>
  403e5a:	4681      	mov	r9, r0
  403e5c:	e7be      	b.n	403ddc <__udivmoddi4+0x244>
  403e5e:	4601      	mov	r1, r0
  403e60:	e778      	b.n	403d54 <__udivmoddi4+0x1bc>
  403e62:	3802      	subs	r0, #2
  403e64:	443c      	add	r4, r7
  403e66:	e745      	b.n	403cf4 <__udivmoddi4+0x15c>
  403e68:	4608      	mov	r0, r1
  403e6a:	e708      	b.n	403c7e <__udivmoddi4+0xe6>
  403e6c:	f1a8 0802 	sub.w	r8, r8, #2
  403e70:	443d      	add	r5, r7
  403e72:	e72b      	b.n	403ccc <__udivmoddi4+0x134>

00403e74 <__aeabi_idiv0>:
  403e74:	4770      	bx	lr
  403e76:	bf00      	nop
  403e78:	72617453 	.word	0x72617453
  403e7c:	676e6974 	.word	0x676e6974
  403e80:	0a0d0a0d 	.word	0x0a0d0a0d
  403e84:	00000000 	.word	0x00000000
  403e88:	64616552 	.word	0x64616552
  403e8c:	74614420 	.word	0x74614420
  403e90:	000a0d61 	.word	0x000a0d61
  403e94:	00006425 	.word	0x00006425
  403e98:	0a0d6425 	.word	0x0a0d6425
  403e9c:	00000000 	.word	0x00000000

00403ea0 <_global_impure_ptr>:
  403ea0:	20400010 0000000a 33323130 37363534     ..@ ....01234567
  403eb0:	42413938 46454443 00000000 33323130     89ABCDEF....0123
  403ec0:	37363534 62613938 66656463 00000000     456789abcdef....
  403ed0:	6c756e28 0000296c                       (null)..

00403ed8 <blanks.7217>:
  403ed8:	20202020 20202020 20202020 20202020                     

00403ee8 <zeroes.7218>:
  403ee8:	30303030 30303030 30303030 30303030     0000000000000000
  403ef8:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00403f08 <_ctype_>:
  403f08:	20202000 20202020 28282020 20282828     .         ((((( 
  403f18:	20202020 20202020 20202020 20202020                     
  403f28:	10108820 10101010 10101010 10101010      ...............
  403f38:	04040410 04040404 10040404 10101010     ................
  403f48:	41411010 41414141 01010101 01010101     ..AAAAAA........
  403f58:	01010101 01010101 01010101 10101010     ................
  403f68:	42421010 42424242 02020202 02020202     ..BBBBBB........
  403f78:	02020202 02020202 02020202 10101010     ................
  403f88:	00000020 00000000 00000000 00000000      ...............
	...

0040400c <_init>:
  40400c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40400e:	bf00      	nop
  404010:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404012:	bc08      	pop	{r3}
  404014:	469e      	mov	lr, r3
  404016:	4770      	bx	lr

00404018 <__init_array_start>:
  404018:	004020f9 	.word	0x004020f9

0040401c <__frame_dummy_init_array_entry>:
  40401c:	0040018d                                ..@.

00404020 <_fini>:
  404020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404022:	bf00      	nop
  404024:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404026:	bc08      	pop	{r3}
  404028:	469e      	mov	lr, r3
  40402a:	4770      	bx	lr

0040402c <__fini_array_start>:
  40402c:	00400169 	.word	0x00400169
